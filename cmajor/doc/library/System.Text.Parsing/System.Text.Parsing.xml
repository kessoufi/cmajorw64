<library>
    <name>System.Text.Parsing</name>
    <style>../../style/cmdoc.css</style>
    <namespaces>
        <namespace id="System.Text.Parsing">
            <name>System.Text.Parsing</name>
            <classes>
                <class id="1385476">
                    <name>ActionParser</name>
                    <groupName>ActionParser</groupName>
                    <syntax> public class ActionParser;</syntax>
                    <baseClass ref="1385482"/>
                    <constructors>
                        <constructor id="constructor_ActionParser_A3D419CE062EB871214024A812E9F0F6D307670B">
                            <name>ActionParser(const String&lt;uchar>&amp; name_, Parser* child_)</name>
                            <syntax>public ActionParser(const String&lt;uchar>&amp; name_, Parser* child_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.1378718"/>
                                </parameter>
                                <parameter>
                                    <name>child_</name>
                                    <type ref="type.1385561"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_ActionParser_04FF93BB91F45761B6C02A4AE95D118F65E7FB80">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Action_ActionParser_7E1D5A7A3214868A5B73DF0D102F8BFE8CA157A8">
                            <name>Action() const</name>
                            <syntax>public ParsingAction Action() const;</syntax>
                            <returnType ref="1385474"/>
                        </function>
                        <function id="member_function_Failure_ActionParser_4641A209F3C4D38AC6D7AE85DA55792D60D7FF45">
                            <name>Failure() const</name>
                            <syntax>public FailureAction Failure() const;</syntax>
                            <returnType ref="1385475"/>
                        </function>
                        <function id="member_function_FailureCode_ActionParser_A4BBFB7865FC97611CB362B5BB8791B43E851118">
                            <name>FailureCode() const</name>
                            <syntax>public CompoundStatement* FailureCode() const;</syntax>
                            <returnType ref="type.1383549"/>
                        </function>
                        <function id="member_function_MethodName_ActionParser_24AC3A9ED74A19C2B2761E90C778EF46BF702F94">
                            <name>MethodName()</name>
                            <syntax>public String&lt;uchar> MethodName();</syntax>
                            <returnType ref="type.1378697"/>
                        </function>
                        <function id="member_function_Parse_ActionParser_AFAE656F66341525B29E731D8BD5DF6E3DA4AD83">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                        <function id="member_function_SetAction_ActionParser_7F42755E09F6B27F76E6B6A10049B8A3331B5C63">
                            <name>SetAction(ParsingAction action_)</name>
                            <syntax>public void SetAction(ParsingAction action_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>action_</name>
                                    <type ref="1385474"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetFailure_ActionParser_2BC92166D762C99E9F1D568256A0177D4434D554">
                            <name>SetFailure(FailureAction failureAction_)</name>
                            <syntax>public void SetFailure(FailureAction failureAction_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>failureAction_</name>
                                    <type ref="1385475"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetFailureCode_ActionParser_6B3A324DC05DC6769797C1CC7E65EB9CFDE00590">
                            <name>SetFailureCode(CompoundStatement* failureCode_)</name>
                            <syntax>public void SetFailureCode(CompoundStatement* failureCode_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>failureCode_</name>
                                    <type ref="type.1383549"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetSuccessCode_ActionParser_D21842078345AB507BB7DE3EF57E0F216E738B11">
                            <name>SetSuccessCode(CompoundStatement* successCode_)</name>
                            <syntax>public void SetSuccessCode(CompoundStatement* successCode_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>successCode_</name>
                                    <type ref="type.1383549"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SuccessCode_ActionParser_B69745834019AF1EBBF911DAAD30342B58348F40">
                            <name>SuccessCode() const</name>
                            <syntax>public CompoundStatement* SuccessCode() const;</syntax>
                            <returnType ref="type.1383549"/>
                        </function>
                        <function id="member_function_VariableName_ActionParser_794D146116C34EF15F073FC6A56D058AD4C0FD15">
                            <name>VariableName()</name>
                            <syntax>public String&lt;uchar> VariableName();</syntax>
                            <returnType ref="type.1378697"/>
                        </function>
                    </functions>
                </class>
                <class id="1385687">
                    <name>AlphabeticParser</name>
                    <groupName>AlphabeticParser</groupName>
                    <syntax> public class AlphabeticParser;</syntax>
                    <baseClass ref="1385560"/>
                    <constructors>
                        <constructor id="default_constructor_AlphabeticParser_E1AFD8DEA5209DF9CF410E4E992CBDD35E0781EA">
                            <name>AlphabeticParser()</name>
                            <syntax>public nothrow AlphabeticParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_AlphabeticParser_4CDD6804153C9DBC9112A458E2A3115B3BA7F17C">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_AlphabeticParser_A9520121328DE85258CB97CC3FD23DD136BADDFC">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                    </functions>
                </class>
                <class id="1385502">
                    <name>AlternativeParser</name>
                    <groupName>AlternativeParser</groupName>
                    <syntax> public class AlternativeParser;</syntax>
                    <baseClass ref="1385496"/>
                    <constructors>
                        <constructor id="constructor_AlternativeParser_650A613B29EDC1FEA31B170247C9AAA68965A3A2">
                            <name>AlternativeParser(Parser* left_, Parser* right_)</name>
                            <syntax>public AlternativeParser(Parser* left_, Parser* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.1385561"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.1385561"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_AlternativeParser_73B2C3277D9842D2A60E5D3BB1DA512A86778646">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_AlternativeParser_EB2CE400062FD63D2634CE919B41AC2445D8FCAA">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                    </functions>
                </class>
                <class id="1385693">
                    <name>AnyCharParser</name>
                    <groupName>AnyCharParser</groupName>
                    <syntax> public class AnyCharParser;</syntax>
                    <baseClass ref="1385560"/>
                    <constructors>
                        <constructor id="default_constructor_AnyCharParser_423FBF11D0ED1DD1C7817F6B464B1DA7098029BE">
                            <name>AnyCharParser()</name>
                            <syntax>public nothrow AnyCharParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_AnyCharParser_4CF4F4A2A1691B1847B89B4E657F1E4BF51E4718">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_AnyCharParser_BDFFEEE8E7D3DCA634CB3645D1C6A1593FFF5730">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                    </functions>
                </class>
                <class id="1385550">
                    <name>ArgumentCollector</name>
                    <groupName>ArgumentCollector</groupName>
                    <syntax> public class ArgumentCollector;</syntax>
                    <baseClass ref="1383437"/>
                    <functions>
                        <function id="member_function_Accept_ArgumentCollector_6CE88579B79051DA62C9365EFB51F1706567E0D0">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_AddArgument_ArgumentCollector_DA723F3653FCCAB3FBE2C4F6D099F74C2F8C2574">
                            <name>AddArgument(DomObject* argument)</name>
                            <syntax>public override void AddArgument(DomObject* argument);</syntax>
                            <parameters>
                                <parameter>
                                    <name>argument</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Arguments_ArgumentCollector_A4E03F4E5CC686FACE13FDF870BAB50C763C04F2">
                            <name>Arguments()</name>
                            <syntax>public List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>> Arguments();</syntax>
                            <returnType ref="type.1385130"/>
                        </function>
                    </functions>
                </class>
                <class id="1385699">
                    <name>AttrOrVar</name>
                    <groupName>AttrOrVar</groupName>
                    <syntax> public class AttrOrVar;</syntax>
                    <constructors>
                        <constructor id="constructor_AttrOrVar_80B5D160D6CE01E05B7744A06F85AA397DDCC8CD">
                            <name>AttrOrVar(const String&lt;uchar>&amp; type_, const String&lt;uchar>&amp; name_)</name>
                            <syntax>public nothrow AttrOrVar(const String&lt;uchar>&amp; type_, const String&lt;uchar>&amp; name_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>type_</name>
                                    <type ref="type.1378718"/>
                                </parameter>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.1378718"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Name_AttrOrVar_68CAAABAC933DA72DDE108233A340AFE126A08FB">
                            <name>Name() const</name>
                            <syntax>public nothrow inline const String&lt;uchar>&amp; Name() const;</syntax>
                            <returnType ref="type.1378718"/>
                        </function>
                        <function id="member_function_Type_AttrOrVar_835AD9BC08FFB51781AA902D54A2CB8F612B2F72">
                            <name>Type() const</name>
                            <syntax>public nothrow inline const String&lt;uchar>&amp; Type() const;</syntax>
                            <returnType ref="type.1378718"/>
                        </function>
                    </functions>
                </class>
                <class id="1385685">
                    <name>BaseCharParser</name>
                    <groupName>BaseCharParser</groupName>
                    <syntax> public class BaseCharParser;</syntax>
                    <baseClass ref="1385560"/>
                    <constructors>
                        <constructor id="default_constructor_BaseCharParser_61C40EE157357D4CD42354FE0A603DF22C514284">
                            <name>BaseCharParser()</name>
                            <syntax>public nothrow BaseCharParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_BaseCharParser_3F97EB60D09015C9603275F45F4B6A2B16CAF720">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_BaseCharParser_D25DF03A2204691F1D0D80755153F5C12641B7AE">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                    </functions>
                </class>
                <class id="1385496">
                    <name>BinaryParser</name>
                    <groupName>BinaryParser</groupName>
                    <syntax>abstract public class BinaryParser;</syntax>
                    <baseClass ref="1385560"/>
                    <constructors>
                        <constructor id="constructor_BinaryParser_459621CD50EBCEAA998C0787559E55F43E70DCBA">
                            <name>BinaryParser(const String&lt;uchar>&amp; name_, Parser* left_, Parser* right_, const String&lt;uchar>&amp; info_)</name>
                            <syntax>public BinaryParser(const String&lt;uchar>&amp; name_, Parser* left_, Parser* right_, const String&lt;uchar>&amp; info_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.1378718"/>
                                </parameter>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.1385561"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.1385561"/>
                                </parameter>
                                <parameter>
                                    <name>info_</name>
                                    <type ref="type.1378718"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Left_BinaryParser_FE60510BDB71632960F1C5C87217FCA01A6CE5B4">
                            <name>Left() const</name>
                            <syntax>public nothrow inline Parser* Left() const;</syntax>
                            <returnType ref="type.1385561"/>
                        </function>
                        <function id="member_function_Right_BinaryParser_688BA3D7785A21D4CB397B020BDE88DC99B0DBCC">
                            <name>Right() const</name>
                            <syntax>public nothrow inline Parser* Right() const;</syntax>
                            <returnType ref="type.1385561"/>
                        </function>
                    </functions>
                </class>
                <class id="1385615">
                    <name>CasedLetterParser</name>
                    <groupName>CasedLetterParser</groupName>
                    <syntax> public class CasedLetterParser;</syntax>
                    <baseClass ref="1385560"/>
                    <constructors>
                        <constructor id="default_constructor_CasedLetterParser_28B622146ED51553B8D522BAEE03B0847EE86873">
                            <name>CasedLetterParser()</name>
                            <syntax>public nothrow CasedLetterParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_CasedLetterParser_BAE41405A5FC021E7DEB6CC98BCA2158C45AC73D">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_CasedLetterParser_9E5916771023D33975683C32636D039DF99E7A6C">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                    </functions>
                </class>
                <class id="1385583">
                    <name>CharParser</name>
                    <groupName>CharParser</groupName>
                    <syntax> public class CharParser;</syntax>
                    <baseClass ref="1385560"/>
                    <constructors>
                        <constructor id="constructor_CharParser_000296F9812F7C875F6A1FE7FC056A7830CE3E37">
                            <name>CharParser(uchar c_)</name>
                            <syntax>public nothrow CharParser(uchar c_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c_</name>
                                    <type ref="type.1377798"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_CharParser_90CF6875A059FBBB248D30E53AB4F2D70757C5B8">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Char_CharParser_4CFF7053501275E5D0CCD374597985642BAFF47A">
                            <name>Char() const</name>
                            <syntax>public nothrow inline uchar Char() const;</syntax>
                            <returnType ref="type.1377798"/>
                        </function>
                        <function id="member_function_Parse_CharParser_D06F0C614F5B2B7582D46AC3F63E78813009AF52">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                    </functions>
                </class>
                <class id="1385591">
                    <name>CharRange</name>
                    <groupName>CharRange</groupName>
                    <syntax> public class CharRange;</syntax>
                    <constructors>
                        <constructor id="constructor_CharRange_DB5B00B663211F735D792685DB05ED438824124A">
                            <name>CharRange(uchar begin_)</name>
                            <syntax>public nothrow CharRange(uchar begin_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>begin_</name>
                                    <type ref="type.1377798"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_CharRange_F3430FDA456C2DB45859C0C5655C5E2089B4901C">
                            <name>CharRange(uchar begin_, uchar end_)</name>
                            <syntax>public nothrow CharRange(uchar begin_, uchar end_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>begin_</name>
                                    <type ref="type.1377798"/>
                                </parameter>
                                <parameter>
                                    <name>end_</name>
                                    <type ref="type.1377798"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Begin_CharRange_FE0640795188697A3CC4441D26898B4D21BBA37B">
                            <name>Begin() const</name>
                            <syntax>public nothrow inline uchar Begin() const;</syntax>
                            <returnType ref="type.1377798"/>
                        </function>
                        <function id="member_function_End_CharRange_183243ED483F58471997D6233F4505C48FF7C4EB">
                            <name>End() const</name>
                            <syntax>public nothrow inline uchar End() const;</syntax>
                            <returnType ref="type.1377798"/>
                        </function>
                        <function id="member_function_Includes_CharRange_7A008F40E93ABF3ED78FD55C06FDDE73E694A7EA">
                            <name>Includes(uchar c) const</name>
                            <syntax>public nothrow inline bool Includes(uchar c) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.1377798"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1377785"/>
                        </function>
                        <function id="member_function_SetBegin_CharRange_DE74DA82236B69A580D4477C5410D3357EC250D2">
                            <name>SetBegin(uchar begin_)</name>
                            <syntax>public nothrow inline void SetBegin(uchar begin_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>begin_</name>
                                    <type ref="type.1377798"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetEnd_CharRange_33714E97E052CDDF2A86EF9E3E899106AF0B63E7">
                            <name>SetEnd(uchar end_)</name>
                            <syntax>public nothrow inline void SetEnd(uchar end_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>end_</name>
                                    <type ref="type.1377798"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1385595">
                    <name>CharSetParser</name>
                    <groupName>CharSetParser</groupName>
                    <syntax> public class CharSetParser;</syntax>
                    <baseClass ref="1385560"/>
                    <constructors>
                        <constructor id="constructor_CharSetParser_D6E385FFA6E70831056E09A35F5F65D04FC23269">
                            <name>CharSetParser(const String&lt;uchar>&amp; s_)</name>
                            <syntax>public CharSetParser(const String&lt;uchar>&amp; s_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s_</name>
                                    <type ref="type.1378718"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_CharSetParser_3AF8EC830BC4FD63B9BBFDD87DB7FA1C48ABEE53">
                            <name>CharSetParser(const String&lt;uchar>&amp; s_, bool inverse_)</name>
                            <syntax>public CharSetParser(const String&lt;uchar>&amp; s_, bool inverse_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s_</name>
                                    <type ref="type.1378718"/>
                                </parameter>
                                <parameter>
                                    <name>inverse_</name>
                                    <type ref="type.1377785"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_CharSetParser_EDDAD23ED5AC7D3468A1D0E3894D6F53F8E61B78">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Inverse_CharSetParser_4D82550F8A3C3CA3B335FAF07DF0BA583D026B2B">
                            <name>Inverse() const</name>
                            <syntax>public nothrow inline bool Inverse() const;</syntax>
                            <returnType ref="type.1377785"/>
                        </function>
                        <function id="member_function_Parse_CharSetParser_B3544751C1D537FCA7A2C9A6C44FFB499E685228">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                        <function id="member_function_Set_CharSetParser_6FBBF4222832B5A701AD96AC8FB7E356EF0F6369">
                            <name>Set() const</name>
                            <syntax>public nothrow inline const String&lt;uchar>&amp; Set() const;</syntax>
                            <returnType ref="type.1378718"/>
                        </function>
                    </functions>
                </class>
                <class id="1385645">
                    <name>ClosePunctuationParser</name>
                    <groupName>ClosePunctuationParser</groupName>
                    <syntax> public class ClosePunctuationParser;</syntax>
                    <baseClass ref="1385560"/>
                    <constructors>
                        <constructor id="default_constructor_ClosePunctuationParser_E661657AE0484285A77585942009EBFE7AF31C66">
                            <name>ClosePunctuationParser()</name>
                            <syntax>public nothrow ClosePunctuationParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_ClosePunctuationParser_73F3674403894B77837B7348DC34098E41292864">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_ClosePunctuationParser_594C96D6FE843B1CBF4E802CD00B4FFA8AC5D5FC">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                    </functions>
                </class>
                <class id="1385480">
                    <name>CodeExpandingVisitor</name>
                    <groupName>CodeExpandingVisitor</groupName>
                    <syntax> public class CodeExpandingVisitor;</syntax>
                    <baseClass ref="1383608"/>
                    <constructors>
                        <constructor id="constructor_CodeExpandingVisitor_7B02632B58D72537AF4A2D4773AEB64A9A6FEDB7">
                            <name>CodeExpandingVisitor(HashMap&lt;String&lt;uchar>, String&lt;uchar>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp; expandMap_)</name>
                            <syntax>public CodeExpandingVisitor(HashMap&lt;String&lt;uchar>, String&lt;uchar>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp; expandMap_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>expandMap_</name>
                                    <type ref="type.1387594"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Visit_CodeExpandingVisitor_31CA125F875C6C0AE44C5C36D4B4DBF4DD4C7D73">
                            <name>Visit(Identifier&amp; id)</name>
                            <syntax>public override void Visit(Identifier&amp; id);</syntax>
                            <parameters>
                                <parameter>
                                    <name>id</name>
                                    <type ref="type.1385342"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1385639">
                    <name>ConnectorPunctuationParser</name>
                    <groupName>ConnectorPunctuationParser</groupName>
                    <syntax> public class ConnectorPunctuationParser;</syntax>
                    <baseClass ref="1385560"/>
                    <constructors>
                        <constructor id="default_constructor_ConnectorPunctuationParser_92CDCCF879661E7C9AC8CA00552E0B68D4DDB568">
                            <name>ConnectorPunctuationParser()</name>
                            <syntax>public nothrow ConnectorPunctuationParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_ConnectorPunctuationParser_9E7D4B727E6C7BA02AF9306902A112B6F82737AE">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_ConnectorPunctuationParser_A87100F43D4666FF6FE9C9D55A014594166AB5E1">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                    </functions>
                </class>
                <class id="1385564">
                    <name>Context</name>
                    <groupName>Context</groupName>
                    <syntax>abstract public class Context;</syntax>
                </class>
                <class id="1385566">
                    <name>ContextStack</name>
                    <groupName>ContextStack</groupName>
                    <syntax> public class ContextStack;</syntax>
                    <functions>
                        <function id="member_function_Pop_ContextStack_A8592E931AD3166BD2711561F973F7E01A188109">
                            <name>Pop()</name>
                            <syntax>public Context* Pop();</syntax>
                            <returnType ref="type.1385565"/>
                        </function>
                        <function id="member_function_Push_ContextStack_09E06BBF728B27C25CCF361F6B31CA493884735C">
                            <name>Push(Context* context)</name>
                            <syntax>public void Push(Context* context);</syntax>
                            <parameters>
                                <parameter>
                                    <name>context</name>
                                    <type ref="type.1385565"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1385673">
                    <name>ControlParser</name>
                    <groupName>ControlParser</groupName>
                    <syntax> public class ControlParser;</syntax>
                    <baseClass ref="1385560"/>
                    <constructors>
                        <constructor id="default_constructor_ControlParser_CD9725EA4C41ED71637CA0543D8E6DA1C952081D">
                            <name>ControlParser()</name>
                            <syntax>public nothrow ControlParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_ControlParser_BD9D9BC86430B52700541858EE5E89E00C8B9306">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_ControlParser_ACAB8F35CC42F4A2527995787DED64BEBAE6693A">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                    </functions>
                </class>
                <class id="1385657">
                    <name>CurrencySymbolParser</name>
                    <groupName>CurrencySymbolParser</groupName>
                    <syntax> public class CurrencySymbolParser;</syntax>
                    <baseClass ref="1385560"/>
                    <constructors>
                        <constructor id="default_constructor_CurrencySymbolParser_E61BC5F966A0F530641F9289280486ADA40C74E7">
                            <name>CurrencySymbolParser()</name>
                            <syntax>public nothrow CurrencySymbolParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_CurrencySymbolParser_B056F13F8342ED7D9C5DA3B1FAF1DEFAE5EF721F">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_CurrencySymbolParser_42B7793F379962F658E21C7DDFD9F5E0C91D0E58">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                    </functions>
                </class>
                <class id="1385641">
                    <name>DashPunctuationParser</name>
                    <groupName>DashPunctuationParser</groupName>
                    <syntax> public class DashPunctuationParser;</syntax>
                    <baseClass ref="1385560"/>
                    <constructors>
                        <constructor id="default_constructor_DashPunctuationParser_AAA3E5A0133DED33BDCDA763679A1E945534F17B">
                            <name>DashPunctuationParser()</name>
                            <syntax>public nothrow DashPunctuationParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_DashPunctuationParser_C645EE90BFF207F81E5CD26A5D64B62671430BA8">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_DashPunctuationParser_B104B67BF66EC41456F7A601213AE8F222BFF2F9">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                    </functions>
                </class>
                <class id="1385631">
                    <name>DecimalNumberParser</name>
                    <groupName>DecimalNumberParser</groupName>
                    <syntax> public class DecimalNumberParser;</syntax>
                    <baseClass ref="1385560"/>
                    <constructors>
                        <constructor id="default_constructor_DecimalNumberParser_C72BED6E8A50963FDBA1A2E0A2A13CCC4917B699">
                            <name>DecimalNumberParser()</name>
                            <syntax>public nothrow DecimalNumberParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_DecimalNumberParser_92FDEB1DDDB71F7187E783AA7BFA9C636B35ABF2">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_DecimalNumberParser_51308EA651AC09F759D8451EE0D6FE9445834783">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                    </functions>
                </class>
                <class id="1385504">
                    <name>DifferenceParser</name>
                    <groupName>DifferenceParser</groupName>
                    <syntax> public class DifferenceParser;</syntax>
                    <baseClass ref="1385496"/>
                    <constructors>
                        <constructor id="constructor_DifferenceParser_1DFD3E09257C9DDBD667CB12360C242C456326E2">
                            <name>DifferenceParser(Parser* left_, Parser* right_)</name>
                            <syntax>public DifferenceParser(Parser* left_, Parser* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.1385561"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.1385561"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_DifferenceParser_F10236987FAD121B0690E625C6DF780FF6CFE713">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_DifferenceParser_C32CB8765D488370B312B0EC926629B566280568">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                    </functions>
                </class>
                <class id="1385617">
                    <name>DigitParser</name>
                    <groupName>DigitParser</groupName>
                    <syntax> public class DigitParser;</syntax>
                    <baseClass ref="1385560"/>
                    <constructors>
                        <constructor id="default_constructor_DigitParser_EA503B52E1EDA25F6EF264067CC021B351AE3E3C">
                            <name>DigitParser()</name>
                            <syntax>public nothrow DigitParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_DigitParser_214CB8F0169AA9354DA2DBA92399317B464D10E9">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_DigitParser_7ABCADF29E6B5DB51367986360E7716033F85E78">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                    </functions>
                </class>
                <class id="1385599">
                    <name>EmptyParser</name>
                    <groupName>EmptyParser</groupName>
                    <syntax> public class EmptyParser;</syntax>
                    <baseClass ref="1385560"/>
                    <constructors>
                        <constructor id="default_constructor_EmptyParser_81F988A3E2E936BA13D40BD6D7C43E380788CFA5">
                            <name>EmptyParser()</name>
                            <syntax>public nothrow EmptyParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_EmptyParser_12A28CE7475C3BEDF2A41E2FDC5E99611E683C61">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_EmptyParser_31B4FF19965E3EAABCEDB1BE65F923DF7634E426">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                    </functions>
                </class>
                <class id="1385627">
                    <name>EnclosingMarkParser</name>
                    <groupName>EnclosingMarkParser</groupName>
                    <syntax> public class EnclosingMarkParser;</syntax>
                    <baseClass ref="1385560"/>
                    <constructors>
                        <constructor id="default_constructor_EnclosingMarkParser_9A9266D6D1C30AFA747A5023C526EF70F8186DDB">
                            <name>EnclosingMarkParser()</name>
                            <syntax>public nothrow EnclosingMarkParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_EnclosingMarkParser_E2642645008E791A75B10EA311078199C80A49F7">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_EnclosingMarkParser_D98C50BAEF1C47F59B42EC3C8D8A4611BF6369B3">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                    </functions>
                </class>
                <class id="1385506">
                    <name>ExclusiveOrParser</name>
                    <groupName>ExclusiveOrParser</groupName>
                    <syntax> public class ExclusiveOrParser;</syntax>
                    <baseClass ref="1385496"/>
                    <constructors>
                        <constructor id="constructor_ExclusiveOrParser_6166BE80DC6617A2469D1BE65632A509C87AC287">
                            <name>ExclusiveOrParser(Parser* left_, Parser* right_)</name>
                            <syntax>public ExclusiveOrParser(Parser* left_, Parser* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.1385561"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.1385561"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_ExclusiveOrParser_1AF6C49074F04E613D8217A49EE4D67593507B9E">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_ExclusiveOrParser_A29F715F9E5CA8942A102DCC7BA18AF821C5742F">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                    </functions>
                </class>
                <class id="1385540">
                    <name>ExpandCodeVisitor</name>
                    <groupName>ExpandCodeVisitor</groupName>
                    <syntax> public class ExpandCodeVisitor;</syntax>
                    <baseClass ref="1385825"/>
                    <functions>
                        <function id="member_function_BeginVisit_ExpandCodeVisitor_B2936B7CCC0F6A5943DCEF3EA51FEC9248E2176B">
                            <name>BeginVisit(Grammar&amp; grammar)</name>
                            <syntax>public override void BeginVisit(Grammar&amp; grammar);</syntax>
                            <parameters>
                                <parameter>
                                    <name>grammar</name>
                                    <type ref="type.1387851"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1385514">
                    <name>ExpectationFailure</name>
                    <groupName>ExpectationFailure</groupName>
                    <syntax> public class ExpectationFailure;</syntax>
                    <baseClass ref="1378137"/>
                    <constructors>
                        <constructor id="constructor_ExpectationFailure_9633CC6FEA0F34048F1FE3E7CEE0A22A2316F226">
                            <name>ExpectationFailure(const String&lt;uchar>&amp; info_, const String&lt;char>&amp; fileName_, const Span&amp; span_, const uchar* start_, const uchar* end_)</name>
                            <syntax>public ExpectationFailure(const String&lt;uchar>&amp; info_, const String&lt;char>&amp; fileName_, const Span&amp; span_, const uchar* start_, const uchar* end_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>info_</name>
                                    <type ref="type.1378718"/>
                                </parameter>
                                <parameter>
                                    <name>fileName_</name>
                                    <type ref="type.1378593"/>
                                </parameter>
                                <parameter>
                                    <name>span_</name>
                                    <type ref="type.1387437"/>
                                </parameter>
                                <parameter>
                                    <name>start_</name>
                                    <type ref="type.1378702"/>
                                </parameter>
                                <parameter>
                                    <name>end_</name>
                                    <type ref="type.1378702"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_End_ExpectationFailure_ECCA98A4EACB968A8161C6AC20648D8437084327">
                            <name>End() const</name>
                            <syntax>public nothrow inline const uchar* End() const;</syntax>
                            <returnType ref="type.1378702"/>
                        </function>
                        <function id="member_function_FileName_ExpectationFailure_F50129B2BF802BE86665921B1EEA5A856AD47EF1">
                            <name>FileName() const</name>
                            <syntax>public nothrow inline const String&lt;char>&amp; FileName() const;</syntax>
                            <returnType ref="type.1378593"/>
                        </function>
                        <function id="member_function_GetSpan_ExpectationFailure_E795D9FBB597C28838CE5C7E889411A216B87460">
                            <name>GetSpan() const</name>
                            <syntax>public nothrow inline const Span&amp; GetSpan() const;</syntax>
                            <returnType ref="type.1387437"/>
                        </function>
                        <function id="member_function_Info_ExpectationFailure_4D009D41D5B3C959082179B0DF23A10810A6F495">
                            <name>Info() const</name>
                            <syntax>public nothrow inline const String&lt;uchar>&amp; Info() const;</syntax>
                            <returnType ref="type.1378718"/>
                        </function>
                        <function id="member_function_Start_ExpectationFailure_311AAA5072CE4BF3155F12D2A2BA133F570AA837">
                            <name>Start() const</name>
                            <syntax>public nothrow inline const uchar* Start() const;</syntax>
                            <returnType ref="type.1378702"/>
                        </function>
                    </functions>
                </class>
                <class id="1385492">
                    <name>ExpectationParser</name>
                    <groupName>ExpectationParser</groupName>
                    <syntax> public class ExpectationParser;</syntax>
                    <baseClass ref="1385482"/>
                    <constructors>
                        <constructor id="constructor_ExpectationParser_D0EBD32232E9A51AC6C5AE54C1FD9AC8BB1F678A">
                            <name>ExpectationParser(Parser* child_)</name>
                            <syntax>public ExpectationParser(Parser* child_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>child_</name>
                                    <type ref="type.1385561"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_ExpectationParser_206592DDC6A581E412D5288AFFF9B1DB46F74FE0">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_ExpectationParser_19D29558EFE0DFC2BF4C3093A4C6A10048C35975">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                    </functions>
                </class>
                <class id="1385512">
                    <name>FileInfo</name>
                    <groupName>FileInfo</groupName>
                    <syntax> public class FileInfo;</syntax>
                    <functions>
                        <function id="member_function_Files_FileInfo_2F8120F1EAD26EAAD9A2493B0E719E9757B0EB30">
                            <name>Files()</name>
                            <syntax>public nothrow inline const List&lt;String&lt;char>>&amp; Files();</syntax>
                            <returnType ref="type.1378614"/>
                        </function>
                        <function id="member_function_GetFilePath_FileInfo_24B329D8FC76FA046CD8E68E9AE44BA1FBF1F2F0">
                            <name>GetFilePath(int index)</name>
                            <syntax>public nothrow String&lt;char> GetFilePath(int index);</syntax>
                            <parameters>
                                <parameter>
                                    <name>index</name>
                                    <type ref="type.1377790"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1378573"/>
                        </function>
                        <function id="member_function_SetFiles_FileInfo_09D3C606893B23A71E41D1442301C3FCAFE2AEF9">
                            <name>SetFiles(const List&lt;String&lt;char>>&amp; files_)</name>
                            <syntax>public void SetFiles(const List&lt;String&lt;char>>&amp; files_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>files_</name>
                                    <type ref="type.1378614"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                    <staticMemberFunctions>
                        <function id="member_function_Instance_FileInfo_572ED04C6FA68B9AC205E07BCDE5C8D918692291">
                            <name>Instance()</name>
                            <syntax>public static nothrow FileInfo&amp; Instance();</syntax>
                            <returnType ref="type.1387614"/>
                        </function>
                    </staticMemberFunctions>
                </class>
                <class id="1385649">
                    <name>FinalPunctuationParser</name>
                    <groupName>FinalPunctuationParser</groupName>
                    <syntax> public class FinalPunctuationParser;</syntax>
                    <baseClass ref="1385560"/>
                    <constructors>
                        <constructor id="default_constructor_FinalPunctuationParser_483F3BE37A88788A26B6C81EC0D5B0A2600C221A">
                            <name>FinalPunctuationParser()</name>
                            <syntax>public nothrow FinalPunctuationParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_FinalPunctuationParser_C543D15AD45E7180E6CD96BB4501DD2223D7F379">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_FinalPunctuationParser_D198E2B40AF487032A6DB61E123F66B215E89593">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                    </functions>
                </class>
                <class id="1385675">
                    <name>FormatParser</name>
                    <groupName>FormatParser</groupName>
                    <syntax> public class FormatParser;</syntax>
                    <baseClass ref="1385560"/>
                    <constructors>
                        <constructor id="default_constructor_FormatParser_1252C1DBA36C03CA2F60DF3AF1A7DDF484C1A8EA">
                            <name>FormatParser()</name>
                            <syntax>public nothrow FormatParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_FormatParser_EDF2E600C8891193D7A33C267BD2963DF4D538F8">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_FormatParser_5954AE9FF053D4283501A476569AAB03AE60AB59">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                    </functions>
                </class>
                <class id="1385522">
                    <name>Grammar</name>
                    <groupName>Grammar</groupName>
                    <syntax> public class Grammar;</syntax>
                    <baseClass ref="1385579"/>
                    <constructors>
                        <constructor id="constructor_Grammar_8EBA43E8427201FDC85973DDA7BDAD8C2A8EA1EA">
                            <name>Grammar(const String&lt;uchar>&amp; name_, Scope* enclosingScope_)</name>
                            <syntax>public Grammar(const String&lt;uchar>&amp; name_, Scope* enclosingScope_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.1378718"/>
                                </parameter>
                                <parameter>
                                    <name>enclosingScope_</name>
                                    <type ref="type.1385716"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_Grammar_4C55F08DFDCFA535E0D2EA44B83AF275156DA205">
                            <name>Grammar(const String&lt;uchar>&amp; name_, Scope* enclosingScope_, ParsingDomain* parsingDomain_)</name>
                            <syntax>public Grammar(const String&lt;uchar>&amp; name_, Scope* enclosingScope_, ParsingDomain* parsingDomain_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.1378718"/>
                                </parameter>
                                <parameter>
                                    <name>enclosingScope_</name>
                                    <type ref="type.1385716"/>
                                </parameter>
                                <parameter>
                                    <name>parsingDomain_</name>
                                    <type ref="type.1385574"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Grammar_68B2CD75DDE71F783D54E16CDA1CF570BE68F27F">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_AddGrammarReference_Grammar_9DFFC285B6144167120A0D10DE89D7B2EDE039FE">
                            <name>AddGrammarReference(Grammar* grammarReference)</name>
                            <syntax>public void AddGrammarReference(Grammar* grammarReference);</syntax>
                            <parameters>
                                <parameter>
                                    <name>grammarReference</name>
                                    <type ref="type.1385523"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_AddRule_Grammar_A800846BADD8ED1E43F7B3F91007DB2439B73A60">
                            <name>AddRule(RuleParser* rule)</name>
                            <syntax>public void AddRule(RuleParser* rule);</syntax>
                            <parameters>
                                <parameter>
                                    <name>rule</name>
                                    <type ref="type.1385704"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_AddRuleLink_Grammar_6BF1336CE96C2C51FF183176856CEFA1057BEDD0">
                            <name>AddRuleLink(RuleLink* ruleLink)</name>
                            <syntax>public void AddRuleLink(RuleLink* ruleLink);</syntax>
                            <parameters>
                                <parameter>
                                    <name>ruleLink</name>
                                    <type ref="type.1385708"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_CreateRules_Grammar_8748755E0A5CA882B2EA1CF80B3147AF963378D4">
                            <name>CreateRules()</name>
                            <syntax>public virtual void CreateRules();</syntax>
                        </function>
                        <function id="member_function_Domain_Grammar_123618B811872C22955EA7B9FA50C5A79FF5382C">
                            <name>Domain() const</name>
                            <syntax>public nothrow inline ParsingDomain* Domain() const;</syntax>
                            <returnType ref="type.1385574"/>
                        </function>
                        <function id="member_function_GetReferencedGrammars_Grammar_77AD4BF1441AA5BECA2AAFAC1137D0F70AB5B40D">
                            <name>GetReferencedGrammars()</name>
                            <syntax>public virtual void GetReferencedGrammars();</syntax>
                        </function>
                        <function id="member_function_GetRule_Grammar_9D013C89DD382D8F8C3D097AD5C925BCB4E80400">
                            <name>GetRule(const String&lt;uchar>&amp; ruleName) const</name>
                            <syntax>public RuleParser* GetRule(const String&lt;uchar>&amp; ruleName) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>ruleName</name>
                                    <type ref="type.1378718"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1385704"/>
                        </function>
                        <function id="member_function_Link_Grammar_5B33F358BC1834D793AF608D5B26DC352C277840">
                            <name>Link()</name>
                            <syntax>public void Link();</syntax>
                        </function>
                        <function id="member_function_Log_Grammar_9A4DE350A2A32EF13FD76450BDFD0F197560DDB4">
                            <name>Log() const</name>
                            <syntax>public nothrow inline StreamWriter* Log() const;</syntax>
                            <returnType ref="type.1378402"/>
                        </function>
                        <function id="member_function_MaxLogLineLength_Grammar_DD5B0EEAB2B54A6D9E9A8514EBC5225632C970BE">
                            <name>MaxLogLineLength() const</name>
                            <syntax>public nothrow inline int MaxLogLineLength() const;</syntax>
                            <returnType ref="type.1377790"/>
                        </function>
                        <function id="member_function_Ns_Grammar_FE054E55983200E730FBCEBBB919344C7ACB111B">
                            <name>Ns() const</name>
                            <syntax>public nothrow inline Namespace* Ns() const;</syntax>
                            <returnType ref="type.1385547"/>
                        </function>
                        <function id="function_group_Parse_85EA3107130DF7FB6B328E90526ECD6ABEA6783D">
                            <name>Parse</name>
                            <overloads>
                                <overload id="member_function_Parse_Grammar_8350DA589903FB259AE570C9EB511850C920A199">
                                    <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack)</name>
                                    <syntax>public Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>scanner</name>
                                            <type ref="type.1387480"/>
                                        </parameter>
                                        <parameter>
                                            <name>stack</name>
                                            <type ref="type.1387515"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="1385542"/>
                                </overload>
                                <overload id="member_function_Parse_Grammar_FA99D92E851100881B108C60B1CC4AC54F5ECD90">
                                    <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                                    <syntax>public Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>scanner</name>
                                            <type ref="type.1387480"/>
                                        </parameter>
                                        <parameter>
                                            <name>stack</name>
                                            <type ref="type.1387515"/>
                                        </parameter>
                                        <parameter>
                                            <name>parsingData</name>
                                            <type ref="type.1385570"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="1385542"/>
                                </overload>
                                <overload id="member_function_Parse_Grammar_3E71DABF390E49B6864B0F47E2825912C603771E">
                                    <name>Parse(const uchar* start, const uchar* end, int fileIndex, const String&lt;char>&amp; fileName)</name>
                                    <syntax>public void Parse(const uchar* start, const uchar* end, int fileIndex, const String&lt;char>&amp; fileName);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>start</name>
                                            <type ref="type.1378702"/>
                                        </parameter>
                                        <parameter>
                                            <name>end</name>
                                            <type ref="type.1378702"/>
                                        </parameter>
                                        <parameter>
                                            <name>fileIndex</name>
                                            <type ref="type.1377790"/>
                                        </parameter>
                                        <parameter>
                                            <name>fileName</name>
                                            <type ref="type.1378593"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Parse_Grammar_278B0D27EC352BC7494C921FF783ED35EFFA629A">
                                    <name>Parse(const uchar* start, const uchar* end, int fileIndex, const String&lt;char>&amp; fileName, ParsingData* parsingData)</name>
                                    <syntax>public void Parse(const uchar* start, const uchar* end, int fileIndex, const String&lt;char>&amp; fileName, ParsingData* parsingData);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>start</name>
                                            <type ref="type.1378702"/>
                                        </parameter>
                                        <parameter>
                                            <name>end</name>
                                            <type ref="type.1378702"/>
                                        </parameter>
                                        <parameter>
                                            <name>fileIndex</name>
                                            <type ref="type.1377790"/>
                                        </parameter>
                                        <parameter>
                                            <name>fileName</name>
                                            <type ref="type.1378593"/>
                                        </parameter>
                                        <parameter>
                                            <name>parsingData</name>
                                            <type ref="type.1385570"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_ReferencedGrammars_Grammar_8A2112C51F5D3604A3F7943F7DB7F27811EE1385">
                            <name>ReferencedGrammars() const</name>
                            <syntax>public nothrow inline const HashSet&lt;Grammar*, Hasher&lt;Grammar*>, EqualTo&lt;Grammar*>>&amp; ReferencedGrammars() const;</syntax>
                            <returnType ref="type.1387769"/>
                        </function>
                        <function id="member_function_ResolveSkipRule_Grammar_64D85319893F1557EAB3DB7550B8F01F5151C5D5">
                            <name>ResolveSkipRule()</name>
                            <syntax>public void ResolveSkipRule();</syntax>
                        </function>
                        <function id="member_function_ResolveStartRule_Grammar_9F33F60BCC2A2D98602146285F1C8BCB4FC7A425">
                            <name>ResolveStartRule()</name>
                            <syntax>public void ResolveStartRule();</syntax>
                        </function>
                        <function id="member_function_RuleLinks_Grammar_D37DED3AE3E08C709307FC1AF89EEE0FA66A3046">
                            <name>RuleLinks() const</name>
                            <syntax>public nothrow inline const List&lt;RuleLink*>&amp; RuleLinks() const;</syntax>
                            <returnType ref="type.1387689"/>
                        </function>
                        <function id="member_function_Rules_Grammar_F3211C7531D1327C0C36F3C9F0CD09D15FBFE657">
                            <name>Rules() const</name>
                            <syntax>public nothrow inline const List&lt;RuleParser*>&amp; Rules() const;</syntax>
                            <returnType ref="type.1387664"/>
                        </function>
                        <function id="member_function_SetLog_Grammar_A4680F05E314BAC8760F23D8B03EC745F1300387">
                            <name>SetLog(StreamWriter* log_)</name>
                            <syntax>public nothrow void SetLog(StreamWriter* log_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>log_</name>
                                    <type ref="type.1378402"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetMaxLogLineLength_Grammar_9546EFC7559743459AFE65D3ABA68A7032478963">
                            <name>SetMaxLogLineLength(int maxLogLineLength_)</name>
                            <syntax>public nothrow void SetMaxLogLineLength(int maxLogLineLength_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>maxLogLineLength_</name>
                                    <type ref="type.1377790"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetNs_Grammar_C6660E8C889BBB256C175AB4157CA6CD9D07DB15">
                            <name>SetNs(Namespace* ns_)</name>
                            <syntax>public nothrow void SetNs(Namespace* ns_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>ns_</name>
                                    <type ref="type.1385547"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetSkipRule_Grammar_8BFEDFD7FB29486DDE5DFA6E79098B3600863253">
                            <name>SetSkipRule(RuleParser* skipRule_)</name>
                            <syntax>public nothrow void SetSkipRule(RuleParser* skipRule_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>skipRule_</name>
                                    <type ref="type.1385704"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetSkipRuleName_Grammar_0C073B232967B2C34A36DEA42C079D8E4C521060">
                            <name>SetSkipRuleName(const String&lt;uchar>&amp; skipRuleName_)</name>
                            <syntax>public nothrow void SetSkipRuleName(const String&lt;uchar>&amp; skipRuleName_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>skipRuleName_</name>
                                    <type ref="type.1378718"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetStartRule_Grammar_4F401B9F35C931E159E19C95110A1A6C15929E5E">
                            <name>SetStartRule(RuleParser* startRule_)</name>
                            <syntax>public nothrow void SetStartRule(RuleParser* startRule_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>startRule_</name>
                                    <type ref="type.1385704"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetStartRuleName_Grammar_049B390570F219BFCEFEBCF875E97F7B33234B9D">
                            <name>SetStartRuleName(const String&lt;uchar>&amp; startRuleName_)</name>
                            <syntax>public nothrow void SetStartRuleName(const String&lt;uchar>&amp; startRuleName_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>startRuleName_</name>
                                    <type ref="type.1378718"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SkipRule_Grammar_42CCA06DE0FB094313C023D1F3B83B7400E7AB93">
                            <name>SkipRule() const</name>
                            <syntax>public nothrow inline RuleParser* SkipRule() const;</syntax>
                            <returnType ref="type.1385704"/>
                        </function>
                        <function id="member_function_SkipRuleName_Grammar_53931099C6827C376FC2BA998C04E0E4DE9FDE68">
                            <name>SkipRuleName() const</name>
                            <syntax>public nothrow inline const String&lt;uchar>&amp; SkipRuleName() const;</syntax>
                            <returnType ref="type.1378718"/>
                        </function>
                        <function id="member_function_StartRule_Grammar_1BBB29B06A432B886D6C2533D84FB7ADE3566A5B">
                            <name>StartRule() const</name>
                            <syntax>public nothrow inline RuleParser* StartRule() const;</syntax>
                            <returnType ref="type.1385704"/>
                        </function>
                        <function id="member_function_StartRuleName_Grammar_7A79CFCC56C4CA325EE3128950D0E4598197EAFB">
                            <name>StartRuleName() const</name>
                            <syntax>public nothrow inline const String&lt;uchar>&amp; StartRuleName() const;</syntax>
                            <returnType ref="type.1378718"/>
                        </function>
                    </functions>
                </class>
                <class id="1385683">
                    <name>GraphicParser</name>
                    <groupName>GraphicParser</groupName>
                    <syntax> public class GraphicParser;</syntax>
                    <baseClass ref="1385560"/>
                    <constructors>
                        <constructor id="default_constructor_GraphicParser_DD3549A19B2A4956551F0D33C59341CE37806088">
                            <name>GraphicParser()</name>
                            <syntax>public nothrow GraphicParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_GraphicParser_284519B3A75213689F23D4CA03D8EF09CC472FC0">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_GraphicParser_7C3AC3C85240B69140BDDAF4DCF6A32099F0E094">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                    </functions>
                </class>
                <class id="1385619">
                    <name>HexDigitParser</name>
                    <groupName>HexDigitParser</groupName>
                    <syntax> public class HexDigitParser;</syntax>
                    <baseClass ref="1385560"/>
                    <constructors>
                        <constructor id="default_constructor_HexDigitParser_AD50E4A8222E78CAE707A9992A1959562B5FFDD9">
                            <name>HexDigitParser()</name>
                            <syntax>public nothrow HexDigitParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_HexDigitParser_9524BF9E23B9DA4C54108377CE5EEBA0F0A3C88B">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_HexDigitParser_7AD10647A8B1508160CB94B88EEAD73C446241A1">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                    </functions>
                </class>
                <class id="1385691">
                    <name>IdContParser</name>
                    <groupName>IdContParser</groupName>
                    <syntax> public class IdContParser;</syntax>
                    <baseClass ref="1385560"/>
                    <constructors>
                        <constructor id="default_constructor_IdContParser_5D03E3972FE0AFA959C5F2674DAC80B1B5C90D3F">
                            <name>IdContParser()</name>
                            <syntax>public nothrow IdContParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_IdContParser_CB9726A3254FCC7EA657E5D848E21ACEE20621B0">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_IdContParser_120DDA54BCF20EBFA74E85F60BADC3D38558F8AC">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                    </functions>
                </class>
                <class id="1385689">
                    <name>IdStartParser</name>
                    <groupName>IdStartParser</groupName>
                    <syntax> public class IdStartParser;</syntax>
                    <baseClass ref="1385560"/>
                    <constructors>
                        <constructor id="default_constructor_IdStartParser_315A2E9A731D2A2F16A1A76487A0A4258A7A788E">
                            <name>IdStartParser()</name>
                            <syntax>public nothrow IdStartParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_IdStartParser_181CFE32D9657C6F32997A0105796AE171A1883A">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_IdStartParser_E662989B9A9D9406BDCE7C66019CC7C522993636">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                    </functions>
                </class>
                <class id="1385526">
                    <name>IdentifierCharsRule</name>
                    <groupName>IdentifierCharsRule</groupName>
                    <syntax> public class IdentifierCharsRule;</syntax>
                    <functions>
                        <function id="member_function_GetRule_IdentifierCharsRule_7FFAEC86DE40CAA6887B62B7160E9D687E1E0FE8">
                            <name>GetRule() const</name>
                            <syntax>public nothrow inline RuleParser* GetRule() const;</syntax>
                            <returnType ref="type.1385704"/>
                        </function>
                    </functions>
                    <staticMemberFunctions>
                        <function id="member_function_Instance_IdentifierCharsRule_C7CD65FE928F59493883F9A58CE78B6CEBDA25A6">
                            <name>Instance()</name>
                            <syntax>public static IdentifierCharsRule&amp; Instance();</syntax>
                            <returnType ref="type.1387770"/>
                        </function>
                    </staticMemberFunctions>
                </class>
                <class id="1385647">
                    <name>InitialPunctuationParser</name>
                    <groupName>InitialPunctuationParser</groupName>
                    <syntax> public class InitialPunctuationParser;</syntax>
                    <baseClass ref="1385560"/>
                    <constructors>
                        <constructor id="default_constructor_InitialPunctuationParser_2BBAA6A3EF72B55B662A85E91CDB7D2A5CCEDAA7">
                            <name>InitialPunctuationParser()</name>
                            <syntax>public nothrow InitialPunctuationParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_InitialPunctuationParser_2DEE33067B95B6503261CFBB2DD42734B5E518A0">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_InitialPunctuationParser_098709F3FDC7135D5420CF452169E02849805750">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                    </functions>
                </class>
                <class id="1385508">
                    <name>IntersectionParser</name>
                    <groupName>IntersectionParser</groupName>
                    <syntax> public class IntersectionParser;</syntax>
                    <baseClass ref="1385496"/>
                    <constructors>
                        <constructor id="constructor_IntersectionParser_662841B9481FBC7B512B1D6BFA6EA6A27990DFB7">
                            <name>IntersectionParser(Parser* left_, Parser* right_)</name>
                            <syntax>public IntersectionParser(Parser* left_, Parser* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.1385561"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.1385561"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_IntersectionParser_D08AECDC93D05596ADCEF4DAE477ED1BCB9E9C1C">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_IntersectionParser_3F232BF9FA9086CCE67E9BC8049BD746384DF2AB">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                    </functions>
                </class>
                <class id="1385534">
                    <name>KeywordListParser</name>
                    <groupName>KeywordListParser</groupName>
                    <syntax> public class KeywordListParser;</syntax>
                    <baseClass ref="1385560"/>
                    <constructors>
                        <constructor id="constructor_KeywordListParser_7BF362D7EB128BAB1124E2CC11789C56D1ED82B1">
                            <name>KeywordListParser(const String&lt;uchar>&amp; selectorRuleName_, const List&lt;String&lt;uchar>>&amp; keywords_)</name>
                            <syntax>public KeywordListParser(const String&lt;uchar>&amp; selectorRuleName_, const List&lt;String&lt;uchar>>&amp; keywords_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>selectorRuleName_</name>
                                    <type ref="type.1378718"/>
                                </parameter>
                                <parameter>
                                    <name>keywords_</name>
                                    <type ref="type.1378739"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_KeywordListParser_855AF007A66F3250D11B2E5DF54D8E6CC4ABE4D3">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_KeywordListName_KeywordListParser_3C895BAADA3D0BE4E06483F9F5AEDCAAC30F72B9">
                            <name>KeywordListName() const</name>
                            <syntax>public nothrow inline const String&lt;uchar>&amp; KeywordListName() const;</syntax>
                            <returnType ref="type.1378718"/>
                        </function>
                        <function id="member_function_Keywords_KeywordListParser_26F2DFCFDF1478F3F2DB43F3A969CFEDBCA57321">
                            <name>Keywords() const</name>
                            <syntax>public nothrow inline const HashSet&lt;String&lt;uchar>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp; Keywords() const;</syntax>
                            <returnType ref="type.1387849"/>
                        </function>
                        <function id="member_function_Parse_KeywordListParser_6D30E42BC7DA78305B72FBFDE10BB259274025B6">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                        <function id="member_function_SelectorRule_KeywordListParser_3CB42975E3C04C2F0FAADD17A1D9E11DE352744C">
                            <name>SelectorRule() const</name>
                            <syntax>public nothrow inline RuleParser* SelectorRule() const;</syntax>
                            <returnType ref="type.1385704"/>
                        </function>
                        <function id="member_function_SelectorRuleName_KeywordListParser_8C03C750503D3FB99F2FD82EC0C95D5FB9621FD5">
                            <name>SelectorRuleName() const</name>
                            <syntax>public nothrow inline const String&lt;uchar>&amp; SelectorRuleName() const;</syntax>
                            <returnType ref="type.1378718"/>
                        </function>
                        <function id="member_function_SetKeywordListName_KeywordListParser_6169355903830BA3D289797CC76E4A554BAEB7E0">
                            <name>SetKeywordListName(const String&lt;uchar>&amp; keywordListName_)</name>
                            <syntax>public nothrow void SetKeywordListName(const String&lt;uchar>&amp; keywordListName_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>keywordListName_</name>
                                    <type ref="type.1378718"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetSelectorRule_KeywordListParser_D1177D8394BD27DFF4710B22C7F7C8DF8B47A9A6">
                            <name>SetSelectorRule(RuleParser* selectorRule_)</name>
                            <syntax>public nothrow void SetSelectorRule(RuleParser* selectorRule_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>selectorRule_</name>
                                    <type ref="type.1385704"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1385530">
                    <name>KeywordParser</name>
                    <groupName>KeywordParser</groupName>
                    <syntax> public class KeywordParser;</syntax>
                    <baseClass ref="1385560"/>
                    <constructors>
                        <constructor id="constructor_KeywordParser_B583A4D996C963CB4CB57C9471C60D9BE4D0EF24">
                            <name>KeywordParser(const String&lt;uchar>&amp; keyword_)</name>
                            <syntax>public KeywordParser(const String&lt;uchar>&amp; keyword_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>keyword_</name>
                                    <type ref="type.1378718"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_KeywordParser_B719EEA3321BEF251F4D225D5D5A1CC54708348E">
                            <name>KeywordParser(const String&lt;uchar>&amp; keyword_, const String&lt;uchar>&amp; continuationRuleName_)</name>
                            <syntax>public KeywordParser(const String&lt;uchar>&amp; keyword_, const String&lt;uchar>&amp; continuationRuleName_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>keyword_</name>
                                    <type ref="type.1378718"/>
                                </parameter>
                                <parameter>
                                    <name>continuationRuleName_</name>
                                    <type ref="type.1378718"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_KeywordParser_B52DAEA8664099213409D2DEF7A75156C20C9FA1">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_ContinuationRule_KeywordParser_B3E226C414F66B6DE8D1A375C3C2CE0FDE872A71">
                            <name>ContinuationRule() const</name>
                            <syntax>public nothrow inline RuleParser* ContinuationRule() const;</syntax>
                            <returnType ref="type.1385704"/>
                        </function>
                        <function id="member_function_ContinuationRuleName_KeywordParser_D214B31537182B8AFA816D4FF5B0EEE3EB1090F2">
                            <name>ContinuationRuleName() const</name>
                            <syntax>public nothrow inline const String&lt;uchar>&amp; ContinuationRuleName() const;</syntax>
                            <returnType ref="type.1378718"/>
                        </function>
                        <function id="member_function_Keyword_KeywordParser_0EB1AFC07CC7EA87A67C7805600EC2F11EED374B">
                            <name>Keyword() const</name>
                            <syntax>public nothrow inline const String&lt;uchar>&amp; Keyword() const;</syntax>
                            <returnType ref="type.1378718"/>
                        </function>
                        <function id="member_function_Parse_KeywordParser_E8D0078419A4CA18F43BFB941E41FB89AD986FA1">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                        <function id="member_function_SetContinuationRule_KeywordParser_28D92F9BA1611C985CD91DBD469E210B2C3CE91A">
                            <name>SetContinuationRule(RuleParser* continuationRule_)</name>
                            <syntax>public void SetContinuationRule(RuleParser* continuationRule_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>continuationRule_</name>
                                    <type ref="type.1385704"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetContinuationRuleName_KeywordParser_ED2B74C8A0ABEFA776E9D3E92636CC6A03008466">
                            <name>SetContinuationRuleName(const String&lt;uchar>&amp; continuationRuleName_)</name>
                            <syntax>public nothrow void SetContinuationRuleName(const String&lt;uchar>&amp; continuationRuleName_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>continuationRuleName_</name>
                                    <type ref="type.1378718"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1385490">
                    <name>KleeneStarParser</name>
                    <groupName>KleeneStarParser</groupName>
                    <syntax> public class KleeneStarParser;</syntax>
                    <baseClass ref="1385482"/>
                    <constructors>
                        <constructor id="constructor_KleeneStarParser_CCBAE5A378E11334794328DA846828D424530F0B">
                            <name>KleeneStarParser(Parser* child_)</name>
                            <syntax>public KleeneStarParser(Parser* child_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>child_</name>
                                    <type ref="type.1385561"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_KleeneStarParser_E8C005AB6FF6A0201D407A68AD818476B1F62CC7">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_KleeneStarParser_8191C0243C12AE762479A9F2C97049D4BDA6F420">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                    </functions>
                </class>
                <class id="1385633">
                    <name>LetterNumberParser</name>
                    <groupName>LetterNumberParser</groupName>
                    <syntax> public class LetterNumberParser;</syntax>
                    <baseClass ref="1385560"/>
                    <constructors>
                        <constructor id="default_constructor_LetterNumberParser_6369702CB9F67FC181AAF541FFD998A66B514398">
                            <name>LetterNumberParser()</name>
                            <syntax>public nothrow LetterNumberParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_LetterNumberParser_8AF41FED6A6F59460EA65531E265B824C3C05FB1">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_LetterNumberParser_95EF88148536FE36B6ABB21F148E08E629A56D7F">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                    </functions>
                </class>
                <class id="1385603">
                    <name>LetterParser</name>
                    <groupName>LetterParser</groupName>
                    <syntax> public class LetterParser;</syntax>
                    <baseClass ref="1385560"/>
                    <constructors>
                        <constructor id="default_constructor_LetterParser_A5BB9E3C0E44973F817534E3636B0110AF99665B">
                            <name>LetterParser()</name>
                            <syntax>public nothrow LetterParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_LetterParser_DC0204178E095592C5CBBAC4F6245C9EFAC04735">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_LetterParser_625CD55B009D94E406E8FA28F39835666F781BA7">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                    </functions>
                </class>
                <class id="1385667">
                    <name>LineSeparatorParser</name>
                    <groupName>LineSeparatorParser</groupName>
                    <syntax> public class LineSeparatorParser;</syntax>
                    <baseClass ref="1385560"/>
                    <constructors>
                        <constructor id="default_constructor_LineSeparatorParser_C617309D2AECFB87EBE809C4846944E8DBF78AFC">
                            <name>LineSeparatorParser()</name>
                            <syntax>public nothrow LineSeparatorParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_LineSeparatorParser_97B89EDDBE8C94EED0F16948039D3EAB8B810D0D">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_LineSeparatorParser_5A660C9A479AA8AECA6F622DE874CD82AE4DEC28">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                    </functions>
                </class>
                <class id="1385538">
                    <name>LinkerVisitor</name>
                    <groupName>LinkerVisitor</groupName>
                    <syntax> public class LinkerVisitor;</syntax>
                    <baseClass ref="1385825"/>
                    <constructors>
                        <constructor id="default_constructor_LinkerVisitor_CC57F310B9CD30C9C521A6976C58F17B39E0DE13">
                            <name>LinkerVisitor()</name>
                            <syntax>public LinkerVisitor();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="function_group_BeginVisit_8D20401578E4234962231F9E3C318771FFF95039">
                            <name>BeginVisit</name>
                            <overloads>
                                <overload id="member_function_BeginVisit_LinkerVisitor_9D22F25D35513BFE87A80F81AC8CCEFD972C7349">
                                    <name>BeginVisit(ActionParser&amp; parser)</name>
                                    <syntax>public override void BeginVisit(ActionParser&amp; parser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>parser</name>
                                            <type ref="type.1387860"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_BeginVisit_LinkerVisitor_85D7E589B981E9F4365707D8A0FED8CEECD758F7">
                                    <name>BeginVisit(Grammar&amp; grammar)</name>
                                    <syntax>public override void BeginVisit(Grammar&amp; grammar);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>grammar</name>
                                            <type ref="type.1387851"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_BeginVisit_LinkerVisitor_39AE5AEB5A6CF484C9AED73FF3154F557BFF87D4">
                                    <name>BeginVisit(RuleParser&amp; rule)</name>
                                    <syntax>public override void BeginVisit(RuleParser&amp; rule);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>rule</name>
                                            <type ref="type.1387785"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_EndVisit_AFF6FCBD585400C20C90CF27E0918C9F8BA84D2B">
                            <name>EndVisit</name>
                            <overloads>
                                <overload id="member_function_EndVisit_LinkerVisitor_195D48A139F971E8BA2DE65E571E84D57A5EE5BD">
                                    <name>EndVisit(Grammar&amp; grammar)</name>
                                    <syntax>public override void EndVisit(Grammar&amp; grammar);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>grammar</name>
                                            <type ref="type.1387851"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_EndVisit_LinkerVisitor_4C1A653F476301C1A913F94ACAE0165BA2B5C538">
                                    <name>EndVisit(RuleParser&amp; rule)</name>
                                    <syntax>public override void EndVisit(RuleParser&amp; rule);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>rule</name>
                                            <type ref="type.1387785"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_Visit_5AF64560BB0E0AF021D1602400286D92E02ADC6C">
                            <name>Visit</name>
                            <overloads>
                                <overload id="member_function_Visit_LinkerVisitor_9B7B413031E6EC795630927A672D73BE664432A2">
                                    <name>Visit(KeywordListParser&amp; parser)</name>
                                    <syntax>public override void Visit(KeywordListParser&amp; parser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>parser</name>
                                            <type ref="type.1387854"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_LinkerVisitor_7ECB0A4C8F469839E2B5188F2EFF2369E9600549">
                                    <name>Visit(KeywordParser&amp; parser)</name>
                                    <syntax>public override void Visit(KeywordParser&amp; parser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>parser</name>
                                            <type ref="type.1387853"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_LinkerVisitor_62B42E9F4FE401160BC9BDC7C25C2C6F0EB91095">
                                    <name>Visit(NonterminalParser&amp; parser)</name>
                                    <syntax>public override void Visit(NonterminalParser&amp; parser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>parser</name>
                                            <type ref="type.1387867"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_LinkerVisitor_CA606D4F4863097B434BCEF8DE81684BD124DD32">
                                    <name>Visit(RuleLink&amp; ruleLink)</name>
                                    <syntax>public override void Visit(RuleLink&amp; ruleLink);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>ruleLink</name>
                                            <type ref="type.1387852"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                    </functions>
                </class>
                <class id="1385510">
                    <name>ListParser</name>
                    <groupName>ListParser</groupName>
                    <syntax> public class ListParser;</syntax>
                    <baseClass ref="1385482"/>
                    <constructors>
                        <constructor id="constructor_ListParser_98E8C3FAD1F01EE9D45690DDE269983F89B2CA56">
                            <name>ListParser(Parser* left_, Parser* right_)</name>
                            <syntax>public ListParser(Parser* left_, Parser* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.1385561"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.1385561"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_ListParser_BB6240DBAFB7BD57353C445304B97EDE9BDAD4A6">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_ListParser_9442A1808BC6F48EB8EA68B78CB5A2A4424F74BF">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                    </functions>
                </class>
                <class id="1385607">
                    <name>LowerLetterParser</name>
                    <groupName>LowerLetterParser</groupName>
                    <syntax> public class LowerLetterParser;</syntax>
                    <baseClass ref="1385560"/>
                    <constructors>
                        <constructor id="default_constructor_LowerLetterParser_FF75D7D20474F6926533A7E052882DBBE5B1CA97">
                            <name>LowerLetterParser()</name>
                            <syntax>public nothrow LowerLetterParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_LowerLetterParser_87213E25F16E292A312C09E4B183D56A009EA8BF">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_LowerLetterParser_486DA59CB7B8D11ED5486F557F63687A574CBC34">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                    </functions>
                </class>
                <class id="1385621">
                    <name>MarkParser</name>
                    <groupName>MarkParser</groupName>
                    <syntax> public class MarkParser;</syntax>
                    <baseClass ref="1385560"/>
                    <constructors>
                        <constructor id="default_constructor_MarkParser_6B5DA6CB7E8EEF06F6AA4C9F4FE689A862EF1065">
                            <name>MarkParser()</name>
                            <syntax>public nothrow MarkParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_MarkParser_F69D69ADCE1F39BAC0C570107BF83972CD4BD874">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_MarkParser_9E3355774E503FD9EB05333BB1BE20BA8167DB76">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                    </functions>
                </class>
                <class id="1385542">
                    <name>Match</name>
                    <groupName>Match</groupName>
                    <syntax> public class Match;</syntax>
                    <constructors>
                        <constructor id="constructor_Match_AF294DBAD66D10150407293526B18ACA0E636547">
                            <name>Match(bool hit_, int length_)</name>
                            <syntax>public nothrow Match(bool hit_, int length_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>hit_</name>
                                    <type ref="type.1377785"/>
                                </parameter>
                                <parameter>
                                    <name>length_</name>
                                    <type ref="type.1377790"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Concatenate_Match_A833E85113443BEE117626E3863F40CFDE10C78E">
                            <name>Concatenate(const Match&amp; that)</name>
                            <syntax>public nothrow inline void Concatenate(const Match&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.1387921"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Hit_Match_D33B7A33A2B08B928C33AF6C60D33CC585331E28">
                            <name>Hit() const</name>
                            <syntax>public nothrow inline bool Hit() const;</syntax>
                            <returnType ref="type.1377785"/>
                        </function>
                        <function id="member_function_Length_Match_300A87CFBFD9135EEDAAD57101443112AA7BADB7">
                            <name>Length() const</name>
                            <syntax>public nothrow inline int Length() const;</syntax>
                            <returnType ref="type.1377790"/>
                        </function>
                    </functions>
                    <staticMemberFunctions>
                        <function id="member_function_Empty_Match_0F9E9E64E92603387A7BCB0A884290A2131EBEB5">
                            <name>Empty()</name>
                            <syntax>public static nothrow inline Match Empty();</syntax>
                            <returnType ref="1385542"/>
                        </function>
                        <function id="member_function_Nothing_Match_761CC719DADC48D20EC8CF22357604401A683BA7">
                            <name>Nothing()</name>
                            <syntax>public static nothrow inline Match Nothing();</syntax>
                            <returnType ref="1385542"/>
                        </function>
                        <function id="member_function_One_Match_83E630F337ABFD86B4FCEECAE000E577C8066077">
                            <name>One()</name>
                            <syntax>public static nothrow inline Match One();</syntax>
                            <returnType ref="1385542"/>
                        </function>
                    </staticMemberFunctions>
                </class>
                <class id="1385655">
                    <name>MathSymbolParser</name>
                    <groupName>MathSymbolParser</groupName>
                    <syntax> public class MathSymbolParser;</syntax>
                    <baseClass ref="1385560"/>
                    <constructors>
                        <constructor id="default_constructor_MathSymbolParser_1049B26D051849D8B8E02E429291CA8828E7B326">
                            <name>MathSymbolParser()</name>
                            <syntax>public nothrow MathSymbolParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_MathSymbolParser_3A680FAC6ED6AD267FD2BD7D6BCACAF21B7A1464">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_MathSymbolParser_44FF195B285F03A0622820174F78895EFC3A2074">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                    </functions>
                </class>
                <class id="1385611">
                    <name>ModifierLetterParser</name>
                    <groupName>ModifierLetterParser</groupName>
                    <syntax> public class ModifierLetterParser;</syntax>
                    <baseClass ref="1385560"/>
                    <constructors>
                        <constructor id="default_constructor_ModifierLetterParser_7DB0DEA1380671AE35DC365EC73A6604F28330A2">
                            <name>ModifierLetterParser()</name>
                            <syntax>public nothrow ModifierLetterParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_ModifierLetterParser_1B197972037711CFE130BEEDF5951A46FB6235A0">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_ModifierLetterParser_3BA9F7B0B3C7451817F969593D412BD1D674D779">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                    </functions>
                </class>
                <class id="1385659">
                    <name>ModifierSymbolParser</name>
                    <groupName>ModifierSymbolParser</groupName>
                    <syntax> public class ModifierSymbolParser;</syntax>
                    <baseClass ref="1385560"/>
                    <constructors>
                        <constructor id="default_constructor_ModifierSymbolParser_E2054FA33EEBFB91BC5E16935CA1B41BDB4DD2ED">
                            <name>ModifierSymbolParser()</name>
                            <syntax>public nothrow ModifierSymbolParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_ModifierSymbolParser_92366190E57B0C7B279F6D494C94B2782E850768">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_ModifierSymbolParser_6F8770BBE92B53F66A71559D98725947FA83CB04">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                    </functions>
                </class>
                <class id="1385546">
                    <name>Namespace</name>
                    <groupName>Namespace</groupName>
                    <syntax> public class Namespace;</syntax>
                    <baseClass ref="1385579"/>
                    <constructors>
                        <constructor id="constructor_Namespace_00F98FDD47D0A6A4E59E0724036573A565B965CE">
                            <name>Namespace(const String&lt;uchar>&amp; qualifiedName_, Scope* enclosingScope_)</name>
                            <syntax>public Namespace(const String&lt;uchar>&amp; qualifiedName_, Scope* enclosingScope_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>qualifiedName_</name>
                                    <type ref="type.1378718"/>
                                </parameter>
                                <parameter>
                                    <name>enclosingScope_</name>
                                    <type ref="type.1385716"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Namespace_D7954D7AD9730B8538925E64877EAAF9DA890DD1">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1385623">
                    <name>NonspacingMarkParser</name>
                    <groupName>NonspacingMarkParser</groupName>
                    <syntax> public class NonspacingMarkParser;</syntax>
                    <baseClass ref="1385560"/>
                    <constructors>
                        <constructor id="default_constructor_NonspacingMarkParser_6CF11454A27170298D16705666D7F0EC487820E6">
                            <name>NonspacingMarkParser()</name>
                            <syntax>public nothrow NonspacingMarkParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_NonspacingMarkParser_12CE08391BFA431505D005E9B0336286145215D6">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_NonspacingMarkParser_62E593AC99FF16EF06B03630AC133CD4D5A00F30">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                    </functions>
                </class>
                <class id="1385552">
                    <name>NonterminalParser</name>
                    <groupName>NonterminalParser</groupName>
                    <syntax> public class NonterminalParser;</syntax>
                    <baseClass ref="1385560"/>
                    <constructors>
                        <constructor id="default_constructor_NonterminalParser_59BFC36E9DB2E4F6F9B99FA7C21310691263B007">
                            <name>NonterminalParser()</name>
                            <syntax>public NonterminalParser();</syntax>
                        </constructor>
                        <constructor id="constructor_NonterminalParser_C4FE28D663AC01C4C6C000E403E22C0D0CABB594">
                            <name>NonterminalParser(const String&lt;uchar>&amp; name_, const String&lt;uchar>&amp; ruleName_)</name>
                            <syntax>public NonterminalParser(const String&lt;uchar>&amp; name_, const String&lt;uchar>&amp; ruleName_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.1378718"/>
                                </parameter>
                                <parameter>
                                    <name>ruleName_</name>
                                    <type ref="type.1378718"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_NonterminalParser_743C3E2E8E5063B5A452FB0C469CB8FE8116F6B5">
                            <name>NonterminalParser(const String&lt;uchar>&amp; name_, const String&lt;uchar>&amp; ruleName_, int numberOfArguments_)</name>
                            <syntax>public NonterminalParser(const String&lt;uchar>&amp; name_, const String&lt;uchar>&amp; ruleName_, int numberOfArguments_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.1378718"/>
                                </parameter>
                                <parameter>
                                    <name>ruleName_</name>
                                    <type ref="type.1378718"/>
                                </parameter>
                                <parameter>
                                    <name>numberOfArguments_</name>
                                    <type ref="type.1377790"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_NonterminalParser_44C499742F2BCD1A3402E28E4A35ACF20910720E">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_AddArgument_NonterminalParser_68CC060F8E2E5C0A161012968E6E3DA56726FAE9">
                            <name>AddArgument(DomObject* argument)</name>
                            <syntax>public void AddArgument(DomObject* argument);</syntax>
                            <parameters>
                                <parameter>
                                    <name>argument</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Arguments_NonterminalParser_6F3C7923EF272041C41083E448CBC2B2D580C910">
                            <name>Arguments() const</name>
                            <syntax>public nothrow inline const List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>>&amp; Arguments() const;</syntax>
                            <returnType ref="type.1385148"/>
                        </function>
                        <function id="member_function_IsSpecialized_NonterminalParser_20D0F15545FAEB4F5E13ED452B797C688568816E">
                            <name>IsSpecialized() const</name>
                            <syntax>public nothrow bool IsSpecialized() const;</syntax>
                            <returnType ref="type.1377785"/>
                        </function>
                        <function id="member_function_NumberOfArguments_NonterminalParser_0C5D6D1068AFA2A8A34B156EA8FA7AC16CB1F2DA">
                            <name>NumberOfArguments() const</name>
                            <syntax>public nothrow inline int NumberOfArguments() const;</syntax>
                            <returnType ref="type.1377790"/>
                        </function>
                        <function id="member_function_Parse_NonterminalParser_87E0FE76333665758B1C348A2B1C79F1894BF8A1">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                        <function id="member_function_Post_NonterminalParser_4C173C5FBFF26237949DA2FC574788965CA8EA40">
                            <name>Post() const</name>
                            <syntax>public nothrow inline PostCall Post() const;</syntax>
                            <returnType ref="1385549"/>
                        </function>
                        <function id="member_function_PostCallMethodName_NonterminalParser_821FD0238C8E63D2B0C99B3D99C365359560CAAA">
                            <name>PostCallMethodName() const</name>
                            <syntax>public nothrow String&lt;uchar> PostCallMethodName() const;</syntax>
                            <returnType ref="type.1378697"/>
                        </function>
                        <function id="member_function_Pre_NonterminalParser_44F809B4E1896000764D80741EB2B6AC33868040">
                            <name>Pre() const</name>
                            <syntax>public nothrow inline PreCall Pre() const;</syntax>
                            <returnType ref="1385548"/>
                        </function>
                        <function id="member_function_PreCallMethodName_NonterminalParser_9DCCCE0A78B1928358D3BB77E2586D06112CEBEB">
                            <name>PreCallMethodName() const</name>
                            <syntax>public nothrow String&lt;uchar> PreCallMethodName() const;</syntax>
                            <returnType ref="type.1378697"/>
                        </function>
                        <function id="member_function_Rule_NonterminalParser_3B204B5D92A0553D24A14B9D9401DCB71813C4F5">
                            <name>Rule() const</name>
                            <syntax>public nothrow inline RuleParser* Rule() const;</syntax>
                            <returnType ref="type.1385704"/>
                        </function>
                        <function id="member_function_RuleName_NonterminalParser_5662B8147E239A6C87F0A1C127043F30ABBCF977">
                            <name>RuleName() const</name>
                            <syntax>public nothrow inline const String&lt;uchar>&amp; RuleName() const;</syntax>
                            <returnType ref="type.1378718"/>
                        </function>
                        <function id="member_function_SetArguments_NonterminalParser_7DC9381F4107E52D07736C85E3D1E45B90E38535">
                            <name>SetArguments(List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>>&amp;&amp; arguments_)</name>
                            <syntax>public void SetArguments(List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>>&amp;&amp; arguments_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>arguments_</name>
                                    <type ref="type.1385149"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetPost_NonterminalParser_6EECD856E2A4CBACE8EA8F94C147FF277EBEEAAF">
                            <name>SetPost(PostCall postCall_)</name>
                            <syntax>public nothrow void SetPost(PostCall postCall_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>postCall_</name>
                                    <type ref="1385549"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetPre_NonterminalParser_40D47A9B3A7629E548EDDDA74D5E6B1953F596A7">
                            <name>SetPre(PreCall preCall_)</name>
                            <syntax>public nothrow void SetPre(PreCall preCall_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>preCall_</name>
                                    <type ref="1385548"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetRule_NonterminalParser_19EBE7A2B01C5FB103A87121BAD6ED11E4D5100E">
                            <name>SetRule(RuleParser* rule_)</name>
                            <syntax>public nothrow void SetRule(RuleParser* rule_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>rule_</name>
                                    <type ref="type.1385704"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetRuleName_NonterminalParser_147707328AE428814DA8F015A2A84DA8893852F2">
                            <name>SetRuleName(const String&lt;uchar>&amp; ruleName_)</name>
                            <syntax>public nothrow void SetRuleName(const String&lt;uchar>&amp; ruleName_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>ruleName_</name>
                                    <type ref="type.1378718"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_ValueFieldName_NonterminalParser_B5CD16345C7AE0C4174FE734DA1F74D94F46ECF2">
                            <name>ValueFieldName() const</name>
                            <syntax>public nothrow String&lt;uchar> ValueFieldName() const;</syntax>
                            <returnType ref="type.1378697"/>
                        </function>
                        <function id="member_function_VariableName_NonterminalParser_9FAA72A8D732B4334D8FF575A4595AD32A0CD32A">
                            <name>VariableName() const</name>
                            <syntax>public String&lt;uchar> VariableName() const;</syntax>
                            <returnType ref="type.1378697"/>
                        </function>
                    </functions>
                </class>
                <class id="1385629">
                    <name>NumberParser</name>
                    <groupName>NumberParser</groupName>
                    <syntax> public class NumberParser;</syntax>
                    <baseClass ref="1385560"/>
                    <constructors>
                        <constructor id="default_constructor_NumberParser_5BF96AFC11F1D9F1028B0C16DFFB07D5FA83B796">
                            <name>NumberParser()</name>
                            <syntax>public nothrow NumberParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_NumberParser_1D6B460AF810AA23862A303DCB1A8DDE79BAEA21">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_NumberParser_EB277875F8F54852EEF102F43211111E65C06581">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                    </functions>
                </class>
                <class id="1385556">
                    <name>Object</name>
                    <groupName>Object</groupName>
                    <syntax>abstract public class Object;</syntax>
                </class>
                <class id="1385643">
                    <name>OpenPunctuationParser</name>
                    <groupName>OpenPunctuationParser</groupName>
                    <syntax> public class OpenPunctuationParser;</syntax>
                    <baseClass ref="1385560"/>
                    <constructors>
                        <constructor id="default_constructor_OpenPunctuationParser_89AEB30F90E4D05EB5524785D3958FD3D7B1C750">
                            <name>OpenPunctuationParser()</name>
                            <syntax>public nothrow OpenPunctuationParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_OpenPunctuationParser_D1E0529BBAD6C2AE00219D6215A58E05C3A1AB81">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_OpenPunctuationParser_3CE894D2B796B214DBA48FC31E8D5ADBB558FB5B">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                    </functions>
                </class>
                <class id="1385486">
                    <name>OptionalParser</name>
                    <groupName>OptionalParser</groupName>
                    <syntax> public class OptionalParser;</syntax>
                    <baseClass ref="1385482"/>
                    <constructors>
                        <constructor id="constructor_OptionalParser_3FDE69F3032C6B6D481ED66EFCC7A6D94F3C931F">
                            <name>OptionalParser(Parser* child_)</name>
                            <syntax>public OptionalParser(Parser* child_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>child_</name>
                                    <type ref="type.1385561"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_OptionalParser_5E699D4349BE6E9AADFAB9740B04427E4CDF9A45">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_OptionalParser_7D27B1A67E3D3E7270BF4608DDDAB3A4A33E8E79">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                    </functions>
                </class>
                <class id="1385613">
                    <name>OtherLetterParser</name>
                    <groupName>OtherLetterParser</groupName>
                    <syntax> public class OtherLetterParser;</syntax>
                    <baseClass ref="1385560"/>
                    <constructors>
                        <constructor id="default_constructor_OtherLetterParser_D59745591C4A964E6D9BBE882C7F6BF60FFDF02C">
                            <name>OtherLetterParser()</name>
                            <syntax>public nothrow OtherLetterParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_OtherLetterParser_AD7FB7944ED823DCAEB4F4BD01999914253CA0D3">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_OtherLetterParser_3664A45409857248191CDEFEF6A205EF0DF4141D">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                    </functions>
                </class>
                <class id="1385635">
                    <name>OtherNumberParser</name>
                    <groupName>OtherNumberParser</groupName>
                    <syntax> public class OtherNumberParser;</syntax>
                    <baseClass ref="1385560"/>
                    <constructors>
                        <constructor id="default_constructor_OtherNumberParser_977B23C3E69858D9F9A7A2F4D10982B711F08EC9">
                            <name>OtherNumberParser()</name>
                            <syntax>public nothrow OtherNumberParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_OtherNumberParser_2242159698A1659FD7D1E12170EE8F3D134D29CD">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_OtherNumberParser_EB53D323609A7D3F65EF4BB301123F105ABDC2FA">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                    </functions>
                </class>
                <class id="1385671">
                    <name>OtherParser</name>
                    <groupName>OtherParser</groupName>
                    <syntax> public class OtherParser;</syntax>
                    <baseClass ref="1385560"/>
                    <constructors>
                        <constructor id="default_constructor_OtherParser_D05213DFE7D339E08D8F86ECD839B7DC849FBD6A">
                            <name>OtherParser()</name>
                            <syntax>public nothrow OtherParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_OtherParser_CF8BD0B97869A2699752386CC3E344964A0A82B0">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_OtherParser_1E2105BDC5A74FF8FCEE078E6324B71E205F0BA0">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                    </functions>
                </class>
                <class id="1385651">
                    <name>OtherPunctuationParser</name>
                    <groupName>OtherPunctuationParser</groupName>
                    <syntax> public class OtherPunctuationParser;</syntax>
                    <baseClass ref="1385560"/>
                    <constructors>
                        <constructor id="default_constructor_OtherPunctuationParser_E65D47BA300D9398A8A80F7E70EE0D7B3B29C26B">
                            <name>OtherPunctuationParser()</name>
                            <syntax>public nothrow OtherPunctuationParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_OtherPunctuationParser_9C816AB2CA4BB3E41BFABF797006A16D8E45CBCE">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_OtherPunctuationParser_8F87285F38C44DB52F0029DB17BF5A0D9CE73FFD">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                    </functions>
                </class>
                <class id="1385661">
                    <name>OtherSymbolParser</name>
                    <groupName>OtherSymbolParser</groupName>
                    <syntax> public class OtherSymbolParser;</syntax>
                    <baseClass ref="1385560"/>
                    <constructors>
                        <constructor id="default_constructor_OtherSymbolParser_887A85E44C5DFB2758BED8D556B7F529C88B5607">
                            <name>OtherSymbolParser()</name>
                            <syntax>public nothrow OtherSymbolParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_OtherSymbolParser_72504F4420F19A54E72E28E4558C28AFD01660AB">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_OtherSymbolParser_FF8D7672E55142B892997218EAE70F652D8085FE">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                    </functions>
                </class>
                <class id="1385669">
                    <name>ParagraphSeparatorParser</name>
                    <groupName>ParagraphSeparatorParser</groupName>
                    <syntax> public class ParagraphSeparatorParser;</syntax>
                    <baseClass ref="1385560"/>
                    <constructors>
                        <constructor id="default_constructor_ParagraphSeparatorParser_DF53B3EC887327FC09CC4214D0182F1C94C71F96">
                            <name>ParagraphSeparatorParser()</name>
                            <syntax>public nothrow ParagraphSeparatorParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_ParagraphSeparatorParser_9BC49050D5A723BD44338051911DD34D5BEC630D">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_ParagraphSeparatorParser_FF6BDC13FE43C067FB89A3A0B758C98C6E8E5E05">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                    </functions>
                </class>
                <class id="1385560">
                    <name>Parser</name>
                    <groupName>Parser</groupName>
                    <syntax>abstract public class Parser;</syntax>
                    <baseClass ref="1385579"/>
                    <constructors>
                        <constructor id="constructor_Parser_4B5325C3294C2B31043924597A8A97E5C3BDDFF0">
                            <name>Parser(const String&lt;uchar>&amp; name_, const String&lt;uchar>&amp; info_)</name>
                            <syntax>public nothrow Parser(const String&lt;uchar>&amp; name_, const String&lt;uchar>&amp; info_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.1378718"/>
                                </parameter>
                                <parameter>
                                    <name>info_</name>
                                    <type ref="type.1378718"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Info_Parser_E9A4C395CAD1B8C1D62896AF16D31F82CBAA75FB">
                            <name>Info() const</name>
                            <syntax>public nothrow inline const String&lt;uchar>&amp; Info() const;</syntax>
                            <returnType ref="type.1378718"/>
                        </function>
                        <function id="member_function_Parse_Parser_6CAC0A35D7ECE86AF37742BBFF8A982CE23573CD">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public abstract Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                    </functions>
                </class>
                <class id="1385569">
                    <name>ParsingData</name>
                    <groupName>ParsingData</groupName>
                    <syntax> public class ParsingData;</syntax>
                    <constructors>
                        <constructor id="constructor_ParsingData_FE08F8E727AAD859A3169B461074210F706718B8">
                            <name>ParsingData(int numRules)</name>
                            <syntax>public ParsingData(int numRules);</syntax>
                            <parameters>
                                <parameter>
                                    <name>numRules</name>
                                    <type ref="type.1377790"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_GetContext_ParsingData_48360F99710A60D22416A140CFF3AAB7613541EC">
                            <name>GetContext(int ruleId) const</name>
                            <syntax>public Context* GetContext(int ruleId) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>ruleId</name>
                                    <type ref="type.1377790"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1385565"/>
                        </function>
                        <function id="member_function_PopContext_ParsingData_4EC2B13C8D35CF301984634A63E094B7AC235CBC">
                            <name>PopContext(int ruleId)</name>
                            <syntax>public void PopContext(int ruleId);</syntax>
                            <parameters>
                                <parameter>
                                    <name>ruleId</name>
                                    <type ref="type.1377790"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_PushContext_ParsingData_A5163B15372DCB1A1B9939800B3016DE75CA348A">
                            <name>PushContext(int ruleId, Context* context)</name>
                            <syntax>public void PushContext(int ruleId, Context* context);</syntax>
                            <parameters>
                                <parameter>
                                    <name>ruleId</name>
                                    <type ref="type.1377790"/>
                                </parameter>
                                <parameter>
                                    <name>context</name>
                                    <type ref="type.1385565"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1385573">
                    <name>ParsingDomain</name>
                    <groupName>ParsingDomain</groupName>
                    <syntax> public class ParsingDomain;</syntax>
                    <baseClass ref="1385579"/>
                    <constructors>
                        <constructor id="default_constructor_ParsingDomain_9DC3276072DCBFF815002D180BF039BB3FC17458">
                            <name>ParsingDomain()</name>
                            <syntax>public ParsingDomain();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_ParsingDomain_0B533BBC0270A2EC91190FD568D377A9604239D7">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_AddGrammar_ParsingDomain_051F221D99B7A015FD180E16338C6C8D7795479D">
                            <name>AddGrammar(Grammar* grammar)</name>
                            <syntax>public void AddGrammar(Grammar* grammar);</syntax>
                            <parameters>
                                <parameter>
                                    <name>grammar</name>
                                    <type ref="type.1385523"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_BeginNamespace_ParsingDomain_777BF39E6C7A8653DFB24AA46787096C1C2EDA6E">
                            <name>BeginNamespace(const String&lt;uchar>&amp; ns)</name>
                            <syntax>public void BeginNamespace(const String&lt;uchar>&amp; ns);</syntax>
                            <parameters>
                                <parameter>
                                    <name>ns</name>
                                    <type ref="type.1378718"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_CurrentNamespace_ParsingDomain_D96F7D6F60F8A60B275A08848F38301AC54BE9D8">
                            <name>CurrentNamespace() const</name>
                            <syntax>public nothrow inline Namespace* CurrentNamespace() const;</syntax>
                            <returnType ref="type.1385547"/>
                        </function>
                        <function id="member_function_CurrentScope_ParsingDomain_7993EE98BD416DA37B483FF9A169BC43F34424DF">
                            <name>CurrentScope() const</name>
                            <syntax>public nothrow inline Scope* CurrentScope() const;</syntax>
                            <returnType ref="type.1385716"/>
                        </function>
                        <function id="member_function_EndNamespace_ParsingDomain_9714A9BDFABB00290870679E0AED785DFEB8DF67">
                            <name>EndNamespace()</name>
                            <syntax>public void EndNamespace();</syntax>
                        </function>
                        <function id="member_function_GetGrammar_ParsingDomain_E192636BB57C68601C38DD8F5C9680F25F469BAE">
                            <name>GetGrammar(const String&lt;uchar>&amp; grammarName) const</name>
                            <syntax>public Grammar* GetGrammar(const String&lt;uchar>&amp; grammarName) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>grammarName</name>
                                    <type ref="type.1378718"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1385523"/>
                        </function>
                        <function id="member_function_GetNamespaceScope_ParsingDomain_8E5E80330FE4A298A7A98332ECEFDF50DC6E4C72">
                            <name>GetNamespaceScope(const String&lt;uchar>&amp; fullNamespaceName) const</name>
                            <syntax>public Scope* GetNamespaceScope(const String&lt;uchar>&amp; fullNamespaceName) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>fullNamespaceName</name>
                                    <type ref="type.1378718"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1385716"/>
                        </function>
                        <function id="member_function_GetNextRuleId_ParsingDomain_C447AACB8B63F5199E90D11C7638E776FA741EA5">
                            <name>GetNextRuleId()</name>
                            <syntax>public nothrow inline int GetNextRuleId();</syntax>
                            <returnType ref="type.1377790"/>
                        </function>
                        <function id="member_function_GlobalNamespace_ParsingDomain_5955290F44B7D3C39B6070AF62D9BF3DAC5F246B">
                            <name>GlobalNamespace() const</name>
                            <syntax>public nothrow inline Namespace* GlobalNamespace() const;</syntax>
                            <returnType ref="type.1385547"/>
                        </function>
                        <function id="member_function_NumRules_ParsingDomain_D8EEFC3004F2CA61E7D30598D9EB46EFCA3A3CF3">
                            <name>NumRules() const</name>
                            <syntax>public nothrow inline int NumRules() const;</syntax>
                            <returnType ref="type.1377790"/>
                        </function>
                    </functions>
                </class>
                <class id="1385577">
                    <name>ParsingDomainRepository</name>
                    <groupName>ParsingDomainRepository</groupName>
                    <syntax> public class ParsingDomainRepository;</syntax>
                    <functions>
                        <function id="member_function_Register_ParsingDomainRepository_0F44F5F7DB114641F7521666038EF1AAE272D4EB">
                            <name>Register(ParsingDomain* parsingDomain)</name>
                            <syntax>public void Register(ParsingDomain* parsingDomain);</syntax>
                            <parameters>
                                <parameter>
                                    <name>parsingDomain</name>
                                    <type ref="type.1385574"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                    <staticMemberFunctions>
                        <function id="member_function_Instance_ParsingDomainRepository_C6577EA80312A9F4E2CE0EBB929AA197E89941ED">
                            <name>Instance()</name>
                            <syntax>public static ParsingDomainRepository&amp; Instance();</syntax>
                            <returnType ref="type.1388159"/>
                        </function>
                    </staticMemberFunctions>
                </class>
                <class id="1385518">
                    <name>ParsingException</name>
                    <groupName>ParsingException</groupName>
                    <syntax> public class ParsingException;</syntax>
                    <baseClass ref="1378137"/>
                    <constructors>
                        <constructor id="constructor_ParsingException_B2735378A6F1A15B4B62D52A85E6DA5AC93503C2">
                            <name>ParsingException(const String&lt;char>&amp; message_, const String&lt;char>&amp; fileName_, const Span&amp; span_, const uchar* start_, const uchar* end_)</name>
                            <syntax>public ParsingException(const String&lt;char>&amp; message_, const String&lt;char>&amp; fileName_, const Span&amp; span_, const uchar* start_, const uchar* end_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>message_</name>
                                    <type ref="type.1378593"/>
                                </parameter>
                                <parameter>
                                    <name>fileName_</name>
                                    <type ref="type.1378593"/>
                                </parameter>
                                <parameter>
                                    <name>span_</name>
                                    <type ref="type.1387437"/>
                                </parameter>
                                <parameter>
                                    <name>start_</name>
                                    <type ref="type.1378702"/>
                                </parameter>
                                <parameter>
                                    <name>end_</name>
                                    <type ref="type.1378702"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_End_ParsingException_F66A67C7C5109C56F43E0A3895B9F147F2B02C13">
                            <name>End() const</name>
                            <syntax>public nothrow inline const uchar* End() const;</syntax>
                            <returnType ref="type.1378702"/>
                        </function>
                        <function id="member_function_FileName_ParsingException_89482DF32FDBE1B891F9206F027468454FD105B8">
                            <name>FileName() const</name>
                            <syntax>public nothrow inline const String&lt;char>&amp; FileName() const;</syntax>
                            <returnType ref="type.1378593"/>
                        </function>
                        <function id="member_function_Message_ParsingException_3435DE6C00C641C72F74C51C9CBB6A9E89E7CD4D">
                            <name>Message() const</name>
                            <syntax>public nothrow inline const String&lt;char>&amp; Message() const;</syntax>
                            <returnType ref="type.1378593"/>
                        </function>
                        <function id="member_function_SpanValue_ParsingException_C8044AA13A60E07C2AA8D4D977E2B9FA935B0B47">
                            <name>SpanValue() const</name>
                            <syntax>public nothrow inline const Span&amp; SpanValue() const;</syntax>
                            <returnType ref="type.1387437"/>
                        </function>
                        <function id="member_function_Start_ParsingException_B8366297CE7935E6083596A0BF94E055BE26AD91">
                            <name>Start() const</name>
                            <syntax>public nothrow inline const uchar* Start() const;</syntax>
                            <returnType ref="type.1378702"/>
                        </function>
                    </functions>
                </class>
                <class id="1385579">
                    <name>ParsingObject</name>
                    <groupName>ParsingObject</groupName>
                    <syntax>abstract public class ParsingObject;</syntax>
                    <constructors>
                        <constructor id="constructor_ParsingObject_9269C859611302DF828DCA08C3057DF286EF2C2C">
                            <name>ParsingObject(const String&lt;uchar>&amp; name_)</name>
                            <syntax>public nothrow ParsingObject(const String&lt;uchar>&amp; name_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.1378718"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_ParsingObject_C41C5D0BE3B068D838C9F227D0230245F421AAE5">
                            <name>ParsingObject(const String&lt;uchar>&amp; name_, Scope* enclosingScope_)</name>
                            <syntax>public nothrow ParsingObject(const String&lt;uchar>&amp; name_, Scope* enclosingScope_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.1378718"/>
                                </parameter>
                                <parameter>
                                    <name>enclosingScope_</name>
                                    <type ref="type.1385716"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_ParsingObject_7B9275C0656BAFDDAEA8914241907708E46EB027">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public abstract void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_AddToScope_ParsingObject_E5730DD32B10DFA288C085D9B541EAB8D3219AA1">
                            <name>AddToScope()</name>
                            <syntax>public virtual void AddToScope();</syntax>
                        </function>
                        <function id="member_function_ContainerScope_ParsingObject_37296722C598F7692BCE0F9D41E63B46561595A4">
                            <name>ContainerScope() const</name>
                            <syntax>public nothrow inline Scope* ContainerScope() const;</syntax>
                            <returnType ref="type.1385716"/>
                        </function>
                        <function id="member_function_EnclosingScope_ParsingObject_3D89B1342B57E484AFA883A20B6DAED6C19C38F7">
                            <name>EnclosingScope() const</name>
                            <syntax>public nothrow inline Scope* EnclosingScope() const;</syntax>
                            <returnType ref="type.1385716"/>
                        </function>
                        <function id="member_function_FullName_ParsingObject_DF98E1491247B72DDDF8C86FC689317626403733">
                            <name>FullName() const</name>
                            <syntax>public nothrow String&lt;uchar> FullName() const;</syntax>
                            <returnType ref="type.1378697"/>
                        </function>
                        <function id="member_function_GetScope_ParsingObject_77988AC06BC333944EADCFBC7B98DCF4969CA067">
                            <name>GetScope() const</name>
                            <syntax>public nothrow inline Scope* GetScope() const;</syntax>
                            <returnType ref="type.1385716"/>
                        </function>
                        <function id="member_function_GetSpan_ParsingObject_8A84F62A9840387CBDB4DF2F215EE5E8F9AB875B">
                            <name>GetSpan() const</name>
                            <syntax>public nothrow inline const Span&amp; GetSpan() const;</syntax>
                            <returnType ref="type.1387437"/>
                        </function>
                        <function id="member_function_IsExternal_ParsingObject_C4C5BCDA2544495C63E375A3C08EA0F7602CD15B">
                            <name>IsExternal() const</name>
                            <syntax>public nothrow inline bool IsExternal() const;</syntax>
                            <returnType ref="type.1377785"/>
                        </function>
                        <function id="member_function_IsOwned_ParsingObject_854FE5D7C3E95FE55C00069178CC03FBAF42D022">
                            <name>IsOwned() const</name>
                            <syntax>public nothrow inline bool IsOwned() const;</syntax>
                            <returnType ref="type.1377785"/>
                        </function>
                        <function id="member_function_Name_ParsingObject_4B0E58B9F75AF26D67DB0DDEB97451F9FD0E80F6">
                            <name>Name() const</name>
                            <syntax>public nothrow inline const String&lt;uchar>&amp; Name() const;</syntax>
                            <returnType ref="type.1378718"/>
                        </function>
                        <function id="member_function_Own_ParsingObject_BD6A4894FA12FAA84D203B85091147133B876314">
                            <name>Own(ParsingObject* object)</name>
                            <syntax>public void Own(ParsingObject* object);</syntax>
                            <parameters>
                                <parameter>
                                    <name>object</name>
                                    <type ref="type.1385580"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Owner_ParsingObject_856F5FDDE08B947B5BBA3CBD7A485BC052A1F676">
                            <name>Owner() const</name>
                            <syntax>public nothrow inline int Owner() const;</syntax>
                            <returnType ref="type.1377790"/>
                        </function>
                        <function id="member_function_SetContainerScope_ParsingObject_2EA76B2436D460A13B2E160EAB7C98E8BFAF03D5">
                            <name>SetContainerScope(Scope* scope_)</name>
                            <syntax>public nothrow void SetContainerScope(Scope* scope_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scope_</name>
                                    <type ref="type.1385716"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetEnclosingScope_ParsingObject_B5EE8709E516CFD5CFA7DD3C3CD45CA28110A592">
                            <name>SetEnclosingScope(Scope* enclosingScope_)</name>
                            <syntax>public nothrow void SetEnclosingScope(Scope* enclosingScope_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>enclosingScope_</name>
                                    <type ref="type.1385716"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetName_ParsingObject_705BDDAC469CBA1882696A5043B4CC94DDBAD160">
                            <name>SetName(const String&lt;uchar>&amp; name_)</name>
                            <syntax>public nothrow void SetName(const String&lt;uchar>&amp; name_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.1378718"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetOwned_ParsingObject_972016608B089C948A2ABA5CA61E3D4CB47A5D8B">
                            <name>SetOwned()</name>
                            <syntax>public nothrow inline void SetOwned();</syntax>
                        </function>
                        <function id="member_function_SetOwner_ParsingObject_AE2E61409097F1C4EBD4D88526CEC47CEB4580B3">
                            <name>SetOwner(int owner_)</name>
                            <syntax>public nothrow inline void SetOwner(int owner_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>owner_</name>
                                    <type ref="type.1377790"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetSpan_ParsingObject_9A2CE9CAE7169992DBE1277460D8CBEC9DF487CD">
                            <name>SetSpan(const Span&amp; span_)</name>
                            <syntax>public nothrow void SetSpan(const Span&amp; span_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>span_</name>
                                    <type ref="type.1387437"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1385488">
                    <name>PositiveParser</name>
                    <groupName>PositiveParser</groupName>
                    <syntax> public class PositiveParser;</syntax>
                    <baseClass ref="1385482"/>
                    <constructors>
                        <constructor id="constructor_PositiveParser_93FDAB33706C036D57ED63DA396D013CF7828E58">
                            <name>PositiveParser(Parser* child_)</name>
                            <syntax>public PositiveParser(Parser* child_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>child_</name>
                                    <type ref="type.1385561"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_PositiveParser_53BF463F27037F649FA01D6F520535D632E64202">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_PositiveParser_99A200B82ACA90C8D020DEE9E47A0EF033745225">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                    </functions>
                </class>
                <class id="1385679">
                    <name>PrivateUseParser</name>
                    <groupName>PrivateUseParser</groupName>
                    <syntax> public class PrivateUseParser;</syntax>
                    <baseClass ref="1385560"/>
                    <constructors>
                        <constructor id="default_constructor_PrivateUseParser_5A315C017DD1940F98903E6AC54681AAB7983BA5">
                            <name>PrivateUseParser()</name>
                            <syntax>public nothrow PrivateUseParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_PrivateUseParser_404E119B40E81DD457FCE7B0A6397F64B0BD3519">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_PrivateUseParser_836A516651A8CFCDECE09624AA9B16D9DCC038D4">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                    </functions>
                </class>
                <class id="1385637">
                    <name>PunctuationParser</name>
                    <groupName>PunctuationParser</groupName>
                    <syntax> public class PunctuationParser;</syntax>
                    <baseClass ref="1385560"/>
                    <constructors>
                        <constructor id="default_constructor_PunctuationParser_5730F1DA3D8BAF577614F520059DFAC485F08171">
                            <name>PunctuationParser()</name>
                            <syntax>public nothrow PunctuationParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_PunctuationParser_18BF0C90AE13F853974665F8E87C65F5E680E2D0">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_PunctuationParser_A71E7CF32CBB0CF04726C65376EA0D8394177FB9">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                    </functions>
                </class>
                <class id="1385695">
                    <name>RangeParser</name>
                    <groupName>RangeParser</groupName>
                    <syntax> public class RangeParser;</syntax>
                    <baseClass ref="1385560"/>
                    <constructors>
                        <constructor id="constructor_RangeParser_5DAAC6FB5AE7643363FC875F313A52CF982CE7F3">
                            <name>RangeParser(uint rangeStart_, uint rangeEnd_)</name>
                            <syntax>public nothrow RangeParser(uint rangeStart_, uint rangeEnd_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>rangeStart_</name>
                                    <type ref="type.1377791"/>
                                </parameter>
                                <parameter>
                                    <name>rangeEnd_</name>
                                    <type ref="type.1377791"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_RangeParser_FACAF808193BCEF5309896989E7C8D733FC4DDF9">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_End_RangeParser_3DC51510126DBF9C5A2C00FAB151AF817575673F">
                            <name>End() const</name>
                            <syntax>public nothrow inline uint End() const;</syntax>
                            <returnType ref="type.1377791"/>
                        </function>
                        <function id="member_function_Parse_RangeParser_4282635DD4C4FA45BC814DE9921123B2AA5F70E5">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                        <function id="member_function_Start_RangeParser_DA0795523A6AB5500F6096BE12B5FA57CA6A1A9E">
                            <name>Start() const</name>
                            <syntax>public nothrow inline uint Start() const;</syntax>
                            <returnType ref="type.1377791"/>
                        </function>
                    </functions>
                </class>
                <class id="1385568">
                    <name>RuleData</name>
                    <groupName>RuleData</groupName>
                    <syntax> public class RuleData;</syntax>
                    <memberVariables>
                        <memberVariable id="variable_context_F0B0957D6C70EA7FF6FBAEFC9EDF5DF0D543B0EE">
                            <name>context</name>
                            <syntax>public UniquePtr&lt;System.Text.Parsing.Context> context;</syntax>
                            <type ref="type.1387941"/>
                        </memberVariable>
                        <memberVariable id="variable_contextStack_76F167D329710BE1B6DB4A7E01F891D4314EB529">
                            <name>contextStack</name>
                            <syntax>public ContextStack contextStack;</syntax>
                            <type ref="1385566"/>
                        </memberVariable>
                    </memberVariables>
                </class>
                <class id="1385707">
                    <name>RuleLink</name>
                    <groupName>RuleLink</groupName>
                    <syntax> public class RuleLink;</syntax>
                    <baseClass ref="1385579"/>
                    <constructors>
                        <constructor id="constructor_RuleLink_3D00037980A1A0498510E7FB3E5C45F4912CEF99">
                            <name>RuleLink(Grammar* grammar_, const String&lt;uchar>&amp; linkedRuleName_)</name>
                            <syntax>public RuleLink(Grammar* grammar_, const String&lt;uchar>&amp; linkedRuleName_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>grammar_</name>
                                    <type ref="type.1385523"/>
                                </parameter>
                                <parameter>
                                    <name>linkedRuleName_</name>
                                    <type ref="type.1378718"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_RuleLink_5DE8CBA7BB401839C9B8CC48842E4CE631EC42A0">
                            <name>RuleLink(const String&lt;uchar>&amp; name_, Grammar* grammar_, const String&lt;uchar>&amp; linkedRuleName_)</name>
                            <syntax>public RuleLink(const String&lt;uchar>&amp; name_, Grammar* grammar_, const String&lt;uchar>&amp; linkedRuleName_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.1378718"/>
                                </parameter>
                                <parameter>
                                    <name>grammar_</name>
                                    <type ref="type.1385523"/>
                                </parameter>
                                <parameter>
                                    <name>linkedRuleName_</name>
                                    <type ref="type.1378718"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_RuleLink_0B51A696219F621133C69AA6026EC29039405424">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_AddToScope_RuleLink_ED9AD2F388AC57F2981DDB10227B5CBEAEBF813B">
                            <name>AddToScope()</name>
                            <syntax>public override void AddToScope();</syntax>
                        </function>
                        <function id="member_function_IsAddedToGrammar_RuleLink_029CCB3D2287C43A7966E626E01C8AC38BC412A9">
                            <name>IsAddedToGrammar() const</name>
                            <syntax>public nothrow inline bool IsAddedToGrammar() const;</syntax>
                            <returnType ref="type.1377785"/>
                        </function>
                        <function id="member_function_LinkedRuleName_RuleLink_436EC4EDA3961051C69CCC2E8F690A3D31B08039">
                            <name>LinkedRuleName() const</name>
                            <syntax>public nothrow inline const String&lt;uchar>&amp; LinkedRuleName() const;</syntax>
                            <returnType ref="type.1378718"/>
                        </function>
                        <function id="member_function_Rule_RuleLink_23AB9DFD45C62459C6D5436420EAFE84AF248B8B">
                            <name>Rule() const</name>
                            <syntax>public nothrow inline RuleParser* Rule() const;</syntax>
                            <returnType ref="type.1385704"/>
                        </function>
                        <function id="member_function_SetAddedToGrammar_RuleLink_78C7E122605857D521851F409B2612A66436E3B1">
                            <name>SetAddedToGrammar()</name>
                            <syntax>public nothrow void SetAddedToGrammar();</syntax>
                        </function>
                        <function id="member_function_SetRule_RuleLink_381C1DAF52230A2DF723A53FA027AD7268039D34">
                            <name>SetRule(RuleParser* rule_)</name>
                            <syntax>public nothrow void SetRule(RuleParser* rule_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>rule_</name>
                                    <type ref="type.1385704"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1385703">
                    <name>RuleParser</name>
                    <groupName>RuleParser</groupName>
                    <syntax> public class RuleParser;</syntax>
                    <baseClass ref="1385560"/>
                    <constructors>
                        <constructor id="constructor_RuleParser_B48601DCD26E96C83DF4BEF8471ADB3A84EC6152">
                            <name>RuleParser(const String&lt;uchar>&amp; name_, Scope* enclosingScope_)</name>
                            <syntax>public RuleParser(const String&lt;uchar>&amp; name_, Scope* enclosingScope_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.1378718"/>
                                </parameter>
                                <parameter>
                                    <name>enclosingScope_</name>
                                    <type ref="type.1385716"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_RuleParser_48078905A48EB2B47A048B067193B5F8CB58863F">
                            <name>RuleParser(const String&lt;uchar>&amp; name_, Scope* enclosingScope_, int id_, Parser* definition_)</name>
                            <syntax>public RuleParser(const String&lt;uchar>&amp; name_, Scope* enclosingScope_, int id_, Parser* definition_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.1378718"/>
                                </parameter>
                                <parameter>
                                    <name>enclosingScope_</name>
                                    <type ref="type.1385716"/>
                                </parameter>
                                <parameter>
                                    <name>id_</name>
                                    <type ref="type.1377790"/>
                                </parameter>
                                <parameter>
                                    <name>definition_</name>
                                    <type ref="type.1385561"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_RuleParser_C82B66C5947114D6A51ACA87B243D6FF039DA781">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Actions_RuleParser_9A6B1FCB0FBFB2A1BEB13A3CB7561AE1DE77D875">
                            <name>Actions() const</name>
                            <syntax>public nothrow inline const List&lt;ActionParser*>&amp; Actions() const;</syntax>
                            <returnType ref="type.1388273"/>
                        </function>
                        <function id="member_function_AddAction_RuleParser_385DEF43917E98C3A4CE09F37E42195D13709F74">
                            <name>AddAction(ActionParser* action)</name>
                            <syntax>public void AddAction(ActionParser* action);</syntax>
                            <parameters>
                                <parameter>
                                    <name>action</name>
                                    <type ref="type.1385477"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_AddInheritedAttribute_RuleParser_0948C580294009CCC6D2CB999EAC5B91C4F60823">
                            <name>AddInheritedAttribute(const AttrOrVar&amp; attr)</name>
                            <syntax>public void AddInheritedAttribute(const AttrOrVar&amp; attr);</syntax>
                            <parameters>
                                <parameter>
                                    <name>attr</name>
                                    <type ref="type.1388231"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_AddLocalVariable_RuleParser_4407A8905B04D46FA20BA52A5ADFEBFF1A39EEFC">
                            <name>AddLocalVariable(const AttrOrVar&amp; var)</name>
                            <syntax>public void AddLocalVariable(const AttrOrVar&amp; var);</syntax>
                            <parameters>
                                <parameter>
                                    <name>var</name>
                                    <type ref="type.1388231"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_AddNonterminal_RuleParser_D08E9E52DA970C9A88D38304DAA66C8B40515FCB">
                            <name>AddNonterminal(NonterminalParser* nonterminal)</name>
                            <syntax>public void AddNonterminal(NonterminalParser* nonterminal);</syntax>
                            <parameters>
                                <parameter>
                                    <name>nonterminal</name>
                                    <type ref="type.1385553"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Definition_RuleParser_24E707D52A110940A129DD12AF5F4623DD250320">
                            <name>Definition() const</name>
                            <syntax>public nothrow inline Parser* Definition() const;</syntax>
                            <returnType ref="type.1385561"/>
                        </function>
                        <function id="member_function_Enter_RuleParser_03B20179EA4192A430113D81D8801B2D50E58BB4">
                            <name>Enter(Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public virtual void Enter(Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_ExpandCode_RuleParser_AF8C052B065B859237990DEAF95D3414E8F7C71F">
                            <name>ExpandCode()</name>
                            <syntax>public void ExpandCode();</syntax>
                        </function>
                        <function id="member_function_GetAction_RuleParser_3751C385036F31196943E185CC6C809D7D5673B1">
                            <name>GetAction(const String&lt;uchar>&amp; actionName) const</name>
                            <syntax>public ActionParser* GetAction(const String&lt;uchar>&amp; actionName) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>actionName</name>
                                    <type ref="type.1378718"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1385477"/>
                        </function>
                        <function id="member_function_GetGrammar_RuleParser_4F3A7E5C457F826FCF34C918C8C192C8AD5D6B7A">
                            <name>GetGrammar() const</name>
                            <syntax>public nothrow inline Grammar* GetGrammar() const;</syntax>
                            <returnType ref="type.1385523"/>
                        </function>
                        <function id="member_function_GetNonterminal_RuleParser_9FA99C5393688BDCAAE7EEAE9FBD939B86D50F34">
                            <name>GetNonterminal(const String&lt;uchar>&amp; nonterminalName) const</name>
                            <syntax>public NonterminalParser* GetNonterminal(const String&lt;uchar>&amp; nonterminalName) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>nonterminalName</name>
                                    <type ref="type.1378718"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1385553"/>
                        </function>
                        <function id="member_function_Id_RuleParser_6BAD1512899810067D4F1183EDA0B72F7DD69B90">
                            <name>Id() const</name>
                            <syntax>public nothrow inline int Id() const;</syntax>
                            <returnType ref="type.1377790"/>
                        </function>
                        <function id="member_function_InheritedAttributes_RuleParser_27440305BDD1DEC10F79E0FAC200174624E7B1B6">
                            <name>InheritedAttributes() const</name>
                            <syntax>public nothrow inline List&lt;System.Text.Parsing.AttrOrVar>&amp; InheritedAttributes() const;</syntax>
                            <returnType ref="type.1388250"/>
                        </function>
                        <function id="member_function_IsSpecialized_RuleParser_CD4F7EADDC6580B9784F41CCCB394BCC35FD57E5">
                            <name>IsSpecialized() const</name>
                            <syntax>public nothrow inline bool IsSpecialized() const;</syntax>
                            <returnType ref="type.1377785"/>
                        </function>
                        <function id="member_function_Leave_RuleParser_9EFBB115C72511440D815637D5A7553F74763126">
                            <name>Leave(Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData, bool matched)</name>
                            <syntax>public virtual void Leave(Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData, bool matched);</syntax>
                            <parameters>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                                <parameter>
                                    <name>matched</name>
                                    <type ref="type.1377785"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Link_RuleParser_56D329D60DEDE1C16F8C8E5757B288915FDD84BB">
                            <name>Link()</name>
                            <syntax>public virtual void Link();</syntax>
                        </function>
                        <function id="member_function_LocalVariables_RuleParser_C6A0DD980C15E05B59F0993F3A117F544ACCCA7E">
                            <name>LocalVariables() const</name>
                            <syntax>public nothrow inline List&lt;System.Text.Parsing.AttrOrVar>&amp; LocalVariables() const;</syntax>
                            <returnType ref="type.1388250"/>
                        </function>
                        <function id="member_function_Nonterminals_RuleParser_D90015F32F5E3AC9F045440F851E4BE70FC01AE5">
                            <name>Nonterminals() const</name>
                            <syntax>public nothrow inline const List&lt;NonterminalParser*>&amp; Nonterminals() const;</syntax>
                            <returnType ref="type.1388298"/>
                        </function>
                        <function id="member_function_NumberOfParameters_RuleParser_0787E378B27DB958A3C2076B90C85C19853BDFC5">
                            <name>NumberOfParameters() const</name>
                            <syntax>public nothrow inline int NumberOfParameters() const;</syntax>
                            <returnType ref="type.1377790"/>
                        </function>
                        <function id="member_function_Parse_RuleParser_DAE927437B9B17E2EE355286BBBA8A9DD8C33863">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                        <function id="member_function_SetDefinition_RuleParser_673AB9D2092F6CD0C3D989D85CE70802937FDCB7">
                            <name>SetDefinition(Parser* definition_)</name>
                            <syntax>public void SetDefinition(Parser* definition_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>definition_</name>
                                    <type ref="type.1385561"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetGrammar_RuleParser_79013863C93421CF4F6DE122DFC19AF3C80B3EA7">
                            <name>SetGrammar(Grammar* grammar_)</name>
                            <syntax>public nothrow void SetGrammar(Grammar* grammar_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>grammar_</name>
                                    <type ref="type.1385523"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetValueTypeName_RuleParser_D8D1D7576ED0ED6506E09DDEB3478A172DC4E567">
                            <name>SetValueTypeName(const String&lt;uchar>&amp; valueTypeName_)</name>
                            <syntax>public nothrow void SetValueTypeName(const String&lt;uchar>&amp; valueTypeName_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>valueTypeName_</name>
                                    <type ref="type.1378718"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SpecializedTypeName_RuleParser_8415BED13B7B77BD9EB46A13B097F44D43E738CA">
                            <name>SpecializedTypeName() const</name>
                            <syntax>public nothrow String&lt;uchar> SpecializedTypeName() const;</syntax>
                            <returnType ref="type.1378697"/>
                        </function>
                        <function id="member_function_TakesOrReturnsValuesOrHasLocals_RuleParser_BD456C14E897C9065955C5822F39259A5430B7D1">
                            <name>TakesOrReturnsValuesOrHasLocals() const</name>
                            <syntax>public nothrow inline bool TakesOrReturnsValuesOrHasLocals() const;</syntax>
                            <returnType ref="type.1377785"/>
                        </function>
                        <function id="member_function_ValueTypeName_RuleParser_621AD5107A6E711F3DAE4669AE1FD0F4EE90589F">
                            <name>ValueTypeName() const</name>
                            <syntax>public nothrow inline const String&lt;uchar>&amp; ValueTypeName() const;</syntax>
                            <returnType ref="type.1378718"/>
                        </function>
                    </functions>
                </class>
                <class id="1385711">
                    <name>Scanner</name>
                    <groupName>Scanner</groupName>
                    <syntax> public class Scanner;</syntax>
                    <constructors>
                        <constructor id="constructor_Scanner_1E6EA6D99D4F5E3629AC426CAB7ADE3C0F6D38B9">
                            <name>Scanner(const uchar* start_, const uchar* end_, const String&lt;char>&amp; fileName_, int fileIndex_, Parser* skipper_)</name>
                            <syntax>public nothrow Scanner(const uchar* start_, const uchar* end_, const String&lt;char>&amp; fileName_, int fileIndex_, Parser* skipper_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>start_</name>
                                    <type ref="type.1378702"/>
                                </parameter>
                                <parameter>
                                    <name>end_</name>
                                    <type ref="type.1378702"/>
                                </parameter>
                                <parameter>
                                    <name>fileName_</name>
                                    <type ref="type.1378593"/>
                                </parameter>
                                <parameter>
                                    <name>fileIndex_</name>
                                    <type ref="type.1377790"/>
                                </parameter>
                                <parameter>
                                    <name>skipper_</name>
                                    <type ref="type.1385561"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_AtBeginningOfLine_Scanner_6A3CF86EF052FA27D1726E01D593001DA62E48E7">
                            <name>AtBeginningOfLine() const</name>
                            <syntax>public nothrow inline bool AtBeginningOfLine() const;</syntax>
                            <returnType ref="type.1377785"/>
                        </function>
                        <function id="member_function_AtEnd_Scanner_19758054878924B58626389C6987587F3ED267B2">
                            <name>AtEnd() const</name>
                            <syntax>public nothrow inline bool AtEnd() const;</syntax>
                            <returnType ref="type.1377785"/>
                        </function>
                        <function id="member_function_BeginToken_Scanner_F7ECBA8B4C284F812359DE00EA3F67A3FD1CE9C5">
                            <name>BeginToken()</name>
                            <syntax>public nothrow inline void BeginToken();</syntax>
                        </function>
                        <function id="member_function_Char_Scanner_11EA257CF9BD69444642B6501233E27BE345C45A">
                            <name>Char() const</name>
                            <syntax>public nothrow inline uchar Char() const;</syntax>
                            <returnType ref="type.1377798"/>
                        </function>
                        <function id="member_function_End_Scanner_72CEAFEEFA84A01874FC357C13C18B3E84DEB8FD">
                            <name>End() const</name>
                            <syntax>public nothrow inline const uchar* End() const;</syntax>
                            <returnType ref="type.1378702"/>
                        </function>
                        <function id="member_function_EndToken_Scanner_FBD502A8F4D5F112CD3459B546CF764B765EFF25">
                            <name>EndToken()</name>
                            <syntax>public nothrow inline void EndToken();</syntax>
                        </function>
                        <function id="member_function_FileName_Scanner_10D621103CB0516A153D3E1BB4950D4A8C7EC5F2">
                            <name>FileName() const</name>
                            <syntax>public nothrow inline const String&lt;char>&amp; FileName() const;</syntax>
                            <returnType ref="type.1378593"/>
                        </function>
                        <function id="member_function_GetSpan_Scanner_332FA032003C962833B3B7B7F319A6625F56190C">
                            <name>GetSpan() const</name>
                            <syntax>public nothrow inline const Span&amp; GetSpan() const;</syntax>
                            <returnType ref="type.1387437"/>
                        </function>
                        <function id="member_function_LineEndIndex_Scanner_BBA2001A2A82E81EA3C1B7F9131816A3FCF2184F">
                            <name>LineEndIndex(int maxLineLength) const</name>
                            <syntax>public nothrow int LineEndIndex(int maxLineLength) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>maxLineLength</name>
                                    <type ref="type.1377790"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1377790"/>
                        </function>
                        <function id="member_function_Log_Scanner_59E6F6E38DD64683CDCDD497A50EBA6FD1B8BE95">
                            <name>Log() const</name>
                            <syntax>public nothrow inline XmlLog* Log() const;</syntax>
                            <returnType ref="type.1385828"/>
                        </function>
                        <function id="member_function_RestOfLine_Scanner_96B4AC96712C77D2A2E47578401050BF468D1585">
                            <name>RestOfLine(int maxLineLength)</name>
                            <syntax>public nothrow String&lt;uchar> RestOfLine(int maxLineLength);</syntax>
                            <parameters>
                                <parameter>
                                    <name>maxLineLength</name>
                                    <type ref="type.1377790"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1378697"/>
                        </function>
                        <function id="member_function_SetLog_Scanner_574B5813BAD6E16D273E0CF4BDDD638433DD62D4">
                            <name>SetLog(XmlLog* log_)</name>
                            <syntax>public nothrow void SetLog(XmlLog* log_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>log_</name>
                                    <type ref="type.1385828"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetParsingData_Scanner_F253DB458FF3EFAAD6D908ADFF774F1609D18FCF">
                            <name>SetParsingData(ParsingData* parsingData_)</name>
                            <syntax>public nothrow inline void SetParsingData(ParsingData* parsingData_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>parsingData_</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetSpan_Scanner_DF79384A9E295510B3298D8E67495486FB38C0A5">
                            <name>SetSpan(const Span&amp; span_)</name>
                            <syntax>public nothrow inline void SetSpan(const Span&amp; span_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>span_</name>
                                    <type ref="type.1387437"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Skip_Scanner_B0B1E3207D3B96E6DBC243C40145694B5CAEB4FF">
                            <name>Skip()</name>
                            <syntax>public void Skip();</syntax>
                        </function>
                        <function id="member_function_Skipper_Scanner_9FF06FB7E11A2E9E7E7096E6671E5048E3518F53">
                            <name>Skipper() const</name>
                            <syntax>public nothrow inline Parser* Skipper() const;</syntax>
                            <returnType ref="type.1385561"/>
                        </function>
                        <function id="member_function_Skipping_Scanner_A670A02FE16297D859E2AFF9DA35E2E073828D12">
                            <name>Skipping() const</name>
                            <syntax>public nothrow inline bool Skipping() const;</syntax>
                            <returnType ref="type.1377785"/>
                        </function>
                        <function id="member_function_Start_Scanner_37AF4F9E036BDC2C21E5FF12AEE23B5D7A59E211">
                            <name>Start() const</name>
                            <syntax>public nothrow inline const uchar* Start() const;</syntax>
                            <returnType ref="type.1378702"/>
                        </function>
                        <function id="member_function_TokenCounter_Scanner_CCDD514D987B56CDE93153883048A0E905D0CB19">
                            <name>TokenCounter() const</name>
                            <syntax>public nothrow inline int TokenCounter() const;</syntax>
                            <returnType ref="type.1377790"/>
                        </function>
                        <function id="member_function_op_plusplus_Scanner_D8E02EA4C8A2563BC0696E6D7B5B0F9CA418AB40">
                            <name>operator++()</name>
                            <syntax>public nothrow void operator++();</syntax>
                        </function>
                    </functions>
                </class>
                <class id="1385715">
                    <name>Scope</name>
                    <groupName>Scope</groupName>
                    <syntax> public class Scope;</syntax>
                    <baseClass ref="1385579"/>
                    <constructors>
                        <constructor id="constructor_Scope_40E77DA3E3F3E4B344771966B5D3B578ED5FC8A1">
                            <name>Scope(const String&lt;uchar>&amp; name_, Scope* enclosingScope_)</name>
                            <syntax>public nothrow Scope(const String&lt;uchar>&amp; name_, Scope* enclosingScope_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.1378718"/>
                                </parameter>
                                <parameter>
                                    <name>enclosingScope_</name>
                                    <type ref="type.1385716"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Scope_5E61122388431383C3371D2E28E23B7AF2143838">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Add_Scope_70334DF653E888138481EDB4AD58506C758F6160">
                            <name>Add(ParsingObject* o)</name>
                            <syntax>public void Add(ParsingObject* o);</syntax>
                            <parameters>
                                <parameter>
                                    <name>o</name>
                                    <type ref="type.1385580"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_AddNamespace_Scope_3716BE9F26809EA5DD04D78886DFD428D6F0C40F">
                            <name>AddNamespace(Namespace* nsToAdd)</name>
                            <syntax>public void AddNamespace(Namespace* nsToAdd);</syntax>
                            <parameters>
                                <parameter>
                                    <name>nsToAdd</name>
                                    <type ref="type.1385547"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Get_Scope_1E0692FC8825D6D6C0F10253CFC348BD5357A889">
                            <name>Get(const String&lt;uchar>&amp; objectName) const</name>
                            <syntax>public ParsingObject* Get(const String&lt;uchar>&amp; objectName) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>objectName</name>
                                    <type ref="type.1378718"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1385580"/>
                        </function>
                        <function id="member_function_GetNamespace_Scope_F2830C62EA3F04D826879D3BF6F459901C675E89">
                            <name>GetNamespace(const String&lt;uchar>&amp; fullNamespaceName) const</name>
                            <syntax>public Namespace* GetNamespace(const String&lt;uchar>&amp; fullNamespaceName) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>fullNamespaceName</name>
                                    <type ref="type.1378718"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1385547"/>
                        </function>
                        <function id="member_function_Ns_Scope_A097BD0F95E5DCC79353AEA4401F6BAD662BB53B">
                            <name>Ns() const</name>
                            <syntax>public nothrow inline Namespace* Ns() const;</syntax>
                            <returnType ref="type.1385547"/>
                        </function>
                        <function id="member_function_SetNs_Scope_2E9FD7989F3138A75085CD0169F6B6FD7325032F">
                            <name>SetNs(Namespace* ns_)</name>
                            <syntax>public nothrow inline void SetNs(Namespace* ns_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>ns_</name>
                                    <type ref="type.1385547"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1385663">
                    <name>SeparatorParser</name>
                    <groupName>SeparatorParser</groupName>
                    <syntax> public class SeparatorParser;</syntax>
                    <baseClass ref="1385560"/>
                    <constructors>
                        <constructor id="default_constructor_SeparatorParser_5B6B6420E342464E7D97DBDAD0A722B289615F7D">
                            <name>SeparatorParser()</name>
                            <syntax>public nothrow SeparatorParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_SeparatorParser_2958D34A0608EC55DE0B3D32FB328CA4C4D8110A">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_SeparatorParser_6470F5DB71F1655C9544B00F730AC165B96D83BC">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                    </functions>
                </class>
                <class id="1385500">
                    <name>SequenceParser</name>
                    <groupName>SequenceParser</groupName>
                    <syntax> public class SequenceParser;</syntax>
                    <baseClass ref="1385496"/>
                    <constructors>
                        <constructor id="constructor_SequenceParser_9FF67FDCE50EB24E383CEAC3E6CA57311576D13B">
                            <name>SequenceParser(Parser* left_, Parser* right_)</name>
                            <syntax>public SequenceParser(Parser* left_, Parser* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.1385561"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.1385561"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_SequenceParser_226819AA9B100F2912AD19B992BAEC17C5EA0710">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_SequenceParser_5C793D5396CF26B8675F619B445FDD53A819CA49">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                    </functions>
                </class>
                <class id="1385601">
                    <name>SpaceParser</name>
                    <groupName>SpaceParser</groupName>
                    <syntax> public class SpaceParser;</syntax>
                    <baseClass ref="1385560"/>
                    <constructors>
                        <constructor id="default_constructor_SpaceParser_BBDB77A2D56C12DB0517D24887AFCB28064D3899">
                            <name>SpaceParser()</name>
                            <syntax>public nothrow SpaceParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_SpaceParser_B116B999BBB92781E1D6F3A447EBA8730576726B">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_SpaceParser_4BD3B95DBE5E1A9C2922F5619786BE9522EA889B">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                    </functions>
                </class>
                <class id="1385665">
                    <name>SpaceSeparatorParser</name>
                    <groupName>SpaceSeparatorParser</groupName>
                    <syntax> public class SpaceSeparatorParser;</syntax>
                    <baseClass ref="1385560"/>
                    <constructors>
                        <constructor id="default_constructor_SpaceSeparatorParser_C50A212F1795DC9E403E08AA75796C68016D50A7">
                            <name>SpaceSeparatorParser()</name>
                            <syntax>public nothrow SpaceSeparatorParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_SpaceSeparatorParser_E58C385314F858271FF48CD3232C592250F7D205">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_SpaceSeparatorParser_7F1DFF6F25968CFA2C76891B44B493017ADF2D5C">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                    </functions>
                </class>
                <class id="1385625">
                    <name>SpacingMarkParser</name>
                    <groupName>SpacingMarkParser</groupName>
                    <syntax> public class SpacingMarkParser;</syntax>
                    <baseClass ref="1385560"/>
                    <constructors>
                        <constructor id="default_constructor_SpacingMarkParser_2AD198FF5466ED2668FBFE2BCF8DE2DB3400DC07">
                            <name>SpacingMarkParser()</name>
                            <syntax>public nothrow SpacingMarkParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_SpacingMarkParser_D44061A016A8276C77B0623475D14FE704F8A157">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_SpacingMarkParser_0BF0DD1C86BDBB81A9EB168FD0573E7D260E09FE">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                    </functions>
                </class>
                <class id="1385719">
                    <name>Span</name>
                    <groupName>Span</groupName>
                    <syntax> public class Span;</syntax>
                    <constructors>
                        <constructor id="default_constructor_Span_2C5A303351119D5B8C2D2701E709AF754135415B">
                            <name>Span()</name>
                            <syntax>public nothrow Span();</syntax>
                        </constructor>
                        <constructor id="constructor_Span_B2AB7E91894E0F1CDCFB19F0C0DDBAAB13F89FEF">
                            <name>Span(int fileIndex_)</name>
                            <syntax>public nothrow Span(int fileIndex_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>fileIndex_</name>
                                    <type ref="type.1377790"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_Span_F9614378795B21C7570E8C831A7C6B42433EDB2C">
                            <name>Span(int fileIndex_, int lineNumber_, int start_, int end_)</name>
                            <syntax>public nothrow Span(int fileIndex_, int lineNumber_, int start_, int end_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>fileIndex_</name>
                                    <type ref="type.1377790"/>
                                </parameter>
                                <parameter>
                                    <name>lineNumber_</name>
                                    <type ref="type.1377790"/>
                                </parameter>
                                <parameter>
                                    <name>start_</name>
                                    <type ref="type.1377790"/>
                                </parameter>
                                <parameter>
                                    <name>end_</name>
                                    <type ref="type.1377790"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_IsValid_Span_089917CCE7FF6E52D995B192D2083F99CB812F58">
                            <name>IsValid() const</name>
                            <syntax>public nothrow inline bool IsValid() const;</syntax>
                            <returnType ref="type.1377785"/>
                        </function>
                        <function id="member_function_op_plusplus_Span_5538413EC710B3C5814C8C175CB2D3ACABFE9931">
                            <name>operator++()</name>
                            <syntax>public nothrow inline void operator++();</syntax>
                        </function>
                    </functions>
                    <memberVariables>
                        <memberVariable id="variable_end_52C4B8F78FDD997145D7D2AC957A93913864B6CA">
                            <name>end</name>
                            <syntax>public int end;</syntax>
                            <type ref="type.1377790"/>
                        </memberVariable>
                        <memberVariable id="variable_fileIndex_933EE9700295B7901DE11C5C292A945F4F0A54AA">
                            <name>fileIndex</name>
                            <syntax>public int fileIndex;</syntax>
                            <type ref="type.1377790"/>
                        </memberVariable>
                        <memberVariable id="variable_lineNumber_782FFD7DFE44C74EACF9B600FC57D2B020D7ABC9">
                            <name>lineNumber</name>
                            <syntax>public int lineNumber;</syntax>
                            <type ref="type.1377790"/>
                        </memberVariable>
                        <memberVariable id="variable_start_95DA3FD31658207AF158A7824BED3F2F2931919D">
                            <name>start</name>
                            <syntax>public int start;</syntax>
                            <type ref="type.1377790"/>
                        </memberVariable>
                    </memberVariables>
                </class>
                <class id="1385587">
                    <name>StringParser</name>
                    <groupName>StringParser</groupName>
                    <syntax> public class StringParser;</syntax>
                    <baseClass ref="1385560"/>
                    <constructors>
                        <constructor id="constructor_StringParser_A3A23B290BA0C5E71940A667858CE816C85096EC">
                            <name>StringParser(const String&lt;uchar>&amp; s_)</name>
                            <syntax>public nothrow StringParser(const String&lt;uchar>&amp; s_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s_</name>
                                    <type ref="type.1378718"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_StringParser_E86A013B2CE41EAEA4EA8CDD9DA70CD232F7766E">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_StringParser_13160B955DD35403B30B561661CA5829AA3D82A1">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                        <function id="member_function_String_StringParser_D3078C433C810F05FBB334CF4A4B1943A2DAE6F9">
                            <name>String() const</name>
                            <syntax>public nothrow inline const String&lt;uchar>&amp; String() const;</syntax>
                            <returnType ref="type.1378718"/>
                        </function>
                    </functions>
                </class>
                <class id="1385677">
                    <name>SurrogateParser</name>
                    <groupName>SurrogateParser</groupName>
                    <syntax> public class SurrogateParser;</syntax>
                    <baseClass ref="1385560"/>
                    <constructors>
                        <constructor id="default_constructor_SurrogateParser_9817C43ECD21504C23D29BAB4C699A9C5D1F6D9E">
                            <name>SurrogateParser()</name>
                            <syntax>public nothrow SurrogateParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_SurrogateParser_B1111368142D0FDF4AE3F4CF58C3D210D6768B4D">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_SurrogateParser_B90D7A69EEC37C6193BDA3B418196A4D4D4C543A">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                    </functions>
                </class>
                <class id="1385653">
                    <name>SymbolParser</name>
                    <groupName>SymbolParser</groupName>
                    <syntax> public class SymbolParser;</syntax>
                    <baseClass ref="1385560"/>
                    <constructors>
                        <constructor id="default_constructor_SymbolParser_353DDF910A26E2499F7C09957717DBD1F137D7C3">
                            <name>SymbolParser()</name>
                            <syntax>public nothrow SymbolParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_SymbolParser_A05FEBBAC49BE02293AE61AA433E4A59A4EA8F8F">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_SymbolParser_151103C879E1324F80207447A29267CD4713C35E">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                    </functions>
                </class>
                <class id="1385609">
                    <name>TitleLetterParser</name>
                    <groupName>TitleLetterParser</groupName>
                    <syntax> public class TitleLetterParser;</syntax>
                    <baseClass ref="1385560"/>
                    <constructors>
                        <constructor id="default_constructor_TitleLetterParser_80F2766051A7FD03966CA00D93CAEFCA66D9D976">
                            <name>TitleLetterParser()</name>
                            <syntax>public nothrow TitleLetterParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_TitleLetterParser_2B1AF1DC43C0ADE687FF9A068CF77310318DE26A">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_TitleLetterParser_E936775D1051AA7321E2757AD332323A6A6B82EC">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                    </functions>
                </class>
                <class id="1385494">
                    <name>TokenParser</name>
                    <groupName>TokenParser</groupName>
                    <syntax> public class TokenParser;</syntax>
                    <baseClass ref="1385482"/>
                    <constructors>
                        <constructor id="constructor_TokenParser_B49F5F4AAD1980819E83A02127D391E8151D12A1">
                            <name>TokenParser(Parser* child_)</name>
                            <syntax>public TokenParser(Parser* child_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>child_</name>
                                    <type ref="type.1385561"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_TokenParser_3A3D6F77E72397A6138F572675ACC1E6EA3B57C8">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_TokenParser_B2AFDDEC22F4C10A641D934AABEF47E697E59496">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                    </functions>
                </class>
                <class id="1385482">
                    <name>UnaryParser</name>
                    <groupName>UnaryParser</groupName>
                    <syntax>abstract public class UnaryParser;</syntax>
                    <baseClass ref="1385560"/>
                    <constructors>
                        <constructor id="constructor_UnaryParser_236C1DC86BE6DE8BA3BDD210BA06D746B66527B7">
                            <name>UnaryParser(const String&lt;uchar>&amp; name_, Parser* child_, const String&lt;uchar>&amp; info_)</name>
                            <syntax>public UnaryParser(const String&lt;uchar>&amp; name_, Parser* child_, const String&lt;uchar>&amp; info_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.1378718"/>
                                </parameter>
                                <parameter>
                                    <name>child_</name>
                                    <type ref="type.1385561"/>
                                </parameter>
                                <parameter>
                                    <name>info_</name>
                                    <type ref="type.1378718"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Child_UnaryParser_916F1E7DB31AA8FD6EC9CF49A206D87F700495C5">
                            <name>Child() const</name>
                            <syntax>public nothrow inline Parser* Child() const;</syntax>
                            <returnType ref="type.1385561"/>
                        </function>
                    </functions>
                </class>
                <class id="1385681">
                    <name>UnassignedParser</name>
                    <groupName>UnassignedParser</groupName>
                    <syntax> public class UnassignedParser;</syntax>
                    <baseClass ref="1385560"/>
                    <constructors>
                        <constructor id="default_constructor_UnassignedParser_993A1EDAB54FC9714F5E60A35E2181B7DC823EA1">
                            <name>UnassignedParser()</name>
                            <syntax>public nothrow UnassignedParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_UnassignedParser_EE11680F7319819960452DD43CEB1ABB53CABF7B">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_UnassignedParser_861B0B0DD98159CBE996D4BA2EEEA0DFEEF81DE9">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                    </functions>
                </class>
                <class id="1385605">
                    <name>UpperLetterParser</name>
                    <groupName>UpperLetterParser</groupName>
                    <syntax> public class UpperLetterParser;</syntax>
                    <baseClass ref="1385560"/>
                    <constructors>
                        <constructor id="default_constructor_UpperLetterParser_4A2B6FCADCF3E6E8D94DD6A81E5C28DE77969201">
                            <name>UpperLetterParser()</name>
                            <syntax>public nothrow UpperLetterParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_UpperLetterParser_B3E2A734C92FB6B441F611EF1C8F14C9970743B5">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1387451"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_UpperLetterParser_85BD27133CFEABADEA30EB16585D77F29602761C">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.1387480"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.1387515"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.1385570"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1385542"/>
                        </function>
                    </functions>
                </class>
                <class id="1387934">
                    <name>ValueObject&lt;ValueType></name>
                    <groupName>ValueObject</groupName>
                    <syntax> public class ValueObject&lt;ValueType>;</syntax>
                    <templateParameters>
                        <templateParameter id="1385559">
                            <name>ValueType</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="1385556"/>
                    <constructors>
                        <constructor id="default_constructor_ValueObject_ValueType_37271B380BBCB190F503191A64BBBCDA52DC61AF">
                            <name>ValueObject&lt;ValueType>()</name>
                            <syntax>public default ValueObject&lt;ValueType>();</syntax>
                        </constructor>
                        <constructor id="constructor_ValueObject_ValueType_59E338A0BD54B0AD4948749380EF819BC34B902C">
                            <name>ValueObject&lt;ValueType>(const ValueType&amp; value_)</name>
                            <syntax>public ValueObject&lt;ValueType>(const ValueType&amp; value_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value_</name>
                                    <type ref="type.4562"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="conversion_function_operator_6D9C478EDC9A7E1B11DB3132375F8174825BADFB">
                            <name>operator ValueType() const</name>
                            <syntax>public ValueType operator ValueType() const;</syntax>
                            <returnType ref="1385559"/>
                        </function>
                        <function id="member_function_op_assign_ValueObject_ValueType_F83209E7F0869FB17FBD4D8F700E76F46DB2638B">
                            <name>operator=(const ValueType&amp; value_)</name>
                            <syntax>public void operator=(const ValueType&amp; value_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value_</name>
                                    <type ref="type.4562"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1385825">
                    <name>Visitor</name>
                    <groupName>Visitor</groupName>
                    <syntax> public class Visitor;</syntax>
                    <functions>
                        <function id="function_group_BeginVisit_B5C691876405B8298E6554E11E1A9F987B6A13AD">
                            <name>BeginVisit</name>
                            <overloads>
                                <overload id="member_function_BeginVisit_Visitor_3C69F3478C0BE14E87C3DFF52CF4E2CC742F5CCB">
                                    <name>BeginVisit(ActionParser&amp; actionParser)</name>
                                    <syntax>public virtual void BeginVisit(ActionParser&amp; actionParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>actionParser</name>
                                            <type ref="type.1387860"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_BeginVisit_Visitor_0B82297C2D03430A8170C338BF7B01652810125E">
                                    <name>BeginVisit(AlternativeParser&amp; alternativeParser)</name>
                                    <syntax>public virtual void BeginVisit(AlternativeParser&amp; alternativeParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>alternativeParser</name>
                                            <type ref="type.1387862"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_BeginVisit_Visitor_46532D867D0EF0655E2E23E4148738CDED6FB7AC">
                                    <name>BeginVisit(DifferenceParser&amp; differenceParser)</name>
                                    <syntax>public virtual void BeginVisit(DifferenceParser&amp; differenceParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>differenceParser</name>
                                            <type ref="type.1387863"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_BeginVisit_Visitor_11DC4CDD63E012FA0601747506C63029B8410CD8">
                                    <name>BeginVisit(ExclusiveOrParser&amp; exclusiveOrParser)</name>
                                    <syntax>public virtual void BeginVisit(ExclusiveOrParser&amp; exclusiveOrParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>exclusiveOrParser</name>
                                            <type ref="type.1387864"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_BeginVisit_Visitor_14CC953EE84829910938FF6E0688803D619FAA4F">
                                    <name>BeginVisit(ExpectationParser&amp; expectationParser)</name>
                                    <syntax>public virtual void BeginVisit(ExpectationParser&amp; expectationParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>expectationParser</name>
                                            <type ref="type.1387858"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_BeginVisit_Visitor_A2C707E128EBC828C31D9D762EB0B78A9697F1CD">
                                    <name>BeginVisit(Grammar&amp; grammar)</name>
                                    <syntax>public virtual void BeginVisit(Grammar&amp; grammar);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>grammar</name>
                                            <type ref="type.1387851"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_BeginVisit_Visitor_482D52EA4D86D0FE83B64F526EBF2F783BA23577">
                                    <name>BeginVisit(IntersectionParser&amp; intersectionParser)</name>
                                    <syntax>public virtual void BeginVisit(IntersectionParser&amp; intersectionParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>intersectionParser</name>
                                            <type ref="type.1387865"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_BeginVisit_Visitor_3AA78E535DB0279D9696E33D7210DC29D585DD3D">
                                    <name>BeginVisit(KleeneStarParser&amp; kleeneStarParser)</name>
                                    <syntax>public virtual void BeginVisit(KleeneStarParser&amp; kleeneStarParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>kleeneStarParser</name>
                                            <type ref="type.1387857"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_BeginVisit_Visitor_4C00C6D63137AB8E2ECA034E542A652A4FDB6D66">
                                    <name>BeginVisit(ListParser&amp; listParser)</name>
                                    <syntax>public virtual void BeginVisit(ListParser&amp; listParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>listParser</name>
                                            <type ref="type.1387866"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_BeginVisit_Visitor_1AC698A8542624106DF694A2C2D268A7D831B3C1">
                                    <name>BeginVisit(Namespace&amp; ns)</name>
                                    <syntax>public virtual void BeginVisit(Namespace&amp; ns);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>ns</name>
                                            <type ref="type.1387850"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_BeginVisit_Visitor_BE89C9D1FCFFAFAA4D37FF8553AD3C7EBFCDEC8E">
                                    <name>BeginVisit(OptionalParser&amp; optionalParser)</name>
                                    <syntax>public virtual void BeginVisit(OptionalParser&amp; optionalParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>optionalParser</name>
                                            <type ref="type.1387855"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_BeginVisit_Visitor_EAB6C907A162AC44EDAE8BE53906C6C42B5FEBFF">
                                    <name>BeginVisit(PositiveParser&amp; positiveParser)</name>
                                    <syntax>public virtual void BeginVisit(PositiveParser&amp; positiveParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>positiveParser</name>
                                            <type ref="type.1387856"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_BeginVisit_Visitor_A1232E7C2A839C1093B7AF1204BA7B8B5705846D">
                                    <name>BeginVisit(RuleParser&amp; rule)</name>
                                    <syntax>public virtual void BeginVisit(RuleParser&amp; rule);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>rule</name>
                                            <type ref="type.1387785"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_BeginVisit_Visitor_5F3A470EB2415901E201826BA969B2B072157F53">
                                    <name>BeginVisit(SequenceParser&amp; sequenceParser)</name>
                                    <syntax>public virtual void BeginVisit(SequenceParser&amp; sequenceParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>sequenceParser</name>
                                            <type ref="type.1387861"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_BeginVisit_Visitor_FB01CDD20EA3208D971B74178895008965DF0291">
                                    <name>BeginVisit(TokenParser&amp; tokenParser)</name>
                                    <syntax>public virtual void BeginVisit(TokenParser&amp; tokenParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>tokenParser</name>
                                            <type ref="type.1387859"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_EndVisit_79141257664E016439225059D33D7BE6CC044D29">
                            <name>EndVisit</name>
                            <overloads>
                                <overload id="member_function_EndVisit_Visitor_5873FEBCA7778FF3E51EFB6285703F02F5A7B7E3">
                                    <name>EndVisit(ActionParser&amp; actionParser)</name>
                                    <syntax>public virtual void EndVisit(ActionParser&amp; actionParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>actionParser</name>
                                            <type ref="type.1387860"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_EndVisit_Visitor_C784871802B4B3E734C3B073A0C4687FE46CD1E9">
                                    <name>EndVisit(AlternativeParser&amp; alternativeParser)</name>
                                    <syntax>public virtual void EndVisit(AlternativeParser&amp; alternativeParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>alternativeParser</name>
                                            <type ref="type.1387862"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_EndVisit_Visitor_0E54BB3AB8181999AE8B05EE01327684FAF4A835">
                                    <name>EndVisit(DifferenceParser&amp; differenceParser)</name>
                                    <syntax>public virtual void EndVisit(DifferenceParser&amp; differenceParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>differenceParser</name>
                                            <type ref="type.1387863"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_EndVisit_Visitor_3F1ECF05A40BD2AC8F4A1932377D49D760FFBC65">
                                    <name>EndVisit(ExclusiveOrParser&amp; exclusiveOrParser)</name>
                                    <syntax>public virtual void EndVisit(ExclusiveOrParser&amp; exclusiveOrParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>exclusiveOrParser</name>
                                            <type ref="type.1387864"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_EndVisit_Visitor_B26B7677A6D0F9EE0C7D6D7CE86459D64886B61A">
                                    <name>EndVisit(ExpectationParser&amp; expectationParser)</name>
                                    <syntax>public virtual void EndVisit(ExpectationParser&amp; expectationParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>expectationParser</name>
                                            <type ref="type.1387858"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_EndVisit_Visitor_B19FE0338C157B9EE8C04021DF3A9EB9DC6F447A">
                                    <name>EndVisit(Grammar&amp; grammar)</name>
                                    <syntax>public virtual void EndVisit(Grammar&amp; grammar);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>grammar</name>
                                            <type ref="type.1387851"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_EndVisit_Visitor_85E87F8DA07B8B73587BD996CC47A15DAC6DA70E">
                                    <name>EndVisit(IntersectionParser&amp; intersectionParser)</name>
                                    <syntax>public virtual void EndVisit(IntersectionParser&amp; intersectionParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>intersectionParser</name>
                                            <type ref="type.1387865"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_EndVisit_Visitor_98D2BC5F6F62CDCD44CCD607B3BCC46E09044837">
                                    <name>EndVisit(KleeneStarParser&amp; kleeneStarParser)</name>
                                    <syntax>public virtual void EndVisit(KleeneStarParser&amp; kleeneStarParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>kleeneStarParser</name>
                                            <type ref="type.1387857"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_EndVisit_Visitor_ECF9315123AA428B26B58D7C1AF7FBCAA9FDC114">
                                    <name>EndVisit(ListParser&amp; listParser)</name>
                                    <syntax>public virtual void EndVisit(ListParser&amp; listParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>listParser</name>
                                            <type ref="type.1387866"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_EndVisit_Visitor_29D8220918F57810DD92FFC63BF5FAE99098DD60">
                                    <name>EndVisit(Namespace&amp; ns)</name>
                                    <syntax>public virtual void EndVisit(Namespace&amp; ns);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>ns</name>
                                            <type ref="type.1387850"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_EndVisit_Visitor_16AF0BD49350604127988E3955276B4421EA7BAA">
                                    <name>EndVisit(OptionalParser&amp; optionalParser)</name>
                                    <syntax>public virtual void EndVisit(OptionalParser&amp; optionalParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>optionalParser</name>
                                            <type ref="type.1387855"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_EndVisit_Visitor_FCD37CED9F1F715826A13DF030A2090B0E9C51F0">
                                    <name>EndVisit(PositiveParser&amp; positiveParser)</name>
                                    <syntax>public virtual void EndVisit(PositiveParser&amp; positiveParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>positiveParser</name>
                                            <type ref="type.1387856"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_EndVisit_Visitor_F0422CF732EED6A2846497A226596542B931993B">
                                    <name>EndVisit(RuleParser&amp; rule)</name>
                                    <syntax>public virtual void EndVisit(RuleParser&amp; rule);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>rule</name>
                                            <type ref="type.1387785"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_EndVisit_Visitor_A329EC2E58708229A2AA5FC8CF67AC4C54472692">
                                    <name>EndVisit(SequenceParser&amp; sequenceParser)</name>
                                    <syntax>public virtual void EndVisit(SequenceParser&amp; sequenceParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>sequenceParser</name>
                                            <type ref="type.1387861"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_EndVisit_Visitor_4F1EE3D9E005BA13380C0ADF0CBE142140418971">
                                    <name>EndVisit(TokenParser&amp; tokenParser)</name>
                                    <syntax>public virtual void EndVisit(TokenParser&amp; tokenParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>tokenParser</name>
                                            <type ref="type.1387859"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_Visit_E324BBAEAD3DDA1AACEA3201168142594DD53605">
                            <name>Visit</name>
                            <overloads>
                                <overload id="member_function_Visit_Visitor_EAA5C0982A03E767580C7E8AB003651847B97B41">
                                    <name>Visit(AlphabeticParser&amp; alphabeticParser)</name>
                                    <syntax>public virtual void Visit(AlphabeticParser&amp; alphabeticParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>alphabeticParser</name>
                                            <type ref="type.1387915"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_21D9E2198D6CCAFA5C0B36DFDA99E6F4FA1E4B99">
                                    <name>Visit(AlternativeParser&amp; alternativeParser)</name>
                                    <syntax>public virtual void Visit(AlternativeParser&amp; alternativeParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>alternativeParser</name>
                                            <type ref="type.1387862"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_954FAF7CCF2A78751822EFBB06FE2313B891B62A">
                                    <name>Visit(AnyCharParser&amp; anyCharParser)</name>
                                    <syntax>public virtual void Visit(AnyCharParser&amp; anyCharParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>anyCharParser</name>
                                            <type ref="type.1387918"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_6AC8D6A5B50D483AF03BB143E5E258E085F8FF59">
                                    <name>Visit(BaseCharParser&amp; baseCharParser)</name>
                                    <syntax>public virtual void Visit(BaseCharParser&amp; baseCharParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>baseCharParser</name>
                                            <type ref="type.1387914"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_C4E188530BF92A9E83D720E63ACED47E8BB48778">
                                    <name>Visit(CasedLetterParser&amp; casedLetterParser)</name>
                                    <syntax>public virtual void Visit(CasedLetterParser&amp; casedLetterParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>casedLetterParser</name>
                                            <type ref="type.1387879"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_548BEB3A6F2B0F931FB472FE5DD9435A40BAC0F2">
                                    <name>Visit(CharParser&amp; charParser)</name>
                                    <syntax>public virtual void Visit(CharParser&amp; charParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>charParser</name>
                                            <type ref="type.1387868"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_6A776BDE8C032087C46BADA5739BE4721E747352">
                                    <name>Visit(CharSetParser&amp; charSetParser)</name>
                                    <syntax>public virtual void Visit(CharSetParser&amp; charSetParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>charSetParser</name>
                                            <type ref="type.1387870"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_C3F0F0A0FCC5E21BB5C591865577F478703B9631">
                                    <name>Visit(ClosePunctuationParser&amp; closePunctuationParser)</name>
                                    <syntax>public virtual void Visit(ClosePunctuationParser&amp; closePunctuationParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>closePunctuationParser</name>
                                            <type ref="type.1387894"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_3004B23CAA00C13A4513BCBD7D036AF5A22A148F">
                                    <name>Visit(ConnectorPunctuationParser&amp; connectorPunctuationParser)</name>
                                    <syntax>public virtual void Visit(ConnectorPunctuationParser&amp; connectorPunctuationParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>connectorPunctuationParser</name>
                                            <type ref="type.1387891"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_87D0F5A5190D49E213DF82D0737E990AD8E55CC6">
                                    <name>Visit(ControlParser&amp; controlParser)</name>
                                    <syntax>public virtual void Visit(ControlParser&amp; controlParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>controlParser</name>
                                            <type ref="type.1387908"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_0C27A549BEACBDF7BF89629C09E2A8362D63B77B">
                                    <name>Visit(CurrencySymbolParser&amp; currencySymbolParser)</name>
                                    <syntax>public virtual void Visit(CurrencySymbolParser&amp; currencySymbolParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>currencySymbolParser</name>
                                            <type ref="type.1387900"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_D2B740A087AF9E793194CD396C24D0B84642A5D8">
                                    <name>Visit(DashPunctuationParser&amp; dashPunctuationParser)</name>
                                    <syntax>public virtual void Visit(DashPunctuationParser&amp; dashPunctuationParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>dashPunctuationParser</name>
                                            <type ref="type.1387892"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_0EAE80CAECF5F5ED260E1392C8EBFDEF332DE360">
                                    <name>Visit(DecimalNumberParser&amp; decimalNumberParser)</name>
                                    <syntax>public virtual void Visit(DecimalNumberParser&amp; decimalNumberParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>decimalNumberParser</name>
                                            <type ref="type.1387887"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_3E0DADEA1B81FEEBE266CE964030DB1351D10F48">
                                    <name>Visit(DifferenceParser&amp; differenceParser)</name>
                                    <syntax>public virtual void Visit(DifferenceParser&amp; differenceParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>differenceParser</name>
                                            <type ref="type.1387863"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_FACB52D8E9614D214F30CCB5500EE9B5C8814126">
                                    <name>Visit(DigitParser&amp; digitParser)</name>
                                    <syntax>public virtual void Visit(DigitParser&amp; digitParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>digitParser</name>
                                            <type ref="type.1387880"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_DC77E20E894991C79AB3E6E1D364C33B1A1B6337">
                                    <name>Visit(EmptyParser&amp; emptyParser)</name>
                                    <syntax>public virtual void Visit(EmptyParser&amp; emptyParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>emptyParser</name>
                                            <type ref="type.1387871"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_43DB870680A0B1CCF36C6C5DB65109E640B17175">
                                    <name>Visit(EnclosingMarkParser&amp; enclosingMarkParser)</name>
                                    <syntax>public virtual void Visit(EnclosingMarkParser&amp; enclosingMarkParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>enclosingMarkParser</name>
                                            <type ref="type.1387885"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_2DC1B904CD0A318A51DC83EE9AFB9FBADB7A0F27">
                                    <name>Visit(ExclusiveOrParser&amp; exclusiveOrParser)</name>
                                    <syntax>public virtual void Visit(ExclusiveOrParser&amp; exclusiveOrParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>exclusiveOrParser</name>
                                            <type ref="type.1387864"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_5F0701F82E9F009AB9585BC164019DC8004346A6">
                                    <name>Visit(FinalPunctuationParser&amp; finalPunctuationParser)</name>
                                    <syntax>public virtual void Visit(FinalPunctuationParser&amp; finalPunctuationParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>finalPunctuationParser</name>
                                            <type ref="type.1387896"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_9A71EDA0B8F03951DFD119C095BC7CCBC3EA2D68">
                                    <name>Visit(FormatParser&amp; formatParser)</name>
                                    <syntax>public virtual void Visit(FormatParser&amp; formatParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>formatParser</name>
                                            <type ref="type.1387909"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_E093768A4B443BEA7F50131FA7A7CBD5AA43D23F">
                                    <name>Visit(GraphicParser&amp; graphicParser)</name>
                                    <syntax>public virtual void Visit(GraphicParser&amp; graphicParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>graphicParser</name>
                                            <type ref="type.1387913"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_75DCEEE3AD3192858EBA8D34C9CD749D2F92371F">
                                    <name>Visit(HexDigitParser&amp; hexDigitParser)</name>
                                    <syntax>public virtual void Visit(HexDigitParser&amp; hexDigitParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>hexDigitParser</name>
                                            <type ref="type.1387881"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_F55704411C9DF5620F527FEA41755A2E75062ED2">
                                    <name>Visit(IdContParser&amp; idContParser)</name>
                                    <syntax>public virtual void Visit(IdContParser&amp; idContParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>idContParser</name>
                                            <type ref="type.1387917"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_D5B51FC9E2B4551C14D528F16BAFF08F4F841066">
                                    <name>Visit(IdStartParser&amp; idStartParser)</name>
                                    <syntax>public virtual void Visit(IdStartParser&amp; idStartParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>idStartParser</name>
                                            <type ref="type.1387916"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_CEB7C7A8F38F98EC751401713A3AEA6E8438414C">
                                    <name>Visit(InitialPunctuationParser&amp; initialPunctuationParser)</name>
                                    <syntax>public virtual void Visit(InitialPunctuationParser&amp; initialPunctuationParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>initialPunctuationParser</name>
                                            <type ref="type.1387895"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_358386F687DD45E33D5B339EA6623817F9813F44">
                                    <name>Visit(IntersectionParser&amp; intersectionParser)</name>
                                    <syntax>public virtual void Visit(IntersectionParser&amp; intersectionParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>intersectionParser</name>
                                            <type ref="type.1387865"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_7545009BAA199558184E617AB3DC322BE00E0551">
                                    <name>Visit(KeywordListParser&amp; keywordListParser)</name>
                                    <syntax>public virtual void Visit(KeywordListParser&amp; keywordListParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>keywordListParser</name>
                                            <type ref="type.1387854"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_BC61B51852ACB2D5AC2CC1C88C5AF2A2811D4207">
                                    <name>Visit(KeywordParser&amp; keywordParser)</name>
                                    <syntax>public virtual void Visit(KeywordParser&amp; keywordParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>keywordParser</name>
                                            <type ref="type.1387853"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_9EF1573A8B9214A644D6D00252EEE84A3DD6DF64">
                                    <name>Visit(LetterNumberParser&amp; letterNumberParser)</name>
                                    <syntax>public virtual void Visit(LetterNumberParser&amp; letterNumberParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>letterNumberParser</name>
                                            <type ref="type.1387888"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_0C894B78542AF047A08EC64D74B6377565BD471F">
                                    <name>Visit(LetterParser&amp; letterParser)</name>
                                    <syntax>public virtual void Visit(LetterParser&amp; letterParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>letterParser</name>
                                            <type ref="type.1387873"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_147B6779437280E26C0D016854AB146D05B328CC">
                                    <name>Visit(LineSeparatorParser&amp; lineSeparatorParser)</name>
                                    <syntax>public virtual void Visit(LineSeparatorParser&amp; lineSeparatorParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>lineSeparatorParser</name>
                                            <type ref="type.1387905"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_859AFC54A9F3D97719740D3190A712BF9D482D2A">
                                    <name>Visit(ListParser&amp; listParser)</name>
                                    <syntax>public virtual void Visit(ListParser&amp; listParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>listParser</name>
                                            <type ref="type.1387866"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_14F095A9A405E2D2663FA67FE6EFC5A3038C03BD">
                                    <name>Visit(LowerLetterParser&amp; lowerLetterParser)</name>
                                    <syntax>public virtual void Visit(LowerLetterParser&amp; lowerLetterParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>lowerLetterParser</name>
                                            <type ref="type.1387875"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_DC5AAF1B1B051648015648599FD1D7D2D7C894A4">
                                    <name>Visit(MarkParser&amp; markParser)</name>
                                    <syntax>public virtual void Visit(MarkParser&amp; markParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>markParser</name>
                                            <type ref="type.1387882"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_41688B34EF724F5B4599363DD61107CC0E46151F">
                                    <name>Visit(MathSymbolParser&amp; mathSymbolParser)</name>
                                    <syntax>public virtual void Visit(MathSymbolParser&amp; mathSymbolParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>mathSymbolParser</name>
                                            <type ref="type.1387899"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_20D85D14B4AE93311DBA89BF59A19A1116380048">
                                    <name>Visit(ModifierLetterParser&amp; modifierLetterParser)</name>
                                    <syntax>public virtual void Visit(ModifierLetterParser&amp; modifierLetterParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>modifierLetterParser</name>
                                            <type ref="type.1387877"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_C40A9C4BCBC33E3C9650B4AF506C3CE2DEF8162A">
                                    <name>Visit(ModifierSymbolParser&amp; modifierSymbolParser)</name>
                                    <syntax>public virtual void Visit(ModifierSymbolParser&amp; modifierSymbolParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>modifierSymbolParser</name>
                                            <type ref="type.1387901"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_7F27D9E7900D80FA25D9372FAC26F3DA9D10CFC2">
                                    <name>Visit(NonspacingMarkParser&amp; nonspacingMarkParser)</name>
                                    <syntax>public virtual void Visit(NonspacingMarkParser&amp; nonspacingMarkParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>nonspacingMarkParser</name>
                                            <type ref="type.1387883"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_ED8E471D04449A4D40C56A3E3F8B94C3BA515EF3">
                                    <name>Visit(NonterminalParser&amp; nonterminalParser)</name>
                                    <syntax>public virtual void Visit(NonterminalParser&amp; nonterminalParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>nonterminalParser</name>
                                            <type ref="type.1387867"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_6971BC48329F8916BB4FBEFA714417F89AF88F4E">
                                    <name>Visit(NumberParser&amp; numberParser)</name>
                                    <syntax>public virtual void Visit(NumberParser&amp; numberParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>numberParser</name>
                                            <type ref="type.1387886"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_F410E229DE9392AE4342C4AB5B0181FE24DEBD7F">
                                    <name>Visit(OpenPunctuationParser&amp; openPunctuationParser)</name>
                                    <syntax>public virtual void Visit(OpenPunctuationParser&amp; openPunctuationParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>openPunctuationParser</name>
                                            <type ref="type.1387893"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_AA752F1A31D5642FD959D956EA1AA062650BB120">
                                    <name>Visit(OtherLetterParser&amp; otherLetterParser)</name>
                                    <syntax>public virtual void Visit(OtherLetterParser&amp; otherLetterParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>otherLetterParser</name>
                                            <type ref="type.1387878"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_AF3F3D379140565EFAA2333DCF5054513850BFD3">
                                    <name>Visit(OtherNumberParser&amp; otherNumberParer)</name>
                                    <syntax>public virtual void Visit(OtherNumberParser&amp; otherNumberParer);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>otherNumberParer</name>
                                            <type ref="type.1387889"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_A814893E5E37A45D43CE8149B776CB07671BBA5E">
                                    <name>Visit(OtherParser&amp; otherParser)</name>
                                    <syntax>public virtual void Visit(OtherParser&amp; otherParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>otherParser</name>
                                            <type ref="type.1387907"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_ACAB85272DD91C108BEBC3D98A6F62E7A9AAF0D0">
                                    <name>Visit(OtherPunctuationParser&amp; otherPunctuationParser)</name>
                                    <syntax>public virtual void Visit(OtherPunctuationParser&amp; otherPunctuationParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>otherPunctuationParser</name>
                                            <type ref="type.1387897"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_A6DF3772094C1FFF39080C2C58C2E7EB8B7BC70B">
                                    <name>Visit(OtherSymbolParser&amp; otherSymbolParser)</name>
                                    <syntax>public virtual void Visit(OtherSymbolParser&amp; otherSymbolParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>otherSymbolParser</name>
                                            <type ref="type.1387902"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_E3DEB3226781A34FE62BF04D28C2F2069062F561">
                                    <name>Visit(ParagraphSeparatorParser&amp; paragraphSeparatorParser)</name>
                                    <syntax>public virtual void Visit(ParagraphSeparatorParser&amp; paragraphSeparatorParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>paragraphSeparatorParser</name>
                                            <type ref="type.1387906"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_04DED091CCD25080DDD6FF92D3A95912C3A6B79F">
                                    <name>Visit(PrivateUseParser&amp; privateUseParser)</name>
                                    <syntax>public virtual void Visit(PrivateUseParser&amp; privateUseParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>privateUseParser</name>
                                            <type ref="type.1387911"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_D2991943C8EEB1F88EB013D79B315842F4A6E860">
                                    <name>Visit(PunctuationParser&amp; punctuationParser)</name>
                                    <syntax>public virtual void Visit(PunctuationParser&amp; punctuationParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>punctuationParser</name>
                                            <type ref="type.1387890"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_C8E45936B8CE68004FA0C1C61AECBFEDF29D9BDD">
                                    <name>Visit(RangeParser&amp; rangeParser)</name>
                                    <syntax>public virtual void Visit(RangeParser&amp; rangeParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>rangeParser</name>
                                            <type ref="type.1387919"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_0BF25A581950481AB951DB5EEC749BD3989795F2">
                                    <name>Visit(RuleLink&amp; ruleLink)</name>
                                    <syntax>public virtual void Visit(RuleLink&amp; ruleLink);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>ruleLink</name>
                                            <type ref="type.1387852"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_EB1055B2400FFACA7700EFEE080C93B7EF53CB37">
                                    <name>Visit(SeparatorParser&amp; separatorParser)</name>
                                    <syntax>public virtual void Visit(SeparatorParser&amp; separatorParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>separatorParser</name>
                                            <type ref="type.1387903"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_138FF6A19119629ACB5802919D5811B3F6F1D1E7">
                                    <name>Visit(SequenceParser&amp; sequenceParser)</name>
                                    <syntax>public virtual void Visit(SequenceParser&amp; sequenceParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>sequenceParser</name>
                                            <type ref="type.1387861"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_EBE768042FD518CA151A3198A4884E959C643B67">
                                    <name>Visit(SpaceParser&amp; spaceParser)</name>
                                    <syntax>public virtual void Visit(SpaceParser&amp; spaceParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>spaceParser</name>
                                            <type ref="type.1387872"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_08C6DD1CD83012756B4349A9BF68BFF9C16C5FFA">
                                    <name>Visit(SpaceSeparatorParser&amp; spaceSeparatorParser)</name>
                                    <syntax>public virtual void Visit(SpaceSeparatorParser&amp; spaceSeparatorParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>spaceSeparatorParser</name>
                                            <type ref="type.1387904"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_1F640A9C551CCD72E7A86D2ED72AB5471ED97257">
                                    <name>Visit(SpacingMarkParser&amp; spacingMarkParser)</name>
                                    <syntax>public virtual void Visit(SpacingMarkParser&amp; spacingMarkParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>spacingMarkParser</name>
                                            <type ref="type.1387884"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_FA3165A8F58B83D22E8D42CEE8897ED7DBACCBA6">
                                    <name>Visit(StringParser&amp; stringParser)</name>
                                    <syntax>public virtual void Visit(StringParser&amp; stringParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>stringParser</name>
                                            <type ref="type.1387869"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_694D70E309361EFB3252C97C78E3A026A3415BF1">
                                    <name>Visit(SurrogateParser&amp; surrogateParser)</name>
                                    <syntax>public virtual void Visit(SurrogateParser&amp; surrogateParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>surrogateParser</name>
                                            <type ref="type.1387910"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_6F927C7A699AF95FBAA1BFB98D2CEEC0D2AB8945">
                                    <name>Visit(SymbolParser&amp; symbolParser)</name>
                                    <syntax>public virtual void Visit(SymbolParser&amp; symbolParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>symbolParser</name>
                                            <type ref="type.1387898"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_8B2C5DF74F8999C2FF68965411A1A41DC6A6E6EA">
                                    <name>Visit(TitleLetterParser&amp; titleLetterParser)</name>
                                    <syntax>public virtual void Visit(TitleLetterParser&amp; titleLetterParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>titleLetterParser</name>
                                            <type ref="type.1387876"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_38C51FFD269BE5DAE72A78E5127754C5B24E46BB">
                                    <name>Visit(UnassignedParser&amp; unassignedParser)</name>
                                    <syntax>public virtual void Visit(UnassignedParser&amp; unassignedParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>unassignedParser</name>
                                            <type ref="type.1387912"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_8BF1AEAB9DB3A7165DE7E5409D9635FD8ECA9F8F">
                                    <name>Visit(UpperLetterParser&amp; upperLetterParser)</name>
                                    <syntax>public virtual void Visit(UpperLetterParser&amp; upperLetterParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>upperLetterParser</name>
                                            <type ref="type.1387874"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                    </functions>
                </class>
                <class id="1385827">
                    <name>XmlLog</name>
                    <groupName>XmlLog</groupName>
                    <syntax> public class XmlLog;</syntax>
                    <constructors>
                        <constructor id="constructor_XmlLog_3BE29A048D209B39468D36D8B8213F00CD5CE7B4">
                            <name>XmlLog(StreamWriter&amp; writer_, int maxLineLength_)</name>
                            <syntax>public nothrow XmlLog(StreamWriter&amp; writer_, int maxLineLength_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>writer_</name>
                                    <type ref="type.1378777"/>
                                </parameter>
                                <parameter>
                                    <name>maxLineLength_</name>
                                    <type ref="type.1377790"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_DecIndent_XmlLog_4C871D50E812DD2B0809544BEE1D5F7ADE5A5575">
                            <name>DecIndent()</name>
                            <syntax>public nothrow inline void DecIndent();</syntax>
                        </function>
                        <function id="member_function_IncIndent_XmlLog_EB0ABAAC3F5F26E7239BFD0924BF6F3D5F20A92E">
                            <name>IncIndent()</name>
                            <syntax>public nothrow inline void IncIndent();</syntax>
                        </function>
                        <function id="member_function_MaxLineLength_XmlLog_A1AD5DE5DF5DD1787565056EDA302638F4E55EF0">
                            <name>MaxLineLength() const</name>
                            <syntax>public nothrow inline int MaxLineLength() const;</syntax>
                            <returnType ref="type.1377790"/>
                        </function>
                        <function id="member_function_Write_XmlLog_DA9D1C2417B4DA88BF9959AEB34E60E90A5F21FA">
                            <name>Write(const String&lt;uchar>&amp; s)</name>
                            <syntax>public void Write(const String&lt;uchar>&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1378718"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_WriteBeginRule_XmlLog_5899B4427541E4050B1AA6FC236F287F6D649960">
                            <name>WriteBeginRule(const String&lt;uchar>&amp; ruleName)</name>
                            <syntax>public void WriteBeginRule(const String&lt;uchar>&amp; ruleName);</syntax>
                            <parameters>
                                <parameter>
                                    <name>ruleName</name>
                                    <type ref="type.1378718"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_WriteElement_XmlLog_F5A0AD4B369E2B08AE3A5434DEFDC078135ADC3E">
                            <name>WriteElement(const String&lt;uchar>&amp; elementName, const String&lt;uchar>&amp; elementContent)</name>
                            <syntax>public void WriteElement(const String&lt;uchar>&amp; elementName, const String&lt;uchar>&amp; elementContent);</syntax>
                            <parameters>
                                <parameter>
                                    <name>elementName</name>
                                    <type ref="type.1378718"/>
                                </parameter>
                                <parameter>
                                    <name>elementContent</name>
                                    <type ref="type.1378718"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_WriteEndRule_XmlLog_9289C4B4EAF5C4B8752A34D8CDF59521A07AC7AD">
                            <name>WriteEndRule(const String&lt;uchar>&amp; ruleName)</name>
                            <syntax>public void WriteEndRule(const String&lt;uchar>&amp; ruleName);</syntax>
                            <parameters>
                                <parameter>
                                    <name>ruleName</name>
                                    <type ref="type.1378718"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_WriteFail_XmlLog_18E5AF01C6FC6CEEF4134CA2CABDE54F10DC6766">
                            <name>WriteFail()</name>
                            <syntax>public void WriteFail();</syntax>
                        </function>
                        <function id="member_function_WriteSuccess_XmlLog_3E22503C19B38FBD163EA3EF4B3EDDBAF0C02038">
                            <name>WriteSuccess(const String&lt;uchar>&amp; match)</name>
                            <syntax>public void WriteSuccess(const String&lt;uchar>&amp; match);</syntax>
                            <parameters>
                                <parameter>
                                    <name>match</name>
                                    <type ref="type.1378718"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_WriteTry_XmlLog_ABED20B7D097E464AE73F6B84C92DE4D0A2837AA">
                            <name>WriteTry(const String&lt;uchar>&amp; s)</name>
                            <syntax>public void WriteTry(const String&lt;uchar>&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1378718"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1385723">
                    <name>stdlib</name>
                    <groupName>stdlib</groupName>
                    <syntax> public class stdlib;</syntax>
                    <baseClass ref="1385522"/>
                    <constructors>
                        <constructor id="default_constructor_stdlib_66237E3263302A7F81A23B3ED60F61BD92347F46">
                            <name>stdlib()</name>
                            <syntax>public stdlib();</syntax>
                        </constructor>
                        <constructor id="constructor_stdlib_97795A96520DDF56F703C847ED6F564005CAE4BD">
                            <name>stdlib(ParsingDomain* parsingDomain)</name>
                            <syntax>public stdlib(ParsingDomain* parsingDomain);</syntax>
                            <parameters>
                                <parameter>
                                    <name>parsingDomain</name>
                                    <type ref="type.1385574"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_CreateRules_stdlib_123FA2BE91B0A1ABCE924CB8679C1D02D233B38D">
                            <name>CreateRules()</name>
                            <syntax>public override void CreateRules();</syntax>
                        </function>
                        <function id="member_function_GetReferencedGrammars_stdlib_9E1157B68CDE56EB74B28A8C0702A2FF0A6B481B">
                            <name>GetReferencedGrammars()</name>
                            <syntax>public override void GetReferencedGrammars();</syntax>
                        </function>
                    </functions>
                </class>
            </classes>
            <functions>
                <function id="function_CommonName_E714805B7BF1F48ED743DBDBBB779C74673362E2">
                    <name>CommonName(const String&lt;uchar>&amp; qualifiedName)</name>
                    <syntax>public nothrow String&lt;uchar> CommonName(const String&lt;uchar>&amp; qualifiedName);</syntax>
                    <parameters>
                        <parameter>
                            <name>qualifiedName</name>
                            <type ref="type.1378718"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1378697"/>
                </function>
                <function id="function_ExpandCode_F6C68BD20B5E0628D82F1BCA296E26BB8F1CCA6C">
                    <name>ExpandCode(ParsingDomain* parsingDomain)</name>
                    <syntax>public void ExpandCode(ParsingDomain* parsingDomain);</syntax>
                    <parameters>
                        <parameter>
                            <name>parsingDomain</name>
                            <type ref="type.1385574"/>
                        </parameter>
                    </parameters>
                </function>
                <function id="function_GetErrorLines_2C67EBA9C2C99C93C28C09944E9C374C6DD40056">
                    <name>GetErrorLines(const uchar* start, const uchar* end, const Span&amp; span)</name>
                    <syntax>public nothrow String&lt;uchar> GetErrorLines(const uchar* start, const uchar* end, const Span&amp; span);</syntax>
                    <parameters>
                        <parameter>
                            <name>start</name>
                            <type ref="type.1378702"/>
                        </parameter>
                        <parameter>
                            <name>end</name>
                            <type ref="type.1378702"/>
                        </parameter>
                        <parameter>
                            <name>span</name>
                            <type ref="type.1387437"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1378697"/>
                </function>
                <function id="function_GetHashCode_260F1D8828353552B8A5CFC54419AA81935AB1CA">
                    <name>GetHashCode(Grammar* grammar)</name>
                    <syntax>public nothrow inline ulong GetHashCode(Grammar* grammar);</syntax>
                    <parameters>
                        <parameter>
                            <name>grammar</name>
                            <type ref="type.1385523"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1377793"/>
                </function>
                <function id="function_GetPrefix_061D51385EE6B68F879657A446ECBFB59D261B26">
                    <name>GetPrefix(const String&lt;uchar>&amp; fullName)</name>
                    <syntax>public nothrow String&lt;uchar> GetPrefix(const String&lt;uchar>&amp; fullName);</syntax>
                    <parameters>
                        <parameter>
                            <name>fullName</name>
                            <type ref="type.1378718"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1378697"/>
                </function>
                <function id="function_InverseStr_0D10EC6785D4E9B887237021D90D4B62DD2BEC71">
                    <name>InverseStr(bool inverse)</name>
                    <syntax>public nothrow String&lt;uchar> InverseStr(bool inverse);</syntax>
                    <parameters>
                        <parameter>
                            <name>inverse</name>
                            <type ref="type.1377785"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1378697"/>
                </function>
                <function id="function_LineEnd_061F40AA6FB4083204C5096B5D7CB78B9DFA0909">
                    <name>LineEnd(const uchar* end, const uchar* pos)</name>
                    <syntax>public nothrow const uchar* LineEnd(const uchar* end, const uchar* pos);</syntax>
                    <parameters>
                        <parameter>
                            <name>end</name>
                            <type ref="type.1378702"/>
                        </parameter>
                        <parameter>
                            <name>pos</name>
                            <type ref="type.1378702"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1378702"/>
                </function>
                <function id="function_LineStart_3BC899FBB690117E389CBD52F89ED2D71919409C">
                    <name>LineStart(const uchar* start, const uchar* pos)</name>
                    <syntax>public nothrow const uchar* LineStart(const uchar* start, const uchar* pos);</syntax>
                    <parameters>
                        <parameter>
                            <name>start</name>
                            <type ref="type.1378702"/>
                        </parameter>
                        <parameter>
                            <name>pos</name>
                            <type ref="type.1378702"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1378702"/>
                </function>
                <function id="function_Link_7048369924ADD3E9F782C85EC8D6DE5C13FACB00">
                    <name>Link(ParsingDomain* parsingDomain)</name>
                    <syntax>public void Link(ParsingDomain* parsingDomain);</syntax>
                    <parameters>
                        <parameter>
                            <name>parsingDomain</name>
                            <type ref="type.1385574"/>
                        </parameter>
                    </parameters>
                </function>
                <function id="function_RegisterParsingDomain_FF50421D81FD3C29CCD99E651EDE434BD728E693">
                    <name>RegisterParsingDomain(ParsingDomain* parsingDomain)</name>
                    <syntax>public void RegisterParsingDomain(ParsingDomain* parsingDomain);</syntax>
                    <parameters>
                        <parameter>
                            <name>parsingDomain</name>
                            <type ref="type.1385574"/>
                        </parameter>
                    </parameters>
                </function>
                <function id="function_ThrowException_4651EE3205B502F6308EAD98AA4EDE5C129DEE3E">
                    <name>ThrowException(const String&lt;char>&amp; message, const Span&amp; span)</name>
                    <syntax>public void ThrowException(const String&lt;char>&amp; message, const Span&amp; span);</syntax>
                    <parameters>
                        <parameter>
                            <name>message</name>
                            <type ref="type.1378593"/>
                        </parameter>
                        <parameter>
                            <name>span</name>
                            <type ref="type.1387437"/>
                        </parameter>
                    </parameters>
                </function>
                <function id="function_XmlCharStr_7E995B6FF27964D889C4FB987F6356975895C52E">
                    <name>XmlCharStr(uchar c)</name>
                    <syntax>public String&lt;uchar> XmlCharStr(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1377798"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1378697"/>
                </function>
                <function id="function_XmlEscape_9E7152D741743E57926D9E4948944955CDCD595D">
                    <name>XmlEscape(const String&lt;uchar>&amp; s)</name>
                    <syntax>public String&lt;uchar> XmlEscape(const String&lt;uchar>&amp; s);</syntax>
                    <parameters>
                        <parameter>
                            <name>s</name>
                            <type ref="type.1378718"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1378697"/>
                </function>
                <function id="function_group_op_eq_52A01F8C172271E855010828D2E825F82D67BA88">
                    <name>operator==</name>
                    <overloads>
                        <overload id="function_op_eq_5E6AA4E7BE6B120D6F86893E558375A481F537EF">
                            <name>operator==(const FailureAction&amp; left, const FailureAction&amp; right)</name>
                            <syntax>public bool operator==(const FailureAction&amp; left, const FailureAction&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.1387447"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.1387447"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1377785"/>
                        </overload>
                        <overload id="function_op_eq_7B4D9583A4064703F3E39A049B876C8C28D80611">
                            <name>operator==(const ParsingAction&amp; left, const ParsingAction&amp; right)</name>
                            <syntax>public bool operator==(const ParsingAction&amp; left, const ParsingAction&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.1387441"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.1387441"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1377785"/>
                        </overload>
                        <overload id="function_op_eq_6C2881406AA71A8B917AB57130C80643460820BE">
                            <name>operator==(const PostCall&amp; left, const PostCall&amp; right)</name>
                            <syntax>public bool operator==(const PostCall&amp; left, const PostCall&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.1387932"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.1387932"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1377785"/>
                        </overload>
                        <overload id="function_op_eq_F40797939D17C143BAB0854F2E01B03C1469DBA0">
                            <name>operator==(const PreCall&amp; left, const PreCall&amp; right)</name>
                            <syntax>public bool operator==(const PreCall&amp; left, const PreCall&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.1387926"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.1387926"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1377785"/>
                        </overload>
                    </overloads>
                </function>
            </functions>
            <classDelegates>
                <classDelegate id="1385475">
                    <name>FailureAction</name>
                    <syntax>public class delegate void FailureAction(ParsingData* parsingData);</syntax>
                    <parameters>
                        <parameter>
                            <name>parsingData</name>
                            <type ref="type.1385570"/>
                        </parameter>
                    </parameters>
                </classDelegate>
                <classDelegate id="1385474">
                    <name>ParsingAction</name>
                    <syntax>public class delegate void ParsingAction(const uchar* matchBegin, const uchar* matchEnd, const Span&amp; span, const String&lt;char>&amp; fileName, ParsingData* parsingData, bool&amp; pass);</syntax>
                    <parameters>
                        <parameter>
                            <name>matchBegin</name>
                            <type ref="type.1378702"/>
                        </parameter>
                        <parameter>
                            <name>matchEnd</name>
                            <type ref="type.1378702"/>
                        </parameter>
                        <parameter>
                            <name>span</name>
                            <type ref="type.1387437"/>
                        </parameter>
                        <parameter>
                            <name>fileName</name>
                            <type ref="type.1378593"/>
                        </parameter>
                        <parameter>
                            <name>parsingData</name>
                            <type ref="type.1385570"/>
                        </parameter>
                        <parameter>
                            <name>pass</name>
                            <type ref="type.1378815"/>
                        </parameter>
                    </parameters>
                </classDelegate>
                <classDelegate id="1385549">
                    <name>PostCall</name>
                    <syntax>public class delegate void PostCall(Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData, bool matched);</syntax>
                    <parameters>
                        <parameter>
                            <name>stack</name>
                            <type ref="type.1387515"/>
                        </parameter>
                        <parameter>
                            <name>parsingData</name>
                            <type ref="type.1385570"/>
                        </parameter>
                        <parameter>
                            <name>matched</name>
                            <type ref="type.1377785"/>
                        </parameter>
                    </parameters>
                </classDelegate>
                <classDelegate id="1385548">
                    <name>PreCall</name>
                    <syntax>public class delegate void PreCall(Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                    <parameters>
                        <parameter>
                            <name>stack</name>
                            <type ref="type.1387515"/>
                        </parameter>
                        <parameter>
                            <name>parsingData</name>
                            <type ref="type.1385570"/>
                        </parameter>
                    </parameters>
                </classDelegate>
            </classDelegates>
        </namespace>
    </namespaces>
    <types>
        <type id="1387436">
            <name>@dlg_type</name>
        </type>
        <type id="1387922">
            <name>@dlg_type</name>
        </type>
        <type id="1387928">
            <name>@dlg_type</name>
        </type>
        <type id="1387443">
            <name>@dlg_type</name>
        </type>
        <type id="1387923">
            <name>@objectDelegatePairType</name>
        </type>
        <type id="1387444">
            <name>@objectDelegatePairType</name>
        </type>
        <type id="1387438">
            <name>@objectDelegatePairType</name>
        </type>
        <type id="1387929">
            <name>@objectDelegatePairType</name>
        </type>
        <type id="1385476">
            <name>ActionParser</name>
        </type>
        <type derived="true" id="type.1387860">
            <name>ActionParser&amp;</name>
            <content>
                <baseType ref="1385476"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385477">
            <name>ActionParser*</name>
            <content>
                <baseType ref="1385476"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388264">
            <name>ActionParser*&amp;</name>
            <content>
                <baseType ref="1385476"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388275">
            <name>ActionParser*&amp;&amp;</name>
            <content>
                <baseType ref="1385476"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388265">
            <name>ActionParser**</name>
            <content>
                <baseType ref="1385476"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388709">
            <name>ActionParser**&amp;&amp;</name>
            <content>
                <baseType ref="1385476"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4708">
            <name>AddressOf&amp;&amp;</name>
            <content>
                <baseType ref="1383452"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="1385687">
            <name>AlphabeticParser</name>
        </type>
        <type derived="true" id="type.1387915">
            <name>AlphabeticParser&amp;</name>
            <content>
                <baseType ref="1385687"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385688">
            <name>AlphabeticParser*</name>
            <content>
                <baseType ref="1385687"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385502">
            <name>AlternativeParser</name>
        </type>
        <type derived="true" id="type.1387862">
            <name>AlternativeParser&amp;</name>
            <content>
                <baseType ref="1385502"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385503">
            <name>AlternativeParser*</name>
            <content>
                <baseType ref="1385502"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385693">
            <name>AnyCharParser</name>
        </type>
        <type derived="true" id="type.1387918">
            <name>AnyCharParser&amp;</name>
            <content>
                <baseType ref="1385693"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385694">
            <name>AnyCharParser*</name>
            <content>
                <baseType ref="1385693"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385550">
            <name>ArgumentCollector</name>
        </type>
        <type derived="true" id="type.1385551">
            <name>ArgumentCollector*</name>
            <content>
                <baseType ref="1385550"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4785">
            <name>AssertStatement&amp;&amp;</name>
            <content>
                <baseType ref="1383596"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="1385699">
            <name>AttrOrVar</name>
        </type>
        <type derived="true" id="type.1388239">
            <name>AttrOrVar&amp;</name>
            <content>
                <baseType ref="1385699"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388249">
            <name>AttrOrVar&amp;&amp;</name>
            <content>
                <baseType ref="1385699"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385700">
            <name>AttrOrVar*</name>
            <content>
                <baseType ref="1385699"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388707">
            <name>AttrOrVar*&amp;&amp;</name>
            <content>
                <baseType ref="1385699"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="1385685">
            <name>BaseCharParser</name>
        </type>
        <type derived="true" id="type.1387914">
            <name>BaseCharParser&amp;</name>
            <content>
                <baseType ref="1385685"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385686">
            <name>BaseCharParser*</name>
            <content>
                <baseType ref="1385685"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.3200" specialization="true">
            <name>BinaryFun&lt;Argument, Argument, bool></name>
            <content>
                <primaryType ref="1378950"/>
                <argumentType ref="1378201"/>
                <argumentType ref="1378201"/>
                <argumentType ref="type.1377785"/>
            </content>
        </type>
        <type derived="true" id="type.3201">
            <name>BinaryFun&lt;Argument, Argument, bool>*</name>
            <content>
                <baseType ref="type.3200"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.3197" specialization="true">
            <name>BinaryFun&lt;Argument1, Argument2, bool></name>
            <content>
                <primaryType ref="1378950"/>
                <argumentType ref="1378198"/>
                <argumentType ref="1378199"/>
                <argumentType ref="type.1377785"/>
            </content>
        </type>
        <type derived="true" id="type.3198">
            <name>BinaryFun&lt;Argument1, Argument2, bool>*</name>
            <content>
                <baseType ref="type.3197"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1387702" specialization="true">
            <name>BinaryFun&lt;Grammar*, Grammar*, bool></name>
            <content>
                <primaryType ref="1378950"/>
                <argumentType ref="type.1385523"/>
                <argumentType ref="type.1385523"/>
                <argumentType ref="type.1377785"/>
            </content>
        </type>
        <type derived="true" id="type.1388503">
            <name>BinaryFun&lt;Grammar*, Grammar*, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.1387702"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387703">
            <name>BinaryFun&lt;Grammar*, Grammar*, bool>*</name>
            <content>
                <baseType ref="type.1387702"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1387525" specialization="true">
            <name>BinaryFun&lt;String&lt;uchar>, String&lt;uchar>, bool></name>
            <content>
                <primaryType ref="1378950"/>
                <argumentType ref="type.1378697"/>
                <argumentType ref="type.1378697"/>
                <argumentType ref="type.1377785"/>
            </content>
        </type>
        <type derived="true" id="type.1388410">
            <name>BinaryFun&lt;String&lt;uchar>, String&lt;uchar>, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.1387525"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387526">
            <name>BinaryFun&lt;String&lt;uchar>, String&lt;uchar>, bool>*</name>
            <content>
                <baseType ref="type.1387525"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.3326" specialization="true">
            <name>BinaryFun&lt;T, T, T></name>
            <content>
                <primaryType ref="1378950"/>
                <argumentType ref="1378241"/>
                <argumentType ref="1378241"/>
                <argumentType ref="1378241"/>
            </content>
        </type>
        <type id="type.3165" specialization="true">
            <name>BinaryFun&lt;T, T, T></name>
            <content>
                <primaryType ref="1378950"/>
                <argumentType ref="1378182"/>
                <argumentType ref="1378182"/>
                <argumentType ref="1378182"/>
            </content>
        </type>
        <type id="type.3351" specialization="true">
            <name>BinaryFun&lt;T, T, T></name>
            <content>
                <primaryType ref="1378950"/>
                <argumentType ref="1378251"/>
                <argumentType ref="1378251"/>
                <argumentType ref="1378251"/>
            </content>
        </type>
        <type id="type.3192" specialization="true">
            <name>BinaryFun&lt;T, T, T></name>
            <content>
                <primaryType ref="1378950"/>
                <argumentType ref="1378194"/>
                <argumentType ref="1378194"/>
                <argumentType ref="1378194"/>
            </content>
        </type>
        <type id="type.3331" specialization="true">
            <name>BinaryFun&lt;T, T, T></name>
            <content>
                <primaryType ref="1378950"/>
                <argumentType ref="1378243"/>
                <argumentType ref="1378243"/>
                <argumentType ref="1378243"/>
            </content>
        </type>
        <type id="type.3336" specialization="true">
            <name>BinaryFun&lt;T, T, T></name>
            <content>
                <primaryType ref="1378950"/>
                <argumentType ref="1378245"/>
                <argumentType ref="1378245"/>
                <argumentType ref="1378245"/>
            </content>
        </type>
        <type id="type.3346" specialization="true">
            <name>BinaryFun&lt;T, T, T></name>
            <content>
                <primaryType ref="1378950"/>
                <argumentType ref="1378249"/>
                <argumentType ref="1378249"/>
                <argumentType ref="1378249"/>
            </content>
        </type>
        <type id="type.3187" specialization="true">
            <name>BinaryFun&lt;T, T, T></name>
            <content>
                <primaryType ref="1378950"/>
                <argumentType ref="1378192"/>
                <argumentType ref="1378192"/>
                <argumentType ref="1378192"/>
            </content>
        </type>
        <type id="type.3181" specialization="true">
            <name>BinaryFun&lt;T, T, T></name>
            <content>
                <primaryType ref="1378950"/>
                <argumentType ref="1378189"/>
                <argumentType ref="1378189"/>
                <argumentType ref="1378189"/>
            </content>
        </type>
        <type id="type.3176" specialization="true">
            <name>BinaryFun&lt;T, T, T></name>
            <content>
                <primaryType ref="1378950"/>
                <argumentType ref="1378187"/>
                <argumentType ref="1378187"/>
                <argumentType ref="1378187"/>
            </content>
        </type>
        <type derived="true" id="type.3332">
            <name>BinaryFun&lt;T, T, T>*</name>
            <content>
                <baseType ref="type.3331"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3182">
            <name>BinaryFun&lt;T, T, T>*</name>
            <content>
                <baseType ref="type.3181"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3337">
            <name>BinaryFun&lt;T, T, T>*</name>
            <content>
                <baseType ref="type.3336"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3166">
            <name>BinaryFun&lt;T, T, T>*</name>
            <content>
                <baseType ref="type.3165"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3193">
            <name>BinaryFun&lt;T, T, T>*</name>
            <content>
                <baseType ref="type.3192"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3347">
            <name>BinaryFun&lt;T, T, T>*</name>
            <content>
                <baseType ref="type.3346"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3327">
            <name>BinaryFun&lt;T, T, T>*</name>
            <content>
                <baseType ref="type.3326"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3352">
            <name>BinaryFun&lt;T, T, T>*</name>
            <content>
                <baseType ref="type.3351"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3188">
            <name>BinaryFun&lt;T, T, T>*</name>
            <content>
                <baseType ref="type.3187"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3177">
            <name>BinaryFun&lt;T, T, T>*</name>
            <content>
                <baseType ref="type.3176"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.3297" specialization="true">
            <name>BinaryFun&lt;T, T, bool></name>
            <content>
                <primaryType ref="1378950"/>
                <argumentType ref="1378230"/>
                <argumentType ref="1378230"/>
                <argumentType ref="type.1377785"/>
            </content>
        </type>
        <type id="type.3280" specialization="true">
            <name>BinaryFun&lt;T, T, bool></name>
            <content>
                <primaryType ref="1378950"/>
                <argumentType ref="1378225"/>
                <argumentType ref="1378225"/>
                <argumentType ref="type.1377785"/>
            </content>
        </type>
        <type id="type.3212" specialization="true">
            <name>BinaryFun&lt;T, T, bool></name>
            <content>
                <primaryType ref="1378950"/>
                <argumentType ref="1378205"/>
                <argumentType ref="1378205"/>
                <argumentType ref="type.1377785"/>
            </content>
        </type>
        <type id="type.3263" specialization="true">
            <name>BinaryFun&lt;T, T, bool></name>
            <content>
                <primaryType ref="1378950"/>
                <argumentType ref="1378220"/>
                <argumentType ref="1378220"/>
                <argumentType ref="type.1377785"/>
            </content>
        </type>
        <type id="type.3246" specialization="true">
            <name>BinaryFun&lt;T, T, bool></name>
            <content>
                <primaryType ref="1378950"/>
                <argumentType ref="1378215"/>
                <argumentType ref="1378215"/>
                <argumentType ref="type.1377785"/>
            </content>
        </type>
        <type id="type.3229" specialization="true">
            <name>BinaryFun&lt;T, T, bool></name>
            <content>
                <primaryType ref="1378950"/>
                <argumentType ref="1378210"/>
                <argumentType ref="1378210"/>
                <argumentType ref="type.1377785"/>
            </content>
        </type>
        <type derived="true" id="type.3298">
            <name>BinaryFun&lt;T, T, bool>*</name>
            <content>
                <baseType ref="type.3297"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3213">
            <name>BinaryFun&lt;T, T, bool>*</name>
            <content>
                <baseType ref="type.3212"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3264">
            <name>BinaryFun&lt;T, T, bool>*</name>
            <content>
                <baseType ref="type.3263"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3281">
            <name>BinaryFun&lt;T, T, bool>*</name>
            <content>
                <baseType ref="type.3280"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3230">
            <name>BinaryFun&lt;T, T, bool>*</name>
            <content>
                <baseType ref="type.3229"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3247">
            <name>BinaryFun&lt;T, T, bool>*</name>
            <content>
                <baseType ref="type.3246"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.3305" specialization="true">
            <name>BinaryFun&lt;T, U, bool></name>
            <content>
                <primaryType ref="1378950"/>
                <argumentType ref="1378232"/>
                <argumentType ref="1378233"/>
                <argumentType ref="type.1377785"/>
            </content>
        </type>
        <type id="type.3288" specialization="true">
            <name>BinaryFun&lt;T, U, bool></name>
            <content>
                <primaryType ref="1378950"/>
                <argumentType ref="1378227"/>
                <argumentType ref="1378228"/>
                <argumentType ref="type.1377785"/>
            </content>
        </type>
        <type id="type.3271" specialization="true">
            <name>BinaryFun&lt;T, U, bool></name>
            <content>
                <primaryType ref="1378950"/>
                <argumentType ref="1378222"/>
                <argumentType ref="1378223"/>
                <argumentType ref="type.1377785"/>
            </content>
        </type>
        <type id="type.3220" specialization="true">
            <name>BinaryFun&lt;T, U, bool></name>
            <content>
                <primaryType ref="1378950"/>
                <argumentType ref="1378207"/>
                <argumentType ref="1378208"/>
                <argumentType ref="type.1377785"/>
            </content>
        </type>
        <type id="type.3237" specialization="true">
            <name>BinaryFun&lt;T, U, bool></name>
            <content>
                <primaryType ref="1378950"/>
                <argumentType ref="1378212"/>
                <argumentType ref="1378213"/>
                <argumentType ref="type.1377785"/>
            </content>
        </type>
        <type id="type.3254" specialization="true">
            <name>BinaryFun&lt;T, U, bool></name>
            <content>
                <primaryType ref="1378950"/>
                <argumentType ref="1378217"/>
                <argumentType ref="1378218"/>
                <argumentType ref="type.1377785"/>
            </content>
        </type>
        <type derived="true" id="type.3272">
            <name>BinaryFun&lt;T, U, bool>*</name>
            <content>
                <baseType ref="type.3271"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3289">
            <name>BinaryFun&lt;T, U, bool>*</name>
            <content>
                <baseType ref="type.3288"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3255">
            <name>BinaryFun&lt;T, U, bool>*</name>
            <content>
                <baseType ref="type.3254"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3221">
            <name>BinaryFun&lt;T, U, bool>*</name>
            <content>
                <baseType ref="type.3220"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3238">
            <name>BinaryFun&lt;T, U, bool>*</name>
            <content>
                <baseType ref="type.3237"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3306">
            <name>BinaryFun&lt;T, U, bool>*</name>
            <content>
                <baseType ref="type.3305"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.3313" specialization="true">
            <name>BinaryFun&lt;bool, bool, bool></name>
            <content>
                <primaryType ref="1378950"/>
                <argumentType ref="type.1377785"/>
                <argumentType ref="type.1377785"/>
                <argumentType ref="type.1377785"/>
            </content>
        </type>
        <type derived="true" id="type.3314">
            <name>BinaryFun&lt;bool, bool, bool>*</name>
            <content>
                <baseType ref="type.3313"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385496">
            <name>BinaryParser</name>
        </type>
        <type derived="true" id="type.1385497">
            <name>BinaryParser*</name>
            <content>
                <baseType ref="1385496"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.3199" specialization="true">
            <name>BinaryPred&lt;Argument, Argument></name>
            <content>
                <primaryType ref="1379012"/>
                <argumentType ref="1378201"/>
                <argumentType ref="1378201"/>
            </content>
        </type>
        <type derived="true" id="type.3202">
            <name>BinaryPred&lt;Argument, Argument>*</name>
            <content>
                <baseType ref="type.3199"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1387701" specialization="true">
            <name>BinaryPred&lt;Grammar*, Grammar*></name>
            <content>
                <primaryType ref="1379012"/>
                <argumentType ref="type.1385523"/>
                <argumentType ref="type.1385523"/>
            </content>
        </type>
        <type derived="true" id="type.1388500">
            <name>BinaryPred&lt;Grammar*, Grammar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1387701"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387704">
            <name>BinaryPred&lt;Grammar*, Grammar*>*</name>
            <content>
                <baseType ref="type.1387701"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1387524" specialization="true">
            <name>BinaryPred&lt;String&lt;uchar>, String&lt;uchar>></name>
            <content>
                <primaryType ref="1379012"/>
                <argumentType ref="type.1378697"/>
                <argumentType ref="type.1378697"/>
            </content>
        </type>
        <type derived="true" id="type.1388407">
            <name>BinaryPred&lt;String&lt;uchar>, String&lt;uchar>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1387524"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387527">
            <name>BinaryPred&lt;String&lt;uchar>, String&lt;uchar>>*</name>
            <content>
                <baseType ref="type.1387524"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.3211" specialization="true">
            <name>BinaryPred&lt;T, T></name>
            <content>
                <primaryType ref="1379012"/>
                <argumentType ref="1378205"/>
                <argumentType ref="1378205"/>
            </content>
        </type>
        <type id="type.3296" specialization="true">
            <name>BinaryPred&lt;T, T></name>
            <content>
                <primaryType ref="1379012"/>
                <argumentType ref="1378230"/>
                <argumentType ref="1378230"/>
            </content>
        </type>
        <type id="type.3245" specialization="true">
            <name>BinaryPred&lt;T, T></name>
            <content>
                <primaryType ref="1379012"/>
                <argumentType ref="1378215"/>
                <argumentType ref="1378215"/>
            </content>
        </type>
        <type id="type.3262" specialization="true">
            <name>BinaryPred&lt;T, T></name>
            <content>
                <primaryType ref="1379012"/>
                <argumentType ref="1378220"/>
                <argumentType ref="1378220"/>
            </content>
        </type>
        <type id="type.3279" specialization="true">
            <name>BinaryPred&lt;T, T></name>
            <content>
                <primaryType ref="1379012"/>
                <argumentType ref="1378225"/>
                <argumentType ref="1378225"/>
            </content>
        </type>
        <type id="type.3228" specialization="true">
            <name>BinaryPred&lt;T, T></name>
            <content>
                <primaryType ref="1379012"/>
                <argumentType ref="1378210"/>
                <argumentType ref="1378210"/>
            </content>
        </type>
        <type derived="true" id="type.3282">
            <name>BinaryPred&lt;T, T>*</name>
            <content>
                <baseType ref="type.3279"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3299">
            <name>BinaryPred&lt;T, T>*</name>
            <content>
                <baseType ref="type.3296"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3214">
            <name>BinaryPred&lt;T, T>*</name>
            <content>
                <baseType ref="type.3211"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3248">
            <name>BinaryPred&lt;T, T>*</name>
            <content>
                <baseType ref="type.3245"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3231">
            <name>BinaryPred&lt;T, T>*</name>
            <content>
                <baseType ref="type.3228"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3265">
            <name>BinaryPred&lt;T, T>*</name>
            <content>
                <baseType ref="type.3262"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.3287" specialization="true">
            <name>BinaryPred&lt;T, U></name>
            <content>
                <primaryType ref="1379012"/>
                <argumentType ref="1378227"/>
                <argumentType ref="1378228"/>
            </content>
        </type>
        <type id="type.3304" specialization="true">
            <name>BinaryPred&lt;T, U></name>
            <content>
                <primaryType ref="1379012"/>
                <argumentType ref="1378232"/>
                <argumentType ref="1378233"/>
            </content>
        </type>
        <type id="type.3219" specialization="true">
            <name>BinaryPred&lt;T, U></name>
            <content>
                <primaryType ref="1379012"/>
                <argumentType ref="1378207"/>
                <argumentType ref="1378208"/>
            </content>
        </type>
        <type id="type.3253" specialization="true">
            <name>BinaryPred&lt;T, U></name>
            <content>
                <primaryType ref="1379012"/>
                <argumentType ref="1378217"/>
                <argumentType ref="1378218"/>
            </content>
        </type>
        <type id="type.3236" specialization="true">
            <name>BinaryPred&lt;T, U></name>
            <content>
                <primaryType ref="1379012"/>
                <argumentType ref="1378212"/>
                <argumentType ref="1378213"/>
            </content>
        </type>
        <type id="type.3270" specialization="true">
            <name>BinaryPred&lt;T, U></name>
            <content>
                <primaryType ref="1379012"/>
                <argumentType ref="1378222"/>
                <argumentType ref="1378223"/>
            </content>
        </type>
        <type derived="true" id="type.3290">
            <name>BinaryPred&lt;T, U>*</name>
            <content>
                <baseType ref="type.3287"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3222">
            <name>BinaryPred&lt;T, U>*</name>
            <content>
                <baseType ref="type.3219"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3239">
            <name>BinaryPred&lt;T, U>*</name>
            <content>
                <baseType ref="type.3236"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3256">
            <name>BinaryPred&lt;T, U>*</name>
            <content>
                <baseType ref="type.3253"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3307">
            <name>BinaryPred&lt;T, U>*</name>
            <content>
                <baseType ref="type.3304"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3273">
            <name>BinaryPred&lt;T, U>*</name>
            <content>
                <baseType ref="type.3270"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.3312" specialization="true">
            <name>BinaryPred&lt;bool, bool></name>
            <content>
                <primaryType ref="1379012"/>
                <argumentType ref="type.1377785"/>
                <argumentType ref="type.1377785"/>
            </content>
        </type>
        <type derived="true" id="type.3315">
            <name>BinaryPred&lt;bool, bool>*</name>
            <content>
                <baseType ref="type.3312"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1379175" specialization="true">
            <name>BitAnd&lt;T></name>
            <content>
                <primaryType ref="1379175"/>
                <argumentType ref="1378241"/>
            </content>
        </type>
        <type id="type.1379196" specialization="true">
            <name>BitNot&lt;T></name>
            <content>
                <primaryType ref="1379196"/>
                <argumentType ref="1378247"/>
            </content>
        </type>
        <type id="type.1379182" specialization="true">
            <name>BitOr&lt;T></name>
            <content>
                <primaryType ref="1379182"/>
                <argumentType ref="1378243"/>
            </content>
        </type>
        <type id="type.1379189" specialization="true">
            <name>BitXor&lt;T></name>
            <content>
                <primaryType ref="1379189"/>
                <argumentType ref="1378245"/>
            </content>
        </type>
        <type id="type.1387727" specialization="true">
            <name>Bucket&lt;Grammar*></name>
            <content>
                <primaryType ref="1379511"/>
                <argumentType ref="type.1385523"/>
            </content>
        </type>
        <type derived="true" id="type.1387728">
            <name>Bucket&lt;Grammar*>*</name>
            <content>
                <baseType ref="type.1387727"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387757">
            <name>Bucket&lt;Grammar*>*&amp;</name>
            <content>
                <baseType ref="type.1387727"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387768">
            <name>Bucket&lt;Grammar*>*&amp;&amp;</name>
            <content>
                <baseType ref="type.1387727"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387758">
            <name>Bucket&lt;Grammar*>**</name>
            <content>
                <baseType ref="type.1387727"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388508">
            <name>Bucket&lt;Grammar*>**&amp;</name>
            <content>
                <baseType ref="type.1387727"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388507">
            <name>Bucket&lt;Grammar*>**&amp;&amp;</name>
            <content>
                <baseType ref="type.1387727"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1379313" specialization="true">
            <name>Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <primaryType ref="1379511"/>
                <argumentType ref="type.1379291"/>
            </content>
        </type>
        <type id="type.3379" specialization="true">
            <name>Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <primaryType ref="1379511"/>
                <argumentType ref="type.3357"/>
            </content>
        </type>
        <type id="type.1379313" specialization="true">
            <name>Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <primaryType ref="1379511"/>
                <argumentType ref="type.1379291"/>
            </content>
        </type>
        <type derived="true" id="type.3380">
            <name>Bucket&lt;Pair&lt;K, T>>*</name>
            <content>
                <baseType ref="type.3379"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3409">
            <name>Bucket&lt;Pair&lt;K, T>>*&amp;</name>
            <content>
                <baseType ref="type.3379"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3420">
            <name>Bucket&lt;Pair&lt;K, T>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.3379"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3410">
            <name>Bucket&lt;Pair&lt;K, T>>**</name>
            <content>
                <baseType ref="type.3379"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1381276" specialization="true">
            <name>Bucket&lt;Pair&lt;String&lt;char>, Age*>></name>
            <content>
                <primaryType ref="1379511"/>
                <argumentType ref="type.1381258"/>
            </content>
        </type>
        <type id="type.1382172" specialization="true">
            <name>Bucket&lt;Pair&lt;String&lt;char>, AliasType*>></name>
            <content>
                <primaryType ref="1379511"/>
                <argumentType ref="type.1382154"/>
            </content>
        </type>
        <type id="type.1381814" specialization="true">
            <name>Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>></name>
            <content>
                <primaryType ref="1379511"/>
                <argumentType ref="type.1381796"/>
            </content>
        </type>
        <type id="type.1381993" specialization="true">
            <name>Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>></name>
            <content>
                <primaryType ref="1379511"/>
                <argumentType ref="type.1381975"/>
            </content>
        </type>
        <type id="type.1380736" specialization="true">
            <name>Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>></name>
            <content>
                <primaryType ref="1379511"/>
                <argumentType ref="type.1380718"/>
            </content>
        </type>
        <type id="type.1380916" specialization="true">
            <name>Bucket&lt;Pair&lt;String&lt;char>, Block*>></name>
            <content>
                <primaryType ref="1379511"/>
                <argumentType ref="type.1380898"/>
            </content>
        </type>
        <type id="type.1381097" specialization="true">
            <name>Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>></name>
            <content>
                <primaryType ref="1379511"/>
                <argumentType ref="type.1381079"/>
            </content>
        </type>
        <type id="type.1381635" specialization="true">
            <name>Bucket&lt;Pair&lt;String&lt;char>, NumericType*>></name>
            <content>
                <primaryType ref="1379511"/>
                <argumentType ref="type.1381617"/>
            </content>
        </type>
        <type id="type.1381455" specialization="true">
            <name>Bucket&lt;Pair&lt;String&lt;char>, Script*>></name>
            <content>
                <primaryType ref="1379511"/>
                <argumentType ref="type.1381437"/>
            </content>
        </type>
        <type id="type.1388024" specialization="true">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>></name>
            <content>
                <primaryType ref="1379511"/>
                <argumentType ref="type.1388005"/>
            </content>
        </type>
        <type derived="true" id="type.1388025">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*</name>
            <content>
                <baseType ref="type.1388024"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388054">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;</name>
            <content>
                <baseType ref="type.1388024"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388065">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.1388024"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388055">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**</name>
            <content>
                <baseType ref="type.1388024"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388645">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**&amp;</name>
            <content>
                <baseType ref="type.1388024"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388644">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**&amp;&amp;</name>
            <content>
                <baseType ref="type.1388024"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1388090" specialization="true">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>></name>
            <content>
                <primaryType ref="1379511"/>
                <argumentType ref="type.1388070"/>
            </content>
        </type>
        <type derived="true" id="type.1388091">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*</name>
            <content>
                <baseType ref="type.1388090"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388120">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;</name>
            <content>
                <baseType ref="type.1388090"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388131">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.1388090"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388121">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**</name>
            <content>
                <baseType ref="type.1388090"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388656">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**&amp;</name>
            <content>
                <baseType ref="type.1388090"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388655">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**&amp;&amp;</name>
            <content>
                <baseType ref="type.1388090"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1388325" specialization="true">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>></name>
            <content>
                <primaryType ref="1379511"/>
                <argumentType ref="type.1388305"/>
            </content>
        </type>
        <type derived="true" id="type.1388326">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*</name>
            <content>
                <baseType ref="type.1388325"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388355">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;</name>
            <content>
                <baseType ref="type.1388325"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388366">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.1388325"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388356">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**</name>
            <content>
                <baseType ref="type.1388325"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388755">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**&amp;</name>
            <content>
                <baseType ref="type.1388325"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388754">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**&amp;&amp;</name>
            <content>
                <baseType ref="type.1388325"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1387552" specialization="true">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>></name>
            <content>
                <primaryType ref="1379511"/>
                <argumentType ref="type.1387534"/>
            </content>
        </type>
        <type derived="true" id="type.1387553">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*</name>
            <content>
                <baseType ref="type.1387552"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387582">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;</name>
            <content>
                <baseType ref="type.1387552"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387593">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.1387552"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387583">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**</name>
            <content>
                <baseType ref="type.1387552"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388415">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**&amp;</name>
            <content>
                <baseType ref="type.1387552"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388414">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**&amp;&amp;</name>
            <content>
                <baseType ref="type.1387552"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1381211" specialization="true">
            <name>Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>></name>
            <content>
                <primaryType ref="1379511"/>
                <argumentType ref="type.1381191"/>
            </content>
        </type>
        <type id="type.1382107" specialization="true">
            <name>Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>></name>
            <content>
                <primaryType ref="1379511"/>
                <argumentType ref="type.1382087"/>
            </content>
        </type>
        <type id="type.1381749" specialization="true">
            <name>Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>></name>
            <content>
                <primaryType ref="1379511"/>
                <argumentType ref="type.1381729"/>
            </content>
        </type>
        <type id="type.1381928" specialization="true">
            <name>Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>></name>
            <content>
                <primaryType ref="1379511"/>
                <argumentType ref="type.1381908"/>
            </content>
        </type>
        <type id="type.1380657" specialization="true">
            <name>Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>></name>
            <content>
                <primaryType ref="1379511"/>
                <argumentType ref="type.1380637"/>
            </content>
        </type>
        <type id="type.1380851" specialization="true">
            <name>Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>></name>
            <content>
                <primaryType ref="1379511"/>
                <argumentType ref="type.1380831"/>
            </content>
        </type>
        <type id="type.1381032" specialization="true">
            <name>Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>></name>
            <content>
                <primaryType ref="1379511"/>
                <argumentType ref="type.1381012"/>
            </content>
        </type>
        <type id="type.1381570" specialization="true">
            <name>Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>></name>
            <content>
                <primaryType ref="1379511"/>
                <argumentType ref="type.1381550"/>
            </content>
        </type>
        <type id="type.1381390" specialization="true">
            <name>Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>></name>
            <content>
                <primaryType ref="1379511"/>
                <argumentType ref="type.1381370"/>
            </content>
        </type>
        <type id="type.1387808" specialization="true">
            <name>Bucket&lt;String&lt;uchar>></name>
            <content>
                <primaryType ref="1379511"/>
                <argumentType ref="type.1378697"/>
            </content>
        </type>
        <type derived="true" id="type.1387809">
            <name>Bucket&lt;String&lt;uchar>>*</name>
            <content>
                <baseType ref="type.1387808"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387837">
            <name>Bucket&lt;String&lt;uchar>>*&amp;</name>
            <content>
                <baseType ref="type.1387808"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387848">
            <name>Bucket&lt;String&lt;uchar>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.1387808"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387838">
            <name>Bucket&lt;String&lt;uchar>>**</name>
            <content>
                <baseType ref="type.1387808"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388568">
            <name>Bucket&lt;String&lt;uchar>>**&amp;</name>
            <content>
                <baseType ref="type.1387808"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388567">
            <name>Bucket&lt;String&lt;uchar>>**&amp;&amp;</name>
            <content>
                <baseType ref="type.1387808"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.3526" specialization="true">
            <name>Bucket&lt;T></name>
            <content>
                <primaryType ref="1379511"/>
                <argumentType ref="1378274"/>
            </content>
        </type>
        <type id="type.1379441" specialization="true">
            <name>Bucket&lt;T></name>
            <content>
                <primaryType ref="1379511"/>
                <argumentType ref="1378265"/>
            </content>
        </type>
        <type id="type.1379534" specialization="true">
            <name>Bucket&lt;T></name>
            <content>
                <primaryType ref="1379511"/>
                <argumentType ref="1378278"/>
            </content>
        </type>
        <type id="type.3455" specialization="true">
            <name>Bucket&lt;T></name>
            <content>
                <primaryType ref="1379511"/>
                <argumentType ref="1378262"/>
            </content>
        </type>
        <type id="type.1379511" specialization="true">
            <name>Bucket&lt;T></name>
            <content>
                <primaryType ref="1379511"/>
                <argumentType ref="1378272"/>
            </content>
        </type>
        <type id="type.1379441" specialization="true">
            <name>Bucket&lt;T></name>
            <content>
                <primaryType ref="1379511"/>
                <argumentType ref="1378265"/>
            </content>
        </type>
        <type derived="true" id="type.3456">
            <name>Bucket&lt;T>*</name>
            <content>
                <baseType ref="type.3455"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3527">
            <name>Bucket&lt;T>*</name>
            <content>
                <baseType ref="type.3526"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3517">
            <name>Bucket&lt;T>*</name>
            <content>
                <baseType ref="type.1379511"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3485">
            <name>Bucket&lt;T>*&amp;</name>
            <content>
                <baseType ref="type.3455"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3496">
            <name>Bucket&lt;T>*&amp;&amp;</name>
            <content>
                <baseType ref="type.3455"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3486">
            <name>Bucket&lt;T>**</name>
            <content>
                <baseType ref="type.3455"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.3544" specialization="true">
            <name>Bucket&lt;ValueType></name>
            <content>
                <primaryType ref="1379511"/>
                <argumentType ref="1378284"/>
            </content>
        </type>
        <type derived="true" id="type.3545">
            <name>Bucket&lt;ValueType>*</name>
            <content>
                <baseType ref="type.3544"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3576">
            <name>Bucket&lt;ValueType>*&amp;</name>
            <content>
                <baseType ref="type.3544"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3587">
            <name>Bucket&lt;ValueType>*&amp;&amp;</name>
            <content>
                <baseType ref="type.3544"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3577">
            <name>Bucket&lt;ValueType>**</name>
            <content>
                <baseType ref="type.3544"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385615">
            <name>CasedLetterParser</name>
        </type>
        <type derived="true" id="type.1387879">
            <name>CasedLetterParser&amp;</name>
            <content>
                <baseType ref="1385615"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385616">
            <name>CasedLetterParser*</name>
            <content>
                <baseType ref="1385615"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385583">
            <name>CharParser</name>
        </type>
        <type derived="true" id="type.1387868">
            <name>CharParser&amp;</name>
            <content>
                <baseType ref="1385583"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4824">
            <name>CharParser&amp;&amp;</name>
            <content>
                <baseType ref="1385583"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385584">
            <name>CharParser*</name>
            <content>
                <baseType ref="1385583"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385591">
            <name>CharRange</name>
        </type>
        <type derived="true" id="type.1388217">
            <name>CharRange&amp;</name>
            <content>
                <baseType ref="1385591"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388203">
            <name>CharRange&amp;&amp;</name>
            <content>
                <baseType ref="1385591"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385592">
            <name>CharRange*</name>
            <content>
                <baseType ref="1385591"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385595">
            <name>CharSetParser</name>
        </type>
        <type derived="true" id="type.1387870">
            <name>CharSetParser&amp;</name>
            <content>
                <baseType ref="1385595"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388205">
            <name>CharSetParser&amp;&amp;</name>
            <content>
                <baseType ref="1385595"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385596">
            <name>CharSetParser*</name>
            <content>
                <baseType ref="1385595"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3993">
            <name>CharT&amp;</name>
            <content>
                <baseType ref="1378404"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3994">
            <name>CharT*</name>
            <content>
                <baseType ref="1378404"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385645">
            <name>ClosePunctuationParser</name>
        </type>
        <type derived="true" id="type.1387894">
            <name>ClosePunctuationParser&amp;</name>
            <content>
                <baseType ref="1385645"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385646">
            <name>ClosePunctuationParser*</name>
            <content>
                <baseType ref="1385645"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385480">
            <name>CodeExpandingVisitor</name>
        </type>
        <type derived="true" id="type.4800">
            <name>CodeExpandingVisitor&amp;&amp;</name>
            <content>
                <baseType ref="1385480"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385481">
            <name>CodeExpandingVisitor*</name>
            <content>
                <baseType ref="1385480"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4687">
            <name>CodeFormatter&amp;&amp;</name>
            <content>
                <baseType ref="1377997"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4723">
            <name>Complement&amp;&amp;</name>
            <content>
                <baseType ref="1383462"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3048">
            <name>CompoundStatement*</name>
            <content>
                <baseType ref="1383548"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383549">
            <name>CompoundStatement*</name>
            <content>
                <baseType ref="1383548"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385639">
            <name>ConnectorPunctuationParser</name>
        </type>
        <type derived="true" id="type.1387891">
            <name>ConnectorPunctuationParser&amp;</name>
            <content>
                <baseType ref="1385639"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385640">
            <name>ConnectorPunctuationParser*</name>
            <content>
                <baseType ref="1385639"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4788">
            <name>Const&amp;&amp;</name>
            <content>
                <baseType ref="1383598"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4741">
            <name>Construct&amp;&amp;</name>
            <content>
                <baseType ref="1383526"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="1385767">
            <name>Context</name>
        </type>
        <type id="1385727">
            <name>Context</name>
        </type>
        <type id="1385783">
            <name>Context</name>
        </type>
        <type id="1385775">
            <name>Context</name>
        </type>
        <type id="1385811">
            <name>Context</name>
        </type>
        <type id="1385763">
            <name>Context</name>
        </type>
        <type id="1385823">
            <name>Context</name>
        </type>
        <type id="1385743">
            <name>Context</name>
        </type>
        <type id="1385739">
            <name>Context</name>
        </type>
        <type id="1385731">
            <name>Context</name>
        </type>
        <type id="1385771">
            <name>Context</name>
        </type>
        <type id="1385803">
            <name>Context</name>
        </type>
        <type id="1385751">
            <name>Context</name>
        </type>
        <type id="1385759">
            <name>Context</name>
        </type>
        <type id="1385791">
            <name>Context</name>
        </type>
        <type id="1385747">
            <name>Context</name>
        </type>
        <type id="1385815">
            <name>Context</name>
        </type>
        <type id="1385787">
            <name>Context</name>
        </type>
        <type id="1385795">
            <name>Context</name>
        </type>
        <type id="1385819">
            <name>Context</name>
        </type>
        <type id="1385755">
            <name>Context</name>
        </type>
        <type id="1385799">
            <name>Context</name>
        </type>
        <type id="1385779">
            <name>Context</name>
        </type>
        <type id="1385807">
            <name>Context</name>
        </type>
        <type id="1385735">
            <name>Context</name>
        </type>
        <type id="1385564">
            <name>Context</name>
        </type>
        <type derived="true" id="type.1387948">
            <name>Context&amp;</name>
            <content>
                <baseType ref="1385564"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385824">
            <name>Context*</name>
            <content>
                <baseType ref="1385823"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385752">
            <name>Context*</name>
            <content>
                <baseType ref="1385751"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385780">
            <name>Context*</name>
            <content>
                <baseType ref="1385779"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385784">
            <name>Context*</name>
            <content>
                <baseType ref="1385783"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385788">
            <name>Context*</name>
            <content>
                <baseType ref="1385787"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385776">
            <name>Context*</name>
            <content>
                <baseType ref="1385775"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385732">
            <name>Context*</name>
            <content>
                <baseType ref="1385731"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385764">
            <name>Context*</name>
            <content>
                <baseType ref="1385763"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385816">
            <name>Context*</name>
            <content>
                <baseType ref="1385815"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385792">
            <name>Context*</name>
            <content>
                <baseType ref="1385791"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385768">
            <name>Context*</name>
            <content>
                <baseType ref="1385767"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385796">
            <name>Context*</name>
            <content>
                <baseType ref="1385795"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385824">
            <name>Context*</name>
            <content>
                <baseType ref="1385823"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385760">
            <name>Context*</name>
            <content>
                <baseType ref="1385759"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385812">
            <name>Context*</name>
            <content>
                <baseType ref="1385811"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385808">
            <name>Context*</name>
            <content>
                <baseType ref="1385807"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385804">
            <name>Context*</name>
            <content>
                <baseType ref="1385803"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385800">
            <name>Context*</name>
            <content>
                <baseType ref="1385799"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385728">
            <name>Context*</name>
            <content>
                <baseType ref="1385727"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385820">
            <name>Context*</name>
            <content>
                <baseType ref="1385819"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385772">
            <name>Context*</name>
            <content>
                <baseType ref="1385771"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385736">
            <name>Context*</name>
            <content>
                <baseType ref="1385735"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385740">
            <name>Context*</name>
            <content>
                <baseType ref="1385739"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385756">
            <name>Context*</name>
            <content>
                <baseType ref="1385755"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385744">
            <name>Context*</name>
            <content>
                <baseType ref="1385743"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385565">
            <name>Context*</name>
            <content>
                <baseType ref="1385564"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385748">
            <name>Context*</name>
            <content>
                <baseType ref="1385747"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388617">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="1385564"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388616">
            <name>Context*&amp;&amp;</name>
            <content>
                <baseType ref="1385564"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="1385566">
            <name>ContextStack</name>
        </type>
        <type derived="true" id="type.1388624">
            <name>ContextStack&amp;</name>
            <content>
                <baseType ref="1385566"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388623">
            <name>ContextStack&amp;&amp;</name>
            <content>
                <baseType ref="1385566"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385567">
            <name>ContextStack*</name>
            <content>
                <baseType ref="1385566"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385673">
            <name>ControlParser</name>
        </type>
        <type derived="true" id="type.1387908">
            <name>ControlParser&amp;</name>
            <content>
                <baseType ref="1385673"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385674">
            <name>ControlParser*</name>
            <content>
                <baseType ref="1385673"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385657">
            <name>CurrencySymbolParser</name>
        </type>
        <type derived="true" id="type.1387900">
            <name>CurrencySymbolParser&amp;</name>
            <content>
                <baseType ref="1385657"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385658">
            <name>CurrencySymbolParser*</name>
            <content>
                <baseType ref="1385657"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385641">
            <name>DashPunctuationParser</name>
        </type>
        <type derived="true" id="type.1387892">
            <name>DashPunctuationParser&amp;</name>
            <content>
                <baseType ref="1385641"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385642">
            <name>DashPunctuationParser*</name>
            <content>
                <baseType ref="1385641"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385631">
            <name>DecimalNumberParser</name>
        </type>
        <type derived="true" id="type.1387887">
            <name>DecimalNumberParser&amp;</name>
            <content>
                <baseType ref="1385631"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385632">
            <name>DecimalNumberParser*</name>
            <content>
                <baseType ref="1385631"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4764">
            <name>DeleteStatement&amp;&amp;</name>
            <content>
                <baseType ref="1383568"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4705">
            <name>Deref&amp;&amp;</name>
            <content>
                <baseType ref="1383450"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4767">
            <name>DestroyStatement&amp;&amp;</name>
            <content>
                <baseType ref="1383570"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="1385504">
            <name>DifferenceParser</name>
        </type>
        <type derived="true" id="type.1387863">
            <name>DifferenceParser&amp;</name>
            <content>
                <baseType ref="1385504"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385505">
            <name>DifferenceParser*</name>
            <content>
                <baseType ref="1385504"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385617">
            <name>DigitParser</name>
        </type>
        <type derived="true" id="type.1387880">
            <name>DigitParser&amp;</name>
            <content>
                <baseType ref="1385617"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385618">
            <name>DigitParser*</name>
            <content>
                <baseType ref="1385617"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1378994" specialization="true">
            <name>Divides&lt;T></name>
            <content>
                <primaryType ref="1378994"/>
                <argumentType ref="1378192"/>
            </content>
        </type>
        <type derived="true" id="type.4699">
            <name>DomObject&amp;&amp;</name>
            <content>
                <baseType ref="1383437"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3047">
            <name>DomObject*</name>
            <content>
                <baseType ref="1383437"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385599">
            <name>EmptyParser</name>
        </type>
        <type derived="true" id="type.1387871">
            <name>EmptyParser&amp;</name>
            <content>
                <baseType ref="1385599"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385600">
            <name>EmptyParser*</name>
            <content>
                <baseType ref="1385599"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385627">
            <name>EnclosingMarkParser</name>
        </type>
        <type derived="true" id="type.1387885">
            <name>EnclosingMarkParser&amp;</name>
            <content>
                <baseType ref="1385627"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385628">
            <name>EnclosingMarkParser*</name>
            <content>
                <baseType ref="1385627"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1387697" specialization="true">
            <name>EqualTo&lt;Grammar*></name>
            <content>
                <primaryType ref="1379029"/>
                <argumentType ref="type.1385523"/>
            </content>
        </type>
        <type derived="true" id="type.1388495">
            <name>EqualTo&lt;Grammar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1387697"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387706">
            <name>EqualTo&lt;Grammar*>*</name>
            <content>
                <baseType ref="type.1387697"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1380704" specialization="true">
            <name>EqualTo&lt;String&lt;char>></name>
            <content>
                <primaryType ref="1379029"/>
                <argumentType ref="type.1378573"/>
            </content>
        </type>
        <type id="type.1387520" specialization="true">
            <name>EqualTo&lt;String&lt;uchar>></name>
            <content>
                <primaryType ref="1379029"/>
                <argumentType ref="type.1378697"/>
            </content>
        </type>
        <type derived="true" id="type.1388402">
            <name>EqualTo&lt;String&lt;uchar>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1387520"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387529">
            <name>EqualTo&lt;String&lt;uchar>>*</name>
            <content>
                <baseType ref="type.1387520"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1381177" specialization="true">
            <name>EqualTo&lt;System.Unicode.AgeId></name>
            <content>
                <primaryType ref="1379029"/>
                <argumentType ref="1378442"/>
            </content>
        </type>
        <type id="type.1382073" specialization="true">
            <name>EqualTo&lt;System.Unicode.AliasTypeId></name>
            <content>
                <primaryType ref="1379029"/>
                <argumentType ref="1378491"/>
            </content>
        </type>
        <type id="type.1381715" specialization="true">
            <name>EqualTo&lt;System.Unicode.BidiClassId></name>
            <content>
                <primaryType ref="1379029"/>
                <argumentType ref="1378473"/>
            </content>
        </type>
        <type id="type.1381894" specialization="true">
            <name>EqualTo&lt;System.Unicode.BidiPairedBracketTypeId></name>
            <content>
                <primaryType ref="1379029"/>
                <argumentType ref="1378482"/>
            </content>
        </type>
        <type id="type.1380623" specialization="true">
            <name>EqualTo&lt;System.Unicode.BinaryPropertyId></name>
            <content>
                <primaryType ref="1379029"/>
                <argumentType ref="1378421"/>
            </content>
        </type>
        <type id="type.1380817" specialization="true">
            <name>EqualTo&lt;System.Unicode.BlockId></name>
            <content>
                <primaryType ref="1379029"/>
                <argumentType ref="1378428"/>
            </content>
        </type>
        <type id="type.1380998" specialization="true">
            <name>EqualTo&lt;System.Unicode.GeneralCategoryId></name>
            <content>
                <primaryType ref="1379029"/>
                <argumentType ref="1378435"/>
            </content>
        </type>
        <type id="type.1381536" specialization="true">
            <name>EqualTo&lt;System.Unicode.NumericTypeId></name>
            <content>
                <primaryType ref="1379029"/>
                <argumentType ref="1378464"/>
            </content>
        </type>
        <type id="type.1381356" specialization="true">
            <name>EqualTo&lt;System.Unicode.ScriptId></name>
            <content>
                <primaryType ref="1379029"/>
                <argumentType ref="1378451"/>
            </content>
        </type>
        <type id="type.1379040" specialization="true">
            <name>EqualTo&lt;T, U></name>
            <content>
                <primaryType ref="1379040"/>
                <argumentType ref="1378207"/>
                <argumentType ref="1378208"/>
            </content>
        </type>
        <type id="type.1379029" specialization="true">
            <name>EqualTo&lt;T></name>
            <content>
                <primaryType ref="1379029"/>
                <argumentType ref="1378205"/>
            </content>
        </type>
        <type id="type.1379029" specialization="true">
            <name>EqualTo&lt;T></name>
            <content>
                <primaryType ref="1379029"/>
                <argumentType ref="1378205"/>
            </content>
        </type>
        <type id="1385506">
            <name>ExclusiveOrParser</name>
        </type>
        <type derived="true" id="type.1387864">
            <name>ExclusiveOrParser&amp;</name>
            <content>
                <baseType ref="1385506"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385507">
            <name>ExclusiveOrParser*</name>
            <content>
                <baseType ref="1385506"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385540">
            <name>ExpandCodeVisitor</name>
        </type>
        <type derived="true" id="type.1385541">
            <name>ExpandCodeVisitor*</name>
            <content>
                <baseType ref="1385540"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385514">
            <name>ExpectationFailure</name>
        </type>
        <type derived="true" id="type.1388462">
            <name>ExpectationFailure&amp;&amp;</name>
            <content>
                <baseType ref="1385514"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385515">
            <name>ExpectationFailure*</name>
            <content>
                <baseType ref="1385514"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385492">
            <name>ExpectationParser</name>
        </type>
        <type derived="true" id="type.1387858">
            <name>ExpectationParser&amp;</name>
            <content>
                <baseType ref="1385492"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4812">
            <name>ExpectationParser&amp;&amp;</name>
            <content>
                <baseType ref="1385492"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385493">
            <name>ExpectationParser*</name>
            <content>
                <baseType ref="1385492"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4770">
            <name>ExpressionStatement&amp;&amp;</name>
            <content>
                <baseType ref="1383574"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="1385475">
            <name>FailureAction</name>
        </type>
        <type derived="true" id="type.1387448">
            <name>FailureAction&amp;&amp;</name>
            <content>
                <baseType ref="1385475"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387445">
            <name>FailureAction*</name>
            <content>
                <baseType ref="1385475"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385512">
            <name>FileInfo</name>
        </type>
        <type derived="true" id="type.1387614">
            <name>FileInfo&amp;</name>
            <content>
                <baseType ref="1385512"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385513">
            <name>FileInfo*</name>
            <content>
                <baseType ref="1385512"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385649">
            <name>FinalPunctuationParser</name>
        </type>
        <type derived="true" id="type.1387896">
            <name>FinalPunctuationParser&amp;</name>
            <content>
                <baseType ref="1385649"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385650">
            <name>FinalPunctuationParser*</name>
            <content>
                <baseType ref="1385649"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385675">
            <name>FormatParser</name>
        </type>
        <type derived="true" id="type.1387909">
            <name>FormatParser&amp;</name>
            <content>
                <baseType ref="1385675"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385676">
            <name>FormatParser*</name>
            <content>
                <baseType ref="1385675"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1378892" specialization="true">
            <name>ForwardList&lt;T></name>
            <content>
                <primaryType ref="1378864"/>
                <argumentType ref="1378172"/>
            </content>
        </type>
        <type id="type.1378920" specialization="true">
            <name>ForwardList&lt;T></name>
            <content>
                <primaryType ref="1378864"/>
                <argumentType ref="1378173"/>
            </content>
        </type>
        <type id="type.1378864" specialization="true">
            <name>ForwardList&lt;T></name>
            <content>
                <primaryType ref="1378864"/>
                <argumentType ref="1378171"/>
            </content>
        </type>
        <type derived="true" id="type.3146">
            <name>ForwardList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.1378864"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3120">
            <name>ForwardList&lt;T>*</name>
            <content>
                <baseType ref="type.1378864"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1378902" specialization="true">
            <name>ForwardListNode&lt;T></name>
            <content>
                <primaryType ref="1378832"/>
                <argumentType ref="1378172"/>
            </content>
        </type>
        <type id="type.1378855" specialization="true">
            <name>ForwardListNode&lt;T></name>
            <content>
                <primaryType ref="1378832"/>
                <argumentType ref="1378167"/>
            </content>
        </type>
        <type id="type.1378930" specialization="true">
            <name>ForwardListNode&lt;T></name>
            <content>
                <primaryType ref="1378832"/>
                <argumentType ref="1378173"/>
            </content>
        </type>
        <type id="type.3108" specialization="true">
            <name>ForwardListNode&lt;T></name>
            <content>
                <primaryType ref="1378832"/>
                <argumentType ref="1378164"/>
            </content>
        </type>
        <type id="type.3129" specialization="true">
            <name>ForwardListNode&lt;T></name>
            <content>
                <primaryType ref="1378832"/>
                <argumentType ref="1378171"/>
            </content>
        </type>
        <type id="type.1378832" specialization="true">
            <name>ForwardListNode&lt;T></name>
            <content>
                <primaryType ref="1378832"/>
                <argumentType ref="1378162"/>
            </content>
        </type>
        <type derived="true" id="type.3100">
            <name>ForwardListNode&lt;T>*</name>
            <content>
                <baseType ref="type.1378832"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3109">
            <name>ForwardListNode&lt;T>*</name>
            <content>
                <baseType ref="type.3108"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3130">
            <name>ForwardListNode&lt;T>*</name>
            <content>
                <baseType ref="type.3129"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1378838" specialization="true">
            <name>ForwardListNodeIterator&lt;T, R, P></name>
            <content>
                <primaryType ref="1378838"/>
                <argumentType ref="1378164"/>
                <argumentType ref="1378165"/>
                <argumentType ref="1378166"/>
            </content>
        </type>
        <type id="type.1378851" specialization="true">
            <name>ForwardListNodeIterator&lt;T, R, P></name>
            <content>
                <primaryType ref="1378838"/>
                <argumentType ref="1378167"/>
                <argumentType ref="1378168"/>
                <argumentType ref="1378169"/>
            </content>
        </type>
        <type id="type.1378851" specialization="true">
            <name>ForwardListNodeIterator&lt;T, R, P></name>
            <content>
                <primaryType ref="1378838"/>
                <argumentType ref="1378167"/>
                <argumentType ref="1378168"/>
                <argumentType ref="1378169"/>
            </content>
        </type>
        <type derived="true" id="type.3116">
            <name>ForwardListNodeIterator&lt;T, R, P>&amp;</name>
            <content>
                <baseType ref="type.1378838"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3119">
            <name>ForwardListNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.1378851"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3115">
            <name>ForwardListNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.1378838"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3105">
            <name>ForwardListNodeIterator&lt;T, R, P>*</name>
            <content>
                <baseType ref="type.1378838"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1378939" specialization="true">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="1378838"/>
                <argumentType ref="1378173"/>
                <argumentType ref="type.1378934"/>
                <argumentType ref="type.1378938"/>
            </content>
        </type>
        <type id="type.1378911" specialization="true">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="1378838"/>
                <argumentType ref="1378172"/>
                <argumentType ref="type.1378906"/>
                <argumentType ref="type.1378910"/>
            </content>
        </type>
        <type id="type.3138" specialization="true">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="1378838"/>
                <argumentType ref="1378171"/>
                <argumentType ref="type.3133"/>
                <argumentType ref="type.3137"/>
            </content>
        </type>
        <type derived="true" id="type.3144">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <baseType ref="type.3138"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3154">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1378911"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3162">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1378939"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3143">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.3138"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3139">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>*</name>
            <content>
                <baseType ref="type.3138"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.3125" specialization="true">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="1378838"/>
                <argumentType ref="1378171"/>
                <argumentType ref="type.3123"/>
                <argumentType ref="type.3124"/>
            </content>
        </type>
        <type id="type.1378926" specialization="true">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="1378838"/>
                <argumentType ref="1378173"/>
                <argumentType ref="type.1378924"/>
                <argumentType ref="type.1378925"/>
            </content>
        </type>
        <type id="type.1378898" specialization="true">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="1378838"/>
                <argumentType ref="1378172"/>
                <argumentType ref="type.1378896"/>
                <argumentType ref="type.1378897"/>
            </content>
        </type>
        <type id="type.1378926" specialization="true">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="1378838"/>
                <argumentType ref="1378173"/>
                <argumentType ref="type.1378924"/>
                <argumentType ref="type.1378925"/>
            </content>
        </type>
        <type derived="true" id="type.3136">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <baseType ref="type.3125"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3135">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.3125"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3151">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1378898"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3159">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1378926"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3126">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>*</name>
            <content>
                <baseType ref="type.3125"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4776">
            <name>GotoCaseStatement&amp;&amp;</name>
            <content>
                <baseType ref="1383586"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4761">
            <name>GotoStatement&amp;&amp;</name>
            <content>
                <baseType ref="1383564"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="1385522">
            <name>Grammar</name>
        </type>
        <type derived="true" id="type.1387851">
            <name>Grammar&amp;</name>
            <content>
                <baseType ref="1385522"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385523">
            <name>Grammar*</name>
            <content>
                <baseType ref="1385522"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387721">
            <name>Grammar*&amp;</name>
            <content>
                <baseType ref="1385522"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388007">
            <name>Grammar*&amp;&amp;</name>
            <content>
                <baseType ref="1385522"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387722">
            <name>Grammar**</name>
            <content>
                <baseType ref="1385522"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385683">
            <name>GraphicParser</name>
        </type>
        <type derived="true" id="type.1387913">
            <name>GraphicParser&amp;</name>
            <content>
                <baseType ref="1385683"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385684">
            <name>GraphicParser*</name>
            <content>
                <baseType ref="1385683"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1379103" specialization="true">
            <name>Greater&lt;T, U></name>
            <content>
                <primaryType ref="1379103"/>
                <argumentType ref="1378222"/>
                <argumentType ref="1378223"/>
            </content>
        </type>
        <type id="type.1379092" specialization="true">
            <name>Greater&lt;T></name>
            <content>
                <primaryType ref="1379092"/>
                <argumentType ref="1378220"/>
            </content>
        </type>
        <type id="type.1379145" specialization="true">
            <name>GreaterOrEqualTo&lt;T, U></name>
            <content>
                <primaryType ref="1379145"/>
                <argumentType ref="1378232"/>
                <argumentType ref="1378233"/>
            </content>
        </type>
        <type id="type.1379134" specialization="true">
            <name>GreaterOrEqualTo&lt;T></name>
            <content>
                <primaryType ref="1379134"/>
                <argumentType ref="1378230"/>
            </content>
        </type>
        <type derived="true" id="type.3525">
            <name>H*</name>
            <content>
                <baseType ref="1378277"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1379217" specialization="true">
            <name>HashMap&lt;K, T, H, C></name>
            <content>
                <primaryType ref="1379217"/>
                <argumentType ref="1378253"/>
                <argumentType ref="1378254"/>
                <argumentType ref="1378255"/>
                <argumentType ref="1378256"/>
            </content>
        </type>
        <type id="type.1379287" specialization="true">
            <name>HashMap&lt;K, T, H, C></name>
            <content>
                <primaryType ref="1379217"/>
                <argumentType ref="1378257"/>
                <argumentType ref="1378258"/>
                <argumentType ref="1378259"/>
                <argumentType ref="1378260"/>
            </content>
        </type>
        <type derived="true" id="type.3354">
            <name>HashMap&lt;K, T, H, C>*</name>
            <content>
                <baseType ref="type.1379217"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1381254" specialization="true">
            <name>HashMap&lt;String&lt;char>, Age*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="1379217"/>
                <argumentType ref="type.1378573"/>
                <argumentType ref="type.1378444"/>
                <argumentType ref="type.1380700"/>
                <argumentType ref="type.1380704"/>
            </content>
        </type>
        <type id="type.1382150" specialization="true">
            <name>HashMap&lt;String&lt;char>, AliasType*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="1379217"/>
                <argumentType ref="type.1378573"/>
                <argumentType ref="type.1378493"/>
                <argumentType ref="type.1380700"/>
                <argumentType ref="type.1380704"/>
            </content>
        </type>
        <type id="type.1381792" specialization="true">
            <name>HashMap&lt;String&lt;char>, BidiClass*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="1379217"/>
                <argumentType ref="type.1378573"/>
                <argumentType ref="type.1378475"/>
                <argumentType ref="type.1380700"/>
                <argumentType ref="type.1380704"/>
            </content>
        </type>
        <type id="type.1381971" specialization="true">
            <name>HashMap&lt;String&lt;char>, BidiPairedBracketType*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="1379217"/>
                <argumentType ref="type.1378573"/>
                <argumentType ref="type.1378484"/>
                <argumentType ref="type.1380700"/>
                <argumentType ref="type.1380704"/>
            </content>
        </type>
        <type id="type.1380714" specialization="true">
            <name>HashMap&lt;String&lt;char>, BinaryProperty*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="1379217"/>
                <argumentType ref="type.1378573"/>
                <argumentType ref="type.1378423"/>
                <argumentType ref="type.1380700"/>
                <argumentType ref="type.1380704"/>
            </content>
        </type>
        <type id="type.1380894" specialization="true">
            <name>HashMap&lt;String&lt;char>, Block*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="1379217"/>
                <argumentType ref="type.1378573"/>
                <argumentType ref="type.1378430"/>
                <argumentType ref="type.1380700"/>
                <argumentType ref="type.1380704"/>
            </content>
        </type>
        <type id="type.1381075" specialization="true">
            <name>HashMap&lt;String&lt;char>, GeneralCategory*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="1379217"/>
                <argumentType ref="type.1378573"/>
                <argumentType ref="type.1378437"/>
                <argumentType ref="type.1380700"/>
                <argumentType ref="type.1380704"/>
            </content>
        </type>
        <type id="type.1381613" specialization="true">
            <name>HashMap&lt;String&lt;char>, NumericType*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="1379217"/>
                <argumentType ref="type.1378573"/>
                <argumentType ref="type.1378466"/>
                <argumentType ref="type.1380700"/>
                <argumentType ref="type.1380704"/>
            </content>
        </type>
        <type id="type.1381433" specialization="true">
            <name>HashMap&lt;String&lt;char>, Script*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="1379217"/>
                <argumentType ref="type.1378573"/>
                <argumentType ref="type.1378453"/>
                <argumentType ref="type.1380700"/>
                <argumentType ref="type.1380704"/>
            </content>
        </type>
        <type id="type.1388001" specialization="true">
            <name>HashMap&lt;String&lt;uchar>, Grammar*, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>></name>
            <content>
                <primaryType ref="1379217"/>
                <argumentType ref="type.1378697"/>
                <argumentType ref="type.1385523"/>
                <argumentType ref="type.1387516"/>
                <argumentType ref="type.1387520"/>
            </content>
        </type>
        <type derived="true" id="type.1388002">
            <name>HashMap&lt;String&lt;uchar>, Grammar*, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*</name>
            <content>
                <baseType ref="type.1388001"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1388066" specialization="true">
            <name>HashMap&lt;String&lt;uchar>, Namespace*, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>></name>
            <content>
                <primaryType ref="1379217"/>
                <argumentType ref="type.1378697"/>
                <argumentType ref="type.1385547"/>
                <argumentType ref="type.1387516"/>
                <argumentType ref="type.1387520"/>
            </content>
        </type>
        <type derived="true" id="type.1388067">
            <name>HashMap&lt;String&lt;uchar>, Namespace*, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*</name>
            <content>
                <baseType ref="type.1388066"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1388301" specialization="true">
            <name>HashMap&lt;String&lt;uchar>, ParsingObject*, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>></name>
            <content>
                <primaryType ref="1379217"/>
                <argumentType ref="type.1378697"/>
                <argumentType ref="type.1385580"/>
                <argumentType ref="type.1387516"/>
                <argumentType ref="type.1387520"/>
            </content>
        </type>
        <type derived="true" id="type.1388302">
            <name>HashMap&lt;String&lt;uchar>, ParsingObject*, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*</name>
            <content>
                <baseType ref="type.1388301"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1387530" specialization="true">
            <name>HashMap&lt;String&lt;uchar>, String&lt;uchar>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>></name>
            <content>
                <primaryType ref="1379217"/>
                <argumentType ref="type.1378697"/>
                <argumentType ref="type.1378697"/>
                <argumentType ref="type.1387516"/>
                <argumentType ref="type.1387520"/>
            </content>
        </type>
        <type derived="true" id="type.1387594">
            <name>HashMap&lt;String&lt;uchar>, String&lt;uchar>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <baseType ref="type.1387530"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387531">
            <name>HashMap&lt;String&lt;uchar>, String&lt;uchar>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*</name>
            <content>
                <baseType ref="type.1387530"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1381187" specialization="true">
            <name>HashMap&lt;System.Unicode.AgeId, Age*, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>></name>
            <content>
                <primaryType ref="1379217"/>
                <argumentType ref="1378442"/>
                <argumentType ref="type.1378444"/>
                <argumentType ref="type.1381172"/>
                <argumentType ref="type.1381177"/>
            </content>
        </type>
        <type id="type.1382083" specialization="true">
            <name>HashMap&lt;System.Unicode.AliasTypeId, AliasType*, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>></name>
            <content>
                <primaryType ref="1379217"/>
                <argumentType ref="1378491"/>
                <argumentType ref="type.1378493"/>
                <argumentType ref="type.1382068"/>
                <argumentType ref="type.1382073"/>
            </content>
        </type>
        <type id="type.1381725" specialization="true">
            <name>HashMap&lt;System.Unicode.BidiClassId, BidiClass*, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>></name>
            <content>
                <primaryType ref="1379217"/>
                <argumentType ref="1378473"/>
                <argumentType ref="type.1378475"/>
                <argumentType ref="type.1381710"/>
                <argumentType ref="type.1381715"/>
            </content>
        </type>
        <type id="type.1381904" specialization="true">
            <name>HashMap&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>></name>
            <content>
                <primaryType ref="1379217"/>
                <argumentType ref="1378482"/>
                <argumentType ref="type.1378484"/>
                <argumentType ref="type.1381889"/>
                <argumentType ref="type.1381894"/>
            </content>
        </type>
        <type id="type.1380633" specialization="true">
            <name>HashMap&lt;System.Unicode.BinaryPropertyId, BinaryProperty*, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>></name>
            <content>
                <primaryType ref="1379217"/>
                <argumentType ref="1378421"/>
                <argumentType ref="type.1378423"/>
                <argumentType ref="type.1380618"/>
                <argumentType ref="type.1380623"/>
            </content>
        </type>
        <type id="type.1380827" specialization="true">
            <name>HashMap&lt;System.Unicode.BlockId, Block*, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>></name>
            <content>
                <primaryType ref="1379217"/>
                <argumentType ref="1378428"/>
                <argumentType ref="type.1378430"/>
                <argumentType ref="type.1380812"/>
                <argumentType ref="type.1380817"/>
            </content>
        </type>
        <type id="type.1381008" specialization="true">
            <name>HashMap&lt;System.Unicode.GeneralCategoryId, GeneralCategory*, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>></name>
            <content>
                <primaryType ref="1379217"/>
                <argumentType ref="1378435"/>
                <argumentType ref="type.1378437"/>
                <argumentType ref="type.1380993"/>
                <argumentType ref="type.1380998"/>
            </content>
        </type>
        <type id="type.1381546" specialization="true">
            <name>HashMap&lt;System.Unicode.NumericTypeId, NumericType*, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>></name>
            <content>
                <primaryType ref="1379217"/>
                <argumentType ref="1378464"/>
                <argumentType ref="type.1378466"/>
                <argumentType ref="type.1381531"/>
                <argumentType ref="type.1381536"/>
            </content>
        </type>
        <type id="type.1381366" specialization="true">
            <name>HashMap&lt;System.Unicode.ScriptId, Script*, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>></name>
            <content>
                <primaryType ref="1379217"/>
                <argumentType ref="1378451"/>
                <argumentType ref="type.1378453"/>
                <argumentType ref="type.1381351"/>
                <argumentType ref="type.1381356"/>
            </content>
        </type>
        <type id="type.1387707" specialization="true">
            <name>HashSet&lt;Grammar*, Hasher&lt;Grammar*>, EqualTo&lt;Grammar*>></name>
            <content>
                <primaryType ref="1379357"/>
                <argumentType ref="type.1385523"/>
                <argumentType ref="type.1387692"/>
                <argumentType ref="type.1387697"/>
            </content>
        </type>
        <type derived="true" id="type.1387708">
            <name>HashSet&lt;Grammar*, Hasher&lt;Grammar*>, EqualTo&lt;Grammar*>>*</name>
            <content>
                <baseType ref="type.1387707"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1387790" specialization="true">
            <name>HashSet&lt;String&lt;uchar>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>></name>
            <content>
                <primaryType ref="1379357"/>
                <argumentType ref="type.1378697"/>
                <argumentType ref="type.1387516"/>
                <argumentType ref="type.1387520"/>
            </content>
        </type>
        <type derived="true" id="type.1387791">
            <name>HashSet&lt;String&lt;uchar>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*</name>
            <content>
                <baseType ref="type.1387790"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1379420" specialization="true">
            <name>HashSet&lt;T, H, C></name>
            <content>
                <primaryType ref="1379357"/>
                <argumentType ref="1378265"/>
                <argumentType ref="1378266"/>
                <argumentType ref="1378267"/>
            </content>
        </type>
        <type id="type.1379357" specialization="true">
            <name>HashSet&lt;T, H, C></name>
            <content>
                <primaryType ref="1379357"/>
                <argumentType ref="1378262"/>
                <argumentType ref="1378263"/>
                <argumentType ref="1378264"/>
            </content>
        </type>
        <type id="type.1379357" specialization="true">
            <name>HashSet&lt;T, H, C></name>
            <content>
                <primaryType ref="1379357"/>
                <argumentType ref="1378262"/>
                <argumentType ref="1378263"/>
                <argumentType ref="1378264"/>
            </content>
        </type>
        <type derived="true" id="type.3435">
            <name>HashSet&lt;T, H, C>*</name>
            <content>
                <baseType ref="type.1379357"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1387692" specialization="true">
            <name>Hasher&lt;Grammar*></name>
            <content>
                <primaryType ref="1379506"/>
                <argumentType ref="type.1385523"/>
            </content>
        </type>
        <type derived="true" id="type.1388489">
            <name>Hasher&lt;Grammar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1387692"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387693">
            <name>Hasher&lt;Grammar*>*</name>
            <content>
                <baseType ref="type.1387692"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1387516" specialization="true">
            <name>Hasher&lt;String&lt;uchar>></name>
            <content>
                <primaryType ref="1379506"/>
                <argumentType ref="type.1378697"/>
            </content>
        </type>
        <type derived="true" id="type.1388396">
            <name>Hasher&lt;String&lt;uchar>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1387516"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387517">
            <name>Hasher&lt;String&lt;uchar>>*</name>
            <content>
                <baseType ref="type.1387516"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1379506" specialization="true">
            <name>Hasher&lt;T></name>
            <content>
                <primaryType ref="1379506"/>
                <argumentType ref="1378270"/>
            </content>
        </type>
        <type id="type.1379506" specialization="true">
            <name>Hasher&lt;T></name>
            <content>
                <primaryType ref="1379506"/>
                <argumentType ref="1378270"/>
            </content>
        </type>
        <type derived="true" id="type.3513">
            <name>Hasher&lt;T>*</name>
            <content>
                <baseType ref="type.1379506"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1387717" specialization="true">
            <name>Hashtable&lt;Grammar*, Grammar*, Identity&lt;Grammar*>, Hasher&lt;Grammar*>, EqualTo&lt;Grammar*>></name>
            <content>
                <primaryType ref="1379542"/>
                <argumentType ref="type.1385523"/>
                <argumentType ref="type.1385523"/>
                <argumentType ref="type.1387711"/>
                <argumentType ref="type.1387692"/>
                <argumentType ref="type.1387697"/>
            </content>
        </type>
        <type derived="true" id="type.1387739">
            <name>Hashtable&lt;Grammar*, Grammar*, Identity&lt;Grammar*>, Hasher&lt;Grammar*>, EqualTo&lt;Grammar*>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1387717"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387718">
            <name>Hashtable&lt;Grammar*, Grammar*, Identity&lt;Grammar*>, Hasher&lt;Grammar*>, EqualTo&lt;Grammar*>>*</name>
            <content>
                <baseType ref="type.1387717"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388514">
            <name>Hashtable&lt;Grammar*, Grammar*, Identity&lt;Grammar*>, Hasher&lt;Grammar*>, EqualTo&lt;Grammar*>>*&amp;</name>
            <content>
                <baseType ref="type.1387717"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388513">
            <name>Hashtable&lt;Grammar*, Grammar*, Identity&lt;Grammar*>, Hasher&lt;Grammar*>, EqualTo&lt;Grammar*>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.1387717"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1379304" specialization="true">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C></name>
            <content>
                <primaryType ref="1379542"/>
                <argumentType ref="1378257"/>
                <argumentType ref="type.1379291"/>
                <argumentType ref="type.1379297"/>
                <argumentType ref="1378259"/>
                <argumentType ref="1378260"/>
            </content>
        </type>
        <type id="type.3370" specialization="true">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C></name>
            <content>
                <primaryType ref="1379542"/>
                <argumentType ref="1378253"/>
                <argumentType ref="type.3357"/>
                <argumentType ref="type.3363"/>
                <argumentType ref="1378255"/>
                <argumentType ref="1378256"/>
            </content>
        </type>
        <type derived="true" id="type.3391">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.3370"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3371">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>*</name>
            <content>
                <baseType ref="type.3370"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1379542" specialization="true">
            <name>Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare></name>
            <content>
                <primaryType ref="1379542"/>
                <argumentType ref="1378283"/>
                <argumentType ref="1378284"/>
                <argumentType ref="1378285"/>
                <argumentType ref="1378286"/>
                <argumentType ref="1378287"/>
            </content>
        </type>
        <type derived="true" id="type.3557">
            <name>Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>&amp;&amp;</name>
            <content>
                <baseType ref="type.1379542"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3535">
            <name>Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>*</name>
            <content>
                <baseType ref="type.1379542"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1381267" specialization="true">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Age*>, SelectFirst&lt;String&lt;char>, Age*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="1379542"/>
                <argumentType ref="type.1378573"/>
                <argumentType ref="type.1381258"/>
                <argumentType ref="type.1381260"/>
                <argumentType ref="type.1380700"/>
                <argumentType ref="type.1380704"/>
            </content>
        </type>
        <type id="type.1382163" specialization="true">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, AliasType*>, SelectFirst&lt;String&lt;char>, AliasType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="1379542"/>
                <argumentType ref="type.1378573"/>
                <argumentType ref="type.1382154"/>
                <argumentType ref="type.1382156"/>
                <argumentType ref="type.1380700"/>
                <argumentType ref="type.1380704"/>
            </content>
        </type>
        <type id="type.1381805" specialization="true">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiClass*>, SelectFirst&lt;String&lt;char>, BidiClass*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="1379542"/>
                <argumentType ref="type.1378573"/>
                <argumentType ref="type.1381796"/>
                <argumentType ref="type.1381798"/>
                <argumentType ref="type.1380700"/>
                <argumentType ref="type.1380704"/>
            </content>
        </type>
        <type id="type.1381984" specialization="true">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiPairedBracketType*>, SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="1379542"/>
                <argumentType ref="type.1378573"/>
                <argumentType ref="type.1381975"/>
                <argumentType ref="type.1381977"/>
                <argumentType ref="type.1380700"/>
                <argumentType ref="type.1380704"/>
            </content>
        </type>
        <type id="type.1380727" specialization="true">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BinaryProperty*>, SelectFirst&lt;String&lt;char>, BinaryProperty*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="1379542"/>
                <argumentType ref="type.1378573"/>
                <argumentType ref="type.1380718"/>
                <argumentType ref="type.1380720"/>
                <argumentType ref="type.1380700"/>
                <argumentType ref="type.1380704"/>
            </content>
        </type>
        <type id="type.1380907" specialization="true">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Block*>, SelectFirst&lt;String&lt;char>, Block*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="1379542"/>
                <argumentType ref="type.1378573"/>
                <argumentType ref="type.1380898"/>
                <argumentType ref="type.1380900"/>
                <argumentType ref="type.1380700"/>
                <argumentType ref="type.1380704"/>
            </content>
        </type>
        <type id="type.1381088" specialization="true">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, GeneralCategory*>, SelectFirst&lt;String&lt;char>, GeneralCategory*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="1379542"/>
                <argumentType ref="type.1378573"/>
                <argumentType ref="type.1381079"/>
                <argumentType ref="type.1381081"/>
                <argumentType ref="type.1380700"/>
                <argumentType ref="type.1380704"/>
            </content>
        </type>
        <type id="type.1381626" specialization="true">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, NumericType*>, SelectFirst&lt;String&lt;char>, NumericType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="1379542"/>
                <argumentType ref="type.1378573"/>
                <argumentType ref="type.1381617"/>
                <argumentType ref="type.1381619"/>
                <argumentType ref="type.1380700"/>
                <argumentType ref="type.1380704"/>
            </content>
        </type>
        <type id="type.1381446" specialization="true">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Script*>, SelectFirst&lt;String&lt;char>, Script*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="1379542"/>
                <argumentType ref="type.1378573"/>
                <argumentType ref="type.1381437"/>
                <argumentType ref="type.1381439"/>
                <argumentType ref="type.1380700"/>
                <argumentType ref="type.1380704"/>
            </content>
        </type>
        <type id="type.1388015" specialization="true">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Grammar*>, SelectFirst&lt;String&lt;uchar>, Grammar*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>></name>
            <content>
                <primaryType ref="1379542"/>
                <argumentType ref="type.1378697"/>
                <argumentType ref="type.1388005"/>
                <argumentType ref="type.1388008"/>
                <argumentType ref="type.1387516"/>
                <argumentType ref="type.1387520"/>
            </content>
        </type>
        <type derived="true" id="type.1388036">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Grammar*>, SelectFirst&lt;String&lt;uchar>, Grammar*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1388015"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388016">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Grammar*>, SelectFirst&lt;String&lt;uchar>, Grammar*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*</name>
            <content>
                <baseType ref="type.1388015"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388678">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Grammar*>, SelectFirst&lt;String&lt;uchar>, Grammar*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*&amp;</name>
            <content>
                <baseType ref="type.1388015"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388675">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Grammar*>, SelectFirst&lt;String&lt;uchar>, Grammar*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.1388015"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1388081" specialization="true">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Namespace*>, SelectFirst&lt;String&lt;uchar>, Namespace*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>></name>
            <content>
                <primaryType ref="1379542"/>
                <argumentType ref="type.1378697"/>
                <argumentType ref="type.1388070"/>
                <argumentType ref="type.1388074"/>
                <argumentType ref="type.1387516"/>
                <argumentType ref="type.1387520"/>
            </content>
        </type>
        <type derived="true" id="type.1388102">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Namespace*>, SelectFirst&lt;String&lt;uchar>, Namespace*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1388081"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388082">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Namespace*>, SelectFirst&lt;String&lt;uchar>, Namespace*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*</name>
            <content>
                <baseType ref="type.1388081"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388664">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Namespace*>, SelectFirst&lt;String&lt;uchar>, Namespace*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*&amp;</name>
            <content>
                <baseType ref="type.1388081"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388663">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Namespace*>, SelectFirst&lt;String&lt;uchar>, Namespace*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.1388081"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1388316" specialization="true">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, ParsingObject*>, SelectFirst&lt;String&lt;uchar>, ParsingObject*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>></name>
            <content>
                <primaryType ref="1379542"/>
                <argumentType ref="type.1378697"/>
                <argumentType ref="type.1388305"/>
                <argumentType ref="type.1388309"/>
                <argumentType ref="type.1387516"/>
                <argumentType ref="type.1387520"/>
            </content>
        </type>
        <type derived="true" id="type.1388337">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, ParsingObject*>, SelectFirst&lt;String&lt;uchar>, ParsingObject*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1388316"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388317">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, ParsingObject*>, SelectFirst&lt;String&lt;uchar>, ParsingObject*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*</name>
            <content>
                <baseType ref="type.1388316"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388758">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, ParsingObject*>, SelectFirst&lt;String&lt;uchar>, ParsingObject*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*&amp;</name>
            <content>
                <baseType ref="type.1388316"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388757">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, ParsingObject*>, SelectFirst&lt;String&lt;uchar>, ParsingObject*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.1388316"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1387543" specialization="true">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, String&lt;uchar>>, SelectFirst&lt;String&lt;uchar>, String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>></name>
            <content>
                <primaryType ref="1379542"/>
                <argumentType ref="type.1378697"/>
                <argumentType ref="type.1387534"/>
                <argumentType ref="type.1387536"/>
                <argumentType ref="type.1387516"/>
                <argumentType ref="type.1387520"/>
            </content>
        </type>
        <type derived="true" id="type.1387564">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, String&lt;uchar>>, SelectFirst&lt;String&lt;uchar>, String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1387543"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387544">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, String&lt;uchar>>, SelectFirst&lt;String&lt;uchar>, String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*</name>
            <content>
                <baseType ref="type.1387543"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388444">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, String&lt;uchar>>, SelectFirst&lt;String&lt;uchar>, String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*&amp;</name>
            <content>
                <baseType ref="type.1387543"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388441">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, String&lt;uchar>>, SelectFirst&lt;String&lt;uchar>, String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.1387543"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1387800" specialization="true">
            <name>Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>></name>
            <content>
                <primaryType ref="1379542"/>
                <argumentType ref="type.1378697"/>
                <argumentType ref="type.1378697"/>
                <argumentType ref="type.1387794"/>
                <argumentType ref="type.1387516"/>
                <argumentType ref="type.1387520"/>
            </content>
        </type>
        <type derived="true" id="type.1387819">
            <name>Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1387800"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387801">
            <name>Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*</name>
            <content>
                <baseType ref="type.1387800"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388579">
            <name>Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*&amp;</name>
            <content>
                <baseType ref="type.1387800"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388578">
            <name>Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.1387800"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1381202" specialization="true">
            <name>Hashtable&lt;System.Unicode.AgeId, Pair&lt;System.Unicode.AgeId, Age*>, SelectFirst&lt;System.Unicode.AgeId, Age*>, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>></name>
            <content>
                <primaryType ref="1379542"/>
                <argumentType ref="1378442"/>
                <argumentType ref="type.1381191"/>
                <argumentType ref="type.1381195"/>
                <argumentType ref="type.1381172"/>
                <argumentType ref="type.1381177"/>
            </content>
        </type>
        <type id="type.1382098" specialization="true">
            <name>Hashtable&lt;System.Unicode.AliasTypeId, Pair&lt;System.Unicode.AliasTypeId, AliasType*>, SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>></name>
            <content>
                <primaryType ref="1379542"/>
                <argumentType ref="1378491"/>
                <argumentType ref="type.1382087"/>
                <argumentType ref="type.1382091"/>
                <argumentType ref="type.1382068"/>
                <argumentType ref="type.1382073"/>
            </content>
        </type>
        <type id="type.1381740" specialization="true">
            <name>Hashtable&lt;System.Unicode.BidiClassId, Pair&lt;System.Unicode.BidiClassId, BidiClass*>, SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>></name>
            <content>
                <primaryType ref="1379542"/>
                <argumentType ref="1378473"/>
                <argumentType ref="type.1381729"/>
                <argumentType ref="type.1381733"/>
                <argumentType ref="type.1381710"/>
                <argumentType ref="type.1381715"/>
            </content>
        </type>
        <type id="type.1381919" specialization="true">
            <name>Hashtable&lt;System.Unicode.BidiPairedBracketTypeId, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>></name>
            <content>
                <primaryType ref="1379542"/>
                <argumentType ref="1378482"/>
                <argumentType ref="type.1381908"/>
                <argumentType ref="type.1381912"/>
                <argumentType ref="type.1381889"/>
                <argumentType ref="type.1381894"/>
            </content>
        </type>
        <type id="type.1380648" specialization="true">
            <name>Hashtable&lt;System.Unicode.BinaryPropertyId, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>></name>
            <content>
                <primaryType ref="1379542"/>
                <argumentType ref="1378421"/>
                <argumentType ref="type.1380637"/>
                <argumentType ref="type.1380641"/>
                <argumentType ref="type.1380618"/>
                <argumentType ref="type.1380623"/>
            </content>
        </type>
        <type id="type.1380842" specialization="true">
            <name>Hashtable&lt;System.Unicode.BlockId, Pair&lt;System.Unicode.BlockId, Block*>, SelectFirst&lt;System.Unicode.BlockId, Block*>, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>></name>
            <content>
                <primaryType ref="1379542"/>
                <argumentType ref="1378428"/>
                <argumentType ref="type.1380831"/>
                <argumentType ref="type.1380835"/>
                <argumentType ref="type.1380812"/>
                <argumentType ref="type.1380817"/>
            </content>
        </type>
        <type id="type.1381023" specialization="true">
            <name>Hashtable&lt;System.Unicode.GeneralCategoryId, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>></name>
            <content>
                <primaryType ref="1379542"/>
                <argumentType ref="1378435"/>
                <argumentType ref="type.1381012"/>
                <argumentType ref="type.1381016"/>
                <argumentType ref="type.1380993"/>
                <argumentType ref="type.1380998"/>
            </content>
        </type>
        <type id="type.1381561" specialization="true">
            <name>Hashtable&lt;System.Unicode.NumericTypeId, Pair&lt;System.Unicode.NumericTypeId, NumericType*>, SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>></name>
            <content>
                <primaryType ref="1379542"/>
                <argumentType ref="1378464"/>
                <argumentType ref="type.1381550"/>
                <argumentType ref="type.1381554"/>
                <argumentType ref="type.1381531"/>
                <argumentType ref="type.1381536"/>
            </content>
        </type>
        <type id="type.1381381" specialization="true">
            <name>Hashtable&lt;System.Unicode.ScriptId, Pair&lt;System.Unicode.ScriptId, Script*>, SelectFirst&lt;System.Unicode.ScriptId, Script*>, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>></name>
            <content>
                <primaryType ref="1379542"/>
                <argumentType ref="1378451"/>
                <argumentType ref="type.1381370"/>
                <argumentType ref="type.1381374"/>
                <argumentType ref="type.1381351"/>
                <argumentType ref="type.1381356"/>
            </content>
        </type>
        <type id="type.1379431" specialization="true">
            <name>Hashtable&lt;T, T, Identity&lt;T>, H, C></name>
            <content>
                <primaryType ref="1379542"/>
                <argumentType ref="1378265"/>
                <argumentType ref="1378265"/>
                <argumentType ref="type.1379424"/>
                <argumentType ref="1378266"/>
                <argumentType ref="1378267"/>
            </content>
        </type>
        <type id="type.3445" specialization="true">
            <name>Hashtable&lt;T, T, Identity&lt;T>, H, C></name>
            <content>
                <primaryType ref="1379542"/>
                <argumentType ref="1378262"/>
                <argumentType ref="1378262"/>
                <argumentType ref="type.3438"/>
                <argumentType ref="1378263"/>
                <argumentType ref="1378264"/>
            </content>
        </type>
        <type derived="true" id="type.3467">
            <name>Hashtable&lt;T, T, Identity&lt;T>, H, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.3445"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3446">
            <name>Hashtable&lt;T, T, Identity&lt;T>, H, C>*</name>
            <content>
                <baseType ref="type.3445"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1387723" specialization="true">
            <name>HashtableIterator&lt;Grammar*, Grammar*&amp;, Grammar**, Hashtable&lt;Grammar*, Grammar*, Identity&lt;Grammar*>, Hasher&lt;Grammar*>, EqualTo&lt;Grammar*>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1385523"/>
                <argumentType ref="type.1387721"/>
                <argumentType ref="type.1387722"/>
                <argumentType ref="type.1387717"/>
            </content>
        </type>
        <type derived="true" id="type.1387731">
            <name>HashtableIterator&lt;Grammar*, Grammar*&amp;, Grammar**, Hashtable&lt;Grammar*, Grammar*, Identity&lt;Grammar*>, Hasher&lt;Grammar*>, EqualTo&lt;Grammar*>>>&amp;</name>
            <content>
                <baseType ref="type.1387723"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387743">
            <name>HashtableIterator&lt;Grammar*, Grammar*&amp;, Grammar**, Hashtable&lt;Grammar*, Grammar*, Identity&lt;Grammar*>, Hasher&lt;Grammar*>, EqualTo&lt;Grammar*>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1387723"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387724">
            <name>HashtableIterator&lt;Grammar*, Grammar*&amp;, Grammar**, Hashtable&lt;Grammar*, Grammar*, Identity&lt;Grammar*>, Hasher&lt;Grammar*>, EqualTo&lt;Grammar*>>>*</name>
            <content>
                <baseType ref="type.1387723"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1387733" specialization="true">
            <name>HashtableIterator&lt;Grammar*, const Grammar*&amp;, const Grammar**, Hashtable&lt;Grammar*, Grammar*, Identity&lt;Grammar*>, Hasher&lt;Grammar*>, EqualTo&lt;Grammar*>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1385523"/>
                <argumentType ref="type.1387696"/>
                <argumentType ref="type.1387732"/>
                <argumentType ref="type.1387717"/>
            </content>
        </type>
        <type derived="true" id="type.1387737">
            <name>HashtableIterator&lt;Grammar*, const Grammar*&amp;, const Grammar**, Hashtable&lt;Grammar*, Grammar*, Identity&lt;Grammar*>, Hasher&lt;Grammar*>, EqualTo&lt;Grammar*>>>&amp;</name>
            <content>
                <baseType ref="type.1387733"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387734">
            <name>HashtableIterator&lt;Grammar*, const Grammar*&amp;, const Grammar**, Hashtable&lt;Grammar*, Grammar*, Identity&lt;Grammar*>, Hasher&lt;Grammar*>, EqualTo&lt;Grammar*>>>*</name>
            <content>
                <baseType ref="type.1387733"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1379309" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1379291"/>
                <argumentType ref="type.1379308"/>
                <argumentType ref="type.1379292"/>
                <argumentType ref="type.1379304"/>
            </content>
        </type>
        <type id="type.3375" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.3357"/>
                <argumentType ref="type.3374"/>
                <argumentType ref="type.3358"/>
                <argumentType ref="type.3370"/>
            </content>
        </type>
        <type id="type.1379309" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1379291"/>
                <argumentType ref="type.1379308"/>
                <argumentType ref="type.1379292"/>
                <argumentType ref="type.1379304"/>
            </content>
        </type>
        <type derived="true" id="type.3383">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <baseType ref="type.3375"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3395">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;&amp;</name>
            <content>
                <baseType ref="type.3375"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3376">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <baseType ref="type.3375"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1379319" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1379291"/>
                <argumentType ref="type.1379302"/>
                <argumentType ref="type.1379318"/>
                <argumentType ref="type.1379304"/>
            </content>
        </type>
        <type id="type.3385" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.3357"/>
                <argumentType ref="type.3368"/>
                <argumentType ref="type.3384"/>
                <argumentType ref="type.3370"/>
            </content>
        </type>
        <type id="type.1379319" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1379291"/>
                <argumentType ref="type.1379302"/>
                <argumentType ref="type.1379318"/>
                <argumentType ref="type.1379304"/>
            </content>
        </type>
        <type derived="true" id="type.3389">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <baseType ref="type.3385"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3386">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <baseType ref="type.3385"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1381272" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, Age*>, Pair&lt;String&lt;char>, Age*>&amp;, Pair&lt;String&lt;char>, Age*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Age*>, SelectFirst&lt;String&lt;char>, Age*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1381258"/>
                <argumentType ref="type.1381271"/>
                <argumentType ref="type.1381259"/>
                <argumentType ref="type.1381267"/>
            </content>
        </type>
        <type id="type.1381282" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, Age*>, const Pair&lt;String&lt;char>, Age*>&amp;, const Pair&lt;String&lt;char>, Age*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Age*>, SelectFirst&lt;String&lt;char>, Age*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1381258"/>
                <argumentType ref="type.1381265"/>
                <argumentType ref="type.1381281"/>
                <argumentType ref="type.1381267"/>
            </content>
        </type>
        <type id="type.1382168" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, AliasType*>, Pair&lt;String&lt;char>, AliasType*>&amp;, Pair&lt;String&lt;char>, AliasType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, AliasType*>, SelectFirst&lt;String&lt;char>, AliasType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1382154"/>
                <argumentType ref="type.1382167"/>
                <argumentType ref="type.1382155"/>
                <argumentType ref="type.1382163"/>
            </content>
        </type>
        <type id="type.1382178" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, AliasType*>, const Pair&lt;String&lt;char>, AliasType*>&amp;, const Pair&lt;String&lt;char>, AliasType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, AliasType*>, SelectFirst&lt;String&lt;char>, AliasType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1382154"/>
                <argumentType ref="type.1382161"/>
                <argumentType ref="type.1382177"/>
                <argumentType ref="type.1382163"/>
            </content>
        </type>
        <type id="type.1381810" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, BidiClass*>, Pair&lt;String&lt;char>, BidiClass*>&amp;, Pair&lt;String&lt;char>, BidiClass*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiClass*>, SelectFirst&lt;String&lt;char>, BidiClass*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1381796"/>
                <argumentType ref="type.1381809"/>
                <argumentType ref="type.1381797"/>
                <argumentType ref="type.1381805"/>
            </content>
        </type>
        <type id="type.1381820" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, BidiClass*>, const Pair&lt;String&lt;char>, BidiClass*>&amp;, const Pair&lt;String&lt;char>, BidiClass*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiClass*>, SelectFirst&lt;String&lt;char>, BidiClass*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1381796"/>
                <argumentType ref="type.1381803"/>
                <argumentType ref="type.1381819"/>
                <argumentType ref="type.1381805"/>
            </content>
        </type>
        <type id="type.1381989" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>, Pair&lt;String&lt;char>, BidiPairedBracketType*>&amp;, Pair&lt;String&lt;char>, BidiPairedBracketType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiPairedBracketType*>, SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1381975"/>
                <argumentType ref="type.1381988"/>
                <argumentType ref="type.1381976"/>
                <argumentType ref="type.1381984"/>
            </content>
        </type>
        <type id="type.1381999" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>, const Pair&lt;String&lt;char>, BidiPairedBracketType*>&amp;, const Pair&lt;String&lt;char>, BidiPairedBracketType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiPairedBracketType*>, SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1381975"/>
                <argumentType ref="type.1381982"/>
                <argumentType ref="type.1381998"/>
                <argumentType ref="type.1381984"/>
            </content>
        </type>
        <type id="type.1380732" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, BinaryProperty*>, Pair&lt;String&lt;char>, BinaryProperty*>&amp;, Pair&lt;String&lt;char>, BinaryProperty*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BinaryProperty*>, SelectFirst&lt;String&lt;char>, BinaryProperty*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1380718"/>
                <argumentType ref="type.1380731"/>
                <argumentType ref="type.1380719"/>
                <argumentType ref="type.1380727"/>
            </content>
        </type>
        <type id="type.1380742" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, BinaryProperty*>, const Pair&lt;String&lt;char>, BinaryProperty*>&amp;, const Pair&lt;String&lt;char>, BinaryProperty*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BinaryProperty*>, SelectFirst&lt;String&lt;char>, BinaryProperty*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1380718"/>
                <argumentType ref="type.1380725"/>
                <argumentType ref="type.1380741"/>
                <argumentType ref="type.1380727"/>
            </content>
        </type>
        <type id="type.1380912" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, Block*>, Pair&lt;String&lt;char>, Block*>&amp;, Pair&lt;String&lt;char>, Block*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Block*>, SelectFirst&lt;String&lt;char>, Block*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1380898"/>
                <argumentType ref="type.1380911"/>
                <argumentType ref="type.1380899"/>
                <argumentType ref="type.1380907"/>
            </content>
        </type>
        <type id="type.1380922" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, Block*>, const Pair&lt;String&lt;char>, Block*>&amp;, const Pair&lt;String&lt;char>, Block*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Block*>, SelectFirst&lt;String&lt;char>, Block*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1380898"/>
                <argumentType ref="type.1380905"/>
                <argumentType ref="type.1380921"/>
                <argumentType ref="type.1380907"/>
            </content>
        </type>
        <type id="type.1381093" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, GeneralCategory*>, Pair&lt;String&lt;char>, GeneralCategory*>&amp;, Pair&lt;String&lt;char>, GeneralCategory*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, GeneralCategory*>, SelectFirst&lt;String&lt;char>, GeneralCategory*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1381079"/>
                <argumentType ref="type.1381092"/>
                <argumentType ref="type.1381080"/>
                <argumentType ref="type.1381088"/>
            </content>
        </type>
        <type id="type.1381103" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, GeneralCategory*>, const Pair&lt;String&lt;char>, GeneralCategory*>&amp;, const Pair&lt;String&lt;char>, GeneralCategory*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, GeneralCategory*>, SelectFirst&lt;String&lt;char>, GeneralCategory*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1381079"/>
                <argumentType ref="type.1381086"/>
                <argumentType ref="type.1381102"/>
                <argumentType ref="type.1381088"/>
            </content>
        </type>
        <type id="type.1381631" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, NumericType*>, Pair&lt;String&lt;char>, NumericType*>&amp;, Pair&lt;String&lt;char>, NumericType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, NumericType*>, SelectFirst&lt;String&lt;char>, NumericType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1381617"/>
                <argumentType ref="type.1381630"/>
                <argumentType ref="type.1381618"/>
                <argumentType ref="type.1381626"/>
            </content>
        </type>
        <type id="type.1381641" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, NumericType*>, const Pair&lt;String&lt;char>, NumericType*>&amp;, const Pair&lt;String&lt;char>, NumericType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, NumericType*>, SelectFirst&lt;String&lt;char>, NumericType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1381617"/>
                <argumentType ref="type.1381624"/>
                <argumentType ref="type.1381640"/>
                <argumentType ref="type.1381626"/>
            </content>
        </type>
        <type id="type.1381451" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, Script*>, Pair&lt;String&lt;char>, Script*>&amp;, Pair&lt;String&lt;char>, Script*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Script*>, SelectFirst&lt;String&lt;char>, Script*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1381437"/>
                <argumentType ref="type.1381450"/>
                <argumentType ref="type.1381438"/>
                <argumentType ref="type.1381446"/>
            </content>
        </type>
        <type id="type.1381461" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, Script*>, const Pair&lt;String&lt;char>, Script*>&amp;, const Pair&lt;String&lt;char>, Script*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Script*>, SelectFirst&lt;String&lt;char>, Script*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1381437"/>
                <argumentType ref="type.1381444"/>
                <argumentType ref="type.1381460"/>
                <argumentType ref="type.1381446"/>
            </content>
        </type>
        <type id="type.1388020" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, Grammar*>, Pair&lt;String&lt;uchar>, Grammar*>&amp;, Pair&lt;String&lt;uchar>, Grammar*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Grammar*>, SelectFirst&lt;String&lt;uchar>, Grammar*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1388005"/>
                <argumentType ref="type.1388019"/>
                <argumentType ref="type.1388006"/>
                <argumentType ref="type.1388015"/>
            </content>
        </type>
        <type derived="true" id="type.1388028">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, Grammar*>, Pair&lt;String&lt;uchar>, Grammar*>&amp;, Pair&lt;String&lt;uchar>, Grammar*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Grammar*>, SelectFirst&lt;String&lt;uchar>, Grammar*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.1388020"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388040">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, Grammar*>, Pair&lt;String&lt;uchar>, Grammar*>&amp;, Pair&lt;String&lt;uchar>, Grammar*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Grammar*>, SelectFirst&lt;String&lt;uchar>, Grammar*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1388020"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388021">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, Grammar*>, Pair&lt;String&lt;uchar>, Grammar*>&amp;, Pair&lt;String&lt;uchar>, Grammar*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Grammar*>, SelectFirst&lt;String&lt;uchar>, Grammar*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.1388020"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1388030" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, Grammar*>, const Pair&lt;String&lt;uchar>, Grammar*>&amp;, const Pair&lt;String&lt;uchar>, Grammar*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Grammar*>, SelectFirst&lt;String&lt;uchar>, Grammar*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1388005"/>
                <argumentType ref="type.1388013"/>
                <argumentType ref="type.1388029"/>
                <argumentType ref="type.1388015"/>
            </content>
        </type>
        <type derived="true" id="type.1388034">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, Grammar*>, const Pair&lt;String&lt;uchar>, Grammar*>&amp;, const Pair&lt;String&lt;uchar>, Grammar*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Grammar*>, SelectFirst&lt;String&lt;uchar>, Grammar*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.1388030"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388676">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, Grammar*>, const Pair&lt;String&lt;uchar>, Grammar*>&amp;, const Pair&lt;String&lt;uchar>, Grammar*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Grammar*>, SelectFirst&lt;String&lt;uchar>, Grammar*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1388030"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388031">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, Grammar*>, const Pair&lt;String&lt;uchar>, Grammar*>&amp;, const Pair&lt;String&lt;uchar>, Grammar*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Grammar*>, SelectFirst&lt;String&lt;uchar>, Grammar*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.1388030"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1388086" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, Namespace*>, Pair&lt;String&lt;uchar>, Namespace*>&amp;, Pair&lt;String&lt;uchar>, Namespace*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Namespace*>, SelectFirst&lt;String&lt;uchar>, Namespace*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1388070"/>
                <argumentType ref="type.1388085"/>
                <argumentType ref="type.1388071"/>
                <argumentType ref="type.1388081"/>
            </content>
        </type>
        <type derived="true" id="type.1388094">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, Namespace*>, Pair&lt;String&lt;uchar>, Namespace*>&amp;, Pair&lt;String&lt;uchar>, Namespace*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Namespace*>, SelectFirst&lt;String&lt;uchar>, Namespace*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.1388086"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388106">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, Namespace*>, Pair&lt;String&lt;uchar>, Namespace*>&amp;, Pair&lt;String&lt;uchar>, Namespace*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Namespace*>, SelectFirst&lt;String&lt;uchar>, Namespace*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1388086"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388087">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, Namespace*>, Pair&lt;String&lt;uchar>, Namespace*>&amp;, Pair&lt;String&lt;uchar>, Namespace*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Namespace*>, SelectFirst&lt;String&lt;uchar>, Namespace*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.1388086"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1388096" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, Namespace*>, const Pair&lt;String&lt;uchar>, Namespace*>&amp;, const Pair&lt;String&lt;uchar>, Namespace*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Namespace*>, SelectFirst&lt;String&lt;uchar>, Namespace*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1388070"/>
                <argumentType ref="type.1388079"/>
                <argumentType ref="type.1388095"/>
                <argumentType ref="type.1388081"/>
            </content>
        </type>
        <type derived="true" id="type.1388100">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, Namespace*>, const Pair&lt;String&lt;uchar>, Namespace*>&amp;, const Pair&lt;String&lt;uchar>, Namespace*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Namespace*>, SelectFirst&lt;String&lt;uchar>, Namespace*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.1388096"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388690">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, Namespace*>, const Pair&lt;String&lt;uchar>, Namespace*>&amp;, const Pair&lt;String&lt;uchar>, Namespace*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Namespace*>, SelectFirst&lt;String&lt;uchar>, Namespace*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1388096"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388097">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, Namespace*>, const Pair&lt;String&lt;uchar>, Namespace*>&amp;, const Pair&lt;String&lt;uchar>, Namespace*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Namespace*>, SelectFirst&lt;String&lt;uchar>, Namespace*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.1388096"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1388321" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, ParsingObject*>, Pair&lt;String&lt;uchar>, ParsingObject*>&amp;, Pair&lt;String&lt;uchar>, ParsingObject*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, ParsingObject*>, SelectFirst&lt;String&lt;uchar>, ParsingObject*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1388305"/>
                <argumentType ref="type.1388320"/>
                <argumentType ref="type.1388306"/>
                <argumentType ref="type.1388316"/>
            </content>
        </type>
        <type derived="true" id="type.1388329">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, ParsingObject*>, Pair&lt;String&lt;uchar>, ParsingObject*>&amp;, Pair&lt;String&lt;uchar>, ParsingObject*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, ParsingObject*>, SelectFirst&lt;String&lt;uchar>, ParsingObject*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.1388321"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388341">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, ParsingObject*>, Pair&lt;String&lt;uchar>, ParsingObject*>&amp;, Pair&lt;String&lt;uchar>, ParsingObject*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, ParsingObject*>, SelectFirst&lt;String&lt;uchar>, ParsingObject*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1388321"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388322">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, ParsingObject*>, Pair&lt;String&lt;uchar>, ParsingObject*>&amp;, Pair&lt;String&lt;uchar>, ParsingObject*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, ParsingObject*>, SelectFirst&lt;String&lt;uchar>, ParsingObject*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.1388321"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1388331" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, ParsingObject*>, const Pair&lt;String&lt;uchar>, ParsingObject*>&amp;, const Pair&lt;String&lt;uchar>, ParsingObject*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, ParsingObject*>, SelectFirst&lt;String&lt;uchar>, ParsingObject*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1388305"/>
                <argumentType ref="type.1388314"/>
                <argumentType ref="type.1388330"/>
                <argumentType ref="type.1388316"/>
            </content>
        </type>
        <type derived="true" id="type.1388335">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, ParsingObject*>, const Pair&lt;String&lt;uchar>, ParsingObject*>&amp;, const Pair&lt;String&lt;uchar>, ParsingObject*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, ParsingObject*>, SelectFirst&lt;String&lt;uchar>, ParsingObject*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.1388331"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388771">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, ParsingObject*>, const Pair&lt;String&lt;uchar>, ParsingObject*>&amp;, const Pair&lt;String&lt;uchar>, ParsingObject*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, ParsingObject*>, SelectFirst&lt;String&lt;uchar>, ParsingObject*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1388331"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388332">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, ParsingObject*>, const Pair&lt;String&lt;uchar>, ParsingObject*>&amp;, const Pair&lt;String&lt;uchar>, ParsingObject*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, ParsingObject*>, SelectFirst&lt;String&lt;uchar>, ParsingObject*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.1388331"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1387548" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>, Pair&lt;String&lt;uchar>, String&lt;uchar>>&amp;, Pair&lt;String&lt;uchar>, String&lt;uchar>>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, String&lt;uchar>>, SelectFirst&lt;String&lt;uchar>, String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1387534"/>
                <argumentType ref="type.1387547"/>
                <argumentType ref="type.1387535"/>
                <argumentType ref="type.1387543"/>
            </content>
        </type>
        <type derived="true" id="type.1387556">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>, Pair&lt;String&lt;uchar>, String&lt;uchar>>&amp;, Pair&lt;String&lt;uchar>, String&lt;uchar>>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, String&lt;uchar>>, SelectFirst&lt;String&lt;uchar>, String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.1387548"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387568">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>, Pair&lt;String&lt;uchar>, String&lt;uchar>>&amp;, Pair&lt;String&lt;uchar>, String&lt;uchar>>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, String&lt;uchar>>, SelectFirst&lt;String&lt;uchar>, String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1387548"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387549">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>, Pair&lt;String&lt;uchar>, String&lt;uchar>>&amp;, Pair&lt;String&lt;uchar>, String&lt;uchar>>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, String&lt;uchar>>, SelectFirst&lt;String&lt;uchar>, String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.1387548"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1387558" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>, const Pair&lt;String&lt;uchar>, String&lt;uchar>>&amp;, const Pair&lt;String&lt;uchar>, String&lt;uchar>>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, String&lt;uchar>>, SelectFirst&lt;String&lt;uchar>, String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1387534"/>
                <argumentType ref="type.1387541"/>
                <argumentType ref="type.1387557"/>
                <argumentType ref="type.1387543"/>
            </content>
        </type>
        <type derived="true" id="type.1387562">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>, const Pair&lt;String&lt;uchar>, String&lt;uchar>>&amp;, const Pair&lt;String&lt;uchar>, String&lt;uchar>>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, String&lt;uchar>>, SelectFirst&lt;String&lt;uchar>, String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.1387558"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388442">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>, const Pair&lt;String&lt;uchar>, String&lt;uchar>>&amp;, const Pair&lt;String&lt;uchar>, String&lt;uchar>>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, String&lt;uchar>>, SelectFirst&lt;String&lt;uchar>, String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1387558"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387559">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>, const Pair&lt;String&lt;uchar>, String&lt;uchar>>&amp;, const Pair&lt;String&lt;uchar>, String&lt;uchar>>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, String&lt;uchar>>, SelectFirst&lt;String&lt;uchar>, String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.1387558"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1381207" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.AgeId, Age*>, Pair&lt;System.Unicode.AgeId, Age*>&amp;, Pair&lt;System.Unicode.AgeId, Age*>*, Hashtable&lt;System.Unicode.AgeId, Pair&lt;System.Unicode.AgeId, Age*>, SelectFirst&lt;System.Unicode.AgeId, Age*>, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1381191"/>
                <argumentType ref="type.1381206"/>
                <argumentType ref="type.1381192"/>
                <argumentType ref="type.1381202"/>
            </content>
        </type>
        <type id="type.1381217" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.AgeId, Age*>, const Pair&lt;System.Unicode.AgeId, Age*>&amp;, const Pair&lt;System.Unicode.AgeId, Age*>*, Hashtable&lt;System.Unicode.AgeId, Pair&lt;System.Unicode.AgeId, Age*>, SelectFirst&lt;System.Unicode.AgeId, Age*>, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1381191"/>
                <argumentType ref="type.1381200"/>
                <argumentType ref="type.1381216"/>
                <argumentType ref="type.1381202"/>
            </content>
        </type>
        <type id="type.1382103" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>, Pair&lt;System.Unicode.AliasTypeId, AliasType*>&amp;, Pair&lt;System.Unicode.AliasTypeId, AliasType*>*, Hashtable&lt;System.Unicode.AliasTypeId, Pair&lt;System.Unicode.AliasTypeId, AliasType*>, SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1382087"/>
                <argumentType ref="type.1382102"/>
                <argumentType ref="type.1382088"/>
                <argumentType ref="type.1382098"/>
            </content>
        </type>
        <type id="type.1382113" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>, const Pair&lt;System.Unicode.AliasTypeId, AliasType*>&amp;, const Pair&lt;System.Unicode.AliasTypeId, AliasType*>*, Hashtable&lt;System.Unicode.AliasTypeId, Pair&lt;System.Unicode.AliasTypeId, AliasType*>, SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1382087"/>
                <argumentType ref="type.1382096"/>
                <argumentType ref="type.1382112"/>
                <argumentType ref="type.1382098"/>
            </content>
        </type>
        <type id="type.1381745" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>, Pair&lt;System.Unicode.BidiClassId, BidiClass*>&amp;, Pair&lt;System.Unicode.BidiClassId, BidiClass*>*, Hashtable&lt;System.Unicode.BidiClassId, Pair&lt;System.Unicode.BidiClassId, BidiClass*>, SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1381729"/>
                <argumentType ref="type.1381744"/>
                <argumentType ref="type.1381730"/>
                <argumentType ref="type.1381740"/>
            </content>
        </type>
        <type id="type.1381755" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>, const Pair&lt;System.Unicode.BidiClassId, BidiClass*>&amp;, const Pair&lt;System.Unicode.BidiClassId, BidiClass*>*, Hashtable&lt;System.Unicode.BidiClassId, Pair&lt;System.Unicode.BidiClassId, BidiClass*>, SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1381729"/>
                <argumentType ref="type.1381738"/>
                <argumentType ref="type.1381754"/>
                <argumentType ref="type.1381740"/>
            </content>
        </type>
        <type id="type.1381924" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>&amp;, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>*, Hashtable&lt;System.Unicode.BidiPairedBracketTypeId, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1381908"/>
                <argumentType ref="type.1381923"/>
                <argumentType ref="type.1381909"/>
                <argumentType ref="type.1381919"/>
            </content>
        </type>
        <type id="type.1381934" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, const Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>&amp;, const Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>*, Hashtable&lt;System.Unicode.BidiPairedBracketTypeId, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1381908"/>
                <argumentType ref="type.1381917"/>
                <argumentType ref="type.1381933"/>
                <argumentType ref="type.1381919"/>
            </content>
        </type>
        <type id="type.1380653" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>&amp;, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>*, Hashtable&lt;System.Unicode.BinaryPropertyId, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1380637"/>
                <argumentType ref="type.1380652"/>
                <argumentType ref="type.1380638"/>
                <argumentType ref="type.1380648"/>
            </content>
        </type>
        <type id="type.1380663" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, const Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>&amp;, const Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>*, Hashtable&lt;System.Unicode.BinaryPropertyId, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1380637"/>
                <argumentType ref="type.1380646"/>
                <argumentType ref="type.1380662"/>
                <argumentType ref="type.1380648"/>
            </content>
        </type>
        <type id="type.1380847" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BlockId, Block*>, Pair&lt;System.Unicode.BlockId, Block*>&amp;, Pair&lt;System.Unicode.BlockId, Block*>*, Hashtable&lt;System.Unicode.BlockId, Pair&lt;System.Unicode.BlockId, Block*>, SelectFirst&lt;System.Unicode.BlockId, Block*>, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1380831"/>
                <argumentType ref="type.1380846"/>
                <argumentType ref="type.1380832"/>
                <argumentType ref="type.1380842"/>
            </content>
        </type>
        <type id="type.1380857" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BlockId, Block*>, const Pair&lt;System.Unicode.BlockId, Block*>&amp;, const Pair&lt;System.Unicode.BlockId, Block*>*, Hashtable&lt;System.Unicode.BlockId, Pair&lt;System.Unicode.BlockId, Block*>, SelectFirst&lt;System.Unicode.BlockId, Block*>, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1380831"/>
                <argumentType ref="type.1380840"/>
                <argumentType ref="type.1380856"/>
                <argumentType ref="type.1380842"/>
            </content>
        </type>
        <type id="type.1381028" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>&amp;, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>*, Hashtable&lt;System.Unicode.GeneralCategoryId, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1381012"/>
                <argumentType ref="type.1381027"/>
                <argumentType ref="type.1381013"/>
                <argumentType ref="type.1381023"/>
            </content>
        </type>
        <type id="type.1381038" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, const Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>&amp;, const Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>*, Hashtable&lt;System.Unicode.GeneralCategoryId, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1381012"/>
                <argumentType ref="type.1381021"/>
                <argumentType ref="type.1381037"/>
                <argumentType ref="type.1381023"/>
            </content>
        </type>
        <type id="type.1381566" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>, Pair&lt;System.Unicode.NumericTypeId, NumericType*>&amp;, Pair&lt;System.Unicode.NumericTypeId, NumericType*>*, Hashtable&lt;System.Unicode.NumericTypeId, Pair&lt;System.Unicode.NumericTypeId, NumericType*>, SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1381550"/>
                <argumentType ref="type.1381565"/>
                <argumentType ref="type.1381551"/>
                <argumentType ref="type.1381561"/>
            </content>
        </type>
        <type id="type.1381576" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>, const Pair&lt;System.Unicode.NumericTypeId, NumericType*>&amp;, const Pair&lt;System.Unicode.NumericTypeId, NumericType*>*, Hashtable&lt;System.Unicode.NumericTypeId, Pair&lt;System.Unicode.NumericTypeId, NumericType*>, SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1381550"/>
                <argumentType ref="type.1381559"/>
                <argumentType ref="type.1381575"/>
                <argumentType ref="type.1381561"/>
            </content>
        </type>
        <type id="type.1381386" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.ScriptId, Script*>, Pair&lt;System.Unicode.ScriptId, Script*>&amp;, Pair&lt;System.Unicode.ScriptId, Script*>*, Hashtable&lt;System.Unicode.ScriptId, Pair&lt;System.Unicode.ScriptId, Script*>, SelectFirst&lt;System.Unicode.ScriptId, Script*>, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1381370"/>
                <argumentType ref="type.1381385"/>
                <argumentType ref="type.1381371"/>
                <argumentType ref="type.1381381"/>
            </content>
        </type>
        <type id="type.1381396" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.ScriptId, Script*>, const Pair&lt;System.Unicode.ScriptId, Script*>&amp;, const Pair&lt;System.Unicode.ScriptId, Script*>*, Hashtable&lt;System.Unicode.ScriptId, Pair&lt;System.Unicode.ScriptId, Script*>, SelectFirst&lt;System.Unicode.ScriptId, Script*>, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1381370"/>
                <argumentType ref="type.1381379"/>
                <argumentType ref="type.1381395"/>
                <argumentType ref="type.1381381"/>
            </content>
        </type>
        <type id="type.1387804" specialization="true">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1378697"/>
                <argumentType ref="type.1378720"/>
                <argumentType ref="type.1378698"/>
                <argumentType ref="type.1387800"/>
            </content>
        </type>
        <type derived="true" id="type.1387812">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.1387804"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387823">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1387804"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387805">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.1387804"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1387813" specialization="true">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1378697"/>
                <argumentType ref="type.1378718"/>
                <argumentType ref="type.1378700"/>
                <argumentType ref="type.1387800"/>
            </content>
        </type>
        <type derived="true" id="type.1387817">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.1387813"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388588">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1387813"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387814">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.1387813"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1379517" specialization="true">
            <name>HashtableIterator&lt;T, R, P, H></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="1378274"/>
                <argumentType ref="1378275"/>
                <argumentType ref="1378276"/>
                <argumentType ref="1378277"/>
            </content>
        </type>
        <type id="type.1379529" specialization="true">
            <name>HashtableIterator&lt;T, R, P, H></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="1378278"/>
                <argumentType ref="1378279"/>
                <argumentType ref="1378280"/>
                <argumentType ref="1378281"/>
            </content>
        </type>
        <type id="type.1379517" specialization="true">
            <name>HashtableIterator&lt;T, R, P, H></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="1378274"/>
                <argumentType ref="1378275"/>
                <argumentType ref="1378276"/>
                <argumentType ref="1378277"/>
            </content>
        </type>
        <type derived="true" id="type.3532">
            <name>HashtableIterator&lt;T, R, P, H>&amp;</name>
            <content>
                <baseType ref="type.1379517"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3522">
            <name>HashtableIterator&lt;T, R, P, H>*</name>
            <content>
                <baseType ref="type.1379517"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1379437" specialization="true">
            <name>HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="1378265"/>
                <argumentType ref="type.1379435"/>
                <argumentType ref="type.1379436"/>
                <argumentType ref="type.1379431"/>
            </content>
        </type>
        <type id="type.3451" specialization="true">
            <name>HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="1378262"/>
                <argumentType ref="type.3449"/>
                <argumentType ref="type.3450"/>
                <argumentType ref="type.3445"/>
            </content>
        </type>
        <type derived="true" id="type.3459">
            <name>HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>&amp;</name>
            <content>
                <baseType ref="type.3451"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3471">
            <name>HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>&amp;&amp;</name>
            <content>
                <baseType ref="type.3451"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3452">
            <name>HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>*</name>
            <content>
                <baseType ref="type.3451"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.3461" specialization="true">
            <name>HashtableIterator&lt;T, const T&amp;, const T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="1378262"/>
                <argumentType ref="type.3443"/>
                <argumentType ref="type.3460"/>
                <argumentType ref="type.3445"/>
            </content>
        </type>
        <type id="type.1379447" specialization="true">
            <name>HashtableIterator&lt;T, const T&amp;, const T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="1378265"/>
                <argumentType ref="type.1379429"/>
                <argumentType ref="type.1379446"/>
                <argumentType ref="type.1379431"/>
            </content>
        </type>
        <type derived="true" id="type.3465">
            <name>HashtableIterator&lt;T, const T&amp;, const T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>&amp;</name>
            <content>
                <baseType ref="type.3461"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3462">
            <name>HashtableIterator&lt;T, const T&amp;, const T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>*</name>
            <content>
                <baseType ref="type.3461"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.3540" specialization="true">
            <name>HashtableIterator&lt;ValueType, ValueType&amp;, ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="1378284"/>
                <argumentType ref="type.3538"/>
                <argumentType ref="type.3539"/>
                <argumentType ref="type.1379542"/>
            </content>
        </type>
        <type derived="true" id="type.3549">
            <name>HashtableIterator&lt;ValueType, ValueType&amp;, ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>>&amp;</name>
            <content>
                <baseType ref="type.3540"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3561">
            <name>HashtableIterator&lt;ValueType, ValueType&amp;, ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>>&amp;&amp;</name>
            <content>
                <baseType ref="type.3540"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3541">
            <name>HashtableIterator&lt;ValueType, ValueType&amp;, ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>>*</name>
            <content>
                <baseType ref="type.3540"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.3551" specialization="true">
            <name>HashtableIterator&lt;ValueType, const ValueType&amp;, const ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="1378284"/>
                <argumentType ref="type.3548"/>
                <argumentType ref="type.3550"/>
                <argumentType ref="type.1379542"/>
            </content>
        </type>
        <type derived="true" id="type.3555">
            <name>HashtableIterator&lt;ValueType, const ValueType&amp;, const ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>>&amp;</name>
            <content>
                <baseType ref="type.3551"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3552">
            <name>HashtableIterator&lt;ValueType, const ValueType&amp;, const ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>>*</name>
            <content>
                <baseType ref="type.3551"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385619">
            <name>HexDigitParser</name>
        </type>
        <type derived="true" id="type.1387881">
            <name>HexDigitParser&amp;</name>
            <content>
                <baseType ref="1385619"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385620">
            <name>HexDigitParser*</name>
            <content>
                <baseType ref="1385619"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385691">
            <name>IdContParser</name>
        </type>
        <type derived="true" id="type.1387917">
            <name>IdContParser&amp;</name>
            <content>
                <baseType ref="1385691"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385692">
            <name>IdContParser*</name>
            <content>
                <baseType ref="1385691"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385689">
            <name>IdStartParser</name>
        </type>
        <type derived="true" id="type.1387916">
            <name>IdStartParser&amp;</name>
            <content>
                <baseType ref="1385689"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385690">
            <name>IdStartParser*</name>
            <content>
                <baseType ref="1385689"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4747">
            <name>Identifier&amp;&amp;</name>
            <content>
                <baseType ref="1383534"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="1385526">
            <name>IdentifierCharsRule</name>
        </type>
        <type derived="true" id="type.1387770">
            <name>IdentifierCharsRule&amp;</name>
            <content>
                <baseType ref="1385526"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385529">
            <name>IdentifierCharsRule*</name>
            <content>
                <baseType ref="1385526"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1387711" specialization="true">
            <name>Identity&lt;Grammar*></name>
            <content>
                <primaryType ref="1379022"/>
                <argumentType ref="type.1385523"/>
            </content>
        </type>
        <type derived="true" id="type.1388484">
            <name>Identity&lt;Grammar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1387711"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387716">
            <name>Identity&lt;Grammar*>*</name>
            <content>
                <baseType ref="type.1387711"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1387794" specialization="true">
            <name>Identity&lt;String&lt;uchar>></name>
            <content>
                <primaryType ref="1379022"/>
                <argumentType ref="type.1378697"/>
            </content>
        </type>
        <type derived="true" id="type.1388561">
            <name>Identity&lt;String&lt;uchar>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1387794"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387799">
            <name>Identity&lt;String&lt;uchar>>*</name>
            <content>
                <baseType ref="type.1387794"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.3438" specialization="true">
            <name>Identity&lt;T></name>
            <content>
                <primaryType ref="1379022"/>
                <argumentType ref="1378262"/>
            </content>
        </type>
        <type id="type.1380161" specialization="true">
            <name>Identity&lt;T></name>
            <content>
                <primaryType ref="1379022"/>
                <argumentType ref="1378385"/>
            </content>
        </type>
        <type id="type.3890" specialization="true">
            <name>Identity&lt;T></name>
            <content>
                <primaryType ref="1379022"/>
                <argumentType ref="1378383"/>
            </content>
        </type>
        <type id="type.1380161" specialization="true">
            <name>Identity&lt;T></name>
            <content>
                <primaryType ref="1379022"/>
                <argumentType ref="1378385"/>
            </content>
        </type>
        <type id="type.1379022" specialization="true">
            <name>Identity&lt;T></name>
            <content>
                <primaryType ref="1379022"/>
                <argumentType ref="1378203"/>
            </content>
        </type>
        <type id="type.1380211" specialization="true">
            <name>Identity&lt;T></name>
            <content>
                <primaryType ref="1379022"/>
                <argumentType ref="1378387"/>
            </content>
        </type>
        <type id="type.1379424" specialization="true">
            <name>Identity&lt;T></name>
            <content>
                <primaryType ref="1379022"/>
                <argumentType ref="1378265"/>
            </content>
        </type>
        <type derived="true" id="type.3444">
            <name>Identity&lt;T>*</name>
            <content>
                <baseType ref="type.3438"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3896">
            <name>Identity&lt;T>*</name>
            <content>
                <baseType ref="type.3890"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385647">
            <name>InitialPunctuationParser</name>
        </type>
        <type derived="true" id="type.1387895">
            <name>InitialPunctuationParser&amp;</name>
            <content>
                <baseType ref="1385647"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385648">
            <name>InitialPunctuationParser*</name>
            <content>
                <baseType ref="1385647"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385508">
            <name>IntersectionParser</name>
        </type>
        <type derived="true" id="type.1387865">
            <name>IntersectionParser&amp;</name>
            <content>
                <baseType ref="1385508"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385509">
            <name>IntersectionParser*</name>
            <content>
                <baseType ref="1385508"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4726">
            <name>Invoke&amp;&amp;</name>
            <content>
                <baseType ref="1383512"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3361">
            <name>K&amp;&amp;</name>
            <content>
                <baseType ref="1378253"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3702">
            <name>Key&amp;&amp;</name>
            <content>
                <baseType ref="1378309"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="1385534">
            <name>KeywordListParser</name>
        </type>
        <type derived="true" id="type.1387854">
            <name>KeywordListParser&amp;</name>
            <content>
                <baseType ref="1385534"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385535">
            <name>KeywordListParser*</name>
            <content>
                <baseType ref="1385534"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385530">
            <name>KeywordParser</name>
        </type>
        <type derived="true" id="type.1387853">
            <name>KeywordParser&amp;</name>
            <content>
                <baseType ref="1385530"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387789">
            <name>KeywordParser&amp;&amp;</name>
            <content>
                <baseType ref="1385530"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385531">
            <name>KeywordParser*</name>
            <content>
                <baseType ref="1385530"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385490">
            <name>KleeneStarParser</name>
        </type>
        <type derived="true" id="type.1387857">
            <name>KleeneStarParser&amp;</name>
            <content>
                <baseType ref="1385490"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4809">
            <name>KleeneStarParser&amp;&amp;</name>
            <content>
                <baseType ref="1385490"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385491">
            <name>KleeneStarParser*</name>
            <content>
                <baseType ref="1385490"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1379082" specialization="true">
            <name>Less&lt;T, U></name>
            <content>
                <primaryType ref="1379082"/>
                <argumentType ref="1378217"/>
                <argumentType ref="1378218"/>
            </content>
        </type>
        <type id="type.1379071" specialization="true">
            <name>Less&lt;T></name>
            <content>
                <primaryType ref="1379071"/>
                <argumentType ref="1378215"/>
            </content>
        </type>
        <type id="type.1379124" specialization="true">
            <name>LessOrEqualTo&lt;T, U></name>
            <content>
                <primaryType ref="1379124"/>
                <argumentType ref="1378227"/>
                <argumentType ref="1378228"/>
            </content>
        </type>
        <type id="type.1379113" specialization="true">
            <name>LessOrEqualTo&lt;T></name>
            <content>
                <primaryType ref="1379113"/>
                <argumentType ref="1378225"/>
            </content>
        </type>
        <type id="1385633">
            <name>LetterNumberParser</name>
        </type>
        <type derived="true" id="type.1387888">
            <name>LetterNumberParser&amp;</name>
            <content>
                <baseType ref="1385633"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385634">
            <name>LetterNumberParser*</name>
            <content>
                <baseType ref="1385633"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385603">
            <name>LetterParser</name>
        </type>
        <type derived="true" id="type.1387873">
            <name>LetterParser&amp;</name>
            <content>
                <baseType ref="1385603"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385604">
            <name>LetterParser*</name>
            <content>
                <baseType ref="1385603"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385667">
            <name>LineSeparatorParser</name>
        </type>
        <type derived="true" id="type.1387905">
            <name>LineSeparatorParser&amp;</name>
            <content>
                <baseType ref="1385667"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385668">
            <name>LineSeparatorParser*</name>
            <content>
                <baseType ref="1385667"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1379709" specialization="true">
            <name>LinkedList&lt;T></name>
            <content>
                <primaryType ref="1379661"/>
                <argumentType ref="1378300"/>
            </content>
        </type>
        <type id="type.3596" specialization="true">
            <name>LinkedList&lt;T></name>
            <content>
                <primaryType ref="1379661"/>
                <argumentType ref="1378291"/>
            </content>
        </type>
        <type id="type.1379685" specialization="true">
            <name>LinkedList&lt;T></name>
            <content>
                <primaryType ref="1379661"/>
                <argumentType ref="1378299"/>
            </content>
        </type>
        <type id="type.1379709" specialization="true">
            <name>LinkedList&lt;T></name>
            <content>
                <primaryType ref="1379661"/>
                <argumentType ref="1378300"/>
            </content>
        </type>
        <type id="type.1379661" specialization="true">
            <name>LinkedList&lt;T></name>
            <content>
                <primaryType ref="1379661"/>
                <argumentType ref="1378298"/>
            </content>
        </type>
        <type id="type.1379635" specialization="true">
            <name>LinkedList&lt;T></name>
            <content>
                <primaryType ref="1379661"/>
                <argumentType ref="1378294"/>
            </content>
        </type>
        <type derived="true" id="type.3619">
            <name>LinkedList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.3596"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3648">
            <name>LinkedList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.1379661"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3626">
            <name>LinkedList&lt;T>*</name>
            <content>
                <baseType ref="type.1379661"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3597">
            <name>LinkedList&lt;T>*</name>
            <content>
                <baseType ref="type.3596"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1379596" specialization="true">
            <name>LinkedListNode&lt;T></name>
            <content>
                <primaryType ref="1379596"/>
                <argumentType ref="1378289"/>
            </content>
        </type>
        <type id="type.3635" specialization="true">
            <name>LinkedListNode&lt;T></name>
            <content>
                <primaryType ref="1379596"/>
                <argumentType ref="1378298"/>
            </content>
        </type>
        <type id="type.1379645" specialization="true">
            <name>LinkedListNode&lt;T></name>
            <content>
                <primaryType ref="1379596"/>
                <argumentType ref="1378294"/>
            </content>
        </type>
        <type id="type.3606" specialization="true">
            <name>LinkedListNode&lt;T></name>
            <content>
                <primaryType ref="1379596"/>
                <argumentType ref="1378291"/>
            </content>
        </type>
        <type id="type.1379695" specialization="true">
            <name>LinkedListNode&lt;T></name>
            <content>
                <primaryType ref="1379596"/>
                <argumentType ref="1378299"/>
            </content>
        </type>
        <type id="type.1379719" specialization="true">
            <name>LinkedListNode&lt;T></name>
            <content>
                <primaryType ref="1379596"/>
                <argumentType ref="1378300"/>
            </content>
        </type>
        <type derived="true" id="type.3588">
            <name>LinkedListNode&lt;T>*</name>
            <content>
                <baseType ref="type.1379596"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3607">
            <name>LinkedListNode&lt;T>*</name>
            <content>
                <baseType ref="type.3606"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3636">
            <name>LinkedListNode&lt;T>*</name>
            <content>
                <baseType ref="type.3635"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1379631" specialization="true">
            <name>LinkedListNodeIterator&lt;T, R, P></name>
            <content>
                <primaryType ref="1379602"/>
                <argumentType ref="1378294"/>
                <argumentType ref="1378295"/>
                <argumentType ref="1378296"/>
            </content>
        </type>
        <type id="type.1379631" specialization="true">
            <name>LinkedListNodeIterator&lt;T, R, P></name>
            <content>
                <primaryType ref="1379602"/>
                <argumentType ref="1378294"/>
                <argumentType ref="1378295"/>
                <argumentType ref="1378296"/>
            </content>
        </type>
        <type id="type.1379602" specialization="true">
            <name>LinkedListNodeIterator&lt;T, R, P></name>
            <content>
                <primaryType ref="1379602"/>
                <argumentType ref="1378291"/>
                <argumentType ref="1378292"/>
                <argumentType ref="1378293"/>
            </content>
        </type>
        <type derived="true" id="type.3620">
            <name>LinkedListNodeIterator&lt;T, R, P>&amp;</name>
            <content>
                <baseType ref="type.1379602"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3593">
            <name>LinkedListNodeIterator&lt;T, R, P>*</name>
            <content>
                <baseType ref="type.1379602"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.3631" specialization="true">
            <name>LinkedListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="1379602"/>
                <argumentType ref="1378298"/>
                <argumentType ref="type.3629"/>
                <argumentType ref="type.3630"/>
            </content>
        </type>
        <type id="type.1379715" specialization="true">
            <name>LinkedListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="1379602"/>
                <argumentType ref="1378300"/>
                <argumentType ref="type.1379713"/>
                <argumentType ref="type.1379714"/>
            </content>
        </type>
        <type id="type.1379641" specialization="true">
            <name>LinkedListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="1379602"/>
                <argumentType ref="1378294"/>
                <argumentType ref="type.1379639"/>
                <argumentType ref="type.1379640"/>
            </content>
        </type>
        <type id="type.3602" specialization="true">
            <name>LinkedListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="1379602"/>
                <argumentType ref="1378291"/>
                <argumentType ref="type.3600"/>
                <argumentType ref="type.3601"/>
            </content>
        </type>
        <type id="type.1379691" specialization="true">
            <name>LinkedListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="1379602"/>
                <argumentType ref="1378299"/>
                <argumentType ref="type.1379689"/>
                <argumentType ref="type.1379690"/>
            </content>
        </type>
        <type derived="true" id="type.3640">
            <name>LinkedListNodeIterator&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <baseType ref="type.3631"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3611">
            <name>LinkedListNodeIterator&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <baseType ref="type.3602"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3603">
            <name>LinkedListNodeIterator&lt;T, T&amp;, T*>*</name>
            <content>
                <baseType ref="type.3602"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3632">
            <name>LinkedListNodeIterator&lt;T, T&amp;, T*>*</name>
            <content>
                <baseType ref="type.3631"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1379726" specialization="true">
            <name>LinkedListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="1379602"/>
                <argumentType ref="1378300"/>
                <argumentType ref="type.1379723"/>
                <argumentType ref="type.1379725"/>
            </content>
        </type>
        <type id="type.1379702" specialization="true">
            <name>LinkedListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="1379602"/>
                <argumentType ref="1378299"/>
                <argumentType ref="type.1379699"/>
                <argumentType ref="type.1379701"/>
            </content>
        </type>
        <type id="type.1379652" specialization="true">
            <name>LinkedListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="1379602"/>
                <argumentType ref="1378294"/>
                <argumentType ref="type.1379649"/>
                <argumentType ref="type.1379651"/>
            </content>
        </type>
        <type id="type.3642" specialization="true">
            <name>LinkedListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="1379602"/>
                <argumentType ref="1378298"/>
                <argumentType ref="type.3639"/>
                <argumentType ref="type.3641"/>
            </content>
        </type>
        <type id="type.3613" specialization="true">
            <name>LinkedListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="1379602"/>
                <argumentType ref="1378291"/>
                <argumentType ref="type.3610"/>
                <argumentType ref="type.3612"/>
            </content>
        </type>
        <type derived="true" id="type.3646">
            <name>LinkedListNodeIterator&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <baseType ref="type.3642"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3617">
            <name>LinkedListNodeIterator&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <baseType ref="type.3613"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3614">
            <name>LinkedListNodeIterator&lt;T, const T&amp;, const T*>*</name>
            <content>
                <baseType ref="type.3613"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3643">
            <name>LinkedListNodeIterator&lt;T, const T&amp;, const T*>*</name>
            <content>
                <baseType ref="type.3642"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385538">
            <name>LinkerVisitor</name>
        </type>
        <type derived="true" id="type.1385539">
            <name>LinkerVisitor*</name>
            <content>
                <baseType ref="1385538"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1388251" specialization="true">
            <name>List&lt;ActionParser*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1385477"/>
            </content>
        </type>
        <type derived="true" id="type.1388274">
            <name>List&lt;ActionParser*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1388251"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388252">
            <name>List&lt;ActionParser*>*</name>
            <content>
                <baseType ref="type.1388251"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1381326" specialization="true">
            <name>List&lt;Age*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1378444"/>
            </content>
        </type>
        <type id="type.1382222" specialization="true">
            <name>List&lt;AliasType*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1378493"/>
            </content>
        </type>
        <type id="type.1381864" specialization="true">
            <name>List&lt;BidiClass*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1378475"/>
            </content>
        </type>
        <type id="type.1382043" specialization="true">
            <name>List&lt;BidiPairedBracketType*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1378484"/>
            </content>
        </type>
        <type id="type.1380778" specialization="true">
            <name>List&lt;BinaryProperty*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1378423"/>
            </content>
        </type>
        <type id="type.1380966" specialization="true">
            <name>List&lt;Block*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1378430"/>
            </content>
        </type>
        <type id="type.1387744" specialization="true">
            <name>List&lt;Bucket&lt;Grammar*>*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1387728"/>
            </content>
        </type>
        <type derived="true" id="type.1388558">
            <name>List&lt;Bucket&lt;Grammar*>*>&amp;</name>
            <content>
                <baseType ref="type.1387744"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387767">
            <name>List&lt;Bucket&lt;Grammar*>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1387744"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387745">
            <name>List&lt;Bucket&lt;Grammar*>*>*</name>
            <content>
                <baseType ref="type.1387744"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1379330" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1379314"/>
            </content>
        </type>
        <type id="type.3396" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.3380"/>
            </content>
        </type>
        <type derived="true" id="type.3419">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.3396"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3397">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>*</name>
            <content>
                <baseType ref="type.3396"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1381293" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1381277"/>
            </content>
        </type>
        <type id="type.1382189" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1382173"/>
            </content>
        </type>
        <type id="type.1381831" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1381815"/>
            </content>
        </type>
        <type id="type.1382010" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1381994"/>
            </content>
        </type>
        <type id="type.1380753" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1380737"/>
            </content>
        </type>
        <type id="type.1380933" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1380917"/>
            </content>
        </type>
        <type id="type.1381114" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1381098"/>
            </content>
        </type>
        <type id="type.1381652" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1381636"/>
            </content>
        </type>
        <type id="type.1381472" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1381456"/>
            </content>
        </type>
        <type id="type.1388041" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1388025"/>
            </content>
        </type>
        <type derived="true" id="type.1388685">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*>&amp;</name>
            <content>
                <baseType ref="type.1388041"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388064">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1388041"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388042">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*>*</name>
            <content>
                <baseType ref="type.1388041"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1388107" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1388091"/>
            </content>
        </type>
        <type derived="true" id="type.1388669">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*>&amp;</name>
            <content>
                <baseType ref="type.1388107"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388130">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1388107"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388108">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*>*</name>
            <content>
                <baseType ref="type.1388107"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1388342" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1388326"/>
            </content>
        </type>
        <type derived="true" id="type.1388769">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*>&amp;</name>
            <content>
                <baseType ref="type.1388342"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388365">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1388342"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388343">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*>*</name>
            <content>
                <baseType ref="type.1388342"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1387569" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1387553"/>
            </content>
        </type>
        <type derived="true" id="type.1388417">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*>&amp;</name>
            <content>
                <baseType ref="type.1387569"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387592">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1387569"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387570">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*>*</name>
            <content>
                <baseType ref="type.1387569"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1381228" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1381212"/>
            </content>
        </type>
        <type id="type.1382124" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1382108"/>
            </content>
        </type>
        <type id="type.1381766" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1381750"/>
            </content>
        </type>
        <type id="type.1381945" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1381929"/>
            </content>
        </type>
        <type id="type.1380674" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1380658"/>
            </content>
        </type>
        <type id="type.1380868" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1380852"/>
            </content>
        </type>
        <type id="type.1381049" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1381033"/>
            </content>
        </type>
        <type id="type.1381587" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1381571"/>
            </content>
        </type>
        <type id="type.1381407" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1381391"/>
            </content>
        </type>
        <type id="type.1387824" specialization="true">
            <name>List&lt;Bucket&lt;String&lt;uchar>>*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1387809"/>
            </content>
        </type>
        <type derived="true" id="type.1388584">
            <name>List&lt;Bucket&lt;String&lt;uchar>>*>&amp;</name>
            <content>
                <baseType ref="type.1387824"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387847">
            <name>List&lt;Bucket&lt;String&lt;uchar>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1387824"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387825">
            <name>List&lt;Bucket&lt;String&lt;uchar>>*>*</name>
            <content>
                <baseType ref="type.1387824"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1379458" specialization="true">
            <name>List&lt;Bucket&lt;T>*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1379442"/>
            </content>
        </type>
        <type id="type.3472" specialization="true">
            <name>List&lt;Bucket&lt;T>*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.3456"/>
            </content>
        </type>
        <type derived="true" id="type.3495">
            <name>List&lt;Bucket&lt;T>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.3472"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3473">
            <name>List&lt;Bucket&lt;T>*>*</name>
            <content>
                <baseType ref="type.3472"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.3563" specialization="true">
            <name>List&lt;Bucket&lt;ValueType>*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.3545"/>
            </content>
        </type>
        <type derived="true" id="type.3586">
            <name>List&lt;Bucket&lt;ValueType>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.3563"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3564">
            <name>List&lt;Bucket&lt;ValueType>*>*</name>
            <content>
                <baseType ref="type.3563"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1381147" specialization="true">
            <name>List&lt;GeneralCategory*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1378437"/>
            </content>
        </type>
        <type id="type.1388137" specialization="true">
            <name>List&lt;Namespace*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1385547"/>
            </content>
        </type>
        <type derived="true" id="type.1388158">
            <name>List&lt;Namespace*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1388137"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388138">
            <name>List&lt;Namespace*>*</name>
            <content>
                <baseType ref="type.1388137"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1388276" specialization="true">
            <name>List&lt;NonterminalParser*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1385553"/>
            </content>
        </type>
        <type derived="true" id="type.1388299">
            <name>List&lt;NonterminalParser*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1388276"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388277">
            <name>List&lt;NonterminalParser*>*</name>
            <content>
                <baseType ref="type.1388276"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1381677" specialization="true">
            <name>List&lt;NumericType*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1378466"/>
            </content>
        </type>
        <type id="type.1387667" specialization="true">
            <name>List&lt;RuleLink*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1385708"/>
            </content>
        </type>
        <type derived="true" id="type.1387690">
            <name>List&lt;RuleLink*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1387667"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387668">
            <name>List&lt;RuleLink*>*</name>
            <content>
                <baseType ref="type.1387667"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1387642" specialization="true">
            <name>List&lt;RuleParser*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1385704"/>
            </content>
        </type>
        <type derived="true" id="type.1387665">
            <name>List&lt;RuleParser*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1387642"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387643">
            <name>List&lt;RuleParser*>*</name>
            <content>
                <baseType ref="type.1387642"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1381505" specialization="true">
            <name>List&lt;Script*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1378453"/>
            </content>
        </type>
        <type id="type.1380587" specialization="true">
            <name>List&lt;String&lt;CharT>></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1380562"/>
            </content>
        </type>
        <type id="type.1380407" specialization="true">
            <name>List&lt;String&lt;CharT>></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1380382"/>
            </content>
        </type>
        <type id="type.1380542" specialization="true">
            <name>List&lt;String&lt;CharT>></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1380518"/>
            </content>
        </type>
        <type id="type.1380587" specialization="true">
            <name>List&lt;String&lt;CharT>></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1380562"/>
            </content>
        </type>
        <type id="type.1380497" specialization="true">
            <name>List&lt;String&lt;CharT>></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1380472"/>
            </content>
        </type>
        <type id="type.4005" specialization="true">
            <name>List&lt;String&lt;CharT>></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1380292"/>
            </content>
        </type>
        <type id="type.1380452" specialization="true">
            <name>List&lt;String&lt;CharT>></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1380427"/>
            </content>
        </type>
        <type id="type.1380362" specialization="true">
            <name>List&lt;String&lt;CharT>></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1380337"/>
            </content>
        </type>
        <type derived="true" id="type.4024">
            <name>List&lt;String&lt;CharT>>&amp;&amp;</name>
            <content>
                <baseType ref="type.4005"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4006">
            <name>List&lt;String&lt;CharT>>*</name>
            <content>
                <baseType ref="type.4005"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1378596" specialization="true">
            <name>List&lt;String&lt;char>></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1378573"/>
            </content>
        </type>
        <type id="type.1378721" specialization="true">
            <name>List&lt;String&lt;uchar>></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1378697"/>
            </content>
        </type>
        <type id="type.1378677" specialization="true">
            <name>List&lt;String&lt;wchar>></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1378653"/>
            </content>
        </type>
        <type id="type.1378617" specialization="true">
            <name>List&lt;System.Ascii.CharClass></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="1377982"/>
            </content>
        </type>
        <type id="type.1388227" specialization="true">
            <name>List&lt;System.Text.Parsing.AttrOrVar></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="1385699"/>
            </content>
        </type>
        <type derived="true" id="type.1388250">
            <name>List&lt;System.Text.Parsing.AttrOrVar>&amp;</name>
            <content>
                <baseType ref="type.1388227"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388248">
            <name>List&lt;System.Text.Parsing.AttrOrVar>&amp;&amp;</name>
            <content>
                <baseType ref="type.1388227"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388228">
            <name>List&lt;System.Text.Parsing.AttrOrVar>*</name>
            <content>
                <baseType ref="type.1388227"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1388206" specialization="true">
            <name>List&lt;System.Text.Parsing.CharRange></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="1385591"/>
            </content>
        </type>
        <type derived="true" id="type.1388226">
            <name>List&lt;System.Text.Parsing.CharRange>&amp;&amp;</name>
            <content>
                <baseType ref="type.1388206"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388207">
            <name>List&lt;System.Text.Parsing.CharRange>*</name>
            <content>
                <baseType ref="type.1388206"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1387976" specialization="true">
            <name>List&lt;System.Text.Parsing.RuleData></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="1385568"/>
            </content>
        </type>
        <type derived="true" id="type.1387999">
            <name>List&lt;System.Text.Parsing.RuleData>&amp;&amp;</name>
            <content>
                <baseType ref="type.1387976"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387977">
            <name>List&lt;System.Text.Parsing.RuleData>*</name>
            <content>
                <baseType ref="type.1387976"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1382244" specialization="true">
            <name>List&lt;System.Unicode.Alias></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="1378500"/>
            </content>
        </type>
        <type id="type.1379733" specialization="true">
            <name>List&lt;T></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="1378302"/>
            </content>
        </type>
        <type id="type.1379758" specialization="true">
            <name>List&lt;T></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="1378303"/>
            </content>
        </type>
        <type id="type.3787" specialization="true">
            <name>List&lt;T></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="1378339"/>
            </content>
        </type>
        <type id="type.1379783" specialization="true">
            <name>List&lt;T></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="1378304"/>
            </content>
        </type>
        <type id="type.3959" specialization="true">
            <name>List&lt;T></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="1378390"/>
            </content>
        </type>
        <type id="type.1379733" specialization="true">
            <name>List&lt;T></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="1378302"/>
            </content>
        </type>
        <type derived="true" id="type.3679">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.1379733"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3809">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.3787"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3980">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.3959"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3960">
            <name>List&lt;T>*</name>
            <content>
                <baseType ref="type.3959"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3657">
            <name>List&lt;T>*</name>
            <content>
                <baseType ref="type.1379733"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3788">
            <name>List&lt;T>*</name>
            <content>
                <baseType ref="type.3787"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1385233" specialization="true">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1385223"/>
            </content>
        </type>
        <type id="type.1385292" specialization="true">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1385282"/>
            </content>
        </type>
        <type id="type.1385130" specialization="true">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1385095"/>
            </content>
        </type>
        <type id="type.1385185" specialization="true">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1385177"/>
            </content>
        </type>
        <type id="type.1387955" specialization="true">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.Context>></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1387941"/>
            </content>
        </type>
        <type derived="true" id="type.1388630">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.Context>>&amp;</name>
            <content>
                <baseType ref="type.1387955"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387974">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.Context>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1387955"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387956">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.Context>>*</name>
            <content>
                <baseType ref="type.1387955"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1387495" specialization="true">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.Object>></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1387481"/>
            </content>
        </type>
        <type derived="true" id="type.1387514">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1387495"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387496">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.Object>>*</name>
            <content>
                <baseType ref="type.1387495"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1388178" specialization="true">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1388169"/>
            </content>
        </type>
        <type derived="true" id="type.1388197">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1388178"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388179">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>>*</name>
            <content>
                <baseType ref="type.1388178"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1387460" specialization="true">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1387452"/>
            </content>
        </type>
        <type derived="true" id="type.1387479">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1387460"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387461">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>>*</name>
            <content>
                <baseType ref="type.1387460"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1382276" specialization="true">
            <name>List&lt;UniquePtr&lt;System.Unicode.CharacterInfo>></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1382268"/>
            </content>
        </type>
        <type id="type.1382366" specialization="true">
            <name>List&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1382357"/>
            </content>
        </type>
        <type id="type.1382305" specialization="true">
            <name>List&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1382297"/>
            </content>
        </type>
        <type id="type.1382404" specialization="true">
            <name>List&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1382395"/>
            </content>
        </type>
        <type id="type.1379874" specialization="true">
            <name>List&lt;byte></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1377787"/>
            </content>
        </type>
        <type id="type.1379484" specialization="true">
            <name>List&lt;long></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1377792"/>
            </content>
        </type>
        <type id="type.1382325" specialization="true">
            <name>List&lt;uint></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1377791"/>
            </content>
        </type>
        <type id="type.1378747" specialization="true">
            <name>List&lt;ulong></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1377793"/>
            </content>
        </type>
        <type id="1385510">
            <name>ListParser</name>
        </type>
        <type derived="true" id="type.1387866">
            <name>ListParser&amp;</name>
            <content>
                <baseType ref="1385510"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385511">
            <name>ListParser*</name>
            <content>
                <baseType ref="1385510"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4753">
            <name>Literal&amp;&amp;</name>
            <content>
                <baseType ref="1383542"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1379155" specialization="true">
            <name>LogicalAnd&lt;T></name>
            <content>
                <primaryType ref="1379155"/>
                <argumentType ref="1378235"/>
            </content>
        </type>
        <type id="type.1379167" specialization="true">
            <name>LogicalNot&lt;T></name>
            <content>
                <primaryType ref="1379167"/>
                <argumentType ref="1378239"/>
            </content>
        </type>
        <type id="type.1379163" specialization="true">
            <name>LogicalOr&lt;T></name>
            <content>
                <primaryType ref="1379163"/>
                <argumentType ref="1378237"/>
            </content>
        </type>
        <type id="1385607">
            <name>LowerLetterParser</name>
        </type>
        <type derived="true" id="type.1387875">
            <name>LowerLetterParser&amp;</name>
            <content>
                <baseType ref="1385607"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385608">
            <name>LowerLetterParser*</name>
            <content>
                <baseType ref="1385607"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4791">
            <name>LvalueRef&amp;&amp;</name>
            <content>
                <baseType ref="1383600"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1379811" specialization="true">
            <name>Map&lt;Key, Value, KeyCompare></name>
            <content>
                <primaryType ref="1379811"/>
                <argumentType ref="1378309"/>
                <argumentType ref="1378310"/>
                <argumentType ref="1378311"/>
            </content>
        </type>
        <type derived="true" id="type.3695">
            <name>Map&lt;Key, Value, KeyCompare>*</name>
            <content>
                <baseType ref="type.1379811"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385621">
            <name>MarkParser</name>
        </type>
        <type derived="true" id="type.1387882">
            <name>MarkParser&amp;</name>
            <content>
                <baseType ref="1385621"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385622">
            <name>MarkParser*</name>
            <content>
                <baseType ref="1385621"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385542">
            <name>Match</name>
        </type>
        <type derived="true" id="type.1388381">
            <name>Match&amp;&amp;</name>
            <content>
                <baseType ref="1385542"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385543">
            <name>Match*</name>
            <content>
                <baseType ref="1385542"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385655">
            <name>MathSymbolParser</name>
        </type>
        <type derived="true" id="type.1387899">
            <name>MathSymbolParser&amp;</name>
            <content>
                <baseType ref="1385655"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385656">
            <name>MathSymbolParser*</name>
            <content>
                <baseType ref="1385655"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1378973" specialization="true">
            <name>Minus&lt;T></name>
            <content>
                <primaryType ref="1378973"/>
                <argumentType ref="1378187"/>
            </content>
        </type>
        <type id="1385611">
            <name>ModifierLetterParser</name>
        </type>
        <type derived="true" id="type.1387877">
            <name>ModifierLetterParser&amp;</name>
            <content>
                <baseType ref="1385611"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385612">
            <name>ModifierLetterParser*</name>
            <content>
                <baseType ref="1385611"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385659">
            <name>ModifierSymbolParser</name>
        </type>
        <type derived="true" id="type.1387901">
            <name>ModifierSymbolParser&amp;</name>
            <content>
                <baseType ref="1385659"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385660">
            <name>ModifierSymbolParser*</name>
            <content>
                <baseType ref="1385659"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1378980" specialization="true">
            <name>Multiplies&lt;T></name>
            <content>
                <primaryType ref="1378980"/>
                <argumentType ref="1378189"/>
            </content>
        </type>
        <type id="type.1378987" specialization="true">
            <name>Multiplies&lt;T></name>
            <content>
                <primaryType ref="1378980"/>
                <argumentType ref="1378190"/>
            </content>
        </type>
        <type id="1385546">
            <name>Namespace</name>
        </type>
        <type derived="true" id="type.1387850">
            <name>Namespace&amp;</name>
            <content>
                <baseType ref="1385546"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385547">
            <name>Namespace*</name>
            <content>
                <baseType ref="1385546"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388132">
            <name>Namespace*&amp;</name>
            <content>
                <baseType ref="1385546"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388073">
            <name>Namespace*&amp;&amp;</name>
            <content>
                <baseType ref="1385546"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388149">
            <name>Namespace**</name>
            <content>
                <baseType ref="1385546"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388659">
            <name>Namespace**&amp;&amp;</name>
            <content>
                <baseType ref="1385546"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1378966" specialization="true">
            <name>Negate&lt;T></name>
            <content>
                <primaryType ref="1378966"/>
                <argumentType ref="1378185"/>
            </content>
        </type>
        <type derived="true" id="type.4744">
            <name>New&amp;&amp;</name>
            <content>
                <baseType ref="1383528"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="1385623">
            <name>NonspacingMarkParser</name>
        </type>
        <type derived="true" id="type.1387883">
            <name>NonspacingMarkParser&amp;</name>
            <content>
                <baseType ref="1385623"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385624">
            <name>NonspacingMarkParser*</name>
            <content>
                <baseType ref="1385623"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385552">
            <name>NonterminalParser</name>
        </type>
        <type derived="true" id="type.1387867">
            <name>NonterminalParser&amp;</name>
            <content>
                <baseType ref="1385552"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385553">
            <name>NonterminalParser*</name>
            <content>
                <baseType ref="1385552"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388289">
            <name>NonterminalParser*&amp;</name>
            <content>
                <baseType ref="1385552"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388300">
            <name>NonterminalParser*&amp;&amp;</name>
            <content>
                <baseType ref="1385552"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388290">
            <name>NonterminalParser**</name>
            <content>
                <baseType ref="1385552"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388711">
            <name>NonterminalParser**&amp;&amp;</name>
            <content>
                <baseType ref="1385552"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4702">
            <name>Not&amp;&amp;</name>
            <content>
                <baseType ref="1383448"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1379061" specialization="true">
            <name>NotEqualTo&lt;T, U></name>
            <content>
                <primaryType ref="1379061"/>
                <argumentType ref="1378212"/>
                <argumentType ref="1378213"/>
            </content>
        </type>
        <type id="type.1379050" specialization="true">
            <name>NotEqualTo&lt;T></name>
            <content>
                <primaryType ref="1379050"/>
                <argumentType ref="1378210"/>
            </content>
        </type>
        <type id="1385629">
            <name>NumberParser</name>
        </type>
        <type derived="true" id="type.1387886">
            <name>NumberParser&amp;</name>
            <content>
                <baseType ref="1385629"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385630">
            <name>NumberParser*</name>
            <content>
                <baseType ref="1385629"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385556">
            <name>Object</name>
        </type>
        <type derived="true" id="type.1387488">
            <name>Object&amp;</name>
            <content>
                <baseType ref="1385556"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385557">
            <name>Object*</name>
            <content>
                <baseType ref="1385556"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388521">
            <name>Object*&amp;</name>
            <content>
                <baseType ref="1385556"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388523">
            <name>Object*&amp;&amp;</name>
            <content>
                <baseType ref="1385556"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="1385643">
            <name>OpenPunctuationParser</name>
        </type>
        <type derived="true" id="type.1387893">
            <name>OpenPunctuationParser&amp;</name>
            <content>
                <baseType ref="1385643"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385644">
            <name>OpenPunctuationParser*</name>
            <content>
                <baseType ref="1385643"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385486">
            <name>OptionalParser</name>
        </type>
        <type derived="true" id="type.1387855">
            <name>OptionalParser&amp;</name>
            <content>
                <baseType ref="1385486"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4803">
            <name>OptionalParser&amp;&amp;</name>
            <content>
                <baseType ref="1385486"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385487">
            <name>OptionalParser*</name>
            <content>
                <baseType ref="1385486"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385613">
            <name>OtherLetterParser</name>
        </type>
        <type derived="true" id="type.1387878">
            <name>OtherLetterParser&amp;</name>
            <content>
                <baseType ref="1385613"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385614">
            <name>OtherLetterParser*</name>
            <content>
                <baseType ref="1385613"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385635">
            <name>OtherNumberParser</name>
        </type>
        <type derived="true" id="type.1387889">
            <name>OtherNumberParser&amp;</name>
            <content>
                <baseType ref="1385635"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385636">
            <name>OtherNumberParser*</name>
            <content>
                <baseType ref="1385635"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385671">
            <name>OtherParser</name>
        </type>
        <type derived="true" id="type.1387907">
            <name>OtherParser&amp;</name>
            <content>
                <baseType ref="1385671"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385672">
            <name>OtherParser*</name>
            <content>
                <baseType ref="1385671"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385651">
            <name>OtherPunctuationParser</name>
        </type>
        <type derived="true" id="type.1387897">
            <name>OtherPunctuationParser&amp;</name>
            <content>
                <baseType ref="1385651"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385652">
            <name>OtherPunctuationParser*</name>
            <content>
                <baseType ref="1385651"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385661">
            <name>OtherSymbolParser</name>
        </type>
        <type derived="true" id="type.1387902">
            <name>OtherSymbolParser&amp;</name>
            <content>
                <baseType ref="1385661"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385662">
            <name>OtherSymbolParser*</name>
            <content>
                <baseType ref="1385661"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1387740" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Grammar*, Grammar*&amp;, Grammar**, Hashtable&lt;Grammar*, Grammar*, Identity&lt;Grammar*>, Hasher&lt;Grammar*>, EqualTo&lt;Grammar*>>>, bool></name>
            <content>
                <primaryType ref="1379902"/>
                <argumentType ref="type.1387723"/>
                <argumentType ref="type.1377785"/>
            </content>
        </type>
        <type derived="true" id="type.1388555">
            <name>Pair&lt;HashtableIterator&lt;Grammar*, Grammar*&amp;, Grammar**, Hashtable&lt;Grammar*, Grammar*, Identity&lt;Grammar*>, Hasher&lt;Grammar*>, EqualTo&lt;Grammar*>>>, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.1387740"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387741">
            <name>Pair&lt;HashtableIterator&lt;Grammar*, Grammar*&amp;, Grammar**, Hashtable&lt;Grammar*, Grammar*, Identity&lt;Grammar*>, Hasher&lt;Grammar*>, EqualTo&lt;Grammar*>>>, bool>*</name>
            <content>
                <baseType ref="type.1387740"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.3392" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool></name>
            <content>
                <primaryType ref="1379902"/>
                <argumentType ref="type.3375"/>
                <argumentType ref="type.1377785"/>
            </content>
        </type>
        <type derived="true" id="type.3393">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool>*</name>
            <content>
                <baseType ref="type.3392"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1388037" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;uchar>, Grammar*>, Pair&lt;String&lt;uchar>, Grammar*>&amp;, Pair&lt;String&lt;uchar>, Grammar*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Grammar*>, SelectFirst&lt;String&lt;uchar>, Grammar*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool></name>
            <content>
                <primaryType ref="1379902"/>
                <argumentType ref="type.1388020"/>
                <argumentType ref="type.1377785"/>
            </content>
        </type>
        <type derived="true" id="type.1388682">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;uchar>, Grammar*>, Pair&lt;String&lt;uchar>, Grammar*>&amp;, Pair&lt;String&lt;uchar>, Grammar*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Grammar*>, SelectFirst&lt;String&lt;uchar>, Grammar*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.1388037"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388038">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;uchar>, Grammar*>, Pair&lt;String&lt;uchar>, Grammar*>&amp;, Pair&lt;String&lt;uchar>, Grammar*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Grammar*>, SelectFirst&lt;String&lt;uchar>, Grammar*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>*</name>
            <content>
                <baseType ref="type.1388037"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1388103" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;uchar>, Namespace*>, Pair&lt;String&lt;uchar>, Namespace*>&amp;, Pair&lt;String&lt;uchar>, Namespace*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Namespace*>, SelectFirst&lt;String&lt;uchar>, Namespace*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool></name>
            <content>
                <primaryType ref="1379902"/>
                <argumentType ref="type.1388086"/>
                <argumentType ref="type.1377785"/>
            </content>
        </type>
        <type derived="true" id="type.1388666">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;uchar>, Namespace*>, Pair&lt;String&lt;uchar>, Namespace*>&amp;, Pair&lt;String&lt;uchar>, Namespace*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Namespace*>, SelectFirst&lt;String&lt;uchar>, Namespace*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.1388103"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388104">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;uchar>, Namespace*>, Pair&lt;String&lt;uchar>, Namespace*>&amp;, Pair&lt;String&lt;uchar>, Namespace*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Namespace*>, SelectFirst&lt;String&lt;uchar>, Namespace*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>*</name>
            <content>
                <baseType ref="type.1388103"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1388338" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;uchar>, ParsingObject*>, Pair&lt;String&lt;uchar>, ParsingObject*>&amp;, Pair&lt;String&lt;uchar>, ParsingObject*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, ParsingObject*>, SelectFirst&lt;String&lt;uchar>, ParsingObject*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool></name>
            <content>
                <primaryType ref="1379902"/>
                <argumentType ref="type.1388321"/>
                <argumentType ref="type.1377785"/>
            </content>
        </type>
        <type derived="true" id="type.1388766">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;uchar>, ParsingObject*>, Pair&lt;String&lt;uchar>, ParsingObject*>&amp;, Pair&lt;String&lt;uchar>, ParsingObject*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, ParsingObject*>, SelectFirst&lt;String&lt;uchar>, ParsingObject*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.1388338"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388339">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;uchar>, ParsingObject*>, Pair&lt;String&lt;uchar>, ParsingObject*>&amp;, Pair&lt;String&lt;uchar>, ParsingObject*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, ParsingObject*>, SelectFirst&lt;String&lt;uchar>, ParsingObject*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>*</name>
            <content>
                <baseType ref="type.1388338"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1387565" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>, Pair&lt;String&lt;uchar>, String&lt;uchar>>&amp;, Pair&lt;String&lt;uchar>, String&lt;uchar>>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, String&lt;uchar>>, SelectFirst&lt;String&lt;uchar>, String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool></name>
            <content>
                <primaryType ref="1379902"/>
                <argumentType ref="type.1387548"/>
                <argumentType ref="type.1377785"/>
            </content>
        </type>
        <type derived="true" id="type.1388715">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>, Pair&lt;String&lt;uchar>, String&lt;uchar>>&amp;, Pair&lt;String&lt;uchar>, String&lt;uchar>>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, String&lt;uchar>>, SelectFirst&lt;String&lt;uchar>, String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.1387565"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387566">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>, Pair&lt;String&lt;uchar>, String&lt;uchar>>&amp;, Pair&lt;String&lt;uchar>, String&lt;uchar>>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, String&lt;uchar>>, SelectFirst&lt;String&lt;uchar>, String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>*</name>
            <content>
                <baseType ref="type.1387565"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1387820" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool></name>
            <content>
                <primaryType ref="1379902"/>
                <argumentType ref="type.1387804"/>
                <argumentType ref="type.1377785"/>
            </content>
        </type>
        <type derived="true" id="type.1388581">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.1387820"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387821">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>*</name>
            <content>
                <baseType ref="type.1387820"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.3468" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>, bool></name>
            <content>
                <primaryType ref="1379902"/>
                <argumentType ref="type.3451"/>
                <argumentType ref="type.1377785"/>
            </content>
        </type>
        <type derived="true" id="type.3469">
            <name>Pair&lt;HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>, bool>*</name>
            <content>
                <baseType ref="type.3468"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.3558" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;ValueType, ValueType&amp;, ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>>, bool></name>
            <content>
                <primaryType ref="1379902"/>
                <argumentType ref="type.3540"/>
                <argumentType ref="type.1377785"/>
            </content>
        </type>
        <type derived="true" id="type.3559">
            <name>Pair&lt;HashtableIterator&lt;ValueType, ValueType&amp;, ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>>, bool>*</name>
            <content>
                <baseType ref="type.3558"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.3357" specialization="true">
            <name>Pair&lt;K, T></name>
            <content>
                <primaryType ref="1379902"/>
                <argumentType ref="1378253"/>
                <argumentType ref="1378254"/>
            </content>
        </type>
        <type derived="true" id="type.3374">
            <name>Pair&lt;K, T>&amp;</name>
            <content>
                <baseType ref="type.3357"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3358">
            <name>Pair&lt;K, T>*</name>
            <content>
                <baseType ref="type.3357"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.3698" specialization="true">
            <name>Pair&lt;Key, Value></name>
            <content>
                <primaryType ref="1379902"/>
                <argumentType ref="1378309"/>
                <argumentType ref="1378310"/>
            </content>
        </type>
        <type derived="true" id="type.3724">
            <name>Pair&lt;Key, Value>&amp;</name>
            <content>
                <baseType ref="type.3698"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3699">
            <name>Pair&lt;Key, Value>*</name>
            <content>
                <baseType ref="type.3698"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.3737" specialization="true">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool></name>
            <content>
                <primaryType ref="1379902"/>
                <argumentType ref="type.3728"/>
                <argumentType ref="type.1377785"/>
            </content>
        </type>
        <type derived="true" id="type.3738">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool>*</name>
            <content>
                <baseType ref="type.3737"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.3924" specialization="true">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;T, T&amp;, T*>, bool></name>
            <content>
                <primaryType ref="1379902"/>
                <argumentType ref="type.3915"/>
                <argumentType ref="type.1377785"/>
            </content>
        </type>
        <type derived="true" id="type.3925">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;T, T&amp;, T*>, bool>*</name>
            <content>
                <baseType ref="type.3924"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.3876" specialization="true">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*>, bool></name>
            <content>
                <primaryType ref="1379902"/>
                <argumentType ref="type.3866"/>
                <argumentType ref="type.1377785"/>
            </content>
        </type>
        <type derived="true" id="type.3877">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*>, bool>*</name>
            <content>
                <baseType ref="type.3876"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1388005" specialization="true">
            <name>Pair&lt;String&lt;uchar>, Grammar*></name>
            <content>
                <primaryType ref="1379902"/>
                <argumentType ref="type.1378697"/>
                <argumentType ref="type.1385523"/>
            </content>
        </type>
        <type derived="true" id="type.1388019">
            <name>Pair&lt;String&lt;uchar>, Grammar*>&amp;</name>
            <content>
                <baseType ref="type.1388005"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388635">
            <name>Pair&lt;String&lt;uchar>, Grammar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1388005"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388006">
            <name>Pair&lt;String&lt;uchar>, Grammar*>*</name>
            <content>
                <baseType ref="type.1388005"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1388070" specialization="true">
            <name>Pair&lt;String&lt;uchar>, Namespace*></name>
            <content>
                <primaryType ref="1379902"/>
                <argumentType ref="type.1378697"/>
                <argumentType ref="type.1385547"/>
            </content>
        </type>
        <type derived="true" id="type.1388085">
            <name>Pair&lt;String&lt;uchar>, Namespace*>&amp;</name>
            <content>
                <baseType ref="type.1388070"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388646">
            <name>Pair&lt;String&lt;uchar>, Namespace*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1388070"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388071">
            <name>Pair&lt;String&lt;uchar>, Namespace*>*</name>
            <content>
                <baseType ref="type.1388070"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1388305" specialization="true">
            <name>Pair&lt;String&lt;uchar>, ParsingObject*></name>
            <content>
                <primaryType ref="1379902"/>
                <argumentType ref="type.1378697"/>
                <argumentType ref="type.1385580"/>
            </content>
        </type>
        <type derived="true" id="type.1388320">
            <name>Pair&lt;String&lt;uchar>, ParsingObject*>&amp;</name>
            <content>
                <baseType ref="type.1388305"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388746">
            <name>Pair&lt;String&lt;uchar>, ParsingObject*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1388305"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388306">
            <name>Pair&lt;String&lt;uchar>, ParsingObject*>*</name>
            <content>
                <baseType ref="type.1388305"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1387534" specialization="true">
            <name>Pair&lt;String&lt;uchar>, String&lt;uchar>></name>
            <content>
                <primaryType ref="1379902"/>
                <argumentType ref="type.1378697"/>
                <argumentType ref="type.1378697"/>
            </content>
        </type>
        <type derived="true" id="type.1387547">
            <name>Pair&lt;String&lt;uchar>, String&lt;uchar>>&amp;</name>
            <content>
                <baseType ref="type.1387534"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388389">
            <name>Pair&lt;String&lt;uchar>, String&lt;uchar>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1387534"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387535">
            <name>Pair&lt;String&lt;uchar>, String&lt;uchar>>*</name>
            <content>
                <baseType ref="type.1387534"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1379902" specialization="true">
            <name>Pair&lt;T, U></name>
            <content>
                <primaryType ref="1379902"/>
                <argumentType ref="1378321"/>
                <argumentType ref="1378322"/>
            </content>
        </type>
        <type id="type.3773" specialization="true">
            <name>Pair&lt;T, U></name>
            <content>
                <primaryType ref="1379902"/>
                <argumentType ref="1378333"/>
                <argumentType ref="1378334"/>
            </content>
        </type>
        <type id="type.3762" specialization="true">
            <name>Pair&lt;T, U></name>
            <content>
                <primaryType ref="1379902"/>
                <argumentType ref="1378330"/>
                <argumentType ref="1378331"/>
            </content>
        </type>
        <type derived="true" id="type.3774">
            <name>Pair&lt;T, U>*</name>
            <content>
                <baseType ref="type.3773"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3763">
            <name>Pair&lt;T, U>*</name>
            <content>
                <baseType ref="type.3762"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3755">
            <name>Pair&lt;T, U>*</name>
            <content>
                <baseType ref="type.1379902"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385669">
            <name>ParagraphSeparatorParser</name>
        </type>
        <type derived="true" id="type.1387906">
            <name>ParagraphSeparatorParser&amp;</name>
            <content>
                <baseType ref="1385669"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385670">
            <name>ParagraphSeparatorParser*</name>
            <content>
                <baseType ref="1385669"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385560">
            <name>Parser</name>
        </type>
        <type derived="true" id="type.1388948">
            <name>Parser&amp;&amp;</name>
            <content>
                <baseType ref="1385560"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385561">
            <name>Parser*</name>
            <content>
                <baseType ref="1385560"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3049">
            <name>Parser*</name>
            <content>
                <baseType ref="1385560"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385561">
            <name>Parser*</name>
            <content>
                <baseType ref="1385560"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388447">
            <name>Parser*&amp;&amp;</name>
            <content>
                <baseType ref="1385560"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="1385474">
            <name>ParsingAction</name>
        </type>
        <type derived="true" id="type.1387442">
            <name>ParsingAction&amp;&amp;</name>
            <content>
                <baseType ref="1385474"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387439">
            <name>ParsingAction*</name>
            <content>
                <baseType ref="1385474"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385569">
            <name>ParsingData</name>
        </type>
        <type derived="true" id="type.4820">
            <name>ParsingData&amp;&amp;</name>
            <content>
                <baseType ref="1385569"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385570">
            <name>ParsingData*</name>
            <content>
                <baseType ref="1385569"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385573">
            <name>ParsingDomain</name>
        </type>
        <type derived="true" id="type.1388175">
            <name>ParsingDomain&amp;</name>
            <content>
                <baseType ref="1385573"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385574">
            <name>ParsingDomain*</name>
            <content>
                <baseType ref="1385573"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3050">
            <name>ParsingDomain*</name>
            <content>
                <baseType ref="1385573"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385574">
            <name>ParsingDomain*</name>
            <content>
                <baseType ref="1385573"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388695">
            <name>ParsingDomain*&amp;</name>
            <content>
                <baseType ref="1385573"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388479">
            <name>ParsingDomain*&amp;&amp;</name>
            <content>
                <baseType ref="1385573"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="1385577">
            <name>ParsingDomainRepository</name>
        </type>
        <type derived="true" id="type.1388159">
            <name>ParsingDomainRepository&amp;</name>
            <content>
                <baseType ref="1385577"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385578">
            <name>ParsingDomainRepository*</name>
            <content>
                <baseType ref="1385577"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385518">
            <name>ParsingException</name>
        </type>
        <type derived="true" id="type.1388477">
            <name>ParsingException&amp;&amp;</name>
            <content>
                <baseType ref="1385518"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385519">
            <name>ParsingException*</name>
            <content>
                <baseType ref="1385518"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385579">
            <name>ParsingObject</name>
        </type>
        <type derived="true" id="type.1387458">
            <name>ParsingObject&amp;</name>
            <content>
                <baseType ref="1385579"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387450">
            <name>ParsingObject&amp;&amp;</name>
            <content>
                <baseType ref="1385579"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385580">
            <name>ParsingObject*</name>
            <content>
                <baseType ref="1385579"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388367">
            <name>ParsingObject*&amp;</name>
            <content>
                <baseType ref="1385579"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388308">
            <name>ParsingObject*&amp;&amp;</name>
            <content>
                <baseType ref="1385579"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1378959" specialization="true">
            <name>Plus&lt;T></name>
            <content>
                <primaryType ref="1378952"/>
                <argumentType ref="1378183"/>
            </content>
        </type>
        <type id="type.1378952" specialization="true">
            <name>Plus&lt;T></name>
            <content>
                <primaryType ref="1378952"/>
                <argumentType ref="1378182"/>
            </content>
        </type>
        <type derived="true" id="type.4797">
            <name>Pointer&amp;&amp;</name>
            <content>
                <baseType ref="1383604"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="1385488">
            <name>PositiveParser</name>
        </type>
        <type derived="true" id="type.1387856">
            <name>PositiveParser&amp;</name>
            <content>
                <baseType ref="1385488"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4806">
            <name>PositiveParser&amp;&amp;</name>
            <content>
                <baseType ref="1385488"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385489">
            <name>PositiveParser*</name>
            <content>
                <baseType ref="1385488"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385549">
            <name>PostCall</name>
        </type>
        <type derived="true" id="type.1387933">
            <name>PostCall&amp;&amp;</name>
            <content>
                <baseType ref="1385549"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387930">
            <name>PostCall*</name>
            <content>
                <baseType ref="1385549"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4732">
            <name>PostfixDecrement&amp;&amp;</name>
            <content>
                <baseType ref="1383518"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4729">
            <name>PostfixIncrement&amp;&amp;</name>
            <content>
                <baseType ref="1383516"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="1385548">
            <name>PreCall</name>
        </type>
        <type derived="true" id="type.1387927">
            <name>PreCall&amp;&amp;</name>
            <content>
                <baseType ref="1385548"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387924">
            <name>PreCall*</name>
            <content>
                <baseType ref="1385548"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4714">
            <name>PrefixDecrement&amp;&amp;</name>
            <content>
                <baseType ref="1383456"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4711">
            <name>PrefixIncrement&amp;&amp;</name>
            <content>
                <baseType ref="1383454"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="1385679">
            <name>PrivateUseParser</name>
        </type>
        <type derived="true" id="type.1387911">
            <name>PrivateUseParser&amp;</name>
            <content>
                <baseType ref="1385679"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385680">
            <name>PrivateUseParser*</name>
            <content>
                <baseType ref="1385679"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385637">
            <name>PunctuationParser</name>
        </type>
        <type derived="true" id="type.1387890">
            <name>PunctuationParser&amp;</name>
            <content>
                <baseType ref="1385637"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385638">
            <name>PunctuationParser*</name>
            <content>
                <baseType ref="1385637"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1379957" specialization="true">
            <name>Queue&lt;T></name>
            <content>
                <primaryType ref="1379957"/>
                <argumentType ref="1378339"/>
            </content>
        </type>
        <type derived="true" id="type.3784">
            <name>Queue&lt;T>*</name>
            <content>
                <baseType ref="type.1379957"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1388266" specialization="true">
            <name>RandomAccessIter&lt;ActionParser*, ActionParser*&amp;, ActionParser**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1385477"/>
                <argumentType ref="type.1388264"/>
                <argumentType ref="type.1388265"/>
            </content>
        </type>
        <type derived="true" id="type.1388272">
            <name>RandomAccessIter&lt;ActionParser*, ActionParser*&amp;, ActionParser**>&amp;</name>
            <content>
                <baseType ref="type.1388266"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388271">
            <name>RandomAccessIter&lt;ActionParser*, ActionParser*&amp;, ActionParser**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1388266"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388267">
            <name>RandomAccessIter&lt;ActionParser*, ActionParser*&amp;, ActionParser**>*</name>
            <content>
                <baseType ref="type.1388266"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1388257" specialization="true">
            <name>RandomAccessIter&lt;ActionParser*, const ActionParser*&amp;, const ActionParser**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1385477"/>
                <argumentType ref="type.1388255"/>
                <argumentType ref="type.1388256"/>
            </content>
        </type>
        <type derived="true" id="type.1388263">
            <name>RandomAccessIter&lt;ActionParser*, const ActionParser*&amp;, const ActionParser**>&amp;</name>
            <content>
                <baseType ref="type.1388257"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4637">
            <name>RandomAccessIter&lt;ActionParser*, const ActionParser*&amp;, const ActionParser**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1388257"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388258">
            <name>RandomAccessIter&lt;ActionParser*, const ActionParser*&amp;, const ActionParser**>*</name>
            <content>
                <baseType ref="type.1388257"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1381339" specialization="true">
            <name>RandomAccessIter&lt;Age*, Age*&amp;, Age**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1378444"/>
                <argumentType ref="type.1381253"/>
                <argumentType ref="type.1381338"/>
            </content>
        </type>
        <type id="type.1381331" specialization="true">
            <name>RandomAccessIter&lt;Age*, const Age*&amp;, const Age**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1378444"/>
                <argumentType ref="type.1381193"/>
                <argumentType ref="type.1381330"/>
            </content>
        </type>
        <type derived="true" id="type.4240">
            <name>RandomAccessIter&lt;Age*, const Age*&amp;, const Age**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1381331"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1382235" specialization="true">
            <name>RandomAccessIter&lt;AliasType*, AliasType*&amp;, AliasType**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1378493"/>
                <argumentType ref="type.1382149"/>
                <argumentType ref="type.1382234"/>
            </content>
        </type>
        <type id="type.1382227" specialization="true">
            <name>RandomAccessIter&lt;AliasType*, const AliasType*&amp;, const AliasType**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1378493"/>
                <argumentType ref="type.1382089"/>
                <argumentType ref="type.1382226"/>
            </content>
        </type>
        <type derived="true" id="type.4405">
            <name>RandomAccessIter&lt;AliasType*, const AliasType*&amp;, const AliasType**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1382227"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1381877" specialization="true">
            <name>RandomAccessIter&lt;BidiClass*, BidiClass*&amp;, BidiClass**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1378475"/>
                <argumentType ref="type.1381791"/>
                <argumentType ref="type.1381876"/>
            </content>
        </type>
        <type id="type.1381869" specialization="true">
            <name>RandomAccessIter&lt;BidiClass*, const BidiClass*&amp;, const BidiClass**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1378475"/>
                <argumentType ref="type.1381731"/>
                <argumentType ref="type.1381868"/>
            </content>
        </type>
        <type derived="true" id="type.4339">
            <name>RandomAccessIter&lt;BidiClass*, const BidiClass*&amp;, const BidiClass**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1381869"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1382056" specialization="true">
            <name>RandomAccessIter&lt;BidiPairedBracketType*, BidiPairedBracketType*&amp;, BidiPairedBracketType**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1378484"/>
                <argumentType ref="type.1381970"/>
                <argumentType ref="type.1382055"/>
            </content>
        </type>
        <type id="type.1382048" specialization="true">
            <name>RandomAccessIter&lt;BidiPairedBracketType*, const BidiPairedBracketType*&amp;, const BidiPairedBracketType**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1378484"/>
                <argumentType ref="type.1381910"/>
                <argumentType ref="type.1382047"/>
            </content>
        </type>
        <type derived="true" id="type.4372">
            <name>RandomAccessIter&lt;BidiPairedBracketType*, const BidiPairedBracketType*&amp;, const BidiPairedBracketType**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1382048"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1380791" specialization="true">
            <name>RandomAccessIter&lt;BinaryProperty*, BinaryProperty*&amp;, BinaryProperty**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1378423"/>
                <argumentType ref="type.1380699"/>
                <argumentType ref="type.1380790"/>
            </content>
        </type>
        <type id="type.1380783" specialization="true">
            <name>RandomAccessIter&lt;BinaryProperty*, const BinaryProperty*&amp;, const BinaryProperty**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1378423"/>
                <argumentType ref="type.1380639"/>
                <argumentType ref="type.1380782"/>
            </content>
        </type>
        <type derived="true" id="type.4140">
            <name>RandomAccessIter&lt;BinaryProperty*, const BinaryProperty*&amp;, const BinaryProperty**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380783"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1380979" specialization="true">
            <name>RandomAccessIter&lt;Block*, Block*&amp;, Block**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1378430"/>
                <argumentType ref="type.1380893"/>
                <argumentType ref="type.1380978"/>
            </content>
        </type>
        <type id="type.1380971" specialization="true">
            <name>RandomAccessIter&lt;Block*, const Block*&amp;, const Block**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1378430"/>
                <argumentType ref="type.1380833"/>
                <argumentType ref="type.1380970"/>
            </content>
        </type>
        <type derived="true" id="type.4174">
            <name>RandomAccessIter&lt;Block*, const Block*&amp;, const Block**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380971"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1387759" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Grammar*>*, Bucket&lt;Grammar*>*&amp;, Bucket&lt;Grammar*>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1387728"/>
                <argumentType ref="type.1387757"/>
                <argumentType ref="type.1387758"/>
            </content>
        </type>
        <type derived="true" id="type.1387765">
            <name>RandomAccessIter&lt;Bucket&lt;Grammar*>*, Bucket&lt;Grammar*>*&amp;, Bucket&lt;Grammar*>**>&amp;</name>
            <content>
                <baseType ref="type.1387759"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4543">
            <name>RandomAccessIter&lt;Bucket&lt;Grammar*>*, Bucket&lt;Grammar*>*&amp;, Bucket&lt;Grammar*>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1387759"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387760">
            <name>RandomAccessIter&lt;Bucket&lt;Grammar*>*, Bucket&lt;Grammar*>*&amp;, Bucket&lt;Grammar*>**>*</name>
            <content>
                <baseType ref="type.1387759"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1387750" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Grammar*>*, const Bucket&lt;Grammar*>*&amp;, const Bucket&lt;Grammar*>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1387728"/>
                <argumentType ref="type.1387748"/>
                <argumentType ref="type.1387749"/>
            </content>
        </type>
        <type derived="true" id="type.1387756">
            <name>RandomAccessIter&lt;Bucket&lt;Grammar*>*, const Bucket&lt;Grammar*>*&amp;, const Bucket&lt;Grammar*>**>&amp;</name>
            <content>
                <baseType ref="type.1387750"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4540">
            <name>RandomAccessIter&lt;Bucket&lt;Grammar*>*, const Bucket&lt;Grammar*>*&amp;, const Bucket&lt;Grammar*>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1387750"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387751">
            <name>RandomAccessIter&lt;Bucket&lt;Grammar*>*, const Bucket&lt;Grammar*>*&amp;, const Bucket&lt;Grammar*>**>*</name>
            <content>
                <baseType ref="type.1387750"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1379345" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1379314"/>
                <argumentType ref="type.1379343"/>
                <argumentType ref="type.1379344"/>
            </content>
        </type>
        <type id="type.3411" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.3380"/>
                <argumentType ref="type.3409"/>
                <argumentType ref="type.3410"/>
            </content>
        </type>
        <type derived="true" id="type.3417">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <baseType ref="type.3411"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3434">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1379345"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3416">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.3411"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3412">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <baseType ref="type.3411"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1379336" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1379314"/>
                <argumentType ref="type.1379334"/>
                <argumentType ref="type.1379335"/>
            </content>
        </type>
        <type id="type.3402" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.3380"/>
                <argumentType ref="type.3400"/>
                <argumentType ref="type.3401"/>
            </content>
        </type>
        <type derived="true" id="type.3408">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <baseType ref="type.3402"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3431">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1379336"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3407">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.3402"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3403">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <baseType ref="type.3402"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1381308" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Age*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1381277"/>
                <argumentType ref="type.1381306"/>
                <argumentType ref="type.1381307"/>
            </content>
        </type>
        <type derived="true" id="type.4235">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1381308"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1381299" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1381277"/>
                <argumentType ref="type.1381297"/>
                <argumentType ref="type.1381298"/>
            </content>
        </type>
        <type derived="true" id="type.4232">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1381299"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1382204" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1382173"/>
                <argumentType ref="type.1382202"/>
                <argumentType ref="type.1382203"/>
            </content>
        </type>
        <type derived="true" id="type.4400">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1382204"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1382195" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1382173"/>
                <argumentType ref="type.1382193"/>
                <argumentType ref="type.1382194"/>
            </content>
        </type>
        <type derived="true" id="type.4397">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1382195"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1381846" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1381815"/>
                <argumentType ref="type.1381844"/>
                <argumentType ref="type.1381845"/>
            </content>
        </type>
        <type derived="true" id="type.4334">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1381846"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1381837" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1381815"/>
                <argumentType ref="type.1381835"/>
                <argumentType ref="type.1381836"/>
            </content>
        </type>
        <type derived="true" id="type.4331">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1381837"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1382025" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1381994"/>
                <argumentType ref="type.1382023"/>
                <argumentType ref="type.1382024"/>
            </content>
        </type>
        <type derived="true" id="type.4367">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1382025"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1382016" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1381994"/>
                <argumentType ref="type.1382014"/>
                <argumentType ref="type.1382015"/>
            </content>
        </type>
        <type derived="true" id="type.4364">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1382016"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1380768" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1380737"/>
                <argumentType ref="type.1380766"/>
                <argumentType ref="type.1380767"/>
            </content>
        </type>
        <type derived="true" id="type.4136">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380768"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1380759" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1380737"/>
                <argumentType ref="type.1380757"/>
                <argumentType ref="type.1380758"/>
            </content>
        </type>
        <type derived="true" id="type.4133">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380759"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1380948" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Block*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1380917"/>
                <argumentType ref="type.1380946"/>
                <argumentType ref="type.1380947"/>
            </content>
        </type>
        <type derived="true" id="type.4169">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380948"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1380939" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1380917"/>
                <argumentType ref="type.1380937"/>
                <argumentType ref="type.1380938"/>
            </content>
        </type>
        <type derived="true" id="type.4166">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380939"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1381129" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1381098"/>
                <argumentType ref="type.1381127"/>
                <argumentType ref="type.1381128"/>
            </content>
        </type>
        <type derived="true" id="type.4202">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1381129"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1381120" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1381098"/>
                <argumentType ref="type.1381118"/>
                <argumentType ref="type.1381119"/>
            </content>
        </type>
        <type derived="true" id="type.4199">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1381120"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1381667" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1381636"/>
                <argumentType ref="type.1381665"/>
                <argumentType ref="type.1381666"/>
            </content>
        </type>
        <type derived="true" id="type.4301">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1381667"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1381658" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1381636"/>
                <argumentType ref="type.1381656"/>
                <argumentType ref="type.1381657"/>
            </content>
        </type>
        <type derived="true" id="type.4298">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1381658"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1381487" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Script*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1381456"/>
                <argumentType ref="type.1381485"/>
                <argumentType ref="type.1381486"/>
            </content>
        </type>
        <type derived="true" id="type.4268">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1381487"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1381478" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1381456"/>
                <argumentType ref="type.1381476"/>
                <argumentType ref="type.1381477"/>
            </content>
        </type>
        <type derived="true" id="type.4265">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1381478"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1388056" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1388025"/>
                <argumentType ref="type.1388054"/>
                <argumentType ref="type.1388055"/>
            </content>
        </type>
        <type derived="true" id="type.1388062">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**>&amp;</name>
            <content>
                <baseType ref="type.1388056"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4592">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1388056"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388057">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**>*</name>
            <content>
                <baseType ref="type.1388056"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1388047" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1388025"/>
                <argumentType ref="type.1388045"/>
                <argumentType ref="type.1388046"/>
            </content>
        </type>
        <type derived="true" id="type.1388053">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**>&amp;</name>
            <content>
                <baseType ref="type.1388047"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4589">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1388047"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388048">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**>*</name>
            <content>
                <baseType ref="type.1388047"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1388122" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1388091"/>
                <argumentType ref="type.1388120"/>
                <argumentType ref="type.1388121"/>
            </content>
        </type>
        <type derived="true" id="type.1388128">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**>&amp;</name>
            <content>
                <baseType ref="type.1388122"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4605">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1388122"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388123">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**>*</name>
            <content>
                <baseType ref="type.1388122"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1388113" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1388091"/>
                <argumentType ref="type.1388111"/>
                <argumentType ref="type.1388112"/>
            </content>
        </type>
        <type derived="true" id="type.1388119">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**>&amp;</name>
            <content>
                <baseType ref="type.1388113"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4602">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1388113"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388114">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**>*</name>
            <content>
                <baseType ref="type.1388113"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1388357" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1388326"/>
                <argumentType ref="type.1388355"/>
                <argumentType ref="type.1388356"/>
            </content>
        </type>
        <type derived="true" id="type.1388363">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**>&amp;</name>
            <content>
                <baseType ref="type.1388357"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4656">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1388357"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388358">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**>*</name>
            <content>
                <baseType ref="type.1388357"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1388348" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1388326"/>
                <argumentType ref="type.1388346"/>
                <argumentType ref="type.1388347"/>
            </content>
        </type>
        <type derived="true" id="type.1388354">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**>&amp;</name>
            <content>
                <baseType ref="type.1388348"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4653">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1388348"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388349">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**>*</name>
            <content>
                <baseType ref="type.1388348"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1387584" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*, Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1387553"/>
                <argumentType ref="type.1387582"/>
                <argumentType ref="type.1387583"/>
            </content>
        </type>
        <type derived="true" id="type.1387590">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*, Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**>&amp;</name>
            <content>
                <baseType ref="type.1387584"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4520">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*, Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1387584"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387585">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*, Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**>*</name>
            <content>
                <baseType ref="type.1387584"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1387575" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1387553"/>
                <argumentType ref="type.1387573"/>
                <argumentType ref="type.1387574"/>
            </content>
        </type>
        <type derived="true" id="type.1387581">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**>&amp;</name>
            <content>
                <baseType ref="type.1387575"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4517">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1387575"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387576">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**>*</name>
            <content>
                <baseType ref="type.1387575"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1381243" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1381212"/>
                <argumentType ref="type.1381241"/>
                <argumentType ref="type.1381242"/>
            </content>
        </type>
        <type derived="true" id="type.4222">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1381243"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1381234" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1381212"/>
                <argumentType ref="type.1381232"/>
                <argumentType ref="type.1381233"/>
            </content>
        </type>
        <type derived="true" id="type.4219">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1381234"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1382139" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1382108"/>
                <argumentType ref="type.1382137"/>
                <argumentType ref="type.1382138"/>
            </content>
        </type>
        <type derived="true" id="type.4387">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1382139"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1382130" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1382108"/>
                <argumentType ref="type.1382128"/>
                <argumentType ref="type.1382129"/>
            </content>
        </type>
        <type derived="true" id="type.4384">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1382130"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1381781" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1381750"/>
                <argumentType ref="type.1381779"/>
                <argumentType ref="type.1381780"/>
            </content>
        </type>
        <type derived="true" id="type.4321">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1381781"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1381772" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1381750"/>
                <argumentType ref="type.1381770"/>
                <argumentType ref="type.1381771"/>
            </content>
        </type>
        <type derived="true" id="type.4318">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1381772"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1381960" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1381929"/>
                <argumentType ref="type.1381958"/>
                <argumentType ref="type.1381959"/>
            </content>
        </type>
        <type derived="true" id="type.4354">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1381960"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1381951" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1381929"/>
                <argumentType ref="type.1381949"/>
                <argumentType ref="type.1381950"/>
            </content>
        </type>
        <type derived="true" id="type.4351">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1381951"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1380689" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1380658"/>
                <argumentType ref="type.1380687"/>
                <argumentType ref="type.1380688"/>
            </content>
        </type>
        <type derived="true" id="type.4122">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380689"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1380680" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1380658"/>
                <argumentType ref="type.1380678"/>
                <argumentType ref="type.1380679"/>
            </content>
        </type>
        <type derived="true" id="type.4119">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380680"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1380883" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1380852"/>
                <argumentType ref="type.1380881"/>
                <argumentType ref="type.1380882"/>
            </content>
        </type>
        <type derived="true" id="type.4156">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380883"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1380874" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1380852"/>
                <argumentType ref="type.1380872"/>
                <argumentType ref="type.1380873"/>
            </content>
        </type>
        <type derived="true" id="type.4153">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380874"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1381064" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1381033"/>
                <argumentType ref="type.1381062"/>
                <argumentType ref="type.1381063"/>
            </content>
        </type>
        <type derived="true" id="type.4189">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1381064"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1381055" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1381033"/>
                <argumentType ref="type.1381053"/>
                <argumentType ref="type.1381054"/>
            </content>
        </type>
        <type derived="true" id="type.4186">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1381055"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1381602" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1381571"/>
                <argumentType ref="type.1381600"/>
                <argumentType ref="type.1381601"/>
            </content>
        </type>
        <type derived="true" id="type.4288">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1381602"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1381593" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1381571"/>
                <argumentType ref="type.1381591"/>
                <argumentType ref="type.1381592"/>
            </content>
        </type>
        <type derived="true" id="type.4285">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1381593"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1381422" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1381391"/>
                <argumentType ref="type.1381420"/>
                <argumentType ref="type.1381421"/>
            </content>
        </type>
        <type derived="true" id="type.4255">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1381422"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1381413" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1381391"/>
                <argumentType ref="type.1381411"/>
                <argumentType ref="type.1381412"/>
            </content>
        </type>
        <type derived="true" id="type.4252">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1381413"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1387839" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;String&lt;uchar>>*, Bucket&lt;String&lt;uchar>>*&amp;, Bucket&lt;String&lt;uchar>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1387809"/>
                <argumentType ref="type.1387837"/>
                <argumentType ref="type.1387838"/>
            </content>
        </type>
        <type derived="true" id="type.1387845">
            <name>RandomAccessIter&lt;Bucket&lt;String&lt;uchar>>*, Bucket&lt;String&lt;uchar>>*&amp;, Bucket&lt;String&lt;uchar>>**>&amp;</name>
            <content>
                <baseType ref="type.1387839"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4558">
            <name>RandomAccessIter&lt;Bucket&lt;String&lt;uchar>>*, Bucket&lt;String&lt;uchar>>*&amp;, Bucket&lt;String&lt;uchar>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1387839"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387840">
            <name>RandomAccessIter&lt;Bucket&lt;String&lt;uchar>>*, Bucket&lt;String&lt;uchar>>*&amp;, Bucket&lt;String&lt;uchar>>**>*</name>
            <content>
                <baseType ref="type.1387839"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1387830" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;String&lt;uchar>>*, const Bucket&lt;String&lt;uchar>>*&amp;, const Bucket&lt;String&lt;uchar>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1387809"/>
                <argumentType ref="type.1387828"/>
                <argumentType ref="type.1387829"/>
            </content>
        </type>
        <type derived="true" id="type.1387836">
            <name>RandomAccessIter&lt;Bucket&lt;String&lt;uchar>>*, const Bucket&lt;String&lt;uchar>>*&amp;, const Bucket&lt;String&lt;uchar>>**>&amp;</name>
            <content>
                <baseType ref="type.1387830"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4555">
            <name>RandomAccessIter&lt;Bucket&lt;String&lt;uchar>>*, const Bucket&lt;String&lt;uchar>>*&amp;, const Bucket&lt;String&lt;uchar>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1387830"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387831">
            <name>RandomAccessIter&lt;Bucket&lt;String&lt;uchar>>*, const Bucket&lt;String&lt;uchar>>*&amp;, const Bucket&lt;String&lt;uchar>>**>*</name>
            <content>
                <baseType ref="type.1387830"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.3487" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.3456"/>
                <argumentType ref="type.3485"/>
                <argumentType ref="type.3486"/>
            </content>
        </type>
        <type id="type.1379473" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1379442"/>
                <argumentType ref="type.1379471"/>
                <argumentType ref="type.1379472"/>
            </content>
        </type>
        <type derived="true" id="type.3493">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**>&amp;</name>
            <content>
                <baseType ref="type.3487"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3492">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.3487"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3509">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1379473"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3488">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**>*</name>
            <content>
                <baseType ref="type.3487"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.3478" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.3456"/>
                <argumentType ref="type.3476"/>
                <argumentType ref="type.3477"/>
            </content>
        </type>
        <type id="type.1379464" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1379442"/>
                <argumentType ref="type.1379462"/>
                <argumentType ref="type.1379463"/>
            </content>
        </type>
        <type derived="true" id="type.3484">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>&amp;</name>
            <content>
                <baseType ref="type.3478"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3506">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1379464"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3483">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.3478"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3479">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>*</name>
            <content>
                <baseType ref="type.3478"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.3578" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, Bucket&lt;ValueType>*&amp;, Bucket&lt;ValueType>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.3545"/>
                <argumentType ref="type.3576"/>
                <argumentType ref="type.3577"/>
            </content>
        </type>
        <type derived="true" id="type.3584">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, Bucket&lt;ValueType>*&amp;, Bucket&lt;ValueType>**>&amp;</name>
            <content>
                <baseType ref="type.3578"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3583">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, Bucket&lt;ValueType>*&amp;, Bucket&lt;ValueType>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.3578"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3579">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, Bucket&lt;ValueType>*&amp;, Bucket&lt;ValueType>**>*</name>
            <content>
                <baseType ref="type.3578"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.3569" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, const Bucket&lt;ValueType>*&amp;, const Bucket&lt;ValueType>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.3545"/>
                <argumentType ref="type.3567"/>
                <argumentType ref="type.3568"/>
            </content>
        </type>
        <type derived="true" id="type.3575">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, const Bucket&lt;ValueType>*&amp;, const Bucket&lt;ValueType>**>&amp;</name>
            <content>
                <baseType ref="type.3569"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3574">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, const Bucket&lt;ValueType>*&amp;, const Bucket&lt;ValueType>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.3569"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3570">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, const Bucket&lt;ValueType>*&amp;, const Bucket&lt;ValueType>**>*</name>
            <content>
                <baseType ref="type.3569"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1380532" specialization="true">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378409"/>
                <argumentType ref="type.1380530"/>
                <argumentType ref="type.1380531"/>
            </content>
        </type>
        <type id="type.1380397" specialization="true">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378406"/>
                <argumentType ref="type.1380395"/>
                <argumentType ref="type.1380396"/>
            </content>
        </type>
        <type id="type.1380442" specialization="true">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378407"/>
                <argumentType ref="type.1380440"/>
                <argumentType ref="type.1380441"/>
            </content>
        </type>
        <type id="type.1380352" specialization="true">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378405"/>
                <argumentType ref="type.1380350"/>
                <argumentType ref="type.1380351"/>
            </content>
        </type>
        <type id="type.1380532" specialization="true">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378409"/>
                <argumentType ref="type.1380530"/>
                <argumentType ref="type.1380531"/>
            </content>
        </type>
        <type id="type.1380487" specialization="true">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378408"/>
                <argumentType ref="type.1380485"/>
                <argumentType ref="type.1380486"/>
            </content>
        </type>
        <type id="type.3995" specialization="true">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378404"/>
                <argumentType ref="type.3993"/>
                <argumentType ref="type.3994"/>
            </content>
        </type>
        <type id="type.1380577" specialization="true">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378410"/>
                <argumentType ref="type.1380575"/>
                <argumentType ref="type.1380576"/>
            </content>
        </type>
        <type derived="true" id="type.4001">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;</name>
            <content>
                <baseType ref="type.3995"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4045">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380397"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4031">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380352"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4000">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.3995"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4059">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380442"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4087">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380532"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4073">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380487"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4101">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380577"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3996">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>*</name>
            <content>
                <baseType ref="type.3995"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1380388" specialization="true">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378406"/>
                <argumentType ref="type.1380386"/>
                <argumentType ref="type.1380387"/>
            </content>
        </type>
        <type id="type.1380433" specialization="true">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378407"/>
                <argumentType ref="type.1380431"/>
                <argumentType ref="type.1380432"/>
            </content>
        </type>
        <type id="type.1380478" specialization="true">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378408"/>
                <argumentType ref="type.1380476"/>
                <argumentType ref="type.1380477"/>
            </content>
        </type>
        <type id="type.1380568" specialization="true">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378410"/>
                <argumentType ref="type.1380566"/>
                <argumentType ref="type.1380567"/>
            </content>
        </type>
        <type id="type.1380343" specialization="true">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378405"/>
                <argumentType ref="type.1380341"/>
                <argumentType ref="type.1380342"/>
            </content>
        </type>
        <type id="type.3986" specialization="true">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378404"/>
                <argumentType ref="type.3984"/>
                <argumentType ref="type.3985"/>
            </content>
        </type>
        <type id="type.1380523" specialization="true">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378409"/>
                <argumentType ref="type.1380522"/>
                <argumentType ref="type.1380517"/>
            </content>
        </type>
        <type id="type.1380388" specialization="true">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378406"/>
                <argumentType ref="type.1380386"/>
                <argumentType ref="type.1380387"/>
            </content>
        </type>
        <type derived="true" id="type.3992">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;</name>
            <content>
                <baseType ref="type.3986"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4056">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380433"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4042">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380388"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4070">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380478"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4028">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380343"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3991">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.3986"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4084">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380523"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4098">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380568"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3987">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>*</name>
            <content>
                <baseType ref="type.3986"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1381160" specialization="true">
            <name>RandomAccessIter&lt;GeneralCategory*, GeneralCategory*&amp;, GeneralCategory**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1378437"/>
                <argumentType ref="type.1381074"/>
                <argumentType ref="type.1381159"/>
            </content>
        </type>
        <type id="type.1381152" specialization="true">
            <name>RandomAccessIter&lt;GeneralCategory*, const GeneralCategory*&amp;, const GeneralCategory**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1378437"/>
                <argumentType ref="type.1381014"/>
                <argumentType ref="type.1381151"/>
            </content>
        </type>
        <type derived="true" id="type.4207">
            <name>RandomAccessIter&lt;GeneralCategory*, const GeneralCategory*&amp;, const GeneralCategory**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1381152"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1388150" specialization="true">
            <name>RandomAccessIter&lt;Namespace*, Namespace*&amp;, Namespace**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1385547"/>
                <argumentType ref="type.1388132"/>
                <argumentType ref="type.1388149"/>
            </content>
        </type>
        <type derived="true" id="type.1388156">
            <name>RandomAccessIter&lt;Namespace*, Namespace*&amp;, Namespace**>&amp;</name>
            <content>
                <baseType ref="type.1388150"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388155">
            <name>RandomAccessIter&lt;Namespace*, Namespace*&amp;, Namespace**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1388150"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388151">
            <name>RandomAccessIter&lt;Namespace*, Namespace*&amp;, Namespace**>*</name>
            <content>
                <baseType ref="type.1388150"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1388142" specialization="true">
            <name>RandomAccessIter&lt;Namespace*, const Namespace*&amp;, const Namespace**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1385547"/>
                <argumentType ref="type.1388072"/>
                <argumentType ref="type.1388141"/>
            </content>
        </type>
        <type derived="true" id="type.1388148">
            <name>RandomAccessIter&lt;Namespace*, const Namespace*&amp;, const Namespace**>&amp;</name>
            <content>
                <baseType ref="type.1388142"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4610">
            <name>RandomAccessIter&lt;Namespace*, const Namespace*&amp;, const Namespace**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1388142"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388143">
            <name>RandomAccessIter&lt;Namespace*, const Namespace*&amp;, const Namespace**>*</name>
            <content>
                <baseType ref="type.1388142"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1388291" specialization="true">
            <name>RandomAccessIter&lt;NonterminalParser*, NonterminalParser*&amp;, NonterminalParser**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1385553"/>
                <argumentType ref="type.1388289"/>
                <argumentType ref="type.1388290"/>
            </content>
        </type>
        <type derived="true" id="type.1388297">
            <name>RandomAccessIter&lt;NonterminalParser*, NonterminalParser*&amp;, NonterminalParser**>&amp;</name>
            <content>
                <baseType ref="type.1388291"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388296">
            <name>RandomAccessIter&lt;NonterminalParser*, NonterminalParser*&amp;, NonterminalParser**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1388291"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388292">
            <name>RandomAccessIter&lt;NonterminalParser*, NonterminalParser*&amp;, NonterminalParser**>*</name>
            <content>
                <baseType ref="type.1388291"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1388282" specialization="true">
            <name>RandomAccessIter&lt;NonterminalParser*, const NonterminalParser*&amp;, const NonterminalParser**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1385553"/>
                <argumentType ref="type.1388280"/>
                <argumentType ref="type.1388281"/>
            </content>
        </type>
        <type derived="true" id="type.1388288">
            <name>RandomAccessIter&lt;NonterminalParser*, const NonterminalParser*&amp;, const NonterminalParser**>&amp;</name>
            <content>
                <baseType ref="type.1388282"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4642">
            <name>RandomAccessIter&lt;NonterminalParser*, const NonterminalParser*&amp;, const NonterminalParser**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1388282"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388283">
            <name>RandomAccessIter&lt;NonterminalParser*, const NonterminalParser*&amp;, const NonterminalParser**>*</name>
            <content>
                <baseType ref="type.1388282"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1381690" specialization="true">
            <name>RandomAccessIter&lt;NumericType*, NumericType*&amp;, NumericType**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1378466"/>
                <argumentType ref="type.1381612"/>
                <argumentType ref="type.1381689"/>
            </content>
        </type>
        <type id="type.1381682" specialization="true">
            <name>RandomAccessIter&lt;NumericType*, const NumericType*&amp;, const NumericType**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1378466"/>
                <argumentType ref="type.1381552"/>
                <argumentType ref="type.1381681"/>
            </content>
        </type>
        <type derived="true" id="type.4305">
            <name>RandomAccessIter&lt;NumericType*, const NumericType*&amp;, const NumericType**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1381682"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1387682" specialization="true">
            <name>RandomAccessIter&lt;RuleLink*, RuleLink*&amp;, RuleLink**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1385708"/>
                <argumentType ref="type.1387680"/>
                <argumentType ref="type.1387681"/>
            </content>
        </type>
        <type derived="true" id="type.1387688">
            <name>RandomAccessIter&lt;RuleLink*, RuleLink*&amp;, RuleLink**>&amp;</name>
            <content>
                <baseType ref="type.1387682"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387687">
            <name>RandomAccessIter&lt;RuleLink*, RuleLink*&amp;, RuleLink**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1387682"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387683">
            <name>RandomAccessIter&lt;RuleLink*, RuleLink*&amp;, RuleLink**>*</name>
            <content>
                <baseType ref="type.1387682"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1387673" specialization="true">
            <name>RandomAccessIter&lt;RuleLink*, const RuleLink*&amp;, const RuleLink**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1385708"/>
                <argumentType ref="type.1387671"/>
                <argumentType ref="type.1387672"/>
            </content>
        </type>
        <type derived="true" id="type.1387679">
            <name>RandomAccessIter&lt;RuleLink*, const RuleLink*&amp;, const RuleLink**>&amp;</name>
            <content>
                <baseType ref="type.1387673"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4528">
            <name>RandomAccessIter&lt;RuleLink*, const RuleLink*&amp;, const RuleLink**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1387673"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387674">
            <name>RandomAccessIter&lt;RuleLink*, const RuleLink*&amp;, const RuleLink**>*</name>
            <content>
                <baseType ref="type.1387673"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1387657" specialization="true">
            <name>RandomAccessIter&lt;RuleParser*, RuleParser*&amp;, RuleParser**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1385704"/>
                <argumentType ref="type.1387655"/>
                <argumentType ref="type.1387656"/>
            </content>
        </type>
        <type derived="true" id="type.1387663">
            <name>RandomAccessIter&lt;RuleParser*, RuleParser*&amp;, RuleParser**>&amp;</name>
            <content>
                <baseType ref="type.1387657"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387662">
            <name>RandomAccessIter&lt;RuleParser*, RuleParser*&amp;, RuleParser**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1387657"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387658">
            <name>RandomAccessIter&lt;RuleParser*, RuleParser*&amp;, RuleParser**>*</name>
            <content>
                <baseType ref="type.1387657"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1387648" specialization="true">
            <name>RandomAccessIter&lt;RuleParser*, const RuleParser*&amp;, const RuleParser**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1385704"/>
                <argumentType ref="type.1387646"/>
                <argumentType ref="type.1387647"/>
            </content>
        </type>
        <type derived="true" id="type.1387654">
            <name>RandomAccessIter&lt;RuleParser*, const RuleParser*&amp;, const RuleParser**>&amp;</name>
            <content>
                <baseType ref="type.1387648"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387653">
            <name>RandomAccessIter&lt;RuleParser*, const RuleParser*&amp;, const RuleParser**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1387648"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387649">
            <name>RandomAccessIter&lt;RuleParser*, const RuleParser*&amp;, const RuleParser**>*</name>
            <content>
                <baseType ref="type.1387648"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1381518" specialization="true">
            <name>RandomAccessIter&lt;Script*, Script*&amp;, Script**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1378453"/>
                <argumentType ref="type.1381432"/>
                <argumentType ref="type.1381517"/>
            </content>
        </type>
        <type id="type.1381510" specialization="true">
            <name>RandomAccessIter&lt;Script*, const Script*&amp;, const Script**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1378453"/>
                <argumentType ref="type.1381372"/>
                <argumentType ref="type.1381509"/>
            </content>
        </type>
        <type derived="true" id="type.4273">
            <name>RandomAccessIter&lt;Script*, const Script*&amp;, const Script**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1381510"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1380598" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1380562"/>
                <argumentType ref="type.1380586"/>
                <argumentType ref="type.1380563"/>
            </content>
        </type>
        <type id="type.4016" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1380292"/>
                <argumentType ref="type.4004"/>
                <argumentType ref="type.3981"/>
            </content>
        </type>
        <type id="type.1380373" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1380337"/>
                <argumentType ref="type.1380361"/>
                <argumentType ref="type.1380338"/>
            </content>
        </type>
        <type id="type.1380418" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1380382"/>
                <argumentType ref="type.1380406"/>
                <argumentType ref="type.1380383"/>
            </content>
        </type>
        <type id="type.1380463" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1380427"/>
                <argumentType ref="type.1380451"/>
                <argumentType ref="type.1380428"/>
            </content>
        </type>
        <type id="type.1380508" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1380472"/>
                <argumentType ref="type.1380496"/>
                <argumentType ref="type.1380473"/>
            </content>
        </type>
        <type id="type.1380553" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1380518"/>
                <argumentType ref="type.1380541"/>
                <argumentType ref="type.1380519"/>
            </content>
        </type>
        <type derived="true" id="type.4022">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;</name>
            <content>
                <baseType ref="type.4016"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4052">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380418"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4021">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4016"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4080">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380508"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4066">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380463"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4094">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380553"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4038">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380373"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4108">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380598"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4017">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>*</name>
            <content>
                <baseType ref="type.4016"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1380501" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1380472"/>
                <argumentType ref="type.1380494"/>
                <argumentType ref="type.1380475"/>
            </content>
        </type>
        <type id="type.4009" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1380292"/>
                <argumentType ref="type.4002"/>
                <argumentType ref="type.3983"/>
            </content>
        </type>
        <type id="type.1380591" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1380562"/>
                <argumentType ref="type.1380584"/>
                <argumentType ref="type.1380565"/>
            </content>
        </type>
        <type id="type.1380546" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1380518"/>
                <argumentType ref="type.1380539"/>
                <argumentType ref="type.1380521"/>
            </content>
        </type>
        <type id="type.1380366" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1380337"/>
                <argumentType ref="type.1380359"/>
                <argumentType ref="type.1380340"/>
            </content>
        </type>
        <type id="type.1380411" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1380382"/>
                <argumentType ref="type.1380404"/>
                <argumentType ref="type.1380385"/>
            </content>
        </type>
        <type id="type.1380456" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1380427"/>
                <argumentType ref="type.1380449"/>
                <argumentType ref="type.1380430"/>
            </content>
        </type>
        <type derived="true" id="type.4015">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;</name>
            <content>
                <baseType ref="type.4009"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4035">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380366"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4014">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4009"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4063">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380456"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4091">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380546"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4049">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380411"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4105">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380591"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4077">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380501"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4010">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>*</name>
            <content>
                <baseType ref="type.4009"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1378607" specialization="true">
            <name>RandomAccessIter&lt;String&lt;char>, String&lt;char>&amp;, String&lt;char>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1378573"/>
                <argumentType ref="type.1378595"/>
                <argumentType ref="type.1378574"/>
            </content>
        </type>
        <type derived="true" id="type.3060">
            <name>RandomAccessIter&lt;String&lt;char>, String&lt;char>&amp;, String&lt;char>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1378607"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1378600" specialization="true">
            <name>RandomAccessIter&lt;String&lt;char>, const String&lt;char>&amp;, const String&lt;char>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1378573"/>
                <argumentType ref="type.1378593"/>
                <argumentType ref="type.1378576"/>
            </content>
        </type>
        <type derived="true" id="type.3057">
            <name>RandomAccessIter&lt;String&lt;char>, const String&lt;char>&amp;, const String&lt;char>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1378600"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1378732" specialization="true">
            <name>RandomAccessIter&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1378697"/>
                <argumentType ref="type.1378720"/>
                <argumentType ref="type.1378698"/>
            </content>
        </type>
        <type derived="true" id="type.3090">
            <name>RandomAccessIter&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1378732"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1378725" specialization="true">
            <name>RandomAccessIter&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1378697"/>
                <argumentType ref="type.1378718"/>
                <argumentType ref="type.1378700"/>
            </content>
        </type>
        <type derived="true" id="type.1385869">
            <name>RandomAccessIter&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1378725"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1378688" specialization="true">
            <name>RandomAccessIter&lt;String&lt;wchar>, String&lt;wchar>&amp;, String&lt;wchar>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1378653"/>
                <argumentType ref="type.1378676"/>
                <argumentType ref="type.1378654"/>
            </content>
        </type>
        <type derived="true" id="type.3080">
            <name>RandomAccessIter&lt;String&lt;wchar>, String&lt;wchar>&amp;, String&lt;wchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1378688"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1378681" specialization="true">
            <name>RandomAccessIter&lt;String&lt;wchar>, const String&lt;wchar>&amp;, const String&lt;wchar>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1378653"/>
                <argumentType ref="type.1378674"/>
                <argumentType ref="type.1378656"/>
            </content>
        </type>
        <type derived="true" id="type.3077">
            <name>RandomAccessIter&lt;String&lt;wchar>, const String&lt;wchar>&amp;, const String&lt;wchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1378681"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1378631" specialization="true">
            <name>RandomAccessIter&lt;System.Ascii.CharClass, CharClass&amp;, CharClass*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1377982"/>
                <argumentType ref="type.1378630"/>
                <argumentType ref="type.1378570"/>
            </content>
        </type>
        <type derived="true" id="type.3067">
            <name>RandomAccessIter&lt;System.Ascii.CharClass, CharClass&amp;, CharClass*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1378631"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1378623" specialization="true">
            <name>RandomAccessIter&lt;System.Ascii.CharClass, const CharClass&amp;, const CharClass*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1377982"/>
                <argumentType ref="type.1378621"/>
                <argumentType ref="type.1378622"/>
            </content>
        </type>
        <type derived="true" id="type.3064">
            <name>RandomAccessIter&lt;System.Ascii.CharClass, const CharClass&amp;, const CharClass*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1378623"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1388240" specialization="true">
            <name>RandomAccessIter&lt;System.Text.Parsing.AttrOrVar, AttrOrVar&amp;, AttrOrVar*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1385699"/>
                <argumentType ref="type.1388239"/>
                <argumentType ref="type.1385700"/>
            </content>
        </type>
        <type derived="true" id="type.1388246">
            <name>RandomAccessIter&lt;System.Text.Parsing.AttrOrVar, AttrOrVar&amp;, AttrOrVar*>&amp;</name>
            <content>
                <baseType ref="type.1388240"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388245">
            <name>RandomAccessIter&lt;System.Text.Parsing.AttrOrVar, AttrOrVar&amp;, AttrOrVar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1388240"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388241">
            <name>RandomAccessIter&lt;System.Text.Parsing.AttrOrVar, AttrOrVar&amp;, AttrOrVar*>*</name>
            <content>
                <baseType ref="type.1388240"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1388232" specialization="true">
            <name>RandomAccessIter&lt;System.Text.Parsing.AttrOrVar, const AttrOrVar&amp;, const AttrOrVar*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1385699"/>
                <argumentType ref="type.1388231"/>
                <argumentType ref="type.1385702"/>
            </content>
        </type>
        <type derived="true" id="type.1388238">
            <name>RandomAccessIter&lt;System.Text.Parsing.AttrOrVar, const AttrOrVar&amp;, const AttrOrVar*>&amp;</name>
            <content>
                <baseType ref="type.1388232"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4632">
            <name>RandomAccessIter&lt;System.Text.Parsing.AttrOrVar, const AttrOrVar&amp;, const AttrOrVar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1388232"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388233">
            <name>RandomAccessIter&lt;System.Text.Parsing.AttrOrVar, const AttrOrVar&amp;, const AttrOrVar*>*</name>
            <content>
                <baseType ref="type.1388232"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1388218" specialization="true">
            <name>RandomAccessIter&lt;System.Text.Parsing.CharRange, CharRange&amp;, CharRange*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1385591"/>
                <argumentType ref="type.1388217"/>
                <argumentType ref="type.1385592"/>
            </content>
        </type>
        <type derived="true" id="type.1388224">
            <name>RandomAccessIter&lt;System.Text.Parsing.CharRange, CharRange&amp;, CharRange*>&amp;</name>
            <content>
                <baseType ref="type.1388218"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4628">
            <name>RandomAccessIter&lt;System.Text.Parsing.CharRange, CharRange&amp;, CharRange*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1388218"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388219">
            <name>RandomAccessIter&lt;System.Text.Parsing.CharRange, CharRange&amp;, CharRange*>*</name>
            <content>
                <baseType ref="type.1388218"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1388210" specialization="true">
            <name>RandomAccessIter&lt;System.Text.Parsing.CharRange, const CharRange&amp;, const CharRange*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1385591"/>
                <argumentType ref="type.1388202"/>
                <argumentType ref="type.1385594"/>
            </content>
        </type>
        <type derived="true" id="type.1388216">
            <name>RandomAccessIter&lt;System.Text.Parsing.CharRange, const CharRange&amp;, const CharRange*>&amp;</name>
            <content>
                <baseType ref="type.1388210"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4625">
            <name>RandomAccessIter&lt;System.Text.Parsing.CharRange, const CharRange&amp;, const CharRange*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1388210"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388211">
            <name>RandomAccessIter&lt;System.Text.Parsing.CharRange, const CharRange&amp;, const CharRange*>*</name>
            <content>
                <baseType ref="type.1388210"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1387991" specialization="true">
            <name>RandomAccessIter&lt;System.Text.Parsing.RuleData, RuleData&amp;, RuleData*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1385568"/>
                <argumentType ref="type.1387989"/>
                <argumentType ref="type.1387990"/>
            </content>
        </type>
        <type derived="true" id="type.1387997">
            <name>RandomAccessIter&lt;System.Text.Parsing.RuleData, RuleData&amp;, RuleData*>&amp;</name>
            <content>
                <baseType ref="type.1387991"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4579">
            <name>RandomAccessIter&lt;System.Text.Parsing.RuleData, RuleData&amp;, RuleData*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1387991"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387992">
            <name>RandomAccessIter&lt;System.Text.Parsing.RuleData, RuleData&amp;, RuleData*>*</name>
            <content>
                <baseType ref="type.1387991"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1387982" specialization="true">
            <name>RandomAccessIter&lt;System.Text.Parsing.RuleData, const RuleData&amp;, const RuleData*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1385568"/>
                <argumentType ref="type.1387980"/>
                <argumentType ref="type.1387981"/>
            </content>
        </type>
        <type derived="true" id="type.1387988">
            <name>RandomAccessIter&lt;System.Text.Parsing.RuleData, const RuleData&amp;, const RuleData*>&amp;</name>
            <content>
                <baseType ref="type.1387982"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4576">
            <name>RandomAccessIter&lt;System.Text.Parsing.RuleData, const RuleData&amp;, const RuleData*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1387982"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387983">
            <name>RandomAccessIter&lt;System.Text.Parsing.RuleData, const RuleData&amp;, const RuleData*>*</name>
            <content>
                <baseType ref="type.1387982"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1382257" specialization="true">
            <name>RandomAccessIter&lt;System.Unicode.Alias, Alias&amp;, Alias*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378500"/>
                <argumentType ref="type.1382256"/>
                <argumentType ref="type.1378501"/>
            </content>
        </type>
        <type derived="true" id="type.4413">
            <name>RandomAccessIter&lt;System.Unicode.Alias, Alias&amp;, Alias*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1382257"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1382249" specialization="true">
            <name>RandomAccessIter&lt;System.Unicode.Alias, const Alias&amp;, const Alias*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378500"/>
                <argumentType ref="type.1382248"/>
                <argumentType ref="type.1378503"/>
            </content>
        </type>
        <type derived="true" id="type.4410">
            <name>RandomAccessIter&lt;System.Unicode.Alias, const Alias&amp;, const Alias*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1382249"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1380021" specialization="true">
            <name>RandomAccessIter&lt;T, R, P></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378356"/>
                <argumentType ref="1378357"/>
                <argumentType ref="1378358"/>
            </content>
        </type>
        <type id="type.1380014" specialization="true">
            <name>RandomAccessIter&lt;T, R, P></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378353"/>
                <argumentType ref="1378354"/>
                <argumentType ref="1378355"/>
            </content>
        </type>
        <type id="type.1380028" specialization="true">
            <name>RandomAccessIter&lt;T, R, P></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378359"/>
                <argumentType ref="1378360"/>
                <argumentType ref="1378361"/>
            </content>
        </type>
        <type id="type.1379986" specialization="true">
            <name>RandomAccessIter&lt;T, R, P></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378341"/>
                <argumentType ref="1378342"/>
                <argumentType ref="1378343"/>
            </content>
        </type>
        <type id="type.1379993" specialization="true">
            <name>RandomAccessIter&lt;T, R, P></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378344"/>
                <argumentType ref="1378345"/>
                <argumentType ref="1378346"/>
            </content>
        </type>
        <type id="type.1380028" specialization="true">
            <name>RandomAccessIter&lt;T, R, P></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378359"/>
                <argumentType ref="1378360"/>
                <argumentType ref="1378361"/>
            </content>
        </type>
        <type id="type.1380007" specialization="true">
            <name>RandomAccessIter&lt;T, R, P></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378350"/>
                <argumentType ref="1378351"/>
                <argumentType ref="1378352"/>
            </content>
        </type>
        <type id="type.1380000" specialization="true">
            <name>RandomAccessIter&lt;T, R, P></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378347"/>
                <argumentType ref="1378348"/>
                <argumentType ref="1378349"/>
            </content>
        </type>
        <type derived="true" id="type.3815">
            <name>RandomAccessIter&lt;T, R, P>&amp;</name>
            <content>
                <baseType ref="type.1379986"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3819">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380000"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3827">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380028"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3821">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380007"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3825">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380021"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3823">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380014"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3817">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.1379993"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3814">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.1379986"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3810">
            <name>RandomAccessIter&lt;T, R, P>*</name>
            <content>
                <baseType ref="type.1379986"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1379798" specialization="true">
            <name>RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378304"/>
                <argumentType ref="type.1379796"/>
                <argumentType ref="type.1379797"/>
            </content>
        </type>
        <type id="type.3801" specialization="true">
            <name>RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378339"/>
                <argumentType ref="type.3799"/>
                <argumentType ref="type.3800"/>
            </content>
        </type>
        <type id="type.1379773" specialization="true">
            <name>RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378303"/>
                <argumentType ref="type.1379771"/>
                <argumentType ref="type.1379772"/>
            </content>
        </type>
        <type id="type.3972" specialization="true">
            <name>RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378390"/>
                <argumentType ref="type.3958"/>
                <argumentType ref="type.3971"/>
            </content>
        </type>
        <type id="type.3671" specialization="true">
            <name>RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378302"/>
                <argumentType ref="type.3669"/>
                <argumentType ref="type.3670"/>
            </content>
        </type>
        <type id="type.1379773" specialization="true">
            <name>RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378303"/>
                <argumentType ref="type.1379771"/>
                <argumentType ref="type.1379772"/>
            </content>
        </type>
        <type derived="true" id="type.3807">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <baseType ref="type.3801"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3677">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <baseType ref="type.3671"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3978">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <baseType ref="type.3972"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3687">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1379773"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3694">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1379798"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3676">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.3671"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3806">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.3801"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3977">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.3972"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3973">
            <name>RandomAccessIter&lt;T, T&amp;, T*>*</name>
            <content>
                <baseType ref="type.3972"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3802">
            <name>RandomAccessIter&lt;T, T&amp;, T*>*</name>
            <content>
                <baseType ref="type.3801"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3672">
            <name>RandomAccessIter&lt;T, T&amp;, T*>*</name>
            <content>
                <baseType ref="type.3671"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.3792" specialization="true">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378339"/>
                <argumentType ref="type.3785"/>
                <argumentType ref="type.3791"/>
            </content>
        </type>
        <type id="type.1379764" specialization="true">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378303"/>
                <argumentType ref="type.1379762"/>
                <argumentType ref="type.1379763"/>
            </content>
        </type>
        <type id="type.1379789" specialization="true">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378304"/>
                <argumentType ref="type.1379787"/>
                <argumentType ref="type.1379788"/>
            </content>
        </type>
        <type id="type.3964" specialization="true">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378390"/>
                <argumentType ref="type.3956"/>
                <argumentType ref="type.3963"/>
            </content>
        </type>
        <type id="type.3662" specialization="true">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378302"/>
                <argumentType ref="type.3660"/>
                <argumentType ref="type.3661"/>
            </content>
        </type>
        <type derived="true" id="type.3970">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <baseType ref="type.3964"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3798">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <baseType ref="type.3792"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3668">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <baseType ref="type.3662"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3691">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1379789"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3797">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.3792"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3969">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.3964"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3684">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1379764"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3667">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.3662"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3793">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>*</name>
            <content>
                <baseType ref="type.3792"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3965">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>*</name>
            <content>
                <baseType ref="type.3964"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3663">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>*</name>
            <content>
                <baseType ref="type.3662"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1385244" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1385223"/>
                <argumentType ref="type.1385232"/>
                <argumentType ref="type.1385224"/>
            </content>
        </type>
        <type id="type.1385237" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1385223"/>
                <argumentType ref="type.1385227"/>
                <argumentType ref="type.1385226"/>
            </content>
        </type>
        <type derived="true" id="type.4481">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1385237"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1385303" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1385282"/>
                <argumentType ref="type.1385291"/>
                <argumentType ref="type.1385283"/>
            </content>
        </type>
        <type id="type.1385296" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1385282"/>
                <argumentType ref="type.1385286"/>
                <argumentType ref="type.1385285"/>
            </content>
        </type>
        <type derived="true" id="type.4489">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1385296"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1385141" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1385095"/>
                <argumentType ref="type.1385102"/>
                <argumentType ref="type.1385096"/>
            </content>
        </type>
        <type id="type.1385134" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1385095"/>
                <argumentType ref="type.1385099"/>
                <argumentType ref="type.1385098"/>
            </content>
        </type>
        <type derived="true" id="type.1387273">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1385134"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1385196" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1385177"/>
                <argumentType ref="type.1385184"/>
                <argumentType ref="type.1385178"/>
            </content>
        </type>
        <type id="type.1385189" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1385177"/>
                <argumentType ref="type.1385181"/>
                <argumentType ref="type.1385180"/>
            </content>
        </type>
        <type derived="true" id="type.4475">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1385189"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1387966" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Context>, UniquePtr&lt;System.Text.Parsing.Context>&amp;, UniquePtr&lt;System.Text.Parsing.Context>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1387941"/>
                <argumentType ref="type.1387950"/>
                <argumentType ref="type.1387942"/>
            </content>
        </type>
        <type derived="true" id="type.1387972">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Context>, UniquePtr&lt;System.Text.Parsing.Context>&amp;, UniquePtr&lt;System.Text.Parsing.Context>*>&amp;</name>
            <content>
                <baseType ref="type.1387966"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387971">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Context>, UniquePtr&lt;System.Text.Parsing.Context>&amp;, UniquePtr&lt;System.Text.Parsing.Context>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1387966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387967">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Context>, UniquePtr&lt;System.Text.Parsing.Context>&amp;, UniquePtr&lt;System.Text.Parsing.Context>*>*</name>
            <content>
                <baseType ref="type.1387966"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1387959" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Context>, const UniquePtr&lt;System.Text.Parsing.Context>&amp;, const UniquePtr&lt;System.Text.Parsing.Context>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1387941"/>
                <argumentType ref="type.1387945"/>
                <argumentType ref="type.1387944"/>
            </content>
        </type>
        <type derived="true" id="type.1387965">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Context>, const UniquePtr&lt;System.Text.Parsing.Context>&amp;, const UniquePtr&lt;System.Text.Parsing.Context>*>&amp;</name>
            <content>
                <baseType ref="type.1387959"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4570">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Context>, const UniquePtr&lt;System.Text.Parsing.Context>&amp;, const UniquePtr&lt;System.Text.Parsing.Context>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1387959"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387960">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Context>, const UniquePtr&lt;System.Text.Parsing.Context>&amp;, const UniquePtr&lt;System.Text.Parsing.Context>*>*</name>
            <content>
                <baseType ref="type.1387959"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1387506" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Object>, UniquePtr&lt;System.Text.Parsing.Object>&amp;, UniquePtr&lt;System.Text.Parsing.Object>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1387481"/>
                <argumentType ref="type.1387490"/>
                <argumentType ref="type.1387482"/>
            </content>
        </type>
        <type derived="true" id="type.1387512">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Object>, UniquePtr&lt;System.Text.Parsing.Object>&amp;, UniquePtr&lt;System.Text.Parsing.Object>*>&amp;</name>
            <content>
                <baseType ref="type.1387506"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387511">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Object>, UniquePtr&lt;System.Text.Parsing.Object>&amp;, UniquePtr&lt;System.Text.Parsing.Object>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1387506"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387507">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Object>, UniquePtr&lt;System.Text.Parsing.Object>&amp;, UniquePtr&lt;System.Text.Parsing.Object>*>*</name>
            <content>
                <baseType ref="type.1387506"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1387499" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Object>, const UniquePtr&lt;System.Text.Parsing.Object>&amp;, const UniquePtr&lt;System.Text.Parsing.Object>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1387481"/>
                <argumentType ref="type.1387485"/>
                <argumentType ref="type.1387484"/>
            </content>
        </type>
        <type derived="true" id="type.1387505">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Object>, const UniquePtr&lt;System.Text.Parsing.Object>&amp;, const UniquePtr&lt;System.Text.Parsing.Object>*>&amp;</name>
            <content>
                <baseType ref="type.1387499"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4504">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Object>, const UniquePtr&lt;System.Text.Parsing.Object>&amp;, const UniquePtr&lt;System.Text.Parsing.Object>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1387499"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387500">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Object>, const UniquePtr&lt;System.Text.Parsing.Object>&amp;, const UniquePtr&lt;System.Text.Parsing.Object>*>*</name>
            <content>
                <baseType ref="type.1387499"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1388189" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>, UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;, UniquePtr&lt;System.Text.Parsing.ParsingDomain>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1388169"/>
                <argumentType ref="type.1388177"/>
                <argumentType ref="type.1388170"/>
            </content>
        </type>
        <type derived="true" id="type.1388195">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>, UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;, UniquePtr&lt;System.Text.Parsing.ParsingDomain>*>&amp;</name>
            <content>
                <baseType ref="type.1388189"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4621">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>, UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;, UniquePtr&lt;System.Text.Parsing.ParsingDomain>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1388189"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388190">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>, UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;, UniquePtr&lt;System.Text.Parsing.ParsingDomain>*>*</name>
            <content>
                <baseType ref="type.1388189"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1388182" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>, const UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;, const UniquePtr&lt;System.Text.Parsing.ParsingDomain>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1388169"/>
                <argumentType ref="type.1388173"/>
                <argumentType ref="type.1388172"/>
            </content>
        </type>
        <type derived="true" id="type.1388188">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>, const UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;, const UniquePtr&lt;System.Text.Parsing.ParsingDomain>*>&amp;</name>
            <content>
                <baseType ref="type.1388182"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>, const UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;, const UniquePtr&lt;System.Text.Parsing.ParsingDomain>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1388182"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388183">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>, const UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;, const UniquePtr&lt;System.Text.Parsing.ParsingDomain>*>*</name>
            <content>
                <baseType ref="type.1388182"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1387471" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>, UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;, UniquePtr&lt;System.Text.Parsing.ParsingObject>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1387452"/>
                <argumentType ref="type.1387459"/>
                <argumentType ref="type.1387453"/>
            </content>
        </type>
        <type derived="true" id="type.1387477">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>, UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;, UniquePtr&lt;System.Text.Parsing.ParsingObject>*>&amp;</name>
            <content>
                <baseType ref="type.1387471"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4498">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>, UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;, UniquePtr&lt;System.Text.Parsing.ParsingObject>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1387471"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387472">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>, UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;, UniquePtr&lt;System.Text.Parsing.ParsingObject>*>*</name>
            <content>
                <baseType ref="type.1387471"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1387464" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>, const UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;, const UniquePtr&lt;System.Text.Parsing.ParsingObject>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1387452"/>
                <argumentType ref="type.1387456"/>
                <argumentType ref="type.1387455"/>
            </content>
        </type>
        <type derived="true" id="type.1387470">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>, const UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;, const UniquePtr&lt;System.Text.Parsing.ParsingObject>*>&amp;</name>
            <content>
                <baseType ref="type.1387464"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4495">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>, const UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;, const UniquePtr&lt;System.Text.Parsing.ParsingObject>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1387464"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387465">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>, const UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;, const UniquePtr&lt;System.Text.Parsing.ParsingObject>*>*</name>
            <content>
                <baseType ref="type.1387464"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1382287" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, UniquePtr&lt;System.Unicode.CharacterInfo>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1382268"/>
                <argumentType ref="type.1382275"/>
                <argumentType ref="type.1382269"/>
            </content>
        </type>
        <type derived="true" id="type.4421">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, UniquePtr&lt;System.Unicode.CharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1382287"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1382280" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, const UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfo>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1382268"/>
                <argumentType ref="type.1382272"/>
                <argumentType ref="type.1382271"/>
            </content>
        </type>
        <type derived="true" id="type.4418">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, const UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1382280"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1382377" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.CharacterInfoPage>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1382357"/>
                <argumentType ref="type.1382365"/>
                <argumentType ref="type.1382358"/>
            </content>
        </type>
        <type derived="true" id="type.4445">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.CharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1382377"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1382370" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, const UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfoPage>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1382357"/>
                <argumentType ref="type.1382361"/>
                <argumentType ref="type.1382360"/>
            </content>
        </type>
        <type derived="true" id="type.4442">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, const UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1382370"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1382316" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1382297"/>
                <argumentType ref="type.1382304"/>
                <argumentType ref="type.1382298"/>
            </content>
        </type>
        <type derived="true" id="type.4429">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1382316"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1382309" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1382297"/>
                <argumentType ref="type.1382301"/>
                <argumentType ref="type.1382300"/>
            </content>
        </type>
        <type derived="true" id="type.4426">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1382309"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1382415" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1382395"/>
                <argumentType ref="type.1382403"/>
                <argumentType ref="type.1382396"/>
            </content>
        </type>
        <type derived="true" id="type.4454">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1382415"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1382408" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1382395"/>
                <argumentType ref="type.1382399"/>
                <argumentType ref="type.1382398"/>
            </content>
        </type>
        <type derived="true" id="type.4451">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1382408"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1379886" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1377787"/>
                <argumentType ref="type.1378807"/>
                <argumentType ref="type.1377805"/>
            </content>
        </type>
        <type derived="true" id="type.3754">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1379886"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1379879" specialization="true">
            <name>RandomAccessIter&lt;byte, const byte&amp;, const byte*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1377787"/>
                <argumentType ref="type.1379878"/>
                <argumentType ref="type.1379873"/>
            </content>
        </type>
        <type id="type.1378586" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1377796"/>
                <argumentType ref="type.1378585"/>
                <argumentType ref="type.1377823"/>
            </content>
        </type>
        <type id="type.1378578" specialization="true">
            <name>RandomAccessIter&lt;char, const char&amp;, const char*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1377796"/>
                <argumentType ref="type.1378577"/>
                <argumentType ref="type.1377849"/>
            </content>
        </type>
        <type id="type.1379490" specialization="true">
            <name>RandomAccessIter&lt;long, const long&amp;, const long*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1377792"/>
                <argumentType ref="type.1379488"/>
                <argumentType ref="type.1379489"/>
            </content>
        </type>
        <type id="type.1379497" specialization="true">
            <name>RandomAccessIter&lt;long, long&amp;, long*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1377792"/>
                <argumentType ref="type.1378812"/>
                <argumentType ref="type.1377815"/>
            </content>
        </type>
        <type id="type.1378703" specialization="true">
            <name>RandomAccessIter&lt;uchar, const uchar&amp;, const uchar*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1377798"/>
                <argumentType ref="type.1378701"/>
                <argumentType ref="type.1378702"/>
            </content>
        </type>
        <type id="type.1378711" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1377798"/>
                <argumentType ref="type.1378710"/>
                <argumentType ref="type.1377827"/>
            </content>
        </type>
        <type derived="true" id="type.3085">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1378711"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1382331" specialization="true">
            <name>RandomAccessIter&lt;uint, const uint&amp;, const uint*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1377791"/>
                <argumentType ref="type.1382329"/>
                <argumentType ref="type.1382330"/>
            </content>
        </type>
        <type derived="true" id="type.4433">
            <name>RandomAccessIter&lt;uint, const uint&amp;, const uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1382331"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1382338" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1377791"/>
                <argumentType ref="type.1378811"/>
                <argumentType ref="type.1377813"/>
            </content>
        </type>
        <type derived="true" id="type.4436">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1382338"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1378753" specialization="true">
            <name>RandomAccessIter&lt;ulong, const ulong&amp;, const ulong*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1377793"/>
                <argumentType ref="type.1378751"/>
                <argumentType ref="type.1378752"/>
            </content>
        </type>
        <type derived="true" id="type.3094">
            <name>RandomAccessIter&lt;ulong, const ulong&amp;, const ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1378753"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1378760" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1377793"/>
                <argumentType ref="type.1378746"/>
                <argumentType ref="type.1377817"/>
            </content>
        </type>
        <type derived="true" id="type.3097">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1378760"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1378659" specialization="true">
            <name>RandomAccessIter&lt;wchar, const wchar&amp;, const wchar*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1377797"/>
                <argumentType ref="type.1378657"/>
                <argumentType ref="type.1378658"/>
            </content>
        </type>
        <type id="type.1378667" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1377797"/>
                <argumentType ref="type.1378666"/>
                <argumentType ref="type.1377825"/>
            </content>
        </type>
        <type derived="true" id="type.3073">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1378667"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="1385695">
            <name>RangeParser</name>
        </type>
        <type derived="true" id="type.1387919">
            <name>RangeParser&amp;</name>
            <content>
                <baseType ref="1385695"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385696">
            <name>RangeParser*</name>
            <content>
                <baseType ref="1385695"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.3711" specialization="true">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare></name>
            <content>
                <primaryType ref="1380067"/>
                <argumentType ref="1378309"/>
                <argumentType ref="type.3698"/>
                <argumentType ref="type.3704"/>
                <argumentType ref="1378311"/>
            </content>
        </type>
        <type derived="true" id="type.3736">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;&amp;</name>
            <content>
                <baseType ref="type.3711"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3712">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>*</name>
            <content>
                <baseType ref="type.3711"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1380067" specialization="true">
            <name>RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare></name>
            <content>
                <primaryType ref="1380067"/>
                <argumentType ref="1378377"/>
                <argumentType ref="1378378"/>
                <argumentType ref="1378379"/>
                <argumentType ref="1378380"/>
            </content>
        </type>
        <type derived="true" id="type.3874">
            <name>RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380067"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3848">
            <name>RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare>*</name>
            <content>
                <baseType ref="type.1380067"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1380168" specialization="true">
            <name>RedBlackTree&lt;T, T, Identity&lt;T>, C></name>
            <content>
                <primaryType ref="1380067"/>
                <argumentType ref="1378385"/>
                <argumentType ref="1378385"/>
                <argumentType ref="type.1380161"/>
                <argumentType ref="1378386"/>
            </content>
        </type>
        <type id="type.1380218" specialization="true">
            <name>RedBlackTree&lt;T, T, Identity&lt;T>, C></name>
            <content>
                <primaryType ref="1380067"/>
                <argumentType ref="1378387"/>
                <argumentType ref="1378387"/>
                <argumentType ref="type.1380211"/>
                <argumentType ref="1378388"/>
            </content>
        </type>
        <type id="type.3897" specialization="true">
            <name>RedBlackTree&lt;T, T, Identity&lt;T>, C></name>
            <content>
                <primaryType ref="1380067"/>
                <argumentType ref="1378383"/>
                <argumentType ref="1378383"/>
                <argumentType ref="type.3890"/>
                <argumentType ref="1378384"/>
            </content>
        </type>
        <type id="type.1380168" specialization="true">
            <name>RedBlackTree&lt;T, T, Identity&lt;T>, C></name>
            <content>
                <primaryType ref="1380067"/>
                <argumentType ref="1378385"/>
                <argumentType ref="1378385"/>
                <argumentType ref="type.1380161"/>
                <argumentType ref="1378386"/>
            </content>
        </type>
        <type derived="true" id="type.3923">
            <name>RedBlackTree&lt;T, T, Identity&lt;T>, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.3897"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3898">
            <name>RedBlackTree&lt;T, T, Identity&lt;T>, C>*</name>
            <content>
                <baseType ref="type.3897"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.3720" specialization="true">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>></name>
            <content>
                <primaryType ref="1380035"/>
                <argumentType ref="type.3698"/>
            </content>
        </type>
        <type derived="true" id="type.3745">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>>&amp;</name>
            <content>
                <baseType ref="type.3720"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3721">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>>*</name>
            <content>
                <baseType ref="type.3720"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.3836" specialization="true">
            <name>RedBlackTreeNode&lt;T></name>
            <content>
                <primaryType ref="1380035"/>
                <argumentType ref="1378370"/>
            </content>
        </type>
        <type id="type.3906" specialization="true">
            <name>RedBlackTreeNode&lt;T></name>
            <content>
                <primaryType ref="1380035"/>
                <argumentType ref="1378383"/>
            </content>
        </type>
        <type id="type.1380035" specialization="true">
            <name>RedBlackTreeNode&lt;T></name>
            <content>
                <primaryType ref="1380035"/>
                <argumentType ref="1378368"/>
            </content>
        </type>
        <type id="type.1380227" specialization="true">
            <name>RedBlackTreeNode&lt;T></name>
            <content>
                <primaryType ref="1380035"/>
                <argumentType ref="1378387"/>
            </content>
        </type>
        <type id="type.1380058" specialization="true">
            <name>RedBlackTreeNode&lt;T></name>
            <content>
                <primaryType ref="1380035"/>
                <argumentType ref="1378373"/>
            </content>
        </type>
        <type id="type.1380227" specialization="true">
            <name>RedBlackTreeNode&lt;T></name>
            <content>
                <primaryType ref="1380035"/>
                <argumentType ref="1378387"/>
            </content>
        </type>
        <type id="type.1380177" specialization="true">
            <name>RedBlackTreeNode&lt;T></name>
            <content>
                <primaryType ref="1380035"/>
                <argumentType ref="1378385"/>
            </content>
        </type>
        <type derived="true" id="type.3932">
            <name>RedBlackTreeNode&lt;T>&amp;</name>
            <content>
                <baseType ref="type.3906"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3907">
            <name>RedBlackTreeNode&lt;T>*</name>
            <content>
                <baseType ref="type.3906"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3828">
            <name>RedBlackTreeNode&lt;T>*</name>
            <content>
                <baseType ref="type.1380035"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3837">
            <name>RedBlackTreeNode&lt;T>*</name>
            <content>
                <baseType ref="type.3836"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.3857" specialization="true">
            <name>RedBlackTreeNode&lt;ValueType></name>
            <content>
                <primaryType ref="1380035"/>
                <argumentType ref="1378378"/>
            </content>
        </type>
        <type derived="true" id="type.3884">
            <name>RedBlackTreeNode&lt;ValueType>&amp;</name>
            <content>
                <baseType ref="type.3857"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3858">
            <name>RedBlackTreeNode&lt;ValueType>*</name>
            <content>
                <baseType ref="type.3857"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4684">
            <name>RedBlackTreeNodeBase&amp;&amp;</name>
            <content>
                <baseType ref="1378362"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3046">
            <name>RedBlackTreeNodeBase*</name>
            <content>
                <baseType ref="1378362"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.3728" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="1380041"/>
                <argumentType ref="type.3698"/>
                <argumentType ref="type.3724"/>
                <argumentType ref="type.3699"/>
            </content>
        </type>
        <type derived="true" id="type.3734">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <baseType ref="type.3728"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3733">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.3728"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3729">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>*</name>
            <content>
                <baseType ref="type.3728"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.3716" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="1380041"/>
                <argumentType ref="type.3698"/>
                <argumentType ref="type.3709"/>
                <argumentType ref="type.3715"/>
            </content>
        </type>
        <type derived="true" id="type.3727">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <baseType ref="type.3716"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3726">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.3716"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3717">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>*</name>
            <content>
                <baseType ref="type.3716"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1380054" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, R, P></name>
            <content>
                <primaryType ref="1380041"/>
                <argumentType ref="1378373"/>
                <argumentType ref="1378374"/>
                <argumentType ref="1378375"/>
            </content>
        </type>
        <type id="type.1380041" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, R, P></name>
            <content>
                <primaryType ref="1380041"/>
                <argumentType ref="1378370"/>
                <argumentType ref="1378371"/>
                <argumentType ref="1378372"/>
            </content>
        </type>
        <type derived="true" id="type.3844">
            <name>RedBlackTreeNodeIterator&lt;T, R, P>&amp;</name>
            <content>
                <baseType ref="type.1380041"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3843">
            <name>RedBlackTreeNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380041"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3847">
            <name>RedBlackTreeNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380054"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3833">
            <name>RedBlackTreeNodeIterator&lt;T, R, P>*</name>
            <content>
                <baseType ref="type.1380041"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1380236" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="1380041"/>
                <argumentType ref="1378387"/>
                <argumentType ref="type.1380231"/>
                <argumentType ref="type.1380235"/>
            </content>
        </type>
        <type id="type.1380186" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="1380041"/>
                <argumentType ref="1378385"/>
                <argumentType ref="type.1380181"/>
                <argumentType ref="type.1380185"/>
            </content>
        </type>
        <type id="type.1380236" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="1380041"/>
                <argumentType ref="1378387"/>
                <argumentType ref="type.1380231"/>
                <argumentType ref="type.1380235"/>
            </content>
        </type>
        <type id="type.3915" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="1380041"/>
                <argumentType ref="1378383"/>
                <argumentType ref="type.3910"/>
                <argumentType ref="type.3914"/>
            </content>
        </type>
        <type derived="true" id="type.3921">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <baseType ref="type.3915"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3920">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.3915"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3916">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*>*</name>
            <content>
                <baseType ref="type.3915"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1380173" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="1380041"/>
                <argumentType ref="1378385"/>
                <argumentType ref="type.1380166"/>
                <argumentType ref="type.1380172"/>
            </content>
        </type>
        <type id="type.3902" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="1380041"/>
                <argumentType ref="1378383"/>
                <argumentType ref="type.3895"/>
                <argumentType ref="type.3901"/>
            </content>
        </type>
        <type id="type.1380223" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="1380041"/>
                <argumentType ref="1378387"/>
                <argumentType ref="type.1380216"/>
                <argumentType ref="type.1380222"/>
            </content>
        </type>
        <type id="type.1380173" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="1380041"/>
                <argumentType ref="1378385"/>
                <argumentType ref="type.1380166"/>
                <argumentType ref="type.1380172"/>
            </content>
        </type>
        <type derived="true" id="type.3913">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <baseType ref="type.3902"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3912">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.3902"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3941">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380173"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3950">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380223"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3903">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>*</name>
            <content>
                <baseType ref="type.3902"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.3866" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*></name>
            <content>
                <primaryType ref="1380041"/>
                <argumentType ref="1378378"/>
                <argumentType ref="type.3861"/>
                <argumentType ref="type.3865"/>
            </content>
        </type>
        <type derived="true" id="type.3872">
            <name>RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*>&amp;</name>
            <content>
                <baseType ref="type.3866"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3871">
            <name>RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.3866"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3867">
            <name>RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*>*</name>
            <content>
                <baseType ref="type.3866"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.3853" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*></name>
            <content>
                <primaryType ref="1380041"/>
                <argumentType ref="1378378"/>
                <argumentType ref="type.3851"/>
                <argumentType ref="type.3852"/>
            </content>
        </type>
        <type derived="true" id="type.3864">
            <name>RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*>&amp;</name>
            <content>
                <baseType ref="type.3853"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3863">
            <name>RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.3853"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3854">
            <name>RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*>*</name>
            <content>
                <baseType ref="type.3853"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1387700" specialization="true">
            <name>Rel&lt;Grammar*></name>
            <content>
                <primaryType ref="1379016"/>
                <argumentType ref="type.1385523"/>
            </content>
        </type>
        <type derived="true" id="type.1388497">
            <name>Rel&lt;Grammar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1387700"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387705">
            <name>Rel&lt;Grammar*>*</name>
            <content>
                <baseType ref="type.1387700"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1387523" specialization="true">
            <name>Rel&lt;String&lt;uchar>></name>
            <content>
                <primaryType ref="1379016"/>
                <argumentType ref="type.1378697"/>
            </content>
        </type>
        <type derived="true" id="type.1388404">
            <name>Rel&lt;String&lt;uchar>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1387523"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387528">
            <name>Rel&lt;String&lt;uchar>>*</name>
            <content>
                <baseType ref="type.1387523"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.3210" specialization="true">
            <name>Rel&lt;T></name>
            <content>
                <primaryType ref="1379016"/>
                <argumentType ref="1378205"/>
            </content>
        </type>
        <type id="type.3244" specialization="true">
            <name>Rel&lt;T></name>
            <content>
                <primaryType ref="1379016"/>
                <argumentType ref="1378215"/>
            </content>
        </type>
        <type id="type.3295" specialization="true">
            <name>Rel&lt;T></name>
            <content>
                <primaryType ref="1379016"/>
                <argumentType ref="1378230"/>
            </content>
        </type>
        <type id="type.3278" specialization="true">
            <name>Rel&lt;T></name>
            <content>
                <primaryType ref="1379016"/>
                <argumentType ref="1378225"/>
            </content>
        </type>
        <type id="type.3261" specialization="true">
            <name>Rel&lt;T></name>
            <content>
                <primaryType ref="1379016"/>
                <argumentType ref="1378220"/>
            </content>
        </type>
        <type id="type.3227" specialization="true">
            <name>Rel&lt;T></name>
            <content>
                <primaryType ref="1379016"/>
                <argumentType ref="1378210"/>
            </content>
        </type>
        <type derived="true" id="type.3300">
            <name>Rel&lt;T>*</name>
            <content>
                <baseType ref="type.3295"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3232">
            <name>Rel&lt;T>*</name>
            <content>
                <baseType ref="type.3227"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3215">
            <name>Rel&lt;T>*</name>
            <content>
                <baseType ref="type.3210"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3249">
            <name>Rel&lt;T>*</name>
            <content>
                <baseType ref="type.3244"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3266">
            <name>Rel&lt;T>*</name>
            <content>
                <baseType ref="type.3261"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3283">
            <name>Rel&lt;T>*</name>
            <content>
                <baseType ref="type.3278"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1379001" specialization="true">
            <name>Remainder&lt;T></name>
            <content>
                <primaryType ref="1379001"/>
                <argumentType ref="1378194"/>
            </content>
        </type>
        <type derived="true" id="type.4758">
            <name>ReturnStatement&amp;&amp;</name>
            <content>
                <baseType ref="1383550"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="1385568">
            <name>RuleData</name>
        </type>
        <type derived="true" id="type.1387989">
            <name>RuleData&amp;</name>
            <content>
                <baseType ref="1385568"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388000">
            <name>RuleData&amp;&amp;</name>
            <content>
                <baseType ref="1385568"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387990">
            <name>RuleData*</name>
            <content>
                <baseType ref="1385568"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385707">
            <name>RuleLink</name>
        </type>
        <type derived="true" id="type.1387852">
            <name>RuleLink&amp;</name>
            <content>
                <baseType ref="1385707"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385708">
            <name>RuleLink*</name>
            <content>
                <baseType ref="1385707"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387680">
            <name>RuleLink*&amp;</name>
            <content>
                <baseType ref="1385707"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387691">
            <name>RuleLink*&amp;&amp;</name>
            <content>
                <baseType ref="1385707"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387681">
            <name>RuleLink**</name>
            <content>
                <baseType ref="1385707"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388483">
            <name>RuleLink**&amp;&amp;</name>
            <content>
                <baseType ref="1385707"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="1385703">
            <name>RuleParser</name>
        </type>
        <type derived="true" id="type.1387785">
            <name>RuleParser&amp;</name>
            <content>
                <baseType ref="1385703"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385704">
            <name>RuleParser*</name>
            <content>
                <baseType ref="1385703"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387655">
            <name>RuleParser*&amp;</name>
            <content>
                <baseType ref="1385703"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387666">
            <name>RuleParser*&amp;&amp;</name>
            <content>
                <baseType ref="1385703"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387656">
            <name>RuleParser**</name>
            <content>
                <baseType ref="1385703"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388481">
            <name>RuleParser**&amp;&amp;</name>
            <content>
                <baseType ref="1385703"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4794">
            <name>RvalueRef&amp;&amp;</name>
            <content>
                <baseType ref="1383602"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="1385711">
            <name>Scanner</name>
        </type>
        <type derived="true" id="type.1387480">
            <name>Scanner&amp;</name>
            <content>
                <baseType ref="1385711"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385712">
            <name>Scanner*</name>
            <content>
                <baseType ref="1385711"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385715">
            <name>Scope</name>
        </type>
        <type derived="true" id="type.1385716">
            <name>Scope*</name>
            <content>
                <baseType ref="1385715"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388511">
            <name>Scope*&amp;&amp;</name>
            <content>
                <baseType ref="1385715"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1379297" specialization="true">
            <name>SelectFirst&lt;K, T></name>
            <content>
                <primaryType ref="1379928"/>
                <argumentType ref="1378257"/>
                <argumentType ref="1378258"/>
            </content>
        </type>
        <type id="type.3363" specialization="true">
            <name>SelectFirst&lt;K, T></name>
            <content>
                <primaryType ref="1379928"/>
                <argumentType ref="1378253"/>
                <argumentType ref="1378254"/>
            </content>
        </type>
        <type id="type.1379297" specialization="true">
            <name>SelectFirst&lt;K, T></name>
            <content>
                <primaryType ref="1379928"/>
                <argumentType ref="1378257"/>
                <argumentType ref="1378258"/>
            </content>
        </type>
        <type derived="true" id="type.3369">
            <name>SelectFirst&lt;K, T>*</name>
            <content>
                <baseType ref="type.3363"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.3704" specialization="true">
            <name>SelectFirst&lt;Key, Value></name>
            <content>
                <primaryType ref="1379928"/>
                <argumentType ref="1378309"/>
                <argumentType ref="1378310"/>
            </content>
        </type>
        <type derived="true" id="type.3710">
            <name>SelectFirst&lt;Key, Value>*</name>
            <content>
                <baseType ref="type.3704"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1381260" specialization="true">
            <name>SelectFirst&lt;String&lt;char>, Age*></name>
            <content>
                <primaryType ref="1379928"/>
                <argumentType ref="type.1378573"/>
                <argumentType ref="type.1378444"/>
            </content>
        </type>
        <type id="type.1382156" specialization="true">
            <name>SelectFirst&lt;String&lt;char>, AliasType*></name>
            <content>
                <primaryType ref="1379928"/>
                <argumentType ref="type.1378573"/>
                <argumentType ref="type.1378493"/>
            </content>
        </type>
        <type id="type.1381798" specialization="true">
            <name>SelectFirst&lt;String&lt;char>, BidiClass*></name>
            <content>
                <primaryType ref="1379928"/>
                <argumentType ref="type.1378573"/>
                <argumentType ref="type.1378475"/>
            </content>
        </type>
        <type id="type.1381977" specialization="true">
            <name>SelectFirst&lt;String&lt;char>, BidiPairedBracketType*></name>
            <content>
                <primaryType ref="1379928"/>
                <argumentType ref="type.1378573"/>
                <argumentType ref="type.1378484"/>
            </content>
        </type>
        <type id="type.1380720" specialization="true">
            <name>SelectFirst&lt;String&lt;char>, BinaryProperty*></name>
            <content>
                <primaryType ref="1379928"/>
                <argumentType ref="type.1378573"/>
                <argumentType ref="type.1378423"/>
            </content>
        </type>
        <type id="type.1380900" specialization="true">
            <name>SelectFirst&lt;String&lt;char>, Block*></name>
            <content>
                <primaryType ref="1379928"/>
                <argumentType ref="type.1378573"/>
                <argumentType ref="type.1378430"/>
            </content>
        </type>
        <type id="type.1381081" specialization="true">
            <name>SelectFirst&lt;String&lt;char>, GeneralCategory*></name>
            <content>
                <primaryType ref="1379928"/>
                <argumentType ref="type.1378573"/>
                <argumentType ref="type.1378437"/>
            </content>
        </type>
        <type id="type.1381619" specialization="true">
            <name>SelectFirst&lt;String&lt;char>, NumericType*></name>
            <content>
                <primaryType ref="1379928"/>
                <argumentType ref="type.1378573"/>
                <argumentType ref="type.1378466"/>
            </content>
        </type>
        <type id="type.1381439" specialization="true">
            <name>SelectFirst&lt;String&lt;char>, Script*></name>
            <content>
                <primaryType ref="1379928"/>
                <argumentType ref="type.1378573"/>
                <argumentType ref="type.1378453"/>
            </content>
        </type>
        <type id="type.1388008" specialization="true">
            <name>SelectFirst&lt;String&lt;uchar>, Grammar*></name>
            <content>
                <primaryType ref="1379928"/>
                <argumentType ref="type.1378697"/>
                <argumentType ref="type.1385523"/>
            </content>
        </type>
        <type derived="true" id="type.1388638">
            <name>SelectFirst&lt;String&lt;uchar>, Grammar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1388008"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388014">
            <name>SelectFirst&lt;String&lt;uchar>, Grammar*>*</name>
            <content>
                <baseType ref="type.1388008"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1388074" specialization="true">
            <name>SelectFirst&lt;String&lt;uchar>, Namespace*></name>
            <content>
                <primaryType ref="1379928"/>
                <argumentType ref="type.1378697"/>
                <argumentType ref="type.1385547"/>
            </content>
        </type>
        <type derived="true" id="type.1388649">
            <name>SelectFirst&lt;String&lt;uchar>, Namespace*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1388074"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388080">
            <name>SelectFirst&lt;String&lt;uchar>, Namespace*>*</name>
            <content>
                <baseType ref="type.1388074"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1388309" specialization="true">
            <name>SelectFirst&lt;String&lt;uchar>, ParsingObject*></name>
            <content>
                <primaryType ref="1379928"/>
                <argumentType ref="type.1378697"/>
                <argumentType ref="type.1385580"/>
            </content>
        </type>
        <type derived="true" id="type.1388748">
            <name>SelectFirst&lt;String&lt;uchar>, ParsingObject*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1388309"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388315">
            <name>SelectFirst&lt;String&lt;uchar>, ParsingObject*>*</name>
            <content>
                <baseType ref="type.1388309"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1387536" specialization="true">
            <name>SelectFirst&lt;String&lt;uchar>, String&lt;uchar>></name>
            <content>
                <primaryType ref="1379928"/>
                <argumentType ref="type.1378697"/>
                <argumentType ref="type.1378697"/>
            </content>
        </type>
        <type derived="true" id="type.1388391">
            <name>SelectFirst&lt;String&lt;uchar>, String&lt;uchar>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1387536"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387542">
            <name>SelectFirst&lt;String&lt;uchar>, String&lt;uchar>>*</name>
            <content>
                <baseType ref="type.1387536"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1381195" specialization="true">
            <name>SelectFirst&lt;System.Unicode.AgeId, Age*></name>
            <content>
                <primaryType ref="1379928"/>
                <argumentType ref="1378442"/>
                <argumentType ref="type.1378444"/>
            </content>
        </type>
        <type id="type.1382091" specialization="true">
            <name>SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*></name>
            <content>
                <primaryType ref="1379928"/>
                <argumentType ref="1378491"/>
                <argumentType ref="type.1378493"/>
            </content>
        </type>
        <type id="type.1381733" specialization="true">
            <name>SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*></name>
            <content>
                <primaryType ref="1379928"/>
                <argumentType ref="1378473"/>
                <argumentType ref="type.1378475"/>
            </content>
        </type>
        <type id="type.1381912" specialization="true">
            <name>SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*></name>
            <content>
                <primaryType ref="1379928"/>
                <argumentType ref="1378482"/>
                <argumentType ref="type.1378484"/>
            </content>
        </type>
        <type id="type.1380641" specialization="true">
            <name>SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*></name>
            <content>
                <primaryType ref="1379928"/>
                <argumentType ref="1378421"/>
                <argumentType ref="type.1378423"/>
            </content>
        </type>
        <type id="type.1380835" specialization="true">
            <name>SelectFirst&lt;System.Unicode.BlockId, Block*></name>
            <content>
                <primaryType ref="1379928"/>
                <argumentType ref="1378428"/>
                <argumentType ref="type.1378430"/>
            </content>
        </type>
        <type id="type.1381016" specialization="true">
            <name>SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*></name>
            <content>
                <primaryType ref="1379928"/>
                <argumentType ref="1378435"/>
                <argumentType ref="type.1378437"/>
            </content>
        </type>
        <type id="type.1381554" specialization="true">
            <name>SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*></name>
            <content>
                <primaryType ref="1379928"/>
                <argumentType ref="1378464"/>
                <argumentType ref="type.1378466"/>
            </content>
        </type>
        <type id="type.1381374" specialization="true">
            <name>SelectFirst&lt;System.Unicode.ScriptId, Script*></name>
            <content>
                <primaryType ref="1379928"/>
                <argumentType ref="1378451"/>
                <argumentType ref="type.1378453"/>
            </content>
        </type>
        <type id="type.1379928" specialization="true">
            <name>SelectFirst&lt;T, U></name>
            <content>
                <primaryType ref="1379928"/>
                <argumentType ref="1378330"/>
                <argumentType ref="1378331"/>
            </content>
        </type>
        <type id="type.1379941" specialization="true">
            <name>SelectSecond&lt;T, U></name>
            <content>
                <primaryType ref="1379941"/>
                <argumentType ref="1378333"/>
                <argumentType ref="1378334"/>
            </content>
        </type>
        <type id="1385663">
            <name>SeparatorParser</name>
        </type>
        <type derived="true" id="type.1387903">
            <name>SeparatorParser&amp;</name>
            <content>
                <baseType ref="1385663"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385664">
            <name>SeparatorParser*</name>
            <content>
                <baseType ref="1385663"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385500">
            <name>SequenceParser</name>
        </type>
        <type derived="true" id="type.1387861">
            <name>SequenceParser&amp;</name>
            <content>
                <baseType ref="1385500"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385501">
            <name>SequenceParser*</name>
            <content>
                <baseType ref="1385500"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1380207" specialization="true">
            <name>Set&lt;T, C></name>
            <content>
                <primaryType ref="1380108"/>
                <argumentType ref="1378387"/>
                <argumentType ref="1378388"/>
            </content>
        </type>
        <type id="type.1380108" specialization="true">
            <name>Set&lt;T, C></name>
            <content>
                <primaryType ref="1380108"/>
                <argumentType ref="1378383"/>
                <argumentType ref="1378384"/>
            </content>
        </type>
        <type id="type.1380157" specialization="true">
            <name>Set&lt;T, C></name>
            <content>
                <primaryType ref="1380108"/>
                <argumentType ref="1378385"/>
                <argumentType ref="1378386"/>
            </content>
        </type>
        <type id="type.1380207" specialization="true">
            <name>Set&lt;T, C></name>
            <content>
                <primaryType ref="1380108"/>
                <argumentType ref="1378387"/>
                <argumentType ref="1378388"/>
            </content>
        </type>
        <type derived="true" id="type.3887">
            <name>Set&lt;T, C>*</name>
            <content>
                <baseType ref="type.1380108"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1379203" specialization="true">
            <name>ShiftLeft&lt;T></name>
            <content>
                <primaryType ref="1379203"/>
                <argumentType ref="1378249"/>
            </content>
        </type>
        <type id="type.1379210" specialization="true">
            <name>ShiftRight&lt;T></name>
            <content>
                <primaryType ref="1379210"/>
                <argumentType ref="1378251"/>
            </content>
        </type>
        <type derived="true" id="type.4735">
            <name>SizeOf&amp;&amp;</name>
            <content>
                <baseType ref="1383520"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="1385601">
            <name>SpaceParser</name>
        </type>
        <type derived="true" id="type.1387872">
            <name>SpaceParser&amp;</name>
            <content>
                <baseType ref="1385601"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385602">
            <name>SpaceParser*</name>
            <content>
                <baseType ref="1385601"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385665">
            <name>SpaceSeparatorParser</name>
        </type>
        <type derived="true" id="type.1387904">
            <name>SpaceSeparatorParser&amp;</name>
            <content>
                <baseType ref="1385665"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385666">
            <name>SpaceSeparatorParser*</name>
            <content>
                <baseType ref="1385665"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385625">
            <name>SpacingMarkParser</name>
        </type>
        <type derived="true" id="type.1387884">
            <name>SpacingMarkParser&amp;</name>
            <content>
                <baseType ref="1385625"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385626">
            <name>SpacingMarkParser*</name>
            <content>
                <baseType ref="1385625"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385719">
            <name>Span</name>
        </type>
        <type derived="true" id="type.1388368">
            <name>Span&amp;&amp;</name>
            <content>
                <baseType ref="1385719"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385720">
            <name>Span*</name>
            <content>
                <baseType ref="1385719"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1388133" specialization="true">
            <name>Stack&lt;Namespace*></name>
            <content>
                <primaryType ref="1380257"/>
                <argumentType ref="type.1385547"/>
            </content>
        </type>
        <type derived="true" id="type.1388136">
            <name>Stack&lt;Namespace*>*</name>
            <content>
                <baseType ref="type.1388133"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1380257" specialization="true">
            <name>Stack&lt;T></name>
            <content>
                <primaryType ref="1380257"/>
                <argumentType ref="1378390"/>
            </content>
        </type>
        <type derived="true" id="type.3955">
            <name>Stack&lt;T>*</name>
            <content>
                <baseType ref="type.1380257"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1387951" specialization="true">
            <name>Stack&lt;UniquePtr&lt;System.Text.Parsing.Context>></name>
            <content>
                <primaryType ref="1380257"/>
                <argumentType ref="type.1387941"/>
            </content>
        </type>
        <type derived="true" id="type.1388628">
            <name>Stack&lt;UniquePtr&lt;System.Text.Parsing.Context>>&amp;</name>
            <content>
                <baseType ref="type.1387951"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388627">
            <name>Stack&lt;UniquePtr&lt;System.Text.Parsing.Context>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1387951"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387954">
            <name>Stack&lt;UniquePtr&lt;System.Text.Parsing.Context>>*</name>
            <content>
                <baseType ref="type.1387951"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1387491" specialization="true">
            <name>Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>></name>
            <content>
                <primaryType ref="1380257"/>
                <argumentType ref="type.1387481"/>
            </content>
        </type>
        <type derived="true" id="type.1387515">
            <name>Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp;</name>
            <content>
                <baseType ref="type.1387491"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387494">
            <name>Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>*</name>
            <content>
                <baseType ref="type.1387491"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4755">
            <name>Statement&amp;&amp;</name>
            <content>
                <baseType ref="1383544"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4659">
            <name>StaticInitCriticalSection&amp;&amp;</name>
            <content>
                <baseType ref="1377846"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1378402">
            <name>StreamWriter*</name>
            <content>
                <baseType ref="1378401"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1380292" specialization="true">
            <name>String&lt;CharT></name>
            <content>
                <primaryType ref="1380292"/>
                <argumentType ref="1378404"/>
            </content>
        </type>
        <type id="type.1380382" specialization="true">
            <name>String&lt;CharT></name>
            <content>
                <primaryType ref="1380292"/>
                <argumentType ref="1378406"/>
            </content>
        </type>
        <type id="type.1380518" specialization="true">
            <name>String&lt;CharT></name>
            <content>
                <primaryType ref="1380292"/>
                <argumentType ref="1378409"/>
            </content>
        </type>
        <type id="type.1380562" specialization="true">
            <name>String&lt;CharT></name>
            <content>
                <primaryType ref="1380292"/>
                <argumentType ref="1378410"/>
            </content>
        </type>
        <type id="type.1380427" specialization="true">
            <name>String&lt;CharT></name>
            <content>
                <primaryType ref="1380292"/>
                <argumentType ref="1378407"/>
            </content>
        </type>
        <type id="type.1380337" specialization="true">
            <name>String&lt;CharT></name>
            <content>
                <primaryType ref="1380292"/>
                <argumentType ref="1378405"/>
            </content>
        </type>
        <type id="type.1380518" specialization="true">
            <name>String&lt;CharT></name>
            <content>
                <primaryType ref="1380292"/>
                <argumentType ref="1378409"/>
            </content>
        </type>
        <type id="type.1380472" specialization="true">
            <name>String&lt;CharT></name>
            <content>
                <primaryType ref="1380292"/>
                <argumentType ref="1378408"/>
            </content>
        </type>
        <type derived="true" id="type.4004">
            <name>String&lt;CharT>&amp;</name>
            <content>
                <baseType ref="type.1380292"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4003">
            <name>String&lt;CharT>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380292"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3981">
            <name>String&lt;CharT>*</name>
            <content>
                <baseType ref="type.1380292"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1378573" specialization="true">
            <name>String&lt;char></name>
            <content>
                <primaryType ref="1380292"/>
                <argumentType ref="type.1377796"/>
            </content>
        </type>
        <type id="type.1378697" specialization="true">
            <name>String&lt;uchar></name>
            <content>
                <primaryType ref="1380292"/>
                <argumentType ref="type.1377798"/>
            </content>
        </type>
        <type derived="true" id="type.1378720">
            <name>String&lt;uchar>&amp;</name>
            <content>
                <baseType ref="type.1378697"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1378698">
            <name>String&lt;uchar>*</name>
            <content>
                <baseType ref="type.1378697"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1378653" specialization="true">
            <name>String&lt;wchar></name>
            <content>
                <primaryType ref="1380292"/>
                <argumentType ref="type.1377797"/>
            </content>
        </type>
        <type id="1385587">
            <name>StringParser</name>
        </type>
        <type derived="true" id="type.1387869">
            <name>StringParser&amp;</name>
            <content>
                <baseType ref="1385587"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388201">
            <name>StringParser&amp;&amp;</name>
            <content>
                <baseType ref="1385587"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385588">
            <name>StringParser*</name>
            <content>
                <baseType ref="1385587"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385677">
            <name>SurrogateParser</name>
        </type>
        <type derived="true" id="type.1387910">
            <name>SurrogateParser&amp;</name>
            <content>
                <baseType ref="1385677"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385678">
            <name>SurrogateParser*</name>
            <content>
                <baseType ref="1385677"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4773">
            <name>SwitchStatement&amp;&amp;</name>
            <content>
                <baseType ref="1383584"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="1385653">
            <name>SymbolParser</name>
        </type>
        <type derived="true" id="type.1387898">
            <name>SymbolParser&amp;</name>
            <content>
                <baseType ref="1385653"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385654">
            <name>SymbolParser*</name>
            <content>
                <baseType ref="1385653"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3910">
            <name>T&amp;</name>
            <content>
                <baseType ref="1378383"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3133">
            <name>T&amp;</name>
            <content>
                <baseType ref="1378171"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3832">
            <name>T&amp;</name>
            <content>
                <baseType ref="1378368"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3841">
            <name>T&amp;</name>
            <content>
                <baseType ref="1378370"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3799">
            <name>T&amp;</name>
            <content>
                <baseType ref="1378339"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3669">
            <name>T&amp;</name>
            <content>
                <baseType ref="1378302"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3521">
            <name>T&amp;</name>
            <content>
                <baseType ref="1378272"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3592">
            <name>T&amp;</name>
            <content>
                <baseType ref="1378289"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3531">
            <name>T&amp;</name>
            <content>
                <baseType ref="1378274"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3104">
            <name>T&amp;</name>
            <content>
                <baseType ref="1378162"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3421">
            <name>T&amp;</name>
            <content>
                <baseType ref="1378254"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3113">
            <name>T&amp;</name>
            <content>
                <baseType ref="1378164"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3629">
            <name>T&amp;</name>
            <content>
                <baseType ref="1378298"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3449">
            <name>T&amp;</name>
            <content>
                <baseType ref="1378262"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3600">
            <name>T&amp;</name>
            <content>
                <baseType ref="1378291"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4462">
            <name>T&amp;</name>
            <content>
                <baseType ref="1378523"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3958">
            <name>T&amp;</name>
            <content>
                <baseType ref="1378390"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3680">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="1378302"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3766">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="1378330"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3758">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="1378321"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3786">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="1378339"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3777">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="1378333"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3362">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="1378254"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3957">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="1378390"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3137">
            <name>T*</name>
            <content>
                <baseType ref="1378171"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3800">
            <name>T*</name>
            <content>
                <baseType ref="1378339"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3630">
            <name>T*</name>
            <content>
                <baseType ref="1378298"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3601">
            <name>T*</name>
            <content>
                <baseType ref="1378291"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3914">
            <name>T*</name>
            <content>
                <baseType ref="1378383"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3971">
            <name>T*</name>
            <content>
                <baseType ref="1378390"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3670">
            <name>T*</name>
            <content>
                <baseType ref="1378302"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3450">
            <name>T*</name>
            <content>
                <baseType ref="1378262"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4458">
            <name>T*</name>
            <content>
                <baseType ref="1378523"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4750">
            <name>TemplateId&amp;&amp;</name>
            <content>
                <baseType ref="1383538"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4779">
            <name>ThrowStatement&amp;&amp;</name>
            <content>
                <baseType ref="1383590"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="1385609">
            <name>TitleLetterParser</name>
        </type>
        <type derived="true" id="type.1387876">
            <name>TitleLetterParser&amp;</name>
            <content>
                <baseType ref="1385609"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385610">
            <name>TitleLetterParser*</name>
            <content>
                <baseType ref="1385609"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385494">
            <name>TokenParser</name>
        </type>
        <type derived="true" id="type.1387859">
            <name>TokenParser&amp;</name>
            <content>
                <baseType ref="1385494"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4815">
            <name>TokenParser&amp;&amp;</name>
            <content>
                <baseType ref="1385494"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385495">
            <name>TokenParser*</name>
            <content>
                <baseType ref="1385494"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4782">
            <name>TryStatement&amp;&amp;</name>
            <content>
                <baseType ref="1383594"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4697">
            <name>Type&amp;&amp;</name>
            <content>
                <baseType ref="1383405"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4738">
            <name>TypeName&amp;&amp;</name>
            <content>
                <baseType ref="1383522"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3767">
            <name>U&amp;&amp;</name>
            <content>
                <baseType ref="1378331"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3759">
            <name>U&amp;&amp;</name>
            <content>
                <baseType ref="1378322"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3778">
            <name>U&amp;&amp;</name>
            <content>
                <baseType ref="1378334"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.3195" specialization="true">
            <name>UnaryFun&lt;Argument, bool></name>
            <content>
                <primaryType ref="1378948"/>
                <argumentType ref="1378196"/>
                <argumentType ref="type.1377785"/>
            </content>
        </type>
        <type derived="true" id="type.3196">
            <name>UnaryFun&lt;Argument, bool>*</name>
            <content>
                <baseType ref="type.3195"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1387714" specialization="true">
            <name>UnaryFun&lt;Grammar*, Grammar*></name>
            <content>
                <primaryType ref="1378948"/>
                <argumentType ref="type.1385523"/>
                <argumentType ref="type.1385523"/>
            </content>
        </type>
        <type derived="true" id="type.1388486">
            <name>UnaryFun&lt;Grammar*, Grammar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1387714"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387715">
            <name>UnaryFun&lt;Grammar*, Grammar*>*</name>
            <content>
                <baseType ref="type.1387714"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1387694" specialization="true">
            <name>UnaryFun&lt;Grammar*, ulong></name>
            <content>
                <primaryType ref="1378948"/>
                <argumentType ref="type.1385523"/>
                <argumentType ref="type.1377793"/>
            </content>
        </type>
        <type derived="true" id="type.1388492">
            <name>UnaryFun&lt;Grammar*, ulong>&amp;&amp;</name>
            <content>
                <baseType ref="type.1387694"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387695">
            <name>UnaryFun&lt;Grammar*, ulong>*</name>
            <content>
                <baseType ref="type.1387694"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.3366" specialization="true">
            <name>UnaryFun&lt;Pair&lt;K, T>, K></name>
            <content>
                <primaryType ref="1378948"/>
                <argumentType ref="type.3357"/>
                <argumentType ref="1378253"/>
            </content>
        </type>
        <type derived="true" id="type.3367">
            <name>UnaryFun&lt;Pair&lt;K, T>, K>*</name>
            <content>
                <baseType ref="type.3366"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.3707" specialization="true">
            <name>UnaryFun&lt;Pair&lt;Key, Value>, Key></name>
            <content>
                <primaryType ref="1378948"/>
                <argumentType ref="type.3698"/>
                <argumentType ref="1378309"/>
            </content>
        </type>
        <type derived="true" id="type.3708">
            <name>UnaryFun&lt;Pair&lt;Key, Value>, Key>*</name>
            <content>
                <baseType ref="type.3707"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1388011" specialization="true">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, Grammar*>, String&lt;uchar>></name>
            <content>
                <primaryType ref="1378948"/>
                <argumentType ref="type.1388005"/>
                <argumentType ref="type.1378697"/>
            </content>
        </type>
        <type derived="true" id="type.1388640">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, Grammar*>, String&lt;uchar>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1388011"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388012">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, Grammar*>, String&lt;uchar>>*</name>
            <content>
                <baseType ref="type.1388011"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1388077" specialization="true">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, Namespace*>, String&lt;uchar>></name>
            <content>
                <primaryType ref="1378948"/>
                <argumentType ref="type.1388070"/>
                <argumentType ref="type.1378697"/>
            </content>
        </type>
        <type derived="true" id="type.1388651">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, Namespace*>, String&lt;uchar>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1388077"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388078">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, Namespace*>, String&lt;uchar>>*</name>
            <content>
                <baseType ref="type.1388077"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1388312" specialization="true">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, ParsingObject*>, String&lt;uchar>></name>
            <content>
                <primaryType ref="1378948"/>
                <argumentType ref="type.1388305"/>
                <argumentType ref="type.1378697"/>
            </content>
        </type>
        <type derived="true" id="type.1388750">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, ParsingObject*>, String&lt;uchar>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1388312"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388313">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, ParsingObject*>, String&lt;uchar>>*</name>
            <content>
                <baseType ref="type.1388312"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1387539" specialization="true">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>, String&lt;uchar>></name>
            <content>
                <primaryType ref="1378948"/>
                <argumentType ref="type.1387534"/>
                <argumentType ref="type.1378697"/>
            </content>
        </type>
        <type derived="true" id="type.1388393">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>, String&lt;uchar>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1387539"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387540">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>, String&lt;uchar>>*</name>
            <content>
                <baseType ref="type.1387539"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.3768" specialization="true">
            <name>UnaryFun&lt;Pair&lt;T, U>, T></name>
            <content>
                <primaryType ref="1378948"/>
                <argumentType ref="type.3762"/>
                <argumentType ref="1378330"/>
            </content>
        </type>
        <type derived="true" id="type.3769">
            <name>UnaryFun&lt;Pair&lt;T, U>, T>*</name>
            <content>
                <baseType ref="type.3768"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.3779" specialization="true">
            <name>UnaryFun&lt;Pair&lt;T, U>, U></name>
            <content>
                <primaryType ref="1378948"/>
                <argumentType ref="type.3773"/>
                <argumentType ref="1378334"/>
            </content>
        </type>
        <type derived="true" id="type.3780">
            <name>UnaryFun&lt;Pair&lt;T, U>, U>*</name>
            <content>
                <baseType ref="type.3779"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1387797" specialization="true">
            <name>UnaryFun&lt;String&lt;uchar>, String&lt;uchar>></name>
            <content>
                <primaryType ref="1378948"/>
                <argumentType ref="type.1378697"/>
                <argumentType ref="type.1378697"/>
            </content>
        </type>
        <type derived="true" id="type.1388563">
            <name>UnaryFun&lt;String&lt;uchar>, String&lt;uchar>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1387797"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387798">
            <name>UnaryFun&lt;String&lt;uchar>, String&lt;uchar>>*</name>
            <content>
                <baseType ref="type.1387797"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1387518" specialization="true">
            <name>UnaryFun&lt;String&lt;uchar>, ulong></name>
            <content>
                <primaryType ref="1378948"/>
                <argumentType ref="type.1378697"/>
                <argumentType ref="type.1377793"/>
            </content>
        </type>
        <type derived="true" id="type.1388399">
            <name>UnaryFun&lt;String&lt;uchar>, ulong>&amp;&amp;</name>
            <content>
                <baseType ref="type.1387518"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387519">
            <name>UnaryFun&lt;String&lt;uchar>, ulong>*</name>
            <content>
                <baseType ref="type.1387518"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.3205" specialization="true">
            <name>UnaryFun&lt;T, T></name>
            <content>
                <primaryType ref="1378948"/>
                <argumentType ref="1378203"/>
                <argumentType ref="1378203"/>
            </content>
        </type>
        <type id="type.3441" specialization="true">
            <name>UnaryFun&lt;T, T></name>
            <content>
                <primaryType ref="1378948"/>
                <argumentType ref="1378262"/>
                <argumentType ref="1378262"/>
            </content>
        </type>
        <type id="type.3171" specialization="true">
            <name>UnaryFun&lt;T, T></name>
            <content>
                <primaryType ref="1378948"/>
                <argumentType ref="1378185"/>
                <argumentType ref="1378185"/>
            </content>
        </type>
        <type id="type.3893" specialization="true">
            <name>UnaryFun&lt;T, T></name>
            <content>
                <primaryType ref="1378948"/>
                <argumentType ref="1378383"/>
                <argumentType ref="1378383"/>
            </content>
        </type>
        <type id="type.3341" specialization="true">
            <name>UnaryFun&lt;T, T></name>
            <content>
                <primaryType ref="1378948"/>
                <argumentType ref="1378247"/>
                <argumentType ref="1378247"/>
            </content>
        </type>
        <type derived="true" id="type.3894">
            <name>UnaryFun&lt;T, T>*</name>
            <content>
                <baseType ref="type.3893"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3342">
            <name>UnaryFun&lt;T, T>*</name>
            <content>
                <baseType ref="type.3341"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3206">
            <name>UnaryFun&lt;T, T>*</name>
            <content>
                <baseType ref="type.3205"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3442">
            <name>UnaryFun&lt;T, T>*</name>
            <content>
                <baseType ref="type.3441"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3172">
            <name>UnaryFun&lt;T, T>*</name>
            <content>
                <baseType ref="type.3171"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.3514" specialization="true">
            <name>UnaryFun&lt;T, ulong></name>
            <content>
                <primaryType ref="1378948"/>
                <argumentType ref="1378270"/>
                <argumentType ref="type.1377793"/>
            </content>
        </type>
        <type derived="true" id="type.3515">
            <name>UnaryFun&lt;T, ulong>*</name>
            <content>
                <baseType ref="type.3514"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.3321" specialization="true">
            <name>UnaryFun&lt;bool, bool></name>
            <content>
                <primaryType ref="1378948"/>
                <argumentType ref="type.1377785"/>
                <argumentType ref="type.1377785"/>
            </content>
        </type>
        <type derived="true" id="type.3322">
            <name>UnaryFun&lt;bool, bool>*</name>
            <content>
                <baseType ref="type.3321"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4720">
            <name>UnaryMinus&amp;&amp;</name>
            <content>
                <baseType ref="1383460"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="1385482">
            <name>UnaryParser</name>
        </type>
        <type derived="true" id="type.1385483">
            <name>UnaryParser*</name>
            <content>
                <baseType ref="1385482"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4717">
            <name>UnaryPlus&amp;&amp;</name>
            <content>
                <baseType ref="1383458"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.3320" specialization="true">
            <name>UnaryPred&lt;bool></name>
            <content>
                <primaryType ref="1379008"/>
                <argumentType ref="type.1377785"/>
            </content>
        </type>
        <type derived="true" id="type.3323">
            <name>UnaryPred&lt;bool>*</name>
            <content>
                <baseType ref="type.3320"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385681">
            <name>UnassignedParser</name>
        </type>
        <type derived="true" id="type.1387912">
            <name>UnassignedParser&amp;</name>
            <content>
                <baseType ref="1385681"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385682">
            <name>UnassignedParser*</name>
            <content>
                <baseType ref="1385681"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.3739" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="type.3720"/>
            </content>
        </type>
        <type derived="true" id="type.3747">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;</name>
            <content>
                <baseType ref="type.3739"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3744">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.3739"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3740">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>*</name>
            <content>
                <baseType ref="type.3739"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1380247" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="type.1380227"/>
            </content>
        </type>
        <type id="type.3926" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="type.3906"/>
            </content>
        </type>
        <type id="type.1380247" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="type.1380227"/>
            </content>
        </type>
        <type id="type.1380197" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="type.1380177"/>
            </content>
        </type>
        <type derived="true" id="type.3934">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>>&amp;</name>
            <content>
                <baseType ref="type.3926"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3931">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>>&amp;&amp;</name>
            <content>
                <baseType ref="type.3926"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3927">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>>*</name>
            <content>
                <baseType ref="type.3926"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.3878" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;ValueType>></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="type.3857"/>
            </content>
        </type>
        <type derived="true" id="type.3886">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;ValueType>>&amp;</name>
            <content>
                <baseType ref="type.3878"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3883">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;ValueType>>&amp;&amp;</name>
            <content>
                <baseType ref="type.3878"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3879">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;ValueType>>*</name>
            <content>
                <baseType ref="type.3878"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1378640" specialization="true">
            <name>UniquePtr&lt;System.IO.ByteStream></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="1377995"/>
            </content>
        </type>
        <type id="type.1378790" specialization="true">
            <name>UniquePtr&lt;System.IO.InputStream></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="1378391"/>
            </content>
        </type>
        <type id="type.1378780" specialization="true">
            <name>UniquePtr&lt;System.IO.OutputStream></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="1378395"/>
            </content>
        </type>
        <type id="type.1385223" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="1383580"/>
            </content>
        </type>
        <type id="type.1385282" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.Catch></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="1383592"/>
            </content>
        </type>
        <type id="type.1385269" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.CompoundStatement></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="1383548"/>
            </content>
        </type>
        <type id="type.1385253" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.DefaultStatement></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="1383582"/>
            </content>
        </type>
        <type id="type.1385095" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="1383437"/>
            </content>
        </type>
        <type derived="true" id="type.1388613">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*&amp;</name>
            <content>
                <baseType ref="type.1385095"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type id="type.1385177" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.Statement></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="1383544"/>
            </content>
        </type>
        <type id="type.1387941" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.Context></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="1385564"/>
            </content>
        </type>
        <type derived="true" id="type.1387950">
            <name>UniquePtr&lt;System.Text.Parsing.Context>&amp;</name>
            <content>
                <baseType ref="type.1387941"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387946">
            <name>UniquePtr&lt;System.Text.Parsing.Context>&amp;&amp;</name>
            <content>
                <baseType ref="type.1387941"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387942">
            <name>UniquePtr&lt;System.Text.Parsing.Context>*</name>
            <content>
                <baseType ref="type.1387941"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388621">
            <name>UniquePtr&lt;System.Text.Parsing.Context>*&amp;</name>
            <content>
                <baseType ref="type.1387941"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388620">
            <name>UniquePtr&lt;System.Text.Parsing.Context>*&amp;&amp;</name>
            <content>
                <baseType ref="type.1387941"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1387615" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.FileInfo></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="1385512"/>
            </content>
        </type>
        <type derived="true" id="type.1387623">
            <name>UniquePtr&lt;System.Text.Parsing.FileInfo>&amp;</name>
            <content>
                <baseType ref="type.1387615"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387620">
            <name>UniquePtr&lt;System.Text.Parsing.FileInfo>&amp;&amp;</name>
            <content>
                <baseType ref="type.1387615"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387616">
            <name>UniquePtr&lt;System.Text.Parsing.FileInfo>*</name>
            <content>
                <baseType ref="type.1387615"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1387771" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.IdentifierCharsRule></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="1385526"/>
            </content>
        </type>
        <type derived="true" id="type.1387778">
            <name>UniquePtr&lt;System.Text.Parsing.IdentifierCharsRule>&amp;</name>
            <content>
                <baseType ref="type.1387771"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387776">
            <name>UniquePtr&lt;System.Text.Parsing.IdentifierCharsRule>&amp;&amp;</name>
            <content>
                <baseType ref="type.1387771"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387772">
            <name>UniquePtr&lt;System.Text.Parsing.IdentifierCharsRule>*</name>
            <content>
                <baseType ref="type.1387771"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1387481" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.Object></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="1385556"/>
            </content>
        </type>
        <type derived="true" id="type.1387490">
            <name>UniquePtr&lt;System.Text.Parsing.Object>&amp;</name>
            <content>
                <baseType ref="type.1387481"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387486">
            <name>UniquePtr&lt;System.Text.Parsing.Object>&amp;&amp;</name>
            <content>
                <baseType ref="type.1387481"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387482">
            <name>UniquePtr&lt;System.Text.Parsing.Object>*</name>
            <content>
                <baseType ref="type.1387481"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388526">
            <name>UniquePtr&lt;System.Text.Parsing.Object>*&amp;&amp;</name>
            <content>
                <baseType ref="type.1387481"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1388169" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingDomain></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="1385573"/>
            </content>
        </type>
        <type derived="true" id="type.1388177">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;</name>
            <content>
                <baseType ref="type.1388169"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388174">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;&amp;</name>
            <content>
                <baseType ref="type.1388169"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388170">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingDomain>*</name>
            <content>
                <baseType ref="type.1388169"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1388160" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingDomainRepository></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="1385577"/>
            </content>
        </type>
        <type derived="true" id="type.1388168">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingDomainRepository>&amp;</name>
            <content>
                <baseType ref="type.1388160"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388165">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingDomainRepository>&amp;&amp;</name>
            <content>
                <baseType ref="type.1388160"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388161">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingDomainRepository>*</name>
            <content>
                <baseType ref="type.1388160"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1387452" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingObject></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="1385579"/>
            </content>
        </type>
        <type derived="true" id="type.1387459">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;</name>
            <content>
                <baseType ref="type.1387452"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387457">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;&amp;</name>
            <content>
                <baseType ref="type.1387452"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387453">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingObject>*</name>
            <content>
                <baseType ref="type.1387452"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1387779" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.RuleParser></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="1385703"/>
            </content>
        </type>
        <type derived="true" id="type.1387787">
            <name>UniquePtr&lt;System.Text.Parsing.RuleParser>&amp;</name>
            <content>
                <baseType ref="type.1387779"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387784">
            <name>UniquePtr&lt;System.Text.Parsing.RuleParser>&amp;&amp;</name>
            <content>
                <baseType ref="type.1387779"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387780">
            <name>UniquePtr&lt;System.Text.Parsing.RuleParser>*</name>
            <content>
                <baseType ref="type.1387779"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1381318" specialization="true">
            <name>UniquePtr&lt;System.Unicode.AgeTable></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="1378447"/>
            </content>
        </type>
        <type id="type.1382214" specialization="true">
            <name>UniquePtr&lt;System.Unicode.AliasTypeTable></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="1378496"/>
            </content>
        </type>
        <type id="type.1381856" specialization="true">
            <name>UniquePtr&lt;System.Unicode.BidiClassTable></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="1378478"/>
            </content>
        </type>
        <type id="type.1382035" specialization="true">
            <name>UniquePtr&lt;System.Unicode.BidiPairedBracketTypeTable></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="1378487"/>
            </content>
        </type>
        <type id="type.1380800" specialization="true">
            <name>UniquePtr&lt;System.Unicode.BinaryPropertyTable></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="1378424"/>
            </content>
        </type>
        <type id="type.1380958" specialization="true">
            <name>UniquePtr&lt;System.Unicode.BlockTable></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="1378431"/>
            </content>
        </type>
        <type id="type.1382268" specialization="true">
            <name>UniquePtr&lt;System.Unicode.CharacterInfo></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="1378460"/>
            </content>
        </type>
        <type id="type.1382357" specialization="true">
            <name>UniquePtr&lt;System.Unicode.CharacterInfoPage></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="1378508"/>
            </content>
        </type>
        <type id="type.1382348" specialization="true">
            <name>UniquePtr&lt;System.Unicode.CharacterTable></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="1378520"/>
            </content>
        </type>
        <type id="type.1382297" specialization="true">
            <name>UniquePtr&lt;System.Unicode.ExtendedCharacterInfo></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="1378504"/>
            </content>
        </type>
        <type id="type.1382386" specialization="true">
            <name>UniquePtr&lt;System.Unicode.ExtendedCharacterInfoHeader></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="1378516"/>
            </content>
        </type>
        <type id="type.1382395" specialization="true">
            <name>UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="1378512"/>
            </content>
        </type>
        <type id="type.1381139" specialization="true">
            <name>UniquePtr&lt;System.Unicode.GeneralCategoryTable></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="1378438"/>
            </content>
        </type>
        <type id="type.1381699" specialization="true">
            <name>UniquePtr&lt;System.Unicode.NumericTypeTable></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="1378469"/>
            </content>
        </type>
        <type id="type.1381497" specialization="true">
            <name>UniquePtr&lt;System.Unicode.ScriptTable></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="1378456"/>
            </content>
        </type>
        <type id="type.1382446" specialization="true">
            <name>UniquePtr&lt;T></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="1378525"/>
            </content>
        </type>
        <type id="type.1382435" specialization="true">
            <name>UniquePtr&lt;T></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="1378524"/>
            </content>
        </type>
        <type id="type.1382446" specialization="true">
            <name>UniquePtr&lt;T></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="1378525"/>
            </content>
        </type>
        <type id="type.1382424" specialization="true">
            <name>UniquePtr&lt;T></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="1378523"/>
            </content>
        </type>
        <type derived="true" id="type.4464">
            <name>UniquePtr&lt;T>&amp;</name>
            <content>
                <baseType ref="type.1382424"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4460">
            <name>UniquePtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.1382424"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4455">
            <name>UniquePtr&lt;T>*</name>
            <content>
                <baseType ref="type.1382424"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385605">
            <name>UpperLetterParser</name>
        </type>
        <type derived="true" id="type.1387874">
            <name>UpperLetterParser&amp;</name>
            <content>
                <baseType ref="1385605"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385606">
            <name>UpperLetterParser*</name>
            <content>
                <baseType ref="1385605"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3748">
            <name>Value&amp;</name>
            <content>
                <baseType ref="1378310"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3703">
            <name>Value&amp;&amp;</name>
            <content>
                <baseType ref="1378310"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1387934" specialization="true">
            <name>ValueObject&lt;ValueType></name>
            <content>
                <primaryType ref="1387934"/>
                <argumentType ref="1385559"/>
            </content>
        </type>
        <type id="1385558">
            <name>ValueObject&lt;ValueType></name>
        </type>
        <type derived="true" id="type.4564">
            <name>ValueObject&lt;ValueType>&amp;&amp;</name>
            <content>
                <baseType ref="type.1387934"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4559">
            <name>ValueObject&lt;ValueType>*</name>
            <content>
                <baseType ref="type.1387934"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385559">
            <name>ValueType</name>
        </type>
        <type derived="true" id="type.3861">
            <name>ValueType&amp;</name>
            <content>
                <baseType ref="1378378"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3538">
            <name>ValueType&amp;</name>
            <content>
                <baseType ref="1378284"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3865">
            <name>ValueType*</name>
            <content>
                <baseType ref="1378378"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3539">
            <name>ValueType*</name>
            <content>
                <baseType ref="1378284"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385825">
            <name>Visitor</name>
        </type>
        <type derived="true" id="type.1387451">
            <name>Visitor&amp;</name>
            <content>
                <baseType ref="1385825"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385826">
            <name>Visitor*</name>
            <content>
                <baseType ref="1385825"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385827">
            <name>XmlLog</name>
        </type>
        <type derived="true" id="type.1385828">
            <name>XmlLog*</name>
            <content>
                <baseType ref="1385827"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.1377785">
            <name>bool</name>
        </type>
        <type id="1385801">
            <name>boolRule</name>
        </type>
        <type derived="true" id="type.1385802">
            <name>boolRule*</name>
            <content>
                <baseType ref="1385801"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385729">
            <name>byteRule</name>
        </type>
        <type derived="true" id="type.1385730">
            <name>byteRule*</name>
            <content>
                <baseType ref="1385729"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385817">
            <name>charRule</name>
        </type>
        <type derived="true" id="type.1385818">
            <name>charRule*</name>
            <content>
                <baseType ref="1385817"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385479">
            <name>const ActionParser*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385476"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388255">
            <name>const ActionParser*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385476"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388256">
            <name>const ActionParser**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385476"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4706">
            <name>const AddressOf</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383452"/>
            </content>
        </type>
        <type derived="true" id="type.4707">
            <name>const AddressOf&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383452"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4783">
            <name>const AssertStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383596"/>
            </content>
        </type>
        <type derived="true" id="type.4784">
            <name>const AssertStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383596"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388231">
            <name>const AttrOrVar&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385699"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385702">
            <name>const AttrOrVar*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385699"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388505">
            <name>const BinaryFun&lt;Grammar*, Grammar*, bool>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387702"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388412">
            <name>const BinaryFun&lt;String&lt;uchar>, String&lt;uchar>, bool>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387525"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385499">
            <name>const BinaryParser*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385496"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388502">
            <name>const BinaryPred&lt;Grammar*, Grammar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387701"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388409">
            <name>const BinaryPred&lt;String&lt;uchar>, String&lt;uchar>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387524"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4660">
            <name>const BinaryReader</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1377984"/>
            </content>
        </type>
        <type derived="true" id="type.4661">
            <name>const BinaryReader&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1377984"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4662">
            <name>const BinaryWriter</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1377986"/>
            </content>
        </type>
        <type derived="true" id="type.4663">
            <name>const BinaryWriter&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1377986"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3324">
            <name>const BitAnd&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379175"/>
            </content>
        </type>
        <type derived="true" id="type.3325">
            <name>const BitAnd&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379175"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3339">
            <name>const BitNot&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379196"/>
            </content>
        </type>
        <type derived="true" id="type.3340">
            <name>const BitNot&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379196"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3329">
            <name>const BitOr&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379182"/>
            </content>
        </type>
        <type derived="true" id="type.3330">
            <name>const BitOr&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379182"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3334">
            <name>const BitXor&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379189"/>
            </content>
        </type>
        <type derived="true" id="type.3335">
            <name>const BitXor&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379189"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4681">
            <name>const Bitset</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1377988"/>
            </content>
        </type>
        <type derived="true" id="type.4535">
            <name>const Bucket&lt;Grammar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387727"/>
            </content>
        </type>
        <type derived="true" id="type.1387730">
            <name>const Bucket&lt;Grammar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387727"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387748">
            <name>const Bucket&lt;Grammar*>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387727"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387749">
            <name>const Bucket&lt;Grammar*>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387727"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3381">
            <name>const Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3379"/>
            </content>
        </type>
        <type derived="true" id="type.3426">
            <name>const Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379313"/>
            </content>
        </type>
        <type derived="true" id="type.3382">
            <name>const Bucket&lt;Pair&lt;K, T>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3379"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3400">
            <name>const Bucket&lt;Pair&lt;K, T>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3379"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3401">
            <name>const Bucket&lt;Pair&lt;K, T>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3379"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4227">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, Age*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381276"/>
            </content>
        </type>
        <type derived="true" id="type.4392">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382172"/>
            </content>
        </type>
        <type derived="true" id="type.4326">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381814"/>
            </content>
        </type>
        <type derived="true" id="type.4359">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381993"/>
            </content>
        </type>
        <type derived="true" id="type.4128">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380736"/>
            </content>
        </type>
        <type derived="true" id="type.4161">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, Block*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380916"/>
            </content>
        </type>
        <type derived="true" id="type.4194">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381097"/>
            </content>
        </type>
        <type derived="true" id="type.4293">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381635"/>
            </content>
        </type>
        <type derived="true" id="type.4260">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, Script*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381455"/>
            </content>
        </type>
        <type derived="true" id="type.4584">
            <name>const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388024"/>
            </content>
        </type>
        <type derived="true" id="type.1388027">
            <name>const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388024"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388045">
            <name>const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388024"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388046">
            <name>const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388024"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4597">
            <name>const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388090"/>
            </content>
        </type>
        <type derived="true" id="type.1388093">
            <name>const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388090"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388111">
            <name>const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388090"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388112">
            <name>const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388090"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4648">
            <name>const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388325"/>
            </content>
        </type>
        <type derived="true" id="type.1388328">
            <name>const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388325"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388346">
            <name>const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388325"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388347">
            <name>const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388325"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4512">
            <name>const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387552"/>
            </content>
        </type>
        <type derived="true" id="type.1387555">
            <name>const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387552"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387573">
            <name>const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387552"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387574">
            <name>const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387552"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4214">
            <name>const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381211"/>
            </content>
        </type>
        <type derived="true" id="type.4379">
            <name>const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382107"/>
            </content>
        </type>
        <type derived="true" id="type.4313">
            <name>const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381749"/>
            </content>
        </type>
        <type derived="true" id="type.4346">
            <name>const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381928"/>
            </content>
        </type>
        <type derived="true" id="type.4114">
            <name>const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380657"/>
            </content>
        </type>
        <type derived="true" id="type.4148">
            <name>const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380851"/>
            </content>
        </type>
        <type derived="true" id="type.4181">
            <name>const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381032"/>
            </content>
        </type>
        <type derived="true" id="type.4280">
            <name>const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381570"/>
            </content>
        </type>
        <type derived="true" id="type.4247">
            <name>const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381390"/>
            </content>
        </type>
        <type derived="true" id="type.4550">
            <name>const Bucket&lt;String&lt;uchar>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387808"/>
            </content>
        </type>
        <type derived="true" id="type.1387811">
            <name>const Bucket&lt;String&lt;uchar>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387808"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387828">
            <name>const Bucket&lt;String&lt;uchar>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387808"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387829">
            <name>const Bucket&lt;String&lt;uchar>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387808"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3528">
            <name>const Bucket&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3526"/>
            </content>
        </type>
        <type derived="true" id="type.3501">
            <name>const Bucket&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379441"/>
            </content>
        </type>
        <type derived="true" id="type.3534">
            <name>const Bucket&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379534"/>
            </content>
        </type>
        <type derived="true" id="type.3518">
            <name>const Bucket&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379511"/>
            </content>
        </type>
        <type derived="true" id="type.3457">
            <name>const Bucket&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3455"/>
            </content>
        </type>
        <type derived="true" id="type.3519">
            <name>const Bucket&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379511"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3529">
            <name>const Bucket&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3526"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3458">
            <name>const Bucket&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3455"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3476">
            <name>const Bucket&lt;T>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3455"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3477">
            <name>const Bucket&lt;T>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3455"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3546">
            <name>const Bucket&lt;ValueType></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3544"/>
            </content>
        </type>
        <type derived="true" id="type.3547">
            <name>const Bucket&lt;ValueType>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3544"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3567">
            <name>const Bucket&lt;ValueType>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3544"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3568">
            <name>const Bucket&lt;ValueType>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3544"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4664">
            <name>const BufferedByteStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1377992"/>
            </content>
        </type>
        <type derived="true" id="type.4665">
            <name>const ByteStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1377995"/>
            </content>
        </type>
        <type derived="true" id="type.4822">
            <name>const CharParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385583"/>
            </content>
        </type>
        <type derived="true" id="type.4823">
            <name>const CharParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385583"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385586">
            <name>const CharParser*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385583"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4827">
            <name>const CharRange</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385591"/>
            </content>
        </type>
        <type derived="true" id="type.1388202">
            <name>const CharRange&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385591"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385594">
            <name>const CharRange*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385591"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4828">
            <name>const CharSetParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385595"/>
            </content>
        </type>
        <type derived="true" id="type.4829">
            <name>const CharSetParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385595"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385598">
            <name>const CharSetParser*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385595"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3984">
            <name>const CharT&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378404"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3985">
            <name>const CharT*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378404"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4798">
            <name>const CodeExpandingVisitor</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385480"/>
            </content>
        </type>
        <type derived="true" id="type.4799">
            <name>const CodeExpandingVisitor&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385480"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4685">
            <name>const CodeFormatter</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1377997"/>
            </content>
        </type>
        <type derived="true" id="type.4686">
            <name>const CodeFormatter&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1377997"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4721">
            <name>const Complement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383462"/>
            </content>
        </type>
        <type derived="true" id="type.4722">
            <name>const Complement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383462"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4786">
            <name>const Const</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383598"/>
            </content>
        </type>
        <type derived="true" id="type.4787">
            <name>const Const&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383598"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4739">
            <name>const Construct</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383526"/>
            </content>
        </type>
        <type derived="true" id="type.4740">
            <name>const Construct&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383526"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387949">
            <name>const Context&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385564"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387947">
            <name>const Context*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385564"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388626">
            <name>const ContextStack&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385566"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4688">
            <name>const ConversionException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378127"/>
            </content>
        </type>
        <type derived="true" id="type.4689">
            <name>const ConversionException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378127"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4762">
            <name>const DeleteStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383568"/>
            </content>
        </type>
        <type derived="true" id="type.4763">
            <name>const DeleteStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383568"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4703">
            <name>const Deref</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383450"/>
            </content>
        </type>
        <type derived="true" id="type.4704">
            <name>const Deref&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383450"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4765">
            <name>const DestroyStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383570"/>
            </content>
        </type>
        <type derived="true" id="type.4766">
            <name>const DestroyStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383570"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3185">
            <name>const Divides&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378994"/>
            </content>
        </type>
        <type derived="true" id="type.3186">
            <name>const Divides&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378994"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4698">
            <name>const DomObject</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383437"/>
            </content>
        </type>
        <type derived="true" id="type.4530">
            <name>const EqualTo&lt;Grammar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387697"/>
            </content>
        </type>
        <type derived="true" id="type.1388496">
            <name>const EqualTo&lt;Grammar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387697"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387699">
            <name>const EqualTo&lt;Grammar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387697"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4123">
            <name>const EqualTo&lt;String&lt;char>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380704"/>
            </content>
        </type>
        <type derived="true" id="type.4507">
            <name>const EqualTo&lt;String&lt;uchar>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387520"/>
            </content>
        </type>
        <type derived="true" id="type.1388403">
            <name>const EqualTo&lt;String&lt;uchar>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387520"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387522">
            <name>const EqualTo&lt;String&lt;uchar>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387520"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4209">
            <name>const EqualTo&lt;System.Unicode.AgeId></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381177"/>
            </content>
        </type>
        <type derived="true" id="type.4374">
            <name>const EqualTo&lt;System.Unicode.AliasTypeId></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382073"/>
            </content>
        </type>
        <type derived="true" id="type.4308">
            <name>const EqualTo&lt;System.Unicode.BidiClassId></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381715"/>
            </content>
        </type>
        <type derived="true" id="type.4341">
            <name>const EqualTo&lt;System.Unicode.BidiPairedBracketTypeId></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381894"/>
            </content>
        </type>
        <type derived="true" id="type.4109">
            <name>const EqualTo&lt;System.Unicode.BinaryPropertyId></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380623"/>
            </content>
        </type>
        <type derived="true" id="type.4143">
            <name>const EqualTo&lt;System.Unicode.BlockId></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380817"/>
            </content>
        </type>
        <type derived="true" id="type.4176">
            <name>const EqualTo&lt;System.Unicode.GeneralCategoryId></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380998"/>
            </content>
        </type>
        <type derived="true" id="type.4275">
            <name>const EqualTo&lt;System.Unicode.NumericTypeId></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381536"/>
            </content>
        </type>
        <type derived="true" id="type.4242">
            <name>const EqualTo&lt;System.Unicode.ScriptId></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381356"/>
            </content>
        </type>
        <type derived="true" id="type.3217">
            <name>const EqualTo&lt;T, U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379040"/>
            </content>
        </type>
        <type derived="true" id="type.3218">
            <name>const EqualTo&lt;T, U>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379040"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3208">
            <name>const EqualTo&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379029"/>
            </content>
        </type>
        <type derived="true" id="type.3209">
            <name>const EqualTo&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379029"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4690">
            <name>const Exception</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378137"/>
            </content>
        </type>
        <type derived="true" id="type.1387610">
            <name>const ExpectationFailure&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385514"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385517">
            <name>const ExpectationFailure*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385514"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4810">
            <name>const ExpectationParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385492"/>
            </content>
        </type>
        <type derived="true" id="type.4811">
            <name>const ExpectationParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385492"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4768">
            <name>const ExpressionStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383574"/>
            </content>
        </type>
        <type derived="true" id="type.4769">
            <name>const ExpressionStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383574"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387447">
            <name>const FailureAction&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385475"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4666">
            <name>const FileByteStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378142"/>
            </content>
        </type>
        <type derived="true" id="type.1387622">
            <name>const FileInfo&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385512"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387621">
            <name>const FileInfo*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385512"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4667">
            <name>const FileSystemException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378147"/>
            </content>
        </type>
        <type derived="true" id="type.4668">
            <name>const FileSystemException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378147"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3147">
            <name>const ForwardList&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378892"/>
            </content>
        </type>
        <type derived="true" id="type.3155">
            <name>const ForwardList&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378920"/>
            </content>
        </type>
        <type derived="true" id="type.3121">
            <name>const ForwardList&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378864"/>
            </content>
        </type>
        <type derived="true" id="type.3145">
            <name>const ForwardList&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378864"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3122">
            <name>const ForwardList&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378864"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3110">
            <name>const ForwardListNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3108"/>
            </content>
        </type>
        <type derived="true" id="type.3101">
            <name>const ForwardListNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378832"/>
            </content>
        </type>
        <type derived="true" id="type.3157">
            <name>const ForwardListNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378930"/>
            </content>
        </type>
        <type derived="true" id="type.3149">
            <name>const ForwardListNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378902"/>
            </content>
        </type>
        <type derived="true" id="type.3118">
            <name>const ForwardListNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378855"/>
            </content>
        </type>
        <type derived="true" id="type.3131">
            <name>const ForwardListNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3129"/>
            </content>
        </type>
        <type derived="true" id="type.3111">
            <name>const ForwardListNode&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3108"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3102">
            <name>const ForwardListNode&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378832"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3132">
            <name>const ForwardListNode&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3129"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3117">
            <name>const ForwardListNodeIterator&lt;T, R, P></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378851"/>
            </content>
        </type>
        <type derived="true" id="type.3106">
            <name>const ForwardListNodeIterator&lt;T, R, P></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378838"/>
            </content>
        </type>
        <type derived="true" id="type.3114">
            <name>const ForwardListNodeIterator&lt;T, R, P>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378838"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3107">
            <name>const ForwardListNodeIterator&lt;T, R, P>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378838"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3160">
            <name>const ForwardListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378939"/>
            </content>
        </type>
        <type derived="true" id="type.3140">
            <name>const ForwardListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3138"/>
            </content>
        </type>
        <type derived="true" id="type.3152">
            <name>const ForwardListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378911"/>
            </content>
        </type>
        <type derived="true" id="type.3142">
            <name>const ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3138"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3153">
            <name>const ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378911"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3161">
            <name>const ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378939"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3141">
            <name>const ForwardListNodeIterator&lt;T, T&amp;, T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3138"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3156">
            <name>const ForwardListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378926"/>
            </content>
        </type>
        <type derived="true" id="type.3127">
            <name>const ForwardListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3125"/>
            </content>
        </type>
        <type derived="true" id="type.3148">
            <name>const ForwardListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378898"/>
            </content>
        </type>
        <type derived="true" id="type.3158">
            <name>const ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378926"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3134">
            <name>const ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3125"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3150">
            <name>const ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378898"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3128">
            <name>const ForwardListNodeIterator&lt;T, const T&amp;, const T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3125"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4774">
            <name>const GotoCaseStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383586"/>
            </content>
        </type>
        <type derived="true" id="type.4775">
            <name>const GotoCaseStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383586"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4759">
            <name>const GotoStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383564"/>
            </content>
        </type>
        <type derived="true" id="type.4760">
            <name>const GotoStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383564"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385525">
            <name>const Grammar*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385522"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387696">
            <name>const Grammar*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385522"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387732">
            <name>const Grammar**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385522"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3268">
            <name>const Greater&lt;T, U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379103"/>
            </content>
        </type>
        <type derived="true" id="type.3269">
            <name>const Greater&lt;T, U>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379103"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3259">
            <name>const Greater&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379092"/>
            </content>
        </type>
        <type derived="true" id="type.3260">
            <name>const Greater&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379092"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3302">
            <name>const GreaterOrEqualTo&lt;T, U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379145"/>
            </content>
        </type>
        <type derived="true" id="type.3303">
            <name>const GreaterOrEqualTo&lt;T, U>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379145"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3293">
            <name>const GreaterOrEqualTo&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379134"/>
            </content>
        </type>
        <type derived="true" id="type.3294">
            <name>const GreaterOrEqualTo&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379134"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3422">
            <name>const HashMap&lt;K, T, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379287"/>
            </content>
        </type>
        <type derived="true" id="type.3355">
            <name>const HashMap&lt;K, T, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379217"/>
            </content>
        </type>
        <type derived="true" id="type.3356">
            <name>const HashMap&lt;K, T, H, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379217"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4223">
            <name>const HashMap&lt;String&lt;char>, Age*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381254"/>
            </content>
        </type>
        <type derived="true" id="type.4388">
            <name>const HashMap&lt;String&lt;char>, AliasType*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382150"/>
            </content>
        </type>
        <type derived="true" id="type.4322">
            <name>const HashMap&lt;String&lt;char>, BidiClass*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381792"/>
            </content>
        </type>
        <type derived="true" id="type.4355">
            <name>const HashMap&lt;String&lt;char>, BidiPairedBracketType*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381971"/>
            </content>
        </type>
        <type derived="true" id="type.4124">
            <name>const HashMap&lt;String&lt;char>, BinaryProperty*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380714"/>
            </content>
        </type>
        <type derived="true" id="type.4157">
            <name>const HashMap&lt;String&lt;char>, Block*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380894"/>
            </content>
        </type>
        <type derived="true" id="type.4190">
            <name>const HashMap&lt;String&lt;char>, GeneralCategory*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381075"/>
            </content>
        </type>
        <type derived="true" id="type.4289">
            <name>const HashMap&lt;String&lt;char>, NumericType*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381613"/>
            </content>
        </type>
        <type derived="true" id="type.4256">
            <name>const HashMap&lt;String&lt;char>, Script*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381433"/>
            </content>
        </type>
        <type derived="true" id="type.4580">
            <name>const HashMap&lt;String&lt;uchar>, Grammar*, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388001"/>
            </content>
        </type>
        <type derived="true" id="type.1388004">
            <name>const HashMap&lt;String&lt;uchar>, Grammar*, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388001"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4593">
            <name>const HashMap&lt;String&lt;uchar>, Namespace*, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388066"/>
            </content>
        </type>
        <type derived="true" id="type.1388069">
            <name>const HashMap&lt;String&lt;uchar>, Namespace*, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388066"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4644">
            <name>const HashMap&lt;String&lt;uchar>, ParsingObject*, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388301"/>
            </content>
        </type>
        <type derived="true" id="type.1388304">
            <name>const HashMap&lt;String&lt;uchar>, ParsingObject*, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388301"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4508">
            <name>const HashMap&lt;String&lt;uchar>, String&lt;uchar>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387530"/>
            </content>
        </type>
        <type derived="true" id="type.1388416">
            <name>const HashMap&lt;String&lt;uchar>, String&lt;uchar>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387530"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387533">
            <name>const HashMap&lt;String&lt;uchar>, String&lt;uchar>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387530"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4210">
            <name>const HashMap&lt;System.Unicode.AgeId, Age*, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381187"/>
            </content>
        </type>
        <type derived="true" id="type.4375">
            <name>const HashMap&lt;System.Unicode.AliasTypeId, AliasType*, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382083"/>
            </content>
        </type>
        <type derived="true" id="type.4309">
            <name>const HashMap&lt;System.Unicode.BidiClassId, BidiClass*, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381725"/>
            </content>
        </type>
        <type derived="true" id="type.4342">
            <name>const HashMap&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381904"/>
            </content>
        </type>
        <type derived="true" id="type.4110">
            <name>const HashMap&lt;System.Unicode.BinaryPropertyId, BinaryProperty*, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380633"/>
            </content>
        </type>
        <type derived="true" id="type.4144">
            <name>const HashMap&lt;System.Unicode.BlockId, Block*, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380827"/>
            </content>
        </type>
        <type derived="true" id="type.4177">
            <name>const HashMap&lt;System.Unicode.GeneralCategoryId, GeneralCategory*, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381008"/>
            </content>
        </type>
        <type derived="true" id="type.4276">
            <name>const HashMap&lt;System.Unicode.NumericTypeId, NumericType*, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381546"/>
            </content>
        </type>
        <type derived="true" id="type.4243">
            <name>const HashMap&lt;System.Unicode.ScriptId, Script*, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381366"/>
            </content>
        </type>
        <type derived="true" id="type.4531">
            <name>const HashSet&lt;Grammar*, Hasher&lt;Grammar*>, EqualTo&lt;Grammar*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387707"/>
            </content>
        </type>
        <type derived="true" id="type.1387769">
            <name>const HashSet&lt;Grammar*, Hasher&lt;Grammar*>, EqualTo&lt;Grammar*>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387707"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387710">
            <name>const HashSet&lt;Grammar*, Hasher&lt;Grammar*>, EqualTo&lt;Grammar*>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387707"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4546">
            <name>const HashSet&lt;String&lt;uchar>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387790"/>
            </content>
        </type>
        <type derived="true" id="type.1387849">
            <name>const HashSet&lt;String&lt;uchar>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387790"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387793">
            <name>const HashSet&lt;String&lt;uchar>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387790"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3497">
            <name>const HashSet&lt;T, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379420"/>
            </content>
        </type>
        <type derived="true" id="type.3436">
            <name>const HashSet&lt;T, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379357"/>
            </content>
        </type>
        <type derived="true" id="type.3437">
            <name>const HashSet&lt;T, H, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379357"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388491">
            <name>const Hasher&lt;Grammar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387692"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388398">
            <name>const Hasher&lt;String&lt;uchar>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387516"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4533">
            <name>const Hashtable&lt;Grammar*, Grammar*, Identity&lt;Grammar*>, Hasher&lt;Grammar*>, EqualTo&lt;Grammar*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387717"/>
            </content>
        </type>
        <type derived="true" id="type.1387738">
            <name>const Hashtable&lt;Grammar*, Grammar*, Identity&lt;Grammar*>, Hasher&lt;Grammar*>, EqualTo&lt;Grammar*>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387717"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387720">
            <name>const Hashtable&lt;Grammar*, Grammar*, Identity&lt;Grammar*>, Hasher&lt;Grammar*>, EqualTo&lt;Grammar*>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387717"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3424">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379304"/>
            </content>
        </type>
        <type derived="true" id="type.3372">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3370"/>
            </content>
        </type>
        <type derived="true" id="type.3390">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3370"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3373">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3370"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3536">
            <name>const Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379542"/>
            </content>
        </type>
        <type derived="true" id="type.3556">
            <name>const Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379542"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3537">
            <name>const Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379542"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4225">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Age*>, SelectFirst&lt;String&lt;char>, Age*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381267"/>
            </content>
        </type>
        <type derived="true" id="type.4390">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, AliasType*>, SelectFirst&lt;String&lt;char>, AliasType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382163"/>
            </content>
        </type>
        <type derived="true" id="type.4324">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiClass*>, SelectFirst&lt;String&lt;char>, BidiClass*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381805"/>
            </content>
        </type>
        <type derived="true" id="type.4357">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiPairedBracketType*>, SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381984"/>
            </content>
        </type>
        <type derived="true" id="type.4126">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BinaryProperty*>, SelectFirst&lt;String&lt;char>, BinaryProperty*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380727"/>
            </content>
        </type>
        <type derived="true" id="type.4159">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Block*>, SelectFirst&lt;String&lt;char>, Block*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380907"/>
            </content>
        </type>
        <type derived="true" id="type.4192">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, GeneralCategory*>, SelectFirst&lt;String&lt;char>, GeneralCategory*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381088"/>
            </content>
        </type>
        <type derived="true" id="type.4291">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, NumericType*>, SelectFirst&lt;String&lt;char>, NumericType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381626"/>
            </content>
        </type>
        <type derived="true" id="type.4258">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Script*>, SelectFirst&lt;String&lt;char>, Script*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381446"/>
            </content>
        </type>
        <type derived="true" id="type.4582">
            <name>const Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Grammar*>, SelectFirst&lt;String&lt;uchar>, Grammar*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388015"/>
            </content>
        </type>
        <type derived="true" id="type.1388035">
            <name>const Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Grammar*>, SelectFirst&lt;String&lt;uchar>, Grammar*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388015"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388018">
            <name>const Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Grammar*>, SelectFirst&lt;String&lt;uchar>, Grammar*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388015"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4595">
            <name>const Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Namespace*>, SelectFirst&lt;String&lt;uchar>, Namespace*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388081"/>
            </content>
        </type>
        <type derived="true" id="type.1388101">
            <name>const Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Namespace*>, SelectFirst&lt;String&lt;uchar>, Namespace*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388081"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388084">
            <name>const Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Namespace*>, SelectFirst&lt;String&lt;uchar>, Namespace*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388081"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4646">
            <name>const Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, ParsingObject*>, SelectFirst&lt;String&lt;uchar>, ParsingObject*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388316"/>
            </content>
        </type>
        <type derived="true" id="type.1388336">
            <name>const Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, ParsingObject*>, SelectFirst&lt;String&lt;uchar>, ParsingObject*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388316"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388319">
            <name>const Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, ParsingObject*>, SelectFirst&lt;String&lt;uchar>, ParsingObject*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388316"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4510">
            <name>const Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, String&lt;uchar>>, SelectFirst&lt;String&lt;uchar>, String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387543"/>
            </content>
        </type>
        <type derived="true" id="type.1387563">
            <name>const Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, String&lt;uchar>>, SelectFirst&lt;String&lt;uchar>, String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387543"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387546">
            <name>const Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, String&lt;uchar>>, SelectFirst&lt;String&lt;uchar>, String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387543"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4548">
            <name>const Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387800"/>
            </content>
        </type>
        <type derived="true" id="type.1387818">
            <name>const Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387800"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387803">
            <name>const Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387800"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4212">
            <name>const Hashtable&lt;System.Unicode.AgeId, Pair&lt;System.Unicode.AgeId, Age*>, SelectFirst&lt;System.Unicode.AgeId, Age*>, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381202"/>
            </content>
        </type>
        <type derived="true" id="type.4377">
            <name>const Hashtable&lt;System.Unicode.AliasTypeId, Pair&lt;System.Unicode.AliasTypeId, AliasType*>, SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382098"/>
            </content>
        </type>
        <type derived="true" id="type.4311">
            <name>const Hashtable&lt;System.Unicode.BidiClassId, Pair&lt;System.Unicode.BidiClassId, BidiClass*>, SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381740"/>
            </content>
        </type>
        <type derived="true" id="type.4344">
            <name>const Hashtable&lt;System.Unicode.BidiPairedBracketTypeId, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381919"/>
            </content>
        </type>
        <type derived="true" id="type.4112">
            <name>const Hashtable&lt;System.Unicode.BinaryPropertyId, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380648"/>
            </content>
        </type>
        <type derived="true" id="type.4146">
            <name>const Hashtable&lt;System.Unicode.BlockId, Pair&lt;System.Unicode.BlockId, Block*>, SelectFirst&lt;System.Unicode.BlockId, Block*>, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380842"/>
            </content>
        </type>
        <type derived="true" id="type.4179">
            <name>const Hashtable&lt;System.Unicode.GeneralCategoryId, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381023"/>
            </content>
        </type>
        <type derived="true" id="type.4278">
            <name>const Hashtable&lt;System.Unicode.NumericTypeId, Pair&lt;System.Unicode.NumericTypeId, NumericType*>, SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381561"/>
            </content>
        </type>
        <type derived="true" id="type.4245">
            <name>const Hashtable&lt;System.Unicode.ScriptId, Pair&lt;System.Unicode.ScriptId, Script*>, SelectFirst&lt;System.Unicode.ScriptId, Script*>, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381381"/>
            </content>
        </type>
        <type derived="true" id="type.3447">
            <name>const Hashtable&lt;T, T, Identity&lt;T>, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3445"/>
            </content>
        </type>
        <type derived="true" id="type.3499">
            <name>const Hashtable&lt;T, T, Identity&lt;T>, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379431"/>
            </content>
        </type>
        <type derived="true" id="type.3466">
            <name>const Hashtable&lt;T, T, Identity&lt;T>, H, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3445"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3448">
            <name>const Hashtable&lt;T, T, Identity&lt;T>, H, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3445"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4534">
            <name>const HashtableIterator&lt;Grammar*, Grammar*&amp;, Grammar**, Hashtable&lt;Grammar*, Grammar*, Identity&lt;Grammar*>, Hasher&lt;Grammar*>, EqualTo&lt;Grammar*>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387723"/>
            </content>
        </type>
        <type derived="true" id="type.1387742">
            <name>const HashtableIterator&lt;Grammar*, Grammar*&amp;, Grammar**, Hashtable&lt;Grammar*, Grammar*, Identity&lt;Grammar*>, Hasher&lt;Grammar*>, EqualTo&lt;Grammar*>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387723"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387726">
            <name>const HashtableIterator&lt;Grammar*, Grammar*&amp;, Grammar**, Hashtable&lt;Grammar*, Grammar*, Identity&lt;Grammar*>, Hasher&lt;Grammar*>, EqualTo&lt;Grammar*>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387723"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4536">
            <name>const HashtableIterator&lt;Grammar*, const Grammar*&amp;, const Grammar**, Hashtable&lt;Grammar*, Grammar*, Identity&lt;Grammar*>, Hasher&lt;Grammar*>, EqualTo&lt;Grammar*>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387733"/>
            </content>
        </type>
        <type derived="true" id="type.1387736">
            <name>const HashtableIterator&lt;Grammar*, const Grammar*&amp;, const Grammar**, Hashtable&lt;Grammar*, Grammar*, Identity&lt;Grammar*>, Hasher&lt;Grammar*>, EqualTo&lt;Grammar*>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387733"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3377">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3375"/>
            </content>
        </type>
        <type derived="true" id="type.3425">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379309"/>
            </content>
        </type>
        <type derived="true" id="type.3394">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3375"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3378">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3375"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3427">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379319"/>
            </content>
        </type>
        <type derived="true" id="type.3387">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3385"/>
            </content>
        </type>
        <type derived="true" id="type.3388">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3385"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4226">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, Age*>, Pair&lt;String&lt;char>, Age*>&amp;, Pair&lt;String&lt;char>, Age*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Age*>, SelectFirst&lt;String&lt;char>, Age*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381272"/>
            </content>
        </type>
        <type derived="true" id="type.4228">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, Age*>, const Pair&lt;String&lt;char>, Age*>&amp;, const Pair&lt;String&lt;char>, Age*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Age*>, SelectFirst&lt;String&lt;char>, Age*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381282"/>
            </content>
        </type>
        <type derived="true" id="type.4391">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, AliasType*>, Pair&lt;String&lt;char>, AliasType*>&amp;, Pair&lt;String&lt;char>, AliasType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, AliasType*>, SelectFirst&lt;String&lt;char>, AliasType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382168"/>
            </content>
        </type>
        <type derived="true" id="type.4393">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, AliasType*>, const Pair&lt;String&lt;char>, AliasType*>&amp;, const Pair&lt;String&lt;char>, AliasType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, AliasType*>, SelectFirst&lt;String&lt;char>, AliasType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382178"/>
            </content>
        </type>
        <type derived="true" id="type.4325">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, BidiClass*>, Pair&lt;String&lt;char>, BidiClass*>&amp;, Pair&lt;String&lt;char>, BidiClass*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiClass*>, SelectFirst&lt;String&lt;char>, BidiClass*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381810"/>
            </content>
        </type>
        <type derived="true" id="type.4327">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, BidiClass*>, const Pair&lt;String&lt;char>, BidiClass*>&amp;, const Pair&lt;String&lt;char>, BidiClass*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiClass*>, SelectFirst&lt;String&lt;char>, BidiClass*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381820"/>
            </content>
        </type>
        <type derived="true" id="type.4358">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>, Pair&lt;String&lt;char>, BidiPairedBracketType*>&amp;, Pair&lt;String&lt;char>, BidiPairedBracketType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiPairedBracketType*>, SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381989"/>
            </content>
        </type>
        <type derived="true" id="type.4360">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>, const Pair&lt;String&lt;char>, BidiPairedBracketType*>&amp;, const Pair&lt;String&lt;char>, BidiPairedBracketType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiPairedBracketType*>, SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381999"/>
            </content>
        </type>
        <type derived="true" id="type.4127">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, BinaryProperty*>, Pair&lt;String&lt;char>, BinaryProperty*>&amp;, Pair&lt;String&lt;char>, BinaryProperty*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BinaryProperty*>, SelectFirst&lt;String&lt;char>, BinaryProperty*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380732"/>
            </content>
        </type>
        <type derived="true" id="type.4129">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, BinaryProperty*>, const Pair&lt;String&lt;char>, BinaryProperty*>&amp;, const Pair&lt;String&lt;char>, BinaryProperty*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BinaryProperty*>, SelectFirst&lt;String&lt;char>, BinaryProperty*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380742"/>
            </content>
        </type>
        <type derived="true" id="type.4160">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, Block*>, Pair&lt;String&lt;char>, Block*>&amp;, Pair&lt;String&lt;char>, Block*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Block*>, SelectFirst&lt;String&lt;char>, Block*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380912"/>
            </content>
        </type>
        <type derived="true" id="type.4162">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, Block*>, const Pair&lt;String&lt;char>, Block*>&amp;, const Pair&lt;String&lt;char>, Block*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Block*>, SelectFirst&lt;String&lt;char>, Block*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380922"/>
            </content>
        </type>
        <type derived="true" id="type.4193">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, GeneralCategory*>, Pair&lt;String&lt;char>, GeneralCategory*>&amp;, Pair&lt;String&lt;char>, GeneralCategory*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, GeneralCategory*>, SelectFirst&lt;String&lt;char>, GeneralCategory*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381093"/>
            </content>
        </type>
        <type derived="true" id="type.4195">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, GeneralCategory*>, const Pair&lt;String&lt;char>, GeneralCategory*>&amp;, const Pair&lt;String&lt;char>, GeneralCategory*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, GeneralCategory*>, SelectFirst&lt;String&lt;char>, GeneralCategory*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381103"/>
            </content>
        </type>
        <type derived="true" id="type.4292">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, NumericType*>, Pair&lt;String&lt;char>, NumericType*>&amp;, Pair&lt;String&lt;char>, NumericType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, NumericType*>, SelectFirst&lt;String&lt;char>, NumericType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381631"/>
            </content>
        </type>
        <type derived="true" id="type.4294">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, NumericType*>, const Pair&lt;String&lt;char>, NumericType*>&amp;, const Pair&lt;String&lt;char>, NumericType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, NumericType*>, SelectFirst&lt;String&lt;char>, NumericType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381641"/>
            </content>
        </type>
        <type derived="true" id="type.4259">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, Script*>, Pair&lt;String&lt;char>, Script*>&amp;, Pair&lt;String&lt;char>, Script*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Script*>, SelectFirst&lt;String&lt;char>, Script*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381451"/>
            </content>
        </type>
        <type derived="true" id="type.4261">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, Script*>, const Pair&lt;String&lt;char>, Script*>&amp;, const Pair&lt;String&lt;char>, Script*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Script*>, SelectFirst&lt;String&lt;char>, Script*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381461"/>
            </content>
        </type>
        <type derived="true" id="type.4583">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, Grammar*>, Pair&lt;String&lt;uchar>, Grammar*>&amp;, Pair&lt;String&lt;uchar>, Grammar*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Grammar*>, SelectFirst&lt;String&lt;uchar>, Grammar*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388020"/>
            </content>
        </type>
        <type derived="true" id="type.1388039">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, Grammar*>, Pair&lt;String&lt;uchar>, Grammar*>&amp;, Pair&lt;String&lt;uchar>, Grammar*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Grammar*>, SelectFirst&lt;String&lt;uchar>, Grammar*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388020"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388023">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, Grammar*>, Pair&lt;String&lt;uchar>, Grammar*>&amp;, Pair&lt;String&lt;uchar>, Grammar*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Grammar*>, SelectFirst&lt;String&lt;uchar>, Grammar*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388020"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4585">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, Grammar*>, const Pair&lt;String&lt;uchar>, Grammar*>&amp;, const Pair&lt;String&lt;uchar>, Grammar*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Grammar*>, SelectFirst&lt;String&lt;uchar>, Grammar*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388030"/>
            </content>
        </type>
        <type derived="true" id="type.1388677">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, Grammar*>, const Pair&lt;String&lt;uchar>, Grammar*>&amp;, const Pair&lt;String&lt;uchar>, Grammar*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Grammar*>, SelectFirst&lt;String&lt;uchar>, Grammar*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388030"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388033">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, Grammar*>, const Pair&lt;String&lt;uchar>, Grammar*>&amp;, const Pair&lt;String&lt;uchar>, Grammar*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Grammar*>, SelectFirst&lt;String&lt;uchar>, Grammar*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388030"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4596">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, Namespace*>, Pair&lt;String&lt;uchar>, Namespace*>&amp;, Pair&lt;String&lt;uchar>, Namespace*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Namespace*>, SelectFirst&lt;String&lt;uchar>, Namespace*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388086"/>
            </content>
        </type>
        <type derived="true" id="type.1388105">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, Namespace*>, Pair&lt;String&lt;uchar>, Namespace*>&amp;, Pair&lt;String&lt;uchar>, Namespace*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Namespace*>, SelectFirst&lt;String&lt;uchar>, Namespace*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388086"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388089">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, Namespace*>, Pair&lt;String&lt;uchar>, Namespace*>&amp;, Pair&lt;String&lt;uchar>, Namespace*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Namespace*>, SelectFirst&lt;String&lt;uchar>, Namespace*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388086"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4598">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, Namespace*>, const Pair&lt;String&lt;uchar>, Namespace*>&amp;, const Pair&lt;String&lt;uchar>, Namespace*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Namespace*>, SelectFirst&lt;String&lt;uchar>, Namespace*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388096"/>
            </content>
        </type>
        <type derived="true" id="type.1388691">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, Namespace*>, const Pair&lt;String&lt;uchar>, Namespace*>&amp;, const Pair&lt;String&lt;uchar>, Namespace*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Namespace*>, SelectFirst&lt;String&lt;uchar>, Namespace*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388096"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388099">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, Namespace*>, const Pair&lt;String&lt;uchar>, Namespace*>&amp;, const Pair&lt;String&lt;uchar>, Namespace*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Namespace*>, SelectFirst&lt;String&lt;uchar>, Namespace*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388096"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4647">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, ParsingObject*>, Pair&lt;String&lt;uchar>, ParsingObject*>&amp;, Pair&lt;String&lt;uchar>, ParsingObject*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, ParsingObject*>, SelectFirst&lt;String&lt;uchar>, ParsingObject*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388321"/>
            </content>
        </type>
        <type derived="true" id="type.1388340">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, ParsingObject*>, Pair&lt;String&lt;uchar>, ParsingObject*>&amp;, Pair&lt;String&lt;uchar>, ParsingObject*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, ParsingObject*>, SelectFirst&lt;String&lt;uchar>, ParsingObject*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388321"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388324">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, ParsingObject*>, Pair&lt;String&lt;uchar>, ParsingObject*>&amp;, Pair&lt;String&lt;uchar>, ParsingObject*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, ParsingObject*>, SelectFirst&lt;String&lt;uchar>, ParsingObject*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388321"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4649">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, ParsingObject*>, const Pair&lt;String&lt;uchar>, ParsingObject*>&amp;, const Pair&lt;String&lt;uchar>, ParsingObject*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, ParsingObject*>, SelectFirst&lt;String&lt;uchar>, ParsingObject*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388331"/>
            </content>
        </type>
        <type derived="true" id="type.1388772">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, ParsingObject*>, const Pair&lt;String&lt;uchar>, ParsingObject*>&amp;, const Pair&lt;String&lt;uchar>, ParsingObject*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, ParsingObject*>, SelectFirst&lt;String&lt;uchar>, ParsingObject*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388331"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388334">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, ParsingObject*>, const Pair&lt;String&lt;uchar>, ParsingObject*>&amp;, const Pair&lt;String&lt;uchar>, ParsingObject*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, ParsingObject*>, SelectFirst&lt;String&lt;uchar>, ParsingObject*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388331"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4511">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>, Pair&lt;String&lt;uchar>, String&lt;uchar>>&amp;, Pair&lt;String&lt;uchar>, String&lt;uchar>>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, String&lt;uchar>>, SelectFirst&lt;String&lt;uchar>, String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387548"/>
            </content>
        </type>
        <type derived="true" id="type.1387567">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>, Pair&lt;String&lt;uchar>, String&lt;uchar>>&amp;, Pair&lt;String&lt;uchar>, String&lt;uchar>>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, String&lt;uchar>>, SelectFirst&lt;String&lt;uchar>, String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387548"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387551">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>, Pair&lt;String&lt;uchar>, String&lt;uchar>>&amp;, Pair&lt;String&lt;uchar>, String&lt;uchar>>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, String&lt;uchar>>, SelectFirst&lt;String&lt;uchar>, String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387548"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4513">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>, const Pair&lt;String&lt;uchar>, String&lt;uchar>>&amp;, const Pair&lt;String&lt;uchar>, String&lt;uchar>>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, String&lt;uchar>>, SelectFirst&lt;String&lt;uchar>, String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387558"/>
            </content>
        </type>
        <type derived="true" id="type.1388443">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>, const Pair&lt;String&lt;uchar>, String&lt;uchar>>&amp;, const Pair&lt;String&lt;uchar>, String&lt;uchar>>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, String&lt;uchar>>, SelectFirst&lt;String&lt;uchar>, String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387558"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387561">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>, const Pair&lt;String&lt;uchar>, String&lt;uchar>>&amp;, const Pair&lt;String&lt;uchar>, String&lt;uchar>>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, String&lt;uchar>>, SelectFirst&lt;String&lt;uchar>, String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387558"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4213">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.AgeId, Age*>, Pair&lt;System.Unicode.AgeId, Age*>&amp;, Pair&lt;System.Unicode.AgeId, Age*>*, Hashtable&lt;System.Unicode.AgeId, Pair&lt;System.Unicode.AgeId, Age*>, SelectFirst&lt;System.Unicode.AgeId, Age*>, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381207"/>
            </content>
        </type>
        <type derived="true" id="type.4215">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.AgeId, Age*>, const Pair&lt;System.Unicode.AgeId, Age*>&amp;, const Pair&lt;System.Unicode.AgeId, Age*>*, Hashtable&lt;System.Unicode.AgeId, Pair&lt;System.Unicode.AgeId, Age*>, SelectFirst&lt;System.Unicode.AgeId, Age*>, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381217"/>
            </content>
        </type>
        <type derived="true" id="type.4378">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>, Pair&lt;System.Unicode.AliasTypeId, AliasType*>&amp;, Pair&lt;System.Unicode.AliasTypeId, AliasType*>*, Hashtable&lt;System.Unicode.AliasTypeId, Pair&lt;System.Unicode.AliasTypeId, AliasType*>, SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382103"/>
            </content>
        </type>
        <type derived="true" id="type.4380">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>, const Pair&lt;System.Unicode.AliasTypeId, AliasType*>&amp;, const Pair&lt;System.Unicode.AliasTypeId, AliasType*>*, Hashtable&lt;System.Unicode.AliasTypeId, Pair&lt;System.Unicode.AliasTypeId, AliasType*>, SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382113"/>
            </content>
        </type>
        <type derived="true" id="type.4312">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>, Pair&lt;System.Unicode.BidiClassId, BidiClass*>&amp;, Pair&lt;System.Unicode.BidiClassId, BidiClass*>*, Hashtable&lt;System.Unicode.BidiClassId, Pair&lt;System.Unicode.BidiClassId, BidiClass*>, SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381745"/>
            </content>
        </type>
        <type derived="true" id="type.4314">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>, const Pair&lt;System.Unicode.BidiClassId, BidiClass*>&amp;, const Pair&lt;System.Unicode.BidiClassId, BidiClass*>*, Hashtable&lt;System.Unicode.BidiClassId, Pair&lt;System.Unicode.BidiClassId, BidiClass*>, SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381755"/>
            </content>
        </type>
        <type derived="true" id="type.4345">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>&amp;, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>*, Hashtable&lt;System.Unicode.BidiPairedBracketTypeId, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381924"/>
            </content>
        </type>
        <type derived="true" id="type.4347">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, const Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>&amp;, const Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>*, Hashtable&lt;System.Unicode.BidiPairedBracketTypeId, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381934"/>
            </content>
        </type>
        <type derived="true" id="type.4113">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>&amp;, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>*, Hashtable&lt;System.Unicode.BinaryPropertyId, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380653"/>
            </content>
        </type>
        <type derived="true" id="type.4115">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, const Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>&amp;, const Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>*, Hashtable&lt;System.Unicode.BinaryPropertyId, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380663"/>
            </content>
        </type>
        <type derived="true" id="type.4147">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.BlockId, Block*>, Pair&lt;System.Unicode.BlockId, Block*>&amp;, Pair&lt;System.Unicode.BlockId, Block*>*, Hashtable&lt;System.Unicode.BlockId, Pair&lt;System.Unicode.BlockId, Block*>, SelectFirst&lt;System.Unicode.BlockId, Block*>, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380847"/>
            </content>
        </type>
        <type derived="true" id="type.4149">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.BlockId, Block*>, const Pair&lt;System.Unicode.BlockId, Block*>&amp;, const Pair&lt;System.Unicode.BlockId, Block*>*, Hashtable&lt;System.Unicode.BlockId, Pair&lt;System.Unicode.BlockId, Block*>, SelectFirst&lt;System.Unicode.BlockId, Block*>, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380857"/>
            </content>
        </type>
        <type derived="true" id="type.4180">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>&amp;, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>*, Hashtable&lt;System.Unicode.GeneralCategoryId, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381028"/>
            </content>
        </type>
        <type derived="true" id="type.4182">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, const Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>&amp;, const Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>*, Hashtable&lt;System.Unicode.GeneralCategoryId, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381038"/>
            </content>
        </type>
        <type derived="true" id="type.4279">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>, Pair&lt;System.Unicode.NumericTypeId, NumericType*>&amp;, Pair&lt;System.Unicode.NumericTypeId, NumericType*>*, Hashtable&lt;System.Unicode.NumericTypeId, Pair&lt;System.Unicode.NumericTypeId, NumericType*>, SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381566"/>
            </content>
        </type>
        <type derived="true" id="type.4281">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>, const Pair&lt;System.Unicode.NumericTypeId, NumericType*>&amp;, const Pair&lt;System.Unicode.NumericTypeId, NumericType*>*, Hashtable&lt;System.Unicode.NumericTypeId, Pair&lt;System.Unicode.NumericTypeId, NumericType*>, SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381576"/>
            </content>
        </type>
        <type derived="true" id="type.4246">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.ScriptId, Script*>, Pair&lt;System.Unicode.ScriptId, Script*>&amp;, Pair&lt;System.Unicode.ScriptId, Script*>*, Hashtable&lt;System.Unicode.ScriptId, Pair&lt;System.Unicode.ScriptId, Script*>, SelectFirst&lt;System.Unicode.ScriptId, Script*>, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381386"/>
            </content>
        </type>
        <type derived="true" id="type.4248">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.ScriptId, Script*>, const Pair&lt;System.Unicode.ScriptId, Script*>&amp;, const Pair&lt;System.Unicode.ScriptId, Script*>*, Hashtable&lt;System.Unicode.ScriptId, Pair&lt;System.Unicode.ScriptId, Script*>, SelectFirst&lt;System.Unicode.ScriptId, Script*>, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381396"/>
            </content>
        </type>
        <type derived="true" id="type.4549">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387804"/>
            </content>
        </type>
        <type derived="true" id="type.1387822">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387804"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387807">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387804"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4551">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387813"/>
            </content>
        </type>
        <type derived="true" id="type.1388589">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387813"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387816">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387813"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3523">
            <name>const HashtableIterator&lt;T, R, P, H></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379517"/>
            </content>
        </type>
        <type derived="true" id="type.3533">
            <name>const HashtableIterator&lt;T, R, P, H></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379529"/>
            </content>
        </type>
        <type derived="true" id="type.3524">
            <name>const HashtableIterator&lt;T, R, P, H>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379517"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3500">
            <name>const HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379437"/>
            </content>
        </type>
        <type derived="true" id="type.3453">
            <name>const HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3451"/>
            </content>
        </type>
        <type derived="true" id="type.3470">
            <name>const HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3451"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3454">
            <name>const HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3451"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3463">
            <name>const HashtableIterator&lt;T, const T&amp;, const T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3461"/>
            </content>
        </type>
        <type derived="true" id="type.3502">
            <name>const HashtableIterator&lt;T, const T&amp;, const T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379447"/>
            </content>
        </type>
        <type derived="true" id="type.3464">
            <name>const HashtableIterator&lt;T, const T&amp;, const T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3461"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3542">
            <name>const HashtableIterator&lt;ValueType, ValueType&amp;, ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3540"/>
            </content>
        </type>
        <type derived="true" id="type.3560">
            <name>const HashtableIterator&lt;ValueType, ValueType&amp;, ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3540"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3543">
            <name>const HashtableIterator&lt;ValueType, ValueType&amp;, ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3540"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3553">
            <name>const HashtableIterator&lt;ValueType, const ValueType&amp;, const ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3551"/>
            </content>
        </type>
        <type derived="true" id="type.3554">
            <name>const HashtableIterator&lt;ValueType, const ValueType&amp;, const ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3551"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4669">
            <name>const IOBuffer</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378149"/>
            </content>
        </type>
        <type derived="true" id="type.4745">
            <name>const Identifier</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383534"/>
            </content>
        </type>
        <type derived="true" id="type.4746">
            <name>const Identifier&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383534"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387777">
            <name>const IdentifierCharsRule&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385526"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385528">
            <name>const IdentifierCharsRule*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385526"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4532">
            <name>const Identity&lt;Grammar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387711"/>
            </content>
        </type>
        <type derived="true" id="type.1388485">
            <name>const Identity&lt;Grammar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387711"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387713">
            <name>const Identity&lt;Grammar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387711"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4547">
            <name>const Identity&lt;String&lt;uchar>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387794"/>
            </content>
        </type>
        <type derived="true" id="type.1388562">
            <name>const Identity&lt;String&lt;uchar>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387794"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387796">
            <name>const Identity&lt;String&lt;uchar>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387794"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3439">
            <name>const Identity&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3438"/>
            </content>
        </type>
        <type derived="true" id="type.3203">
            <name>const Identity&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379022"/>
            </content>
        </type>
        <type derived="true" id="type.3936">
            <name>const Identity&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380161"/>
            </content>
        </type>
        <type derived="true" id="type.3891">
            <name>const Identity&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3890"/>
            </content>
        </type>
        <type derived="true" id="type.3945">
            <name>const Identity&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380211"/>
            </content>
        </type>
        <type derived="true" id="type.3498">
            <name>const Identity&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379424"/>
            </content>
        </type>
        <type derived="true" id="type.3440">
            <name>const Identity&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3438"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3204">
            <name>const Identity&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379022"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3892">
            <name>const Identity&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3890"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4670">
            <name>const InputFileStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378153"/>
            </content>
        </type>
        <type derived="true" id="type.4675">
            <name>const InputStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378391"/>
            </content>
        </type>
        <type derived="true" id="type.4679">
            <name>const InputStringStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378411"/>
            </content>
        </type>
        <type derived="true" id="type.4673">
            <name>const InvalidPathException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378335"/>
            </content>
        </type>
        <type derived="true" id="type.4674">
            <name>const InvalidPathException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378335"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4724">
            <name>const Invoke</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383512"/>
            </content>
        </type>
        <type derived="true" id="type.4725">
            <name>const Invoke&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383512"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3359">
            <name>const K&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378253"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3700">
            <name>const Key&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378309"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3875">
            <name>const KeyType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378377"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3562">
            <name>const KeyType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378283"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385537">
            <name>const KeywordListParser*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385534"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4816">
            <name>const KeywordParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385530"/>
            </content>
        </type>
        <type derived="true" id="type.4817">
            <name>const KeywordParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385530"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385533">
            <name>const KeywordParser*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385530"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4807">
            <name>const KleeneStarParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385490"/>
            </content>
        </type>
        <type derived="true" id="type.4808">
            <name>const KleeneStarParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385490"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3251">
            <name>const Less&lt;T, U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379082"/>
            </content>
        </type>
        <type derived="true" id="type.3252">
            <name>const Less&lt;T, U>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379082"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3242">
            <name>const Less&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379071"/>
            </content>
        </type>
        <type derived="true" id="type.3243">
            <name>const Less&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379071"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3285">
            <name>const LessOrEqualTo&lt;T, U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379124"/>
            </content>
        </type>
        <type derived="true" id="type.3286">
            <name>const LessOrEqualTo&lt;T, U>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379124"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3276">
            <name>const LessOrEqualTo&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379113"/>
            </content>
        </type>
        <type derived="true" id="type.3277">
            <name>const LessOrEqualTo&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379113"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3598">
            <name>const LinkedList&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3596"/>
            </content>
        </type>
        <type derived="true" id="type.3627">
            <name>const LinkedList&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379661"/>
            </content>
        </type>
        <type derived="true" id="type.3649">
            <name>const LinkedList&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379685"/>
            </content>
        </type>
        <type derived="true" id="type.3653">
            <name>const LinkedList&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379709"/>
            </content>
        </type>
        <type derived="true" id="type.3622">
            <name>const LinkedList&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379635"/>
            </content>
        </type>
        <type derived="true" id="type.3647">
            <name>const LinkedList&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379661"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3618">
            <name>const LinkedList&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3596"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3628">
            <name>const LinkedList&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379661"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3599">
            <name>const LinkedList&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3596"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3608">
            <name>const LinkedListNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3606"/>
            </content>
        </type>
        <type derived="true" id="type.3589">
            <name>const LinkedListNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379596"/>
            </content>
        </type>
        <type derived="true" id="type.3637">
            <name>const LinkedListNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3635"/>
            </content>
        </type>
        <type derived="true" id="type.3624">
            <name>const LinkedListNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379645"/>
            </content>
        </type>
        <type derived="true" id="type.3651">
            <name>const LinkedListNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379695"/>
            </content>
        </type>
        <type derived="true" id="type.3655">
            <name>const LinkedListNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379719"/>
            </content>
        </type>
        <type derived="true" id="type.3609">
            <name>const LinkedListNode&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3606"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3590">
            <name>const LinkedListNode&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379596"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3638">
            <name>const LinkedListNode&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3635"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3594">
            <name>const LinkedListNodeIterator&lt;T, R, P></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379602"/>
            </content>
        </type>
        <type derived="true" id="type.3621">
            <name>const LinkedListNodeIterator&lt;T, R, P></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379631"/>
            </content>
        </type>
        <type derived="true" id="type.3595">
            <name>const LinkedListNodeIterator&lt;T, R, P>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379602"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3604">
            <name>const LinkedListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3602"/>
            </content>
        </type>
        <type derived="true" id="type.3633">
            <name>const LinkedListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3631"/>
            </content>
        </type>
        <type derived="true" id="type.3623">
            <name>const LinkedListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379641"/>
            </content>
        </type>
        <type derived="true" id="type.3654">
            <name>const LinkedListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379715"/>
            </content>
        </type>
        <type derived="true" id="type.3650">
            <name>const LinkedListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379691"/>
            </content>
        </type>
        <type derived="true" id="type.3634">
            <name>const LinkedListNodeIterator&lt;T, T&amp;, T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3631"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3605">
            <name>const LinkedListNodeIterator&lt;T, T&amp;, T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3602"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3652">
            <name>const LinkedListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379702"/>
            </content>
        </type>
        <type derived="true" id="type.3656">
            <name>const LinkedListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379726"/>
            </content>
        </type>
        <type derived="true" id="type.3615">
            <name>const LinkedListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3613"/>
            </content>
        </type>
        <type derived="true" id="type.3625">
            <name>const LinkedListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379652"/>
            </content>
        </type>
        <type derived="true" id="type.3644">
            <name>const LinkedListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3642"/>
            </content>
        </type>
        <type derived="true" id="type.3616">
            <name>const LinkedListNodeIterator&lt;T, const T&amp;, const T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3613"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3645">
            <name>const LinkedListNodeIterator&lt;T, const T&amp;, const T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3642"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4634">
            <name>const List&lt;ActionParser*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388251"/>
            </content>
        </type>
        <type derived="true" id="type.1388273">
            <name>const List&lt;ActionParser*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388251"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388254">
            <name>const List&lt;ActionParser*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388251"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4237">
            <name>const List&lt;Age*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381326"/>
            </content>
        </type>
        <type derived="true" id="type.4402">
            <name>const List&lt;AliasType*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382222"/>
            </content>
        </type>
        <type derived="true" id="type.4336">
            <name>const List&lt;BidiClass*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381864"/>
            </content>
        </type>
        <type derived="true" id="type.4369">
            <name>const List&lt;BidiPairedBracketType*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382043"/>
            </content>
        </type>
        <type derived="true" id="type.4137">
            <name>const List&lt;BinaryProperty*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380778"/>
            </content>
        </type>
        <type derived="true" id="type.4171">
            <name>const List&lt;Block*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380966"/>
            </content>
        </type>
        <type derived="true" id="type.4537">
            <name>const List&lt;Bucket&lt;Grammar*>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387744"/>
            </content>
        </type>
        <type derived="true" id="type.1387766">
            <name>const List&lt;Bucket&lt;Grammar*>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387744"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387747">
            <name>const List&lt;Bucket&lt;Grammar*>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387744"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3428">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379330"/>
            </content>
        </type>
        <type derived="true" id="type.3398">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3396"/>
            </content>
        </type>
        <type derived="true" id="type.3418">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3396"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3399">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3396"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4229">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381293"/>
            </content>
        </type>
        <type derived="true" id="type.4394">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382189"/>
            </content>
        </type>
        <type derived="true" id="type.4328">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381831"/>
            </content>
        </type>
        <type derived="true" id="type.4361">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382010"/>
            </content>
        </type>
        <type derived="true" id="type.4130">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380753"/>
            </content>
        </type>
        <type derived="true" id="type.4163">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380933"/>
            </content>
        </type>
        <type derived="true" id="type.4196">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381114"/>
            </content>
        </type>
        <type derived="true" id="type.4295">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381652"/>
            </content>
        </type>
        <type derived="true" id="type.4262">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381472"/>
            </content>
        </type>
        <type derived="true" id="type.4586">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388041"/>
            </content>
        </type>
        <type derived="true" id="type.1388063">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388041"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388044">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388041"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4599">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388107"/>
            </content>
        </type>
        <type derived="true" id="type.1388129">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388107"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388110">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388107"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4650">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388342"/>
            </content>
        </type>
        <type derived="true" id="type.1388364">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388342"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388345">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388342"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4514">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387569"/>
            </content>
        </type>
        <type derived="true" id="type.1387591">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387569"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387572">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387569"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4216">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381228"/>
            </content>
        </type>
        <type derived="true" id="type.4381">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382124"/>
            </content>
        </type>
        <type derived="true" id="type.4315">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381766"/>
            </content>
        </type>
        <type derived="true" id="type.4348">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381945"/>
            </content>
        </type>
        <type derived="true" id="type.4116">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380674"/>
            </content>
        </type>
        <type derived="true" id="type.4150">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380868"/>
            </content>
        </type>
        <type derived="true" id="type.4183">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381049"/>
            </content>
        </type>
        <type derived="true" id="type.4282">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381587"/>
            </content>
        </type>
        <type derived="true" id="type.4249">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381407"/>
            </content>
        </type>
        <type derived="true" id="type.4552">
            <name>const List&lt;Bucket&lt;String&lt;uchar>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387824"/>
            </content>
        </type>
        <type derived="true" id="type.1387846">
            <name>const List&lt;Bucket&lt;String&lt;uchar>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387824"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387827">
            <name>const List&lt;Bucket&lt;String&lt;uchar>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387824"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3503">
            <name>const List&lt;Bucket&lt;T>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379458"/>
            </content>
        </type>
        <type derived="true" id="type.3474">
            <name>const List&lt;Bucket&lt;T>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3472"/>
            </content>
        </type>
        <type derived="true" id="type.3494">
            <name>const List&lt;Bucket&lt;T>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3472"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3475">
            <name>const List&lt;Bucket&lt;T>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3472"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3565">
            <name>const List&lt;Bucket&lt;ValueType>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3563"/>
            </content>
        </type>
        <type derived="true" id="type.3585">
            <name>const List&lt;Bucket&lt;ValueType>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3563"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3566">
            <name>const List&lt;Bucket&lt;ValueType>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3563"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4204">
            <name>const List&lt;GeneralCategory*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381147"/>
            </content>
        </type>
        <type derived="true" id="type.4607">
            <name>const List&lt;Namespace*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388137"/>
            </content>
        </type>
        <type derived="true" id="type.1388157">
            <name>const List&lt;Namespace*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388137"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388140">
            <name>const List&lt;Namespace*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388137"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4639">
            <name>const List&lt;NonterminalParser*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388276"/>
            </content>
        </type>
        <type derived="true" id="type.1388298">
            <name>const List&lt;NonterminalParser*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388276"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388279">
            <name>const List&lt;NonterminalParser*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388276"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4302">
            <name>const List&lt;NumericType*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381677"/>
            </content>
        </type>
        <type derived="true" id="type.4525">
            <name>const List&lt;RuleLink*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387667"/>
            </content>
        </type>
        <type derived="true" id="type.1387689">
            <name>const List&lt;RuleLink*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387667"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387670">
            <name>const List&lt;RuleLink*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387667"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4522">
            <name>const List&lt;RuleParser*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387642"/>
            </content>
        </type>
        <type derived="true" id="type.1387664">
            <name>const List&lt;RuleParser*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387642"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387645">
            <name>const List&lt;RuleParser*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387642"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4270">
            <name>const List&lt;Script*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381505"/>
            </content>
        </type>
        <type derived="true" id="type.4007">
            <name>const List&lt;String&lt;CharT>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4005"/>
            </content>
        </type>
        <type derived="true" id="type.4046">
            <name>const List&lt;String&lt;CharT>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380407"/>
            </content>
        </type>
        <type derived="true" id="type.4074">
            <name>const List&lt;String&lt;CharT>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380497"/>
            </content>
        </type>
        <type derived="true" id="type.4060">
            <name>const List&lt;String&lt;CharT>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380452"/>
            </content>
        </type>
        <type derived="true" id="type.4032">
            <name>const List&lt;String&lt;CharT>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380362"/>
            </content>
        </type>
        <type derived="true" id="type.4088">
            <name>const List&lt;String&lt;CharT>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380542"/>
            </content>
        </type>
        <type derived="true" id="type.4102">
            <name>const List&lt;String&lt;CharT>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380587"/>
            </content>
        </type>
        <type derived="true" id="type.4023">
            <name>const List&lt;String&lt;CharT>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4005"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4008">
            <name>const List&lt;String&lt;CharT>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4005"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3054">
            <name>const List&lt;String&lt;char>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378596"/>
            </content>
        </type>
        <type derived="true" id="type.1378614">
            <name>const List&lt;String&lt;char>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378596"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3086">
            <name>const List&lt;String&lt;uchar>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378721"/>
            </content>
        </type>
        <type derived="true" id="type.3074">
            <name>const List&lt;String&lt;wchar>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378677"/>
            </content>
        </type>
        <type derived="true" id="type.3061">
            <name>const List&lt;System.Ascii.CharClass></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378617"/>
            </content>
        </type>
        <type derived="true" id="type.4629">
            <name>const List&lt;System.Text.Parsing.AttrOrVar></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388227"/>
            </content>
        </type>
        <type derived="true" id="type.1388247">
            <name>const List&lt;System.Text.Parsing.AttrOrVar>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388227"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388230">
            <name>const List&lt;System.Text.Parsing.AttrOrVar>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388227"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4622">
            <name>const List&lt;System.Text.Parsing.CharRange></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388206"/>
            </content>
        </type>
        <type derived="true" id="type.1388225">
            <name>const List&lt;System.Text.Parsing.CharRange>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388206"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388209">
            <name>const List&lt;System.Text.Parsing.CharRange>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388206"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4573">
            <name>const List&lt;System.Text.Parsing.RuleData></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387976"/>
            </content>
        </type>
        <type derived="true" id="type.1387998">
            <name>const List&lt;System.Text.Parsing.RuleData>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387976"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387979">
            <name>const List&lt;System.Text.Parsing.RuleData>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387976"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4407">
            <name>const List&lt;System.Unicode.Alias></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382244"/>
            </content>
        </type>
        <type derived="true" id="type.3688">
            <name>const List&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379783"/>
            </content>
        </type>
        <type derived="true" id="type.3658">
            <name>const List&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379733"/>
            </content>
        </type>
        <type derived="true" id="type.3961">
            <name>const List&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3959"/>
            </content>
        </type>
        <type derived="true" id="type.3789">
            <name>const List&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3787"/>
            </content>
        </type>
        <type derived="true" id="type.3681">
            <name>const List&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379758"/>
            </content>
        </type>
        <type derived="true" id="type.3678">
            <name>const List&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379733"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3808">
            <name>const List&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3787"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3979">
            <name>const List&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3959"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3659">
            <name>const List&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379733"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3962">
            <name>const List&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3959"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3790">
            <name>const List&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3787"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4478">
            <name>const List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385233"/>
            </content>
        </type>
        <type derived="true" id="type.4486">
            <name>const List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385292"/>
            </content>
        </type>
        <type derived="true" id="type.4468">
            <name>const List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385130"/>
            </content>
        </type>
        <type derived="true" id="type.1385148">
            <name>const List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385130"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4472">
            <name>const List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385185"/>
            </content>
        </type>
        <type derived="true" id="type.4567">
            <name>const List&lt;UniquePtr&lt;System.Text.Parsing.Context>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387955"/>
            </content>
        </type>
        <type derived="true" id="type.1387973">
            <name>const List&lt;UniquePtr&lt;System.Text.Parsing.Context>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387955"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387958">
            <name>const List&lt;UniquePtr&lt;System.Text.Parsing.Context>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387955"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4501">
            <name>const List&lt;UniquePtr&lt;System.Text.Parsing.Object>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387495"/>
            </content>
        </type>
        <type derived="true" id="type.1387513">
            <name>const List&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387495"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387498">
            <name>const List&lt;UniquePtr&lt;System.Text.Parsing.Object>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387495"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4615">
            <name>const List&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388178"/>
            </content>
        </type>
        <type derived="true" id="type.1388196">
            <name>const List&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388178"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388181">
            <name>const List&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388178"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4492">
            <name>const List&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387460"/>
            </content>
        </type>
        <type derived="true" id="type.1387478">
            <name>const List&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387460"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387463">
            <name>const List&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387460"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4415">
            <name>const List&lt;UniquePtr&lt;System.Unicode.CharacterInfo>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382276"/>
            </content>
        </type>
        <type derived="true" id="type.4439">
            <name>const List&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382366"/>
            </content>
        </type>
        <type derived="true" id="type.4423">
            <name>const List&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382305"/>
            </content>
        </type>
        <type derived="true" id="type.4448">
            <name>const List&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382404"/>
            </content>
        </type>
        <type derived="true" id="type.3749">
            <name>const List&lt;byte></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379874"/>
            </content>
        </type>
        <type derived="true" id="type.3510">
            <name>const List&lt;long></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379484"/>
            </content>
        </type>
        <type derived="true" id="type.4430">
            <name>const List&lt;uint></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382325"/>
            </content>
        </type>
        <type derived="true" id="type.3091">
            <name>const List&lt;ulong></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378747"/>
            </content>
        </type>
        <type derived="true" id="type.4751">
            <name>const Literal</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383542"/>
            </content>
        </type>
        <type derived="true" id="type.4752">
            <name>const Literal&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383542"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4692">
            <name>const LockGuard</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378318"/>
            </content>
        </type>
        <type derived="true" id="type.3310">
            <name>const LogicalAnd&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379155"/>
            </content>
        </type>
        <type derived="true" id="type.3311">
            <name>const LogicalAnd&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379155"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3318">
            <name>const LogicalNot&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379167"/>
            </content>
        </type>
        <type derived="true" id="type.3319">
            <name>const LogicalNot&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379167"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3316">
            <name>const LogicalOr&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379163"/>
            </content>
        </type>
        <type derived="true" id="type.3317">
            <name>const LogicalOr&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379163"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4789">
            <name>const LvalueRef</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383600"/>
            </content>
        </type>
        <type derived="true" id="type.4790">
            <name>const LvalueRef&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383600"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3696">
            <name>const Map&lt;Key, Value, KeyCompare></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379811"/>
            </content>
        </type>
        <type derived="true" id="type.3697">
            <name>const Map&lt;Key, Value, KeyCompare>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379811"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387921">
            <name>const Match&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385542"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385545">
            <name>const Match*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385542"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4672">
            <name>const MemoryByteStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378312"/>
            </content>
        </type>
        <type derived="true" id="type.3174">
            <name>const Minus&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378973"/>
            </content>
        </type>
        <type derived="true" id="type.3175">
            <name>const Minus&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378973"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3184">
            <name>const Multiplies&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378987"/>
            </content>
        </type>
        <type derived="true" id="type.3179">
            <name>const Multiplies&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378980"/>
            </content>
        </type>
        <type derived="true" id="type.3180">
            <name>const Multiplies&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378980"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4691">
            <name>const Mutex</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378316"/>
            </content>
        </type>
        <type derived="true" id="type.1388072">
            <name>const Namespace*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385546"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388141">
            <name>const Namespace**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385546"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3169">
            <name>const Negate&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378966"/>
            </content>
        </type>
        <type derived="true" id="type.3170">
            <name>const Negate&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378966"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4742">
            <name>const New</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383528"/>
            </content>
        </type>
        <type derived="true" id="type.4743">
            <name>const New&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383528"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385555">
            <name>const NonterminalParser*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385552"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388280">
            <name>const NonterminalParser*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385552"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388281">
            <name>const NonterminalParser**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385552"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4700">
            <name>const Not</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383448"/>
            </content>
        </type>
        <type derived="true" id="type.4701">
            <name>const Not&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383448"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3234">
            <name>const NotEqualTo&lt;T, U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379061"/>
            </content>
        </type>
        <type derived="true" id="type.3235">
            <name>const NotEqualTo&lt;T, U>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379061"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3225">
            <name>const NotEqualTo&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379050"/>
            </content>
        </type>
        <type derived="true" id="type.3226">
            <name>const NotEqualTo&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379050"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387489">
            <name>const Object&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385556"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387487">
            <name>const Object*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385556"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4801">
            <name>const OptionalParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385486"/>
            </content>
        </type>
        <type derived="true" id="type.4802">
            <name>const OptionalParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385486"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4671">
            <name>const OutputFileStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378157"/>
            </content>
        </type>
        <type derived="true" id="type.4676">
            <name>const OutputStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378395"/>
            </content>
        </type>
        <type derived="true" id="type.4680">
            <name>const OutputStringStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378415"/>
            </content>
        </type>
        <type derived="true" id="type.3368">
            <name>const Pair&lt;K, T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3357"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3384">
            <name>const Pair&lt;K, T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3357"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3709">
            <name>const Pair&lt;Key, Value>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3698"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3715">
            <name>const Pair&lt;Key, Value>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3698"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388013">
            <name>const Pair&lt;String&lt;uchar>, Grammar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388005"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388029">
            <name>const Pair&lt;String&lt;uchar>, Grammar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388005"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388079">
            <name>const Pair&lt;String&lt;uchar>, Namespace*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388070"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388095">
            <name>const Pair&lt;String&lt;uchar>, Namespace*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388070"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388314">
            <name>const Pair&lt;String&lt;uchar>, ParsingObject*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388305"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388330">
            <name>const Pair&lt;String&lt;uchar>, ParsingObject*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388305"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387541">
            <name>const Pair&lt;String&lt;uchar>, String&lt;uchar>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387534"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387557">
            <name>const Pair&lt;String&lt;uchar>, String&lt;uchar>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387534"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3781">
            <name>const Pair&lt;T, U>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3773"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3770">
            <name>const Pair&lt;T, U>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3762"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385563">
            <name>const Parser*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385560"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387441">
            <name>const ParsingAction&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385474"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4818">
            <name>const ParsingData</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385569"/>
            </content>
        </type>
        <type derived="true" id="type.4819">
            <name>const ParsingData&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385569"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385572">
            <name>const ParsingData*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385569"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388176">
            <name>const ParsingDomain&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385573"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385576">
            <name>const ParsingDomain*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385573"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388167">
            <name>const ParsingDomainRepository&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385577"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388166">
            <name>const ParsingDomainRepository*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385577"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387920">
            <name>const ParsingException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385518"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385521">
            <name>const ParsingException*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385518"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4821">
            <name>const ParsingObject</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385579"/>
            </content>
        </type>
        <type derived="true" id="type.1387449">
            <name>const ParsingObject&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385579"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385582">
            <name>const ParsingObject*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385579"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388307">
            <name>const ParsingObject*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385579"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3163">
            <name>const Plus&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378952"/>
            </content>
        </type>
        <type derived="true" id="type.3168">
            <name>const Plus&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378959"/>
            </content>
        </type>
        <type derived="true" id="type.3164">
            <name>const Plus&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378952"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4795">
            <name>const Pointer</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383604"/>
            </content>
        </type>
        <type derived="true" id="type.4796">
            <name>const Pointer&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383604"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4804">
            <name>const PositiveParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385488"/>
            </content>
        </type>
        <type derived="true" id="type.4805">
            <name>const PositiveParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385488"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387932">
            <name>const PostCall&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385549"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4730">
            <name>const PostfixDecrement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383518"/>
            </content>
        </type>
        <type derived="true" id="type.4731">
            <name>const PostfixDecrement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383518"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4727">
            <name>const PostfixIncrement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383516"/>
            </content>
        </type>
        <type derived="true" id="type.4728">
            <name>const PostfixIncrement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383516"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387926">
            <name>const PreCall&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385548"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4712">
            <name>const PrefixDecrement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383456"/>
            </content>
        </type>
        <type derived="true" id="type.4713">
            <name>const PrefixDecrement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383456"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4709">
            <name>const PrefixIncrement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383454"/>
            </content>
        </type>
        <type derived="true" id="type.4710">
            <name>const PrefixIncrement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383454"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3782">
            <name>const Queue&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379957"/>
            </content>
        </type>
        <type derived="true" id="type.3783">
            <name>const Queue&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379957"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4638">
            <name>const RandomAccessIter&lt;ActionParser*, ActionParser*&amp;, ActionParser**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388266"/>
            </content>
        </type>
        <type derived="true" id="type.1388270">
            <name>const RandomAccessIter&lt;ActionParser*, ActionParser*&amp;, ActionParser**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388266"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388269">
            <name>const RandomAccessIter&lt;ActionParser*, ActionParser*&amp;, ActionParser**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388266"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4635">
            <name>const RandomAccessIter&lt;ActionParser*, const ActionParser*&amp;, const ActionParser**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388257"/>
            </content>
        </type>
        <type derived="true" id="type.4636">
            <name>const RandomAccessIter&lt;ActionParser*, const ActionParser*&amp;, const ActionParser**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388257"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388260">
            <name>const RandomAccessIter&lt;ActionParser*, const ActionParser*&amp;, const ActionParser**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388257"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4241">
            <name>const RandomAccessIter&lt;Age*, Age*&amp;, Age**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381339"/>
            </content>
        </type>
        <type derived="true" id="type.4238">
            <name>const RandomAccessIter&lt;Age*, const Age*&amp;, const Age**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381331"/>
            </content>
        </type>
        <type derived="true" id="type.4239">
            <name>const RandomAccessIter&lt;Age*, const Age*&amp;, const Age**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381331"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4406">
            <name>const RandomAccessIter&lt;AliasType*, AliasType*&amp;, AliasType**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382235"/>
            </content>
        </type>
        <type derived="true" id="type.4403">
            <name>const RandomAccessIter&lt;AliasType*, const AliasType*&amp;, const AliasType**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382227"/>
            </content>
        </type>
        <type derived="true" id="type.4404">
            <name>const RandomAccessIter&lt;AliasType*, const AliasType*&amp;, const AliasType**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382227"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4340">
            <name>const RandomAccessIter&lt;BidiClass*, BidiClass*&amp;, BidiClass**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381877"/>
            </content>
        </type>
        <type derived="true" id="type.4337">
            <name>const RandomAccessIter&lt;BidiClass*, const BidiClass*&amp;, const BidiClass**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381869"/>
            </content>
        </type>
        <type derived="true" id="type.4338">
            <name>const RandomAccessIter&lt;BidiClass*, const BidiClass*&amp;, const BidiClass**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381869"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4373">
            <name>const RandomAccessIter&lt;BidiPairedBracketType*, BidiPairedBracketType*&amp;, BidiPairedBracketType**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382056"/>
            </content>
        </type>
        <type derived="true" id="type.4370">
            <name>const RandomAccessIter&lt;BidiPairedBracketType*, const BidiPairedBracketType*&amp;, const BidiPairedBracketType**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382048"/>
            </content>
        </type>
        <type derived="true" id="type.4371">
            <name>const RandomAccessIter&lt;BidiPairedBracketType*, const BidiPairedBracketType*&amp;, const BidiPairedBracketType**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382048"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4141">
            <name>const RandomAccessIter&lt;BinaryProperty*, BinaryProperty*&amp;, BinaryProperty**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380791"/>
            </content>
        </type>
        <type derived="true" id="type.4138">
            <name>const RandomAccessIter&lt;BinaryProperty*, const BinaryProperty*&amp;, const BinaryProperty**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380783"/>
            </content>
        </type>
        <type derived="true" id="type.4139">
            <name>const RandomAccessIter&lt;BinaryProperty*, const BinaryProperty*&amp;, const BinaryProperty**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380783"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4175">
            <name>const RandomAccessIter&lt;Block*, Block*&amp;, Block**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380979"/>
            </content>
        </type>
        <type derived="true" id="type.4172">
            <name>const RandomAccessIter&lt;Block*, const Block*&amp;, const Block**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380971"/>
            </content>
        </type>
        <type derived="true" id="type.4173">
            <name>const RandomAccessIter&lt;Block*, const Block*&amp;, const Block**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380971"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4541">
            <name>const RandomAccessIter&lt;Bucket&lt;Grammar*>*, Bucket&lt;Grammar*>*&amp;, Bucket&lt;Grammar*>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387759"/>
            </content>
        </type>
        <type derived="true" id="type.4542">
            <name>const RandomAccessIter&lt;Bucket&lt;Grammar*>*, Bucket&lt;Grammar*>*&amp;, Bucket&lt;Grammar*>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387759"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387762">
            <name>const RandomAccessIter&lt;Bucket&lt;Grammar*>*, Bucket&lt;Grammar*>*&amp;, Bucket&lt;Grammar*>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387759"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4538">
            <name>const RandomAccessIter&lt;Bucket&lt;Grammar*>*, const Bucket&lt;Grammar*>*&amp;, const Bucket&lt;Grammar*>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387750"/>
            </content>
        </type>
        <type derived="true" id="type.4539">
            <name>const RandomAccessIter&lt;Bucket&lt;Grammar*>*, const Bucket&lt;Grammar*>*&amp;, const Bucket&lt;Grammar*>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387750"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387753">
            <name>const RandomAccessIter&lt;Bucket&lt;Grammar*>*, const Bucket&lt;Grammar*>*&amp;, const Bucket&lt;Grammar*>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387750"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3413">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3411"/>
            </content>
        </type>
        <type derived="true" id="type.3432">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379345"/>
            </content>
        </type>
        <type derived="true" id="type.3415">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3411"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3433">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379345"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3414">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3411"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3429">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379336"/>
            </content>
        </type>
        <type derived="true" id="type.3404">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3402"/>
            </content>
        </type>
        <type derived="true" id="type.3430">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379336"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3406">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3402"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3405">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3402"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4233">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Age*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381308"/>
            </content>
        </type>
        <type derived="true" id="type.4234">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Age*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381308"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4230">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381299"/>
            </content>
        </type>
        <type derived="true" id="type.4231">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381299"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4398">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382204"/>
            </content>
        </type>
        <type derived="true" id="type.4399">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382204"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4395">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382195"/>
            </content>
        </type>
        <type derived="true" id="type.4396">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382195"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4332">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381846"/>
            </content>
        </type>
        <type derived="true" id="type.4333">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381846"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4329">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381837"/>
            </content>
        </type>
        <type derived="true" id="type.4330">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381837"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4365">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382025"/>
            </content>
        </type>
        <type derived="true" id="type.4366">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382025"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4362">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382016"/>
            </content>
        </type>
        <type derived="true" id="type.4363">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382016"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4134">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380768"/>
            </content>
        </type>
        <type derived="true" id="type.4135">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380768"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4131">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380759"/>
            </content>
        </type>
        <type derived="true" id="type.4132">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380759"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4167">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Block*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380948"/>
            </content>
        </type>
        <type derived="true" id="type.4168">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Block*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380948"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4164">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380939"/>
            </content>
        </type>
        <type derived="true" id="type.4165">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380939"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4200">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381129"/>
            </content>
        </type>
        <type derived="true" id="type.4201">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381129"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4197">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381120"/>
            </content>
        </type>
        <type derived="true" id="type.4198">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381120"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4299">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381667"/>
            </content>
        </type>
        <type derived="true" id="type.4300">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381667"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4296">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381658"/>
            </content>
        </type>
        <type derived="true" id="type.4297">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381658"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4266">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Script*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381487"/>
            </content>
        </type>
        <type derived="true" id="type.4267">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Script*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381487"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4263">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381478"/>
            </content>
        </type>
        <type derived="true" id="type.4264">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381478"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4590">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388056"/>
            </content>
        </type>
        <type derived="true" id="type.4591">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388056"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388059">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388056"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4587">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388047"/>
            </content>
        </type>
        <type derived="true" id="type.4588">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388047"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388050">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388047"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4603">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388122"/>
            </content>
        </type>
        <type derived="true" id="type.4604">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388122"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388125">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388122"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4600">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388113"/>
            </content>
        </type>
        <type derived="true" id="type.4601">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388113"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388116">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388113"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4654">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388357"/>
            </content>
        </type>
        <type derived="true" id="type.4655">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388357"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388360">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388357"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4651">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388348"/>
            </content>
        </type>
        <type derived="true" id="type.4652">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388348"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388351">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388348"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4518">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*, Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387584"/>
            </content>
        </type>
        <type derived="true" id="type.4519">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*, Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387584"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387587">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*, Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387584"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4515">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387575"/>
            </content>
        </type>
        <type derived="true" id="type.4516">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387575"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387578">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387575"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4220">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381243"/>
            </content>
        </type>
        <type derived="true" id="type.4221">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381243"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4217">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381234"/>
            </content>
        </type>
        <type derived="true" id="type.4218">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381234"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4385">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382139"/>
            </content>
        </type>
        <type derived="true" id="type.4386">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382139"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4382">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382130"/>
            </content>
        </type>
        <type derived="true" id="type.4383">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382130"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4319">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381781"/>
            </content>
        </type>
        <type derived="true" id="type.4320">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381781"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4316">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381772"/>
            </content>
        </type>
        <type derived="true" id="type.4317">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381772"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4352">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381960"/>
            </content>
        </type>
        <type derived="true" id="type.4353">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381960"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4349">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381951"/>
            </content>
        </type>
        <type derived="true" id="type.4350">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381951"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4120">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380689"/>
            </content>
        </type>
        <type derived="true" id="type.4121">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380689"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4117">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380680"/>
            </content>
        </type>
        <type derived="true" id="type.4118">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380680"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4154">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380883"/>
            </content>
        </type>
        <type derived="true" id="type.4155">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380883"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4151">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380874"/>
            </content>
        </type>
        <type derived="true" id="type.4152">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380874"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4187">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381064"/>
            </content>
        </type>
        <type derived="true" id="type.4188">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381064"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4184">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381055"/>
            </content>
        </type>
        <type derived="true" id="type.4185">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381055"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4286">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381602"/>
            </content>
        </type>
        <type derived="true" id="type.4287">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381602"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4283">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381593"/>
            </content>
        </type>
        <type derived="true" id="type.4284">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381593"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4253">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381422"/>
            </content>
        </type>
        <type derived="true" id="type.4254">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381422"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4250">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381413"/>
            </content>
        </type>
        <type derived="true" id="type.4251">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381413"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4556">
            <name>const RandomAccessIter&lt;Bucket&lt;String&lt;uchar>>*, Bucket&lt;String&lt;uchar>>*&amp;, Bucket&lt;String&lt;uchar>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387839"/>
            </content>
        </type>
        <type derived="true" id="type.4557">
            <name>const RandomAccessIter&lt;Bucket&lt;String&lt;uchar>>*, Bucket&lt;String&lt;uchar>>*&amp;, Bucket&lt;String&lt;uchar>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387839"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387842">
            <name>const RandomAccessIter&lt;Bucket&lt;String&lt;uchar>>*, Bucket&lt;String&lt;uchar>>*&amp;, Bucket&lt;String&lt;uchar>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387839"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4553">
            <name>const RandomAccessIter&lt;Bucket&lt;String&lt;uchar>>*, const Bucket&lt;String&lt;uchar>>*&amp;, const Bucket&lt;String&lt;uchar>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387830"/>
            </content>
        </type>
        <type derived="true" id="type.4554">
            <name>const RandomAccessIter&lt;Bucket&lt;String&lt;uchar>>*, const Bucket&lt;String&lt;uchar>>*&amp;, const Bucket&lt;String&lt;uchar>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387830"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387833">
            <name>const RandomAccessIter&lt;Bucket&lt;String&lt;uchar>>*, const Bucket&lt;String&lt;uchar>>*&amp;, const Bucket&lt;String&lt;uchar>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387830"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3507">
            <name>const RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379473"/>
            </content>
        </type>
        <type derived="true" id="type.3489">
            <name>const RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3487"/>
            </content>
        </type>
        <type derived="true" id="type.3491">
            <name>const RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3487"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3508">
            <name>const RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379473"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3490">
            <name>const RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3487"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3480">
            <name>const RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3478"/>
            </content>
        </type>
        <type derived="true" id="type.3504">
            <name>const RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379464"/>
            </content>
        </type>
        <type derived="true" id="type.3482">
            <name>const RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3478"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3505">
            <name>const RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379464"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3481">
            <name>const RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3478"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3580">
            <name>const RandomAccessIter&lt;Bucket&lt;ValueType>*, Bucket&lt;ValueType>*&amp;, Bucket&lt;ValueType>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3578"/>
            </content>
        </type>
        <type derived="true" id="type.3582">
            <name>const RandomAccessIter&lt;Bucket&lt;ValueType>*, Bucket&lt;ValueType>*&amp;, Bucket&lt;ValueType>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3578"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3581">
            <name>const RandomAccessIter&lt;Bucket&lt;ValueType>*, Bucket&lt;ValueType>*&amp;, Bucket&lt;ValueType>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3578"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3571">
            <name>const RandomAccessIter&lt;Bucket&lt;ValueType>*, const Bucket&lt;ValueType>*&amp;, const Bucket&lt;ValueType>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3569"/>
            </content>
        </type>
        <type derived="true" id="type.3573">
            <name>const RandomAccessIter&lt;Bucket&lt;ValueType>*, const Bucket&lt;ValueType>*&amp;, const Bucket&lt;ValueType>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3569"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3572">
            <name>const RandomAccessIter&lt;Bucket&lt;ValueType>*, const Bucket&lt;ValueType>*&amp;, const Bucket&lt;ValueType>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3569"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4057">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380442"/>
            </content>
        </type>
        <type derived="true" id="type.4099">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380577"/>
            </content>
        </type>
        <type derived="true" id="type.4029">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380352"/>
            </content>
        </type>
        <type derived="true" id="type.4043">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380397"/>
            </content>
        </type>
        <type derived="true" id="type.4085">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380532"/>
            </content>
        </type>
        <type derived="true" id="type.4071">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380487"/>
            </content>
        </type>
        <type derived="true" id="type.3997">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3995"/>
            </content>
        </type>
        <type derived="true" id="type.3999">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3995"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4030">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380352"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4044">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380397"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4100">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380577"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4086">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380532"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4072">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380487"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4058">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380442"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3998">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3995"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4068">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380478"/>
            </content>
        </type>
        <type derived="true" id="type.4054">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380433"/>
            </content>
        </type>
        <type derived="true" id="type.4040">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380388"/>
            </content>
        </type>
        <type derived="true" id="type.4026">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380343"/>
            </content>
        </type>
        <type derived="true" id="type.3988">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3986"/>
            </content>
        </type>
        <type derived="true" id="type.4082">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380523"/>
            </content>
        </type>
        <type derived="true" id="type.4096">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380568"/>
            </content>
        </type>
        <type derived="true" id="type.4097">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380568"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4041">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380388"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4069">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380478"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4055">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380433"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4027">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380343"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4083">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380523"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3990">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3986"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3989">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3986"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4208">
            <name>const RandomAccessIter&lt;GeneralCategory*, GeneralCategory*&amp;, GeneralCategory**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381160"/>
            </content>
        </type>
        <type derived="true" id="type.4205">
            <name>const RandomAccessIter&lt;GeneralCategory*, const GeneralCategory*&amp;, const GeneralCategory**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381152"/>
            </content>
        </type>
        <type derived="true" id="type.4206">
            <name>const RandomAccessIter&lt;GeneralCategory*, const GeneralCategory*&amp;, const GeneralCategory**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381152"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4611">
            <name>const RandomAccessIter&lt;Namespace*, Namespace*&amp;, Namespace**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388150"/>
            </content>
        </type>
        <type derived="true" id="type.4612">
            <name>const RandomAccessIter&lt;Namespace*, Namespace*&amp;, Namespace**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388150"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388153">
            <name>const RandomAccessIter&lt;Namespace*, Namespace*&amp;, Namespace**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388150"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4608">
            <name>const RandomAccessIter&lt;Namespace*, const Namespace*&amp;, const Namespace**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388142"/>
            </content>
        </type>
        <type derived="true" id="type.4609">
            <name>const RandomAccessIter&lt;Namespace*, const Namespace*&amp;, const Namespace**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388142"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388145">
            <name>const RandomAccessIter&lt;Namespace*, const Namespace*&amp;, const Namespace**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388142"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4643">
            <name>const RandomAccessIter&lt;NonterminalParser*, NonterminalParser*&amp;, NonterminalParser**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388291"/>
            </content>
        </type>
        <type derived="true" id="type.1388295">
            <name>const RandomAccessIter&lt;NonterminalParser*, NonterminalParser*&amp;, NonterminalParser**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388291"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388294">
            <name>const RandomAccessIter&lt;NonterminalParser*, NonterminalParser*&amp;, NonterminalParser**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388291"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4640">
            <name>const RandomAccessIter&lt;NonterminalParser*, const NonterminalParser*&amp;, const NonterminalParser**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388282"/>
            </content>
        </type>
        <type derived="true" id="type.4641">
            <name>const RandomAccessIter&lt;NonterminalParser*, const NonterminalParser*&amp;, const NonterminalParser**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388282"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388285">
            <name>const RandomAccessIter&lt;NonterminalParser*, const NonterminalParser*&amp;, const NonterminalParser**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388282"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4306">
            <name>const RandomAccessIter&lt;NumericType*, NumericType*&amp;, NumericType**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381690"/>
            </content>
        </type>
        <type derived="true" id="type.4303">
            <name>const RandomAccessIter&lt;NumericType*, const NumericType*&amp;, const NumericType**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381682"/>
            </content>
        </type>
        <type derived="true" id="type.4304">
            <name>const RandomAccessIter&lt;NumericType*, const NumericType*&amp;, const NumericType**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381682"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4529">
            <name>const RandomAccessIter&lt;RuleLink*, RuleLink*&amp;, RuleLink**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387682"/>
            </content>
        </type>
        <type derived="true" id="type.1387686">
            <name>const RandomAccessIter&lt;RuleLink*, RuleLink*&amp;, RuleLink**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387682"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387685">
            <name>const RandomAccessIter&lt;RuleLink*, RuleLink*&amp;, RuleLink**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387682"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4526">
            <name>const RandomAccessIter&lt;RuleLink*, const RuleLink*&amp;, const RuleLink**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387673"/>
            </content>
        </type>
        <type derived="true" id="type.4527">
            <name>const RandomAccessIter&lt;RuleLink*, const RuleLink*&amp;, const RuleLink**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387673"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387676">
            <name>const RandomAccessIter&lt;RuleLink*, const RuleLink*&amp;, const RuleLink**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387673"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4524">
            <name>const RandomAccessIter&lt;RuleParser*, RuleParser*&amp;, RuleParser**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387657"/>
            </content>
        </type>
        <type derived="true" id="type.1387661">
            <name>const RandomAccessIter&lt;RuleParser*, RuleParser*&amp;, RuleParser**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387657"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387660">
            <name>const RandomAccessIter&lt;RuleParser*, RuleParser*&amp;, RuleParser**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387657"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4523">
            <name>const RandomAccessIter&lt;RuleParser*, const RuleParser*&amp;, const RuleParser**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387648"/>
            </content>
        </type>
        <type derived="true" id="type.1387652">
            <name>const RandomAccessIter&lt;RuleParser*, const RuleParser*&amp;, const RuleParser**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387648"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387651">
            <name>const RandomAccessIter&lt;RuleParser*, const RuleParser*&amp;, const RuleParser**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387648"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4274">
            <name>const RandomAccessIter&lt;Script*, Script*&amp;, Script**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381518"/>
            </content>
        </type>
        <type derived="true" id="type.4271">
            <name>const RandomAccessIter&lt;Script*, const Script*&amp;, const Script**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381510"/>
            </content>
        </type>
        <type derived="true" id="type.4272">
            <name>const RandomAccessIter&lt;Script*, const Script*&amp;, const Script**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381510"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4050">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380418"/>
            </content>
        </type>
        <type derived="true" id="type.4106">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380598"/>
            </content>
        </type>
        <type derived="true" id="type.4078">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380508"/>
            </content>
        </type>
        <type derived="true" id="type.4064">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380463"/>
            </content>
        </type>
        <type derived="true" id="type.4092">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380553"/>
            </content>
        </type>
        <type derived="true" id="type.4018">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4016"/>
            </content>
        </type>
        <type derived="true" id="type.4036">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380373"/>
            </content>
        </type>
        <type derived="true" id="type.4020">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4016"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4093">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380553"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4107">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380598"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4065">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380463"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4051">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380418"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4079">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380508"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4037">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380373"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4019">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4016"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4047">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380411"/>
            </content>
        </type>
        <type derived="true" id="type.4075">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380501"/>
            </content>
        </type>
        <type derived="true" id="type.4103">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380591"/>
            </content>
        </type>
        <type derived="true" id="type.4089">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380546"/>
            </content>
        </type>
        <type derived="true" id="type.4061">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380456"/>
            </content>
        </type>
        <type derived="true" id="type.4011">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4009"/>
            </content>
        </type>
        <type derived="true" id="type.4033">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380366"/>
            </content>
        </type>
        <type derived="true" id="type.4104">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380591"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4062">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380456"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4034">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380366"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4076">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380501"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4013">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4009"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4048">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380411"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4090">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380546"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4012">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4009"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3058">
            <name>const RandomAccessIter&lt;String&lt;char>, String&lt;char>&amp;, String&lt;char>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378607"/>
            </content>
        </type>
        <type derived="true" id="type.3059">
            <name>const RandomAccessIter&lt;String&lt;char>, String&lt;char>&amp;, String&lt;char>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378607"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3055">
            <name>const RandomAccessIter&lt;String&lt;char>, const String&lt;char>&amp;, const String&lt;char>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378600"/>
            </content>
        </type>
        <type derived="true" id="type.3056">
            <name>const RandomAccessIter&lt;String&lt;char>, const String&lt;char>&amp;, const String&lt;char>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378600"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3088">
            <name>const RandomAccessIter&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378732"/>
            </content>
        </type>
        <type derived="true" id="type.3089">
            <name>const RandomAccessIter&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378732"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3087">
            <name>const RandomAccessIter&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378725"/>
            </content>
        </type>
        <type derived="true" id="type.1385868">
            <name>const RandomAccessIter&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378725"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3078">
            <name>const RandomAccessIter&lt;String&lt;wchar>, String&lt;wchar>&amp;, String&lt;wchar>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378688"/>
            </content>
        </type>
        <type derived="true" id="type.3079">
            <name>const RandomAccessIter&lt;String&lt;wchar>, String&lt;wchar>&amp;, String&lt;wchar>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378688"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3075">
            <name>const RandomAccessIter&lt;String&lt;wchar>, const String&lt;wchar>&amp;, const String&lt;wchar>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378681"/>
            </content>
        </type>
        <type derived="true" id="type.3076">
            <name>const RandomAccessIter&lt;String&lt;wchar>, const String&lt;wchar>&amp;, const String&lt;wchar>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378681"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3065">
            <name>const RandomAccessIter&lt;System.Ascii.CharClass, CharClass&amp;, CharClass*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378631"/>
            </content>
        </type>
        <type derived="true" id="type.3066">
            <name>const RandomAccessIter&lt;System.Ascii.CharClass, CharClass&amp;, CharClass*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378631"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3062">
            <name>const RandomAccessIter&lt;System.Ascii.CharClass, const CharClass&amp;, const CharClass*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378623"/>
            </content>
        </type>
        <type derived="true" id="type.3063">
            <name>const RandomAccessIter&lt;System.Ascii.CharClass, const CharClass&amp;, const CharClass*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378623"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4633">
            <name>const RandomAccessIter&lt;System.Text.Parsing.AttrOrVar, AttrOrVar&amp;, AttrOrVar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388240"/>
            </content>
        </type>
        <type derived="true" id="type.1388244">
            <name>const RandomAccessIter&lt;System.Text.Parsing.AttrOrVar, AttrOrVar&amp;, AttrOrVar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388240"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388243">
            <name>const RandomAccessIter&lt;System.Text.Parsing.AttrOrVar, AttrOrVar&amp;, AttrOrVar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388240"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4630">
            <name>const RandomAccessIter&lt;System.Text.Parsing.AttrOrVar, const AttrOrVar&amp;, const AttrOrVar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388232"/>
            </content>
        </type>
        <type derived="true" id="type.4631">
            <name>const RandomAccessIter&lt;System.Text.Parsing.AttrOrVar, const AttrOrVar&amp;, const AttrOrVar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388232"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388235">
            <name>const RandomAccessIter&lt;System.Text.Parsing.AttrOrVar, const AttrOrVar&amp;, const AttrOrVar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388232"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4626">
            <name>const RandomAccessIter&lt;System.Text.Parsing.CharRange, CharRange&amp;, CharRange*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388218"/>
            </content>
        </type>
        <type derived="true" id="type.4627">
            <name>const RandomAccessIter&lt;System.Text.Parsing.CharRange, CharRange&amp;, CharRange*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388218"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388221">
            <name>const RandomAccessIter&lt;System.Text.Parsing.CharRange, CharRange&amp;, CharRange*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388218"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4623">
            <name>const RandomAccessIter&lt;System.Text.Parsing.CharRange, const CharRange&amp;, const CharRange*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388210"/>
            </content>
        </type>
        <type derived="true" id="type.4624">
            <name>const RandomAccessIter&lt;System.Text.Parsing.CharRange, const CharRange&amp;, const CharRange*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388210"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388213">
            <name>const RandomAccessIter&lt;System.Text.Parsing.CharRange, const CharRange&amp;, const CharRange*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388210"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4577">
            <name>const RandomAccessIter&lt;System.Text.Parsing.RuleData, RuleData&amp;, RuleData*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387991"/>
            </content>
        </type>
        <type derived="true" id="type.4578">
            <name>const RandomAccessIter&lt;System.Text.Parsing.RuleData, RuleData&amp;, RuleData*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387991"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387994">
            <name>const RandomAccessIter&lt;System.Text.Parsing.RuleData, RuleData&amp;, RuleData*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387991"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4574">
            <name>const RandomAccessIter&lt;System.Text.Parsing.RuleData, const RuleData&amp;, const RuleData*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387982"/>
            </content>
        </type>
        <type derived="true" id="type.4575">
            <name>const RandomAccessIter&lt;System.Text.Parsing.RuleData, const RuleData&amp;, const RuleData*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387982"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387985">
            <name>const RandomAccessIter&lt;System.Text.Parsing.RuleData, const RuleData&amp;, const RuleData*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387982"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4411">
            <name>const RandomAccessIter&lt;System.Unicode.Alias, Alias&amp;, Alias*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382257"/>
            </content>
        </type>
        <type derived="true" id="type.4412">
            <name>const RandomAccessIter&lt;System.Unicode.Alias, Alias&amp;, Alias*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382257"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4408">
            <name>const RandomAccessIter&lt;System.Unicode.Alias, const Alias&amp;, const Alias*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382249"/>
            </content>
        </type>
        <type derived="true" id="type.4409">
            <name>const RandomAccessIter&lt;System.Unicode.Alias, const Alias&amp;, const Alias*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382249"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3822">
            <name>const RandomAccessIter&lt;T, R, P></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380014"/>
            </content>
        </type>
        <type derived="true" id="type.3820">
            <name>const RandomAccessIter&lt;T, R, P></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380007"/>
            </content>
        </type>
        <type derived="true" id="type.3816">
            <name>const RandomAccessIter&lt;T, R, P></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379993"/>
            </content>
        </type>
        <type derived="true" id="type.3818">
            <name>const RandomAccessIter&lt;T, R, P></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380000"/>
            </content>
        </type>
        <type derived="true" id="type.3824">
            <name>const RandomAccessIter&lt;T, R, P></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380021"/>
            </content>
        </type>
        <type derived="true" id="type.3826">
            <name>const RandomAccessIter&lt;T, R, P></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380028"/>
            </content>
        </type>
        <type derived="true" id="type.3811">
            <name>const RandomAccessIter&lt;T, R, P></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379986"/>
            </content>
        </type>
        <type derived="true" id="type.3813">
            <name>const RandomAccessIter&lt;T, R, P>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379986"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3812">
            <name>const RandomAccessIter&lt;T, R, P>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379986"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3673">
            <name>const RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3671"/>
            </content>
        </type>
        <type derived="true" id="type.3692">
            <name>const RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379798"/>
            </content>
        </type>
        <type derived="true" id="type.3974">
            <name>const RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3972"/>
            </content>
        </type>
        <type derived="true" id="type.3685">
            <name>const RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379773"/>
            </content>
        </type>
        <type derived="true" id="type.3803">
            <name>const RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3801"/>
            </content>
        </type>
        <type derived="true" id="type.3976">
            <name>const RandomAccessIter&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3972"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3686">
            <name>const RandomAccessIter&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379773"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3693">
            <name>const RandomAccessIter&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379798"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3675">
            <name>const RandomAccessIter&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3671"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3805">
            <name>const RandomAccessIter&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3801"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3975">
            <name>const RandomAccessIter&lt;T, T&amp;, T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3972"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3674">
            <name>const RandomAccessIter&lt;T, T&amp;, T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3671"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3804">
            <name>const RandomAccessIter&lt;T, T&amp;, T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3801"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3966">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3964"/>
            </content>
        </type>
        <type derived="true" id="type.3682">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379764"/>
            </content>
        </type>
        <type derived="true" id="type.3689">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379789"/>
            </content>
        </type>
        <type derived="true" id="type.3794">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3792"/>
            </content>
        </type>
        <type derived="true" id="type.3664">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3662"/>
            </content>
        </type>
        <type derived="true" id="type.3683">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379764"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3796">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3792"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3968">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3964"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3690">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379789"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3666">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3662"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3795">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3792"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3967">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3964"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3665">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3662"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4482">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385244"/>
            </content>
        </type>
        <type derived="true" id="type.4479">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385237"/>
            </content>
        </type>
        <type derived="true" id="type.4480">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385237"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4490">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385303"/>
            </content>
        </type>
        <type derived="true" id="type.4487">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385296"/>
            </content>
        </type>
        <type derived="true" id="type.4488">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385296"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4470">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385141"/>
            </content>
        </type>
        <type derived="true" id="type.4469">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385134"/>
            </content>
        </type>
        <type derived="true" id="type.1387272">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385134"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4476">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385196"/>
            </content>
        </type>
        <type derived="true" id="type.4473">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385189"/>
            </content>
        </type>
        <type derived="true" id="type.4474">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385189"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4571">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Context>, UniquePtr&lt;System.Text.Parsing.Context>&amp;, UniquePtr&lt;System.Text.Parsing.Context>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387966"/>
            </content>
        </type>
        <type derived="true" id="type.4572">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Context>, UniquePtr&lt;System.Text.Parsing.Context>&amp;, UniquePtr&lt;System.Text.Parsing.Context>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387966"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387969">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Context>, UniquePtr&lt;System.Text.Parsing.Context>&amp;, UniquePtr&lt;System.Text.Parsing.Context>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387966"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4568">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Context>, const UniquePtr&lt;System.Text.Parsing.Context>&amp;, const UniquePtr&lt;System.Text.Parsing.Context>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387959"/>
            </content>
        </type>
        <type derived="true" id="type.4569">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Context>, const UniquePtr&lt;System.Text.Parsing.Context>&amp;, const UniquePtr&lt;System.Text.Parsing.Context>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387959"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387962">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Context>, const UniquePtr&lt;System.Text.Parsing.Context>&amp;, const UniquePtr&lt;System.Text.Parsing.Context>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387959"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4505">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Object>, UniquePtr&lt;System.Text.Parsing.Object>&amp;, UniquePtr&lt;System.Text.Parsing.Object>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387506"/>
            </content>
        </type>
        <type derived="true" id="type.4506">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Object>, UniquePtr&lt;System.Text.Parsing.Object>&amp;, UniquePtr&lt;System.Text.Parsing.Object>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387506"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387509">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Object>, UniquePtr&lt;System.Text.Parsing.Object>&amp;, UniquePtr&lt;System.Text.Parsing.Object>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387506"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4502">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Object>, const UniquePtr&lt;System.Text.Parsing.Object>&amp;, const UniquePtr&lt;System.Text.Parsing.Object>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387499"/>
            </content>
        </type>
        <type derived="true" id="type.4503">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Object>, const UniquePtr&lt;System.Text.Parsing.Object>&amp;, const UniquePtr&lt;System.Text.Parsing.Object>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387499"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387502">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Object>, const UniquePtr&lt;System.Text.Parsing.Object>&amp;, const UniquePtr&lt;System.Text.Parsing.Object>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387499"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4619">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>, UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;, UniquePtr&lt;System.Text.Parsing.ParsingDomain>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388189"/>
            </content>
        </type>
        <type derived="true" id="type.4620">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>, UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;, UniquePtr&lt;System.Text.Parsing.ParsingDomain>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388189"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388192">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>, UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;, UniquePtr&lt;System.Text.Parsing.ParsingDomain>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388189"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>, const UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;, const UniquePtr&lt;System.Text.Parsing.ParsingDomain>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388182"/>
            </content>
        </type>
        <type derived="true" id="type.4617">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>, const UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;, const UniquePtr&lt;System.Text.Parsing.ParsingDomain>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388182"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388185">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>, const UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;, const UniquePtr&lt;System.Text.Parsing.ParsingDomain>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388182"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4496">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>, UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;, UniquePtr&lt;System.Text.Parsing.ParsingObject>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387471"/>
            </content>
        </type>
        <type derived="true" id="type.4497">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>, UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;, UniquePtr&lt;System.Text.Parsing.ParsingObject>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387471"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387474">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>, UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;, UniquePtr&lt;System.Text.Parsing.ParsingObject>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387471"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4493">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>, const UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;, const UniquePtr&lt;System.Text.Parsing.ParsingObject>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387464"/>
            </content>
        </type>
        <type derived="true" id="type.4494">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>, const UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;, const UniquePtr&lt;System.Text.Parsing.ParsingObject>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387464"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387467">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>, const UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;, const UniquePtr&lt;System.Text.Parsing.ParsingObject>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387464"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4419">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, UniquePtr&lt;System.Unicode.CharacterInfo>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382287"/>
            </content>
        </type>
        <type derived="true" id="type.4420">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, UniquePtr&lt;System.Unicode.CharacterInfo>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382287"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4416">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, const UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfo>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382280"/>
            </content>
        </type>
        <type derived="true" id="type.4417">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, const UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfo>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382280"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4443">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.CharacterInfoPage>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382377"/>
            </content>
        </type>
        <type derived="true" id="type.4444">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.CharacterInfoPage>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382377"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4440">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, const UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfoPage>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382370"/>
            </content>
        </type>
        <type derived="true" id="type.4441">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, const UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfoPage>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382370"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4427">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382316"/>
            </content>
        </type>
        <type derived="true" id="type.4428">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382316"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4424">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382309"/>
            </content>
        </type>
        <type derived="true" id="type.4425">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382309"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4452">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382415"/>
            </content>
        </type>
        <type derived="true" id="type.4453">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382415"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4449">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382408"/>
            </content>
        </type>
        <type derived="true" id="type.4450">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382408"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3752">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379886"/>
            </content>
        </type>
        <type derived="true" id="type.3753">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379886"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3750">
            <name>const RandomAccessIter&lt;byte, const byte&amp;, const byte*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379879"/>
            </content>
        </type>
        <type derived="true" id="type.3751">
            <name>const RandomAccessIter&lt;byte, const byte&amp;, const byte*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379879"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3053">
            <name>const RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378586"/>
            </content>
        </type>
        <type derived="true" id="type.3052">
            <name>const RandomAccessIter&lt;char, const char&amp;, const char*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378578"/>
            </content>
        </type>
        <type derived="true" id="type.3511">
            <name>const RandomAccessIter&lt;long, const long&amp;, const long*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379490"/>
            </content>
        </type>
        <type derived="true" id="type.3512">
            <name>const RandomAccessIter&lt;long, long&amp;, long*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379497"/>
            </content>
        </type>
        <type derived="true" id="type.3082">
            <name>const RandomAccessIter&lt;uchar, const uchar&amp;, const uchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378703"/>
            </content>
        </type>
        <type derived="true" id="type.3083">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378711"/>
            </content>
        </type>
        <type derived="true" id="type.3084">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378711"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4431">
            <name>const RandomAccessIter&lt;uint, const uint&amp;, const uint*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382331"/>
            </content>
        </type>
        <type derived="true" id="type.4432">
            <name>const RandomAccessIter&lt;uint, const uint&amp;, const uint*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382331"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4434">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382338"/>
            </content>
        </type>
        <type derived="true" id="type.4435">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382338"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3092">
            <name>const RandomAccessIter&lt;ulong, const ulong&amp;, const ulong*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378753"/>
            </content>
        </type>
        <type derived="true" id="type.3093">
            <name>const RandomAccessIter&lt;ulong, const ulong&amp;, const ulong*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378753"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3095">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378760"/>
            </content>
        </type>
        <type derived="true" id="type.3096">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378760"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3070">
            <name>const RandomAccessIter&lt;wchar, const wchar&amp;, const wchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378659"/>
            </content>
        </type>
        <type derived="true" id="type.3071">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378667"/>
            </content>
        </type>
        <type derived="true" id="type.3072">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378667"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385698">
            <name>const RangeParser*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385695"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3713">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3711"/>
            </content>
        </type>
        <type derived="true" id="type.3735">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3711"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3714">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3711"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3849">
            <name>const RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380067"/>
            </content>
        </type>
        <type derived="true" id="type.3873">
            <name>const RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380067"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3850">
            <name>const RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380067"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3899">
            <name>const RedBlackTree&lt;T, T, Identity&lt;T>, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3897"/>
            </content>
        </type>
        <type derived="true" id="type.3946">
            <name>const RedBlackTree&lt;T, T, Identity&lt;T>, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380218"/>
            </content>
        </type>
        <type derived="true" id="type.3937">
            <name>const RedBlackTree&lt;T, T, Identity&lt;T>, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380168"/>
            </content>
        </type>
        <type derived="true" id="type.3922">
            <name>const RedBlackTree&lt;T, T, Identity&lt;T>, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3897"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3900">
            <name>const RedBlackTree&lt;T, T, Identity&lt;T>, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3897"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3722">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3720"/>
            </content>
        </type>
        <type derived="true" id="type.3746">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3720"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3723">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3720"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3948">
            <name>const RedBlackTreeNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380227"/>
            </content>
        </type>
        <type derived="true" id="type.3838">
            <name>const RedBlackTreeNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3836"/>
            </content>
        </type>
        <type derived="true" id="type.3846">
            <name>const RedBlackTreeNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380058"/>
            </content>
        </type>
        <type derived="true" id="type.3939">
            <name>const RedBlackTreeNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380177"/>
            </content>
        </type>
        <type derived="true" id="type.3829">
            <name>const RedBlackTreeNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380035"/>
            </content>
        </type>
        <type derived="true" id="type.3908">
            <name>const RedBlackTreeNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3906"/>
            </content>
        </type>
        <type derived="true" id="type.3933">
            <name>const RedBlackTreeNode&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3906"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3830">
            <name>const RedBlackTreeNode&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380035"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3909">
            <name>const RedBlackTreeNode&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3906"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3839">
            <name>const RedBlackTreeNode&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3836"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3859">
            <name>const RedBlackTreeNode&lt;ValueType></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3857"/>
            </content>
        </type>
        <type derived="true" id="type.3885">
            <name>const RedBlackTreeNode&lt;ValueType>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3857"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3860">
            <name>const RedBlackTreeNode&lt;ValueType>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3857"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4682">
            <name>const RedBlackTreeNodeBase</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378362"/>
            </content>
        </type>
        <type derived="true" id="type.4683">
            <name>const RedBlackTreeNodeBase&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378362"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3730">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3728"/>
            </content>
        </type>
        <type derived="true" id="type.3732">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3728"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3731">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3728"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3718">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3716"/>
            </content>
        </type>
        <type derived="true" id="type.3725">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3716"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3719">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3716"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3834">
            <name>const RedBlackTreeNodeIterator&lt;T, R, P></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380041"/>
            </content>
        </type>
        <type derived="true" id="type.3845">
            <name>const RedBlackTreeNodeIterator&lt;T, R, P></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380054"/>
            </content>
        </type>
        <type derived="true" id="type.3842">
            <name>const RedBlackTreeNodeIterator&lt;T, R, P>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380041"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3835">
            <name>const RedBlackTreeNodeIterator&lt;T, R, P>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380041"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3917">
            <name>const RedBlackTreeNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3915"/>
            </content>
        </type>
        <type derived="true" id="type.3951">
            <name>const RedBlackTreeNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380236"/>
            </content>
        </type>
        <type derived="true" id="type.3942">
            <name>const RedBlackTreeNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380186"/>
            </content>
        </type>
        <type derived="true" id="type.3919">
            <name>const RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3915"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3918">
            <name>const RedBlackTreeNodeIterator&lt;T, T&amp;, T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3915"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3904">
            <name>const RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3902"/>
            </content>
        </type>
        <type derived="true" id="type.3947">
            <name>const RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380223"/>
            </content>
        </type>
        <type derived="true" id="type.3938">
            <name>const RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380173"/>
            </content>
        </type>
        <type derived="true" id="type.3911">
            <name>const RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3902"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3949">
            <name>const RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380223"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3940">
            <name>const RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380173"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3905">
            <name>const RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3902"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3868">
            <name>const RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3866"/>
            </content>
        </type>
        <type derived="true" id="type.3870">
            <name>const RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3866"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3869">
            <name>const RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3866"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3855">
            <name>const RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3853"/>
            </content>
        </type>
        <type derived="true" id="type.3862">
            <name>const RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3853"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3856">
            <name>const RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3853"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388499">
            <name>const Rel&lt;Grammar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387700"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388406">
            <name>const Rel&lt;String&lt;uchar>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387523"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3190">
            <name>const Remainder&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379001"/>
            </content>
        </type>
        <type derived="true" id="type.3191">
            <name>const Remainder&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379001"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4756">
            <name>const ReturnStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383550"/>
            </content>
        </type>
        <type derived="true" id="type.4757">
            <name>const ReturnStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383550"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387980">
            <name>const RuleData&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385568"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387981">
            <name>const RuleData*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385568"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385710">
            <name>const RuleLink*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385707"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387671">
            <name>const RuleLink*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385707"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387672">
            <name>const RuleLink**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385707"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387786">
            <name>const RuleParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385703"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385706">
            <name>const RuleParser*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385703"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387646">
            <name>const RuleParser*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385703"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387647">
            <name>const RuleParser**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385703"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388602">
            <name>const RuleParser**&amp;&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385703"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4792">
            <name>const RvalueRef</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383602"/>
            </content>
        </type>
        <type derived="true" id="type.4793">
            <name>const RvalueRef&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383602"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385714">
            <name>const Scanner*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385711"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385718">
            <name>const Scope*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385715"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3423">
            <name>const SelectFirst&lt;K, T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379297"/>
            </content>
        </type>
        <type derived="true" id="type.3364">
            <name>const SelectFirst&lt;K, T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3363"/>
            </content>
        </type>
        <type derived="true" id="type.3365">
            <name>const SelectFirst&lt;K, T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3363"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3705">
            <name>const SelectFirst&lt;Key, Value></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3704"/>
            </content>
        </type>
        <type derived="true" id="type.3706">
            <name>const SelectFirst&lt;Key, Value>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3704"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4224">
            <name>const SelectFirst&lt;String&lt;char>, Age*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381260"/>
            </content>
        </type>
        <type derived="true" id="type.4389">
            <name>const SelectFirst&lt;String&lt;char>, AliasType*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382156"/>
            </content>
        </type>
        <type derived="true" id="type.4323">
            <name>const SelectFirst&lt;String&lt;char>, BidiClass*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381798"/>
            </content>
        </type>
        <type derived="true" id="type.4356">
            <name>const SelectFirst&lt;String&lt;char>, BidiPairedBracketType*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381977"/>
            </content>
        </type>
        <type derived="true" id="type.4125">
            <name>const SelectFirst&lt;String&lt;char>, BinaryProperty*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380720"/>
            </content>
        </type>
        <type derived="true" id="type.4158">
            <name>const SelectFirst&lt;String&lt;char>, Block*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380900"/>
            </content>
        </type>
        <type derived="true" id="type.4191">
            <name>const SelectFirst&lt;String&lt;char>, GeneralCategory*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381081"/>
            </content>
        </type>
        <type derived="true" id="type.4290">
            <name>const SelectFirst&lt;String&lt;char>, NumericType*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381619"/>
            </content>
        </type>
        <type derived="true" id="type.4257">
            <name>const SelectFirst&lt;String&lt;char>, Script*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381439"/>
            </content>
        </type>
        <type derived="true" id="type.4581">
            <name>const SelectFirst&lt;String&lt;uchar>, Grammar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388008"/>
            </content>
        </type>
        <type derived="true" id="type.1388639">
            <name>const SelectFirst&lt;String&lt;uchar>, Grammar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388008"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388010">
            <name>const SelectFirst&lt;String&lt;uchar>, Grammar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388008"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4594">
            <name>const SelectFirst&lt;String&lt;uchar>, Namespace*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388074"/>
            </content>
        </type>
        <type derived="true" id="type.1388650">
            <name>const SelectFirst&lt;String&lt;uchar>, Namespace*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388074"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388076">
            <name>const SelectFirst&lt;String&lt;uchar>, Namespace*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388074"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4645">
            <name>const SelectFirst&lt;String&lt;uchar>, ParsingObject*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388309"/>
            </content>
        </type>
        <type derived="true" id="type.1388749">
            <name>const SelectFirst&lt;String&lt;uchar>, ParsingObject*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388309"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388311">
            <name>const SelectFirst&lt;String&lt;uchar>, ParsingObject*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388309"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4509">
            <name>const SelectFirst&lt;String&lt;uchar>, String&lt;uchar>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387536"/>
            </content>
        </type>
        <type derived="true" id="type.1388392">
            <name>const SelectFirst&lt;String&lt;uchar>, String&lt;uchar>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387536"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387538">
            <name>const SelectFirst&lt;String&lt;uchar>, String&lt;uchar>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387536"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4211">
            <name>const SelectFirst&lt;System.Unicode.AgeId, Age*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381195"/>
            </content>
        </type>
        <type derived="true" id="type.4376">
            <name>const SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382091"/>
            </content>
        </type>
        <type derived="true" id="type.4310">
            <name>const SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381733"/>
            </content>
        </type>
        <type derived="true" id="type.4343">
            <name>const SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381912"/>
            </content>
        </type>
        <type derived="true" id="type.4111">
            <name>const SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380641"/>
            </content>
        </type>
        <type derived="true" id="type.4145">
            <name>const SelectFirst&lt;System.Unicode.BlockId, Block*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380835"/>
            </content>
        </type>
        <type derived="true" id="type.4178">
            <name>const SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381016"/>
            </content>
        </type>
        <type derived="true" id="type.4277">
            <name>const SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381554"/>
            </content>
        </type>
        <type derived="true" id="type.4244">
            <name>const SelectFirst&lt;System.Unicode.ScriptId, Script*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381374"/>
            </content>
        </type>
        <type derived="true" id="type.3760">
            <name>const SelectFirst&lt;T, U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379928"/>
            </content>
        </type>
        <type derived="true" id="type.3761">
            <name>const SelectFirst&lt;T, U>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379928"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3771">
            <name>const SelectSecond&lt;T, U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379941"/>
            </content>
        </type>
        <type derived="true" id="type.3772">
            <name>const SelectSecond&lt;T, U>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379941"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3935">
            <name>const Set&lt;T, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380157"/>
            </content>
        </type>
        <type derived="true" id="type.3888">
            <name>const Set&lt;T, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380108"/>
            </content>
        </type>
        <type derived="true" id="type.3944">
            <name>const Set&lt;T, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380207"/>
            </content>
        </type>
        <type derived="true" id="type.3889">
            <name>const Set&lt;T, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380108"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3344">
            <name>const ShiftLeft&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379203"/>
            </content>
        </type>
        <type derived="true" id="type.3345">
            <name>const ShiftLeft&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379203"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3349">
            <name>const ShiftRight&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379210"/>
            </content>
        </type>
        <type derived="true" id="type.3350">
            <name>const ShiftRight&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379210"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4733">
            <name>const SizeOf</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383520"/>
            </content>
        </type>
        <type derived="true" id="type.4734">
            <name>const SizeOf&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383520"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4830">
            <name>const Span</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385719"/>
            </content>
        </type>
        <type derived="true" id="type.1387437">
            <name>const Span&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385719"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385722">
            <name>const Span*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385719"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4606">
            <name>const Stack&lt;Namespace*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388133"/>
            </content>
        </type>
        <type derived="true" id="type.1388135">
            <name>const Stack&lt;Namespace*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388133"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3953">
            <name>const Stack&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380257"/>
            </content>
        </type>
        <type derived="true" id="type.3954">
            <name>const Stack&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380257"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4566">
            <name>const Stack&lt;UniquePtr&lt;System.Text.Parsing.Context>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387951"/>
            </content>
        </type>
        <type derived="true" id="type.1388629">
            <name>const Stack&lt;UniquePtr&lt;System.Text.Parsing.Context>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387951"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387953">
            <name>const Stack&lt;UniquePtr&lt;System.Text.Parsing.Context>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387951"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4500">
            <name>const Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387491"/>
            </content>
        </type>
        <type derived="true" id="type.1387493">
            <name>const Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387491"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4754">
            <name>const Statement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383544"/>
            </content>
        </type>
        <type derived="true" id="type.4657">
            <name>const StaticInitCriticalSection</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1377846"/>
            </content>
        </type>
        <type derived="true" id="type.4658">
            <name>const StaticInitCriticalSection&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1377846"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4677">
            <name>const StreamReader</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378399"/>
            </content>
        </type>
        <type derived="true" id="type.4678">
            <name>const StreamWriter</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378401"/>
            </content>
        </type>
        <type derived="true" id="type.4039">
            <name>const String&lt;CharT></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380382"/>
            </content>
        </type>
        <type derived="true" id="type.3982">
            <name>const String&lt;CharT></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380292"/>
            </content>
        </type>
        <type derived="true" id="type.4053">
            <name>const String&lt;CharT></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380427"/>
            </content>
        </type>
        <type derived="true" id="type.4025">
            <name>const String&lt;CharT></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380337"/>
            </content>
        </type>
        <type derived="true" id="type.4067">
            <name>const String&lt;CharT></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380472"/>
            </content>
        </type>
        <type derived="true" id="type.4095">
            <name>const String&lt;CharT></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380562"/>
            </content>
        </type>
        <type derived="true" id="type.4081">
            <name>const String&lt;CharT></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380518"/>
            </content>
        </type>
        <type derived="true" id="type.4002">
            <name>const String&lt;CharT>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380292"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3983">
            <name>const String&lt;CharT>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380292"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3051">
            <name>const String&lt;char></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378573"/>
            </content>
        </type>
        <type derived="true" id="type.1378593">
            <name>const String&lt;char>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378573"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3081">
            <name>const String&lt;uchar></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378697"/>
            </content>
        </type>
        <type derived="true" id="type.1378718">
            <name>const String&lt;uchar>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378697"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1378700">
            <name>const String&lt;uchar>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378697"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388570">
            <name>const String&lt;uchar>*&amp;&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378697"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3069">
            <name>const String&lt;wchar></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378653"/>
            </content>
        </type>
        <type derived="true" id="type.4825">
            <name>const StringParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385587"/>
            </content>
        </type>
        <type derived="true" id="type.4826">
            <name>const StringParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385587"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385590">
            <name>const StringParser*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385587"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4771">
            <name>const SwitchStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383584"/>
            </content>
        </type>
        <type derived="true" id="type.4772">
            <name>const SwitchStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383584"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3189">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378192"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3348">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378249"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3167">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378182"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3840">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378370"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3530">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378274"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3785">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378339"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3520">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378272"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3831">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378368"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3233">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378210"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3223">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378207"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3240">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378212"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3775">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378333"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3250">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378215"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3516">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378270"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3173">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378185"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3257">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378217"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3591">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378289"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3610">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378291"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3267">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378220"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3764">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378330"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3216">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378205"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3274">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378222"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3639">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378298"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3756">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378321"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3284">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378225"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3291">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378227"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3103">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378162"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3443">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378262"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3301">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378230"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3660">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378302"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3194">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378194"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3360">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378254"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3207">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378203"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3308">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378232"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3353">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378251"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3956">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378390"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4463">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378523"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3183">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378189"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3328">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378241"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3333">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378243"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3123">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378171"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3338">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378245"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3343">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378247"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3178">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378187"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3895">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378383"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3112">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378164"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3124">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378171"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3641">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378298"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4461">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378523"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3791">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378339"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3661">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378302"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3612">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378291"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3963">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378390"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3460">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378262"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3901">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378383"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4748">
            <name>const TemplateId</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383538"/>
            </content>
        </type>
        <type derived="true" id="type.4749">
            <name>const TemplateId&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383538"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4777">
            <name>const ThrowStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383590"/>
            </content>
        </type>
        <type derived="true" id="type.4778">
            <name>const ThrowStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383590"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4813">
            <name>const TokenParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385494"/>
            </content>
        </type>
        <type derived="true" id="type.4814">
            <name>const TokenParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385494"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4780">
            <name>const TryStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383594"/>
            </content>
        </type>
        <type derived="true" id="type.4781">
            <name>const TryStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383594"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4695">
            <name>const Type</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383405"/>
            </content>
        </type>
        <type derived="true" id="type.4696">
            <name>const Type&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383405"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4736">
            <name>const TypeName</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383522"/>
            </content>
        </type>
        <type derived="true" id="type.4737">
            <name>const TypeName&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383522"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3292">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378228"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3309">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378233"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3258">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378218"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3757">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378322"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3776">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378334"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3241">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378213"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3275">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378223"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3224">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378208"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3765">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378331"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388488">
            <name>const UnaryFun&lt;Grammar*, Grammar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387714"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388494">
            <name>const UnaryFun&lt;Grammar*, ulong>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387694"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388642">
            <name>const UnaryFun&lt;Pair&lt;String&lt;uchar>, Grammar*>, String&lt;uchar>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388011"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388653">
            <name>const UnaryFun&lt;Pair&lt;String&lt;uchar>, Namespace*>, String&lt;uchar>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388077"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388752">
            <name>const UnaryFun&lt;Pair&lt;String&lt;uchar>, ParsingObject*>, String&lt;uchar>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388312"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388395">
            <name>const UnaryFun&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>, String&lt;uchar>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387539"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388565">
            <name>const UnaryFun&lt;String&lt;uchar>, String&lt;uchar>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387797"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388401">
            <name>const UnaryFun&lt;String&lt;uchar>, ulong>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387518"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4718">
            <name>const UnaryMinus</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383460"/>
            </content>
        </type>
        <type derived="true" id="type.4719">
            <name>const UnaryMinus&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383460"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385485">
            <name>const UnaryParser*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385482"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4715">
            <name>const UnaryPlus</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383458"/>
            </content>
        </type>
        <type derived="true" id="type.4716">
            <name>const UnaryPlus&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383458"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4693">
            <name>const UnicodeException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378419"/>
            </content>
        </type>
        <type derived="true" id="type.4694">
            <name>const UnicodeException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378419"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3741">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3739"/>
            </content>
        </type>
        <type derived="true" id="type.3743">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3739"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3742">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3739"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3943">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;T>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380197"/>
            </content>
        </type>
        <type derived="true" id="type.3928">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;T>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3926"/>
            </content>
        </type>
        <type derived="true" id="type.3952">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;T>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380247"/>
            </content>
        </type>
        <type derived="true" id="type.3930">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;T>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3926"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3929">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;T>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3926"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3880">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;ValueType>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3878"/>
            </content>
        </type>
        <type derived="true" id="type.3882">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;ValueType>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3878"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3881">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;ValueType>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3878"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3068">
            <name>const UniquePtr&lt;System.IO.ByteStream></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378640"/>
            </content>
        </type>
        <type derived="true" id="type.3099">
            <name>const UniquePtr&lt;System.IO.InputStream></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378790"/>
            </content>
        </type>
        <type derived="true" id="type.3098">
            <name>const UniquePtr&lt;System.IO.OutputStream></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378780"/>
            </content>
        </type>
        <type derived="true" id="type.4477">
            <name>const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385223"/>
            </content>
        </type>
        <type derived="true" id="type.4485">
            <name>const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385282"/>
            </content>
        </type>
        <type derived="true" id="type.4484">
            <name>const UniquePtr&lt;System.Text.Parsing.CodeDom.CompoundStatement></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385269"/>
            </content>
        </type>
        <type derived="true" id="type.4483">
            <name>const UniquePtr&lt;System.Text.Parsing.CodeDom.DefaultStatement></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385253"/>
            </content>
        </type>
        <type derived="true" id="type.4467">
            <name>const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385095"/>
            </content>
        </type>
        <type derived="true" id="type.1388738">
            <name>const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*&amp;&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385095"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4471">
            <name>const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385177"/>
            </content>
        </type>
        <type derived="true" id="type.4565">
            <name>const UniquePtr&lt;System.Text.Parsing.Context></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387941"/>
            </content>
        </type>
        <type derived="true" id="type.1387945">
            <name>const UniquePtr&lt;System.Text.Parsing.Context>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387941"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387944">
            <name>const UniquePtr&lt;System.Text.Parsing.Context>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387941"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4521">
            <name>const UniquePtr&lt;System.Text.Parsing.FileInfo></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387615"/>
            </content>
        </type>
        <type derived="true" id="type.1387619">
            <name>const UniquePtr&lt;System.Text.Parsing.FileInfo>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387615"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387618">
            <name>const UniquePtr&lt;System.Text.Parsing.FileInfo>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387615"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4544">
            <name>const UniquePtr&lt;System.Text.Parsing.IdentifierCharsRule></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387771"/>
            </content>
        </type>
        <type derived="true" id="type.1387775">
            <name>const UniquePtr&lt;System.Text.Parsing.IdentifierCharsRule>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387771"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387774">
            <name>const UniquePtr&lt;System.Text.Parsing.IdentifierCharsRule>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387771"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4499">
            <name>const UniquePtr&lt;System.Text.Parsing.Object></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387481"/>
            </content>
        </type>
        <type derived="true" id="type.1387485">
            <name>const UniquePtr&lt;System.Text.Parsing.Object>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387481"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387484">
            <name>const UniquePtr&lt;System.Text.Parsing.Object>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387481"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4614">
            <name>const UniquePtr&lt;System.Text.Parsing.ParsingDomain></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388169"/>
            </content>
        </type>
        <type derived="true" id="type.1388173">
            <name>const UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388169"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388172">
            <name>const UniquePtr&lt;System.Text.Parsing.ParsingDomain>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388169"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4613">
            <name>const UniquePtr&lt;System.Text.Parsing.ParsingDomainRepository></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388160"/>
            </content>
        </type>
        <type derived="true" id="type.1388164">
            <name>const UniquePtr&lt;System.Text.Parsing.ParsingDomainRepository>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388160"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388163">
            <name>const UniquePtr&lt;System.Text.Parsing.ParsingDomainRepository>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1388160"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4491">
            <name>const UniquePtr&lt;System.Text.Parsing.ParsingObject></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387452"/>
            </content>
        </type>
        <type derived="true" id="type.1387456">
            <name>const UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387452"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387455">
            <name>const UniquePtr&lt;System.Text.Parsing.ParsingObject>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387452"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4545">
            <name>const UniquePtr&lt;System.Text.Parsing.RuleParser></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387779"/>
            </content>
        </type>
        <type derived="true" id="type.1387783">
            <name>const UniquePtr&lt;System.Text.Parsing.RuleParser>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387779"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387782">
            <name>const UniquePtr&lt;System.Text.Parsing.RuleParser>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387779"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4236">
            <name>const UniquePtr&lt;System.Unicode.AgeTable></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381318"/>
            </content>
        </type>
        <type derived="true" id="type.4401">
            <name>const UniquePtr&lt;System.Unicode.AliasTypeTable></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382214"/>
            </content>
        </type>
        <type derived="true" id="type.4335">
            <name>const UniquePtr&lt;System.Unicode.BidiClassTable></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381856"/>
            </content>
        </type>
        <type derived="true" id="type.4368">
            <name>const UniquePtr&lt;System.Unicode.BidiPairedBracketTypeTable></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382035"/>
            </content>
        </type>
        <type derived="true" id="type.4142">
            <name>const UniquePtr&lt;System.Unicode.BinaryPropertyTable></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380800"/>
            </content>
        </type>
        <type derived="true" id="type.4170">
            <name>const UniquePtr&lt;System.Unicode.BlockTable></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380958"/>
            </content>
        </type>
        <type derived="true" id="type.4414">
            <name>const UniquePtr&lt;System.Unicode.CharacterInfo></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382268"/>
            </content>
        </type>
        <type derived="true" id="type.4438">
            <name>const UniquePtr&lt;System.Unicode.CharacterInfoPage></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382357"/>
            </content>
        </type>
        <type derived="true" id="type.4437">
            <name>const UniquePtr&lt;System.Unicode.CharacterTable></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382348"/>
            </content>
        </type>
        <type derived="true" id="type.4422">
            <name>const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382297"/>
            </content>
        </type>
        <type derived="true" id="type.4446">
            <name>const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoHeader></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382386"/>
            </content>
        </type>
        <type derived="true" id="type.4447">
            <name>const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382395"/>
            </content>
        </type>
        <type derived="true" id="type.4203">
            <name>const UniquePtr&lt;System.Unicode.GeneralCategoryTable></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381139"/>
            </content>
        </type>
        <type derived="true" id="type.4307">
            <name>const UniquePtr&lt;System.Unicode.NumericTypeTable></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381699"/>
            </content>
        </type>
        <type derived="true" id="type.4269">
            <name>const UniquePtr&lt;System.Unicode.ScriptTable></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381497"/>
            </content>
        </type>
        <type derived="true" id="type.4456">
            <name>const UniquePtr&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382424"/>
            </content>
        </type>
        <type derived="true" id="type.4465">
            <name>const UniquePtr&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382435"/>
            </content>
        </type>
        <type derived="true" id="type.4466">
            <name>const UniquePtr&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382446"/>
            </content>
        </type>
        <type derived="true" id="type.4459">
            <name>const UniquePtr&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382424"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4457">
            <name>const UniquePtr&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382424"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3701">
            <name>const Value&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378310"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4560">
            <name>const ValueObject&lt;ValueType></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387934"/>
            </content>
        </type>
        <type derived="true" id="type.4563">
            <name>const ValueObject&lt;ValueType>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387934"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4561">
            <name>const ValueObject&lt;ValueType>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1387934"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4562">
            <name>const ValueType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385559"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3548">
            <name>const ValueType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378284"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3851">
            <name>const ValueType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378378"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3550">
            <name>const ValueType*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378284"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3852">
            <name>const ValueType*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378378"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385830">
            <name>const XmlLog*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385827"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1388468">
            <name>const int&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1377790"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4831">
            <name>const stdlib</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385723"/>
            </content>
        </type>
        <type derived="true" id="type.4832">
            <name>const stdlib&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1385723"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1378702">
            <name>const uchar*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1377798"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385789">
            <name>doubleRule</name>
        </type>
        <type derived="true" id="type.1385790">
            <name>doubleRule*</name>
            <content>
                <baseType ref="1385789"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385813">
            <name>escapeRule</name>
        </type>
        <type derived="true" id="type.1385814">
            <name>escapeRule*</name>
            <content>
                <baseType ref="1385813"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385785">
            <name>floatRule</name>
        </type>
        <type derived="true" id="type.1385786">
            <name>floatRule*</name>
            <content>
                <baseType ref="1385785"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385773">
            <name>hexRule</name>
        </type>
        <type derived="true" id="type.1385774">
            <name>hexRule*</name>
            <content>
                <baseType ref="1385773"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385777">
            <name>hex_literalRule</name>
        </type>
        <type derived="true" id="type.1385778">
            <name>hex_literalRule*</name>
            <content>
                <baseType ref="1385777"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385757">
            <name>hexbyteRule</name>
        </type>
        <type derived="true" id="type.1385758">
            <name>hexbyteRule*</name>
            <content>
                <baseType ref="1385757"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385765">
            <name>hexdwordRule</name>
        </type>
        <type derived="true" id="type.1385766">
            <name>hexdwordRule*</name>
            <content>
                <baseType ref="1385765"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385769">
            <name>hexqwordRule</name>
        </type>
        <type derived="true" id="type.1385770">
            <name>hexqwordRule*</name>
            <content>
                <baseType ref="1385769"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385761">
            <name>hexwordRule</name>
        </type>
        <type derived="true" id="type.1385762">
            <name>hexwordRule*</name>
            <content>
                <baseType ref="1385761"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385805">
            <name>identifierRule</name>
        </type>
        <type derived="true" id="type.1385806">
            <name>identifierRule*</name>
            <content>
                <baseType ref="1385805"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.1377790">
            <name>int</name>
        </type>
        <type id="1385741">
            <name>intRule</name>
        </type>
        <type derived="true" id="type.1385742">
            <name>intRule*</name>
            <content>
                <baseType ref="1385741"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385749">
            <name>longRule</name>
        </type>
        <type derived="true" id="type.1385750">
            <name>longRule*</name>
            <content>
                <baseType ref="1385749"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385797">
            <name>numRule</name>
        </type>
        <type derived="true" id="type.1385798">
            <name>numRule*</name>
            <content>
                <baseType ref="1385797"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385781">
            <name>octal_digitRule</name>
        </type>
        <type derived="true" id="type.1385782">
            <name>octal_digitRule*</name>
            <content>
                <baseType ref="1385781"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385809">
            <name>qualified_idRule</name>
        </type>
        <type derived="true" id="type.1385810">
            <name>qualified_idRule*</name>
            <content>
                <baseType ref="1385809"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385725">
            <name>sbyteRule</name>
        </type>
        <type derived="true" id="type.1385726">
            <name>sbyteRule*</name>
            <content>
                <baseType ref="1385725"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385733">
            <name>shortRule</name>
        </type>
        <type derived="true" id="type.1385734">
            <name>shortRule*</name>
            <content>
                <baseType ref="1385733"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385723">
            <name>stdlib</name>
        </type>
        <type derived="true" id="type.4833">
            <name>stdlib&amp;&amp;</name>
            <content>
                <baseType ref="1385723"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385724">
            <name>stdlib*</name>
            <content>
                <baseType ref="1385723"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385821">
            <name>stringRule</name>
        </type>
        <type derived="true" id="type.1385822">
            <name>stringRule*</name>
            <content>
                <baseType ref="1385821"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.1377798">
            <name>uchar</name>
        </type>
        <type basic="true" id="type.1377791">
            <name>uint</name>
        </type>
        <type id="1385745">
            <name>uintRule</name>
        </type>
        <type derived="true" id="type.1385746">
            <name>uintRule*</name>
            <content>
                <baseType ref="1385745"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.1377793">
            <name>ulong</name>
        </type>
        <type id="1385753">
            <name>ulongRule</name>
        </type>
        <type derived="true" id="type.1385754">
            <name>ulongRule*</name>
            <content>
                <baseType ref="1385753"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385793">
            <name>urealRule</name>
        </type>
        <type derived="true" id="type.1385794">
            <name>urealRule*</name>
            <content>
                <baseType ref="1385793"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1385737">
            <name>ushortRule</name>
        </type>
        <type derived="true" id="type.1385738">
            <name>ushortRule*</name>
            <content>
                <baseType ref="1385737"/>
                <qualifier>*</qualifier>
            </content>
        </type>
    </types>
</library>
