<library>
    <name>System.Text.Parsing</name>
    <style>../../style/cmdoc.css</style>
    <namespaces>
        <namespace id="System.Text.Parsing">
            <name>System.Text.Parsing</name>
            <classes>
                <class id="7399">
                    <name>ActionParser</name>
                    <groupName>ActionParser</groupName>
                    <syntax> public class ActionParser;</syntax>
                    <baseClass ref="7408"/>
                    <constructors>
                        <constructor id="constructor_ActionParser_A3D419CE062EB871214024A812E9F0F6D307670B">
                            <name>ActionParser(const String&lt;uchar>&amp; name_, Parser* child_)</name>
                            <syntax>public ActionParser(const String&lt;uchar>&amp; name_, Parser* child_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.1133"/>
                                </parameter>
                                <parameter>
                                    <name>child_</name>
                                    <type ref="type.7524"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_ActionParser_04FF93BB91F45761B6C02A4AE95D118F65E7FB80">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Action_ActionParser_7E1D5A7A3214868A5B73DF0D102F8BFE8CA157A8">
                            <name>Action() const</name>
                            <syntax>public ParsingAction Action() const;</syntax>
                            <returnType ref="7397"/>
                        </function>
                        <function id="member_function_Failure_ActionParser_4641A209F3C4D38AC6D7AE85DA55792D60D7FF45">
                            <name>Failure() const</name>
                            <syntax>public FailureAction Failure() const;</syntax>
                            <returnType ref="7398"/>
                        </function>
                        <function id="member_function_FailureCode_ActionParser_A4BBFB7865FC97611CB362B5BB8791B43E851118">
                            <name>FailureCode() const</name>
                            <syntax>public CompoundStatement* FailureCode() const;</syntax>
                            <returnType ref="type.6652"/>
                        </function>
                        <function id="member_function_MethodName_ActionParser_24AC3A9ED74A19C2B2761E90C778EF46BF702F94">
                            <name>MethodName()</name>
                            <syntax>public String&lt;uchar> MethodName();</syntax>
                            <returnType ref="type.1128"/>
                        </function>
                        <function id="member_function_Parse_ActionParser_AFAE656F66341525B29E731D8BD5DF6E3DA4AD83">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                        <function id="member_function_SetAction_ActionParser_7F42755E09F6B27F76E6B6A10049B8A3331B5C63">
                            <name>SetAction(ParsingAction action_)</name>
                            <syntax>public void SetAction(ParsingAction action_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>action_</name>
                                    <type ref="7397"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetFailure_ActionParser_2BC92166D762C99E9F1D568256A0177D4434D554">
                            <name>SetFailure(FailureAction failureAction_)</name>
                            <syntax>public void SetFailure(FailureAction failureAction_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>failureAction_</name>
                                    <type ref="7398"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetFailureCode_ActionParser_6B3A324DC05DC6769797C1CC7E65EB9CFDE00590">
                            <name>SetFailureCode(CompoundStatement* failureCode_)</name>
                            <syntax>public void SetFailureCode(CompoundStatement* failureCode_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>failureCode_</name>
                                    <type ref="type.6652"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetSuccessCode_ActionParser_D21842078345AB507BB7DE3EF57E0F216E738B11">
                            <name>SetSuccessCode(CompoundStatement* successCode_)</name>
                            <syntax>public void SetSuccessCode(CompoundStatement* successCode_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>successCode_</name>
                                    <type ref="type.6652"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SuccessCode_ActionParser_B69745834019AF1EBBF911DAAD30342B58348F40">
                            <name>SuccessCode() const</name>
                            <syntax>public CompoundStatement* SuccessCode() const;</syntax>
                            <returnType ref="type.6652"/>
                        </function>
                        <function id="member_function_VariableName_ActionParser_794D146116C34EF15F073FC6A56D058AD4C0FD15">
                            <name>VariableName()</name>
                            <syntax>public String&lt;uchar> VariableName();</syntax>
                            <returnType ref="type.1128"/>
                        </function>
                    </functions>
                </class>
                <class id="7713">
                    <name>AlphabeticParser</name>
                    <groupName>AlphabeticParser</groupName>
                    <syntax> public class AlphabeticParser;</syntax>
                    <baseClass ref="7523"/>
                    <constructors>
                        <constructor id="default_constructor_AlphabeticParser_E1AFD8DEA5209DF9CF410E4E992CBDD35E0781EA">
                            <name>AlphabeticParser()</name>
                            <syntax>public nothrow AlphabeticParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_AlphabeticParser_4CDD6804153C9DBC9112A458E2A3115B3BA7F17C">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_AlphabeticParser_A9520121328DE85258CB97CC3FD23DD136BADDFC">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                    </functions>
                </class>
                <class id="7438">
                    <name>AlternativeParser</name>
                    <groupName>AlternativeParser</groupName>
                    <syntax> public class AlternativeParser;</syntax>
                    <baseClass ref="7429"/>
                    <constructors>
                        <constructor id="constructor_AlternativeParser_650A613B29EDC1FEA31B170247C9AAA68965A3A2">
                            <name>AlternativeParser(Parser* left_, Parser* right_)</name>
                            <syntax>public AlternativeParser(Parser* left_, Parser* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.7524"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.7524"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_AlternativeParser_73B2C3277D9842D2A60E5D3BB1DA512A86778646">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_AlternativeParser_EB2CE400062FD63D2634CE919B41AC2445D8FCAA">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                    </functions>
                </class>
                <class id="7722">
                    <name>AnyCharParser</name>
                    <groupName>AnyCharParser</groupName>
                    <syntax> public class AnyCharParser;</syntax>
                    <baseClass ref="7523"/>
                    <constructors>
                        <constructor id="default_constructor_AnyCharParser_423FBF11D0ED1DD1C7817F6B464B1DA7098029BE">
                            <name>AnyCharParser()</name>
                            <syntax>public nothrow AnyCharParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_AnyCharParser_4CF4F4A2A1691B1847B89B4E657F1E4BF51E4718">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_AnyCharParser_BDFFEEE8E7D3DCA634CB3645D1C6A1593FFF5730">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                    </functions>
                </class>
                <class id="7509">
                    <name>ArgumentCollector</name>
                    <groupName>ArgumentCollector</groupName>
                    <syntax> public class ArgumentCollector;</syntax>
                    <baseClass ref="6485"/>
                    <functions>
                        <function id="member_function_Accept_ArgumentCollector_6CE88579B79051DA62C9365EFB51F1706567E0D0">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.6743"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_AddArgument_ArgumentCollector_DA723F3653FCCAB3FBE2C4F6D099F74C2F8C2574">
                            <name>AddArgument(DomObject* argument)</name>
                            <syntax>public override void AddArgument(DomObject* argument);</syntax>
                            <parameters>
                                <parameter>
                                    <name>argument</name>
                                    <type ref="type.6486"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Arguments_ArgumentCollector_A4E03F4E5CC686FACE13FDF870BAB50C763C04F2">
                            <name>Arguments()</name>
                            <syntax>public List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>> Arguments();</syntax>
                            <returnType ref="type.7096"/>
                        </function>
                    </functions>
                </class>
                <class id="7731">
                    <name>AttrOrVar</name>
                    <groupName>AttrOrVar</groupName>
                    <syntax> public class AttrOrVar;</syntax>
                    <constructors>
                        <constructor id="constructor_AttrOrVar_80B5D160D6CE01E05B7744A06F85AA397DDCC8CD">
                            <name>AttrOrVar(const String&lt;uchar>&amp; type_, const String&lt;uchar>&amp; name_)</name>
                            <syntax>public nothrow AttrOrVar(const String&lt;uchar>&amp; type_, const String&lt;uchar>&amp; name_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>type_</name>
                                    <type ref="type.1133"/>
                                </parameter>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.1133"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Name_AttrOrVar_68CAAABAC933DA72DDE108233A340AFE126A08FB">
                            <name>Name() const</name>
                            <syntax>public nothrow inline const String&lt;uchar>&amp; Name() const;</syntax>
                            <returnType ref="type.1133"/>
                        </function>
                        <function id="member_function_Type_AttrOrVar_835AD9BC08FFB51781AA902D54A2CB8F612B2F72">
                            <name>Type() const</name>
                            <syntax>public nothrow inline const String&lt;uchar>&amp; Type() const;</syntax>
                            <returnType ref="type.1133"/>
                        </function>
                    </functions>
                </class>
                <class id="7710">
                    <name>BaseCharParser</name>
                    <groupName>BaseCharParser</groupName>
                    <syntax> public class BaseCharParser;</syntax>
                    <baseClass ref="7523"/>
                    <constructors>
                        <constructor id="default_constructor_BaseCharParser_61C40EE157357D4CD42354FE0A603DF22C514284">
                            <name>BaseCharParser()</name>
                            <syntax>public nothrow BaseCharParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_BaseCharParser_3F97EB60D09015C9603275F45F4B6A2B16CAF720">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_BaseCharParser_D25DF03A2204691F1D0D80755153F5C12641B7AE">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                    </functions>
                </class>
                <class id="7429">
                    <name>BinaryParser</name>
                    <groupName>BinaryParser</groupName>
                    <syntax>abstract public class BinaryParser;</syntax>
                    <baseClass ref="7523"/>
                    <constructors>
                        <constructor id="constructor_BinaryParser_459621CD50EBCEAA998C0787559E55F43E70DCBA">
                            <name>BinaryParser(const String&lt;uchar>&amp; name_, Parser* left_, Parser* right_, const String&lt;uchar>&amp; info_)</name>
                            <syntax>public BinaryParser(const String&lt;uchar>&amp; name_, Parser* left_, Parser* right_, const String&lt;uchar>&amp; info_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.1133"/>
                                </parameter>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.7524"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.7524"/>
                                </parameter>
                                <parameter>
                                    <name>info_</name>
                                    <type ref="type.1133"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Left_BinaryParser_FE60510BDB71632960F1C5C87217FCA01A6CE5B4">
                            <name>Left() const</name>
                            <syntax>public nothrow inline Parser* Left() const;</syntax>
                            <returnType ref="type.7524"/>
                        </function>
                        <function id="member_function_Right_BinaryParser_688BA3D7785A21D4CB397B020BDE88DC99B0DBCC">
                            <name>Right() const</name>
                            <syntax>public nothrow inline Parser* Right() const;</syntax>
                            <returnType ref="type.7524"/>
                        </function>
                    </functions>
                </class>
                <class id="7605">
                    <name>CasedLetterParser</name>
                    <groupName>CasedLetterParser</groupName>
                    <syntax> public class CasedLetterParser;</syntax>
                    <baseClass ref="7523"/>
                    <constructors>
                        <constructor id="default_constructor_CasedLetterParser_28B622146ED51553B8D522BAEE03B0847EE86873">
                            <name>CasedLetterParser()</name>
                            <syntax>public nothrow CasedLetterParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_CasedLetterParser_BAE41405A5FC021E7DEB6CC98BCA2158C45AC73D">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_CasedLetterParser_9E5916771023D33975683C32636D039DF99E7A6C">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                    </functions>
                </class>
                <class id="7557">
                    <name>CharParser</name>
                    <groupName>CharParser</groupName>
                    <syntax> public class CharParser;</syntax>
                    <baseClass ref="7523"/>
                    <constructors>
                        <constructor id="constructor_CharParser_000296F9812F7C875F6A1FE7FC056A7830CE3E37">
                            <name>CharParser(uchar c_)</name>
                            <syntax>public nothrow CharParser(uchar c_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c_</name>
                                    <type ref="type.14"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_CharParser_90CF6875A059FBBB248D30E53AB4F2D70757C5B8">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Char_CharParser_4CFF7053501275E5D0CCD374597985642BAFF47A">
                            <name>Char() const</name>
                            <syntax>public nothrow inline uchar Char() const;</syntax>
                            <returnType ref="type.14"/>
                        </function>
                        <function id="member_function_Parse_CharParser_D06F0C614F5B2B7582D46AC3F63E78813009AF52">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                    </functions>
                </class>
                <class id="7569">
                    <name>CharRange</name>
                    <groupName>CharRange</groupName>
                    <syntax> public class CharRange;</syntax>
                    <constructors>
                        <constructor id="constructor_CharRange_DB5B00B663211F735D792685DB05ED438824124A">
                            <name>CharRange(uchar begin_)</name>
                            <syntax>public nothrow CharRange(uchar begin_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>begin_</name>
                                    <type ref="type.14"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_CharRange_F3430FDA456C2DB45859C0C5655C5E2089B4901C">
                            <name>CharRange(uchar begin_, uchar end_)</name>
                            <syntax>public nothrow CharRange(uchar begin_, uchar end_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>begin_</name>
                                    <type ref="type.14"/>
                                </parameter>
                                <parameter>
                                    <name>end_</name>
                                    <type ref="type.14"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Begin_CharRange_FE0640795188697A3CC4441D26898B4D21BBA37B">
                            <name>Begin() const</name>
                            <syntax>public nothrow inline uchar Begin() const;</syntax>
                            <returnType ref="type.14"/>
                        </function>
                        <function id="member_function_End_CharRange_183243ED483F58471997D6233F4505C48FF7C4EB">
                            <name>End() const</name>
                            <syntax>public nothrow inline uchar End() const;</syntax>
                            <returnType ref="type.14"/>
                        </function>
                        <function id="member_function_Includes_CharRange_7A008F40E93ABF3ED78FD55C06FDDE73E694A7EA">
                            <name>Includes(uchar c) const</name>
                            <syntax>public nothrow inline bool Includes(uchar c) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.14"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1"/>
                        </function>
                        <function id="member_function_SetBegin_CharRange_DE74DA82236B69A580D4477C5410D3357EC250D2">
                            <name>SetBegin(uchar begin_)</name>
                            <syntax>public nothrow inline void SetBegin(uchar begin_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>begin_</name>
                                    <type ref="type.14"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetEnd_CharRange_33714E97E052CDDF2A86EF9E3E899106AF0B63E7">
                            <name>SetEnd(uchar end_)</name>
                            <syntax>public nothrow inline void SetEnd(uchar end_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>end_</name>
                                    <type ref="type.14"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="7575">
                    <name>CharSetParser</name>
                    <groupName>CharSetParser</groupName>
                    <syntax> public class CharSetParser;</syntax>
                    <baseClass ref="7523"/>
                    <constructors>
                        <constructor id="constructor_CharSetParser_D6E385FFA6E70831056E09A35F5F65D04FC23269">
                            <name>CharSetParser(const String&lt;uchar>&amp; s_)</name>
                            <syntax>public CharSetParser(const String&lt;uchar>&amp; s_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s_</name>
                                    <type ref="type.1133"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_CharSetParser_3AF8EC830BC4FD63B9BBFDD87DB7FA1C48ABEE53">
                            <name>CharSetParser(const String&lt;uchar>&amp; s_, bool inverse_)</name>
                            <syntax>public CharSetParser(const String&lt;uchar>&amp; s_, bool inverse_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s_</name>
                                    <type ref="type.1133"/>
                                </parameter>
                                <parameter>
                                    <name>inverse_</name>
                                    <type ref="type.1"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_CharSetParser_EDDAD23ED5AC7D3468A1D0E3894D6F53F8E61B78">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Inverse_CharSetParser_4D82550F8A3C3CA3B335FAF07DF0BA583D026B2B">
                            <name>Inverse() const</name>
                            <syntax>public nothrow inline bool Inverse() const;</syntax>
                            <returnType ref="type.1"/>
                        </function>
                        <function id="member_function_Parse_CharSetParser_B3544751C1D537FCA7A2C9A6C44FFB499E685228">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                        <function id="member_function_Set_CharSetParser_6FBBF4222832B5A701AD96AC8FB7E356EF0F6369">
                            <name>Set() const</name>
                            <syntax>public nothrow inline const String&lt;uchar>&amp; Set() const;</syntax>
                            <returnType ref="type.1133"/>
                        </function>
                    </functions>
                </class>
                <class id="7650">
                    <name>ClosePunctuationParser</name>
                    <groupName>ClosePunctuationParser</groupName>
                    <syntax> public class ClosePunctuationParser;</syntax>
                    <baseClass ref="7523"/>
                    <constructors>
                        <constructor id="default_constructor_ClosePunctuationParser_E661657AE0484285A77585942009EBFE7AF31C66">
                            <name>ClosePunctuationParser()</name>
                            <syntax>public nothrow ClosePunctuationParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_ClosePunctuationParser_73F3674403894B77837B7348DC34098E41292864">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_ClosePunctuationParser_594C96D6FE843B1CBF4E802CD00B4FFA8AC5D5FC">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                    </functions>
                </class>
                <class id="7405">
                    <name>CodeExpandingVisitor</name>
                    <groupName>CodeExpandingVisitor</groupName>
                    <syntax> public class CodeExpandingVisitor;</syntax>
                    <baseClass ref="6741"/>
                    <constructors>
                        <constructor id="constructor_CodeExpandingVisitor_7B02632B58D72537AF4A2D4773AEB64A9A6FEDB7">
                            <name>CodeExpandingVisitor(HashMap&lt;String&lt;uchar>, String&lt;uchar>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp; expandMap_)</name>
                            <syntax>public CodeExpandingVisitor(HashMap&lt;String&lt;uchar>, String&lt;uchar>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp; expandMap_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>expandMap_</name>
                                    <type ref="type.8457"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Visit_CodeExpandingVisitor_31CA125F875C6C0AE44C5C36D4B4DBF4DD4C7D73">
                            <name>Visit(Identifier&amp; id)</name>
                            <syntax>public override void Visit(Identifier&amp; id);</syntax>
                            <parameters>
                                <parameter>
                                    <name>id</name>
                                    <type ref="type.6632"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="7641">
                    <name>ConnectorPunctuationParser</name>
                    <groupName>ConnectorPunctuationParser</groupName>
                    <syntax> public class ConnectorPunctuationParser;</syntax>
                    <baseClass ref="7523"/>
                    <constructors>
                        <constructor id="default_constructor_ConnectorPunctuationParser_92CDCCF879661E7C9AC8CA00552E0B68D4DDB568">
                            <name>ConnectorPunctuationParser()</name>
                            <syntax>public nothrow ConnectorPunctuationParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_ConnectorPunctuationParser_9E7D4B727E6C7BA02AF9306902A112B6F82737AE">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_ConnectorPunctuationParser_A87100F43D4666FF6FE9C9D55A014594166AB5E1">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                    </functions>
                </class>
                <class id="7529">
                    <name>Context</name>
                    <groupName>Context</groupName>
                    <syntax>abstract public class Context;</syntax>
                </class>
                <class id="7532">
                    <name>ContextStack</name>
                    <groupName>ContextStack</groupName>
                    <syntax> public class ContextStack;</syntax>
                    <functions>
                        <function id="member_function_Pop_ContextStack_A8592E931AD3166BD2711561F973F7E01A188109">
                            <name>Pop()</name>
                            <syntax>public Context* Pop();</syntax>
                            <returnType ref="type.7530"/>
                        </function>
                        <function id="member_function_Push_ContextStack_09E06BBF728B27C25CCF361F6B31CA493884735C">
                            <name>Push(Context* context)</name>
                            <syntax>public void Push(Context* context);</syntax>
                            <parameters>
                                <parameter>
                                    <name>context</name>
                                    <type ref="type.7530"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="7692">
                    <name>ControlParser</name>
                    <groupName>ControlParser</groupName>
                    <syntax> public class ControlParser;</syntax>
                    <baseClass ref="7523"/>
                    <constructors>
                        <constructor id="default_constructor_ControlParser_CD9725EA4C41ED71637CA0543D8E6DA1C952081D">
                            <name>ControlParser()</name>
                            <syntax>public nothrow ControlParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_ControlParser_BD9D9BC86430B52700541858EE5E89E00C8B9306">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_ControlParser_ACAB8F35CC42F4A2527995787DED64BEBAE6693A">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                    </functions>
                </class>
                <class id="7668">
                    <name>CurrencySymbolParser</name>
                    <groupName>CurrencySymbolParser</groupName>
                    <syntax> public class CurrencySymbolParser;</syntax>
                    <baseClass ref="7523"/>
                    <constructors>
                        <constructor id="default_constructor_CurrencySymbolParser_E61BC5F966A0F530641F9289280486ADA40C74E7">
                            <name>CurrencySymbolParser()</name>
                            <syntax>public nothrow CurrencySymbolParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_CurrencySymbolParser_B056F13F8342ED7D9C5DA3B1FAF1DEFAE5EF721F">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_CurrencySymbolParser_42B7793F379962F658E21C7DDFD9F5E0C91D0E58">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                    </functions>
                </class>
                <class id="7644">
                    <name>DashPunctuationParser</name>
                    <groupName>DashPunctuationParser</groupName>
                    <syntax> public class DashPunctuationParser;</syntax>
                    <baseClass ref="7523"/>
                    <constructors>
                        <constructor id="default_constructor_DashPunctuationParser_AAA3E5A0133DED33BDCDA763679A1E945534F17B">
                            <name>DashPunctuationParser()</name>
                            <syntax>public nothrow DashPunctuationParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_DashPunctuationParser_C645EE90BFF207F81E5CD26A5D64B62671430BA8">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_DashPunctuationParser_B104B67BF66EC41456F7A601213AE8F222BFF2F9">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                    </functions>
                </class>
                <class id="7629">
                    <name>DecimalNumberParser</name>
                    <groupName>DecimalNumberParser</groupName>
                    <syntax> public class DecimalNumberParser;</syntax>
                    <baseClass ref="7523"/>
                    <constructors>
                        <constructor id="default_constructor_DecimalNumberParser_C72BED6E8A50963FDBA1A2E0A2A13CCC4917B699">
                            <name>DecimalNumberParser()</name>
                            <syntax>public nothrow DecimalNumberParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_DecimalNumberParser_92FDEB1DDDB71F7187E783AA7BFA9C636B35ABF2">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_DecimalNumberParser_51308EA651AC09F759D8451EE0D6FE9445834783">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                    </functions>
                </class>
                <class id="7441">
                    <name>DifferenceParser</name>
                    <groupName>DifferenceParser</groupName>
                    <syntax> public class DifferenceParser;</syntax>
                    <baseClass ref="7429"/>
                    <constructors>
                        <constructor id="constructor_DifferenceParser_1DFD3E09257C9DDBD667CB12360C242C456326E2">
                            <name>DifferenceParser(Parser* left_, Parser* right_)</name>
                            <syntax>public DifferenceParser(Parser* left_, Parser* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.7524"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.7524"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_DifferenceParser_F10236987FAD121B0690E625C6DF780FF6CFE713">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_DifferenceParser_C32CB8765D488370B312B0EC926629B566280568">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                    </functions>
                </class>
                <class id="7608">
                    <name>DigitParser</name>
                    <groupName>DigitParser</groupName>
                    <syntax> public class DigitParser;</syntax>
                    <baseClass ref="7523"/>
                    <constructors>
                        <constructor id="default_constructor_DigitParser_EA503B52E1EDA25F6EF264067CC021B351AE3E3C">
                            <name>DigitParser()</name>
                            <syntax>public nothrow DigitParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_DigitParser_214CB8F0169AA9354DA2DBA92399317B464D10E9">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_DigitParser_7ABCADF29E6B5DB51367986360E7716033F85E78">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                    </functions>
                </class>
                <class id="7581">
                    <name>EmptyParser</name>
                    <groupName>EmptyParser</groupName>
                    <syntax> public class EmptyParser;</syntax>
                    <baseClass ref="7523"/>
                    <constructors>
                        <constructor id="default_constructor_EmptyParser_81F988A3E2E936BA13D40BD6D7C43E380788CFA5">
                            <name>EmptyParser()</name>
                            <syntax>public nothrow EmptyParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_EmptyParser_12A28CE7475C3BEDF2A41E2FDC5E99611E683C61">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_EmptyParser_31B4FF19965E3EAABCEDB1BE65F923DF7634E426">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                    </functions>
                </class>
                <class id="7623">
                    <name>EnclosingMarkParser</name>
                    <groupName>EnclosingMarkParser</groupName>
                    <syntax> public class EnclosingMarkParser;</syntax>
                    <baseClass ref="7523"/>
                    <constructors>
                        <constructor id="default_constructor_EnclosingMarkParser_9A9266D6D1C30AFA747A5023C526EF70F8186DDB">
                            <name>EnclosingMarkParser()</name>
                            <syntax>public nothrow EnclosingMarkParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_EnclosingMarkParser_E2642645008E791A75B10EA311078199C80A49F7">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_EnclosingMarkParser_D98C50BAEF1C47F59B42EC3C8D8A4611BF6369B3">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                    </functions>
                </class>
                <class id="7444">
                    <name>ExclusiveOrParser</name>
                    <groupName>ExclusiveOrParser</groupName>
                    <syntax> public class ExclusiveOrParser;</syntax>
                    <baseClass ref="7429"/>
                    <constructors>
                        <constructor id="constructor_ExclusiveOrParser_6166BE80DC6617A2469D1BE65632A509C87AC287">
                            <name>ExclusiveOrParser(Parser* left_, Parser* right_)</name>
                            <syntax>public ExclusiveOrParser(Parser* left_, Parser* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.7524"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.7524"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_ExclusiveOrParser_1AF6C49074F04E613D8217A49EE4D67593507B9E">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_ExclusiveOrParser_A29F715F9E5CA8942A102DCC7BA18AF821C5742F">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                    </functions>
                </class>
                <class id="7495">
                    <name>ExpandCodeVisitor</name>
                    <groupName>ExpandCodeVisitor</groupName>
                    <syntax> public class ExpandCodeVisitor;</syntax>
                    <baseClass ref="7920"/>
                    <functions>
                        <function id="member_function_BeginVisit_ExpandCodeVisitor_B2936B7CCC0F6A5943DCEF3EA51FEC9248E2176B">
                            <name>BeginVisit(Grammar&amp; grammar)</name>
                            <syntax>public override void BeginVisit(Grammar&amp; grammar);</syntax>
                            <parameters>
                                <parameter>
                                    <name>grammar</name>
                                    <type ref="type.7470"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="7456">
                    <name>ExpectationFailure</name>
                    <groupName>ExpectationFailure</groupName>
                    <syntax> public class ExpectationFailure;</syntax>
                    <baseClass ref="485"/>
                    <constructors>
                        <constructor id="constructor_ExpectationFailure_9633CC6FEA0F34048F1FE3E7CEE0A22A2316F226">
                            <name>ExpectationFailure(const String&lt;uchar>&amp; info_, const String&lt;char>&amp; fileName_, const Span&amp; span_, const uchar* start_, const uchar* end_)</name>
                            <syntax>public ExpectationFailure(const String&lt;uchar>&amp; info_, const String&lt;char>&amp; fileName_, const Span&amp; span_, const uchar* start_, const uchar* end_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>info_</name>
                                    <type ref="type.1133"/>
                                </parameter>
                                <parameter>
                                    <name>fileName_</name>
                                    <type ref="type.1045"/>
                                </parameter>
                                <parameter>
                                    <name>span_</name>
                                    <type ref="type.7766"/>
                                </parameter>
                                <parameter>
                                    <name>start_</name>
                                    <type ref="type.1135"/>
                                </parameter>
                                <parameter>
                                    <name>end_</name>
                                    <type ref="type.1135"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_End_ExpectationFailure_ECCA98A4EACB968A8161C6AC20648D8437084327">
                            <name>End() const</name>
                            <syntax>public nothrow inline const uchar* End() const;</syntax>
                            <returnType ref="type.1135"/>
                        </function>
                        <function id="member_function_FileName_ExpectationFailure_F50129B2BF802BE86665921B1EEA5A856AD47EF1">
                            <name>FileName() const</name>
                            <syntax>public nothrow inline const String&lt;char>&amp; FileName() const;</syntax>
                            <returnType ref="type.1045"/>
                        </function>
                        <function id="member_function_GetSpan_ExpectationFailure_E795D9FBB597C28838CE5C7E889411A216B87460">
                            <name>GetSpan() const</name>
                            <syntax>public nothrow inline const Span&amp; GetSpan() const;</syntax>
                            <returnType ref="type.7766"/>
                        </function>
                        <function id="member_function_Info_ExpectationFailure_4D009D41D5B3C959082179B0DF23A10810A6F495">
                            <name>Info() const</name>
                            <syntax>public nothrow inline const String&lt;uchar>&amp; Info() const;</syntax>
                            <returnType ref="type.1133"/>
                        </function>
                        <function id="member_function_Start_ExpectationFailure_311AAA5072CE4BF3155F12D2A2BA133F570AA837">
                            <name>Start() const</name>
                            <syntax>public nothrow inline const uchar* Start() const;</syntax>
                            <returnType ref="type.1135"/>
                        </function>
                    </functions>
                </class>
                <class id="7423">
                    <name>ExpectationParser</name>
                    <groupName>ExpectationParser</groupName>
                    <syntax> public class ExpectationParser;</syntax>
                    <baseClass ref="7408"/>
                    <constructors>
                        <constructor id="constructor_ExpectationParser_D0EBD32232E9A51AC6C5AE54C1FD9AC8BB1F678A">
                            <name>ExpectationParser(Parser* child_)</name>
                            <syntax>public ExpectationParser(Parser* child_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>child_</name>
                                    <type ref="type.7524"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_ExpectationParser_206592DDC6A581E412D5288AFFF9B1DB46F74FE0">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_ExpectationParser_19D29558EFE0DFC2BF4C3093A4C6A10048C35975">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                    </functions>
                </class>
                <class id="7453">
                    <name>FileInfo</name>
                    <groupName>FileInfo</groupName>
                    <syntax> public class FileInfo;</syntax>
                    <functions>
                        <function id="member_function_Files_FileInfo_2F8120F1EAD26EAAD9A2493B0E719E9757B0EB30">
                            <name>Files()</name>
                            <syntax>public nothrow inline const List&lt;String&lt;char>>&amp; Files();</syntax>
                            <returnType ref="type.1067"/>
                        </function>
                        <function id="member_function_GetFilePath_FileInfo_24B329D8FC76FA046CD8E68E9AE44BA1FBF1F2F0">
                            <name>GetFilePath(int index)</name>
                            <syntax>public nothrow String&lt;char> GetFilePath(int index);</syntax>
                            <parameters>
                                <parameter>
                                    <name>index</name>
                                    <type ref="type.6"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1040"/>
                        </function>
                        <function id="member_function_SetFiles_FileInfo_09D3C606893B23A71E41D1442301C3FCAFE2AEF9">
                            <name>SetFiles(const List&lt;String&lt;char>>&amp; files_)</name>
                            <syntax>public void SetFiles(const List&lt;String&lt;char>>&amp; files_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>files_</name>
                                    <type ref="type.1067"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                    <staticMemberFunctions>
                        <function id="member_function_Instance_FileInfo_572ED04C6FA68B9AC205E07BCDE5C8D918692291">
                            <name>Instance()</name>
                            <syntax>public static nothrow FileInfo&amp; Instance();</syntax>
                            <returnType ref="type.7455"/>
                        </function>
                    </staticMemberFunctions>
                </class>
                <class id="7656">
                    <name>FinalPunctuationParser</name>
                    <groupName>FinalPunctuationParser</groupName>
                    <syntax> public class FinalPunctuationParser;</syntax>
                    <baseClass ref="7523"/>
                    <constructors>
                        <constructor id="default_constructor_FinalPunctuationParser_483F3BE37A88788A26B6C81EC0D5B0A2600C221A">
                            <name>FinalPunctuationParser()</name>
                            <syntax>public nothrow FinalPunctuationParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_FinalPunctuationParser_C543D15AD45E7180E6CD96BB4501DD2223D7F379">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_FinalPunctuationParser_D198E2B40AF487032A6DB61E123F66B215E89593">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                    </functions>
                </class>
                <class id="7695">
                    <name>FormatParser</name>
                    <groupName>FormatParser</groupName>
                    <syntax> public class FormatParser;</syntax>
                    <baseClass ref="7523"/>
                    <constructors>
                        <constructor id="default_constructor_FormatParser_1252C1DBA36C03CA2F60DF3AF1A7DDF484C1A8EA">
                            <name>FormatParser()</name>
                            <syntax>public nothrow FormatParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_FormatParser_EDF2E600C8891193D7A33C267BD2963DF4D538F8">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_FormatParser_5954AE9FF053D4283501A476569AAB03AE60AB59">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                    </functions>
                </class>
                <class id="7468">
                    <name>Grammar</name>
                    <groupName>Grammar</groupName>
                    <syntax> public class Grammar;</syntax>
                    <baseClass ref="7551"/>
                    <constructors>
                        <constructor id="constructor_Grammar_8EBA43E8427201FDC85973DDA7BDAD8C2A8EA1EA">
                            <name>Grammar(const String&lt;uchar>&amp; name_, Scope* enclosingScope_)</name>
                            <syntax>public Grammar(const String&lt;uchar>&amp; name_, Scope* enclosingScope_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.1133"/>
                                </parameter>
                                <parameter>
                                    <name>enclosingScope_</name>
                                    <type ref="type.7756"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_Grammar_4C55F08DFDCFA535E0D2EA44B83AF275156DA205">
                            <name>Grammar(const String&lt;uchar>&amp; name_, Scope* enclosingScope_, ParsingDomain* parsingDomain_)</name>
                            <syntax>public Grammar(const String&lt;uchar>&amp; name_, Scope* enclosingScope_, ParsingDomain* parsingDomain_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.1133"/>
                                </parameter>
                                <parameter>
                                    <name>enclosingScope_</name>
                                    <type ref="type.7756"/>
                                </parameter>
                                <parameter>
                                    <name>parsingDomain_</name>
                                    <type ref="type.7543"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Grammar_68B2CD75DDE71F783D54E16CDA1CF570BE68F27F">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_AddGrammarReference_Grammar_9DFFC285B6144167120A0D10DE89D7B2EDE039FE">
                            <name>AddGrammarReference(Grammar* grammarReference)</name>
                            <syntax>public void AddGrammarReference(Grammar* grammarReference);</syntax>
                            <parameters>
                                <parameter>
                                    <name>grammarReference</name>
                                    <type ref="type.7469"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_AddRule_Grammar_A800846BADD8ED1E43F7B3F91007DB2439B73A60">
                            <name>AddRule(RuleParser* rule)</name>
                            <syntax>public void AddRule(RuleParser* rule);</syntax>
                            <parameters>
                                <parameter>
                                    <name>rule</name>
                                    <type ref="type.7738"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_AddRuleLink_Grammar_6BF1336CE96C2C51FF183176856CEFA1057BEDD0">
                            <name>AddRuleLink(RuleLink* ruleLink)</name>
                            <syntax>public void AddRuleLink(RuleLink* ruleLink);</syntax>
                            <parameters>
                                <parameter>
                                    <name>ruleLink</name>
                                    <type ref="type.7744"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_CreateRules_Grammar_8748755E0A5CA882B2EA1CF80B3147AF963378D4">
                            <name>CreateRules()</name>
                            <syntax>public virtual void CreateRules();</syntax>
                        </function>
                        <function id="member_function_Domain_Grammar_123618B811872C22955EA7B9FA50C5A79FF5382C">
                            <name>Domain() const</name>
                            <syntax>public nothrow inline ParsingDomain* Domain() const;</syntax>
                            <returnType ref="type.7543"/>
                        </function>
                        <function id="member_function_GetReferencedGrammars_Grammar_77AD4BF1441AA5BECA2AAFAC1137D0F70AB5B40D">
                            <name>GetReferencedGrammars()</name>
                            <syntax>public virtual void GetReferencedGrammars();</syntax>
                        </function>
                        <function id="member_function_GetRule_Grammar_9D013C89DD382D8F8C3D097AD5C925BCB4E80400">
                            <name>GetRule(const String&lt;uchar>&amp; ruleName) const</name>
                            <syntax>public RuleParser* GetRule(const String&lt;uchar>&amp; ruleName) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>ruleName</name>
                                    <type ref="type.1133"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7738"/>
                        </function>
                        <function id="member_function_Link_Grammar_5B33F358BC1834D793AF608D5B26DC352C277840">
                            <name>Link()</name>
                            <syntax>public void Link();</syntax>
                        </function>
                        <function id="member_function_Log_Grammar_9A4DE350A2A32EF13FD76450BDFD0F197560DDB4">
                            <name>Log() const</name>
                            <syntax>public nothrow inline StreamWriter* Log() const;</syntax>
                            <returnType ref="type.774"/>
                        </function>
                        <function id="member_function_MaxLogLineLength_Grammar_DD5B0EEAB2B54A6D9E9A8514EBC5225632C970BE">
                            <name>MaxLogLineLength() const</name>
                            <syntax>public nothrow inline int MaxLogLineLength() const;</syntax>
                            <returnType ref="type.6"/>
                        </function>
                        <function id="member_function_Ns_Grammar_FE054E55983200E730FBCEBBB919344C7ACB111B">
                            <name>Ns() const</name>
                            <syntax>public nothrow inline Namespace* Ns() const;</syntax>
                            <returnType ref="type.7505"/>
                        </function>
                        <function id="function_group_Parse_85EA3107130DF7FB6B328E90526ECD6ABEA6783D">
                            <name>Parse</name>
                            <overloads>
                                <overload id="member_function_Parse_Grammar_8350DA589903FB259AE570C9EB511850C920A199">
                                    <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack)</name>
                                    <syntax>public Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>scanner</name>
                                            <type ref="type.7751"/>
                                        </parameter>
                                        <parameter>
                                            <name>stack</name>
                                            <type ref="type.8412"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="7498"/>
                                </overload>
                                <overload id="member_function_Parse_Grammar_FA99D92E851100881B108C60B1CC4AC54F5ECD90">
                                    <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                                    <syntax>public Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>scanner</name>
                                            <type ref="type.7751"/>
                                        </parameter>
                                        <parameter>
                                            <name>stack</name>
                                            <type ref="type.8412"/>
                                        </parameter>
                                        <parameter>
                                            <name>parsingData</name>
                                            <type ref="type.7537"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="7498"/>
                                </overload>
                                <overload id="member_function_Parse_Grammar_3E71DABF390E49B6864B0F47E2825912C603771E">
                                    <name>Parse(const uchar* start, const uchar* end, int fileIndex, const String&lt;char>&amp; fileName)</name>
                                    <syntax>public void Parse(const uchar* start, const uchar* end, int fileIndex, const String&lt;char>&amp; fileName);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>start</name>
                                            <type ref="type.1135"/>
                                        </parameter>
                                        <parameter>
                                            <name>end</name>
                                            <type ref="type.1135"/>
                                        </parameter>
                                        <parameter>
                                            <name>fileIndex</name>
                                            <type ref="type.6"/>
                                        </parameter>
                                        <parameter>
                                            <name>fileName</name>
                                            <type ref="type.1045"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Parse_Grammar_278B0D27EC352BC7494C921FF783ED35EFFA629A">
                                    <name>Parse(const uchar* start, const uchar* end, int fileIndex, const String&lt;char>&amp; fileName, ParsingData* parsingData)</name>
                                    <syntax>public void Parse(const uchar* start, const uchar* end, int fileIndex, const String&lt;char>&amp; fileName, ParsingData* parsingData);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>start</name>
                                            <type ref="type.1135"/>
                                        </parameter>
                                        <parameter>
                                            <name>end</name>
                                            <type ref="type.1135"/>
                                        </parameter>
                                        <parameter>
                                            <name>fileIndex</name>
                                            <type ref="type.6"/>
                                        </parameter>
                                        <parameter>
                                            <name>fileName</name>
                                            <type ref="type.1045"/>
                                        </parameter>
                                        <parameter>
                                            <name>parsingData</name>
                                            <type ref="type.7537"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_ReferencedGrammars_Grammar_8A2112C51F5D3604A3F7943F7DB7F27811EE1385">
                            <name>ReferencedGrammars() const</name>
                            <syntax>public nothrow inline const HashSet&lt;Grammar*, Hasher&lt;Grammar*>, EqualTo&lt;Grammar*>>&amp; ReferencedGrammars() const;</syntax>
                            <returnType ref="type.8652"/>
                        </function>
                        <function id="member_function_ResolveSkipRule_Grammar_64D85319893F1557EAB3DB7550B8F01F5151C5D5">
                            <name>ResolveSkipRule()</name>
                            <syntax>public void ResolveSkipRule();</syntax>
                        </function>
                        <function id="member_function_ResolveStartRule_Grammar_9F33F60BCC2A2D98602146285F1C8BCB4FC7A425">
                            <name>ResolveStartRule()</name>
                            <syntax>public void ResolveStartRule();</syntax>
                        </function>
                        <function id="member_function_RuleLinks_Grammar_D37DED3AE3E08C709307FC1AF89EEE0FA66A3046">
                            <name>RuleLinks() const</name>
                            <syntax>public nothrow inline const List&lt;RuleLink*>&amp; RuleLinks() const;</syntax>
                            <returnType ref="type.8604"/>
                        </function>
                        <function id="member_function_Rules_Grammar_F3211C7531D1327C0C36F3C9F0CD09D15FBFE657">
                            <name>Rules() const</name>
                            <syntax>public nothrow inline const List&lt;RuleParser*>&amp; Rules() const;</syntax>
                            <returnType ref="type.8578"/>
                        </function>
                        <function id="member_function_SetLog_Grammar_A4680F05E314BAC8760F23D8B03EC745F1300387">
                            <name>SetLog(StreamWriter* log_)</name>
                            <syntax>public nothrow void SetLog(StreamWriter* log_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>log_</name>
                                    <type ref="type.774"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetMaxLogLineLength_Grammar_9546EFC7559743459AFE65D3ABA68A7032478963">
                            <name>SetMaxLogLineLength(int maxLogLineLength_)</name>
                            <syntax>public nothrow void SetMaxLogLineLength(int maxLogLineLength_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>maxLogLineLength_</name>
                                    <type ref="type.6"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetNs_Grammar_C6660E8C889BBB256C175AB4157CA6CD9D07DB15">
                            <name>SetNs(Namespace* ns_)</name>
                            <syntax>public nothrow void SetNs(Namespace* ns_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>ns_</name>
                                    <type ref="type.7505"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetSkipRule_Grammar_8BFEDFD7FB29486DDE5DFA6E79098B3600863253">
                            <name>SetSkipRule(RuleParser* skipRule_)</name>
                            <syntax>public nothrow void SetSkipRule(RuleParser* skipRule_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>skipRule_</name>
                                    <type ref="type.7738"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetSkipRuleName_Grammar_0C073B232967B2C34A36DEA42C079D8E4C521060">
                            <name>SetSkipRuleName(const String&lt;uchar>&amp; skipRuleName_)</name>
                            <syntax>public nothrow void SetSkipRuleName(const String&lt;uchar>&amp; skipRuleName_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>skipRuleName_</name>
                                    <type ref="type.1133"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetStartRule_Grammar_4F401B9F35C931E159E19C95110A1A6C15929E5E">
                            <name>SetStartRule(RuleParser* startRule_)</name>
                            <syntax>public nothrow void SetStartRule(RuleParser* startRule_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>startRule_</name>
                                    <type ref="type.7738"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetStartRuleName_Grammar_049B390570F219BFCEFEBCF875E97F7B33234B9D">
                            <name>SetStartRuleName(const String&lt;uchar>&amp; startRuleName_)</name>
                            <syntax>public nothrow void SetStartRuleName(const String&lt;uchar>&amp; startRuleName_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>startRuleName_</name>
                                    <type ref="type.1133"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SkipRule_Grammar_42CCA06DE0FB094313C023D1F3B83B7400E7AB93">
                            <name>SkipRule() const</name>
                            <syntax>public nothrow inline RuleParser* SkipRule() const;</syntax>
                            <returnType ref="type.7738"/>
                        </function>
                        <function id="member_function_SkipRuleName_Grammar_53931099C6827C376FC2BA998C04E0E4DE9FDE68">
                            <name>SkipRuleName() const</name>
                            <syntax>public nothrow inline const String&lt;uchar>&amp; SkipRuleName() const;</syntax>
                            <returnType ref="type.1133"/>
                        </function>
                        <function id="member_function_StartRule_Grammar_1BBB29B06A432B886D6C2533D84FB7ADE3566A5B">
                            <name>StartRule() const</name>
                            <syntax>public nothrow inline RuleParser* StartRule() const;</syntax>
                            <returnType ref="type.7738"/>
                        </function>
                        <function id="member_function_StartRuleName_Grammar_7A79CFCC56C4CA325EE3128950D0E4598197EAFB">
                            <name>StartRuleName() const</name>
                            <syntax>public nothrow inline const String&lt;uchar>&amp; StartRuleName() const;</syntax>
                            <returnType ref="type.1133"/>
                        </function>
                    </functions>
                </class>
                <class id="7707">
                    <name>GraphicParser</name>
                    <groupName>GraphicParser</groupName>
                    <syntax> public class GraphicParser;</syntax>
                    <baseClass ref="7523"/>
                    <constructors>
                        <constructor id="default_constructor_GraphicParser_DD3549A19B2A4956551F0D33C59341CE37806088">
                            <name>GraphicParser()</name>
                            <syntax>public nothrow GraphicParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_GraphicParser_284519B3A75213689F23D4CA03D8EF09CC472FC0">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_GraphicParser_7C3AC3C85240B69140BDDAF4DCF6A32099F0E094">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                    </functions>
                </class>
                <class id="7611">
                    <name>HexDigitParser</name>
                    <groupName>HexDigitParser</groupName>
                    <syntax> public class HexDigitParser;</syntax>
                    <baseClass ref="7523"/>
                    <constructors>
                        <constructor id="default_constructor_HexDigitParser_AD50E4A8222E78CAE707A9992A1959562B5FFDD9">
                            <name>HexDigitParser()</name>
                            <syntax>public nothrow HexDigitParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_HexDigitParser_9524BF9E23B9DA4C54108377CE5EEBA0F0A3C88B">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_HexDigitParser_7AD10647A8B1508160CB94B88EEAD73C446241A1">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                    </functions>
                </class>
                <class id="7719">
                    <name>IdContParser</name>
                    <groupName>IdContParser</groupName>
                    <syntax> public class IdContParser;</syntax>
                    <baseClass ref="7523"/>
                    <constructors>
                        <constructor id="default_constructor_IdContParser_5D03E3972FE0AFA959C5F2674DAC80B1B5C90D3F">
                            <name>IdContParser()</name>
                            <syntax>public nothrow IdContParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_IdContParser_CB9726A3254FCC7EA657E5D848E21ACEE20621B0">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_IdContParser_120DDA54BCF20EBFA74E85F60BADC3D38558F8AC">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                    </functions>
                </class>
                <class id="7716">
                    <name>IdStartParser</name>
                    <groupName>IdStartParser</groupName>
                    <syntax> public class IdStartParser;</syntax>
                    <baseClass ref="7523"/>
                    <constructors>
                        <constructor id="default_constructor_IdStartParser_315A2E9A731D2A2F16A1A76487A0A4258A7A788E">
                            <name>IdStartParser()</name>
                            <syntax>public nothrow IdStartParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_IdStartParser_181CFE32D9657C6F32997A0105796AE171A1883A">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_IdStartParser_E662989B9A9D9406BDCE7C66019CC7C522993636">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                    </functions>
                </class>
                <class id="7474">
                    <name>IdentifierCharsRule</name>
                    <groupName>IdentifierCharsRule</groupName>
                    <syntax> public class IdentifierCharsRule;</syntax>
                    <functions>
                        <function id="member_function_GetRule_IdentifierCharsRule_7FFAEC86DE40CAA6887B62B7160E9D687E1E0FE8">
                            <name>GetRule() const</name>
                            <syntax>public nothrow inline RuleParser* GetRule() const;</syntax>
                            <returnType ref="type.7738"/>
                        </function>
                    </functions>
                    <staticMemberFunctions>
                        <function id="member_function_Instance_IdentifierCharsRule_C7CD65FE928F59493883F9A58CE78B6CEBDA25A6">
                            <name>Instance()</name>
                            <syntax>public static IdentifierCharsRule&amp; Instance();</syntax>
                            <returnType ref="type.7479"/>
                        </function>
                    </staticMemberFunctions>
                </class>
                <class id="7653">
                    <name>InitialPunctuationParser</name>
                    <groupName>InitialPunctuationParser</groupName>
                    <syntax> public class InitialPunctuationParser;</syntax>
                    <baseClass ref="7523"/>
                    <constructors>
                        <constructor id="default_constructor_InitialPunctuationParser_2BBAA6A3EF72B55B662A85E91CDB7D2A5CCEDAA7">
                            <name>InitialPunctuationParser()</name>
                            <syntax>public nothrow InitialPunctuationParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_InitialPunctuationParser_2DEE33067B95B6503261CFBB2DD42734B5E518A0">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_InitialPunctuationParser_098709F3FDC7135D5420CF452169E02849805750">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                    </functions>
                </class>
                <class id="7447">
                    <name>IntersectionParser</name>
                    <groupName>IntersectionParser</groupName>
                    <syntax> public class IntersectionParser;</syntax>
                    <baseClass ref="7429"/>
                    <constructors>
                        <constructor id="constructor_IntersectionParser_662841B9481FBC7B512B1D6BFA6EA6A27990DFB7">
                            <name>IntersectionParser(Parser* left_, Parser* right_)</name>
                            <syntax>public IntersectionParser(Parser* left_, Parser* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.7524"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.7524"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_IntersectionParser_D08AECDC93D05596ADCEF4DAE477ED1BCB9E9C1C">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_IntersectionParser_3F232BF9FA9086CCE67E9BC8049BD746384DF2AB">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                    </functions>
                </class>
                <class id="7486">
                    <name>KeywordListParser</name>
                    <groupName>KeywordListParser</groupName>
                    <syntax> public class KeywordListParser;</syntax>
                    <baseClass ref="7523"/>
                    <constructors>
                        <constructor id="constructor_KeywordListParser_7BF362D7EB128BAB1124E2CC11789C56D1ED82B1">
                            <name>KeywordListParser(const String&lt;uchar>&amp; selectorRuleName_, const List&lt;String&lt;uchar>>&amp; keywords_)</name>
                            <syntax>public KeywordListParser(const String&lt;uchar>&amp; selectorRuleName_, const List&lt;String&lt;uchar>>&amp; keywords_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>selectorRuleName_</name>
                                    <type ref="type.1133"/>
                                </parameter>
                                <parameter>
                                    <name>keywords_</name>
                                    <type ref="type.1157"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_KeywordListParser_855AF007A66F3250D11B2E5DF54D8E6CC4ABE4D3">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_KeywordListName_KeywordListParser_3C895BAADA3D0BE4E06483F9F5AEDCAAC30F72B9">
                            <name>KeywordListName() const</name>
                            <syntax>public nothrow inline const String&lt;uchar>&amp; KeywordListName() const;</syntax>
                            <returnType ref="type.1133"/>
                        </function>
                        <function id="member_function_Keywords_KeywordListParser_26F2DFCFDF1478F3F2DB43F3A969CFEDBCA57321">
                            <name>Keywords() const</name>
                            <syntax>public nothrow inline const HashSet&lt;String&lt;uchar>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp; Keywords() const;</syntax>
                            <returnType ref="type.8740"/>
                        </function>
                        <function id="member_function_Parse_KeywordListParser_6D30E42BC7DA78305B72FBFDE10BB259274025B6">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                        <function id="member_function_SelectorRule_KeywordListParser_3CB42975E3C04C2F0FAADD17A1D9E11DE352744C">
                            <name>SelectorRule() const</name>
                            <syntax>public nothrow inline RuleParser* SelectorRule() const;</syntax>
                            <returnType ref="type.7738"/>
                        </function>
                        <function id="member_function_SelectorRuleName_KeywordListParser_8C03C750503D3FB99F2FD82EC0C95D5FB9621FD5">
                            <name>SelectorRuleName() const</name>
                            <syntax>public nothrow inline const String&lt;uchar>&amp; SelectorRuleName() const;</syntax>
                            <returnType ref="type.1133"/>
                        </function>
                        <function id="member_function_SetKeywordListName_KeywordListParser_6169355903830BA3D289797CC76E4A554BAEB7E0">
                            <name>SetKeywordListName(const String&lt;uchar>&amp; keywordListName_)</name>
                            <syntax>public nothrow void SetKeywordListName(const String&lt;uchar>&amp; keywordListName_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>keywordListName_</name>
                                    <type ref="type.1133"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetSelectorRule_KeywordListParser_D1177D8394BD27DFF4710B22C7F7C8DF8B47A9A6">
                            <name>SetSelectorRule(RuleParser* selectorRule_)</name>
                            <syntax>public nothrow void SetSelectorRule(RuleParser* selectorRule_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>selectorRule_</name>
                                    <type ref="type.7738"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="7480">
                    <name>KeywordParser</name>
                    <groupName>KeywordParser</groupName>
                    <syntax> public class KeywordParser;</syntax>
                    <baseClass ref="7523"/>
                    <constructors>
                        <constructor id="constructor_KeywordParser_B583A4D996C963CB4CB57C9471C60D9BE4D0EF24">
                            <name>KeywordParser(const String&lt;uchar>&amp; keyword_)</name>
                            <syntax>public KeywordParser(const String&lt;uchar>&amp; keyword_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>keyword_</name>
                                    <type ref="type.1133"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_KeywordParser_B719EEA3321BEF251F4D225D5D5A1CC54708348E">
                            <name>KeywordParser(const String&lt;uchar>&amp; keyword_, const String&lt;uchar>&amp; continuationRuleName_)</name>
                            <syntax>public KeywordParser(const String&lt;uchar>&amp; keyword_, const String&lt;uchar>&amp; continuationRuleName_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>keyword_</name>
                                    <type ref="type.1133"/>
                                </parameter>
                                <parameter>
                                    <name>continuationRuleName_</name>
                                    <type ref="type.1133"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_KeywordParser_B52DAEA8664099213409D2DEF7A75156C20C9FA1">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_ContinuationRule_KeywordParser_B3E226C414F66B6DE8D1A375C3C2CE0FDE872A71">
                            <name>ContinuationRule() const</name>
                            <syntax>public nothrow inline RuleParser* ContinuationRule() const;</syntax>
                            <returnType ref="type.7738"/>
                        </function>
                        <function id="member_function_ContinuationRuleName_KeywordParser_D214B31537182B8AFA816D4FF5B0EEE3EB1090F2">
                            <name>ContinuationRuleName() const</name>
                            <syntax>public nothrow inline const String&lt;uchar>&amp; ContinuationRuleName() const;</syntax>
                            <returnType ref="type.1133"/>
                        </function>
                        <function id="member_function_Keyword_KeywordParser_0EB1AFC07CC7EA87A67C7805600EC2F11EED374B">
                            <name>Keyword() const</name>
                            <syntax>public nothrow inline const String&lt;uchar>&amp; Keyword() const;</syntax>
                            <returnType ref="type.1133"/>
                        </function>
                        <function id="member_function_Parse_KeywordParser_E8D0078419A4CA18F43BFB941E41FB89AD986FA1">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                        <function id="member_function_SetContinuationRule_KeywordParser_28D92F9BA1611C985CD91DBD469E210B2C3CE91A">
                            <name>SetContinuationRule(RuleParser* continuationRule_)</name>
                            <syntax>public void SetContinuationRule(RuleParser* continuationRule_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>continuationRule_</name>
                                    <type ref="type.7738"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetContinuationRuleName_KeywordParser_ED2B74C8A0ABEFA776E9D3E92636CC6A03008466">
                            <name>SetContinuationRuleName(const String&lt;uchar>&amp; continuationRuleName_)</name>
                            <syntax>public nothrow void SetContinuationRuleName(const String&lt;uchar>&amp; continuationRuleName_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>continuationRuleName_</name>
                                    <type ref="type.1133"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="7420">
                    <name>KleeneStarParser</name>
                    <groupName>KleeneStarParser</groupName>
                    <syntax> public class KleeneStarParser;</syntax>
                    <baseClass ref="7408"/>
                    <constructors>
                        <constructor id="constructor_KleeneStarParser_CCBAE5A378E11334794328DA846828D424530F0B">
                            <name>KleeneStarParser(Parser* child_)</name>
                            <syntax>public KleeneStarParser(Parser* child_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>child_</name>
                                    <type ref="type.7524"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_KleeneStarParser_E8C005AB6FF6A0201D407A68AD818476B1F62CC7">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_KleeneStarParser_8191C0243C12AE762479A9F2C97049D4BDA6F420">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                    </functions>
                </class>
                <class id="7632">
                    <name>LetterNumberParser</name>
                    <groupName>LetterNumberParser</groupName>
                    <syntax> public class LetterNumberParser;</syntax>
                    <baseClass ref="7523"/>
                    <constructors>
                        <constructor id="default_constructor_LetterNumberParser_6369702CB9F67FC181AAF541FFD998A66B514398">
                            <name>LetterNumberParser()</name>
                            <syntax>public nothrow LetterNumberParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_LetterNumberParser_8AF41FED6A6F59460EA65531E265B824C3C05FB1">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_LetterNumberParser_95EF88148536FE36B6ABB21F148E08E629A56D7F">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                    </functions>
                </class>
                <class id="7587">
                    <name>LetterParser</name>
                    <groupName>LetterParser</groupName>
                    <syntax> public class LetterParser;</syntax>
                    <baseClass ref="7523"/>
                    <constructors>
                        <constructor id="default_constructor_LetterParser_A5BB9E3C0E44973F817534E3636B0110AF99665B">
                            <name>LetterParser()</name>
                            <syntax>public nothrow LetterParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_LetterParser_DC0204178E095592C5CBBAC4F6245C9EFAC04735">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_LetterParser_625CD55B009D94E406E8FA28F39835666F781BA7">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                    </functions>
                </class>
                <class id="7683">
                    <name>LineSeparatorParser</name>
                    <groupName>LineSeparatorParser</groupName>
                    <syntax> public class LineSeparatorParser;</syntax>
                    <baseClass ref="7523"/>
                    <constructors>
                        <constructor id="default_constructor_LineSeparatorParser_C617309D2AECFB87EBE809C4846944E8DBF78AFC">
                            <name>LineSeparatorParser()</name>
                            <syntax>public nothrow LineSeparatorParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_LineSeparatorParser_97B89EDDBE8C94EED0F16948039D3EAB8B810D0D">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_LineSeparatorParser_5A660C9A479AA8AECA6F622DE874CD82AE4DEC28">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                    </functions>
                </class>
                <class id="7492">
                    <name>LinkerVisitor</name>
                    <groupName>LinkerVisitor</groupName>
                    <syntax> public class LinkerVisitor;</syntax>
                    <baseClass ref="7920"/>
                    <constructors>
                        <constructor id="default_constructor_LinkerVisitor_CC57F310B9CD30C9C521A6976C58F17B39E0DE13">
                            <name>LinkerVisitor()</name>
                            <syntax>public LinkerVisitor();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="function_group_BeginVisit_8D20401578E4234962231F9E3C318771FFF95039">
                            <name>BeginVisit</name>
                            <overloads>
                                <overload id="member_function_BeginVisit_LinkerVisitor_9D22F25D35513BFE87A80F81AC8CCEFD972C7349">
                                    <name>BeginVisit(ActionParser&amp; parser)</name>
                                    <syntax>public override void BeginVisit(ActionParser&amp; parser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>parser</name>
                                            <type ref="type.7401"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_BeginVisit_LinkerVisitor_85D7E589B981E9F4365707D8A0FED8CEECD758F7">
                                    <name>BeginVisit(Grammar&amp; grammar)</name>
                                    <syntax>public override void BeginVisit(Grammar&amp; grammar);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>grammar</name>
                                            <type ref="type.7470"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_BeginVisit_LinkerVisitor_39AE5AEB5A6CF484C9AED73FF3154F557BFF87D4">
                                    <name>BeginVisit(RuleParser&amp; rule)</name>
                                    <syntax>public override void BeginVisit(RuleParser&amp; rule);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>rule</name>
                                            <type ref="type.7739"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_EndVisit_AFF6FCBD585400C20C90CF27E0918C9F8BA84D2B">
                            <name>EndVisit</name>
                            <overloads>
                                <overload id="member_function_EndVisit_LinkerVisitor_195D48A139F971E8BA2DE65E571E84D57A5EE5BD">
                                    <name>EndVisit(Grammar&amp; grammar)</name>
                                    <syntax>public override void EndVisit(Grammar&amp; grammar);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>grammar</name>
                                            <type ref="type.7470"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_EndVisit_LinkerVisitor_4C1A653F476301C1A913F94ACAE0165BA2B5C538">
                                    <name>EndVisit(RuleParser&amp; rule)</name>
                                    <syntax>public override void EndVisit(RuleParser&amp; rule);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>rule</name>
                                            <type ref="type.7739"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_Visit_5AF64560BB0E0AF021D1602400286D92E02ADC6C">
                            <name>Visit</name>
                            <overloads>
                                <overload id="member_function_Visit_LinkerVisitor_9B7B413031E6EC795630927A672D73BE664432A2">
                                    <name>Visit(KeywordListParser&amp; parser)</name>
                                    <syntax>public override void Visit(KeywordListParser&amp; parser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>parser</name>
                                            <type ref="type.7488"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_LinkerVisitor_7ECB0A4C8F469839E2B5188F2EFF2369E9600549">
                                    <name>Visit(KeywordParser&amp; parser)</name>
                                    <syntax>public override void Visit(KeywordParser&amp; parser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>parser</name>
                                            <type ref="type.7482"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_LinkerVisitor_62B42E9F4FE401160BC9BDC7C25C2C6F0EB91095">
                                    <name>Visit(NonterminalParser&amp; parser)</name>
                                    <syntax>public override void Visit(NonterminalParser&amp; parser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>parser</name>
                                            <type ref="type.7514"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_LinkerVisitor_CA606D4F4863097B434BCEF8DE81684BD124DD32">
                                    <name>Visit(RuleLink&amp; ruleLink)</name>
                                    <syntax>public override void Visit(RuleLink&amp; ruleLink);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>ruleLink</name>
                                            <type ref="type.7745"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                    </functions>
                </class>
                <class id="7450">
                    <name>ListParser</name>
                    <groupName>ListParser</groupName>
                    <syntax> public class ListParser;</syntax>
                    <baseClass ref="7408"/>
                    <constructors>
                        <constructor id="constructor_ListParser_98E8C3FAD1F01EE9D45690DDE269983F89B2CA56">
                            <name>ListParser(Parser* left_, Parser* right_)</name>
                            <syntax>public ListParser(Parser* left_, Parser* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.7524"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.7524"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_ListParser_BB6240DBAFB7BD57353C445304B97EDE9BDAD4A6">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_ListParser_9442A1808BC6F48EB8EA68B78CB5A2A4424F74BF">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                    </functions>
                </class>
                <class id="7593">
                    <name>LowerLetterParser</name>
                    <groupName>LowerLetterParser</groupName>
                    <syntax> public class LowerLetterParser;</syntax>
                    <baseClass ref="7523"/>
                    <constructors>
                        <constructor id="default_constructor_LowerLetterParser_FF75D7D20474F6926533A7E052882DBBE5B1CA97">
                            <name>LowerLetterParser()</name>
                            <syntax>public nothrow LowerLetterParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_LowerLetterParser_87213E25F16E292A312C09E4B183D56A009EA8BF">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_LowerLetterParser_486DA59CB7B8D11ED5486F557F63687A574CBC34">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                    </functions>
                </class>
                <class id="7614">
                    <name>MarkParser</name>
                    <groupName>MarkParser</groupName>
                    <syntax> public class MarkParser;</syntax>
                    <baseClass ref="7523"/>
                    <constructors>
                        <constructor id="default_constructor_MarkParser_6B5DA6CB7E8EEF06F6AA4C9F4FE689A862EF1065">
                            <name>MarkParser()</name>
                            <syntax>public nothrow MarkParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_MarkParser_F69D69ADCE1F39BAC0C570107BF83972CD4BD874">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_MarkParser_9E3355774E503FD9EB05333BB1BE20BA8167DB76">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                    </functions>
                </class>
                <class id="7498">
                    <name>Match</name>
                    <groupName>Match</groupName>
                    <syntax> public class Match;</syntax>
                    <constructors>
                        <constructor id="constructor_Match_AF294DBAD66D10150407293526B18ACA0E636547">
                            <name>Match(bool hit_, int length_)</name>
                            <syntax>public nothrow Match(bool hit_, int length_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>hit_</name>
                                    <type ref="type.1"/>
                                </parameter>
                                <parameter>
                                    <name>length_</name>
                                    <type ref="type.6"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Concatenate_Match_A833E85113443BEE117626E3863F40CFDE10C78E">
                            <name>Concatenate(const Match&amp; that)</name>
                            <syntax>public nothrow inline void Concatenate(const Match&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.7503"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Hit_Match_D33B7A33A2B08B928C33AF6C60D33CC585331E28">
                            <name>Hit() const</name>
                            <syntax>public nothrow inline bool Hit() const;</syntax>
                            <returnType ref="type.1"/>
                        </function>
                        <function id="member_function_Length_Match_300A87CFBFD9135EEDAAD57101443112AA7BADB7">
                            <name>Length() const</name>
                            <syntax>public nothrow inline int Length() const;</syntax>
                            <returnType ref="type.6"/>
                        </function>
                    </functions>
                    <staticMemberFunctions>
                        <function id="member_function_Empty_Match_0F9E9E64E92603387A7BCB0A884290A2131EBEB5">
                            <name>Empty()</name>
                            <syntax>public static nothrow inline Match Empty();</syntax>
                            <returnType ref="7498"/>
                        </function>
                        <function id="member_function_Nothing_Match_761CC719DADC48D20EC8CF22357604401A683BA7">
                            <name>Nothing()</name>
                            <syntax>public static nothrow inline Match Nothing();</syntax>
                            <returnType ref="7498"/>
                        </function>
                        <function id="member_function_One_Match_83E630F337ABFD86B4FCEECAE000E577C8066077">
                            <name>One()</name>
                            <syntax>public static nothrow inline Match One();</syntax>
                            <returnType ref="7498"/>
                        </function>
                    </staticMemberFunctions>
                </class>
                <class id="7665">
                    <name>MathSymbolParser</name>
                    <groupName>MathSymbolParser</groupName>
                    <syntax> public class MathSymbolParser;</syntax>
                    <baseClass ref="7523"/>
                    <constructors>
                        <constructor id="default_constructor_MathSymbolParser_1049B26D051849D8B8E02E429291CA8828E7B326">
                            <name>MathSymbolParser()</name>
                            <syntax>public nothrow MathSymbolParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_MathSymbolParser_3A680FAC6ED6AD267FD2BD7D6BCACAF21B7A1464">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_MathSymbolParser_44FF195B285F03A0622820174F78895EFC3A2074">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                    </functions>
                </class>
                <class id="7599">
                    <name>ModifierLetterParser</name>
                    <groupName>ModifierLetterParser</groupName>
                    <syntax> public class ModifierLetterParser;</syntax>
                    <baseClass ref="7523"/>
                    <constructors>
                        <constructor id="default_constructor_ModifierLetterParser_7DB0DEA1380671AE35DC365EC73A6604F28330A2">
                            <name>ModifierLetterParser()</name>
                            <syntax>public nothrow ModifierLetterParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_ModifierLetterParser_1B197972037711CFE130BEEDF5951A46FB6235A0">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_ModifierLetterParser_3BA9F7B0B3C7451817F969593D412BD1D674D779">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                    </functions>
                </class>
                <class id="7671">
                    <name>ModifierSymbolParser</name>
                    <groupName>ModifierSymbolParser</groupName>
                    <syntax> public class ModifierSymbolParser;</syntax>
                    <baseClass ref="7523"/>
                    <constructors>
                        <constructor id="default_constructor_ModifierSymbolParser_E2054FA33EEBFB91BC5E16935CA1B41BDB4DD2ED">
                            <name>ModifierSymbolParser()</name>
                            <syntax>public nothrow ModifierSymbolParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_ModifierSymbolParser_92366190E57B0C7B279F6D494C94B2782E850768">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_ModifierSymbolParser_6F8770BBE92B53F66A71559D98725947FA83CB04">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                    </functions>
                </class>
                <class id="7504">
                    <name>Namespace</name>
                    <groupName>Namespace</groupName>
                    <syntax> public class Namespace;</syntax>
                    <baseClass ref="7551"/>
                    <constructors>
                        <constructor id="constructor_Namespace_00F98FDD47D0A6A4E59E0724036573A565B965CE">
                            <name>Namespace(const String&lt;uchar>&amp; qualifiedName_, Scope* enclosingScope_)</name>
                            <syntax>public Namespace(const String&lt;uchar>&amp; qualifiedName_, Scope* enclosingScope_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>qualifiedName_</name>
                                    <type ref="type.1133"/>
                                </parameter>
                                <parameter>
                                    <name>enclosingScope_</name>
                                    <type ref="type.7756"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Namespace_D7954D7AD9730B8538925E64877EAAF9DA890DD1">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="7617">
                    <name>NonspacingMarkParser</name>
                    <groupName>NonspacingMarkParser</groupName>
                    <syntax> public class NonspacingMarkParser;</syntax>
                    <baseClass ref="7523"/>
                    <constructors>
                        <constructor id="default_constructor_NonspacingMarkParser_6CF11454A27170298D16705666D7F0EC487820E6">
                            <name>NonspacingMarkParser()</name>
                            <syntax>public nothrow NonspacingMarkParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_NonspacingMarkParser_12CE08391BFA431505D005E9B0336286145215D6">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_NonspacingMarkParser_62E593AC99FF16EF06B03630AC133CD4D5A00F30">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                    </functions>
                </class>
                <class id="7512">
                    <name>NonterminalParser</name>
                    <groupName>NonterminalParser</groupName>
                    <syntax> public class NonterminalParser;</syntax>
                    <baseClass ref="7523"/>
                    <constructors>
                        <constructor id="default_constructor_NonterminalParser_59BFC36E9DB2E4F6F9B99FA7C21310691263B007">
                            <name>NonterminalParser()</name>
                            <syntax>public NonterminalParser();</syntax>
                        </constructor>
                        <constructor id="constructor_NonterminalParser_C4FE28D663AC01C4C6C000E403E22C0D0CABB594">
                            <name>NonterminalParser(const String&lt;uchar>&amp; name_, const String&lt;uchar>&amp; ruleName_)</name>
                            <syntax>public NonterminalParser(const String&lt;uchar>&amp; name_, const String&lt;uchar>&amp; ruleName_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.1133"/>
                                </parameter>
                                <parameter>
                                    <name>ruleName_</name>
                                    <type ref="type.1133"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_NonterminalParser_743C3E2E8E5063B5A452FB0C469CB8FE8116F6B5">
                            <name>NonterminalParser(const String&lt;uchar>&amp; name_, const String&lt;uchar>&amp; ruleName_, int numberOfArguments_)</name>
                            <syntax>public NonterminalParser(const String&lt;uchar>&amp; name_, const String&lt;uchar>&amp; ruleName_, int numberOfArguments_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.1133"/>
                                </parameter>
                                <parameter>
                                    <name>ruleName_</name>
                                    <type ref="type.1133"/>
                                </parameter>
                                <parameter>
                                    <name>numberOfArguments_</name>
                                    <type ref="type.6"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_NonterminalParser_44C499742F2BCD1A3402E28E4A35ACF20910720E">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_AddArgument_NonterminalParser_68CC060F8E2E5C0A161012968E6E3DA56726FAE9">
                            <name>AddArgument(DomObject* argument)</name>
                            <syntax>public void AddArgument(DomObject* argument);</syntax>
                            <parameters>
                                <parameter>
                                    <name>argument</name>
                                    <type ref="type.6486"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Arguments_NonterminalParser_6F3C7923EF272041C41083E448CBC2B2D580C910">
                            <name>Arguments() const</name>
                            <syntax>public nothrow inline const List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>>&amp; Arguments() const;</syntax>
                            <returnType ref="type.7101"/>
                        </function>
                        <function id="member_function_IsSpecialized_NonterminalParser_20D0F15545FAEB4F5E13ED452B797C688568816E">
                            <name>IsSpecialized() const</name>
                            <syntax>public nothrow bool IsSpecialized() const;</syntax>
                            <returnType ref="type.1"/>
                        </function>
                        <function id="member_function_NumberOfArguments_NonterminalParser_0C5D6D1068AFA2A8A34B156EA8FA7AC16CB1F2DA">
                            <name>NumberOfArguments() const</name>
                            <syntax>public nothrow inline int NumberOfArguments() const;</syntax>
                            <returnType ref="type.6"/>
                        </function>
                        <function id="member_function_Parse_NonterminalParser_87E0FE76333665758B1C348A2B1C79F1894BF8A1">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                        <function id="member_function_Post_NonterminalParser_4C173C5FBFF26237949DA2FC574788965CA8EA40">
                            <name>Post() const</name>
                            <syntax>public nothrow inline PostCall Post() const;</syntax>
                            <returnType ref="7508"/>
                        </function>
                        <function id="member_function_PostCallMethodName_NonterminalParser_821FD0238C8E63D2B0C99B3D99C365359560CAAA">
                            <name>PostCallMethodName() const</name>
                            <syntax>public nothrow String&lt;uchar> PostCallMethodName() const;</syntax>
                            <returnType ref="type.1128"/>
                        </function>
                        <function id="member_function_Pre_NonterminalParser_44F809B4E1896000764D80741EB2B6AC33868040">
                            <name>Pre() const</name>
                            <syntax>public nothrow inline PreCall Pre() const;</syntax>
                            <returnType ref="7507"/>
                        </function>
                        <function id="member_function_PreCallMethodName_NonterminalParser_9DCCCE0A78B1928358D3BB77E2586D06112CEBEB">
                            <name>PreCallMethodName() const</name>
                            <syntax>public nothrow String&lt;uchar> PreCallMethodName() const;</syntax>
                            <returnType ref="type.1128"/>
                        </function>
                        <function id="member_function_Rule_NonterminalParser_3B204B5D92A0553D24A14B9D9401DCB71813C4F5">
                            <name>Rule() const</name>
                            <syntax>public nothrow inline RuleParser* Rule() const;</syntax>
                            <returnType ref="type.7738"/>
                        </function>
                        <function id="member_function_RuleName_NonterminalParser_5662B8147E239A6C87F0A1C127043F30ABBCF977">
                            <name>RuleName() const</name>
                            <syntax>public nothrow inline const String&lt;uchar>&amp; RuleName() const;</syntax>
                            <returnType ref="type.1133"/>
                        </function>
                        <function id="member_function_SetArguments_NonterminalParser_7DC9381F4107E52D07736C85E3D1E45B90E38535">
                            <name>SetArguments(List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>>&amp;&amp; arguments_)</name>
                            <syntax>public void SetArguments(List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>>&amp;&amp; arguments_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>arguments_</name>
                                    <type ref="type.7116"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetPost_NonterminalParser_6EECD856E2A4CBACE8EA8F94C147FF277EBEEAAF">
                            <name>SetPost(PostCall postCall_)</name>
                            <syntax>public nothrow void SetPost(PostCall postCall_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>postCall_</name>
                                    <type ref="7508"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetPre_NonterminalParser_40D47A9B3A7629E548EDDDA74D5E6B1953F596A7">
                            <name>SetPre(PreCall preCall_)</name>
                            <syntax>public nothrow void SetPre(PreCall preCall_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>preCall_</name>
                                    <type ref="7507"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetRule_NonterminalParser_19EBE7A2B01C5FB103A87121BAD6ED11E4D5100E">
                            <name>SetRule(RuleParser* rule_)</name>
                            <syntax>public nothrow void SetRule(RuleParser* rule_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>rule_</name>
                                    <type ref="type.7738"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetRuleName_NonterminalParser_147707328AE428814DA8F015A2A84DA8893852F2">
                            <name>SetRuleName(const String&lt;uchar>&amp; ruleName_)</name>
                            <syntax>public nothrow void SetRuleName(const String&lt;uchar>&amp; ruleName_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>ruleName_</name>
                                    <type ref="type.1133"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_ValueFieldName_NonterminalParser_B5CD16345C7AE0C4174FE734DA1F74D94F46ECF2">
                            <name>ValueFieldName() const</name>
                            <syntax>public nothrow String&lt;uchar> ValueFieldName() const;</syntax>
                            <returnType ref="type.1128"/>
                        </function>
                        <function id="member_function_VariableName_NonterminalParser_9FAA72A8D732B4334D8FF575A4595AD32A0CD32A">
                            <name>VariableName() const</name>
                            <syntax>public String&lt;uchar> VariableName() const;</syntax>
                            <returnType ref="type.1128"/>
                        </function>
                    </functions>
                </class>
                <class id="7626">
                    <name>NumberParser</name>
                    <groupName>NumberParser</groupName>
                    <syntax> public class NumberParser;</syntax>
                    <baseClass ref="7523"/>
                    <constructors>
                        <constructor id="default_constructor_NumberParser_5BF96AFC11F1D9F1028B0C16DFFB07D5FA83B796">
                            <name>NumberParser()</name>
                            <syntax>public nothrow NumberParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_NumberParser_1D6B460AF810AA23862A303DCB1A8DDE79BAEA21">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_NumberParser_EB277875F8F54852EEF102F43211111E65C06581">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                    </functions>
                </class>
                <class id="7518">
                    <name>Object</name>
                    <groupName>Object</groupName>
                    <syntax>abstract public class Object;</syntax>
                </class>
                <class id="7647">
                    <name>OpenPunctuationParser</name>
                    <groupName>OpenPunctuationParser</groupName>
                    <syntax> public class OpenPunctuationParser;</syntax>
                    <baseClass ref="7523"/>
                    <constructors>
                        <constructor id="default_constructor_OpenPunctuationParser_89AEB30F90E4D05EB5524785D3958FD3D7B1C750">
                            <name>OpenPunctuationParser()</name>
                            <syntax>public nothrow OpenPunctuationParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_OpenPunctuationParser_D1E0529BBAD6C2AE00219D6215A58E05C3A1AB81">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_OpenPunctuationParser_3CE894D2B796B214DBA48FC31E8D5ADBB558FB5B">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                    </functions>
                </class>
                <class id="7414">
                    <name>OptionalParser</name>
                    <groupName>OptionalParser</groupName>
                    <syntax> public class OptionalParser;</syntax>
                    <baseClass ref="7408"/>
                    <constructors>
                        <constructor id="constructor_OptionalParser_3FDE69F3032C6B6D481ED66EFCC7A6D94F3C931F">
                            <name>OptionalParser(Parser* child_)</name>
                            <syntax>public OptionalParser(Parser* child_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>child_</name>
                                    <type ref="type.7524"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_OptionalParser_5E699D4349BE6E9AADFAB9740B04427E4CDF9A45">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_OptionalParser_7D27B1A67E3D3E7270BF4608DDDAB3A4A33E8E79">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                    </functions>
                </class>
                <class id="7602">
                    <name>OtherLetterParser</name>
                    <groupName>OtherLetterParser</groupName>
                    <syntax> public class OtherLetterParser;</syntax>
                    <baseClass ref="7523"/>
                    <constructors>
                        <constructor id="default_constructor_OtherLetterParser_D59745591C4A964E6D9BBE882C7F6BF60FFDF02C">
                            <name>OtherLetterParser()</name>
                            <syntax>public nothrow OtherLetterParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_OtherLetterParser_AD7FB7944ED823DCAEB4F4BD01999914253CA0D3">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_OtherLetterParser_3664A45409857248191CDEFEF6A205EF0DF4141D">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                    </functions>
                </class>
                <class id="7635">
                    <name>OtherNumberParser</name>
                    <groupName>OtherNumberParser</groupName>
                    <syntax> public class OtherNumberParser;</syntax>
                    <baseClass ref="7523"/>
                    <constructors>
                        <constructor id="default_constructor_OtherNumberParser_977B23C3E69858D9F9A7A2F4D10982B711F08EC9">
                            <name>OtherNumberParser()</name>
                            <syntax>public nothrow OtherNumberParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_OtherNumberParser_2242159698A1659FD7D1E12170EE8F3D134D29CD">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_OtherNumberParser_EB53D323609A7D3F65EF4BB301123F105ABDC2FA">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                    </functions>
                </class>
                <class id="7689">
                    <name>OtherParser</name>
                    <groupName>OtherParser</groupName>
                    <syntax> public class OtherParser;</syntax>
                    <baseClass ref="7523"/>
                    <constructors>
                        <constructor id="default_constructor_OtherParser_D05213DFE7D339E08D8F86ECD839B7DC849FBD6A">
                            <name>OtherParser()</name>
                            <syntax>public nothrow OtherParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_OtherParser_CF8BD0B97869A2699752386CC3E344964A0A82B0">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_OtherParser_1E2105BDC5A74FF8FCEE078E6324B71E205F0BA0">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                    </functions>
                </class>
                <class id="7659">
                    <name>OtherPunctuationParser</name>
                    <groupName>OtherPunctuationParser</groupName>
                    <syntax> public class OtherPunctuationParser;</syntax>
                    <baseClass ref="7523"/>
                    <constructors>
                        <constructor id="default_constructor_OtherPunctuationParser_E65D47BA300D9398A8A80F7E70EE0D7B3B29C26B">
                            <name>OtherPunctuationParser()</name>
                            <syntax>public nothrow OtherPunctuationParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_OtherPunctuationParser_9C816AB2CA4BB3E41BFABF797006A16D8E45CBCE">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_OtherPunctuationParser_8F87285F38C44DB52F0029DB17BF5A0D9CE73FFD">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                    </functions>
                </class>
                <class id="7674">
                    <name>OtherSymbolParser</name>
                    <groupName>OtherSymbolParser</groupName>
                    <syntax> public class OtherSymbolParser;</syntax>
                    <baseClass ref="7523"/>
                    <constructors>
                        <constructor id="default_constructor_OtherSymbolParser_887A85E44C5DFB2758BED8D556B7F529C88B5607">
                            <name>OtherSymbolParser()</name>
                            <syntax>public nothrow OtherSymbolParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_OtherSymbolParser_72504F4420F19A54E72E28E4558C28AFD01660AB">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_OtherSymbolParser_FF8D7672E55142B892997218EAE70F652D8085FE">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                    </functions>
                </class>
                <class id="7686">
                    <name>ParagraphSeparatorParser</name>
                    <groupName>ParagraphSeparatorParser</groupName>
                    <syntax> public class ParagraphSeparatorParser;</syntax>
                    <baseClass ref="7523"/>
                    <constructors>
                        <constructor id="default_constructor_ParagraphSeparatorParser_DF53B3EC887327FC09CC4214D0182F1C94C71F96">
                            <name>ParagraphSeparatorParser()</name>
                            <syntax>public nothrow ParagraphSeparatorParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_ParagraphSeparatorParser_9BC49050D5A723BD44338051911DD34D5BEC630D">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_ParagraphSeparatorParser_FF6BDC13FE43C067FB89A3A0B758C98C6E8E5E05">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                    </functions>
                </class>
                <class id="7523">
                    <name>Parser</name>
                    <groupName>Parser</groupName>
                    <syntax>abstract public class Parser;</syntax>
                    <baseClass ref="7551"/>
                    <constructors>
                        <constructor id="constructor_Parser_4B5325C3294C2B31043924597A8A97E5C3BDDFF0">
                            <name>Parser(const String&lt;uchar>&amp; name_, const String&lt;uchar>&amp; info_)</name>
                            <syntax>public nothrow Parser(const String&lt;uchar>&amp; name_, const String&lt;uchar>&amp; info_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.1133"/>
                                </parameter>
                                <parameter>
                                    <name>info_</name>
                                    <type ref="type.1133"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Info_Parser_E9A4C395CAD1B8C1D62896AF16D31F82CBAA75FB">
                            <name>Info() const</name>
                            <syntax>public nothrow inline const String&lt;uchar>&amp; Info() const;</syntax>
                            <returnType ref="type.1133"/>
                        </function>
                        <function id="member_function_Parse_Parser_6CAC0A35D7ECE86AF37742BBFF8A982CE23573CD">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public abstract Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                    </functions>
                </class>
                <class id="7536">
                    <name>ParsingData</name>
                    <groupName>ParsingData</groupName>
                    <syntax> public class ParsingData;</syntax>
                    <constructors>
                        <constructor id="constructor_ParsingData_FE08F8E727AAD859A3169B461074210F706718B8">
                            <name>ParsingData(int numRules)</name>
                            <syntax>public ParsingData(int numRules);</syntax>
                            <parameters>
                                <parameter>
                                    <name>numRules</name>
                                    <type ref="type.6"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_GetContext_ParsingData_48360F99710A60D22416A140CFF3AAB7613541EC">
                            <name>GetContext(int ruleId) const</name>
                            <syntax>public Context* GetContext(int ruleId) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>ruleId</name>
                                    <type ref="type.6"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7530"/>
                        </function>
                        <function id="member_function_PopContext_ParsingData_4EC2B13C8D35CF301984634A63E094B7AC235CBC">
                            <name>PopContext(int ruleId)</name>
                            <syntax>public void PopContext(int ruleId);</syntax>
                            <parameters>
                                <parameter>
                                    <name>ruleId</name>
                                    <type ref="type.6"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_PushContext_ParsingData_A5163B15372DCB1A1B9939800B3016DE75CA348A">
                            <name>PushContext(int ruleId, Context* context)</name>
                            <syntax>public void PushContext(int ruleId, Context* context);</syntax>
                            <parameters>
                                <parameter>
                                    <name>ruleId</name>
                                    <type ref="type.6"/>
                                </parameter>
                                <parameter>
                                    <name>context</name>
                                    <type ref="type.7530"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="7542">
                    <name>ParsingDomain</name>
                    <groupName>ParsingDomain</groupName>
                    <syntax> public class ParsingDomain;</syntax>
                    <baseClass ref="7551"/>
                    <constructors>
                        <constructor id="default_constructor_ParsingDomain_9DC3276072DCBFF815002D180BF039BB3FC17458">
                            <name>ParsingDomain()</name>
                            <syntax>public ParsingDomain();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_ParsingDomain_0B533BBC0270A2EC91190FD568D377A9604239D7">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_AddGrammar_ParsingDomain_051F221D99B7A015FD180E16338C6C8D7795479D">
                            <name>AddGrammar(Grammar* grammar)</name>
                            <syntax>public void AddGrammar(Grammar* grammar);</syntax>
                            <parameters>
                                <parameter>
                                    <name>grammar</name>
                                    <type ref="type.7469"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_BeginNamespace_ParsingDomain_777BF39E6C7A8653DFB24AA46787096C1C2EDA6E">
                            <name>BeginNamespace(const String&lt;uchar>&amp; ns)</name>
                            <syntax>public void BeginNamespace(const String&lt;uchar>&amp; ns);</syntax>
                            <parameters>
                                <parameter>
                                    <name>ns</name>
                                    <type ref="type.1133"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_CurrentNamespace_ParsingDomain_D96F7D6F60F8A60B275A08848F38301AC54BE9D8">
                            <name>CurrentNamespace() const</name>
                            <syntax>public nothrow inline Namespace* CurrentNamespace() const;</syntax>
                            <returnType ref="type.7505"/>
                        </function>
                        <function id="member_function_CurrentScope_ParsingDomain_7993EE98BD416DA37B483FF9A169BC43F34424DF">
                            <name>CurrentScope() const</name>
                            <syntax>public nothrow inline Scope* CurrentScope() const;</syntax>
                            <returnType ref="type.7756"/>
                        </function>
                        <function id="member_function_EndNamespace_ParsingDomain_9714A9BDFABB00290870679E0AED785DFEB8DF67">
                            <name>EndNamespace()</name>
                            <syntax>public void EndNamespace();</syntax>
                        </function>
                        <function id="member_function_GetGrammar_ParsingDomain_E192636BB57C68601C38DD8F5C9680F25F469BAE">
                            <name>GetGrammar(const String&lt;uchar>&amp; grammarName) const</name>
                            <syntax>public Grammar* GetGrammar(const String&lt;uchar>&amp; grammarName) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>grammarName</name>
                                    <type ref="type.1133"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7469"/>
                        </function>
                        <function id="member_function_GetNamespaceScope_ParsingDomain_8E5E80330FE4A298A7A98332ECEFDF50DC6E4C72">
                            <name>GetNamespaceScope(const String&lt;uchar>&amp; fullNamespaceName) const</name>
                            <syntax>public Scope* GetNamespaceScope(const String&lt;uchar>&amp; fullNamespaceName) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>fullNamespaceName</name>
                                    <type ref="type.1133"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7756"/>
                        </function>
                        <function id="member_function_GetNextRuleId_ParsingDomain_C447AACB8B63F5199E90D11C7638E776FA741EA5">
                            <name>GetNextRuleId()</name>
                            <syntax>public nothrow inline int GetNextRuleId();</syntax>
                            <returnType ref="type.6"/>
                        </function>
                        <function id="member_function_GlobalNamespace_ParsingDomain_5955290F44B7D3C39B6070AF62D9BF3DAC5F246B">
                            <name>GlobalNamespace() const</name>
                            <syntax>public nothrow inline Namespace* GlobalNamespace() const;</syntax>
                            <returnType ref="type.7505"/>
                        </function>
                        <function id="member_function_NumRules_ParsingDomain_D8EEFC3004F2CA61E7D30598D9EB46EFCA3A3CF3">
                            <name>NumRules() const</name>
                            <syntax>public nothrow inline int NumRules() const;</syntax>
                            <returnType ref="type.6"/>
                        </function>
                    </functions>
                </class>
                <class id="7548">
                    <name>ParsingDomainRepository</name>
                    <groupName>ParsingDomainRepository</groupName>
                    <syntax> public class ParsingDomainRepository;</syntax>
                    <functions>
                        <function id="member_function_Register_ParsingDomainRepository_0F44F5F7DB114641F7521666038EF1AAE272D4EB">
                            <name>Register(ParsingDomain* parsingDomain)</name>
                            <syntax>public void Register(ParsingDomain* parsingDomain);</syntax>
                            <parameters>
                                <parameter>
                                    <name>parsingDomain</name>
                                    <type ref="type.7543"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                    <staticMemberFunctions>
                        <function id="member_function_Instance_ParsingDomainRepository_C6577EA80312A9F4E2CE0EBB929AA197E89941ED">
                            <name>Instance()</name>
                            <syntax>public static ParsingDomainRepository&amp; Instance();</syntax>
                            <returnType ref="type.7550"/>
                        </function>
                    </staticMemberFunctions>
                </class>
                <class id="7462">
                    <name>ParsingException</name>
                    <groupName>ParsingException</groupName>
                    <syntax> public class ParsingException;</syntax>
                    <baseClass ref="485"/>
                    <constructors>
                        <constructor id="constructor_ParsingException_B2735378A6F1A15B4B62D52A85E6DA5AC93503C2">
                            <name>ParsingException(const String&lt;char>&amp; message_, const String&lt;char>&amp; fileName_, const Span&amp; span_, const uchar* start_, const uchar* end_)</name>
                            <syntax>public ParsingException(const String&lt;char>&amp; message_, const String&lt;char>&amp; fileName_, const Span&amp; span_, const uchar* start_, const uchar* end_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>message_</name>
                                    <type ref="type.1045"/>
                                </parameter>
                                <parameter>
                                    <name>fileName_</name>
                                    <type ref="type.1045"/>
                                </parameter>
                                <parameter>
                                    <name>span_</name>
                                    <type ref="type.7766"/>
                                </parameter>
                                <parameter>
                                    <name>start_</name>
                                    <type ref="type.1135"/>
                                </parameter>
                                <parameter>
                                    <name>end_</name>
                                    <type ref="type.1135"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_End_ParsingException_F66A67C7C5109C56F43E0A3895B9F147F2B02C13">
                            <name>End() const</name>
                            <syntax>public nothrow inline const uchar* End() const;</syntax>
                            <returnType ref="type.1135"/>
                        </function>
                        <function id="member_function_FileName_ParsingException_89482DF32FDBE1B891F9206F027468454FD105B8">
                            <name>FileName() const</name>
                            <syntax>public nothrow inline const String&lt;char>&amp; FileName() const;</syntax>
                            <returnType ref="type.1045"/>
                        </function>
                        <function id="member_function_Message_ParsingException_3435DE6C00C641C72F74C51C9CBB6A9E89E7CD4D">
                            <name>Message() const</name>
                            <syntax>public nothrow inline const String&lt;char>&amp; Message() const;</syntax>
                            <returnType ref="type.1045"/>
                        </function>
                        <function id="member_function_SpanValue_ParsingException_C8044AA13A60E07C2AA8D4D977E2B9FA935B0B47">
                            <name>SpanValue() const</name>
                            <syntax>public nothrow inline const Span&amp; SpanValue() const;</syntax>
                            <returnType ref="type.7766"/>
                        </function>
                        <function id="member_function_Start_ParsingException_B8366297CE7935E6083596A0BF94E055BE26AD91">
                            <name>Start() const</name>
                            <syntax>public nothrow inline const uchar* Start() const;</syntax>
                            <returnType ref="type.1135"/>
                        </function>
                    </functions>
                </class>
                <class id="7551">
                    <name>ParsingObject</name>
                    <groupName>ParsingObject</groupName>
                    <syntax>abstract public class ParsingObject;</syntax>
                    <constructors>
                        <constructor id="constructor_ParsingObject_9269C859611302DF828DCA08C3057DF286EF2C2C">
                            <name>ParsingObject(const String&lt;uchar>&amp; name_)</name>
                            <syntax>public nothrow ParsingObject(const String&lt;uchar>&amp; name_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.1133"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_ParsingObject_C41C5D0BE3B068D838C9F227D0230245F421AAE5">
                            <name>ParsingObject(const String&lt;uchar>&amp; name_, Scope* enclosingScope_)</name>
                            <syntax>public nothrow ParsingObject(const String&lt;uchar>&amp; name_, Scope* enclosingScope_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.1133"/>
                                </parameter>
                                <parameter>
                                    <name>enclosingScope_</name>
                                    <type ref="type.7756"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_ParsingObject_7B9275C0656BAFDDAEA8914241907708E46EB027">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public abstract void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_AddToScope_ParsingObject_E5730DD32B10DFA288C085D9B541EAB8D3219AA1">
                            <name>AddToScope()</name>
                            <syntax>public virtual void AddToScope();</syntax>
                        </function>
                        <function id="member_function_ContainerScope_ParsingObject_37296722C598F7692BCE0F9D41E63B46561595A4">
                            <name>ContainerScope() const</name>
                            <syntax>public nothrow inline Scope* ContainerScope() const;</syntax>
                            <returnType ref="type.7756"/>
                        </function>
                        <function id="member_function_EnclosingScope_ParsingObject_3D89B1342B57E484AFA883A20B6DAED6C19C38F7">
                            <name>EnclosingScope() const</name>
                            <syntax>public nothrow inline Scope* EnclosingScope() const;</syntax>
                            <returnType ref="type.7756"/>
                        </function>
                        <function id="member_function_FullName_ParsingObject_DF98E1491247B72DDDF8C86FC689317626403733">
                            <name>FullName() const</name>
                            <syntax>public nothrow String&lt;uchar> FullName() const;</syntax>
                            <returnType ref="type.1128"/>
                        </function>
                        <function id="member_function_GetScope_ParsingObject_77988AC06BC333944EADCFBC7B98DCF4969CA067">
                            <name>GetScope() const</name>
                            <syntax>public nothrow inline Scope* GetScope() const;</syntax>
                            <returnType ref="type.7756"/>
                        </function>
                        <function id="member_function_GetSpan_ParsingObject_8A84F62A9840387CBDB4DF2F215EE5E8F9AB875B">
                            <name>GetSpan() const</name>
                            <syntax>public nothrow inline const Span&amp; GetSpan() const;</syntax>
                            <returnType ref="type.7766"/>
                        </function>
                        <function id="member_function_IsExternal_ParsingObject_C4C5BCDA2544495C63E375A3C08EA0F7602CD15B">
                            <name>IsExternal() const</name>
                            <syntax>public nothrow inline bool IsExternal() const;</syntax>
                            <returnType ref="type.1"/>
                        </function>
                        <function id="member_function_IsOwned_ParsingObject_854FE5D7C3E95FE55C00069178CC03FBAF42D022">
                            <name>IsOwned() const</name>
                            <syntax>public nothrow inline bool IsOwned() const;</syntax>
                            <returnType ref="type.1"/>
                        </function>
                        <function id="member_function_Name_ParsingObject_4B0E58B9F75AF26D67DB0DDEB97451F9FD0E80F6">
                            <name>Name() const</name>
                            <syntax>public nothrow inline const String&lt;uchar>&amp; Name() const;</syntax>
                            <returnType ref="type.1133"/>
                        </function>
                        <function id="member_function_Own_ParsingObject_BD6A4894FA12FAA84D203B85091147133B876314">
                            <name>Own(ParsingObject* object)</name>
                            <syntax>public void Own(ParsingObject* object);</syntax>
                            <parameters>
                                <parameter>
                                    <name>object</name>
                                    <type ref="type.7552"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Owner_ParsingObject_856F5FDDE08B947B5BBA3CBD7A485BC052A1F676">
                            <name>Owner() const</name>
                            <syntax>public nothrow inline int Owner() const;</syntax>
                            <returnType ref="type.6"/>
                        </function>
                        <function id="member_function_SetContainerScope_ParsingObject_2EA76B2436D460A13B2E160EAB7C98E8BFAF03D5">
                            <name>SetContainerScope(Scope* scope_)</name>
                            <syntax>public nothrow void SetContainerScope(Scope* scope_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scope_</name>
                                    <type ref="type.7756"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetEnclosingScope_ParsingObject_B5EE8709E516CFD5CFA7DD3C3CD45CA28110A592">
                            <name>SetEnclosingScope(Scope* enclosingScope_)</name>
                            <syntax>public nothrow void SetEnclosingScope(Scope* enclosingScope_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>enclosingScope_</name>
                                    <type ref="type.7756"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetName_ParsingObject_705BDDAC469CBA1882696A5043B4CC94DDBAD160">
                            <name>SetName(const String&lt;uchar>&amp; name_)</name>
                            <syntax>public nothrow void SetName(const String&lt;uchar>&amp; name_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.1133"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetOwned_ParsingObject_972016608B089C948A2ABA5CA61E3D4CB47A5D8B">
                            <name>SetOwned()</name>
                            <syntax>public nothrow inline void SetOwned();</syntax>
                        </function>
                        <function id="member_function_SetOwner_ParsingObject_AE2E61409097F1C4EBD4D88526CEC47CEB4580B3">
                            <name>SetOwner(int owner_)</name>
                            <syntax>public nothrow inline void SetOwner(int owner_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>owner_</name>
                                    <type ref="type.6"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetSpan_ParsingObject_9A2CE9CAE7169992DBE1277460D8CBEC9DF487CD">
                            <name>SetSpan(const Span&amp; span_)</name>
                            <syntax>public nothrow void SetSpan(const Span&amp; span_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>span_</name>
                                    <type ref="type.7766"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="7417">
                    <name>PositiveParser</name>
                    <groupName>PositiveParser</groupName>
                    <syntax> public class PositiveParser;</syntax>
                    <baseClass ref="7408"/>
                    <constructors>
                        <constructor id="constructor_PositiveParser_93FDAB33706C036D57ED63DA396D013CF7828E58">
                            <name>PositiveParser(Parser* child_)</name>
                            <syntax>public PositiveParser(Parser* child_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>child_</name>
                                    <type ref="type.7524"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_PositiveParser_53BF463F27037F649FA01D6F520535D632E64202">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_PositiveParser_99A200B82ACA90C8D020DEE9E47A0EF033745225">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                    </functions>
                </class>
                <class id="7701">
                    <name>PrivateUseParser</name>
                    <groupName>PrivateUseParser</groupName>
                    <syntax> public class PrivateUseParser;</syntax>
                    <baseClass ref="7523"/>
                    <constructors>
                        <constructor id="default_constructor_PrivateUseParser_5A315C017DD1940F98903E6AC54681AAB7983BA5">
                            <name>PrivateUseParser()</name>
                            <syntax>public nothrow PrivateUseParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_PrivateUseParser_404E119B40E81DD457FCE7B0A6397F64B0BD3519">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_PrivateUseParser_836A516651A8CFCDECE09624AA9B16D9DCC038D4">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                    </functions>
                </class>
                <class id="7638">
                    <name>PunctuationParser</name>
                    <groupName>PunctuationParser</groupName>
                    <syntax> public class PunctuationParser;</syntax>
                    <baseClass ref="7523"/>
                    <constructors>
                        <constructor id="default_constructor_PunctuationParser_5730F1DA3D8BAF577614F520059DFAC485F08171">
                            <name>PunctuationParser()</name>
                            <syntax>public nothrow PunctuationParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_PunctuationParser_18BF0C90AE13F853974665F8E87C65F5E680E2D0">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_PunctuationParser_A71E7CF32CBB0CF04726C65376EA0D8394177FB9">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                    </functions>
                </class>
                <class id="7725">
                    <name>RangeParser</name>
                    <groupName>RangeParser</groupName>
                    <syntax> public class RangeParser;</syntax>
                    <baseClass ref="7523"/>
                    <constructors>
                        <constructor id="constructor_RangeParser_5DAAC6FB5AE7643363FC875F313A52CF982CE7F3">
                            <name>RangeParser(uint rangeStart_, uint rangeEnd_)</name>
                            <syntax>public nothrow RangeParser(uint rangeStart_, uint rangeEnd_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>rangeStart_</name>
                                    <type ref="type.7"/>
                                </parameter>
                                <parameter>
                                    <name>rangeEnd_</name>
                                    <type ref="type.7"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_RangeParser_FACAF808193BCEF5309896989E7C8D733FC4DDF9">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_End_RangeParser_3DC51510126DBF9C5A2C00FAB151AF817575673F">
                            <name>End() const</name>
                            <syntax>public nothrow inline uint End() const;</syntax>
                            <returnType ref="type.7"/>
                        </function>
                        <function id="member_function_Parse_RangeParser_4282635DD4C4FA45BC814DE9921123B2AA5F70E5">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                        <function id="member_function_Start_RangeParser_DA0795523A6AB5500F6096BE12B5FA57CA6A1A9E">
                            <name>Start() const</name>
                            <syntax>public nothrow inline uint Start() const;</syntax>
                            <returnType ref="type.7"/>
                        </function>
                    </functions>
                </class>
                <class id="7535">
                    <name>RuleData</name>
                    <groupName>RuleData</groupName>
                    <syntax> public class RuleData;</syntax>
                    <memberVariables>
                        <memberVariable id="variable_context_F0B0957D6C70EA7FF6FBAEFC9EDF5DF0D543B0EE">
                            <name>context</name>
                            <syntax>public UniquePtr&lt;System.Text.Parsing.Context> context;</syntax>
                            <type ref="type.8827"/>
                        </memberVariable>
                        <memberVariable id="variable_contextStack_76F167D329710BE1B6DB4A7E01F891D4314EB529">
                            <name>contextStack</name>
                            <syntax>public ContextStack contextStack;</syntax>
                            <type ref="7532"/>
                        </memberVariable>
                    </memberVariables>
                </class>
                <class id="7743">
                    <name>RuleLink</name>
                    <groupName>RuleLink</groupName>
                    <syntax> public class RuleLink;</syntax>
                    <baseClass ref="7551"/>
                    <constructors>
                        <constructor id="constructor_RuleLink_3D00037980A1A0498510E7FB3E5C45F4912CEF99">
                            <name>RuleLink(Grammar* grammar_, const String&lt;uchar>&amp; linkedRuleName_)</name>
                            <syntax>public RuleLink(Grammar* grammar_, const String&lt;uchar>&amp; linkedRuleName_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>grammar_</name>
                                    <type ref="type.7469"/>
                                </parameter>
                                <parameter>
                                    <name>linkedRuleName_</name>
                                    <type ref="type.1133"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_RuleLink_5DE8CBA7BB401839C9B8CC48842E4CE631EC42A0">
                            <name>RuleLink(const String&lt;uchar>&amp; name_, Grammar* grammar_, const String&lt;uchar>&amp; linkedRuleName_)</name>
                            <syntax>public RuleLink(const String&lt;uchar>&amp; name_, Grammar* grammar_, const String&lt;uchar>&amp; linkedRuleName_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.1133"/>
                                </parameter>
                                <parameter>
                                    <name>grammar_</name>
                                    <type ref="type.7469"/>
                                </parameter>
                                <parameter>
                                    <name>linkedRuleName_</name>
                                    <type ref="type.1133"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_RuleLink_0B51A696219F621133C69AA6026EC29039405424">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_AddToScope_RuleLink_ED9AD2F388AC57F2981DDB10227B5CBEAEBF813B">
                            <name>AddToScope()</name>
                            <syntax>public override void AddToScope();</syntax>
                        </function>
                        <function id="member_function_IsAddedToGrammar_RuleLink_029CCB3D2287C43A7966E626E01C8AC38BC412A9">
                            <name>IsAddedToGrammar() const</name>
                            <syntax>public nothrow inline bool IsAddedToGrammar() const;</syntax>
                            <returnType ref="type.1"/>
                        </function>
                        <function id="member_function_LinkedRuleName_RuleLink_436EC4EDA3961051C69CCC2E8F690A3D31B08039">
                            <name>LinkedRuleName() const</name>
                            <syntax>public nothrow inline const String&lt;uchar>&amp; LinkedRuleName() const;</syntax>
                            <returnType ref="type.1133"/>
                        </function>
                        <function id="member_function_Rule_RuleLink_23AB9DFD45C62459C6D5436420EAFE84AF248B8B">
                            <name>Rule() const</name>
                            <syntax>public nothrow inline RuleParser* Rule() const;</syntax>
                            <returnType ref="type.7738"/>
                        </function>
                        <function id="member_function_SetAddedToGrammar_RuleLink_78C7E122605857D521851F409B2612A66436E3B1">
                            <name>SetAddedToGrammar()</name>
                            <syntax>public nothrow void SetAddedToGrammar();</syntax>
                        </function>
                        <function id="member_function_SetRule_RuleLink_381C1DAF52230A2DF723A53FA027AD7268039D34">
                            <name>SetRule(RuleParser* rule_)</name>
                            <syntax>public nothrow void SetRule(RuleParser* rule_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>rule_</name>
                                    <type ref="type.7738"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="7737">
                    <name>RuleParser</name>
                    <groupName>RuleParser</groupName>
                    <syntax> public class RuleParser;</syntax>
                    <baseClass ref="7523"/>
                    <constructors>
                        <constructor id="constructor_RuleParser_B48601DCD26E96C83DF4BEF8471ADB3A84EC6152">
                            <name>RuleParser(const String&lt;uchar>&amp; name_, Scope* enclosingScope_)</name>
                            <syntax>public RuleParser(const String&lt;uchar>&amp; name_, Scope* enclosingScope_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.1133"/>
                                </parameter>
                                <parameter>
                                    <name>enclosingScope_</name>
                                    <type ref="type.7756"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_RuleParser_48078905A48EB2B47A048B067193B5F8CB58863F">
                            <name>RuleParser(const String&lt;uchar>&amp; name_, Scope* enclosingScope_, int id_, Parser* definition_)</name>
                            <syntax>public RuleParser(const String&lt;uchar>&amp; name_, Scope* enclosingScope_, int id_, Parser* definition_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.1133"/>
                                </parameter>
                                <parameter>
                                    <name>enclosingScope_</name>
                                    <type ref="type.7756"/>
                                </parameter>
                                <parameter>
                                    <name>id_</name>
                                    <type ref="type.6"/>
                                </parameter>
                                <parameter>
                                    <name>definition_</name>
                                    <type ref="type.7524"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_RuleParser_C82B66C5947114D6A51ACA87B243D6FF039DA781">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Actions_RuleParser_9A6B1FCB0FBFB2A1BEB13A3CB7561AE1DE77D875">
                            <name>Actions() const</name>
                            <syntax>public nothrow inline const List&lt;ActionParser*>&amp; Actions() const;</syntax>
                            <returnType ref="type.9170"/>
                        </function>
                        <function id="member_function_AddAction_RuleParser_385DEF43917E98C3A4CE09F37E42195D13709F74">
                            <name>AddAction(ActionParser* action)</name>
                            <syntax>public void AddAction(ActionParser* action);</syntax>
                            <parameters>
                                <parameter>
                                    <name>action</name>
                                    <type ref="type.7400"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_AddInheritedAttribute_RuleParser_0948C580294009CCC6D2CB999EAC5B91C4F60823">
                            <name>AddInheritedAttribute(const AttrOrVar&amp; attr)</name>
                            <syntax>public void AddInheritedAttribute(const AttrOrVar&amp; attr);</syntax>
                            <parameters>
                                <parameter>
                                    <name>attr</name>
                                    <type ref="type.7736"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_AddLocalVariable_RuleParser_4407A8905B04D46FA20BA52A5ADFEBFF1A39EEFC">
                            <name>AddLocalVariable(const AttrOrVar&amp; var)</name>
                            <syntax>public void AddLocalVariable(const AttrOrVar&amp; var);</syntax>
                            <parameters>
                                <parameter>
                                    <name>var</name>
                                    <type ref="type.7736"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_AddNonterminal_RuleParser_D08E9E52DA970C9A88D38304DAA66C8B40515FCB">
                            <name>AddNonterminal(NonterminalParser* nonterminal)</name>
                            <syntax>public void AddNonterminal(NonterminalParser* nonterminal);</syntax>
                            <parameters>
                                <parameter>
                                    <name>nonterminal</name>
                                    <type ref="type.7513"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Definition_RuleParser_24E707D52A110940A129DD12AF5F4623DD250320">
                            <name>Definition() const</name>
                            <syntax>public nothrow inline Parser* Definition() const;</syntax>
                            <returnType ref="type.7524"/>
                        </function>
                        <function id="member_function_Enter_RuleParser_03B20179EA4192A430113D81D8801B2D50E58BB4">
                            <name>Enter(Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public virtual void Enter(Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_ExpandCode_RuleParser_AF8C052B065B859237990DEAF95D3414E8F7C71F">
                            <name>ExpandCode()</name>
                            <syntax>public void ExpandCode();</syntax>
                        </function>
                        <function id="member_function_GetAction_RuleParser_3751C385036F31196943E185CC6C809D7D5673B1">
                            <name>GetAction(const String&lt;uchar>&amp; actionName) const</name>
                            <syntax>public ActionParser* GetAction(const String&lt;uchar>&amp; actionName) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>actionName</name>
                                    <type ref="type.1133"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7400"/>
                        </function>
                        <function id="member_function_GetGrammar_RuleParser_4F3A7E5C457F826FCF34C918C8C192C8AD5D6B7A">
                            <name>GetGrammar() const</name>
                            <syntax>public nothrow inline Grammar* GetGrammar() const;</syntax>
                            <returnType ref="type.7469"/>
                        </function>
                        <function id="member_function_GetNonterminal_RuleParser_9FA99C5393688BDCAAE7EEAE9FBD939B86D50F34">
                            <name>GetNonterminal(const String&lt;uchar>&amp; nonterminalName) const</name>
                            <syntax>public NonterminalParser* GetNonterminal(const String&lt;uchar>&amp; nonterminalName) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>nonterminalName</name>
                                    <type ref="type.1133"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7513"/>
                        </function>
                        <function id="member_function_Id_RuleParser_6BAD1512899810067D4F1183EDA0B72F7DD69B90">
                            <name>Id() const</name>
                            <syntax>public nothrow inline int Id() const;</syntax>
                            <returnType ref="type.6"/>
                        </function>
                        <function id="member_function_InheritedAttributes_RuleParser_27440305BDD1DEC10F79E0FAC200174624E7B1B6">
                            <name>InheritedAttributes() const</name>
                            <syntax>public nothrow inline List&lt;System.Text.Parsing.AttrOrVar>&amp; InheritedAttributes() const;</syntax>
                            <returnType ref="type.9145"/>
                        </function>
                        <function id="member_function_IsSpecialized_RuleParser_CD4F7EADDC6580B9784F41CCCB394BCC35FD57E5">
                            <name>IsSpecialized() const</name>
                            <syntax>public nothrow inline bool IsSpecialized() const;</syntax>
                            <returnType ref="type.1"/>
                        </function>
                        <function id="member_function_Leave_RuleParser_9EFBB115C72511440D815637D5A7553F74763126">
                            <name>Leave(Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData, bool matched)</name>
                            <syntax>public virtual void Leave(Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData, bool matched);</syntax>
                            <parameters>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                                <parameter>
                                    <name>matched</name>
                                    <type ref="type.1"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Link_RuleParser_56D329D60DEDE1C16F8C8E5757B288915FDD84BB">
                            <name>Link()</name>
                            <syntax>public virtual void Link();</syntax>
                        </function>
                        <function id="member_function_LocalVariables_RuleParser_C6A0DD980C15E05B59F0993F3A117F544ACCCA7E">
                            <name>LocalVariables() const</name>
                            <syntax>public nothrow inline List&lt;System.Text.Parsing.AttrOrVar>&amp; LocalVariables() const;</syntax>
                            <returnType ref="type.9145"/>
                        </function>
                        <function id="member_function_Nonterminals_RuleParser_D90015F32F5E3AC9F045440F851E4BE70FC01AE5">
                            <name>Nonterminals() const</name>
                            <syntax>public nothrow inline const List&lt;NonterminalParser*>&amp; Nonterminals() const;</syntax>
                            <returnType ref="type.9196"/>
                        </function>
                        <function id="member_function_NumberOfParameters_RuleParser_0787E378B27DB958A3C2076B90C85C19853BDFC5">
                            <name>NumberOfParameters() const</name>
                            <syntax>public nothrow inline int NumberOfParameters() const;</syntax>
                            <returnType ref="type.6"/>
                        </function>
                        <function id="member_function_Parse_RuleParser_DAE927437B9B17E2EE355286BBBA8A9DD8C33863">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                        <function id="member_function_SetDefinition_RuleParser_673AB9D2092F6CD0C3D989D85CE70802937FDCB7">
                            <name>SetDefinition(Parser* definition_)</name>
                            <syntax>public void SetDefinition(Parser* definition_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>definition_</name>
                                    <type ref="type.7524"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetGrammar_RuleParser_79013863C93421CF4F6DE122DFC19AF3C80B3EA7">
                            <name>SetGrammar(Grammar* grammar_)</name>
                            <syntax>public nothrow void SetGrammar(Grammar* grammar_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>grammar_</name>
                                    <type ref="type.7469"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetValueTypeName_RuleParser_D8D1D7576ED0ED6506E09DDEB3478A172DC4E567">
                            <name>SetValueTypeName(const String&lt;uchar>&amp; valueTypeName_)</name>
                            <syntax>public nothrow void SetValueTypeName(const String&lt;uchar>&amp; valueTypeName_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>valueTypeName_</name>
                                    <type ref="type.1133"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SpecializedTypeName_RuleParser_8415BED13B7B77BD9EB46A13B097F44D43E738CA">
                            <name>SpecializedTypeName() const</name>
                            <syntax>public nothrow String&lt;uchar> SpecializedTypeName() const;</syntax>
                            <returnType ref="type.1128"/>
                        </function>
                        <function id="member_function_TakesOrReturnsValuesOrHasLocals_RuleParser_BD456C14E897C9065955C5822F39259A5430B7D1">
                            <name>TakesOrReturnsValuesOrHasLocals() const</name>
                            <syntax>public nothrow inline bool TakesOrReturnsValuesOrHasLocals() const;</syntax>
                            <returnType ref="type.1"/>
                        </function>
                        <function id="member_function_ValueTypeName_RuleParser_621AD5107A6E711F3DAE4669AE1FD0F4EE90589F">
                            <name>ValueTypeName() const</name>
                            <syntax>public nothrow inline const String&lt;uchar>&amp; ValueTypeName() const;</syntax>
                            <returnType ref="type.1133"/>
                        </function>
                    </functions>
                </class>
                <class id="7749">
                    <name>Scanner</name>
                    <groupName>Scanner</groupName>
                    <syntax> public class Scanner;</syntax>
                    <constructors>
                        <constructor id="constructor_Scanner_1E6EA6D99D4F5E3629AC426CAB7ADE3C0F6D38B9">
                            <name>Scanner(const uchar* start_, const uchar* end_, const String&lt;char>&amp; fileName_, int fileIndex_, Parser* skipper_)</name>
                            <syntax>public nothrow Scanner(const uchar* start_, const uchar* end_, const String&lt;char>&amp; fileName_, int fileIndex_, Parser* skipper_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>start_</name>
                                    <type ref="type.1135"/>
                                </parameter>
                                <parameter>
                                    <name>end_</name>
                                    <type ref="type.1135"/>
                                </parameter>
                                <parameter>
                                    <name>fileName_</name>
                                    <type ref="type.1045"/>
                                </parameter>
                                <parameter>
                                    <name>fileIndex_</name>
                                    <type ref="type.6"/>
                                </parameter>
                                <parameter>
                                    <name>skipper_</name>
                                    <type ref="type.7524"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_AtBeginningOfLine_Scanner_6A3CF86EF052FA27D1726E01D593001DA62E48E7">
                            <name>AtBeginningOfLine() const</name>
                            <syntax>public nothrow inline bool AtBeginningOfLine() const;</syntax>
                            <returnType ref="type.1"/>
                        </function>
                        <function id="member_function_AtEnd_Scanner_19758054878924B58626389C6987587F3ED267B2">
                            <name>AtEnd() const</name>
                            <syntax>public nothrow inline bool AtEnd() const;</syntax>
                            <returnType ref="type.1"/>
                        </function>
                        <function id="member_function_BeginToken_Scanner_F7ECBA8B4C284F812359DE00EA3F67A3FD1CE9C5">
                            <name>BeginToken()</name>
                            <syntax>public nothrow inline void BeginToken();</syntax>
                        </function>
                        <function id="member_function_Char_Scanner_11EA257CF9BD69444642B6501233E27BE345C45A">
                            <name>Char() const</name>
                            <syntax>public nothrow inline uchar Char() const;</syntax>
                            <returnType ref="type.14"/>
                        </function>
                        <function id="member_function_End_Scanner_72CEAFEEFA84A01874FC357C13C18B3E84DEB8FD">
                            <name>End() const</name>
                            <syntax>public nothrow inline const uchar* End() const;</syntax>
                            <returnType ref="type.1135"/>
                        </function>
                        <function id="member_function_EndToken_Scanner_FBD502A8F4D5F112CD3459B546CF764B765EFF25">
                            <name>EndToken()</name>
                            <syntax>public nothrow inline void EndToken();</syntax>
                        </function>
                        <function id="member_function_FileName_Scanner_10D621103CB0516A153D3E1BB4950D4A8C7EC5F2">
                            <name>FileName() const</name>
                            <syntax>public nothrow inline const String&lt;char>&amp; FileName() const;</syntax>
                            <returnType ref="type.1045"/>
                        </function>
                        <function id="member_function_GetSpan_Scanner_332FA032003C962833B3B7B7F319A6625F56190C">
                            <name>GetSpan() const</name>
                            <syntax>public nothrow inline const Span&amp; GetSpan() const;</syntax>
                            <returnType ref="type.7766"/>
                        </function>
                        <function id="member_function_LineEndIndex_Scanner_BBA2001A2A82E81EA3C1B7F9131816A3FCF2184F">
                            <name>LineEndIndex(int maxLineLength) const</name>
                            <syntax>public nothrow int LineEndIndex(int maxLineLength) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>maxLineLength</name>
                                    <type ref="type.6"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.6"/>
                        </function>
                        <function id="member_function_Log_Scanner_59E6F6E38DD64683CDCDD497A50EBA6FD1B8BE95">
                            <name>Log() const</name>
                            <syntax>public nothrow inline XmlLog* Log() const;</syntax>
                            <returnType ref="type.7924"/>
                        </function>
                        <function id="member_function_RestOfLine_Scanner_96B4AC96712C77D2A2E47578401050BF468D1585">
                            <name>RestOfLine(int maxLineLength)</name>
                            <syntax>public nothrow String&lt;uchar> RestOfLine(int maxLineLength);</syntax>
                            <parameters>
                                <parameter>
                                    <name>maxLineLength</name>
                                    <type ref="type.6"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1128"/>
                        </function>
                        <function id="member_function_SetLog_Scanner_574B5813BAD6E16D273E0CF4BDDD638433DD62D4">
                            <name>SetLog(XmlLog* log_)</name>
                            <syntax>public nothrow void SetLog(XmlLog* log_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>log_</name>
                                    <type ref="type.7924"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetParsingData_Scanner_F253DB458FF3EFAAD6D908ADFF774F1609D18FCF">
                            <name>SetParsingData(ParsingData* parsingData_)</name>
                            <syntax>public nothrow inline void SetParsingData(ParsingData* parsingData_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>parsingData_</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetSpan_Scanner_DF79384A9E295510B3298D8E67495486FB38C0A5">
                            <name>SetSpan(const Span&amp; span_)</name>
                            <syntax>public nothrow inline void SetSpan(const Span&amp; span_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>span_</name>
                                    <type ref="type.7766"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Skip_Scanner_B0B1E3207D3B96E6DBC243C40145694B5CAEB4FF">
                            <name>Skip()</name>
                            <syntax>public void Skip();</syntax>
                        </function>
                        <function id="member_function_Skipper_Scanner_9FF06FB7E11A2E9E7E7096E6671E5048E3518F53">
                            <name>Skipper() const</name>
                            <syntax>public nothrow inline Parser* Skipper() const;</syntax>
                            <returnType ref="type.7524"/>
                        </function>
                        <function id="member_function_Skipping_Scanner_A670A02FE16297D859E2AFF9DA35E2E073828D12">
                            <name>Skipping() const</name>
                            <syntax>public nothrow inline bool Skipping() const;</syntax>
                            <returnType ref="type.1"/>
                        </function>
                        <function id="member_function_Start_Scanner_37AF4F9E036BDC2C21E5FF12AEE23B5D7A59E211">
                            <name>Start() const</name>
                            <syntax>public nothrow inline const uchar* Start() const;</syntax>
                            <returnType ref="type.1135"/>
                        </function>
                        <function id="member_function_TokenCounter_Scanner_CCDD514D987B56CDE93153883048A0E905D0CB19">
                            <name>TokenCounter() const</name>
                            <syntax>public nothrow inline int TokenCounter() const;</syntax>
                            <returnType ref="type.6"/>
                        </function>
                        <function id="member_function_op_plusplus_Scanner_D8E02EA4C8A2563BC0696E6D7B5B0F9CA418AB40">
                            <name>operator++()</name>
                            <syntax>public nothrow void operator++();</syntax>
                        </function>
                    </functions>
                </class>
                <class id="7755">
                    <name>Scope</name>
                    <groupName>Scope</groupName>
                    <syntax> public class Scope;</syntax>
                    <baseClass ref="7551"/>
                    <constructors>
                        <constructor id="constructor_Scope_40E77DA3E3F3E4B344771966B5D3B578ED5FC8A1">
                            <name>Scope(const String&lt;uchar>&amp; name_, Scope* enclosingScope_)</name>
                            <syntax>public nothrow Scope(const String&lt;uchar>&amp; name_, Scope* enclosingScope_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.1133"/>
                                </parameter>
                                <parameter>
                                    <name>enclosingScope_</name>
                                    <type ref="type.7756"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Scope_5E61122388431383C3371D2E28E23B7AF2143838">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Add_Scope_70334DF653E888138481EDB4AD58506C758F6160">
                            <name>Add(ParsingObject* o)</name>
                            <syntax>public void Add(ParsingObject* o);</syntax>
                            <parameters>
                                <parameter>
                                    <name>o</name>
                                    <type ref="type.7552"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_AddNamespace_Scope_3716BE9F26809EA5DD04D78886DFD428D6F0C40F">
                            <name>AddNamespace(Namespace* nsToAdd)</name>
                            <syntax>public void AddNamespace(Namespace* nsToAdd);</syntax>
                            <parameters>
                                <parameter>
                                    <name>nsToAdd</name>
                                    <type ref="type.7505"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Get_Scope_1E0692FC8825D6D6C0F10253CFC348BD5357A889">
                            <name>Get(const String&lt;uchar>&amp; objectName) const</name>
                            <syntax>public ParsingObject* Get(const String&lt;uchar>&amp; objectName) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>objectName</name>
                                    <type ref="type.1133"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7552"/>
                        </function>
                        <function id="member_function_GetNamespace_Scope_F2830C62EA3F04D826879D3BF6F459901C675E89">
                            <name>GetNamespace(const String&lt;uchar>&amp; fullNamespaceName) const</name>
                            <syntax>public Namespace* GetNamespace(const String&lt;uchar>&amp; fullNamespaceName) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>fullNamespaceName</name>
                                    <type ref="type.1133"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.7505"/>
                        </function>
                        <function id="member_function_Ns_Scope_A097BD0F95E5DCC79353AEA4401F6BAD662BB53B">
                            <name>Ns() const</name>
                            <syntax>public nothrow inline Namespace* Ns() const;</syntax>
                            <returnType ref="type.7505"/>
                        </function>
                        <function id="member_function_SetNs_Scope_2E9FD7989F3138A75085CD0169F6B6FD7325032F">
                            <name>SetNs(Namespace* ns_)</name>
                            <syntax>public nothrow inline void SetNs(Namespace* ns_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>ns_</name>
                                    <type ref="type.7505"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="7677">
                    <name>SeparatorParser</name>
                    <groupName>SeparatorParser</groupName>
                    <syntax> public class SeparatorParser;</syntax>
                    <baseClass ref="7523"/>
                    <constructors>
                        <constructor id="default_constructor_SeparatorParser_5B6B6420E342464E7D97DBDAD0A722B289615F7D">
                            <name>SeparatorParser()</name>
                            <syntax>public nothrow SeparatorParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_SeparatorParser_2958D34A0608EC55DE0B3D32FB328CA4C4D8110A">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_SeparatorParser_6470F5DB71F1655C9544B00F730AC165B96D83BC">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                    </functions>
                </class>
                <class id="7435">
                    <name>SequenceParser</name>
                    <groupName>SequenceParser</groupName>
                    <syntax> public class SequenceParser;</syntax>
                    <baseClass ref="7429"/>
                    <constructors>
                        <constructor id="constructor_SequenceParser_9FF67FDCE50EB24E383CEAC3E6CA57311576D13B">
                            <name>SequenceParser(Parser* left_, Parser* right_)</name>
                            <syntax>public SequenceParser(Parser* left_, Parser* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.7524"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.7524"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_SequenceParser_226819AA9B100F2912AD19B992BAEC17C5EA0710">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_SequenceParser_5C793D5396CF26B8675F619B445FDD53A819CA49">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                    </functions>
                </class>
                <class id="7584">
                    <name>SpaceParser</name>
                    <groupName>SpaceParser</groupName>
                    <syntax> public class SpaceParser;</syntax>
                    <baseClass ref="7523"/>
                    <constructors>
                        <constructor id="default_constructor_SpaceParser_BBDB77A2D56C12DB0517D24887AFCB28064D3899">
                            <name>SpaceParser()</name>
                            <syntax>public nothrow SpaceParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_SpaceParser_B116B999BBB92781E1D6F3A447EBA8730576726B">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_SpaceParser_4BD3B95DBE5E1A9C2922F5619786BE9522EA889B">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                    </functions>
                </class>
                <class id="7680">
                    <name>SpaceSeparatorParser</name>
                    <groupName>SpaceSeparatorParser</groupName>
                    <syntax> public class SpaceSeparatorParser;</syntax>
                    <baseClass ref="7523"/>
                    <constructors>
                        <constructor id="default_constructor_SpaceSeparatorParser_C50A212F1795DC9E403E08AA75796C68016D50A7">
                            <name>SpaceSeparatorParser()</name>
                            <syntax>public nothrow SpaceSeparatorParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_SpaceSeparatorParser_E58C385314F858271FF48CD3232C592250F7D205">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_SpaceSeparatorParser_7F1DFF6F25968CFA2C76891B44B493017ADF2D5C">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                    </functions>
                </class>
                <class id="7620">
                    <name>SpacingMarkParser</name>
                    <groupName>SpacingMarkParser</groupName>
                    <syntax> public class SpacingMarkParser;</syntax>
                    <baseClass ref="7523"/>
                    <constructors>
                        <constructor id="default_constructor_SpacingMarkParser_2AD198FF5466ED2668FBFE2BCF8DE2DB3400DC07">
                            <name>SpacingMarkParser()</name>
                            <syntax>public nothrow SpacingMarkParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_SpacingMarkParser_D44061A016A8276C77B0623475D14FE704F8A157">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_SpacingMarkParser_0BF0DD1C86BDBB81A9EB168FD0573E7D260E09FE">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                    </functions>
                </class>
                <class id="7761">
                    <name>Span</name>
                    <groupName>Span</groupName>
                    <syntax> public class Span;</syntax>
                    <constructors>
                        <constructor id="default_constructor_Span_2C5A303351119D5B8C2D2701E709AF754135415B">
                            <name>Span()</name>
                            <syntax>public nothrow Span();</syntax>
                        </constructor>
                        <constructor id="constructor_Span_B2AB7E91894E0F1CDCFB19F0C0DDBAAB13F89FEF">
                            <name>Span(int fileIndex_)</name>
                            <syntax>public nothrow Span(int fileIndex_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>fileIndex_</name>
                                    <type ref="type.6"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_Span_F9614378795B21C7570E8C831A7C6B42433EDB2C">
                            <name>Span(int fileIndex_, int lineNumber_, int start_, int end_)</name>
                            <syntax>public nothrow Span(int fileIndex_, int lineNumber_, int start_, int end_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>fileIndex_</name>
                                    <type ref="type.6"/>
                                </parameter>
                                <parameter>
                                    <name>lineNumber_</name>
                                    <type ref="type.6"/>
                                </parameter>
                                <parameter>
                                    <name>start_</name>
                                    <type ref="type.6"/>
                                </parameter>
                                <parameter>
                                    <name>end_</name>
                                    <type ref="type.6"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_IsValid_Span_089917CCE7FF6E52D995B192D2083F99CB812F58">
                            <name>IsValid() const</name>
                            <syntax>public nothrow inline bool IsValid() const;</syntax>
                            <returnType ref="type.1"/>
                        </function>
                        <function id="member_function_op_plusplus_Span_5538413EC710B3C5814C8C175CB2D3ACABFE9931">
                            <name>operator++()</name>
                            <syntax>public nothrow inline void operator++();</syntax>
                        </function>
                    </functions>
                    <memberVariables>
                        <memberVariable id="variable_end_52C4B8F78FDD997145D7D2AC957A93913864B6CA">
                            <name>end</name>
                            <syntax>public int end;</syntax>
                            <type ref="type.6"/>
                        </memberVariable>
                        <memberVariable id="variable_fileIndex_933EE9700295B7901DE11C5C292A945F4F0A54AA">
                            <name>fileIndex</name>
                            <syntax>public int fileIndex;</syntax>
                            <type ref="type.6"/>
                        </memberVariable>
                        <memberVariable id="variable_lineNumber_782FFD7DFE44C74EACF9B600FC57D2B020D7ABC9">
                            <name>lineNumber</name>
                            <syntax>public int lineNumber;</syntax>
                            <type ref="type.6"/>
                        </memberVariable>
                        <memberVariable id="variable_start_95DA3FD31658207AF158A7824BED3F2F2931919D">
                            <name>start</name>
                            <syntax>public int start;</syntax>
                            <type ref="type.6"/>
                        </memberVariable>
                    </memberVariables>
                </class>
                <class id="7563">
                    <name>StringParser</name>
                    <groupName>StringParser</groupName>
                    <syntax> public class StringParser;</syntax>
                    <baseClass ref="7523"/>
                    <constructors>
                        <constructor id="constructor_StringParser_A3A23B290BA0C5E71940A667858CE816C85096EC">
                            <name>StringParser(const String&lt;uchar>&amp; s_)</name>
                            <syntax>public nothrow StringParser(const String&lt;uchar>&amp; s_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s_</name>
                                    <type ref="type.1133"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_StringParser_E86A013B2CE41EAEA4EA8CDD9DA70CD232F7766E">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_StringParser_13160B955DD35403B30B561661CA5829AA3D82A1">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                        <function id="member_function_String_StringParser_D3078C433C810F05FBB334CF4A4B1943A2DAE6F9">
                            <name>String() const</name>
                            <syntax>public nothrow inline const String&lt;uchar>&amp; String() const;</syntax>
                            <returnType ref="type.1133"/>
                        </function>
                    </functions>
                </class>
                <class id="7698">
                    <name>SurrogateParser</name>
                    <groupName>SurrogateParser</groupName>
                    <syntax> public class SurrogateParser;</syntax>
                    <baseClass ref="7523"/>
                    <constructors>
                        <constructor id="default_constructor_SurrogateParser_9817C43ECD21504C23D29BAB4C699A9C5D1F6D9E">
                            <name>SurrogateParser()</name>
                            <syntax>public nothrow SurrogateParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_SurrogateParser_B1111368142D0FDF4AE3F4CF58C3D210D6768B4D">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_SurrogateParser_B90D7A69EEC37C6193BDA3B418196A4D4D4C543A">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                    </functions>
                </class>
                <class id="7662">
                    <name>SymbolParser</name>
                    <groupName>SymbolParser</groupName>
                    <syntax> public class SymbolParser;</syntax>
                    <baseClass ref="7523"/>
                    <constructors>
                        <constructor id="default_constructor_SymbolParser_353DDF910A26E2499F7C09957717DBD1F137D7C3">
                            <name>SymbolParser()</name>
                            <syntax>public nothrow SymbolParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_SymbolParser_A05FEBBAC49BE02293AE61AA433E4A59A4EA8F8F">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_SymbolParser_151103C879E1324F80207447A29267CD4713C35E">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                    </functions>
                </class>
                <class id="7596">
                    <name>TitleLetterParser</name>
                    <groupName>TitleLetterParser</groupName>
                    <syntax> public class TitleLetterParser;</syntax>
                    <baseClass ref="7523"/>
                    <constructors>
                        <constructor id="default_constructor_TitleLetterParser_80F2766051A7FD03966CA00D93CAEFCA66D9D976">
                            <name>TitleLetterParser()</name>
                            <syntax>public nothrow TitleLetterParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_TitleLetterParser_2B1AF1DC43C0ADE687FF9A068CF77310318DE26A">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_TitleLetterParser_E936775D1051AA7321E2757AD332323A6A6B82EC">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                    </functions>
                </class>
                <class id="7426">
                    <name>TokenParser</name>
                    <groupName>TokenParser</groupName>
                    <syntax> public class TokenParser;</syntax>
                    <baseClass ref="7408"/>
                    <constructors>
                        <constructor id="constructor_TokenParser_B49F5F4AAD1980819E83A02127D391E8151D12A1">
                            <name>TokenParser(Parser* child_)</name>
                            <syntax>public TokenParser(Parser* child_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>child_</name>
                                    <type ref="type.7524"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_TokenParser_3A3D6F77E72397A6138F572675ACC1E6EA3B57C8">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_TokenParser_B2AFDDEC22F4C10A641D934AABEF47E697E59496">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                    </functions>
                </class>
                <class id="7408">
                    <name>UnaryParser</name>
                    <groupName>UnaryParser</groupName>
                    <syntax>abstract public class UnaryParser;</syntax>
                    <baseClass ref="7523"/>
                    <constructors>
                        <constructor id="constructor_UnaryParser_236C1DC86BE6DE8BA3BDD210BA06D746B66527B7">
                            <name>UnaryParser(const String&lt;uchar>&amp; name_, Parser* child_, const String&lt;uchar>&amp; info_)</name>
                            <syntax>public UnaryParser(const String&lt;uchar>&amp; name_, Parser* child_, const String&lt;uchar>&amp; info_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.1133"/>
                                </parameter>
                                <parameter>
                                    <name>child_</name>
                                    <type ref="type.7524"/>
                                </parameter>
                                <parameter>
                                    <name>info_</name>
                                    <type ref="type.1133"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Child_UnaryParser_916F1E7DB31AA8FD6EC9CF49A206D87F700495C5">
                            <name>Child() const</name>
                            <syntax>public nothrow inline Parser* Child() const;</syntax>
                            <returnType ref="type.7524"/>
                        </function>
                    </functions>
                </class>
                <class id="7704">
                    <name>UnassignedParser</name>
                    <groupName>UnassignedParser</groupName>
                    <syntax> public class UnassignedParser;</syntax>
                    <baseClass ref="7523"/>
                    <constructors>
                        <constructor id="default_constructor_UnassignedParser_993A1EDAB54FC9714F5E60A35E2181B7DC823EA1">
                            <name>UnassignedParser()</name>
                            <syntax>public nothrow UnassignedParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_UnassignedParser_EE11680F7319819960452DD43CEB1ABB53CABF7B">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_UnassignedParser_861B0B0DD98159CBE996D4BA2EEEA0DFEEF81DE9">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                    </functions>
                </class>
                <class id="7590">
                    <name>UpperLetterParser</name>
                    <groupName>UpperLetterParser</groupName>
                    <syntax> public class UpperLetterParser;</syntax>
                    <baseClass ref="7523"/>
                    <constructors>
                        <constructor id="default_constructor_UpperLetterParser_4A2B6FCADCF3E6E8D94DD6A81E5C28DE77969201">
                            <name>UpperLetterParser()</name>
                            <syntax>public nothrow UpperLetterParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_UpperLetterParser_B3E2A734C92FB6B441F611EF1C8F14C9970743B5">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.7922"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Parse_UpperLetterParser_85BD27133CFEABADEA30EB16585D77F29602761C">
                            <name>Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData)</name>
                            <syntax>public override Match Parse(Scanner&amp; scanner, Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                            <parameters>
                                <parameter>
                                    <name>scanner</name>
                                    <type ref="type.7751"/>
                                </parameter>
                                <parameter>
                                    <name>stack</name>
                                    <type ref="type.8412"/>
                                </parameter>
                                <parameter>
                                    <name>parsingData</name>
                                    <type ref="type.7537"/>
                                </parameter>
                            </parameters>
                            <returnType ref="7498"/>
                        </function>
                    </functions>
                </class>
                <class id="8819">
                    <name>ValueObject&lt;ValueType></name>
                    <groupName>ValueObject</groupName>
                    <syntax> public class ValueObject&lt;ValueType>;</syntax>
                    <templateParameters>
                        <templateParameter id="7522">
                            <name>ValueType</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="7518"/>
                    <constructors>
                        <constructor id="default_constructor_ValueObject_ValueType_37271B380BBCB190F503191A64BBBCDA52DC61AF">
                            <name>ValueObject&lt;ValueType>()</name>
                            <syntax>public default ValueObject&lt;ValueType>();</syntax>
                        </constructor>
                        <constructor id="constructor_ValueObject_ValueType_59E338A0BD54B0AD4948749380EF819BC34B902C">
                            <name>ValueObject&lt;ValueType>(const ValueType&amp; value_)</name>
                            <syntax>public ValueObject&lt;ValueType>(const ValueType&amp; value_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value_</name>
                                    <type ref="type.1131"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="conversion_function_operator_6D9C478EDC9A7E1B11DB3132375F8174825BADFB">
                            <name>operator ValueType() const</name>
                            <syntax>public ValueType operator ValueType() const;</syntax>
                            <returnType ref="7522"/>
                        </function>
                        <function id="member_function_op_assign_ValueObject_ValueType_F83209E7F0869FB17FBD4D8F700E76F46DB2638B">
                            <name>operator=(const ValueType&amp; value_)</name>
                            <syntax>public void operator=(const ValueType&amp; value_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value_</name>
                                    <type ref="type.1131"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="7920">
                    <name>Visitor</name>
                    <groupName>Visitor</groupName>
                    <syntax> public class Visitor;</syntax>
                    <functions>
                        <function id="function_group_BeginVisit_B5C691876405B8298E6554E11E1A9F987B6A13AD">
                            <name>BeginVisit</name>
                            <overloads>
                                <overload id="member_function_BeginVisit_Visitor_3C69F3478C0BE14E87C3DFF52CF4E2CC742F5CCB">
                                    <name>BeginVisit(ActionParser&amp; actionParser)</name>
                                    <syntax>public virtual void BeginVisit(ActionParser&amp; actionParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>actionParser</name>
                                            <type ref="type.7401"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_BeginVisit_Visitor_0B82297C2D03430A8170C338BF7B01652810125E">
                                    <name>BeginVisit(AlternativeParser&amp; alternativeParser)</name>
                                    <syntax>public virtual void BeginVisit(AlternativeParser&amp; alternativeParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>alternativeParser</name>
                                            <type ref="type.7440"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_BeginVisit_Visitor_46532D867D0EF0655E2E23E4148738CDED6FB7AC">
                                    <name>BeginVisit(DifferenceParser&amp; differenceParser)</name>
                                    <syntax>public virtual void BeginVisit(DifferenceParser&amp; differenceParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>differenceParser</name>
                                            <type ref="type.7443"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_BeginVisit_Visitor_11DC4CDD63E012FA0601747506C63029B8410CD8">
                                    <name>BeginVisit(ExclusiveOrParser&amp; exclusiveOrParser)</name>
                                    <syntax>public virtual void BeginVisit(ExclusiveOrParser&amp; exclusiveOrParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>exclusiveOrParser</name>
                                            <type ref="type.7446"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_BeginVisit_Visitor_14CC953EE84829910938FF6E0688803D619FAA4F">
                                    <name>BeginVisit(ExpectationParser&amp; expectationParser)</name>
                                    <syntax>public virtual void BeginVisit(ExpectationParser&amp; expectationParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>expectationParser</name>
                                            <type ref="type.7425"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_BeginVisit_Visitor_A2C707E128EBC828C31D9D762EB0B78A9697F1CD">
                                    <name>BeginVisit(Grammar&amp; grammar)</name>
                                    <syntax>public virtual void BeginVisit(Grammar&amp; grammar);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>grammar</name>
                                            <type ref="type.7470"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_BeginVisit_Visitor_482D52EA4D86D0FE83B64F526EBF2F783BA23577">
                                    <name>BeginVisit(IntersectionParser&amp; intersectionParser)</name>
                                    <syntax>public virtual void BeginVisit(IntersectionParser&amp; intersectionParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>intersectionParser</name>
                                            <type ref="type.7449"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_BeginVisit_Visitor_3AA78E535DB0279D9696E33D7210DC29D585DD3D">
                                    <name>BeginVisit(KleeneStarParser&amp; kleeneStarParser)</name>
                                    <syntax>public virtual void BeginVisit(KleeneStarParser&amp; kleeneStarParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>kleeneStarParser</name>
                                            <type ref="type.7422"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_BeginVisit_Visitor_4C00C6D63137AB8E2ECA034E542A652A4FDB6D66">
                                    <name>BeginVisit(ListParser&amp; listParser)</name>
                                    <syntax>public virtual void BeginVisit(ListParser&amp; listParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>listParser</name>
                                            <type ref="type.7452"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_BeginVisit_Visitor_1AC698A8542624106DF694A2C2D268A7D831B3C1">
                                    <name>BeginVisit(Namespace&amp; ns)</name>
                                    <syntax>public virtual void BeginVisit(Namespace&amp; ns);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>ns</name>
                                            <type ref="type.7506"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_BeginVisit_Visitor_BE89C9D1FCFFAFAA4D37FF8553AD3C7EBFCDEC8E">
                                    <name>BeginVisit(OptionalParser&amp; optionalParser)</name>
                                    <syntax>public virtual void BeginVisit(OptionalParser&amp; optionalParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>optionalParser</name>
                                            <type ref="type.7416"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_BeginVisit_Visitor_EAB6C907A162AC44EDAE8BE53906C6C42B5FEBFF">
                                    <name>BeginVisit(PositiveParser&amp; positiveParser)</name>
                                    <syntax>public virtual void BeginVisit(PositiveParser&amp; positiveParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>positiveParser</name>
                                            <type ref="type.7419"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_BeginVisit_Visitor_A1232E7C2A839C1093B7AF1204BA7B8B5705846D">
                                    <name>BeginVisit(RuleParser&amp; rule)</name>
                                    <syntax>public virtual void BeginVisit(RuleParser&amp; rule);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>rule</name>
                                            <type ref="type.7739"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_BeginVisit_Visitor_5F3A470EB2415901E201826BA969B2B072157F53">
                                    <name>BeginVisit(SequenceParser&amp; sequenceParser)</name>
                                    <syntax>public virtual void BeginVisit(SequenceParser&amp; sequenceParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>sequenceParser</name>
                                            <type ref="type.7437"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_BeginVisit_Visitor_FB01CDD20EA3208D971B74178895008965DF0291">
                                    <name>BeginVisit(TokenParser&amp; tokenParser)</name>
                                    <syntax>public virtual void BeginVisit(TokenParser&amp; tokenParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>tokenParser</name>
                                            <type ref="type.7428"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_EndVisit_79141257664E016439225059D33D7BE6CC044D29">
                            <name>EndVisit</name>
                            <overloads>
                                <overload id="member_function_EndVisit_Visitor_5873FEBCA7778FF3E51EFB6285703F02F5A7B7E3">
                                    <name>EndVisit(ActionParser&amp; actionParser)</name>
                                    <syntax>public virtual void EndVisit(ActionParser&amp; actionParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>actionParser</name>
                                            <type ref="type.7401"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_EndVisit_Visitor_C784871802B4B3E734C3B073A0C4687FE46CD1E9">
                                    <name>EndVisit(AlternativeParser&amp; alternativeParser)</name>
                                    <syntax>public virtual void EndVisit(AlternativeParser&amp; alternativeParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>alternativeParser</name>
                                            <type ref="type.7440"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_EndVisit_Visitor_0E54BB3AB8181999AE8B05EE01327684FAF4A835">
                                    <name>EndVisit(DifferenceParser&amp; differenceParser)</name>
                                    <syntax>public virtual void EndVisit(DifferenceParser&amp; differenceParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>differenceParser</name>
                                            <type ref="type.7443"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_EndVisit_Visitor_3F1ECF05A40BD2AC8F4A1932377D49D760FFBC65">
                                    <name>EndVisit(ExclusiveOrParser&amp; exclusiveOrParser)</name>
                                    <syntax>public virtual void EndVisit(ExclusiveOrParser&amp; exclusiveOrParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>exclusiveOrParser</name>
                                            <type ref="type.7446"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_EndVisit_Visitor_B26B7677A6D0F9EE0C7D6D7CE86459D64886B61A">
                                    <name>EndVisit(ExpectationParser&amp; expectationParser)</name>
                                    <syntax>public virtual void EndVisit(ExpectationParser&amp; expectationParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>expectationParser</name>
                                            <type ref="type.7425"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_EndVisit_Visitor_B19FE0338C157B9EE8C04021DF3A9EB9DC6F447A">
                                    <name>EndVisit(Grammar&amp; grammar)</name>
                                    <syntax>public virtual void EndVisit(Grammar&amp; grammar);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>grammar</name>
                                            <type ref="type.7470"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_EndVisit_Visitor_85E87F8DA07B8B73587BD996CC47A15DAC6DA70E">
                                    <name>EndVisit(IntersectionParser&amp; intersectionParser)</name>
                                    <syntax>public virtual void EndVisit(IntersectionParser&amp; intersectionParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>intersectionParser</name>
                                            <type ref="type.7449"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_EndVisit_Visitor_98D2BC5F6F62CDCD44CCD607B3BCC46E09044837">
                                    <name>EndVisit(KleeneStarParser&amp; kleeneStarParser)</name>
                                    <syntax>public virtual void EndVisit(KleeneStarParser&amp; kleeneStarParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>kleeneStarParser</name>
                                            <type ref="type.7422"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_EndVisit_Visitor_ECF9315123AA428B26B58D7C1AF7FBCAA9FDC114">
                                    <name>EndVisit(ListParser&amp; listParser)</name>
                                    <syntax>public virtual void EndVisit(ListParser&amp; listParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>listParser</name>
                                            <type ref="type.7452"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_EndVisit_Visitor_29D8220918F57810DD92FFC63BF5FAE99098DD60">
                                    <name>EndVisit(Namespace&amp; ns)</name>
                                    <syntax>public virtual void EndVisit(Namespace&amp; ns);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>ns</name>
                                            <type ref="type.7506"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_EndVisit_Visitor_16AF0BD49350604127988E3955276B4421EA7BAA">
                                    <name>EndVisit(OptionalParser&amp; optionalParser)</name>
                                    <syntax>public virtual void EndVisit(OptionalParser&amp; optionalParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>optionalParser</name>
                                            <type ref="type.7416"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_EndVisit_Visitor_FCD37CED9F1F715826A13DF030A2090B0E9C51F0">
                                    <name>EndVisit(PositiveParser&amp; positiveParser)</name>
                                    <syntax>public virtual void EndVisit(PositiveParser&amp; positiveParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>positiveParser</name>
                                            <type ref="type.7419"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_EndVisit_Visitor_F0422CF732EED6A2846497A226596542B931993B">
                                    <name>EndVisit(RuleParser&amp; rule)</name>
                                    <syntax>public virtual void EndVisit(RuleParser&amp; rule);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>rule</name>
                                            <type ref="type.7739"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_EndVisit_Visitor_A329EC2E58708229A2AA5FC8CF67AC4C54472692">
                                    <name>EndVisit(SequenceParser&amp; sequenceParser)</name>
                                    <syntax>public virtual void EndVisit(SequenceParser&amp; sequenceParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>sequenceParser</name>
                                            <type ref="type.7437"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_EndVisit_Visitor_4F1EE3D9E005BA13380C0ADF0CBE142140418971">
                                    <name>EndVisit(TokenParser&amp; tokenParser)</name>
                                    <syntax>public virtual void EndVisit(TokenParser&amp; tokenParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>tokenParser</name>
                                            <type ref="type.7428"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_Visit_E324BBAEAD3DDA1AACEA3201168142594DD53605">
                            <name>Visit</name>
                            <overloads>
                                <overload id="member_function_Visit_Visitor_EAA5C0982A03E767580C7E8AB003651847B97B41">
                                    <name>Visit(AlphabeticParser&amp; alphabeticParser)</name>
                                    <syntax>public virtual void Visit(AlphabeticParser&amp; alphabeticParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>alphabeticParser</name>
                                            <type ref="type.7715"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_21D9E2198D6CCAFA5C0B36DFDA99E6F4FA1E4B99">
                                    <name>Visit(AlternativeParser&amp; alternativeParser)</name>
                                    <syntax>public virtual void Visit(AlternativeParser&amp; alternativeParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>alternativeParser</name>
                                            <type ref="type.7440"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_954FAF7CCF2A78751822EFBB06FE2313B891B62A">
                                    <name>Visit(AnyCharParser&amp; anyCharParser)</name>
                                    <syntax>public virtual void Visit(AnyCharParser&amp; anyCharParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>anyCharParser</name>
                                            <type ref="type.7724"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_6AC8D6A5B50D483AF03BB143E5E258E085F8FF59">
                                    <name>Visit(BaseCharParser&amp; baseCharParser)</name>
                                    <syntax>public virtual void Visit(BaseCharParser&amp; baseCharParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>baseCharParser</name>
                                            <type ref="type.7712"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_C4E188530BF92A9E83D720E63ACED47E8BB48778">
                                    <name>Visit(CasedLetterParser&amp; casedLetterParser)</name>
                                    <syntax>public virtual void Visit(CasedLetterParser&amp; casedLetterParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>casedLetterParser</name>
                                            <type ref="type.7607"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_548BEB3A6F2B0F931FB472FE5DD9435A40BAC0F2">
                                    <name>Visit(CharParser&amp; charParser)</name>
                                    <syntax>public virtual void Visit(CharParser&amp; charParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>charParser</name>
                                            <type ref="type.7559"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_6A776BDE8C032087C46BADA5739BE4721E747352">
                                    <name>Visit(CharSetParser&amp; charSetParser)</name>
                                    <syntax>public virtual void Visit(CharSetParser&amp; charSetParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>charSetParser</name>
                                            <type ref="type.7577"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_C3F0F0A0FCC5E21BB5C591865577F478703B9631">
                                    <name>Visit(ClosePunctuationParser&amp; closePunctuationParser)</name>
                                    <syntax>public virtual void Visit(ClosePunctuationParser&amp; closePunctuationParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>closePunctuationParser</name>
                                            <type ref="type.7652"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_3004B23CAA00C13A4513BCBD7D036AF5A22A148F">
                                    <name>Visit(ConnectorPunctuationParser&amp; connectorPunctuationParser)</name>
                                    <syntax>public virtual void Visit(ConnectorPunctuationParser&amp; connectorPunctuationParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>connectorPunctuationParser</name>
                                            <type ref="type.7643"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_87D0F5A5190D49E213DF82D0737E990AD8E55CC6">
                                    <name>Visit(ControlParser&amp; controlParser)</name>
                                    <syntax>public virtual void Visit(ControlParser&amp; controlParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>controlParser</name>
                                            <type ref="type.7694"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_0C27A549BEACBDF7BF89629C09E2A8362D63B77B">
                                    <name>Visit(CurrencySymbolParser&amp; currencySymbolParser)</name>
                                    <syntax>public virtual void Visit(CurrencySymbolParser&amp; currencySymbolParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>currencySymbolParser</name>
                                            <type ref="type.7670"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_D2B740A087AF9E793194CD396C24D0B84642A5D8">
                                    <name>Visit(DashPunctuationParser&amp; dashPunctuationParser)</name>
                                    <syntax>public virtual void Visit(DashPunctuationParser&amp; dashPunctuationParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>dashPunctuationParser</name>
                                            <type ref="type.7646"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_0EAE80CAECF5F5ED260E1392C8EBFDEF332DE360">
                                    <name>Visit(DecimalNumberParser&amp; decimalNumberParser)</name>
                                    <syntax>public virtual void Visit(DecimalNumberParser&amp; decimalNumberParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>decimalNumberParser</name>
                                            <type ref="type.7631"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_3E0DADEA1B81FEEBE266CE964030DB1351D10F48">
                                    <name>Visit(DifferenceParser&amp; differenceParser)</name>
                                    <syntax>public virtual void Visit(DifferenceParser&amp; differenceParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>differenceParser</name>
                                            <type ref="type.7443"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_FACB52D8E9614D214F30CCB5500EE9B5C8814126">
                                    <name>Visit(DigitParser&amp; digitParser)</name>
                                    <syntax>public virtual void Visit(DigitParser&amp; digitParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>digitParser</name>
                                            <type ref="type.7610"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_DC77E20E894991C79AB3E6E1D364C33B1A1B6337">
                                    <name>Visit(EmptyParser&amp; emptyParser)</name>
                                    <syntax>public virtual void Visit(EmptyParser&amp; emptyParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>emptyParser</name>
                                            <type ref="type.7583"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_43DB870680A0B1CCF36C6C5DB65109E640B17175">
                                    <name>Visit(EnclosingMarkParser&amp; enclosingMarkParser)</name>
                                    <syntax>public virtual void Visit(EnclosingMarkParser&amp; enclosingMarkParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>enclosingMarkParser</name>
                                            <type ref="type.7625"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_2DC1B904CD0A318A51DC83EE9AFB9FBADB7A0F27">
                                    <name>Visit(ExclusiveOrParser&amp; exclusiveOrParser)</name>
                                    <syntax>public virtual void Visit(ExclusiveOrParser&amp; exclusiveOrParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>exclusiveOrParser</name>
                                            <type ref="type.7446"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_5F0701F82E9F009AB9585BC164019DC8004346A6">
                                    <name>Visit(FinalPunctuationParser&amp; finalPunctuationParser)</name>
                                    <syntax>public virtual void Visit(FinalPunctuationParser&amp; finalPunctuationParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>finalPunctuationParser</name>
                                            <type ref="type.7658"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_9A71EDA0B8F03951DFD119C095BC7CCBC3EA2D68">
                                    <name>Visit(FormatParser&amp; formatParser)</name>
                                    <syntax>public virtual void Visit(FormatParser&amp; formatParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>formatParser</name>
                                            <type ref="type.7697"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_E093768A4B443BEA7F50131FA7A7CBD5AA43D23F">
                                    <name>Visit(GraphicParser&amp; graphicParser)</name>
                                    <syntax>public virtual void Visit(GraphicParser&amp; graphicParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>graphicParser</name>
                                            <type ref="type.7709"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_75DCEEE3AD3192858EBA8D34C9CD749D2F92371F">
                                    <name>Visit(HexDigitParser&amp; hexDigitParser)</name>
                                    <syntax>public virtual void Visit(HexDigitParser&amp; hexDigitParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>hexDigitParser</name>
                                            <type ref="type.7613"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_F55704411C9DF5620F527FEA41755A2E75062ED2">
                                    <name>Visit(IdContParser&amp; idContParser)</name>
                                    <syntax>public virtual void Visit(IdContParser&amp; idContParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>idContParser</name>
                                            <type ref="type.7721"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_D5B51FC9E2B4551C14D528F16BAFF08F4F841066">
                                    <name>Visit(IdStartParser&amp; idStartParser)</name>
                                    <syntax>public virtual void Visit(IdStartParser&amp; idStartParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>idStartParser</name>
                                            <type ref="type.7718"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_CEB7C7A8F38F98EC751401713A3AEA6E8438414C">
                                    <name>Visit(InitialPunctuationParser&amp; initialPunctuationParser)</name>
                                    <syntax>public virtual void Visit(InitialPunctuationParser&amp; initialPunctuationParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>initialPunctuationParser</name>
                                            <type ref="type.7655"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_358386F687DD45E33D5B339EA6623817F9813F44">
                                    <name>Visit(IntersectionParser&amp; intersectionParser)</name>
                                    <syntax>public virtual void Visit(IntersectionParser&amp; intersectionParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>intersectionParser</name>
                                            <type ref="type.7449"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_7545009BAA199558184E617AB3DC322BE00E0551">
                                    <name>Visit(KeywordListParser&amp; keywordListParser)</name>
                                    <syntax>public virtual void Visit(KeywordListParser&amp; keywordListParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>keywordListParser</name>
                                            <type ref="type.7488"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_BC61B51852ACB2D5AC2CC1C88C5AF2A2811D4207">
                                    <name>Visit(KeywordParser&amp; keywordParser)</name>
                                    <syntax>public virtual void Visit(KeywordParser&amp; keywordParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>keywordParser</name>
                                            <type ref="type.7482"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_9EF1573A8B9214A644D6D00252EEE84A3DD6DF64">
                                    <name>Visit(LetterNumberParser&amp; letterNumberParser)</name>
                                    <syntax>public virtual void Visit(LetterNumberParser&amp; letterNumberParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>letterNumberParser</name>
                                            <type ref="type.7634"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_0C894B78542AF047A08EC64D74B6377565BD471F">
                                    <name>Visit(LetterParser&amp; letterParser)</name>
                                    <syntax>public virtual void Visit(LetterParser&amp; letterParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>letterParser</name>
                                            <type ref="type.7589"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_147B6779437280E26C0D016854AB146D05B328CC">
                                    <name>Visit(LineSeparatorParser&amp; lineSeparatorParser)</name>
                                    <syntax>public virtual void Visit(LineSeparatorParser&amp; lineSeparatorParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>lineSeparatorParser</name>
                                            <type ref="type.7685"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_859AFC54A9F3D97719740D3190A712BF9D482D2A">
                                    <name>Visit(ListParser&amp; listParser)</name>
                                    <syntax>public virtual void Visit(ListParser&amp; listParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>listParser</name>
                                            <type ref="type.7452"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_14F095A9A405E2D2663FA67FE6EFC5A3038C03BD">
                                    <name>Visit(LowerLetterParser&amp; lowerLetterParser)</name>
                                    <syntax>public virtual void Visit(LowerLetterParser&amp; lowerLetterParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>lowerLetterParser</name>
                                            <type ref="type.7595"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_DC5AAF1B1B051648015648599FD1D7D2D7C894A4">
                                    <name>Visit(MarkParser&amp; markParser)</name>
                                    <syntax>public virtual void Visit(MarkParser&amp; markParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>markParser</name>
                                            <type ref="type.7616"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_41688B34EF724F5B4599363DD61107CC0E46151F">
                                    <name>Visit(MathSymbolParser&amp; mathSymbolParser)</name>
                                    <syntax>public virtual void Visit(MathSymbolParser&amp; mathSymbolParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>mathSymbolParser</name>
                                            <type ref="type.7667"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_20D85D14B4AE93311DBA89BF59A19A1116380048">
                                    <name>Visit(ModifierLetterParser&amp; modifierLetterParser)</name>
                                    <syntax>public virtual void Visit(ModifierLetterParser&amp; modifierLetterParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>modifierLetterParser</name>
                                            <type ref="type.7601"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_C40A9C4BCBC33E3C9650B4AF506C3CE2DEF8162A">
                                    <name>Visit(ModifierSymbolParser&amp; modifierSymbolParser)</name>
                                    <syntax>public virtual void Visit(ModifierSymbolParser&amp; modifierSymbolParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>modifierSymbolParser</name>
                                            <type ref="type.7673"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_7F27D9E7900D80FA25D9372FAC26F3DA9D10CFC2">
                                    <name>Visit(NonspacingMarkParser&amp; nonspacingMarkParser)</name>
                                    <syntax>public virtual void Visit(NonspacingMarkParser&amp; nonspacingMarkParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>nonspacingMarkParser</name>
                                            <type ref="type.7619"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_ED8E471D04449A4D40C56A3E3F8B94C3BA515EF3">
                                    <name>Visit(NonterminalParser&amp; nonterminalParser)</name>
                                    <syntax>public virtual void Visit(NonterminalParser&amp; nonterminalParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>nonterminalParser</name>
                                            <type ref="type.7514"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_6971BC48329F8916BB4FBEFA714417F89AF88F4E">
                                    <name>Visit(NumberParser&amp; numberParser)</name>
                                    <syntax>public virtual void Visit(NumberParser&amp; numberParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>numberParser</name>
                                            <type ref="type.7628"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_F410E229DE9392AE4342C4AB5B0181FE24DEBD7F">
                                    <name>Visit(OpenPunctuationParser&amp; openPunctuationParser)</name>
                                    <syntax>public virtual void Visit(OpenPunctuationParser&amp; openPunctuationParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>openPunctuationParser</name>
                                            <type ref="type.7649"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_AA752F1A31D5642FD959D956EA1AA062650BB120">
                                    <name>Visit(OtherLetterParser&amp; otherLetterParser)</name>
                                    <syntax>public virtual void Visit(OtherLetterParser&amp; otherLetterParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>otherLetterParser</name>
                                            <type ref="type.7604"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_AF3F3D379140565EFAA2333DCF5054513850BFD3">
                                    <name>Visit(OtherNumberParser&amp; otherNumberParer)</name>
                                    <syntax>public virtual void Visit(OtherNumberParser&amp; otherNumberParer);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>otherNumberParer</name>
                                            <type ref="type.7637"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_A814893E5E37A45D43CE8149B776CB07671BBA5E">
                                    <name>Visit(OtherParser&amp; otherParser)</name>
                                    <syntax>public virtual void Visit(OtherParser&amp; otherParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>otherParser</name>
                                            <type ref="type.7691"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_ACAB85272DD91C108BEBC3D98A6F62E7A9AAF0D0">
                                    <name>Visit(OtherPunctuationParser&amp; otherPunctuationParser)</name>
                                    <syntax>public virtual void Visit(OtherPunctuationParser&amp; otherPunctuationParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>otherPunctuationParser</name>
                                            <type ref="type.7661"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_A6DF3772094C1FFF39080C2C58C2E7EB8B7BC70B">
                                    <name>Visit(OtherSymbolParser&amp; otherSymbolParser)</name>
                                    <syntax>public virtual void Visit(OtherSymbolParser&amp; otherSymbolParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>otherSymbolParser</name>
                                            <type ref="type.7676"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_E3DEB3226781A34FE62BF04D28C2F2069062F561">
                                    <name>Visit(ParagraphSeparatorParser&amp; paragraphSeparatorParser)</name>
                                    <syntax>public virtual void Visit(ParagraphSeparatorParser&amp; paragraphSeparatorParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>paragraphSeparatorParser</name>
                                            <type ref="type.7688"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_04DED091CCD25080DDD6FF92D3A95912C3A6B79F">
                                    <name>Visit(PrivateUseParser&amp; privateUseParser)</name>
                                    <syntax>public virtual void Visit(PrivateUseParser&amp; privateUseParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>privateUseParser</name>
                                            <type ref="type.7703"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_D2991943C8EEB1F88EB013D79B315842F4A6E860">
                                    <name>Visit(PunctuationParser&amp; punctuationParser)</name>
                                    <syntax>public virtual void Visit(PunctuationParser&amp; punctuationParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>punctuationParser</name>
                                            <type ref="type.7640"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_C8E45936B8CE68004FA0C1C61AECBFEDF29D9BDD">
                                    <name>Visit(RangeParser&amp; rangeParser)</name>
                                    <syntax>public virtual void Visit(RangeParser&amp; rangeParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>rangeParser</name>
                                            <type ref="type.7727"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_0BF25A581950481AB951DB5EEC749BD3989795F2">
                                    <name>Visit(RuleLink&amp; ruleLink)</name>
                                    <syntax>public virtual void Visit(RuleLink&amp; ruleLink);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>ruleLink</name>
                                            <type ref="type.7745"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_EB1055B2400FFACA7700EFEE080C93B7EF53CB37">
                                    <name>Visit(SeparatorParser&amp; separatorParser)</name>
                                    <syntax>public virtual void Visit(SeparatorParser&amp; separatorParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>separatorParser</name>
                                            <type ref="type.7679"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_138FF6A19119629ACB5802919D5811B3F6F1D1E7">
                                    <name>Visit(SequenceParser&amp; sequenceParser)</name>
                                    <syntax>public virtual void Visit(SequenceParser&amp; sequenceParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>sequenceParser</name>
                                            <type ref="type.7437"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_EBE768042FD518CA151A3198A4884E959C643B67">
                                    <name>Visit(SpaceParser&amp; spaceParser)</name>
                                    <syntax>public virtual void Visit(SpaceParser&amp; spaceParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>spaceParser</name>
                                            <type ref="type.7586"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_08C6DD1CD83012756B4349A9BF68BFF9C16C5FFA">
                                    <name>Visit(SpaceSeparatorParser&amp; spaceSeparatorParser)</name>
                                    <syntax>public virtual void Visit(SpaceSeparatorParser&amp; spaceSeparatorParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>spaceSeparatorParser</name>
                                            <type ref="type.7682"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_1F640A9C551CCD72E7A86D2ED72AB5471ED97257">
                                    <name>Visit(SpacingMarkParser&amp; spacingMarkParser)</name>
                                    <syntax>public virtual void Visit(SpacingMarkParser&amp; spacingMarkParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>spacingMarkParser</name>
                                            <type ref="type.7622"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_FA3165A8F58B83D22E8D42CEE8897ED7DBACCBA6">
                                    <name>Visit(StringParser&amp; stringParser)</name>
                                    <syntax>public virtual void Visit(StringParser&amp; stringParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>stringParser</name>
                                            <type ref="type.7565"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_694D70E309361EFB3252C97C78E3A026A3415BF1">
                                    <name>Visit(SurrogateParser&amp; surrogateParser)</name>
                                    <syntax>public virtual void Visit(SurrogateParser&amp; surrogateParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>surrogateParser</name>
                                            <type ref="type.7700"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_6F927C7A699AF95FBAA1BFB98D2CEEC0D2AB8945">
                                    <name>Visit(SymbolParser&amp; symbolParser)</name>
                                    <syntax>public virtual void Visit(SymbolParser&amp; symbolParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>symbolParser</name>
                                            <type ref="type.7664"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_8B2C5DF74F8999C2FF68965411A1A41DC6A6E6EA">
                                    <name>Visit(TitleLetterParser&amp; titleLetterParser)</name>
                                    <syntax>public virtual void Visit(TitleLetterParser&amp; titleLetterParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>titleLetterParser</name>
                                            <type ref="type.7598"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_38C51FFD269BE5DAE72A78E5127754C5B24E46BB">
                                    <name>Visit(UnassignedParser&amp; unassignedParser)</name>
                                    <syntax>public virtual void Visit(UnassignedParser&amp; unassignedParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>unassignedParser</name>
                                            <type ref="type.7706"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_8BF1AEAB9DB3A7165DE7E5409D9635FD8ECA9F8F">
                                    <name>Visit(UpperLetterParser&amp; upperLetterParser)</name>
                                    <syntax>public virtual void Visit(UpperLetterParser&amp; upperLetterParser);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>upperLetterParser</name>
                                            <type ref="type.7592"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                    </functions>
                </class>
                <class id="7923">
                    <name>XmlLog</name>
                    <groupName>XmlLog</groupName>
                    <syntax> public class XmlLog;</syntax>
                    <constructors>
                        <constructor id="constructor_XmlLog_3BE29A048D209B39468D36D8B8213F00CD5CE7B4">
                            <name>XmlLog(StreamWriter&amp; writer_, int maxLineLength_)</name>
                            <syntax>public nothrow XmlLog(StreamWriter&amp; writer_, int maxLineLength_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>writer_</name>
                                    <type ref="type.775"/>
                                </parameter>
                                <parameter>
                                    <name>maxLineLength_</name>
                                    <type ref="type.6"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_DecIndent_XmlLog_4C871D50E812DD2B0809544BEE1D5F7ADE5A5575">
                            <name>DecIndent()</name>
                            <syntax>public nothrow inline void DecIndent();</syntax>
                        </function>
                        <function id="member_function_IncIndent_XmlLog_EB0ABAAC3F5F26E7239BFD0924BF6F3D5F20A92E">
                            <name>IncIndent()</name>
                            <syntax>public nothrow inline void IncIndent();</syntax>
                        </function>
                        <function id="member_function_MaxLineLength_XmlLog_A1AD5DE5DF5DD1787565056EDA302638F4E55EF0">
                            <name>MaxLineLength() const</name>
                            <syntax>public nothrow inline int MaxLineLength() const;</syntax>
                            <returnType ref="type.6"/>
                        </function>
                        <function id="member_function_Write_XmlLog_DA9D1C2417B4DA88BF9959AEB34E60E90A5F21FA">
                            <name>Write(const String&lt;uchar>&amp; s)</name>
                            <syntax>public void Write(const String&lt;uchar>&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1133"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_WriteBeginRule_XmlLog_5899B4427541E4050B1AA6FC236F287F6D649960">
                            <name>WriteBeginRule(const String&lt;uchar>&amp; ruleName)</name>
                            <syntax>public void WriteBeginRule(const String&lt;uchar>&amp; ruleName);</syntax>
                            <parameters>
                                <parameter>
                                    <name>ruleName</name>
                                    <type ref="type.1133"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_WriteElement_XmlLog_F5A0AD4B369E2B08AE3A5434DEFDC078135ADC3E">
                            <name>WriteElement(const String&lt;uchar>&amp; elementName, const String&lt;uchar>&amp; elementContent)</name>
                            <syntax>public void WriteElement(const String&lt;uchar>&amp; elementName, const String&lt;uchar>&amp; elementContent);</syntax>
                            <parameters>
                                <parameter>
                                    <name>elementName</name>
                                    <type ref="type.1133"/>
                                </parameter>
                                <parameter>
                                    <name>elementContent</name>
                                    <type ref="type.1133"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_WriteEndRule_XmlLog_9289C4B4EAF5C4B8752A34D8CDF59521A07AC7AD">
                            <name>WriteEndRule(const String&lt;uchar>&amp; ruleName)</name>
                            <syntax>public void WriteEndRule(const String&lt;uchar>&amp; ruleName);</syntax>
                            <parameters>
                                <parameter>
                                    <name>ruleName</name>
                                    <type ref="type.1133"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_WriteFail_XmlLog_18E5AF01C6FC6CEEF4134CA2CABDE54F10DC6766">
                            <name>WriteFail()</name>
                            <syntax>public void WriteFail();</syntax>
                        </function>
                        <function id="member_function_WriteSuccess_XmlLog_3E22503C19B38FBD163EA3EF4B3EDDBAF0C02038">
                            <name>WriteSuccess(const String&lt;uchar>&amp; match)</name>
                            <syntax>public void WriteSuccess(const String&lt;uchar>&amp; match);</syntax>
                            <parameters>
                                <parameter>
                                    <name>match</name>
                                    <type ref="type.1133"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_WriteTry_XmlLog_ABED20B7D097E464AE73F6B84C92DE4D0A2837AA">
                            <name>WriteTry(const String&lt;uchar>&amp; s)</name>
                            <syntax>public void WriteTry(const String&lt;uchar>&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1133"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="7767">
                    <name>stdlib</name>
                    <groupName>stdlib</groupName>
                    <syntax> public class stdlib;</syntax>
                    <baseClass ref="7468"/>
                    <constructors>
                        <constructor id="default_constructor_stdlib_66237E3263302A7F81A23B3ED60F61BD92347F46">
                            <name>stdlib()</name>
                            <syntax>public stdlib();</syntax>
                        </constructor>
                        <constructor id="constructor_stdlib_97795A96520DDF56F703C847ED6F564005CAE4BD">
                            <name>stdlib(ParsingDomain* parsingDomain)</name>
                            <syntax>public stdlib(ParsingDomain* parsingDomain);</syntax>
                            <parameters>
                                <parameter>
                                    <name>parsingDomain</name>
                                    <type ref="type.7543"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_CreateRules_stdlib_123FA2BE91B0A1ABCE924CB8679C1D02D233B38D">
                            <name>CreateRules()</name>
                            <syntax>public override void CreateRules();</syntax>
                        </function>
                        <function id="member_function_GetReferencedGrammars_stdlib_9E1157B68CDE56EB74B28A8C0702A2FF0A6B481B">
                            <name>GetReferencedGrammars()</name>
                            <syntax>public override void GetReferencedGrammars();</syntax>
                        </function>
                    </functions>
                </class>
            </classes>
            <functions>
                <function id="function_CommonName_E714805B7BF1F48ED743DBDBBB779C74673362E2">
                    <name>CommonName(const String&lt;uchar>&amp; qualifiedName)</name>
                    <syntax>public nothrow String&lt;uchar> CommonName(const String&lt;uchar>&amp; qualifiedName);</syntax>
                    <parameters>
                        <parameter>
                            <name>qualifiedName</name>
                            <type ref="type.1133"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1128"/>
                </function>
                <function id="function_ExpandCode_F6C68BD20B5E0628D82F1BCA296E26BB8F1CCA6C">
                    <name>ExpandCode(ParsingDomain* parsingDomain)</name>
                    <syntax>public void ExpandCode(ParsingDomain* parsingDomain);</syntax>
                    <parameters>
                        <parameter>
                            <name>parsingDomain</name>
                            <type ref="type.7543"/>
                        </parameter>
                    </parameters>
                </function>
                <function id="function_GetErrorLines_2C67EBA9C2C99C93C28C09944E9C374C6DD40056">
                    <name>GetErrorLines(const uchar* start, const uchar* end, const Span&amp; span)</name>
                    <syntax>public nothrow String&lt;uchar> GetErrorLines(const uchar* start, const uchar* end, const Span&amp; span);</syntax>
                    <parameters>
                        <parameter>
                            <name>start</name>
                            <type ref="type.1135"/>
                        </parameter>
                        <parameter>
                            <name>end</name>
                            <type ref="type.1135"/>
                        </parameter>
                        <parameter>
                            <name>span</name>
                            <type ref="type.7766"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1128"/>
                </function>
                <function id="function_GetHashCode_260F1D8828353552B8A5CFC54419AA81935AB1CA">
                    <name>GetHashCode(Grammar* grammar)</name>
                    <syntax>public nothrow inline ulong GetHashCode(Grammar* grammar);</syntax>
                    <parameters>
                        <parameter>
                            <name>grammar</name>
                            <type ref="type.7469"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.9"/>
                </function>
                <function id="function_GetPrefix_061D51385EE6B68F879657A446ECBFB59D261B26">
                    <name>GetPrefix(const String&lt;uchar>&amp; fullName)</name>
                    <syntax>public nothrow String&lt;uchar> GetPrefix(const String&lt;uchar>&amp; fullName);</syntax>
                    <parameters>
                        <parameter>
                            <name>fullName</name>
                            <type ref="type.1133"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1128"/>
                </function>
                <function id="function_InverseStr_0D10EC6785D4E9B887237021D90D4B62DD2BEC71">
                    <name>InverseStr(bool inverse)</name>
                    <syntax>public nothrow String&lt;uchar> InverseStr(bool inverse);</syntax>
                    <parameters>
                        <parameter>
                            <name>inverse</name>
                            <type ref="type.1"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1128"/>
                </function>
                <function id="function_LineEnd_061F40AA6FB4083204C5096B5D7CB78B9DFA0909">
                    <name>LineEnd(const uchar* end, const uchar* pos)</name>
                    <syntax>public nothrow const uchar* LineEnd(const uchar* end, const uchar* pos);</syntax>
                    <parameters>
                        <parameter>
                            <name>end</name>
                            <type ref="type.1135"/>
                        </parameter>
                        <parameter>
                            <name>pos</name>
                            <type ref="type.1135"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1135"/>
                </function>
                <function id="function_LineStart_3BC899FBB690117E389CBD52F89ED2D71919409C">
                    <name>LineStart(const uchar* start, const uchar* pos)</name>
                    <syntax>public nothrow const uchar* LineStart(const uchar* start, const uchar* pos);</syntax>
                    <parameters>
                        <parameter>
                            <name>start</name>
                            <type ref="type.1135"/>
                        </parameter>
                        <parameter>
                            <name>pos</name>
                            <type ref="type.1135"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1135"/>
                </function>
                <function id="function_Link_7048369924ADD3E9F782C85EC8D6DE5C13FACB00">
                    <name>Link(ParsingDomain* parsingDomain)</name>
                    <syntax>public void Link(ParsingDomain* parsingDomain);</syntax>
                    <parameters>
                        <parameter>
                            <name>parsingDomain</name>
                            <type ref="type.7543"/>
                        </parameter>
                    </parameters>
                </function>
                <function id="function_RegisterParsingDomain_FF50421D81FD3C29CCD99E651EDE434BD728E693">
                    <name>RegisterParsingDomain(ParsingDomain* parsingDomain)</name>
                    <syntax>public void RegisterParsingDomain(ParsingDomain* parsingDomain);</syntax>
                    <parameters>
                        <parameter>
                            <name>parsingDomain</name>
                            <type ref="type.7543"/>
                        </parameter>
                    </parameters>
                </function>
                <function id="function_ThrowException_4651EE3205B502F6308EAD98AA4EDE5C129DEE3E">
                    <name>ThrowException(const String&lt;char>&amp; message, const Span&amp; span)</name>
                    <syntax>public void ThrowException(const String&lt;char>&amp; message, const Span&amp; span);</syntax>
                    <parameters>
                        <parameter>
                            <name>message</name>
                            <type ref="type.1045"/>
                        </parameter>
                        <parameter>
                            <name>span</name>
                            <type ref="type.7766"/>
                        </parameter>
                    </parameters>
                </function>
                <function id="function_XmlCharStr_7E995B6FF27964D889C4FB987F6356975895C52E">
                    <name>XmlCharStr(uchar c)</name>
                    <syntax>public String&lt;uchar> XmlCharStr(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.14"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1128"/>
                </function>
                <function id="function_XmlEscape_9E7152D741743E57926D9E4948944955CDCD595D">
                    <name>XmlEscape(const String&lt;uchar>&amp; s)</name>
                    <syntax>public String&lt;uchar> XmlEscape(const String&lt;uchar>&amp; s);</syntax>
                    <parameters>
                        <parameter>
                            <name>s</name>
                            <type ref="type.1133"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1128"/>
                </function>
                <function id="function_group_op_eq_52A01F8C172271E855010828D2E825F82D67BA88">
                    <name>operator==</name>
                    <overloads>
                        <overload id="function_op_eq_5E6AA4E7BE6B120D6F86893E558375A481F537EF">
                            <name>operator==(const FailureAction&amp; left, const FailureAction&amp; right)</name>
                            <syntax>public bool operator==(const FailureAction&amp; left, const FailureAction&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.8366"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.8366"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1"/>
                        </overload>
                        <overload id="function_op_eq_7B4D9583A4064703F3E39A049B876C8C28D80611">
                            <name>operator==(const ParsingAction&amp; left, const ParsingAction&amp; right)</name>
                            <syntax>public bool operator==(const ParsingAction&amp; left, const ParsingAction&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.8359"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.8359"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1"/>
                        </overload>
                        <overload id="function_op_eq_6C2881406AA71A8B917AB57130C80643460820BE">
                            <name>operator==(const PostCall&amp; left, const PostCall&amp; right)</name>
                            <syntax>public bool operator==(const PostCall&amp; left, const PostCall&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.8817"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.8817"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1"/>
                        </overload>
                        <overload id="function_op_eq_F40797939D17C143BAB0854F2E01B03C1469DBA0">
                            <name>operator==(const PreCall&amp; left, const PreCall&amp; right)</name>
                            <syntax>public bool operator==(const PreCall&amp; left, const PreCall&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.8810"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.8810"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1"/>
                        </overload>
                    </overloads>
                </function>
            </functions>
            <classDelegates>
                <classDelegate id="7398">
                    <name>FailureAction</name>
                    <syntax>public class delegate void FailureAction(ParsingData* parsingData);</syntax>
                    <parameters>
                        <parameter>
                            <name>parsingData</name>
                            <type ref="type.7537"/>
                        </parameter>
                    </parameters>
                </classDelegate>
                <classDelegate id="7397">
                    <name>ParsingAction</name>
                    <syntax>public class delegate void ParsingAction(const uchar* matchBegin, const uchar* matchEnd, const Span&amp; span, const String&lt;char>&amp; fileName, ParsingData* parsingData, bool&amp; pass);</syntax>
                    <parameters>
                        <parameter>
                            <name>matchBegin</name>
                            <type ref="type.1135"/>
                        </parameter>
                        <parameter>
                            <name>matchEnd</name>
                            <type ref="type.1135"/>
                        </parameter>
                        <parameter>
                            <name>span</name>
                            <type ref="type.7766"/>
                        </parameter>
                        <parameter>
                            <name>fileName</name>
                            <type ref="type.1045"/>
                        </parameter>
                        <parameter>
                            <name>parsingData</name>
                            <type ref="type.7537"/>
                        </parameter>
                        <parameter>
                            <name>pass</name>
                            <type ref="type.18"/>
                        </parameter>
                    </parameters>
                </classDelegate>
                <classDelegate id="7508">
                    <name>PostCall</name>
                    <syntax>public class delegate void PostCall(Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData, bool matched);</syntax>
                    <parameters>
                        <parameter>
                            <name>stack</name>
                            <type ref="type.8412"/>
                        </parameter>
                        <parameter>
                            <name>parsingData</name>
                            <type ref="type.7537"/>
                        </parameter>
                        <parameter>
                            <name>matched</name>
                            <type ref="type.1"/>
                        </parameter>
                    </parameters>
                </classDelegate>
                <classDelegate id="7507">
                    <name>PreCall</name>
                    <syntax>public class delegate void PreCall(Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp; stack, ParsingData* parsingData);</syntax>
                    <parameters>
                        <parameter>
                            <name>stack</name>
                            <type ref="type.8412"/>
                        </parameter>
                        <parameter>
                            <name>parsingData</name>
                            <type ref="type.7537"/>
                        </parameter>
                    </parameters>
                </classDelegate>
            </classDelegates>
        </namespace>
    </namespaces>
    <types>
        <type id="8812">
            <name>@dlg_type</name>
        </type>
        <type id="8361">
            <name>@dlg_type</name>
        </type>
        <type id="8805">
            <name>@dlg_type</name>
        </type>
        <type id="8354">
            <name>@dlg_type</name>
        </type>
        <type id="8355">
            <name>@objectDelegatePairType</name>
        </type>
        <type id="8813">
            <name>@objectDelegatePairType</name>
        </type>
        <type id="8362">
            <name>@objectDelegatePairType</name>
        </type>
        <type id="8806">
            <name>@objectDelegatePairType</name>
        </type>
        <type id="7399">
            <name>ActionParser</name>
        </type>
        <type derived="true" id="type.7401">
            <name>ActionParser&amp;</name>
            <content>
                <baseType ref="7399"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7400">
            <name>ActionParser*</name>
            <content>
                <baseType ref="7399"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9180">
            <name>ActionParser*&amp;</name>
            <content>
                <baseType ref="7399"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9190">
            <name>ActionParser*&amp;&amp;</name>
            <content>
                <baseType ref="7399"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9181">
            <name>ActionParser**</name>
            <content>
                <baseType ref="7399"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9592">
            <name>ActionParser**&amp;</name>
            <content>
                <baseType ref="7399"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9593">
            <name>ActionParser**&amp;&amp;</name>
            <content>
                <baseType ref="7399"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9591">
            <name>ActionParser***</name>
            <content>
                <baseType ref="7399"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1206">
            <name>AddressOf&amp;&amp;</name>
            <content>
                <baseType ref="6507"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="7713">
            <name>AlphabeticParser</name>
        </type>
        <type derived="true" id="type.7715">
            <name>AlphabeticParser&amp;</name>
            <content>
                <baseType ref="7713"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7714">
            <name>AlphabeticParser*</name>
            <content>
                <baseType ref="7713"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7438">
            <name>AlternativeParser</name>
        </type>
        <type derived="true" id="type.7440">
            <name>AlternativeParser&amp;</name>
            <content>
                <baseType ref="7438"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7439">
            <name>AlternativeParser*</name>
            <content>
                <baseType ref="7438"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7722">
            <name>AnyCharParser</name>
        </type>
        <type derived="true" id="type.7724">
            <name>AnyCharParser&amp;</name>
            <content>
                <baseType ref="7722"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7723">
            <name>AnyCharParser*</name>
            <content>
                <baseType ref="7722"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7509">
            <name>ArgumentCollector</name>
        </type>
        <type derived="true" id="type.7511">
            <name>ArgumentCollector&amp;</name>
            <content>
                <baseType ref="7509"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7510">
            <name>ArgumentCollector*</name>
            <content>
                <baseType ref="7509"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1278">
            <name>AssertStatement&amp;&amp;</name>
            <content>
                <baseType ref="6723"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="7731">
            <name>AttrOrVar</name>
        </type>
        <type derived="true" id="type.7733">
            <name>AttrOrVar&amp;</name>
            <content>
                <baseType ref="7731"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9164">
            <name>AttrOrVar&amp;&amp;</name>
            <content>
                <baseType ref="7731"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7732">
            <name>AttrOrVar*</name>
            <content>
                <baseType ref="7731"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9589">
            <name>AttrOrVar*&amp;</name>
            <content>
                <baseType ref="7731"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9590">
            <name>AttrOrVar*&amp;&amp;</name>
            <content>
                <baseType ref="7731"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9588">
            <name>AttrOrVar**</name>
            <content>
                <baseType ref="7731"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7710">
            <name>BaseCharParser</name>
        </type>
        <type derived="true" id="type.7712">
            <name>BaseCharParser&amp;</name>
            <content>
                <baseType ref="7710"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7711">
            <name>BaseCharParser*</name>
            <content>
                <baseType ref="7710"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8638" specialization="true">
            <name>BinaryFun&lt;Grammar*, Grammar*, bool></name>
            <content>
                <primaryType ref="1383"/>
                <argumentType ref="type.7469"/>
                <argumentType ref="type.7469"/>
                <argumentType ref="type.1"/>
            </content>
        </type>
        <type derived="true" id="type.8640">
            <name>BinaryFun&lt;Grammar*, Grammar*, bool>&amp;</name>
            <content>
                <baseType ref="type.8638"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9406">
            <name>BinaryFun&lt;Grammar*, Grammar*, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.8638"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8639">
            <name>BinaryFun&lt;Grammar*, Grammar*, bool>*</name>
            <content>
                <baseType ref="type.8638"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8446" specialization="true">
            <name>BinaryFun&lt;String&lt;uchar>, String&lt;uchar>, bool></name>
            <content>
                <primaryType ref="1383"/>
                <argumentType ref="type.1128"/>
                <argumentType ref="type.1128"/>
                <argumentType ref="type.1"/>
            </content>
        </type>
        <type derived="true" id="type.8448">
            <name>BinaryFun&lt;String&lt;uchar>, String&lt;uchar>, bool>&amp;</name>
            <content>
                <baseType ref="type.8446"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9328">
            <name>BinaryFun&lt;String&lt;uchar>, String&lt;uchar>, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.8446"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8447">
            <name>BinaryFun&lt;String&lt;uchar>, String&lt;uchar>, bool>*</name>
            <content>
                <baseType ref="type.8446"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7429">
            <name>BinaryParser</name>
        </type>
        <type derived="true" id="type.7431">
            <name>BinaryParser&amp;</name>
            <content>
                <baseType ref="7429"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7430">
            <name>BinaryParser*</name>
            <content>
                <baseType ref="7429"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8637" specialization="true">
            <name>BinaryPred&lt;Grammar*, Grammar*></name>
            <content>
                <primaryType ref="1472"/>
                <argumentType ref="type.7469"/>
                <argumentType ref="type.7469"/>
            </content>
        </type>
        <type derived="true" id="type.8642">
            <name>BinaryPred&lt;Grammar*, Grammar*>&amp;</name>
            <content>
                <baseType ref="type.8637"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9403">
            <name>BinaryPred&lt;Grammar*, Grammar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8637"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8641">
            <name>BinaryPred&lt;Grammar*, Grammar*>*</name>
            <content>
                <baseType ref="type.8637"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8445" specialization="true">
            <name>BinaryPred&lt;String&lt;uchar>, String&lt;uchar>></name>
            <content>
                <primaryType ref="1472"/>
                <argumentType ref="type.1128"/>
                <argumentType ref="type.1128"/>
            </content>
        </type>
        <type derived="true" id="type.8450">
            <name>BinaryPred&lt;String&lt;uchar>, String&lt;uchar>>&amp;</name>
            <content>
                <baseType ref="type.8445"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9325">
            <name>BinaryPred&lt;String&lt;uchar>, String&lt;uchar>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8445"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8449">
            <name>BinaryPred&lt;String&lt;uchar>, String&lt;uchar>>*</name>
            <content>
                <baseType ref="type.8445"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8676" specialization="true">
            <name>Bucket&lt;Grammar*></name>
            <content>
                <primaryType ref="2091"/>
                <argumentType ref="type.7469"/>
            </content>
        </type>
        <type derived="true" id="type.8678">
            <name>Bucket&lt;Grammar*>&amp;</name>
            <content>
                <baseType ref="type.8676"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8677">
            <name>Bucket&lt;Grammar*>*</name>
            <content>
                <baseType ref="type.8676"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8709">
            <name>Bucket&lt;Grammar*>*&amp;</name>
            <content>
                <baseType ref="type.8676"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8719">
            <name>Bucket&lt;Grammar*>*&amp;&amp;</name>
            <content>
                <baseType ref="type.8676"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8710">
            <name>Bucket&lt;Grammar*>**</name>
            <content>
                <baseType ref="type.8676"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9410">
            <name>Bucket&lt;Grammar*>**&amp;</name>
            <content>
                <baseType ref="type.8676"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9411">
            <name>Bucket&lt;Grammar*>**&amp;&amp;</name>
            <content>
                <baseType ref="type.8676"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9409">
            <name>Bucket&lt;Grammar*>***</name>
            <content>
                <baseType ref="type.8676"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.892">
            <name>Bucket&lt;Pair&lt;K, T>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.1802"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8924" specialization="true">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>></name>
            <content>
                <primaryType ref="2091"/>
                <argumentType ref="type.8898"/>
            </content>
        </type>
        <type derived="true" id="type.8926">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>&amp;</name>
            <content>
                <baseType ref="type.8924"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8925">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*</name>
            <content>
                <baseType ref="type.8924"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8958">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;</name>
            <content>
                <baseType ref="type.8924"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8968">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.8924"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8959">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**</name>
            <content>
                <baseType ref="type.8924"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9522">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**&amp;</name>
            <content>
                <baseType ref="type.8924"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9523">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**&amp;&amp;</name>
            <content>
                <baseType ref="type.8924"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9521">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>***</name>
            <content>
                <baseType ref="type.8924"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9002" specialization="true">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>></name>
            <content>
                <primaryType ref="2091"/>
                <argumentType ref="type.8975"/>
            </content>
        </type>
        <type derived="true" id="type.9004">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>&amp;</name>
            <content>
                <baseType ref="type.9002"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9003">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*</name>
            <content>
                <baseType ref="type.9002"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9036">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;</name>
            <content>
                <baseType ref="type.9002"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9046">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.9002"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9037">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**</name>
            <content>
                <baseType ref="type.9002"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9531">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**&amp;</name>
            <content>
                <baseType ref="type.9002"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9532">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**&amp;&amp;</name>
            <content>
                <baseType ref="type.9002"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9530">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>***</name>
            <content>
                <baseType ref="type.9002"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9250" specialization="true">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>></name>
            <content>
                <primaryType ref="2091"/>
                <argumentType ref="type.9223"/>
            </content>
        </type>
        <type derived="true" id="type.9252">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>&amp;</name>
            <content>
                <baseType ref="type.9250"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9251">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*</name>
            <content>
                <baseType ref="type.9250"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9284">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;</name>
            <content>
                <baseType ref="type.9250"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9294">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.9250"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9285">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**</name>
            <content>
                <baseType ref="type.9250"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9634">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**&amp;</name>
            <content>
                <baseType ref="type.9250"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9635">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**&amp;&amp;</name>
            <content>
                <baseType ref="type.9250"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9633">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>***</name>
            <content>
                <baseType ref="type.9250"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8486" specialization="true">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>></name>
            <content>
                <primaryType ref="2091"/>
                <argumentType ref="type.8461"/>
            </content>
        </type>
        <type derived="true" id="type.8488">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>&amp;</name>
            <content>
                <baseType ref="type.8486"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8487">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*</name>
            <content>
                <baseType ref="type.8486"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8520">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;</name>
            <content>
                <baseType ref="type.8486"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8530">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.8486"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8521">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**</name>
            <content>
                <baseType ref="type.8486"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9332">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**&amp;</name>
            <content>
                <baseType ref="type.8486"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9333">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**&amp;&amp;</name>
            <content>
                <baseType ref="type.8486"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9331">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>***</name>
            <content>
                <baseType ref="type.8486"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8762" specialization="true">
            <name>Bucket&lt;String&lt;uchar>></name>
            <content>
                <primaryType ref="2091"/>
                <argumentType ref="type.1128"/>
            </content>
        </type>
        <type derived="true" id="type.8764">
            <name>Bucket&lt;String&lt;uchar>>&amp;</name>
            <content>
                <baseType ref="type.8762"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8763">
            <name>Bucket&lt;String&lt;uchar>>*</name>
            <content>
                <baseType ref="type.8762"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8794">
            <name>Bucket&lt;String&lt;uchar>>*&amp;</name>
            <content>
                <baseType ref="type.8762"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8804">
            <name>Bucket&lt;String&lt;uchar>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.8762"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8795">
            <name>Bucket&lt;String&lt;uchar>>**</name>
            <content>
                <baseType ref="type.8762"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9459">
            <name>Bucket&lt;String&lt;uchar>>**&amp;</name>
            <content>
                <baseType ref="type.8762"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9460">
            <name>Bucket&lt;String&lt;uchar>>**&amp;&amp;</name>
            <content>
                <baseType ref="type.8762"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9458">
            <name>Bucket&lt;String&lt;uchar>>***</name>
            <content>
                <baseType ref="type.8762"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1960" specialization="true">
            <name>Bucket&lt;T></name>
            <content>
                <primaryType ref="2091"/>
                <argumentType ref="621"/>
            </content>
        </type>
        <type derived="true" id="type.901">
            <name>Bucket&lt;T>*&amp;&amp;</name>
            <content>
                <baseType ref="type.1960"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.915">
            <name>Bucket&lt;ValueType>*&amp;&amp;</name>
            <content>
                <baseType ref="type.2145"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="7605">
            <name>CasedLetterParser</name>
        </type>
        <type derived="true" id="type.7607">
            <name>CasedLetterParser&amp;</name>
            <content>
                <baseType ref="7605"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7606">
            <name>CasedLetterParser*</name>
            <content>
                <baseType ref="7605"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7557">
            <name>CharParser</name>
        </type>
        <type derived="true" id="type.7559">
            <name>CharParser&amp;</name>
            <content>
                <baseType ref="7557"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1310">
            <name>CharParser&amp;&amp;</name>
            <content>
                <baseType ref="7557"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7558">
            <name>CharParser*</name>
            <content>
                <baseType ref="7557"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7569">
            <name>CharRange</name>
        </type>
        <type derived="true" id="type.7571">
            <name>CharRange&amp;</name>
            <content>
                <baseType ref="7569"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9120">
            <name>CharRange&amp;&amp;</name>
            <content>
                <baseType ref="7569"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7570">
            <name>CharRange*</name>
            <content>
                <baseType ref="7569"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9585">
            <name>CharRange*&amp;</name>
            <content>
                <baseType ref="7569"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9584">
            <name>CharRange**</name>
            <content>
                <baseType ref="7569"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7575">
            <name>CharSetParser</name>
        </type>
        <type derived="true" id="type.7577">
            <name>CharSetParser&amp;</name>
            <content>
                <baseType ref="7575"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9121">
            <name>CharSetParser&amp;&amp;</name>
            <content>
                <baseType ref="7575"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7576">
            <name>CharSetParser*</name>
            <content>
                <baseType ref="7575"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7650">
            <name>ClosePunctuationParser</name>
        </type>
        <type derived="true" id="type.7652">
            <name>ClosePunctuationParser&amp;</name>
            <content>
                <baseType ref="7650"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7651">
            <name>ClosePunctuationParser*</name>
            <content>
                <baseType ref="7650"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7405">
            <name>CodeExpandingVisitor</name>
        </type>
        <type derived="true" id="type.7407">
            <name>CodeExpandingVisitor&amp;</name>
            <content>
                <baseType ref="7405"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1293">
            <name>CodeExpandingVisitor&amp;&amp;</name>
            <content>
                <baseType ref="7405"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7406">
            <name>CodeExpandingVisitor*</name>
            <content>
                <baseType ref="7405"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9352">
            <name>CodeExpandingVisitor*&amp;</name>
            <content>
                <baseType ref="7405"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9351">
            <name>CodeExpandingVisitor**</name>
            <content>
                <baseType ref="7405"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1185">
            <name>CodeFormatter&amp;&amp;</name>
            <content>
                <baseType ref="342"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1221">
            <name>Complement&amp;&amp;</name>
            <content>
                <baseType ref="6522"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7361">
            <name>CompoundStatement&amp;</name>
            <content>
                <baseType ref="6651"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.790">
            <name>CompoundStatement&amp;</name>
            <content>
                <baseType ref="6651"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7360">
            <name>CompoundStatement*</name>
            <content>
                <baseType ref="6651"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.789">
            <name>CompoundStatement*</name>
            <content>
                <baseType ref="6651"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6652">
            <name>CompoundStatement*</name>
            <content>
                <baseType ref="6651"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7641">
            <name>ConnectorPunctuationParser</name>
        </type>
        <type derived="true" id="type.7643">
            <name>ConnectorPunctuationParser&amp;</name>
            <content>
                <baseType ref="7641"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7642">
            <name>ConnectorPunctuationParser*</name>
            <content>
                <baseType ref="7641"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1281">
            <name>Const&amp;&amp;</name>
            <content>
                <baseType ref="6726"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1239">
            <name>Construct&amp;&amp;</name>
            <content>
                <baseType ref="6618"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="7833">
            <name>Context</name>
        </type>
        <type id="7803">
            <name>Context</name>
        </type>
        <type id="7875">
            <name>Context</name>
        </type>
        <type id="7893">
            <name>Context</name>
        </type>
        <type id="7905">
            <name>Context</name>
        </type>
        <type id="7863">
            <name>Context</name>
        </type>
        <type id="7827">
            <name>Context</name>
        </type>
        <type id="7815">
            <name>Context</name>
        </type>
        <type id="7809">
            <name>Context</name>
        </type>
        <type id="7839">
            <name>Context</name>
        </type>
        <type id="7785">
            <name>Context</name>
        </type>
        <type id="7881">
            <name>Context</name>
        </type>
        <type id="7779">
            <name>Context</name>
        </type>
        <type id="7899">
            <name>Context</name>
        </type>
        <type id="7869">
            <name>Context</name>
        </type>
        <type id="7821">
            <name>Context</name>
        </type>
        <type id="7797">
            <name>Context</name>
        </type>
        <type id="7773">
            <name>Context</name>
        </type>
        <type id="7917">
            <name>Context</name>
        </type>
        <type id="7851">
            <name>Context</name>
        </type>
        <type id="7857">
            <name>Context</name>
        </type>
        <type id="7845">
            <name>Context</name>
        </type>
        <type id="7911">
            <name>Context</name>
        </type>
        <type id="7791">
            <name>Context</name>
        </type>
        <type id="7529">
            <name>Context</name>
        </type>
        <type id="7887">
            <name>Context</name>
        </type>
        <type derived="true" id="type.7805">
            <name>Context&amp;</name>
            <content>
                <baseType ref="7803"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7865">
            <name>Context&amp;</name>
            <content>
                <baseType ref="7863"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7871">
            <name>Context&amp;</name>
            <content>
                <baseType ref="7869"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7835">
            <name>Context&amp;</name>
            <content>
                <baseType ref="7833"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7907">
            <name>Context&amp;</name>
            <content>
                <baseType ref="7905"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7853">
            <name>Context&amp;</name>
            <content>
                <baseType ref="7851"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7877">
            <name>Context&amp;</name>
            <content>
                <baseType ref="7875"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7859">
            <name>Context&amp;</name>
            <content>
                <baseType ref="7857"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7817">
            <name>Context&amp;</name>
            <content>
                <baseType ref="7815"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7889">
            <name>Context&amp;</name>
            <content>
                <baseType ref="7887"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7847">
            <name>Context&amp;</name>
            <content>
                <baseType ref="7845"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7823">
            <name>Context&amp;</name>
            <content>
                <baseType ref="7821"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7883">
            <name>Context&amp;</name>
            <content>
                <baseType ref="7881"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7919">
            <name>Context&amp;</name>
            <content>
                <baseType ref="7917"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7531">
            <name>Context&amp;</name>
            <content>
                <baseType ref="7529"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7841">
            <name>Context&amp;</name>
            <content>
                <baseType ref="7839"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7829">
            <name>Context&amp;</name>
            <content>
                <baseType ref="7827"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7811">
            <name>Context&amp;</name>
            <content>
                <baseType ref="7809"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7895">
            <name>Context&amp;</name>
            <content>
                <baseType ref="7893"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7901">
            <name>Context&amp;</name>
            <content>
                <baseType ref="7899"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7919">
            <name>Context&amp;</name>
            <content>
                <baseType ref="7917"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7799">
            <name>Context&amp;</name>
            <content>
                <baseType ref="7797"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7793">
            <name>Context&amp;</name>
            <content>
                <baseType ref="7791"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7787">
            <name>Context&amp;</name>
            <content>
                <baseType ref="7785"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7781">
            <name>Context&amp;</name>
            <content>
                <baseType ref="7779"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7775">
            <name>Context&amp;</name>
            <content>
                <baseType ref="7773"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7913">
            <name>Context&amp;</name>
            <content>
                <baseType ref="7911"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7912">
            <name>Context*</name>
            <content>
                <baseType ref="7911"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7846">
            <name>Context*</name>
            <content>
                <baseType ref="7845"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7834">
            <name>Context*</name>
            <content>
                <baseType ref="7833"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7840">
            <name>Context*</name>
            <content>
                <baseType ref="7839"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7864">
            <name>Context*</name>
            <content>
                <baseType ref="7863"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7828">
            <name>Context*</name>
            <content>
                <baseType ref="7827"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7810">
            <name>Context*</name>
            <content>
                <baseType ref="7809"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7804">
            <name>Context*</name>
            <content>
                <baseType ref="7803"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7894">
            <name>Context*</name>
            <content>
                <baseType ref="7893"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7876">
            <name>Context*</name>
            <content>
                <baseType ref="7875"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7900">
            <name>Context*</name>
            <content>
                <baseType ref="7899"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7858">
            <name>Context*</name>
            <content>
                <baseType ref="7857"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7530">
            <name>Context*</name>
            <content>
                <baseType ref="7529"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7906">
            <name>Context*</name>
            <content>
                <baseType ref="7905"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7822">
            <name>Context*</name>
            <content>
                <baseType ref="7821"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7798">
            <name>Context*</name>
            <content>
                <baseType ref="7797"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7870">
            <name>Context*</name>
            <content>
                <baseType ref="7869"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7792">
            <name>Context*</name>
            <content>
                <baseType ref="7791"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7882">
            <name>Context*</name>
            <content>
                <baseType ref="7881"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7786">
            <name>Context*</name>
            <content>
                <baseType ref="7785"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7816">
            <name>Context*</name>
            <content>
                <baseType ref="7815"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7780">
            <name>Context*</name>
            <content>
                <baseType ref="7779"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7852">
            <name>Context*</name>
            <content>
                <baseType ref="7851"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7774">
            <name>Context*</name>
            <content>
                <baseType ref="7773"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7888">
            <name>Context*</name>
            <content>
                <baseType ref="7887"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7918">
            <name>Context*</name>
            <content>
                <baseType ref="7917"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9762">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="7821"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9864">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="7905"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9830">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="7881"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9750">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="7815"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9737">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="7809"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9767">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="7827"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9797">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="7863"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9684">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="7785"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9777">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="7839"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9835">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="7887"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9500">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="7529"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9657">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="7773"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9792">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="7857"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9825">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="7875"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9772">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="7833"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9847">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="7893"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9712">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="7797"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9724">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="7803"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9782">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="7845"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9698">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="7791"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9787">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="7851"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9881">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="7917"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9876">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="7911"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9881">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="7917"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9671">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="7779"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9859">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="7899"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9811">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="7869"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9501">
            <name>Context*&amp;&amp;</name>
            <content>
                <baseType ref="7529"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9656">
            <name>Context**</name>
            <content>
                <baseType ref="7773"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9824">
            <name>Context**</name>
            <content>
                <baseType ref="7875"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9875">
            <name>Context**</name>
            <content>
                <baseType ref="7911"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9499">
            <name>Context**</name>
            <content>
                <baseType ref="7529"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9834">
            <name>Context**</name>
            <content>
                <baseType ref="7887"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9846">
            <name>Context**</name>
            <content>
                <baseType ref="7893"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9781">
            <name>Context**</name>
            <content>
                <baseType ref="7845"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9863">
            <name>Context**</name>
            <content>
                <baseType ref="7905"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9858">
            <name>Context**</name>
            <content>
                <baseType ref="7899"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9880">
            <name>Context**</name>
            <content>
                <baseType ref="7917"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9875">
            <name>Context**</name>
            <content>
                <baseType ref="7911"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9697">
            <name>Context**</name>
            <content>
                <baseType ref="7791"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9711">
            <name>Context**</name>
            <content>
                <baseType ref="7797"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9723">
            <name>Context**</name>
            <content>
                <baseType ref="7803"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9736">
            <name>Context**</name>
            <content>
                <baseType ref="7809"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9749">
            <name>Context**</name>
            <content>
                <baseType ref="7815"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9761">
            <name>Context**</name>
            <content>
                <baseType ref="7821"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9766">
            <name>Context**</name>
            <content>
                <baseType ref="7827"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9829">
            <name>Context**</name>
            <content>
                <baseType ref="7881"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9771">
            <name>Context**</name>
            <content>
                <baseType ref="7833"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9776">
            <name>Context**</name>
            <content>
                <baseType ref="7839"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9786">
            <name>Context**</name>
            <content>
                <baseType ref="7851"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9791">
            <name>Context**</name>
            <content>
                <baseType ref="7857"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9796">
            <name>Context**</name>
            <content>
                <baseType ref="7863"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9810">
            <name>Context**</name>
            <content>
                <baseType ref="7869"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9683">
            <name>Context**</name>
            <content>
                <baseType ref="7785"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9670">
            <name>Context**</name>
            <content>
                <baseType ref="7779"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7532">
            <name>ContextStack</name>
        </type>
        <type derived="true" id="type.7534">
            <name>ContextStack&amp;</name>
            <content>
                <baseType ref="7532"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9506">
            <name>ContextStack&amp;&amp;</name>
            <content>
                <baseType ref="7532"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7533">
            <name>ContextStack*</name>
            <content>
                <baseType ref="7532"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7692">
            <name>ControlParser</name>
        </type>
        <type derived="true" id="type.7694">
            <name>ControlParser&amp;</name>
            <content>
                <baseType ref="7692"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7693">
            <name>ControlParser*</name>
            <content>
                <baseType ref="7692"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7668">
            <name>CurrencySymbolParser</name>
        </type>
        <type derived="true" id="type.7670">
            <name>CurrencySymbolParser&amp;</name>
            <content>
                <baseType ref="7668"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7669">
            <name>CurrencySymbolParser*</name>
            <content>
                <baseType ref="7668"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7644">
            <name>DashPunctuationParser</name>
        </type>
        <type derived="true" id="type.7646">
            <name>DashPunctuationParser&amp;</name>
            <content>
                <baseType ref="7644"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7645">
            <name>DashPunctuationParser*</name>
            <content>
                <baseType ref="7644"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7629">
            <name>DecimalNumberParser</name>
        </type>
        <type derived="true" id="type.7631">
            <name>DecimalNumberParser&amp;</name>
            <content>
                <baseType ref="7629"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7630">
            <name>DecimalNumberParser*</name>
            <content>
                <baseType ref="7629"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1257">
            <name>DeleteStatement&amp;&amp;</name>
            <content>
                <baseType ref="6681"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1203">
            <name>Deref&amp;&amp;</name>
            <content>
                <baseType ref="6504"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1260">
            <name>DestroyStatement&amp;&amp;</name>
            <content>
                <baseType ref="6684"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="7441">
            <name>DifferenceParser</name>
        </type>
        <type derived="true" id="type.7443">
            <name>DifferenceParser&amp;</name>
            <content>
                <baseType ref="7441"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7442">
            <name>DifferenceParser*</name>
            <content>
                <baseType ref="7441"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7608">
            <name>DigitParser</name>
        </type>
        <type derived="true" id="type.7610">
            <name>DigitParser&amp;</name>
            <content>
                <baseType ref="7608"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7609">
            <name>DigitParser*</name>
            <content>
                <baseType ref="7608"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7359">
            <name>DomObject&amp;</name>
            <content>
                <baseType ref="6485"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.788">
            <name>DomObject&amp;</name>
            <content>
                <baseType ref="6485"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7359">
            <name>DomObject&amp;</name>
            <content>
                <baseType ref="6485"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1197">
            <name>DomObject&amp;&amp;</name>
            <content>
                <baseType ref="6485"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.787">
            <name>DomObject*</name>
            <content>
                <baseType ref="6485"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6486">
            <name>DomObject*</name>
            <content>
                <baseType ref="6485"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7358">
            <name>DomObject*</name>
            <content>
                <baseType ref="6485"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7581">
            <name>EmptyParser</name>
        </type>
        <type derived="true" id="type.7583">
            <name>EmptyParser&amp;</name>
            <content>
                <baseType ref="7581"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7582">
            <name>EmptyParser*</name>
            <content>
                <baseType ref="7581"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7623">
            <name>EnclosingMarkParser</name>
        </type>
        <type derived="true" id="type.7625">
            <name>EnclosingMarkParser&amp;</name>
            <content>
                <baseType ref="7623"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7624">
            <name>EnclosingMarkParser*</name>
            <content>
                <baseType ref="7623"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8632" specialization="true">
            <name>EqualTo&lt;Grammar*></name>
            <content>
                <primaryType ref="1497"/>
                <argumentType ref="type.7469"/>
            </content>
        </type>
        <type derived="true" id="type.8646">
            <name>EqualTo&lt;Grammar*>&amp;</name>
            <content>
                <baseType ref="type.8632"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9399">
            <name>EqualTo&lt;Grammar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8632"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8645">
            <name>EqualTo&lt;Grammar*>*</name>
            <content>
                <baseType ref="type.8632"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8440" specialization="true">
            <name>EqualTo&lt;String&lt;uchar>></name>
            <content>
                <primaryType ref="1497"/>
                <argumentType ref="type.1128"/>
            </content>
        </type>
        <type derived="true" id="type.8454">
            <name>EqualTo&lt;String&lt;uchar>>&amp;</name>
            <content>
                <baseType ref="type.8440"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9321">
            <name>EqualTo&lt;String&lt;uchar>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8440"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8453">
            <name>EqualTo&lt;String&lt;uchar>>*</name>
            <content>
                <baseType ref="type.8440"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7444">
            <name>ExclusiveOrParser</name>
        </type>
        <type derived="true" id="type.7446">
            <name>ExclusiveOrParser&amp;</name>
            <content>
                <baseType ref="7444"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7445">
            <name>ExclusiveOrParser*</name>
            <content>
                <baseType ref="7444"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7495">
            <name>ExpandCodeVisitor</name>
        </type>
        <type derived="true" id="type.7497">
            <name>ExpandCodeVisitor&amp;</name>
            <content>
                <baseType ref="7495"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7496">
            <name>ExpandCodeVisitor*</name>
            <content>
                <baseType ref="7495"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7456">
            <name>ExpectationFailure</name>
        </type>
        <type derived="true" id="type.7458">
            <name>ExpectationFailure&amp;</name>
            <content>
                <baseType ref="7456"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9369">
            <name>ExpectationFailure&amp;&amp;</name>
            <content>
                <baseType ref="7456"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7457">
            <name>ExpectationFailure*</name>
            <content>
                <baseType ref="7456"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9366">
            <name>ExpectationFailure*&amp;</name>
            <content>
                <baseType ref="7456"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9365">
            <name>ExpectationFailure**</name>
            <content>
                <baseType ref="7456"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7423">
            <name>ExpectationParser</name>
        </type>
        <type derived="true" id="type.7425">
            <name>ExpectationParser&amp;</name>
            <content>
                <baseType ref="7423"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1305">
            <name>ExpectationParser&amp;&amp;</name>
            <content>
                <baseType ref="7423"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7424">
            <name>ExpectationParser*</name>
            <content>
                <baseType ref="7423"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1263">
            <name>ExpressionStatement&amp;&amp;</name>
            <content>
                <baseType ref="6690"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="7398">
            <name>FailureAction</name>
        </type>
        <type derived="true" id="type.8364">
            <name>FailureAction&amp;</name>
            <content>
                <baseType ref="7398"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8367">
            <name>FailureAction&amp;&amp;</name>
            <content>
                <baseType ref="7398"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8363">
            <name>FailureAction*</name>
            <content>
                <baseType ref="7398"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7453">
            <name>FileInfo</name>
        </type>
        <type derived="true" id="type.7455">
            <name>FileInfo&amp;</name>
            <content>
                <baseType ref="7453"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7454">
            <name>FileInfo*</name>
            <content>
                <baseType ref="7453"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9371">
            <name>FileInfo*&amp;</name>
            <content>
                <baseType ref="7453"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9370">
            <name>FileInfo**</name>
            <content>
                <baseType ref="7453"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7656">
            <name>FinalPunctuationParser</name>
        </type>
        <type derived="true" id="type.7658">
            <name>FinalPunctuationParser&amp;</name>
            <content>
                <baseType ref="7656"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7657">
            <name>FinalPunctuationParser*</name>
            <content>
                <baseType ref="7656"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7695">
            <name>FormatParser</name>
        </type>
        <type derived="true" id="type.7697">
            <name>FormatParser&amp;</name>
            <content>
                <baseType ref="7695"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7696">
            <name>FormatParser*</name>
            <content>
                <baseType ref="7695"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.847">
            <name>ForwardList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.1284"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1254" specialization="true">
            <name>ForwardListNodeIterator&lt;T, R, P></name>
            <content>
                <primaryType ref="1254"/>
                <argumentType ref="523"/>
                <argumentType ref="524"/>
                <argumentType ref="525"/>
            </content>
        </type>
        <type derived="true" id="type.844">
            <name>ForwardListNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.1269"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.843">
            <name>ForwardListNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.1254"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1340" specialization="true">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="1254"/>
                <argumentType ref="531"/>
                <argumentType ref="type.1337"/>
                <argumentType ref="type.1339"/>
            </content>
        </type>
        <type derived="true" id="type.851">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1372"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.849">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1340"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.846">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1308"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.845">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1293"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.848">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1325"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.850">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1357"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1269">
            <name>GotoCaseStatement&amp;&amp;</name>
            <content>
                <baseType ref="6708"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1254">
            <name>GotoStatement&amp;&amp;</name>
            <content>
                <baseType ref="6675"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="7468">
            <name>Grammar</name>
        </type>
        <type derived="true" id="type.7470">
            <name>Grammar&amp;</name>
            <content>
                <baseType ref="7468"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7469">
            <name>Grammar*</name>
            <content>
                <baseType ref="7468"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8668">
            <name>Grammar*&amp;</name>
            <content>
                <baseType ref="7468"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8901">
            <name>Grammar*&amp;&amp;</name>
            <content>
                <baseType ref="7468"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8669">
            <name>Grammar**</name>
            <content>
                <baseType ref="7468"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7707">
            <name>GraphicParser</name>
        </type>
        <type derived="true" id="type.7709">
            <name>GraphicParser&amp;</name>
            <content>
                <baseType ref="7707"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7708">
            <name>GraphicParser*</name>
            <content>
                <baseType ref="7707"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8892" specialization="true">
            <name>HashMap&lt;String&lt;uchar>, Grammar*, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>></name>
            <content>
                <primaryType ref="1767"/>
                <argumentType ref="type.1128"/>
                <argumentType ref="type.7469"/>
                <argumentType ref="type.8434"/>
                <argumentType ref="type.8440"/>
            </content>
        </type>
        <type derived="true" id="type.8894">
            <name>HashMap&lt;String&lt;uchar>, Grammar*, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <baseType ref="type.8892"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8893">
            <name>HashMap&lt;String&lt;uchar>, Grammar*, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*</name>
            <content>
                <baseType ref="type.8892"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9566">
            <name>HashMap&lt;String&lt;uchar>, Grammar*, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*&amp;</name>
            <content>
                <baseType ref="type.8892"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9565">
            <name>HashMap&lt;String&lt;uchar>, Grammar*, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>**</name>
            <content>
                <baseType ref="type.8892"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8969" specialization="true">
            <name>HashMap&lt;String&lt;uchar>, Namespace*, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>></name>
            <content>
                <primaryType ref="1767"/>
                <argumentType ref="type.1128"/>
                <argumentType ref="type.7505"/>
                <argumentType ref="type.8434"/>
                <argumentType ref="type.8440"/>
            </content>
        </type>
        <type derived="true" id="type.8971">
            <name>HashMap&lt;String&lt;uchar>, Namespace*, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <baseType ref="type.8969"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8970">
            <name>HashMap&lt;String&lt;uchar>, Namespace*, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*</name>
            <content>
                <baseType ref="type.8969"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9548">
            <name>HashMap&lt;String&lt;uchar>, Namespace*, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*&amp;</name>
            <content>
                <baseType ref="type.8969"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9547">
            <name>HashMap&lt;String&lt;uchar>, Namespace*, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>**</name>
            <content>
                <baseType ref="type.8969"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9217" specialization="true">
            <name>HashMap&lt;String&lt;uchar>, ParsingObject*, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>></name>
            <content>
                <primaryType ref="1767"/>
                <argumentType ref="type.1128"/>
                <argumentType ref="type.7552"/>
                <argumentType ref="type.8434"/>
                <argumentType ref="type.8440"/>
            </content>
        </type>
        <type derived="true" id="type.9219">
            <name>HashMap&lt;String&lt;uchar>, ParsingObject*, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <baseType ref="type.9217"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9218">
            <name>HashMap&lt;String&lt;uchar>, ParsingObject*, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*</name>
            <content>
                <baseType ref="type.9217"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8455" specialization="true">
            <name>HashMap&lt;String&lt;uchar>, String&lt;uchar>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>></name>
            <content>
                <primaryType ref="1767"/>
                <argumentType ref="type.1128"/>
                <argumentType ref="type.1128"/>
                <argumentType ref="type.8434"/>
                <argumentType ref="type.8440"/>
            </content>
        </type>
        <type derived="true" id="type.8457">
            <name>HashMap&lt;String&lt;uchar>, String&lt;uchar>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <baseType ref="type.8455"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8456">
            <name>HashMap&lt;String&lt;uchar>, String&lt;uchar>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*</name>
            <content>
                <baseType ref="type.8455"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9603">
            <name>HashMap&lt;String&lt;uchar>, String&lt;uchar>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*&amp;</name>
            <content>
                <baseType ref="type.8455"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9602">
            <name>HashMap&lt;String&lt;uchar>, String&lt;uchar>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>**</name>
            <content>
                <baseType ref="type.8455"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8647" specialization="true">
            <name>HashSet&lt;Grammar*, Hasher&lt;Grammar*>, EqualTo&lt;Grammar*>></name>
            <content>
                <primaryType ref="1930"/>
                <argumentType ref="type.7469"/>
                <argumentType ref="type.8625"/>
                <argumentType ref="type.8632"/>
            </content>
        </type>
        <type derived="true" id="type.8649">
            <name>HashSet&lt;Grammar*, Hasher&lt;Grammar*>, EqualTo&lt;Grammar*>>&amp;</name>
            <content>
                <baseType ref="type.8647"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8648">
            <name>HashSet&lt;Grammar*, Hasher&lt;Grammar*>, EqualTo&lt;Grammar*>>*</name>
            <content>
                <baseType ref="type.8647"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8735" specialization="true">
            <name>HashSet&lt;String&lt;uchar>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>></name>
            <content>
                <primaryType ref="1930"/>
                <argumentType ref="type.1128"/>
                <argumentType ref="type.8434"/>
                <argumentType ref="type.8440"/>
            </content>
        </type>
        <type derived="true" id="type.8737">
            <name>HashSet&lt;String&lt;uchar>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <baseType ref="type.8735"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8736">
            <name>HashSet&lt;String&lt;uchar>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*</name>
            <content>
                <baseType ref="type.8735"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8625" specialization="true">
            <name>Hasher&lt;Grammar*></name>
            <content>
                <primaryType ref="2084"/>
                <argumentType ref="type.7469"/>
            </content>
        </type>
        <type derived="true" id="type.8627">
            <name>Hasher&lt;Grammar*>&amp;</name>
            <content>
                <baseType ref="type.8625"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9393">
            <name>Hasher&lt;Grammar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8625"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8626">
            <name>Hasher&lt;Grammar*>*</name>
            <content>
                <baseType ref="type.8625"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8434" specialization="true">
            <name>Hasher&lt;String&lt;uchar>></name>
            <content>
                <primaryType ref="2084"/>
                <argumentType ref="type.1128"/>
            </content>
        </type>
        <type derived="true" id="type.8436">
            <name>Hasher&lt;String&lt;uchar>>&amp;</name>
            <content>
                <baseType ref="type.8434"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9315">
            <name>Hasher&lt;String&lt;uchar>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8434"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8435">
            <name>Hasher&lt;String&lt;uchar>>*</name>
            <content>
                <baseType ref="type.8434"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8662" specialization="true">
            <name>Hashtable&lt;Grammar*, Grammar*, Identity&lt;Grammar*>, Hasher&lt;Grammar*>, EqualTo&lt;Grammar*>></name>
            <content>
                <primaryType ref="2131"/>
                <argumentType ref="type.7469"/>
                <argumentType ref="type.7469"/>
                <argumentType ref="type.8653"/>
                <argumentType ref="type.8625"/>
                <argumentType ref="type.8632"/>
            </content>
        </type>
        <type derived="true" id="type.8664">
            <name>Hashtable&lt;Grammar*, Grammar*, Identity&lt;Grammar*>, Hasher&lt;Grammar*>, EqualTo&lt;Grammar*>>&amp;</name>
            <content>
                <baseType ref="type.8662"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8689">
            <name>Hashtable&lt;Grammar*, Grammar*, Identity&lt;Grammar*>, Hasher&lt;Grammar*>, EqualTo&lt;Grammar*>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8662"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8663">
            <name>Hashtable&lt;Grammar*, Grammar*, Identity&lt;Grammar*>, Hasher&lt;Grammar*>, EqualTo&lt;Grammar*>>*</name>
            <content>
                <baseType ref="type.8662"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9418">
            <name>Hashtable&lt;Grammar*, Grammar*, Identity&lt;Grammar*>, Hasher&lt;Grammar*>, EqualTo&lt;Grammar*>>*&amp;</name>
            <content>
                <baseType ref="type.8662"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9419">
            <name>Hashtable&lt;Grammar*, Grammar*, Identity&lt;Grammar*>, Hasher&lt;Grammar*>, EqualTo&lt;Grammar*>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.8662"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9417">
            <name>Hashtable&lt;Grammar*, Grammar*, Identity&lt;Grammar*>, Hasher&lt;Grammar*>, EqualTo&lt;Grammar*>>**</name>
            <content>
                <baseType ref="type.8662"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1790" specialization="true">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C></name>
            <content>
                <primaryType ref="2131"/>
                <argumentType ref="612"/>
                <argumentType ref="type.1773"/>
                <argumentType ref="type.1780"/>
                <argumentType ref="614"/>
                <argumentType ref="615"/>
            </content>
        </type>
        <type derived="true" id="type.887">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.1790"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.909">
            <name>Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>&amp;&amp;</name>
            <content>
                <baseType ref="type.2131"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8912" specialization="true">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Grammar*>, SelectFirst&lt;String&lt;uchar>, Grammar*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>></name>
            <content>
                <primaryType ref="2131"/>
                <argumentType ref="type.1128"/>
                <argumentType ref="type.8898"/>
                <argumentType ref="type.8902"/>
                <argumentType ref="type.8434"/>
                <argumentType ref="type.8440"/>
            </content>
        </type>
        <type derived="true" id="type.8914">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Grammar*>, SelectFirst&lt;String&lt;uchar>, Grammar*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <baseType ref="type.8912"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8938">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Grammar*>, SelectFirst&lt;String&lt;uchar>, Grammar*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8912"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8913">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Grammar*>, SelectFirst&lt;String&lt;uchar>, Grammar*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*</name>
            <content>
                <baseType ref="type.8912"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9554">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Grammar*>, SelectFirst&lt;String&lt;uchar>, Grammar*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*&amp;</name>
            <content>
                <baseType ref="type.8912"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9555">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Grammar*>, SelectFirst&lt;String&lt;uchar>, Grammar*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.8912"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9553">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Grammar*>, SelectFirst&lt;String&lt;uchar>, Grammar*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>**</name>
            <content>
                <baseType ref="type.8912"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8990" specialization="true">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Namespace*>, SelectFirst&lt;String&lt;uchar>, Namespace*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>></name>
            <content>
                <primaryType ref="2131"/>
                <argumentType ref="type.1128"/>
                <argumentType ref="type.8975"/>
                <argumentType ref="type.8980"/>
                <argumentType ref="type.8434"/>
                <argumentType ref="type.8440"/>
            </content>
        </type>
        <type derived="true" id="type.8992">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Namespace*>, SelectFirst&lt;String&lt;uchar>, Namespace*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <baseType ref="type.8990"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9016">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Namespace*>, SelectFirst&lt;String&lt;uchar>, Namespace*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8990"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8991">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Namespace*>, SelectFirst&lt;String&lt;uchar>, Namespace*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*</name>
            <content>
                <baseType ref="type.8990"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9540">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Namespace*>, SelectFirst&lt;String&lt;uchar>, Namespace*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*&amp;</name>
            <content>
                <baseType ref="type.8990"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9541">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Namespace*>, SelectFirst&lt;String&lt;uchar>, Namespace*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.8990"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9539">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Namespace*>, SelectFirst&lt;String&lt;uchar>, Namespace*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>**</name>
            <content>
                <baseType ref="type.8990"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9238" specialization="true">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, ParsingObject*>, SelectFirst&lt;String&lt;uchar>, ParsingObject*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>></name>
            <content>
                <primaryType ref="2131"/>
                <argumentType ref="type.1128"/>
                <argumentType ref="type.9223"/>
                <argumentType ref="type.9228"/>
                <argumentType ref="type.8434"/>
                <argumentType ref="type.8440"/>
            </content>
        </type>
        <type derived="true" id="type.9240">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, ParsingObject*>, SelectFirst&lt;String&lt;uchar>, ParsingObject*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <baseType ref="type.9238"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9264">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, ParsingObject*>, SelectFirst&lt;String&lt;uchar>, ParsingObject*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.9238"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9239">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, ParsingObject*>, SelectFirst&lt;String&lt;uchar>, ParsingObject*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*</name>
            <content>
                <baseType ref="type.9238"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9637">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, ParsingObject*>, SelectFirst&lt;String&lt;uchar>, ParsingObject*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*&amp;</name>
            <content>
                <baseType ref="type.9238"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9638">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, ParsingObject*>, SelectFirst&lt;String&lt;uchar>, ParsingObject*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.9238"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9636">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, ParsingObject*>, SelectFirst&lt;String&lt;uchar>, ParsingObject*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>**</name>
            <content>
                <baseType ref="type.9238"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8474" specialization="true">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, String&lt;uchar>>, SelectFirst&lt;String&lt;uchar>, String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>></name>
            <content>
                <primaryType ref="2131"/>
                <argumentType ref="type.1128"/>
                <argumentType ref="type.8461"/>
                <argumentType ref="type.8464"/>
                <argumentType ref="type.8434"/>
                <argumentType ref="type.8440"/>
            </content>
        </type>
        <type derived="true" id="type.8476">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, String&lt;uchar>>, SelectFirst&lt;String&lt;uchar>, String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <baseType ref="type.8474"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8500">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, String&lt;uchar>>, SelectFirst&lt;String&lt;uchar>, String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8474"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8475">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, String&lt;uchar>>, SelectFirst&lt;String&lt;uchar>, String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*</name>
            <content>
                <baseType ref="type.8474"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9347">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, String&lt;uchar>>, SelectFirst&lt;String&lt;uchar>, String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*&amp;</name>
            <content>
                <baseType ref="type.8474"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, String&lt;uchar>>, SelectFirst&lt;String&lt;uchar>, String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.8474"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9346">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, String&lt;uchar>>, SelectFirst&lt;String&lt;uchar>, String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>**</name>
            <content>
                <baseType ref="type.8474"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8750" specialization="true">
            <name>Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>></name>
            <content>
                <primaryType ref="2131"/>
                <argumentType ref="type.1128"/>
                <argumentType ref="type.1128"/>
                <argumentType ref="type.8741"/>
                <argumentType ref="type.8434"/>
                <argumentType ref="type.8440"/>
            </content>
        </type>
        <type derived="true" id="type.8752">
            <name>Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <baseType ref="type.8750"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8774">
            <name>Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8750"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8751">
            <name>Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*</name>
            <content>
                <baseType ref="type.8750"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9470">
            <name>Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*&amp;</name>
            <content>
                <baseType ref="type.8750"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9471">
            <name>Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.8750"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9469">
            <name>Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>**</name>
            <content>
                <baseType ref="type.8750"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.896">
            <name>Hashtable&lt;T, T, Identity&lt;T>, H, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.1946"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8670" specialization="true">
            <name>HashtableIterator&lt;Grammar*, Grammar*&amp;, Grammar**, Hashtable&lt;Grammar*, Grammar*, Identity&lt;Grammar*>, Hasher&lt;Grammar*>, EqualTo&lt;Grammar*>>></name>
            <content>
                <primaryType ref="2099"/>
                <argumentType ref="type.7469"/>
                <argumentType ref="type.8668"/>
                <argumentType ref="type.8669"/>
                <argumentType ref="type.8662"/>
            </content>
        </type>
        <type derived="true" id="type.8672">
            <name>HashtableIterator&lt;Grammar*, Grammar*&amp;, Grammar**, Hashtable&lt;Grammar*, Grammar*, Identity&lt;Grammar*>, Hasher&lt;Grammar*>, EqualTo&lt;Grammar*>>>&amp;</name>
            <content>
                <baseType ref="type.8670"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8693">
            <name>HashtableIterator&lt;Grammar*, Grammar*&amp;, Grammar**, Hashtable&lt;Grammar*, Grammar*, Identity&lt;Grammar*>, Hasher&lt;Grammar*>, EqualTo&lt;Grammar*>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8670"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8671">
            <name>HashtableIterator&lt;Grammar*, Grammar*&amp;, Grammar**, Hashtable&lt;Grammar*, Grammar*, Identity&lt;Grammar*>, Hasher&lt;Grammar*>, EqualTo&lt;Grammar*>>>*</name>
            <content>
                <baseType ref="type.8670"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8683" specialization="true">
            <name>HashtableIterator&lt;Grammar*, const Grammar*&amp;, const Grammar**, Hashtable&lt;Grammar*, Grammar*, Identity&lt;Grammar*>, Hasher&lt;Grammar*>, EqualTo&lt;Grammar*>>></name>
            <content>
                <primaryType ref="2099"/>
                <argumentType ref="type.7469"/>
                <argumentType ref="type.8631"/>
                <argumentType ref="type.8682"/>
                <argumentType ref="type.8662"/>
            </content>
        </type>
        <type derived="true" id="type.8685">
            <name>HashtableIterator&lt;Grammar*, const Grammar*&amp;, const Grammar**, Hashtable&lt;Grammar*, Grammar*, Identity&lt;Grammar*>, Hasher&lt;Grammar*>, EqualTo&lt;Grammar*>>>&amp;</name>
            <content>
                <baseType ref="type.8683"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8684">
            <name>HashtableIterator&lt;Grammar*, const Grammar*&amp;, const Grammar**, Hashtable&lt;Grammar*, Grammar*, Identity&lt;Grammar*>, Hasher&lt;Grammar*>, EqualTo&lt;Grammar*>>>*</name>
            <content>
                <baseType ref="type.8683"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1796" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <primaryType ref="2099"/>
                <argumentType ref="type.1773"/>
                <argumentType ref="type.1775"/>
                <argumentType ref="type.1774"/>
                <argumentType ref="type.1790"/>
            </content>
        </type>
        <type derived="true" id="type.888">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1796"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8918" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, Grammar*>, Pair&lt;String&lt;uchar>, Grammar*>&amp;, Pair&lt;String&lt;uchar>, Grammar*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Grammar*>, SelectFirst&lt;String&lt;uchar>, Grammar*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="2099"/>
                <argumentType ref="type.8898"/>
                <argumentType ref="type.8900"/>
                <argumentType ref="type.8899"/>
                <argumentType ref="type.8912"/>
            </content>
        </type>
        <type derived="true" id="type.8920">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, Grammar*>, Pair&lt;String&lt;uchar>, Grammar*>&amp;, Pair&lt;String&lt;uchar>, Grammar*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Grammar*>, SelectFirst&lt;String&lt;uchar>, Grammar*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.8918"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8942">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, Grammar*>, Pair&lt;String&lt;uchar>, Grammar*>&amp;, Pair&lt;String&lt;uchar>, Grammar*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Grammar*>, SelectFirst&lt;String&lt;uchar>, Grammar*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8918"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8919">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, Grammar*>, Pair&lt;String&lt;uchar>, Grammar*>&amp;, Pair&lt;String&lt;uchar>, Grammar*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Grammar*>, SelectFirst&lt;String&lt;uchar>, Grammar*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.8918"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8932" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, Grammar*>, const Pair&lt;String&lt;uchar>, Grammar*>&amp;, const Pair&lt;String&lt;uchar>, Grammar*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Grammar*>, SelectFirst&lt;String&lt;uchar>, Grammar*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="2099"/>
                <argumentType ref="type.8898"/>
                <argumentType ref="type.8909"/>
                <argumentType ref="type.8930"/>
                <argumentType ref="type.8912"/>
            </content>
        </type>
        <type derived="true" id="type.8934">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, Grammar*>, const Pair&lt;String&lt;uchar>, Grammar*>&amp;, const Pair&lt;String&lt;uchar>, Grammar*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Grammar*>, SelectFirst&lt;String&lt;uchar>, Grammar*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.8932"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9556">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, Grammar*>, const Pair&lt;String&lt;uchar>, Grammar*>&amp;, const Pair&lt;String&lt;uchar>, Grammar*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Grammar*>, SelectFirst&lt;String&lt;uchar>, Grammar*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8932"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8933">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, Grammar*>, const Pair&lt;String&lt;uchar>, Grammar*>&amp;, const Pair&lt;String&lt;uchar>, Grammar*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Grammar*>, SelectFirst&lt;String&lt;uchar>, Grammar*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.8932"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8996" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, Namespace*>, Pair&lt;String&lt;uchar>, Namespace*>&amp;, Pair&lt;String&lt;uchar>, Namespace*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Namespace*>, SelectFirst&lt;String&lt;uchar>, Namespace*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="2099"/>
                <argumentType ref="type.8975"/>
                <argumentType ref="type.8977"/>
                <argumentType ref="type.8976"/>
                <argumentType ref="type.8990"/>
            </content>
        </type>
        <type derived="true" id="type.8998">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, Namespace*>, Pair&lt;String&lt;uchar>, Namespace*>&amp;, Pair&lt;String&lt;uchar>, Namespace*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Namespace*>, SelectFirst&lt;String&lt;uchar>, Namespace*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.8996"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9020">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, Namespace*>, Pair&lt;String&lt;uchar>, Namespace*>&amp;, Pair&lt;String&lt;uchar>, Namespace*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Namespace*>, SelectFirst&lt;String&lt;uchar>, Namespace*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8996"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8997">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, Namespace*>, Pair&lt;String&lt;uchar>, Namespace*>&amp;, Pair&lt;String&lt;uchar>, Namespace*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Namespace*>, SelectFirst&lt;String&lt;uchar>, Namespace*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.8996"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9010" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, Namespace*>, const Pair&lt;String&lt;uchar>, Namespace*>&amp;, const Pair&lt;String&lt;uchar>, Namespace*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Namespace*>, SelectFirst&lt;String&lt;uchar>, Namespace*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="2099"/>
                <argumentType ref="type.8975"/>
                <argumentType ref="type.8987"/>
                <argumentType ref="type.9008"/>
                <argumentType ref="type.8990"/>
            </content>
        </type>
        <type derived="true" id="type.9012">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, Namespace*>, const Pair&lt;String&lt;uchar>, Namespace*>&amp;, const Pair&lt;String&lt;uchar>, Namespace*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Namespace*>, SelectFirst&lt;String&lt;uchar>, Namespace*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.9010"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9570">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, Namespace*>, const Pair&lt;String&lt;uchar>, Namespace*>&amp;, const Pair&lt;String&lt;uchar>, Namespace*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Namespace*>, SelectFirst&lt;String&lt;uchar>, Namespace*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.9010"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9011">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, Namespace*>, const Pair&lt;String&lt;uchar>, Namespace*>&amp;, const Pair&lt;String&lt;uchar>, Namespace*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Namespace*>, SelectFirst&lt;String&lt;uchar>, Namespace*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.9010"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9244" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, ParsingObject*>, Pair&lt;String&lt;uchar>, ParsingObject*>&amp;, Pair&lt;String&lt;uchar>, ParsingObject*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, ParsingObject*>, SelectFirst&lt;String&lt;uchar>, ParsingObject*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="2099"/>
                <argumentType ref="type.9223"/>
                <argumentType ref="type.9225"/>
                <argumentType ref="type.9224"/>
                <argumentType ref="type.9238"/>
            </content>
        </type>
        <type derived="true" id="type.9246">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, ParsingObject*>, Pair&lt;String&lt;uchar>, ParsingObject*>&amp;, Pair&lt;String&lt;uchar>, ParsingObject*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, ParsingObject*>, SelectFirst&lt;String&lt;uchar>, ParsingObject*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.9244"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9268">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, ParsingObject*>, Pair&lt;String&lt;uchar>, ParsingObject*>&amp;, Pair&lt;String&lt;uchar>, ParsingObject*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, ParsingObject*>, SelectFirst&lt;String&lt;uchar>, ParsingObject*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.9244"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9245">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, ParsingObject*>, Pair&lt;String&lt;uchar>, ParsingObject*>&amp;, Pair&lt;String&lt;uchar>, ParsingObject*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, ParsingObject*>, SelectFirst&lt;String&lt;uchar>, ParsingObject*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.9244"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9258" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, ParsingObject*>, const Pair&lt;String&lt;uchar>, ParsingObject*>&amp;, const Pair&lt;String&lt;uchar>, ParsingObject*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, ParsingObject*>, SelectFirst&lt;String&lt;uchar>, ParsingObject*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="2099"/>
                <argumentType ref="type.9223"/>
                <argumentType ref="type.9235"/>
                <argumentType ref="type.9256"/>
                <argumentType ref="type.9238"/>
            </content>
        </type>
        <type derived="true" id="type.9260">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, ParsingObject*>, const Pair&lt;String&lt;uchar>, ParsingObject*>&amp;, const Pair&lt;String&lt;uchar>, ParsingObject*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, ParsingObject*>, SelectFirst&lt;String&lt;uchar>, ParsingObject*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.9258"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9652">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, ParsingObject*>, const Pair&lt;String&lt;uchar>, ParsingObject*>&amp;, const Pair&lt;String&lt;uchar>, ParsingObject*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, ParsingObject*>, SelectFirst&lt;String&lt;uchar>, ParsingObject*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.9258"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9259">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, ParsingObject*>, const Pair&lt;String&lt;uchar>, ParsingObject*>&amp;, const Pair&lt;String&lt;uchar>, ParsingObject*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, ParsingObject*>, SelectFirst&lt;String&lt;uchar>, ParsingObject*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.9258"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8480" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>, Pair&lt;String&lt;uchar>, String&lt;uchar>>&amp;, Pair&lt;String&lt;uchar>, String&lt;uchar>>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, String&lt;uchar>>, SelectFirst&lt;String&lt;uchar>, String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="2099"/>
                <argumentType ref="type.8461"/>
                <argumentType ref="type.8463"/>
                <argumentType ref="type.8462"/>
                <argumentType ref="type.8474"/>
            </content>
        </type>
        <type derived="true" id="type.8482">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>, Pair&lt;String&lt;uchar>, String&lt;uchar>>&amp;, Pair&lt;String&lt;uchar>, String&lt;uchar>>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, String&lt;uchar>>, SelectFirst&lt;String&lt;uchar>, String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.8480"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8504">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>, Pair&lt;String&lt;uchar>, String&lt;uchar>>&amp;, Pair&lt;String&lt;uchar>, String&lt;uchar>>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, String&lt;uchar>>, SelectFirst&lt;String&lt;uchar>, String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8480"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8481">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>, Pair&lt;String&lt;uchar>, String&lt;uchar>>&amp;, Pair&lt;String&lt;uchar>, String&lt;uchar>>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, String&lt;uchar>>, SelectFirst&lt;String&lt;uchar>, String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.8480"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8494" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>, const Pair&lt;String&lt;uchar>, String&lt;uchar>>&amp;, const Pair&lt;String&lt;uchar>, String&lt;uchar>>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, String&lt;uchar>>, SelectFirst&lt;String&lt;uchar>, String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="2099"/>
                <argumentType ref="type.8461"/>
                <argumentType ref="type.8471"/>
                <argumentType ref="type.8492"/>
                <argumentType ref="type.8474"/>
            </content>
        </type>
        <type derived="true" id="type.8496">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>, const Pair&lt;String&lt;uchar>, String&lt;uchar>>&amp;, const Pair&lt;String&lt;uchar>, String&lt;uchar>>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, String&lt;uchar>>, SelectFirst&lt;String&lt;uchar>, String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.8494"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>, const Pair&lt;String&lt;uchar>, String&lt;uchar>>&amp;, const Pair&lt;String&lt;uchar>, String&lt;uchar>>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, String&lt;uchar>>, SelectFirst&lt;String&lt;uchar>, String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8494"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8495">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>, const Pair&lt;String&lt;uchar>, String&lt;uchar>>&amp;, const Pair&lt;String&lt;uchar>, String&lt;uchar>>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, String&lt;uchar>>, SelectFirst&lt;String&lt;uchar>, String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.8494"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8756" specialization="true">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="2099"/>
                <argumentType ref="type.1128"/>
                <argumentType ref="type.1130"/>
                <argumentType ref="type.1129"/>
                <argumentType ref="type.8750"/>
            </content>
        </type>
        <type id="type.1113" specialization="true">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="2099"/>
                <argumentType ref="type.1128"/>
                <argumentType ref="type.1130"/>
                <argumentType ref="type.1129"/>
                <argumentType ref="type.8750"/>
            </content>
        </type>
        <type id="type.8756" specialization="true">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="2099"/>
                <argumentType ref="type.1128"/>
                <argumentType ref="type.1130"/>
                <argumentType ref="type.1129"/>
                <argumentType ref="type.8750"/>
            </content>
        </type>
        <type derived="true" id="type.8758">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.8756"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1115">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.1113"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8758">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.8756"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8778">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8756"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1128">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1113"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1114">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.1113"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8757">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.8756"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1119" specialization="true">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="2099"/>
                <argumentType ref="type.1128"/>
                <argumentType ref="type.1133"/>
                <argumentType ref="type.1132"/>
                <argumentType ref="type.8750"/>
            </content>
        </type>
        <type id="type.8768" specialization="true">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="2099"/>
                <argumentType ref="type.1128"/>
                <argumentType ref="type.1133"/>
                <argumentType ref="type.1132"/>
                <argumentType ref="type.8750"/>
            </content>
        </type>
        <type derived="true" id="type.1121">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.1119"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8770">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.8768"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9479">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8768"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1120">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.1119"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8769">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.8768"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.897">
            <name>HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1954"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.910">
            <name>HashtableIterator&lt;ValueType, ValueType&amp;, ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>>&amp;&amp;</name>
            <content>
                <baseType ref="type.2139"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="7611">
            <name>HexDigitParser</name>
        </type>
        <type derived="true" id="type.7613">
            <name>HexDigitParser&amp;</name>
            <content>
                <baseType ref="7611"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7612">
            <name>HexDigitParser*</name>
            <content>
                <baseType ref="7611"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7719">
            <name>IdContParser</name>
        </type>
        <type derived="true" id="type.7721">
            <name>IdContParser&amp;</name>
            <content>
                <baseType ref="7719"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7720">
            <name>IdContParser*</name>
            <content>
                <baseType ref="7719"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7716">
            <name>IdStartParser</name>
        </type>
        <type derived="true" id="type.7718">
            <name>IdStartParser&amp;</name>
            <content>
                <baseType ref="7716"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7717">
            <name>IdStartParser*</name>
            <content>
                <baseType ref="7716"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6632">
            <name>Identifier&amp;</name>
            <content>
                <baseType ref="6630"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1243">
            <name>Identifier&amp;&amp;</name>
            <content>
                <baseType ref="6630"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="7474">
            <name>IdentifierCharsRule</name>
        </type>
        <type derived="true" id="type.7479">
            <name>IdentifierCharsRule&amp;</name>
            <content>
                <baseType ref="7474"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7478">
            <name>IdentifierCharsRule*</name>
            <content>
                <baseType ref="7474"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8653" specialization="true">
            <name>Identity&lt;Grammar*></name>
            <content>
                <primaryType ref="1487"/>
                <argumentType ref="type.7469"/>
            </content>
        </type>
        <type derived="true" id="type.8661">
            <name>Identity&lt;Grammar*>&amp;</name>
            <content>
                <baseType ref="type.8653"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9389">
            <name>Identity&lt;Grammar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8653"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8660">
            <name>Identity&lt;Grammar*>*</name>
            <content>
                <baseType ref="type.8653"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8741" specialization="true">
            <name>Identity&lt;String&lt;uchar>></name>
            <content>
                <primaryType ref="1487"/>
                <argumentType ref="type.1128"/>
            </content>
        </type>
        <type derived="true" id="type.8749">
            <name>Identity&lt;String&lt;uchar>>&amp;</name>
            <content>
                <baseType ref="type.8741"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9454">
            <name>Identity&lt;String&lt;uchar>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8741"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8748">
            <name>Identity&lt;String&lt;uchar>>*</name>
            <content>
                <baseType ref="type.8741"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7653">
            <name>InitialPunctuationParser</name>
        </type>
        <type derived="true" id="type.7655">
            <name>InitialPunctuationParser&amp;</name>
            <content>
                <baseType ref="7653"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7654">
            <name>InitialPunctuationParser*</name>
            <content>
                <baseType ref="7653"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7447">
            <name>IntersectionParser</name>
        </type>
        <type derived="true" id="type.7449">
            <name>IntersectionParser&amp;</name>
            <content>
                <baseType ref="7447"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7448">
            <name>IntersectionParser*</name>
            <content>
                <baseType ref="7447"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1224">
            <name>Invoke&amp;&amp;</name>
            <content>
                <baseType ref="6597"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.885">
            <name>K&amp;&amp;</name>
            <content>
                <baseType ref="612"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.930">
            <name>Key&amp;&amp;</name>
            <content>
                <baseType ref="669"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="7486">
            <name>KeywordListParser</name>
        </type>
        <type derived="true" id="type.7488">
            <name>KeywordListParser&amp;</name>
            <content>
                <baseType ref="7486"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7487">
            <name>KeywordListParser*</name>
            <content>
                <baseType ref="7486"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9478">
            <name>KeywordListParser*&amp;</name>
            <content>
                <baseType ref="7486"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9477">
            <name>KeywordListParser**</name>
            <content>
                <baseType ref="7486"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7480">
            <name>KeywordParser</name>
        </type>
        <type derived="true" id="type.7482">
            <name>KeywordParser&amp;</name>
            <content>
                <baseType ref="7480"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8734">
            <name>KeywordParser&amp;&amp;</name>
            <content>
                <baseType ref="7480"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7481">
            <name>KeywordParser*</name>
            <content>
                <baseType ref="7480"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7420">
            <name>KleeneStarParser</name>
        </type>
        <type derived="true" id="type.7422">
            <name>KleeneStarParser&amp;</name>
            <content>
                <baseType ref="7420"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1302">
            <name>KleeneStarParser&amp;&amp;</name>
            <content>
                <baseType ref="7420"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7421">
            <name>KleeneStarParser*</name>
            <content>
                <baseType ref="7420"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7632">
            <name>LetterNumberParser</name>
        </type>
        <type derived="true" id="type.7634">
            <name>LetterNumberParser&amp;</name>
            <content>
                <baseType ref="7632"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7633">
            <name>LetterNumberParser*</name>
            <content>
                <baseType ref="7632"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7587">
            <name>LetterParser</name>
        </type>
        <type derived="true" id="type.7589">
            <name>LetterParser&amp;</name>
            <content>
                <baseType ref="7587"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7588">
            <name>LetterParser*</name>
            <content>
                <baseType ref="7587"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7683">
            <name>LineSeparatorParser</name>
        </type>
        <type derived="true" id="type.7685">
            <name>LineSeparatorParser&amp;</name>
            <content>
                <baseType ref="7683"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7684">
            <name>LineSeparatorParser*</name>
            <content>
                <baseType ref="7683"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.918">
            <name>LinkedList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.2206"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.919">
            <name>LinkedList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.2272"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="7492">
            <name>LinkerVisitor</name>
        </type>
        <type derived="true" id="type.7494">
            <name>LinkerVisitor&amp;</name>
            <content>
                <baseType ref="7492"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7493">
            <name>LinkerVisitor*</name>
            <content>
                <baseType ref="7492"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9165" specialization="true">
            <name>List&lt;ActionParser*></name>
            <content>
                <primaryType ref="2362"/>
                <argumentType ref="type.7400"/>
            </content>
        </type>
        <type derived="true" id="type.9167">
            <name>List&lt;ActionParser*>&amp;</name>
            <content>
                <baseType ref="type.9165"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9189">
            <name>List&lt;ActionParser*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9165"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9166">
            <name>List&lt;ActionParser*>*</name>
            <content>
                <baseType ref="type.9165"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8694" specialization="true">
            <name>List&lt;Bucket&lt;Grammar*>*></name>
            <content>
                <primaryType ref="2362"/>
                <argumentType ref="type.8677"/>
            </content>
        </type>
        <type derived="true" id="type.8696">
            <name>List&lt;Bucket&lt;Grammar*>*>&amp;</name>
            <content>
                <baseType ref="type.8694"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8718">
            <name>List&lt;Bucket&lt;Grammar*>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8694"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8695">
            <name>List&lt;Bucket&lt;Grammar*>*>*</name>
            <content>
                <baseType ref="type.8694"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.891">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1822"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8943" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*></name>
            <content>
                <primaryType ref="2362"/>
                <argumentType ref="type.8925"/>
            </content>
        </type>
        <type derived="true" id="type.8945">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*>&amp;</name>
            <content>
                <baseType ref="type.8943"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8967">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8943"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8944">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*>*</name>
            <content>
                <baseType ref="type.8943"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9021" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*></name>
            <content>
                <primaryType ref="2362"/>
                <argumentType ref="type.9003"/>
            </content>
        </type>
        <type derived="true" id="type.9023">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*>&amp;</name>
            <content>
                <baseType ref="type.9021"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9045">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9021"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9022">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*>*</name>
            <content>
                <baseType ref="type.9021"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9269" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*></name>
            <content>
                <primaryType ref="2362"/>
                <argumentType ref="type.9251"/>
            </content>
        </type>
        <type derived="true" id="type.9271">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*>&amp;</name>
            <content>
                <baseType ref="type.9269"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9293">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9269"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9270">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*>*</name>
            <content>
                <baseType ref="type.9269"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8505" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*></name>
            <content>
                <primaryType ref="2362"/>
                <argumentType ref="type.8487"/>
            </content>
        </type>
        <type derived="true" id="type.8507">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*>&amp;</name>
            <content>
                <baseType ref="type.8505"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8529">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8505"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8506">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*>*</name>
            <content>
                <baseType ref="type.8505"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8779" specialization="true">
            <name>List&lt;Bucket&lt;String&lt;uchar>>*></name>
            <content>
                <primaryType ref="2362"/>
                <argumentType ref="type.8763"/>
            </content>
        </type>
        <type derived="true" id="type.8781">
            <name>List&lt;Bucket&lt;String&lt;uchar>>*>&amp;</name>
            <content>
                <baseType ref="type.8779"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8803">
            <name>List&lt;Bucket&lt;String&lt;uchar>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8779"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8780">
            <name>List&lt;Bucket&lt;String&lt;uchar>>*>*</name>
            <content>
                <baseType ref="type.8779"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1979" specialization="true">
            <name>List&lt;Bucket&lt;T>*></name>
            <content>
                <primaryType ref="2362"/>
                <argumentType ref="type.1961"/>
            </content>
        </type>
        <type derived="true" id="type.900">
            <name>List&lt;Bucket&lt;T>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1979"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2166" specialization="true">
            <name>List&lt;Bucket&lt;ValueType>*></name>
            <content>
                <primaryType ref="2362"/>
                <argumentType ref="type.2146"/>
            </content>
        </type>
        <type derived="true" id="type.914">
            <name>List&lt;Bucket&lt;ValueType>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2166"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9054" specialization="true">
            <name>List&lt;Namespace*></name>
            <content>
                <primaryType ref="2362"/>
                <argumentType ref="type.7505"/>
            </content>
        </type>
        <type derived="true" id="type.9056">
            <name>List&lt;Namespace*>&amp;</name>
            <content>
                <baseType ref="type.9054"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9079">
            <name>List&lt;Namespace*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9054"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9055">
            <name>List&lt;Namespace*>*</name>
            <content>
                <baseType ref="type.9054"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9191" specialization="true">
            <name>List&lt;NonterminalParser*></name>
            <content>
                <primaryType ref="2362"/>
                <argumentType ref="type.7513"/>
            </content>
        </type>
        <type derived="true" id="type.9193">
            <name>List&lt;NonterminalParser*>&amp;</name>
            <content>
                <baseType ref="type.9191"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9215">
            <name>List&lt;NonterminalParser*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9191"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9192">
            <name>List&lt;NonterminalParser*>*</name>
            <content>
                <baseType ref="type.9191"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8599" specialization="true">
            <name>List&lt;RuleLink*></name>
            <content>
                <primaryType ref="2362"/>
                <argumentType ref="type.7744"/>
            </content>
        </type>
        <type derived="true" id="type.8601">
            <name>List&lt;RuleLink*>&amp;</name>
            <content>
                <baseType ref="type.8599"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8623">
            <name>List&lt;RuleLink*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8599"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8600">
            <name>List&lt;RuleLink*>*</name>
            <content>
                <baseType ref="type.8599"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8573" specialization="true">
            <name>List&lt;RuleParser*></name>
            <content>
                <primaryType ref="2362"/>
                <argumentType ref="type.7738"/>
            </content>
        </type>
        <type derived="true" id="type.8575">
            <name>List&lt;RuleParser*>&amp;</name>
            <content>
                <baseType ref="type.8573"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8597">
            <name>List&lt;RuleParser*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8573"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8574">
            <name>List&lt;RuleParser*>*</name>
            <content>
                <baseType ref="type.8573"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.996">
            <name>List&lt;String&lt;CharT>>&amp;&amp;</name>
            <content>
                <baseType ref="type.3016"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9143" specialization="true">
            <name>List&lt;System.Text.Parsing.AttrOrVar></name>
            <content>
                <primaryType ref="2362"/>
                <argumentType ref="7731"/>
            </content>
        </type>
        <type derived="true" id="type.9145">
            <name>List&lt;System.Text.Parsing.AttrOrVar>&amp;</name>
            <content>
                <baseType ref="type.9143"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9163">
            <name>List&lt;System.Text.Parsing.AttrOrVar>&amp;&amp;</name>
            <content>
                <baseType ref="type.9143"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9144">
            <name>List&lt;System.Text.Parsing.AttrOrVar>*</name>
            <content>
                <baseType ref="type.9143"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9122" specialization="true">
            <name>List&lt;System.Text.Parsing.CharRange></name>
            <content>
                <primaryType ref="2362"/>
                <argumentType ref="7569"/>
            </content>
        </type>
        <type derived="true" id="type.9124">
            <name>List&lt;System.Text.Parsing.CharRange>&amp;</name>
            <content>
                <baseType ref="type.9122"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9142">
            <name>List&lt;System.Text.Parsing.CharRange>&amp;&amp;</name>
            <content>
                <baseType ref="type.9122"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9123">
            <name>List&lt;System.Text.Parsing.CharRange>*</name>
            <content>
                <baseType ref="type.9122"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8865" specialization="true">
            <name>List&lt;System.Text.Parsing.RuleData></name>
            <content>
                <primaryType ref="2362"/>
                <argumentType ref="7535"/>
            </content>
        </type>
        <type derived="true" id="type.8867">
            <name>List&lt;System.Text.Parsing.RuleData>&amp;</name>
            <content>
                <baseType ref="type.8865"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8890">
            <name>List&lt;System.Text.Parsing.RuleData>&amp;&amp;</name>
            <content>
                <baseType ref="type.8865"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8866">
            <name>List&lt;System.Text.Parsing.RuleData>*</name>
            <content>
                <baseType ref="type.8865"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.2623" specialization="true">
            <name>List&lt;T></name>
            <content>
                <primaryType ref="2362"/>
                <argumentType ref="704"/>
            </content>
        </type>
        <type derived="true" id="type.922">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.2362"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.962">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.2623"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.990">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.2959"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7096" specialization="true">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>></name>
            <content>
                <primaryType ref="2362"/>
                <argumentType ref="type.7062"/>
            </content>
        </type>
        <type derived="true" id="type.7116">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>>&amp;&amp;</name>
            <content>
                <baseType ref="type.7096"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8843" specialization="true">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.Context>></name>
            <content>
                <primaryType ref="2362"/>
                <argumentType ref="type.8827"/>
            </content>
        </type>
        <type derived="true" id="type.8845">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.Context>>&amp;</name>
            <content>
                <baseType ref="type.8843"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8863">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.Context>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8843"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8844">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.Context>>*</name>
            <content>
                <baseType ref="type.8843"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8413" specialization="true">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.Object>></name>
            <content>
                <primaryType ref="2362"/>
                <argumentType ref="type.8397"/>
            </content>
        </type>
        <type derived="true" id="type.8415">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp;</name>
            <content>
                <baseType ref="type.8413"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8433">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8413"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8414">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.Object>>*</name>
            <content>
                <baseType ref="type.8413"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9097" specialization="true">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>></name>
            <content>
                <primaryType ref="2362"/>
                <argumentType ref="type.9090"/>
            </content>
        </type>
        <type derived="true" id="type.9099">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>>&amp;</name>
            <content>
                <baseType ref="type.9097"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9117">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>>&amp;&amp;</name>
            <content>
                <baseType ref="type.9097"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9098">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>>*</name>
            <content>
                <baseType ref="type.9097"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8376" specialization="true">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>></name>
            <content>
                <primaryType ref="2362"/>
                <argumentType ref="type.8369"/>
            </content>
        </type>
        <type derived="true" id="type.8378">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>>&amp;</name>
            <content>
                <baseType ref="type.8376"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8396">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8376"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8377">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>>*</name>
            <content>
                <baseType ref="type.8376"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7450">
            <name>ListParser</name>
        </type>
        <type derived="true" id="type.7452">
            <name>ListParser&amp;</name>
            <content>
                <baseType ref="7450"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7451">
            <name>ListParser*</name>
            <content>
                <baseType ref="7450"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1247">
            <name>Literal&amp;&amp;</name>
            <content>
                <baseType ref="6642"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="7593">
            <name>LowerLetterParser</name>
        </type>
        <type derived="true" id="type.7595">
            <name>LowerLetterParser&amp;</name>
            <content>
                <baseType ref="7593"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7594">
            <name>LowerLetterParser*</name>
            <content>
                <baseType ref="7593"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1284">
            <name>LvalueRef&amp;&amp;</name>
            <content>
                <baseType ref="6729"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="7614">
            <name>MarkParser</name>
        </type>
        <type derived="true" id="type.7616">
            <name>MarkParser&amp;</name>
            <content>
                <baseType ref="7614"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7615">
            <name>MarkParser*</name>
            <content>
                <baseType ref="7614"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7498">
            <name>Match</name>
        </type>
        <type derived="true" id="type.7500">
            <name>Match&amp;</name>
            <content>
                <baseType ref="7498"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9305">
            <name>Match&amp;&amp;</name>
            <content>
                <baseType ref="7498"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7499">
            <name>Match*</name>
            <content>
                <baseType ref="7498"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7665">
            <name>MathSymbolParser</name>
        </type>
        <type derived="true" id="type.7667">
            <name>MathSymbolParser&amp;</name>
            <content>
                <baseType ref="7665"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7666">
            <name>MathSymbolParser*</name>
            <content>
                <baseType ref="7665"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7599">
            <name>ModifierLetterParser</name>
        </type>
        <type derived="true" id="type.7601">
            <name>ModifierLetterParser&amp;</name>
            <content>
                <baseType ref="7599"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7600">
            <name>ModifierLetterParser*</name>
            <content>
                <baseType ref="7599"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7671">
            <name>ModifierSymbolParser</name>
        </type>
        <type derived="true" id="type.7673">
            <name>ModifierSymbolParser&amp;</name>
            <content>
                <baseType ref="7671"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7672">
            <name>ModifierSymbolParser*</name>
            <content>
                <baseType ref="7671"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7504">
            <name>Namespace</name>
        </type>
        <type derived="true" id="type.7506">
            <name>Namespace&amp;</name>
            <content>
                <baseType ref="7504"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7505">
            <name>Namespace*</name>
            <content>
                <baseType ref="7504"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9047">
            <name>Namespace*&amp;</name>
            <content>
                <baseType ref="7504"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8979">
            <name>Namespace*&amp;&amp;</name>
            <content>
                <baseType ref="7504"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9071">
            <name>Namespace**</name>
            <content>
                <baseType ref="7504"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9525">
            <name>Namespace**&amp;</name>
            <content>
                <baseType ref="7504"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9534">
            <name>Namespace**&amp;&amp;</name>
            <content>
                <baseType ref="7504"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9533">
            <name>Namespace***</name>
            <content>
                <baseType ref="7504"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1242">
            <name>New&amp;&amp;</name>
            <content>
                <baseType ref="6621"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="7617">
            <name>NonspacingMarkParser</name>
        </type>
        <type derived="true" id="type.7619">
            <name>NonspacingMarkParser&amp;</name>
            <content>
                <baseType ref="7617"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7618">
            <name>NonspacingMarkParser*</name>
            <content>
                <baseType ref="7617"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7512">
            <name>NonterminalParser</name>
        </type>
        <type derived="true" id="type.7514">
            <name>NonterminalParser&amp;</name>
            <content>
                <baseType ref="7512"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7513">
            <name>NonterminalParser*</name>
            <content>
                <baseType ref="7512"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9206">
            <name>NonterminalParser*&amp;</name>
            <content>
                <baseType ref="7512"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9216">
            <name>NonterminalParser*&amp;&amp;</name>
            <content>
                <baseType ref="7512"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9207">
            <name>NonterminalParser**</name>
            <content>
                <baseType ref="7512"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9595">
            <name>NonterminalParser**&amp;</name>
            <content>
                <baseType ref="7512"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9596">
            <name>NonterminalParser**&amp;&amp;</name>
            <content>
                <baseType ref="7512"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9594">
            <name>NonterminalParser***</name>
            <content>
                <baseType ref="7512"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1200">
            <name>Not&amp;&amp;</name>
            <content>
                <baseType ref="6501"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="7626">
            <name>NumberParser</name>
        </type>
        <type derived="true" id="type.7628">
            <name>NumberParser&amp;</name>
            <content>
                <baseType ref="7626"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7627">
            <name>NumberParser*</name>
            <content>
                <baseType ref="7626"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7518">
            <name>Object</name>
        </type>
        <type derived="true" id="type.7520">
            <name>Object&amp;</name>
            <content>
                <baseType ref="7518"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7519">
            <name>Object*</name>
            <content>
                <baseType ref="7518"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9427">
            <name>Object*&amp;</name>
            <content>
                <baseType ref="7518"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9429">
            <name>Object*&amp;&amp;</name>
            <content>
                <baseType ref="7518"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9428">
            <name>Object**</name>
            <content>
                <baseType ref="7518"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7647">
            <name>OpenPunctuationParser</name>
        </type>
        <type derived="true" id="type.7649">
            <name>OpenPunctuationParser&amp;</name>
            <content>
                <baseType ref="7647"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7648">
            <name>OpenPunctuationParser*</name>
            <content>
                <baseType ref="7647"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7414">
            <name>OptionalParser</name>
        </type>
        <type derived="true" id="type.7416">
            <name>OptionalParser&amp;</name>
            <content>
                <baseType ref="7414"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1296">
            <name>OptionalParser&amp;&amp;</name>
            <content>
                <baseType ref="7414"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7415">
            <name>OptionalParser*</name>
            <content>
                <baseType ref="7414"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7602">
            <name>OtherLetterParser</name>
        </type>
        <type derived="true" id="type.7604">
            <name>OtherLetterParser&amp;</name>
            <content>
                <baseType ref="7602"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7603">
            <name>OtherLetterParser*</name>
            <content>
                <baseType ref="7602"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7635">
            <name>OtherNumberParser</name>
        </type>
        <type derived="true" id="type.7637">
            <name>OtherNumberParser&amp;</name>
            <content>
                <baseType ref="7635"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7636">
            <name>OtherNumberParser*</name>
            <content>
                <baseType ref="7635"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7689">
            <name>OtherParser</name>
        </type>
        <type derived="true" id="type.7691">
            <name>OtherParser&amp;</name>
            <content>
                <baseType ref="7689"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7690">
            <name>OtherParser*</name>
            <content>
                <baseType ref="7689"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7659">
            <name>OtherPunctuationParser</name>
        </type>
        <type derived="true" id="type.7661">
            <name>OtherPunctuationParser&amp;</name>
            <content>
                <baseType ref="7659"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7660">
            <name>OtherPunctuationParser*</name>
            <content>
                <baseType ref="7659"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7674">
            <name>OtherSymbolParser</name>
        </type>
        <type derived="true" id="type.7676">
            <name>OtherSymbolParser&amp;</name>
            <content>
                <baseType ref="7674"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7675">
            <name>OtherSymbolParser*</name>
            <content>
                <baseType ref="7674"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8690" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Grammar*, Grammar*&amp;, Grammar**, Hashtable&lt;Grammar*, Grammar*, Identity&lt;Grammar*>, Hasher&lt;Grammar*>, EqualTo&lt;Grammar*>>>, bool></name>
            <content>
                <primaryType ref="2548"/>
                <argumentType ref="type.8670"/>
                <argumentType ref="type.1"/>
            </content>
        </type>
        <type derived="true" id="type.8692">
            <name>Pair&lt;HashtableIterator&lt;Grammar*, Grammar*&amp;, Grammar**, Hashtable&lt;Grammar*, Grammar*, Identity&lt;Grammar*>, Hasher&lt;Grammar*>, EqualTo&lt;Grammar*>>>, bool>&amp;</name>
            <content>
                <baseType ref="type.8690"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9449">
            <name>Pair&lt;HashtableIterator&lt;Grammar*, Grammar*&amp;, Grammar**, Hashtable&lt;Grammar*, Grammar*, Identity&lt;Grammar*>, Hasher&lt;Grammar*>, EqualTo&lt;Grammar*>>>, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.8690"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8691">
            <name>Pair&lt;HashtableIterator&lt;Grammar*, Grammar*&amp;, Grammar**, Hashtable&lt;Grammar*, Grammar*, Identity&lt;Grammar*>, Hasher&lt;Grammar*>, EqualTo&lt;Grammar*>>>, bool>*</name>
            <content>
                <baseType ref="type.8690"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8939" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;uchar>, Grammar*>, Pair&lt;String&lt;uchar>, Grammar*>&amp;, Pair&lt;String&lt;uchar>, Grammar*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Grammar*>, SelectFirst&lt;String&lt;uchar>, Grammar*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool></name>
            <content>
                <primaryType ref="2548"/>
                <argumentType ref="type.8918"/>
                <argumentType ref="type.1"/>
            </content>
        </type>
        <type derived="true" id="type.8941">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;uchar>, Grammar*>, Pair&lt;String&lt;uchar>, Grammar*>&amp;, Pair&lt;String&lt;uchar>, Grammar*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Grammar*>, SelectFirst&lt;String&lt;uchar>, Grammar*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>&amp;</name>
            <content>
                <baseType ref="type.8939"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9561">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;uchar>, Grammar*>, Pair&lt;String&lt;uchar>, Grammar*>&amp;, Pair&lt;String&lt;uchar>, Grammar*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Grammar*>, SelectFirst&lt;String&lt;uchar>, Grammar*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.8939"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8940">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;uchar>, Grammar*>, Pair&lt;String&lt;uchar>, Grammar*>&amp;, Pair&lt;String&lt;uchar>, Grammar*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Grammar*>, SelectFirst&lt;String&lt;uchar>, Grammar*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>*</name>
            <content>
                <baseType ref="type.8939"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9017" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;uchar>, Namespace*>, Pair&lt;String&lt;uchar>, Namespace*>&amp;, Pair&lt;String&lt;uchar>, Namespace*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Namespace*>, SelectFirst&lt;String&lt;uchar>, Namespace*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool></name>
            <content>
                <primaryType ref="2548"/>
                <argumentType ref="type.8996"/>
                <argumentType ref="type.1"/>
            </content>
        </type>
        <type derived="true" id="type.9019">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;uchar>, Namespace*>, Pair&lt;String&lt;uchar>, Namespace*>&amp;, Pair&lt;String&lt;uchar>, Namespace*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Namespace*>, SelectFirst&lt;String&lt;uchar>, Namespace*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>&amp;</name>
            <content>
                <baseType ref="type.9017"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9543">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;uchar>, Namespace*>, Pair&lt;String&lt;uchar>, Namespace*>&amp;, Pair&lt;String&lt;uchar>, Namespace*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Namespace*>, SelectFirst&lt;String&lt;uchar>, Namespace*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.9017"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9018">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;uchar>, Namespace*>, Pair&lt;String&lt;uchar>, Namespace*>&amp;, Pair&lt;String&lt;uchar>, Namespace*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Namespace*>, SelectFirst&lt;String&lt;uchar>, Namespace*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>*</name>
            <content>
                <baseType ref="type.9017"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9265" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;uchar>, ParsingObject*>, Pair&lt;String&lt;uchar>, ParsingObject*>&amp;, Pair&lt;String&lt;uchar>, ParsingObject*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, ParsingObject*>, SelectFirst&lt;String&lt;uchar>, ParsingObject*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool></name>
            <content>
                <primaryType ref="2548"/>
                <argumentType ref="type.9244"/>
                <argumentType ref="type.1"/>
            </content>
        </type>
        <type derived="true" id="type.9267">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;uchar>, ParsingObject*>, Pair&lt;String&lt;uchar>, ParsingObject*>&amp;, Pair&lt;String&lt;uchar>, ParsingObject*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, ParsingObject*>, SelectFirst&lt;String&lt;uchar>, ParsingObject*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>&amp;</name>
            <content>
                <baseType ref="type.9265"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9648">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;uchar>, ParsingObject*>, Pair&lt;String&lt;uchar>, ParsingObject*>&amp;, Pair&lt;String&lt;uchar>, ParsingObject*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, ParsingObject*>, SelectFirst&lt;String&lt;uchar>, ParsingObject*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.9265"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9266">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;uchar>, ParsingObject*>, Pair&lt;String&lt;uchar>, ParsingObject*>&amp;, Pair&lt;String&lt;uchar>, ParsingObject*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, ParsingObject*>, SelectFirst&lt;String&lt;uchar>, ParsingObject*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>*</name>
            <content>
                <baseType ref="type.9265"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8501" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>, Pair&lt;String&lt;uchar>, String&lt;uchar>>&amp;, Pair&lt;String&lt;uchar>, String&lt;uchar>>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, String&lt;uchar>>, SelectFirst&lt;String&lt;uchar>, String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool></name>
            <content>
                <primaryType ref="2548"/>
                <argumentType ref="type.8480"/>
                <argumentType ref="type.1"/>
            </content>
        </type>
        <type derived="true" id="type.8503">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>, Pair&lt;String&lt;uchar>, String&lt;uchar>>&amp;, Pair&lt;String&lt;uchar>, String&lt;uchar>>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, String&lt;uchar>>, SelectFirst&lt;String&lt;uchar>, String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>&amp;</name>
            <content>
                <baseType ref="type.8501"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9598">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>, Pair&lt;String&lt;uchar>, String&lt;uchar>>&amp;, Pair&lt;String&lt;uchar>, String&lt;uchar>>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, String&lt;uchar>>, SelectFirst&lt;String&lt;uchar>, String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.8501"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8502">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>, Pair&lt;String&lt;uchar>, String&lt;uchar>>&amp;, Pair&lt;String&lt;uchar>, String&lt;uchar>>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, String&lt;uchar>>, SelectFirst&lt;String&lt;uchar>, String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>*</name>
            <content>
                <baseType ref="type.8501"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8775" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool></name>
            <content>
                <primaryType ref="2548"/>
                <argumentType ref="type.8756"/>
                <argumentType ref="type.1"/>
            </content>
        </type>
        <type id="type.1125" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool></name>
            <content>
                <primaryType ref="2548"/>
                <argumentType ref="type.1113"/>
                <argumentType ref="type.1"/>
            </content>
        </type>
        <type derived="true" id="type.8777">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>&amp;</name>
            <content>
                <baseType ref="type.8775"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1127">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>&amp;</name>
            <content>
                <baseType ref="type.1125"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9473">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.8775"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8776">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>*</name>
            <content>
                <baseType ref="type.8775"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1126">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>*</name>
            <content>
                <baseType ref="type.1125"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8898" specialization="true">
            <name>Pair&lt;String&lt;uchar>, Grammar*></name>
            <content>
                <primaryType ref="2548"/>
                <argumentType ref="type.1128"/>
                <argumentType ref="type.7469"/>
            </content>
        </type>
        <type derived="true" id="type.8900">
            <name>Pair&lt;String&lt;uchar>, Grammar*>&amp;</name>
            <content>
                <baseType ref="type.8898"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9516">
            <name>Pair&lt;String&lt;uchar>, Grammar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8898"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8899">
            <name>Pair&lt;String&lt;uchar>, Grammar*>*</name>
            <content>
                <baseType ref="type.8898"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8975" specialization="true">
            <name>Pair&lt;String&lt;uchar>, Namespace*></name>
            <content>
                <primaryType ref="2548"/>
                <argumentType ref="type.1128"/>
                <argumentType ref="type.7505"/>
            </content>
        </type>
        <type derived="true" id="type.8977">
            <name>Pair&lt;String&lt;uchar>, Namespace*>&amp;</name>
            <content>
                <baseType ref="type.8975"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9524">
            <name>Pair&lt;String&lt;uchar>, Namespace*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8975"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8976">
            <name>Pair&lt;String&lt;uchar>, Namespace*>*</name>
            <content>
                <baseType ref="type.8975"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9223" specialization="true">
            <name>Pair&lt;String&lt;uchar>, ParsingObject*></name>
            <content>
                <primaryType ref="2548"/>
                <argumentType ref="type.1128"/>
                <argumentType ref="type.7552"/>
            </content>
        </type>
        <type derived="true" id="type.9225">
            <name>Pair&lt;String&lt;uchar>, ParsingObject*>&amp;</name>
            <content>
                <baseType ref="type.9223"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9628">
            <name>Pair&lt;String&lt;uchar>, ParsingObject*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9223"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9224">
            <name>Pair&lt;String&lt;uchar>, ParsingObject*>*</name>
            <content>
                <baseType ref="type.9223"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8461" specialization="true">
            <name>Pair&lt;String&lt;uchar>, String&lt;uchar>></name>
            <content>
                <primaryType ref="2548"/>
                <argumentType ref="type.1128"/>
                <argumentType ref="type.1128"/>
            </content>
        </type>
        <type derived="true" id="type.8463">
            <name>Pair&lt;String&lt;uchar>, String&lt;uchar>>&amp;</name>
            <content>
                <baseType ref="type.8461"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9310">
            <name>Pair&lt;String&lt;uchar>, String&lt;uchar>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8461"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8462">
            <name>Pair&lt;String&lt;uchar>, String&lt;uchar>>*</name>
            <content>
                <baseType ref="type.8461"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7686">
            <name>ParagraphSeparatorParser</name>
        </type>
        <type derived="true" id="type.7688">
            <name>ParagraphSeparatorParser&amp;</name>
            <content>
                <baseType ref="7686"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7687">
            <name>ParagraphSeparatorParser*</name>
            <content>
                <baseType ref="7686"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7523">
            <name>Parser</name>
        </type>
        <type derived="true" id="type.7525">
            <name>Parser&amp;</name>
            <content>
                <baseType ref="7523"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.792">
            <name>Parser&amp;</name>
            <content>
                <baseType ref="7523"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9885">
            <name>Parser&amp;&amp;</name>
            <content>
                <baseType ref="7523"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.791">
            <name>Parser*</name>
            <content>
                <baseType ref="7523"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7524">
            <name>Parser*</name>
            <content>
                <baseType ref="7523"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9301">
            <name>Parser*&amp;</name>
            <content>
                <baseType ref="7523"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9354">
            <name>Parser*&amp;&amp;</name>
            <content>
                <baseType ref="7523"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9300">
            <name>Parser**</name>
            <content>
                <baseType ref="7523"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7397">
            <name>ParsingAction</name>
        </type>
        <type derived="true" id="type.8357">
            <name>ParsingAction&amp;</name>
            <content>
                <baseType ref="7397"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8360">
            <name>ParsingAction&amp;&amp;</name>
            <content>
                <baseType ref="7397"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8356">
            <name>ParsingAction*</name>
            <content>
                <baseType ref="7397"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7536">
            <name>ParsingData</name>
        </type>
        <type derived="true" id="type.7538">
            <name>ParsingData&amp;</name>
            <content>
                <baseType ref="7536"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1309">
            <name>ParsingData&amp;&amp;</name>
            <content>
                <baseType ref="7536"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7537">
            <name>ParsingData*</name>
            <content>
                <baseType ref="7536"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9422">
            <name>ParsingData*&amp;</name>
            <content>
                <baseType ref="7536"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9421">
            <name>ParsingData**</name>
            <content>
                <baseType ref="7536"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7542">
            <name>ParsingDomain</name>
        </type>
        <type derived="true" id="type.7544">
            <name>ParsingDomain&amp;</name>
            <content>
                <baseType ref="7542"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.794">
            <name>ParsingDomain&amp;</name>
            <content>
                <baseType ref="7542"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7544">
            <name>ParsingDomain&amp;</name>
            <content>
                <baseType ref="7542"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.793">
            <name>ParsingDomain*</name>
            <content>
                <baseType ref="7542"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7543">
            <name>ParsingDomain*</name>
            <content>
                <baseType ref="7542"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9381">
            <name>ParsingDomain*&amp;</name>
            <content>
                <baseType ref="7542"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9382">
            <name>ParsingDomain*&amp;&amp;</name>
            <content>
                <baseType ref="7542"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9380">
            <name>ParsingDomain**</name>
            <content>
                <baseType ref="7542"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7548">
            <name>ParsingDomainRepository</name>
        </type>
        <type derived="true" id="type.7550">
            <name>ParsingDomainRepository&amp;</name>
            <content>
                <baseType ref="7548"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7549">
            <name>ParsingDomainRepository*</name>
            <content>
                <baseType ref="7548"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9573">
            <name>ParsingDomainRepository*&amp;</name>
            <content>
                <baseType ref="7548"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9572">
            <name>ParsingDomainRepository**</name>
            <content>
                <baseType ref="7548"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7462">
            <name>ParsingException</name>
        </type>
        <type derived="true" id="type.7464">
            <name>ParsingException&amp;</name>
            <content>
                <baseType ref="7462"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9379">
            <name>ParsingException&amp;&amp;</name>
            <content>
                <baseType ref="7462"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7463">
            <name>ParsingException*</name>
            <content>
                <baseType ref="7462"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9378">
            <name>ParsingException*&amp;</name>
            <content>
                <baseType ref="7462"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9377">
            <name>ParsingException**</name>
            <content>
                <baseType ref="7462"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7551">
            <name>ParsingObject</name>
        </type>
        <type derived="true" id="type.7553">
            <name>ParsingObject&amp;</name>
            <content>
                <baseType ref="7551"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8368">
            <name>ParsingObject&amp;&amp;</name>
            <content>
                <baseType ref="7551"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7552">
            <name>ParsingObject*</name>
            <content>
                <baseType ref="7551"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9295">
            <name>ParsingObject*&amp;</name>
            <content>
                <baseType ref="7551"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9227">
            <name>ParsingObject*&amp;&amp;</name>
            <content>
                <baseType ref="7551"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9444">
            <name>ParsingObject**</name>
            <content>
                <baseType ref="7551"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1290">
            <name>Pointer&amp;&amp;</name>
            <content>
                <baseType ref="6735"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="7417">
            <name>PositiveParser</name>
        </type>
        <type derived="true" id="type.7419">
            <name>PositiveParser&amp;</name>
            <content>
                <baseType ref="7417"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1299">
            <name>PositiveParser&amp;&amp;</name>
            <content>
                <baseType ref="7417"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7418">
            <name>PositiveParser*</name>
            <content>
                <baseType ref="7417"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7508">
            <name>PostCall</name>
        </type>
        <type derived="true" id="type.8815">
            <name>PostCall&amp;</name>
            <content>
                <baseType ref="7508"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8818">
            <name>PostCall&amp;&amp;</name>
            <content>
                <baseType ref="7508"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8814">
            <name>PostCall*</name>
            <content>
                <baseType ref="7508"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1230">
            <name>PostfixDecrement&amp;&amp;</name>
            <content>
                <baseType ref="6606"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1227">
            <name>PostfixIncrement&amp;&amp;</name>
            <content>
                <baseType ref="6603"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="7507">
            <name>PreCall</name>
        </type>
        <type derived="true" id="type.8808">
            <name>PreCall&amp;</name>
            <content>
                <baseType ref="7507"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8811">
            <name>PreCall&amp;&amp;</name>
            <content>
                <baseType ref="7507"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8807">
            <name>PreCall*</name>
            <content>
                <baseType ref="7507"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1212">
            <name>PrefixDecrement&amp;&amp;</name>
            <content>
                <baseType ref="6513"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1209">
            <name>PrefixIncrement&amp;&amp;</name>
            <content>
                <baseType ref="6510"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="7701">
            <name>PrivateUseParser</name>
        </type>
        <type derived="true" id="type.7703">
            <name>PrivateUseParser&amp;</name>
            <content>
                <baseType ref="7701"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7702">
            <name>PrivateUseParser*</name>
            <content>
                <baseType ref="7701"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7638">
            <name>PunctuationParser</name>
        </type>
        <type derived="true" id="type.7640">
            <name>PunctuationParser&amp;</name>
            <content>
                <baseType ref="7638"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7639">
            <name>PunctuationParser*</name>
            <content>
                <baseType ref="7638"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9182" specialization="true">
            <name>RandomAccessIter&lt;ActionParser*, ActionParser*&amp;, ActionParser**></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="type.7400"/>
                <argumentType ref="type.9180"/>
                <argumentType ref="type.9181"/>
            </content>
        </type>
        <type derived="true" id="type.9184">
            <name>RandomAccessIter&lt;ActionParser*, ActionParser*&amp;, ActionParser**>&amp;</name>
            <content>
                <baseType ref="type.9182"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9188">
            <name>RandomAccessIter&lt;ActionParser*, ActionParser*&amp;, ActionParser**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9182"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9183">
            <name>RandomAccessIter&lt;ActionParser*, ActionParser*&amp;, ActionParser**>*</name>
            <content>
                <baseType ref="type.9182"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9173" specialization="true">
            <name>RandomAccessIter&lt;ActionParser*, const ActionParser*&amp;, const ActionParser**></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="type.7400"/>
                <argumentType ref="type.9171"/>
                <argumentType ref="type.9172"/>
            </content>
        </type>
        <type derived="true" id="type.9175">
            <name>RandomAccessIter&lt;ActionParser*, const ActionParser*&amp;, const ActionParser**>&amp;</name>
            <content>
                <baseType ref="type.9173"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1146">
            <name>RandomAccessIter&lt;ActionParser*, const ActionParser*&amp;, const ActionParser**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9173"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9174">
            <name>RandomAccessIter&lt;ActionParser*, const ActionParser*&amp;, const ActionParser**>*</name>
            <content>
                <baseType ref="type.9173"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1040">
            <name>RandomAccessIter&lt;Age*, const Age*&amp;, const Age**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4202"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1065">
            <name>RandomAccessIter&lt;AliasType*, const AliasType*&amp;, const AliasType**>&amp;&amp;</name>
            <content>
                <baseType ref="type.5252"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1055">
            <name>RandomAccessIter&lt;BidiClass*, const BidiClass*&amp;, const BidiClass**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4832"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1060">
            <name>RandomAccessIter&lt;BidiPairedBracketType*, const BidiPairedBracketType*&amp;, const BidiPairedBracketType**>&amp;&amp;</name>
            <content>
                <baseType ref="type.5042"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1025">
            <name>RandomAccessIter&lt;BinaryProperty*, const BinaryProperty*&amp;, const BinaryProperty**>&amp;&amp;</name>
            <content>
                <baseType ref="type.3559"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1030">
            <name>RandomAccessIter&lt;Block*, const Block*&amp;, const Block**>&amp;&amp;</name>
            <content>
                <baseType ref="type.3779"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8711" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Grammar*>*, Bucket&lt;Grammar*>*&amp;, Bucket&lt;Grammar*>**></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="type.8677"/>
                <argumentType ref="type.8709"/>
                <argumentType ref="type.8710"/>
            </content>
        </type>
        <type derived="true" id="type.8713">
            <name>RandomAccessIter&lt;Bucket&lt;Grammar*>*, Bucket&lt;Grammar*>*&amp;, Bucket&lt;Grammar*>**>&amp;</name>
            <content>
                <baseType ref="type.8711"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1112">
            <name>RandomAccessIter&lt;Bucket&lt;Grammar*>*, Bucket&lt;Grammar*>*&amp;, Bucket&lt;Grammar*>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8711"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712">
            <name>RandomAccessIter&lt;Bucket&lt;Grammar*>*, Bucket&lt;Grammar*>*&amp;, Bucket&lt;Grammar*>**>*</name>
            <content>
                <baseType ref="type.8711"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8702" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Grammar*>*, const Bucket&lt;Grammar*>*&amp;, const Bucket&lt;Grammar*>**></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="type.8677"/>
                <argumentType ref="type.8700"/>
                <argumentType ref="type.8701"/>
            </content>
        </type>
        <type derived="true" id="type.8704">
            <name>RandomAccessIter&lt;Bucket&lt;Grammar*>*, const Bucket&lt;Grammar*>*&amp;, const Bucket&lt;Grammar*>**>&amp;</name>
            <content>
                <baseType ref="type.8702"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1111">
            <name>RandomAccessIter&lt;Bucket&lt;Grammar*>*, const Bucket&lt;Grammar*>*&amp;, const Bucket&lt;Grammar*>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8702"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8703">
            <name>RandomAccessIter&lt;Bucket&lt;Grammar*>*, const Bucket&lt;Grammar*>*&amp;, const Bucket&lt;Grammar*>**>*</name>
            <content>
                <baseType ref="type.8702"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.895">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1920"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.890">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1839"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1911" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="type.1885"/>
                <argumentType ref="type.1909"/>
                <argumentType ref="type.1910"/>
            </content>
        </type>
        <type derived="true" id="type.889">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1830"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.894">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1911"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1039">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4179"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4170" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>**></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="type.4144"/>
                <argumentType ref="type.4168"/>
                <argumentType ref="type.4169"/>
            </content>
        </type>
        <type derived="true" id="type.1038">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4170"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1064">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.5229"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1063">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.5220"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1054">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4809"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1053">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4800"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1059">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.5019"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1058">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.5010"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1024">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.3543"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.3534" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="type.3508"/>
                <argumentType ref="type.3532"/>
                <argumentType ref="type.3533"/>
            </content>
        </type>
        <type derived="true" id="type.1023">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.3534"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1029">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.3756"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1028">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.3747"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1034">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.3969"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1033">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.3960"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1049">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4599"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1048">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4590"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1044">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4389"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1043">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4380"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8960" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="type.8925"/>
                <argumentType ref="type.8958"/>
                <argumentType ref="type.8959"/>
            </content>
        </type>
        <type derived="true" id="type.8962">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**>&amp;</name>
            <content>
                <baseType ref="type.8960"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1137">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8960"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8961">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**>*</name>
            <content>
                <baseType ref="type.8960"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8951" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="type.8925"/>
                <argumentType ref="type.8949"/>
                <argumentType ref="type.8950"/>
            </content>
        </type>
        <type derived="true" id="type.8953">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**>&amp;</name>
            <content>
                <baseType ref="type.8951"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1136">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8951"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8952">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**>*</name>
            <content>
                <baseType ref="type.8951"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9038" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="type.9003"/>
                <argumentType ref="type.9036"/>
                <argumentType ref="type.9037"/>
            </content>
        </type>
        <type derived="true" id="type.9040">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**>&amp;</name>
            <content>
                <baseType ref="type.9038"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1139">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9038"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9039">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**>*</name>
            <content>
                <baseType ref="type.9038"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9029" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="type.9003"/>
                <argumentType ref="type.9027"/>
                <argumentType ref="type.9028"/>
            </content>
        </type>
        <type derived="true" id="type.9031">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**>&amp;</name>
            <content>
                <baseType ref="type.9029"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1138">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9029"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9030">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**>*</name>
            <content>
                <baseType ref="type.9029"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9286" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="type.9251"/>
                <argumentType ref="type.9284"/>
                <argumentType ref="type.9285"/>
            </content>
        </type>
        <type derived="true" id="type.9288">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**>&amp;</name>
            <content>
                <baseType ref="type.9286"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1149">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9286"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9287">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**>*</name>
            <content>
                <baseType ref="type.9286"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9277" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="type.9251"/>
                <argumentType ref="type.9275"/>
                <argumentType ref="type.9276"/>
            </content>
        </type>
        <type derived="true" id="type.9279">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**>&amp;</name>
            <content>
                <baseType ref="type.9277"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1148">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9277"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9278">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**>*</name>
            <content>
                <baseType ref="type.9277"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8522" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*, Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="type.8487"/>
                <argumentType ref="type.8520"/>
                <argumentType ref="type.8521"/>
            </content>
        </type>
        <type derived="true" id="type.8524">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*, Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**>&amp;</name>
            <content>
                <baseType ref="type.8522"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1107">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*, Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8522"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8523">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*, Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**>*</name>
            <content>
                <baseType ref="type.8522"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8513" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="type.8487"/>
                <argumentType ref="type.8511"/>
                <argumentType ref="type.8512"/>
            </content>
        </type>
        <type derived="true" id="type.8515">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**>&amp;</name>
            <content>
                <baseType ref="type.8513"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1106">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8513"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8514">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**>*</name>
            <content>
                <baseType ref="type.8513"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.4102" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="type.4067"/>
                <argumentType ref="type.4100"/>
                <argumentType ref="type.4101"/>
            </content>
        </type>
        <type derived="true" id="type.1037">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4102"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1036">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4093"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1062">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.5152"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1061">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.5143"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1052">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4732"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1051">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4723"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1057">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4942"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1056">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4933"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1022">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.3445"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1021">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.3436"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1027">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.3679"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1026">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.3670"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1032">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.3892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1031">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.3883"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1047">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4522"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1046">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4513"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1042">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4312"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1041">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4303"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8796" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;String&lt;uchar>>*, Bucket&lt;String&lt;uchar>>*&amp;, Bucket&lt;String&lt;uchar>>**></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="type.8763"/>
                <argumentType ref="type.8794"/>
                <argumentType ref="type.8795"/>
            </content>
        </type>
        <type derived="true" id="type.8798">
            <name>RandomAccessIter&lt;Bucket&lt;String&lt;uchar>>*, Bucket&lt;String&lt;uchar>>*&amp;, Bucket&lt;String&lt;uchar>>**>&amp;</name>
            <content>
                <baseType ref="type.8796"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1130">
            <name>RandomAccessIter&lt;Bucket&lt;String&lt;uchar>>*, Bucket&lt;String&lt;uchar>>*&amp;, Bucket&lt;String&lt;uchar>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8796"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8797">
            <name>RandomAccessIter&lt;Bucket&lt;String&lt;uchar>>*, Bucket&lt;String&lt;uchar>>*&amp;, Bucket&lt;String&lt;uchar>>**>*</name>
            <content>
                <baseType ref="type.8796"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8787" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;String&lt;uchar>>*, const Bucket&lt;String&lt;uchar>>*&amp;, const Bucket&lt;String&lt;uchar>>**></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="type.8763"/>
                <argumentType ref="type.8785"/>
                <argumentType ref="type.8786"/>
            </content>
        </type>
        <type derived="true" id="type.8789">
            <name>RandomAccessIter&lt;Bucket&lt;String&lt;uchar>>*, const Bucket&lt;String&lt;uchar>>*&amp;, const Bucket&lt;String&lt;uchar>>**>&amp;</name>
            <content>
                <baseType ref="type.8787"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1129">
            <name>RandomAccessIter&lt;Bucket&lt;String&lt;uchar>>*, const Bucket&lt;String&lt;uchar>>*&amp;, const Bucket&lt;String&lt;uchar>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8787"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8788">
            <name>RandomAccessIter&lt;Bucket&lt;String&lt;uchar>>*, const Bucket&lt;String&lt;uchar>>*&amp;, const Bucket&lt;String&lt;uchar>>**>*</name>
            <content>
                <baseType ref="type.8787"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.899">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1996"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.903">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.2071"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.902">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.2062"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.898">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1987"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2183" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, Bucket&lt;ValueType>*&amp;, Bucket&lt;ValueType>**></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="type.2146"/>
                <argumentType ref="type.2181"/>
                <argumentType ref="type.2182"/>
            </content>
        </type>
        <type derived="true" id="type.913">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, Bucket&lt;ValueType>*&amp;, Bucket&lt;ValueType>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.2183"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.912">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, const Bucket&lt;ValueType>*&amp;, const Bucket&lt;ValueType>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.2174"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1006">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.3149"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.998">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.3055"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1002">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.3102"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.992">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.3008"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1018">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.3290"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1014">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.3243"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1010">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.3196"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1017">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.3281"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1001">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.3093"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.997">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.3046"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1005">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.3140"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.991">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2999"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1013">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.3234"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1009">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.3187"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1035">
            <name>RandomAccessIter&lt;GeneralCategory*, const GeneralCategory*&amp;, const GeneralCategory**>&amp;&amp;</name>
            <content>
                <baseType ref="type.3992"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9072" specialization="true">
            <name>RandomAccessIter&lt;Namespace*, Namespace*&amp;, Namespace**></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="type.7505"/>
                <argumentType ref="type.9047"/>
                <argumentType ref="type.9071"/>
            </content>
        </type>
        <type derived="true" id="type.9074">
            <name>RandomAccessIter&lt;Namespace*, Namespace*&amp;, Namespace**>&amp;</name>
            <content>
                <baseType ref="type.9072"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9078">
            <name>RandomAccessIter&lt;Namespace*, Namespace*&amp;, Namespace**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9072"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9073">
            <name>RandomAccessIter&lt;Namespace*, Namespace*&amp;, Namespace**>*</name>
            <content>
                <baseType ref="type.9072"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9064" specialization="true">
            <name>RandomAccessIter&lt;Namespace*, const Namespace*&amp;, const Namespace**></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="type.7505"/>
                <argumentType ref="type.8978"/>
                <argumentType ref="type.9060"/>
            </content>
        </type>
        <type derived="true" id="type.9066">
            <name>RandomAccessIter&lt;Namespace*, const Namespace*&amp;, const Namespace**>&amp;</name>
            <content>
                <baseType ref="type.9064"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1140">
            <name>RandomAccessIter&lt;Namespace*, const Namespace*&amp;, const Namespace**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9064"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9065">
            <name>RandomAccessIter&lt;Namespace*, const Namespace*&amp;, const Namespace**>*</name>
            <content>
                <baseType ref="type.9064"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9208" specialization="true">
            <name>RandomAccessIter&lt;NonterminalParser*, NonterminalParser*&amp;, NonterminalParser**></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="type.7513"/>
                <argumentType ref="type.9206"/>
                <argumentType ref="type.9207"/>
            </content>
        </type>
        <type derived="true" id="type.9210">
            <name>RandomAccessIter&lt;NonterminalParser*, NonterminalParser*&amp;, NonterminalParser**>&amp;</name>
            <content>
                <baseType ref="type.9208"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9214">
            <name>RandomAccessIter&lt;NonterminalParser*, NonterminalParser*&amp;, NonterminalParser**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9208"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9209">
            <name>RandomAccessIter&lt;NonterminalParser*, NonterminalParser*&amp;, NonterminalParser**>*</name>
            <content>
                <baseType ref="type.9208"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9199" specialization="true">
            <name>RandomAccessIter&lt;NonterminalParser*, const NonterminalParser*&amp;, const NonterminalParser**></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="type.7513"/>
                <argumentType ref="type.9197"/>
                <argumentType ref="type.9198"/>
            </content>
        </type>
        <type derived="true" id="type.9201">
            <name>RandomAccessIter&lt;NonterminalParser*, const NonterminalParser*&amp;, const NonterminalParser**>&amp;</name>
            <content>
                <baseType ref="type.9199"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1147">
            <name>RandomAccessIter&lt;NonterminalParser*, const NonterminalParser*&amp;, const NonterminalParser**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9199"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9200">
            <name>RandomAccessIter&lt;NonterminalParser*, const NonterminalParser*&amp;, const NonterminalParser**>*</name>
            <content>
                <baseType ref="type.9199"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1050">
            <name>RandomAccessIter&lt;NumericType*, const NumericType*&amp;, const NumericType**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4615"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8616" specialization="true">
            <name>RandomAccessIter&lt;RuleLink*, RuleLink*&amp;, RuleLink**></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="type.7744"/>
                <argumentType ref="type.8614"/>
                <argumentType ref="type.8615"/>
            </content>
        </type>
        <type derived="true" id="type.8618">
            <name>RandomAccessIter&lt;RuleLink*, RuleLink*&amp;, RuleLink**>&amp;</name>
            <content>
                <baseType ref="type.8616"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8622">
            <name>RandomAccessIter&lt;RuleLink*, RuleLink*&amp;, RuleLink**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8616"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8617">
            <name>RandomAccessIter&lt;RuleLink*, RuleLink*&amp;, RuleLink**>*</name>
            <content>
                <baseType ref="type.8616"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8607" specialization="true">
            <name>RandomAccessIter&lt;RuleLink*, const RuleLink*&amp;, const RuleLink**></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="type.7744"/>
                <argumentType ref="type.8605"/>
                <argumentType ref="type.8606"/>
            </content>
        </type>
        <type derived="true" id="type.8609">
            <name>RandomAccessIter&lt;RuleLink*, const RuleLink*&amp;, const RuleLink**>&amp;</name>
            <content>
                <baseType ref="type.8607"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1110">
            <name>RandomAccessIter&lt;RuleLink*, const RuleLink*&amp;, const RuleLink**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8607"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8608">
            <name>RandomAccessIter&lt;RuleLink*, const RuleLink*&amp;, const RuleLink**>*</name>
            <content>
                <baseType ref="type.8607"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8590" specialization="true">
            <name>RandomAccessIter&lt;RuleParser*, RuleParser*&amp;, RuleParser**></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="type.7738"/>
                <argumentType ref="type.8588"/>
                <argumentType ref="type.8589"/>
            </content>
        </type>
        <type derived="true" id="type.8592">
            <name>RandomAccessIter&lt;RuleParser*, RuleParser*&amp;, RuleParser**>&amp;</name>
            <content>
                <baseType ref="type.8590"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8596">
            <name>RandomAccessIter&lt;RuleParser*, RuleParser*&amp;, RuleParser**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8590"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8591">
            <name>RandomAccessIter&lt;RuleParser*, RuleParser*&amp;, RuleParser**>*</name>
            <content>
                <baseType ref="type.8590"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8581" specialization="true">
            <name>RandomAccessIter&lt;RuleParser*, const RuleParser*&amp;, const RuleParser**></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="type.7738"/>
                <argumentType ref="type.8579"/>
                <argumentType ref="type.8580"/>
            </content>
        </type>
        <type derived="true" id="type.8583">
            <name>RandomAccessIter&lt;RuleParser*, const RuleParser*&amp;, const RuleParser**>&amp;</name>
            <content>
                <baseType ref="type.8581"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8587">
            <name>RandomAccessIter&lt;RuleParser*, const RuleParser*&amp;, const RuleParser**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8581"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8582">
            <name>RandomAccessIter&lt;RuleParser*, const RuleParser*&amp;, const RuleParser**>*</name>
            <content>
                <baseType ref="type.8581"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1045">
            <name>RandomAccessIter&lt;Script*, const Script*&amp;, const Script**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4412"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.995">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.3029"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1016">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.3264"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1000">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.3076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1020">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.3311"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1004">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.3123"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1008">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.3170"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1012">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.3217"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.999">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.3069"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1003">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.3116"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1011">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.3210"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1007">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.3163"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.994">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.3022"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1019">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.3304"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1015">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.3257"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.810">
            <name>RandomAccessIter&lt;String&lt;char>, String&lt;char>&amp;, String&lt;char>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1075"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1068" specialization="true">
            <name>RandomAccessIter&lt;String&lt;char>, const String&lt;char>&amp;, const String&lt;char>*></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="type.1040"/>
                <argumentType ref="type.1045"/>
                <argumentType ref="type.1044"/>
            </content>
        </type>
        <type derived="true" id="type.809">
            <name>RandomAccessIter&lt;String&lt;char>, const String&lt;char>&amp;, const String&lt;char>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1068"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.828">
            <name>RandomAccessIter&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1165"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1158" specialization="true">
            <name>RandomAccessIter&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="type.1128"/>
                <argumentType ref="type.1133"/>
                <argumentType ref="type.1132"/>
            </content>
        </type>
        <type derived="true" id="type.7962">
            <name>RandomAccessIter&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1158"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.819">
            <name>RandomAccessIter&lt;String&lt;wchar>, String&lt;wchar>&amp;, String&lt;wchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1120"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.818">
            <name>RandomAccessIter&lt;String&lt;wchar>, const String&lt;wchar>&amp;, const String&lt;wchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1113"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9156" specialization="true">
            <name>RandomAccessIter&lt;System.Text.Parsing.AttrOrVar, AttrOrVar&amp;, AttrOrVar*></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="7731"/>
                <argumentType ref="type.7733"/>
                <argumentType ref="type.7732"/>
            </content>
        </type>
        <type derived="true" id="type.9158">
            <name>RandomAccessIter&lt;System.Text.Parsing.AttrOrVar, AttrOrVar&amp;, AttrOrVar*>&amp;</name>
            <content>
                <baseType ref="type.9156"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9162">
            <name>RandomAccessIter&lt;System.Text.Parsing.AttrOrVar, AttrOrVar&amp;, AttrOrVar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9156"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9157">
            <name>RandomAccessIter&lt;System.Text.Parsing.AttrOrVar, AttrOrVar&amp;, AttrOrVar*>*</name>
            <content>
                <baseType ref="type.9156"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9149" specialization="true">
            <name>RandomAccessIter&lt;System.Text.Parsing.AttrOrVar, const AttrOrVar&amp;, const AttrOrVar*></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="7731"/>
                <argumentType ref="type.7736"/>
                <argumentType ref="type.7735"/>
            </content>
        </type>
        <type derived="true" id="type.9151">
            <name>RandomAccessIter&lt;System.Text.Parsing.AttrOrVar, const AttrOrVar&amp;, const AttrOrVar*>&amp;</name>
            <content>
                <baseType ref="type.9149"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1145">
            <name>RandomAccessIter&lt;System.Text.Parsing.AttrOrVar, const AttrOrVar&amp;, const AttrOrVar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9149"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9150">
            <name>RandomAccessIter&lt;System.Text.Parsing.AttrOrVar, const AttrOrVar&amp;, const AttrOrVar*>*</name>
            <content>
                <baseType ref="type.9149"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9135" specialization="true">
            <name>RandomAccessIter&lt;System.Text.Parsing.CharRange, CharRange&amp;, CharRange*></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="7569"/>
                <argumentType ref="type.7571"/>
                <argumentType ref="type.7570"/>
            </content>
        </type>
        <type derived="true" id="type.9137">
            <name>RandomAccessIter&lt;System.Text.Parsing.CharRange, CharRange&amp;, CharRange*>&amp;</name>
            <content>
                <baseType ref="type.9135"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1144">
            <name>RandomAccessIter&lt;System.Text.Parsing.CharRange, CharRange&amp;, CharRange*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9135"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9136">
            <name>RandomAccessIter&lt;System.Text.Parsing.CharRange, CharRange&amp;, CharRange*>*</name>
            <content>
                <baseType ref="type.9135"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9128" specialization="true">
            <name>RandomAccessIter&lt;System.Text.Parsing.CharRange, const CharRange&amp;, const CharRange*></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="7569"/>
                <argumentType ref="type.7574"/>
                <argumentType ref="type.7573"/>
            </content>
        </type>
        <type derived="true" id="type.9130">
            <name>RandomAccessIter&lt;System.Text.Parsing.CharRange, const CharRange&amp;, const CharRange*>&amp;</name>
            <content>
                <baseType ref="type.9128"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1143">
            <name>RandomAccessIter&lt;System.Text.Parsing.CharRange, const CharRange&amp;, const CharRange*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9128"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9129">
            <name>RandomAccessIter&lt;System.Text.Parsing.CharRange, const CharRange&amp;, const CharRange*>*</name>
            <content>
                <baseType ref="type.9128"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8883" specialization="true">
            <name>RandomAccessIter&lt;System.Text.Parsing.RuleData, RuleData&amp;, RuleData*></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="7535"/>
                <argumentType ref="type.8881"/>
                <argumentType ref="type.8882"/>
            </content>
        </type>
        <type derived="true" id="type.8885">
            <name>RandomAccessIter&lt;System.Text.Parsing.RuleData, RuleData&amp;, RuleData*>&amp;</name>
            <content>
                <baseType ref="type.8883"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1135">
            <name>RandomAccessIter&lt;System.Text.Parsing.RuleData, RuleData&amp;, RuleData*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8883"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8884">
            <name>RandomAccessIter&lt;System.Text.Parsing.RuleData, RuleData&amp;, RuleData*>*</name>
            <content>
                <baseType ref="type.8883"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8874" specialization="true">
            <name>RandomAccessIter&lt;System.Text.Parsing.RuleData, const RuleData&amp;, const RuleData*></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="7535"/>
                <argumentType ref="type.8871"/>
                <argumentType ref="type.8872"/>
            </content>
        </type>
        <type derived="true" id="type.8876">
            <name>RandomAccessIter&lt;System.Text.Parsing.RuleData, const RuleData&amp;, const RuleData*>&amp;</name>
            <content>
                <baseType ref="type.8874"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1134">
            <name>RandomAccessIter&lt;System.Text.Parsing.RuleData, const RuleData&amp;, const RuleData*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8874"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8875">
            <name>RandomAccessIter&lt;System.Text.Parsing.RuleData, const RuleData&amp;, const RuleData*>*</name>
            <content>
                <baseType ref="type.8874"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1067">
            <name>RandomAccessIter&lt;System.Unicode.Alias, Alias&amp;, Alias*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5281"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1066">
            <name>RandomAccessIter&lt;System.Unicode.Alias, const Alias&amp;, const Alias*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5274"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2662" specialization="true">
            <name>RandomAccessIter&lt;T, R, P></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="712"/>
                <argumentType ref="713"/>
                <argumentType ref="714"/>
            </content>
        </type>
        <type id="type.2648" specialization="true">
            <name>RandomAccessIter&lt;T, R, P></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="706"/>
                <argumentType ref="707"/>
                <argumentType ref="708"/>
            </content>
        </type>
        <type id="type.2655" specialization="true">
            <name>RandomAccessIter&lt;T, R, P></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="709"/>
                <argumentType ref="710"/>
                <argumentType ref="711"/>
            </content>
        </type>
        <type derived="true" id="type.966">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.2669"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.964">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.2655"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.963">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.2648"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.965">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.2662"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.969">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.2690"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.968">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.2683"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.967">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.2676"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2640" specialization="true">
            <name>RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="704"/>
                <argumentType ref="type.2638"/>
                <argumentType ref="type.2639"/>
            </content>
        </type>
        <type derived="true" id="type.989">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2975"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.961">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2640"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.921">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2380"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.925">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2407"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.927">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2434"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2425" specialization="true">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="664"/>
                <argumentType ref="type.2422"/>
                <argumentType ref="type.2423"/>
            </content>
        </type>
        <type id="type.2371" specialization="true">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="662"/>
                <argumentType ref="type.2368"/>
                <argumentType ref="type.2369"/>
            </content>
        </type>
        <type id="type.2631" specialization="true">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="704"/>
                <argumentType ref="type.2621"/>
                <argumentType ref="type.2629"/>
            </content>
        </type>
        <type derived="true" id="type.988">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2967"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.926">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2425"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.920">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2371"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.924">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2398"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.960">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2631"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1094">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7203"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1095">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7263"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7102" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="type.7062"/>
                <argumentType ref="type.7067"/>
                <argumentType ref="type.7066"/>
            </content>
        </type>
        <type derived="true" id="type.8229">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7102"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1093">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7154"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8856" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Context>, UniquePtr&lt;System.Text.Parsing.Context>&amp;, UniquePtr&lt;System.Text.Parsing.Context>*></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="type.8827"/>
                <argumentType ref="type.8829"/>
                <argumentType ref="type.8828"/>
            </content>
        </type>
        <type derived="true" id="type.8858">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Context>, UniquePtr&lt;System.Text.Parsing.Context>&amp;, UniquePtr&lt;System.Text.Parsing.Context>*>&amp;</name>
            <content>
                <baseType ref="type.8856"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8862">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Context>, UniquePtr&lt;System.Text.Parsing.Context>&amp;, UniquePtr&lt;System.Text.Parsing.Context>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8856"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8857">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Context>, UniquePtr&lt;System.Text.Parsing.Context>&amp;, UniquePtr&lt;System.Text.Parsing.Context>*>*</name>
            <content>
                <baseType ref="type.8856"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8849" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Context>, const UniquePtr&lt;System.Text.Parsing.Context>&amp;, const UniquePtr&lt;System.Text.Parsing.Context>*></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="type.8827"/>
                <argumentType ref="type.8832"/>
                <argumentType ref="type.8831"/>
            </content>
        </type>
        <type derived="true" id="type.8851">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Context>, const UniquePtr&lt;System.Text.Parsing.Context>&amp;, const UniquePtr&lt;System.Text.Parsing.Context>*>&amp;</name>
            <content>
                <baseType ref="type.8849"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1133">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Context>, const UniquePtr&lt;System.Text.Parsing.Context>&amp;, const UniquePtr&lt;System.Text.Parsing.Context>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8849"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8850">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Context>, const UniquePtr&lt;System.Text.Parsing.Context>&amp;, const UniquePtr&lt;System.Text.Parsing.Context>*>*</name>
            <content>
                <baseType ref="type.8849"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8426" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Object>, UniquePtr&lt;System.Text.Parsing.Object>&amp;, UniquePtr&lt;System.Text.Parsing.Object>*></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="type.8397"/>
                <argumentType ref="type.8399"/>
                <argumentType ref="type.8398"/>
            </content>
        </type>
        <type derived="true" id="type.8428">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Object>, UniquePtr&lt;System.Text.Parsing.Object>&amp;, UniquePtr&lt;System.Text.Parsing.Object>*>&amp;</name>
            <content>
                <baseType ref="type.8426"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8432">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Object>, UniquePtr&lt;System.Text.Parsing.Object>&amp;, UniquePtr&lt;System.Text.Parsing.Object>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8426"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8427">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Object>, UniquePtr&lt;System.Text.Parsing.Object>&amp;, UniquePtr&lt;System.Text.Parsing.Object>*>*</name>
            <content>
                <baseType ref="type.8426"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8419" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Object>, const UniquePtr&lt;System.Text.Parsing.Object>&amp;, const UniquePtr&lt;System.Text.Parsing.Object>*></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="type.8397"/>
                <argumentType ref="type.8402"/>
                <argumentType ref="type.8401"/>
            </content>
        </type>
        <type derived="true" id="type.8421">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Object>, const UniquePtr&lt;System.Text.Parsing.Object>&amp;, const UniquePtr&lt;System.Text.Parsing.Object>*>&amp;</name>
            <content>
                <baseType ref="type.8419"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1105">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Object>, const UniquePtr&lt;System.Text.Parsing.Object>&amp;, const UniquePtr&lt;System.Text.Parsing.Object>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8419"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8420">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Object>, const UniquePtr&lt;System.Text.Parsing.Object>&amp;, const UniquePtr&lt;System.Text.Parsing.Object>*>*</name>
            <content>
                <baseType ref="type.8419"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9110" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>, UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;, UniquePtr&lt;System.Text.Parsing.ParsingDomain>*></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="type.9090"/>
                <argumentType ref="type.9092"/>
                <argumentType ref="type.9091"/>
            </content>
        </type>
        <type derived="true" id="type.9112">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>, UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;, UniquePtr&lt;System.Text.Parsing.ParsingDomain>*>&amp;</name>
            <content>
                <baseType ref="type.9110"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1142">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>, UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;, UniquePtr&lt;System.Text.Parsing.ParsingDomain>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9110"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9111">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>, UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;, UniquePtr&lt;System.Text.Parsing.ParsingDomain>*>*</name>
            <content>
                <baseType ref="type.9110"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9103" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>, const UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;, const UniquePtr&lt;System.Text.Parsing.ParsingDomain>*></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="type.9090"/>
                <argumentType ref="type.9095"/>
                <argumentType ref="type.9094"/>
            </content>
        </type>
        <type derived="true" id="type.9105">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>, const UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;, const UniquePtr&lt;System.Text.Parsing.ParsingDomain>*>&amp;</name>
            <content>
                <baseType ref="type.9103"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1141">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>, const UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;, const UniquePtr&lt;System.Text.Parsing.ParsingDomain>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9103"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9104">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>, const UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;, const UniquePtr&lt;System.Text.Parsing.ParsingDomain>*>*</name>
            <content>
                <baseType ref="type.9103"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8389" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>, UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;, UniquePtr&lt;System.Text.Parsing.ParsingObject>*></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="type.8369"/>
                <argumentType ref="type.8371"/>
                <argumentType ref="type.8370"/>
            </content>
        </type>
        <type derived="true" id="type.8391">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>, UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;, UniquePtr&lt;System.Text.Parsing.ParsingObject>*>&amp;</name>
            <content>
                <baseType ref="type.8389"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1104">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>, UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;, UniquePtr&lt;System.Text.Parsing.ParsingObject>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8389"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8390">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>, UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;, UniquePtr&lt;System.Text.Parsing.ParsingObject>*>*</name>
            <content>
                <baseType ref="type.8389"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8382" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>, const UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;, const UniquePtr&lt;System.Text.Parsing.ParsingObject>*></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="type.8369"/>
                <argumentType ref="type.8374"/>
                <argumentType ref="type.8373"/>
            </content>
        </type>
        <type derived="true" id="type.8384">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>, const UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;, const UniquePtr&lt;System.Text.Parsing.ParsingObject>*>&amp;</name>
            <content>
                <baseType ref="type.8382"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1103">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>, const UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;, const UniquePtr&lt;System.Text.Parsing.ParsingObject>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8382"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8383">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>, const UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;, const UniquePtr&lt;System.Text.Parsing.ParsingObject>*>*</name>
            <content>
                <baseType ref="type.8382"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1069">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, UniquePtr&lt;System.Unicode.CharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5310"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1068">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, const UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5303"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1082">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.CharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5400"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5393" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, const UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfoPage>*></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="type.5380"/>
                <argumentType ref="type.5385"/>
                <argumentType ref="type.5384"/>
            </content>
        </type>
        <type derived="true" id="type.1081">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, const UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5393"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1071">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5338"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1070">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5331"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1084">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5435"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1083">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5428"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8072" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="type.3"/>
                <argumentType ref="type.24"/>
                <argumentType ref="type.23"/>
            </content>
        </type>
        <type id="type.937" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="type.3"/>
                <argumentType ref="type.24"/>
                <argumentType ref="type.23"/>
            </content>
        </type>
        <type id="type.2534" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="type.3"/>
                <argumentType ref="type.24"/>
                <argumentType ref="type.23"/>
            </content>
        </type>
        <type derived="true" id="type.939">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <baseType ref="type.937"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8074">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <baseType ref="type.8072"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.944">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2534"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.943">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.937"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1092">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.6887"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1101">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8072"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8073">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <baseType ref="type.8072"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.938">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <baseType ref="type.937"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8073">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <baseType ref="type.8072"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.802" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="type.12"/>
                <argumentType ref="type.51"/>
                <argumentType ref="type.50"/>
            </content>
        </type>
        <type id="type.7936" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="type.12"/>
                <argumentType ref="type.51"/>
                <argumentType ref="type.50"/>
            </content>
        </type>
        <type derived="true" id="type.7938">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <baseType ref="type.7936"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.804">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <baseType ref="type.802"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1097">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7936"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1088">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;&amp;</name>
            <content>
                <baseType ref="type.6751"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.808">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;&amp;</name>
            <content>
                <baseType ref="type.802"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7937">
            <name>RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <baseType ref="type.7936"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.803">
            <name>RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <baseType ref="type.802"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7929" specialization="true">
            <name>RandomAccessIter&lt;char, const char&amp;, const char*></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="type.12"/>
                <argumentType ref="type.1046"/>
                <argumentType ref="type.150"/>
            </content>
        </type>
        <type id="type.795" specialization="true">
            <name>RandomAccessIter&lt;char, const char&amp;, const char*></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="type.12"/>
                <argumentType ref="type.1046"/>
                <argumentType ref="type.150"/>
            </content>
        </type>
        <type derived="true" id="type.7931">
            <name>RandomAccessIter&lt;char, const char&amp;, const char*>&amp;</name>
            <content>
                <baseType ref="type.7929"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.797">
            <name>RandomAccessIter&lt;char, const char&amp;, const char*>&amp;</name>
            <content>
                <baseType ref="type.795"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1087">
            <name>RandomAccessIter&lt;char, const char&amp;, const char*>&amp;&amp;</name>
            <content>
                <baseType ref="type.6744"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1096">
            <name>RandomAccessIter&lt;char, const char&amp;, const char*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7929"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.801">
            <name>RandomAccessIter&lt;char, const char&amp;, const char*>&amp;&amp;</name>
            <content>
                <baseType ref="type.795"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.796">
            <name>RandomAccessIter&lt;char, const char&amp;, const char*>*</name>
            <content>
                <baseType ref="type.795"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7930">
            <name>RandomAccessIter&lt;char, const char&amp;, const char*>*</name>
            <content>
                <baseType ref="type.7929"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.7955" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="type.14"/>
                <argumentType ref="type.57"/>
                <argumentType ref="type.56"/>
            </content>
        </type>
        <type id="type.821" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="type.14"/>
                <argumentType ref="type.57"/>
                <argumentType ref="type.56"/>
            </content>
        </type>
        <type derived="true" id="type.823">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <baseType ref="type.821"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7957">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <baseType ref="type.7955"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1099">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7955"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1090">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.6770"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.829">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1144"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.827">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.821"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.822">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <baseType ref="type.821"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7956">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <baseType ref="type.7955"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1072">
            <name>RandomAccessIter&lt;uint, const uint&amp;, const uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5355"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8209" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="type.7"/>
                <argumentType ref="type.36"/>
                <argumentType ref="type.35"/>
            </content>
        </type>
        <type id="type.1073" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="type.7"/>
                <argumentType ref="type.36"/>
                <argumentType ref="type.35"/>
            </content>
        </type>
        <type id="type.8209" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="type.7"/>
                <argumentType ref="type.36"/>
                <argumentType ref="type.35"/>
            </content>
        </type>
        <type derived="true" id="type.8211">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <baseType ref="type.8209"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1075">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <baseType ref="type.1073"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1079">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1073"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1080">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5362"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1102">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8209"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8210">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <baseType ref="type.8209"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1074">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <baseType ref="type.1073"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.830">
            <name>RandomAccessIter&lt;ulong, const ulong&amp;, const ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1187"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7966" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="type.9"/>
                <argumentType ref="type.42"/>
                <argumentType ref="type.41"/>
            </content>
        </type>
        <type id="type.6781" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="type.9"/>
                <argumentType ref="type.42"/>
                <argumentType ref="type.41"/>
            </content>
        </type>
        <type id="type.831" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="type.9"/>
                <argumentType ref="type.42"/>
                <argumentType ref="type.41"/>
            </content>
        </type>
        <type derived="true" id="type.7968">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <baseType ref="type.7966"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.833">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <baseType ref="type.831"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1100">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.837">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.831"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.838">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1194"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1091">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.6781"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7967">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <baseType ref="type.7966"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.832">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <baseType ref="type.831"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7967">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <baseType ref="type.7966"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.811" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="type.13"/>
                <argumentType ref="type.54"/>
                <argumentType ref="type.53"/>
            </content>
        </type>
        <type id="type.7945" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="2648"/>
                <argumentType ref="type.13"/>
                <argumentType ref="type.54"/>
                <argumentType ref="type.53"/>
            </content>
        </type>
        <type derived="true" id="type.7947">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <baseType ref="type.7945"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.813">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <baseType ref="type.811"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.820">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1099"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1098">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.7945"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.817">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.811"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1089">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.6760"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7946">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <baseType ref="type.7945"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.812">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <baseType ref="type.811"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7725">
            <name>RangeParser</name>
        </type>
        <type derived="true" id="type.7727">
            <name>RangeParser&amp;</name>
            <content>
                <baseType ref="7725"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7726">
            <name>RangeParser*</name>
            <content>
                <baseType ref="7725"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.934">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;&amp;</name>
            <content>
                <baseType ref="type.2472"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.978">
            <name>RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare>&amp;&amp;</name>
            <content>
                <baseType ref="type.2735"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.983">
            <name>RedBlackTree&lt;T, T, Identity&lt;T>, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.2795"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7357">
            <name>RedBlackTreeNodeBase&amp;</name>
            <content>
                <baseType ref="727"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.786">
            <name>RedBlackTreeNodeBase&amp;</name>
            <content>
                <baseType ref="727"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1184">
            <name>RedBlackTreeNodeBase&amp;&amp;</name>
            <content>
                <baseType ref="727"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7356">
            <name>RedBlackTreeNodeBase*</name>
            <content>
                <baseType ref="727"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.785">
            <name>RedBlackTreeNodeBase*</name>
            <content>
                <baseType ref="727"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.933">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2498"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.2480" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="2705"/>
                <argumentType ref="type.2455"/>
                <argumentType ref="type.2469"/>
                <argumentType ref="type.2478"/>
            </content>
        </type>
        <type derived="true" id="type.932">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2480"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.974">
            <name>RedBlackTreeNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.2705"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.975">
            <name>RedBlackTreeNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.2720"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.982">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2818"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.981">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2803"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.985">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2860"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.986">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2917"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.977">
            <name>RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2759"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.976">
            <name>RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2744"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8636" specialization="true">
            <name>Rel&lt;Grammar*></name>
            <content>
                <primaryType ref="1478"/>
                <argumentType ref="type.7469"/>
            </content>
        </type>
        <type derived="true" id="type.8644">
            <name>Rel&lt;Grammar*>&amp;</name>
            <content>
                <baseType ref="type.8636"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9400">
            <name>Rel&lt;Grammar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8636"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8643">
            <name>Rel&lt;Grammar*>*</name>
            <content>
                <baseType ref="type.8636"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8444" specialization="true">
            <name>Rel&lt;String&lt;uchar>></name>
            <content>
                <primaryType ref="1478"/>
                <argumentType ref="type.1128"/>
            </content>
        </type>
        <type derived="true" id="type.8452">
            <name>Rel&lt;String&lt;uchar>>&amp;</name>
            <content>
                <baseType ref="type.8444"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9322">
            <name>Rel&lt;String&lt;uchar>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8444"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8451">
            <name>Rel&lt;String&lt;uchar>>*</name>
            <content>
                <baseType ref="type.8444"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1251">
            <name>ReturnStatement&amp;&amp;</name>
            <content>
                <baseType ref="6654"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="7535">
            <name>RuleData</name>
        </type>
        <type derived="true" id="type.8881">
            <name>RuleData&amp;</name>
            <content>
                <baseType ref="7535"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8891">
            <name>RuleData&amp;&amp;</name>
            <content>
                <baseType ref="7535"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8882">
            <name>RuleData*</name>
            <content>
                <baseType ref="7535"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9512">
            <name>RuleData*&amp;</name>
            <content>
                <baseType ref="7535"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9511">
            <name>RuleData**</name>
            <content>
                <baseType ref="7535"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7743">
            <name>RuleLink</name>
        </type>
        <type derived="true" id="type.7745">
            <name>RuleLink&amp;</name>
            <content>
                <baseType ref="7743"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7744">
            <name>RuleLink*</name>
            <content>
                <baseType ref="7743"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8614">
            <name>RuleLink*&amp;</name>
            <content>
                <baseType ref="7743"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8624">
            <name>RuleLink*&amp;&amp;</name>
            <content>
                <baseType ref="7743"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8615">
            <name>RuleLink**</name>
            <content>
                <baseType ref="7743"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9387">
            <name>RuleLink**&amp;</name>
            <content>
                <baseType ref="7743"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9388">
            <name>RuleLink**&amp;&amp;</name>
            <content>
                <baseType ref="7743"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9386">
            <name>RuleLink***</name>
            <content>
                <baseType ref="7743"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7737">
            <name>RuleParser</name>
        </type>
        <type derived="true" id="type.7739">
            <name>RuleParser&amp;</name>
            <content>
                <baseType ref="7737"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7738">
            <name>RuleParser*</name>
            <content>
                <baseType ref="7737"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8588">
            <name>RuleParser*&amp;</name>
            <content>
                <baseType ref="7737"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8598">
            <name>RuleParser*&amp;&amp;</name>
            <content>
                <baseType ref="7737"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8589">
            <name>RuleParser**</name>
            <content>
                <baseType ref="7737"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9384">
            <name>RuleParser**&amp;</name>
            <content>
                <baseType ref="7737"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9385">
            <name>RuleParser**&amp;&amp;</name>
            <content>
                <baseType ref="7737"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9383">
            <name>RuleParser***</name>
            <content>
                <baseType ref="7737"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1287">
            <name>RvalueRef&amp;&amp;</name>
            <content>
                <baseType ref="6732"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="7749">
            <name>Scanner</name>
        </type>
        <type derived="true" id="type.7751">
            <name>Scanner&amp;</name>
            <content>
                <baseType ref="7749"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7750">
            <name>Scanner*</name>
            <content>
                <baseType ref="7749"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9627">
            <name>Scanner*&amp;</name>
            <content>
                <baseType ref="7749"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9626">
            <name>Scanner**</name>
            <content>
                <baseType ref="7749"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7755">
            <name>Scope</name>
        </type>
        <type derived="true" id="type.7757">
            <name>Scope&amp;</name>
            <content>
                <baseType ref="7755"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7756">
            <name>Scope*</name>
            <content>
                <baseType ref="7755"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9415">
            <name>Scope*&amp;</name>
            <content>
                <baseType ref="7755"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9416">
            <name>Scope*&amp;&amp;</name>
            <content>
                <baseType ref="7755"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9414">
            <name>Scope**</name>
            <content>
                <baseType ref="7755"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8902" specialization="true">
            <name>SelectFirst&lt;String&lt;uchar>, Grammar*></name>
            <content>
                <primaryType ref="2578"/>
                <argumentType ref="type.1128"/>
                <argumentType ref="type.7469"/>
            </content>
        </type>
        <type derived="true" id="type.8911">
            <name>SelectFirst&lt;String&lt;uchar>, Grammar*>&amp;</name>
            <content>
                <baseType ref="type.8902"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9517">
            <name>SelectFirst&lt;String&lt;uchar>, Grammar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8902"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8910">
            <name>SelectFirst&lt;String&lt;uchar>, Grammar*>*</name>
            <content>
                <baseType ref="type.8902"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9552">
            <name>SelectFirst&lt;String&lt;uchar>, Grammar*>*&amp;</name>
            <content>
                <baseType ref="type.8902"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9551">
            <name>SelectFirst&lt;String&lt;uchar>, Grammar*>**</name>
            <content>
                <baseType ref="type.8902"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8980" specialization="true">
            <name>SelectFirst&lt;String&lt;uchar>, Namespace*></name>
            <content>
                <primaryType ref="2578"/>
                <argumentType ref="type.1128"/>
                <argumentType ref="type.7505"/>
            </content>
        </type>
        <type derived="true" id="type.8989">
            <name>SelectFirst&lt;String&lt;uchar>, Namespace*>&amp;</name>
            <content>
                <baseType ref="type.8980"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9526">
            <name>SelectFirst&lt;String&lt;uchar>, Namespace*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8980"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8988">
            <name>SelectFirst&lt;String&lt;uchar>, Namespace*>*</name>
            <content>
                <baseType ref="type.8980"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9538">
            <name>SelectFirst&lt;String&lt;uchar>, Namespace*>*&amp;</name>
            <content>
                <baseType ref="type.8980"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9537">
            <name>SelectFirst&lt;String&lt;uchar>, Namespace*>**</name>
            <content>
                <baseType ref="type.8980"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9228" specialization="true">
            <name>SelectFirst&lt;String&lt;uchar>, ParsingObject*></name>
            <content>
                <primaryType ref="2578"/>
                <argumentType ref="type.1128"/>
                <argumentType ref="type.7552"/>
            </content>
        </type>
        <type derived="true" id="type.9237">
            <name>SelectFirst&lt;String&lt;uchar>, ParsingObject*>&amp;</name>
            <content>
                <baseType ref="type.9228"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9629">
            <name>SelectFirst&lt;String&lt;uchar>, ParsingObject*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9228"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9236">
            <name>SelectFirst&lt;String&lt;uchar>, ParsingObject*>*</name>
            <content>
                <baseType ref="type.9228"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9643">
            <name>SelectFirst&lt;String&lt;uchar>, ParsingObject*>*&amp;</name>
            <content>
                <baseType ref="type.9228"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9642">
            <name>SelectFirst&lt;String&lt;uchar>, ParsingObject*>**</name>
            <content>
                <baseType ref="type.9228"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8464" specialization="true">
            <name>SelectFirst&lt;String&lt;uchar>, String&lt;uchar>></name>
            <content>
                <primaryType ref="2578"/>
                <argumentType ref="type.1128"/>
                <argumentType ref="type.1128"/>
            </content>
        </type>
        <type derived="true" id="type.8473">
            <name>SelectFirst&lt;String&lt;uchar>, String&lt;uchar>>&amp;</name>
            <content>
                <baseType ref="type.8464"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9311">
            <name>SelectFirst&lt;String&lt;uchar>, String&lt;uchar>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8464"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8472">
            <name>SelectFirst&lt;String&lt;uchar>, String&lt;uchar>>*</name>
            <content>
                <baseType ref="type.8464"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9337">
            <name>SelectFirst&lt;String&lt;uchar>, String&lt;uchar>>*&amp;</name>
            <content>
                <baseType ref="type.8464"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9336">
            <name>SelectFirst&lt;String&lt;uchar>, String&lt;uchar>>**</name>
            <content>
                <baseType ref="type.8464"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7677">
            <name>SeparatorParser</name>
        </type>
        <type derived="true" id="type.7679">
            <name>SeparatorParser&amp;</name>
            <content>
                <baseType ref="7677"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7678">
            <name>SeparatorParser*</name>
            <content>
                <baseType ref="7677"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7435">
            <name>SequenceParser</name>
        </type>
        <type derived="true" id="type.7437">
            <name>SequenceParser&amp;</name>
            <content>
                <baseType ref="7435"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7436">
            <name>SequenceParser*</name>
            <content>
                <baseType ref="7435"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1233">
            <name>SizeOf&amp;&amp;</name>
            <content>
                <baseType ref="6609"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="7584">
            <name>SpaceParser</name>
        </type>
        <type derived="true" id="type.7586">
            <name>SpaceParser&amp;</name>
            <content>
                <baseType ref="7584"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7585">
            <name>SpaceParser*</name>
            <content>
                <baseType ref="7584"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7680">
            <name>SpaceSeparatorParser</name>
        </type>
        <type derived="true" id="type.7682">
            <name>SpaceSeparatorParser&amp;</name>
            <content>
                <baseType ref="7680"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7681">
            <name>SpaceSeparatorParser*</name>
            <content>
                <baseType ref="7680"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7620">
            <name>SpacingMarkParser</name>
        </type>
        <type derived="true" id="type.7622">
            <name>SpacingMarkParser&amp;</name>
            <content>
                <baseType ref="7620"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7621">
            <name>SpacingMarkParser*</name>
            <content>
                <baseType ref="7620"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7761">
            <name>Span</name>
        </type>
        <type derived="true" id="type.7763">
            <name>Span&amp;</name>
            <content>
                <baseType ref="7761"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9296">
            <name>Span&amp;&amp;</name>
            <content>
                <baseType ref="7761"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7762">
            <name>Span*</name>
            <content>
                <baseType ref="7761"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9048" specialization="true">
            <name>Stack&lt;Namespace*></name>
            <content>
                <primaryType ref="2950"/>
                <argumentType ref="type.7505"/>
            </content>
        </type>
        <type derived="true" id="type.9053">
            <name>Stack&lt;Namespace*>&amp;</name>
            <content>
                <baseType ref="type.9048"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9052">
            <name>Stack&lt;Namespace*>*</name>
            <content>
                <baseType ref="type.9048"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8837" specialization="true">
            <name>Stack&lt;UniquePtr&lt;System.Text.Parsing.Context>></name>
            <content>
                <primaryType ref="2950"/>
                <argumentType ref="type.8827"/>
            </content>
        </type>
        <type derived="true" id="type.8842">
            <name>Stack&lt;UniquePtr&lt;System.Text.Parsing.Context>>&amp;</name>
            <content>
                <baseType ref="type.8837"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9509">
            <name>Stack&lt;UniquePtr&lt;System.Text.Parsing.Context>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8837"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8841">
            <name>Stack&lt;UniquePtr&lt;System.Text.Parsing.Context>>*</name>
            <content>
                <baseType ref="type.8837"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8407" specialization="true">
            <name>Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>></name>
            <content>
                <primaryType ref="2950"/>
                <argumentType ref="type.8397"/>
            </content>
        </type>
        <type derived="true" id="type.8412">
            <name>Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp;</name>
            <content>
                <baseType ref="type.8407"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8411">
            <name>Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>*</name>
            <content>
                <baseType ref="type.8407"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1248">
            <name>Statement&amp;&amp;</name>
            <content>
                <baseType ref="6645"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1172">
            <name>StaticInitCriticalSection&amp;&amp;</name>
            <content>
                <baseType ref="146"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.775">
            <name>StreamWriter&amp;</name>
            <content>
                <baseType ref="773"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.774">
            <name>StreamWriter*</name>
            <content>
                <baseType ref="773"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9413">
            <name>StreamWriter*&amp;</name>
            <content>
                <baseType ref="773"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9412">
            <name>StreamWriter**</name>
            <content>
                <baseType ref="773"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.993">
            <name>String&lt;CharT>&amp;&amp;</name>
            <content>
                <baseType ref="type.2990"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1040" specialization="true">
            <name>String&lt;char></name>
            <content>
                <primaryType ref="2990"/>
                <argumentType ref="type.12"/>
            </content>
        </type>
        <type id="type.1128" specialization="true">
            <name>String&lt;uchar></name>
            <content>
                <primaryType ref="2990"/>
                <argumentType ref="type.14"/>
            </content>
        </type>
        <type derived="true" id="type.1130">
            <name>String&lt;uchar>&amp;</name>
            <content>
                <baseType ref="type.1128"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1129">
            <name>String&lt;uchar>*</name>
            <content>
                <baseType ref="type.1128"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9353">
            <name>String&lt;uchar>*&amp;</name>
            <content>
                <baseType ref="type.1128"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9463">
            <name>String&lt;uchar>**</name>
            <content>
                <baseType ref="type.1128"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7563">
            <name>StringParser</name>
        </type>
        <type derived="true" id="type.7565">
            <name>StringParser&amp;</name>
            <content>
                <baseType ref="7563"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9119">
            <name>StringParser&amp;&amp;</name>
            <content>
                <baseType ref="7563"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7564">
            <name>StringParser*</name>
            <content>
                <baseType ref="7563"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7698">
            <name>SurrogateParser</name>
        </type>
        <type derived="true" id="type.7700">
            <name>SurrogateParser&amp;</name>
            <content>
                <baseType ref="7698"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7699">
            <name>SurrogateParser*</name>
            <content>
                <baseType ref="7698"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1266">
            <name>SwitchStatement&amp;&amp;</name>
            <content>
                <baseType ref="6705"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="7662">
            <name>SymbolParser</name>
        </type>
        <type derived="true" id="type.7664">
            <name>SymbolParser&amp;</name>
            <content>
                <baseType ref="7662"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7663">
            <name>SymbolParser*</name>
            <content>
                <baseType ref="7662"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.893">
            <name>T&amp;</name>
            <content>
                <baseType ref="613"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.840">
            <name>T&amp;</name>
            <content>
                <baseType ref="521"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.906">
            <name>T&amp;</name>
            <content>
                <baseType ref="630"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.908">
            <name>T&amp;</name>
            <content>
                <baseType ref="632"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.917">
            <name>T&amp;</name>
            <content>
                <baseType ref="649"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.971">
            <name>T&amp;</name>
            <content>
                <baseType ref="735"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.842">
            <name>T&amp;</name>
            <content>
                <baseType ref="523"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.973">
            <name>T&amp;</name>
            <content>
                <baseType ref="737"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.987">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="757"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.951">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="694"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.947">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="685"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.959">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="704"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.923">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="662"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.956">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="697"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.886">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="613"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1244">
            <name>TemplateId&amp;&amp;</name>
            <content>
                <baseType ref="6636"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1272">
            <name>ThrowStatement&amp;&amp;</name>
            <content>
                <baseType ref="6714"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="7596">
            <name>TitleLetterParser</name>
        </type>
        <type derived="true" id="type.7598">
            <name>TitleLetterParser&amp;</name>
            <content>
                <baseType ref="7596"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7597">
            <name>TitleLetterParser*</name>
            <content>
                <baseType ref="7596"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7426">
            <name>TokenParser</name>
        </type>
        <type derived="true" id="type.7428">
            <name>TokenParser&amp;</name>
            <content>
                <baseType ref="7426"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1308">
            <name>TokenParser&amp;&amp;</name>
            <content>
                <baseType ref="7426"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7427">
            <name>TokenParser*</name>
            <content>
                <baseType ref="7426"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1275">
            <name>TryStatement&amp;&amp;</name>
            <content>
                <baseType ref="6720"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1196">
            <name>Type&amp;&amp;</name>
            <content>
                <baseType ref="6437"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1236">
            <name>TypeName&amp;&amp;</name>
            <content>
                <baseType ref="6612"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.952">
            <name>U&amp;&amp;</name>
            <content>
                <baseType ref="695"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.957">
            <name>U&amp;&amp;</name>
            <content>
                <baseType ref="698"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.948">
            <name>U&amp;&amp;</name>
            <content>
                <baseType ref="686"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8657" specialization="true">
            <name>UnaryFun&lt;Grammar*, Grammar*></name>
            <content>
                <primaryType ref="1380"/>
                <argumentType ref="type.7469"/>
                <argumentType ref="type.7469"/>
            </content>
        </type>
        <type derived="true" id="type.8659">
            <name>UnaryFun&lt;Grammar*, Grammar*>&amp;</name>
            <content>
                <baseType ref="type.8657"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9390">
            <name>UnaryFun&lt;Grammar*, Grammar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8657"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8658">
            <name>UnaryFun&lt;Grammar*, Grammar*>*</name>
            <content>
                <baseType ref="type.8657"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8628" specialization="true">
            <name>UnaryFun&lt;Grammar*, ulong></name>
            <content>
                <primaryType ref="1380"/>
                <argumentType ref="type.7469"/>
                <argumentType ref="type.9"/>
            </content>
        </type>
        <type derived="true" id="type.8630">
            <name>UnaryFun&lt;Grammar*, ulong>&amp;</name>
            <content>
                <baseType ref="type.8628"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9396">
            <name>UnaryFun&lt;Grammar*, ulong>&amp;&amp;</name>
            <content>
                <baseType ref="type.8628"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8629">
            <name>UnaryFun&lt;Grammar*, ulong>*</name>
            <content>
                <baseType ref="type.8628"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8906" specialization="true">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, Grammar*>, String&lt;uchar>></name>
            <content>
                <primaryType ref="1380"/>
                <argumentType ref="type.8898"/>
                <argumentType ref="type.1128"/>
            </content>
        </type>
        <type derived="true" id="type.8908">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, Grammar*>, String&lt;uchar>>&amp;</name>
            <content>
                <baseType ref="type.8906"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9518">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, Grammar*>, String&lt;uchar>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8906"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8907">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, Grammar*>, String&lt;uchar>>*</name>
            <content>
                <baseType ref="type.8906"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8984" specialization="true">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, Namespace*>, String&lt;uchar>></name>
            <content>
                <primaryType ref="1380"/>
                <argumentType ref="type.8975"/>
                <argumentType ref="type.1128"/>
            </content>
        </type>
        <type derived="true" id="type.8986">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, Namespace*>, String&lt;uchar>>&amp;</name>
            <content>
                <baseType ref="type.8984"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9527">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, Namespace*>, String&lt;uchar>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8984"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8985">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, Namespace*>, String&lt;uchar>>*</name>
            <content>
                <baseType ref="type.8984"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9232" specialization="true">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, ParsingObject*>, String&lt;uchar>></name>
            <content>
                <primaryType ref="1380"/>
                <argumentType ref="type.9223"/>
                <argumentType ref="type.1128"/>
            </content>
        </type>
        <type derived="true" id="type.9234">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, ParsingObject*>, String&lt;uchar>>&amp;</name>
            <content>
                <baseType ref="type.9232"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9630">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, ParsingObject*>, String&lt;uchar>>&amp;&amp;</name>
            <content>
                <baseType ref="type.9232"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9233">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, ParsingObject*>, String&lt;uchar>>*</name>
            <content>
                <baseType ref="type.9232"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8468" specialization="true">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>, String&lt;uchar>></name>
            <content>
                <primaryType ref="1380"/>
                <argumentType ref="type.8461"/>
                <argumentType ref="type.1128"/>
            </content>
        </type>
        <type derived="true" id="type.8470">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>, String&lt;uchar>>&amp;</name>
            <content>
                <baseType ref="type.8468"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9312">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>, String&lt;uchar>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8468"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8469">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>, String&lt;uchar>>*</name>
            <content>
                <baseType ref="type.8468"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8745" specialization="true">
            <name>UnaryFun&lt;String&lt;uchar>, String&lt;uchar>></name>
            <content>
                <primaryType ref="1380"/>
                <argumentType ref="type.1128"/>
                <argumentType ref="type.1128"/>
            </content>
        </type>
        <type derived="true" id="type.8747">
            <name>UnaryFun&lt;String&lt;uchar>, String&lt;uchar>>&amp;</name>
            <content>
                <baseType ref="type.8745"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9455">
            <name>UnaryFun&lt;String&lt;uchar>, String&lt;uchar>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8745"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8746">
            <name>UnaryFun&lt;String&lt;uchar>, String&lt;uchar>>*</name>
            <content>
                <baseType ref="type.8745"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8437" specialization="true">
            <name>UnaryFun&lt;String&lt;uchar>, ulong></name>
            <content>
                <primaryType ref="1380"/>
                <argumentType ref="type.1128"/>
                <argumentType ref="type.9"/>
            </content>
        </type>
        <type derived="true" id="type.8439">
            <name>UnaryFun&lt;String&lt;uchar>, ulong>&amp;</name>
            <content>
                <baseType ref="type.8437"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9318">
            <name>UnaryFun&lt;String&lt;uchar>, ulong>&amp;&amp;</name>
            <content>
                <baseType ref="type.8437"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8438">
            <name>UnaryFun&lt;String&lt;uchar>, ulong>*</name>
            <content>
                <baseType ref="type.8437"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1218">
            <name>UnaryMinus&amp;&amp;</name>
            <content>
                <baseType ref="6519"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="7408">
            <name>UnaryParser</name>
        </type>
        <type derived="true" id="type.7410">
            <name>UnaryParser&amp;</name>
            <content>
                <baseType ref="7408"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7409">
            <name>UnaryParser*</name>
            <content>
                <baseType ref="7408"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1215">
            <name>UnaryPlus&amp;&amp;</name>
            <content>
                <baseType ref="6516"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="7704">
            <name>UnassignedParser</name>
        </type>
        <type derived="true" id="type.7706">
            <name>UnassignedParser&amp;</name>
            <content>
                <baseType ref="7704"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7705">
            <name>UnassignedParser*</name>
            <content>
                <baseType ref="7704"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.935">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.2509"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.984">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>>&amp;&amp;</name>
            <content>
                <baseType ref="type.2829"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.980">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;ValueType>>&amp;&amp;</name>
            <content>
                <baseType ref="type.2771"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1086">
            <name>UniquePtr&lt;System.Exception>&amp;&amp;</name>
            <content>
                <baseType ref="type.5509"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.7062" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject></name>
            <content>
                <primaryType ref="5443"/>
                <argumentType ref="6485"/>
            </content>
        </type>
        <type id="type.8827" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.Context></name>
            <content>
                <primaryType ref="5443"/>
                <argumentType ref="7529"/>
            </content>
        </type>
        <type derived="true" id="type.8829">
            <name>UniquePtr&lt;System.Text.Parsing.Context>&amp;</name>
            <content>
                <baseType ref="type.8827"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8833">
            <name>UniquePtr&lt;System.Text.Parsing.Context>&amp;&amp;</name>
            <content>
                <baseType ref="type.8827"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8828">
            <name>UniquePtr&lt;System.Text.Parsing.Context>*</name>
            <content>
                <baseType ref="type.8827"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9504">
            <name>UniquePtr&lt;System.Text.Parsing.Context>*&amp;</name>
            <content>
                <baseType ref="type.8827"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9505">
            <name>UniquePtr&lt;System.Text.Parsing.Context>*&amp;&amp;</name>
            <content>
                <baseType ref="type.8827"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9503">
            <name>UniquePtr&lt;System.Text.Parsing.Context>**</name>
            <content>
                <baseType ref="type.8827"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9357" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.ExpectationFailure></name>
            <content>
                <primaryType ref="5443"/>
                <argumentType ref="7456"/>
            </content>
        </type>
        <type derived="true" id="type.9359">
            <name>UniquePtr&lt;System.Text.Parsing.ExpectationFailure>&amp;</name>
            <content>
                <baseType ref="type.9357"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1150">
            <name>UniquePtr&lt;System.Text.Parsing.ExpectationFailure>&amp;&amp;</name>
            <content>
                <baseType ref="type.9357"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9358">
            <name>UniquePtr&lt;System.Text.Parsing.ExpectationFailure>*</name>
            <content>
                <baseType ref="type.9357"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8549" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.FileInfo></name>
            <content>
                <primaryType ref="5443"/>
                <argumentType ref="7453"/>
            </content>
        </type>
        <type derived="true" id="type.8551">
            <name>UniquePtr&lt;System.Text.Parsing.FileInfo>&amp;</name>
            <content>
                <baseType ref="type.8549"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8555">
            <name>UniquePtr&lt;System.Text.Parsing.FileInfo>&amp;&amp;</name>
            <content>
                <baseType ref="type.8549"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8550">
            <name>UniquePtr&lt;System.Text.Parsing.FileInfo>*</name>
            <content>
                <baseType ref="type.8549"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8720" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.IdentifierCharsRule></name>
            <content>
                <primaryType ref="5443"/>
                <argumentType ref="7474"/>
            </content>
        </type>
        <type derived="true" id="type.8722">
            <name>UniquePtr&lt;System.Text.Parsing.IdentifierCharsRule>&amp;</name>
            <content>
                <baseType ref="type.8720"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8726">
            <name>UniquePtr&lt;System.Text.Parsing.IdentifierCharsRule>&amp;&amp;</name>
            <content>
                <baseType ref="type.8720"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8721">
            <name>UniquePtr&lt;System.Text.Parsing.IdentifierCharsRule>*</name>
            <content>
                <baseType ref="type.8720"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8397" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.Object></name>
            <content>
                <primaryType ref="5443"/>
                <argumentType ref="7518"/>
            </content>
        </type>
        <type derived="true" id="type.8399">
            <name>UniquePtr&lt;System.Text.Parsing.Object>&amp;</name>
            <content>
                <baseType ref="type.8397"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8403">
            <name>UniquePtr&lt;System.Text.Parsing.Object>&amp;&amp;</name>
            <content>
                <baseType ref="type.8397"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8398">
            <name>UniquePtr&lt;System.Text.Parsing.Object>*</name>
            <content>
                <baseType ref="type.8397"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9432">
            <name>UniquePtr&lt;System.Text.Parsing.Object>*&amp;</name>
            <content>
                <baseType ref="type.8397"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9433">
            <name>UniquePtr&lt;System.Text.Parsing.Object>*&amp;&amp;</name>
            <content>
                <baseType ref="type.8397"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9431">
            <name>UniquePtr&lt;System.Text.Parsing.Object>**</name>
            <content>
                <baseType ref="type.8397"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8559" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingData></name>
            <content>
                <primaryType ref="5443"/>
                <argumentType ref="7536"/>
            </content>
        </type>
        <type derived="true" id="type.8561">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingData>&amp;</name>
            <content>
                <baseType ref="type.8559"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1108">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingData>&amp;&amp;</name>
            <content>
                <baseType ref="type.8559"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8560">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingData>*</name>
            <content>
                <baseType ref="type.8559"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9090" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingDomain></name>
            <content>
                <primaryType ref="5443"/>
                <argumentType ref="7542"/>
            </content>
        </type>
        <type derived="true" id="type.9092">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;</name>
            <content>
                <baseType ref="type.9090"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9096">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;&amp;</name>
            <content>
                <baseType ref="type.9090"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9091">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingDomain>*</name>
            <content>
                <baseType ref="type.9090"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9577">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingDomain>*&amp;</name>
            <content>
                <baseType ref="type.9090"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9576">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingDomain>**</name>
            <content>
                <baseType ref="type.9090"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9080" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingDomainRepository></name>
            <content>
                <primaryType ref="5443"/>
                <argumentType ref="7548"/>
            </content>
        </type>
        <type derived="true" id="type.9082">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingDomainRepository>&amp;</name>
            <content>
                <baseType ref="type.9080"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9086">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingDomainRepository>&amp;&amp;</name>
            <content>
                <baseType ref="type.9080"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9081">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingDomainRepository>*</name>
            <content>
                <baseType ref="type.9080"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9481" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingException></name>
            <content>
                <primaryType ref="5443"/>
                <argumentType ref="7462"/>
            </content>
        </type>
        <type derived="true" id="type.9483">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingException>&amp;</name>
            <content>
                <baseType ref="type.9481"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1151">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingException>&amp;&amp;</name>
            <content>
                <baseType ref="type.9481"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9482">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingException>*</name>
            <content>
                <baseType ref="type.9481"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8369" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingObject></name>
            <content>
                <primaryType ref="5443"/>
                <argumentType ref="7551"/>
            </content>
        </type>
        <type derived="true" id="type.8371">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;</name>
            <content>
                <baseType ref="type.8369"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8375">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;&amp;</name>
            <content>
                <baseType ref="type.8369"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8370">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingObject>*</name>
            <content>
                <baseType ref="type.8369"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9581">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingObject>*&amp;</name>
            <content>
                <baseType ref="type.8369"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9580">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingObject>**</name>
            <content>
                <baseType ref="type.8369"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8727" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.RuleParser></name>
            <content>
                <primaryType ref="5443"/>
                <argumentType ref="7737"/>
            </content>
        </type>
        <type derived="true" id="type.8729">
            <name>UniquePtr&lt;System.Text.Parsing.RuleParser>&amp;</name>
            <content>
                <baseType ref="type.8727"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8733">
            <name>UniquePtr&lt;System.Text.Parsing.RuleParser>&amp;&amp;</name>
            <content>
                <baseType ref="type.8727"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8728">
            <name>UniquePtr&lt;System.Text.Parsing.RuleParser>*</name>
            <content>
                <baseType ref="type.8727"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8566" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.XmlLog></name>
            <content>
                <primaryType ref="5443"/>
                <argumentType ref="7923"/>
            </content>
        </type>
        <type derived="true" id="type.8568">
            <name>UniquePtr&lt;System.Text.Parsing.XmlLog>&amp;</name>
            <content>
                <baseType ref="type.8566"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1109">
            <name>UniquePtr&lt;System.Text.Parsing.XmlLog>&amp;&amp;</name>
            <content>
                <baseType ref="type.8566"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8567">
            <name>UniquePtr&lt;System.Text.Parsing.XmlLog>*</name>
            <content>
                <baseType ref="type.8566"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1085">
            <name>UniquePtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.5443"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="7590">
            <name>UpperLetterParser</name>
        </type>
        <type derived="true" id="type.7592">
            <name>UpperLetterParser&amp;</name>
            <content>
                <baseType ref="7590"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7591">
            <name>UpperLetterParser*</name>
            <content>
                <baseType ref="7590"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.936">
            <name>Value&amp;</name>
            <content>
                <baseType ref="670"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.931">
            <name>Value&amp;&amp;</name>
            <content>
                <baseType ref="670"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9849" specialization="true">
            <name>ValueObject&lt;String&lt;uchar>></name>
            <content>
                <primaryType ref="8819"/>
                <argumentType ref="type.1128"/>
            </content>
        </type>
        <type derived="true" id="type.9851">
            <name>ValueObject&lt;String&lt;uchar>>&amp;</name>
            <content>
                <baseType ref="type.9849"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1168">
            <name>ValueObject&lt;String&lt;uchar>>&amp;&amp;</name>
            <content>
                <baseType ref="type.9849"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9850">
            <name>ValueObject&lt;String&lt;uchar>>*</name>
            <content>
                <baseType ref="type.9849"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8819" specialization="true">
            <name>ValueObject&lt;ValueType></name>
            <content>
                <primaryType ref="8819"/>
                <argumentType ref="7522"/>
            </content>
        </type>
        <type id="7521">
            <name>ValueObject&lt;ValueType></name>
        </type>
        <type id="type.8819" specialization="true">
            <name>ValueObject&lt;ValueType></name>
            <content>
                <primaryType ref="8819"/>
                <argumentType ref="7522"/>
            </content>
        </type>
        <type derived="true" id="type.8821">
            <name>ValueObject&lt;ValueType>&amp;</name>
            <content>
                <baseType ref="type.8819"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1132">
            <name>ValueObject&lt;ValueType>&amp;&amp;</name>
            <content>
                <baseType ref="type.8819"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8820">
            <name>ValueObject&lt;ValueType>*</name>
            <content>
                <baseType ref="type.8819"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9837" specialization="true">
            <name>ValueObject&lt;bool></name>
            <content>
                <primaryType ref="8819"/>
                <argumentType ref="type.1"/>
            </content>
        </type>
        <type derived="true" id="type.9839">
            <name>ValueObject&lt;bool>&amp;</name>
            <content>
                <baseType ref="type.9837"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1167">
            <name>ValueObject&lt;bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.9837"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9838">
            <name>ValueObject&lt;bool>*</name>
            <content>
                <baseType ref="type.9837"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9673" specialization="true">
            <name>ValueObject&lt;byte></name>
            <content>
                <primaryType ref="8819"/>
                <argumentType ref="type.3"/>
            </content>
        </type>
        <type derived="true" id="type.9675">
            <name>ValueObject&lt;byte>&amp;</name>
            <content>
                <baseType ref="type.9673"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1154">
            <name>ValueObject&lt;byte>&amp;&amp;</name>
            <content>
                <baseType ref="type.9673"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9674">
            <name>ValueObject&lt;byte>*</name>
            <content>
                <baseType ref="type.9673"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9813" specialization="true">
            <name>ValueObject&lt;double></name>
            <content>
                <primaryType ref="8819"/>
                <argumentType ref="type.11"/>
            </content>
        </type>
        <type derived="true" id="type.9815">
            <name>ValueObject&lt;double>&amp;</name>
            <content>
                <baseType ref="type.9813"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1166">
            <name>ValueObject&lt;double>&amp;&amp;</name>
            <content>
                <baseType ref="type.9813"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9814">
            <name>ValueObject&lt;double>*</name>
            <content>
                <baseType ref="type.9813"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9799" specialization="true">
            <name>ValueObject&lt;float></name>
            <content>
                <primaryType ref="8819"/>
                <argumentType ref="type.10"/>
            </content>
        </type>
        <type derived="true" id="type.9801">
            <name>ValueObject&lt;float>&amp;</name>
            <content>
                <baseType ref="type.9799"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1164">
            <name>ValueObject&lt;float>&amp;&amp;</name>
            <content>
                <baseType ref="type.9799"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9800">
            <name>ValueObject&lt;float>*</name>
            <content>
                <baseType ref="type.9799"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9714" specialization="true">
            <name>ValueObject&lt;int></name>
            <content>
                <primaryType ref="8819"/>
                <argumentType ref="type.6"/>
            </content>
        </type>
        <type derived="true" id="type.9716">
            <name>ValueObject&lt;int>&amp;</name>
            <content>
                <baseType ref="type.9714"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1159">
            <name>ValueObject&lt;int>&amp;&amp;</name>
            <content>
                <baseType ref="type.9714"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9715">
            <name>ValueObject&lt;int>*</name>
            <content>
                <baseType ref="type.9714"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9739" specialization="true">
            <name>ValueObject&lt;long></name>
            <content>
                <primaryType ref="8819"/>
                <argumentType ref="type.8"/>
            </content>
        </type>
        <type derived="true" id="type.9741">
            <name>ValueObject&lt;long>&amp;</name>
            <content>
                <baseType ref="type.9739"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1161">
            <name>ValueObject&lt;long>&amp;&amp;</name>
            <content>
                <baseType ref="type.9739"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9740">
            <name>ValueObject&lt;long>*</name>
            <content>
                <baseType ref="type.9739"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9659" specialization="true">
            <name>ValueObject&lt;sbyte></name>
            <content>
                <primaryType ref="8819"/>
                <argumentType ref="type.2"/>
            </content>
        </type>
        <type derived="true" id="type.9661">
            <name>ValueObject&lt;sbyte>&amp;</name>
            <content>
                <baseType ref="type.9659"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1153">
            <name>ValueObject&lt;sbyte>&amp;&amp;</name>
            <content>
                <baseType ref="type.9659"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9660">
            <name>ValueObject&lt;sbyte>*</name>
            <content>
                <baseType ref="type.9659"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9686" specialization="true">
            <name>ValueObject&lt;short></name>
            <content>
                <primaryType ref="8819"/>
                <argumentType ref="type.4"/>
            </content>
        </type>
        <type derived="true" id="type.9688">
            <name>ValueObject&lt;short>&amp;</name>
            <content>
                <baseType ref="type.9686"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1156">
            <name>ValueObject&lt;short>&amp;&amp;</name>
            <content>
                <baseType ref="type.9686"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9687">
            <name>ValueObject&lt;short>*</name>
            <content>
                <baseType ref="type.9686"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9866" specialization="true">
            <name>ValueObject&lt;uchar></name>
            <content>
                <primaryType ref="8819"/>
                <argumentType ref="type.14"/>
            </content>
        </type>
        <type derived="true" id="type.9868">
            <name>ValueObject&lt;uchar>&amp;</name>
            <content>
                <baseType ref="type.9866"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1169">
            <name>ValueObject&lt;uchar>&amp;&amp;</name>
            <content>
                <baseType ref="type.9866"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9867">
            <name>ValueObject&lt;uchar>*</name>
            <content>
                <baseType ref="type.9866"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9726" specialization="true">
            <name>ValueObject&lt;uint></name>
            <content>
                <primaryType ref="8819"/>
                <argumentType ref="type.7"/>
            </content>
        </type>
        <type derived="true" id="type.9728">
            <name>ValueObject&lt;uint>&amp;</name>
            <content>
                <baseType ref="type.9726"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1160">
            <name>ValueObject&lt;uint>&amp;&amp;</name>
            <content>
                <baseType ref="type.9726"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9727">
            <name>ValueObject&lt;uint>*</name>
            <content>
                <baseType ref="type.9726"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9752" specialization="true">
            <name>ValueObject&lt;ulong></name>
            <content>
                <primaryType ref="8819"/>
                <argumentType ref="type.9"/>
            </content>
        </type>
        <type derived="true" id="type.9754">
            <name>ValueObject&lt;ulong>&amp;</name>
            <content>
                <baseType ref="type.9752"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1162">
            <name>ValueObject&lt;ulong>&amp;&amp;</name>
            <content>
                <baseType ref="type.9752"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9753">
            <name>ValueObject&lt;ulong>*</name>
            <content>
                <baseType ref="type.9752"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9700" specialization="true">
            <name>ValueObject&lt;ushort></name>
            <content>
                <primaryType ref="8819"/>
                <argumentType ref="type.5"/>
            </content>
        </type>
        <type derived="true" id="type.9702">
            <name>ValueObject&lt;ushort>&amp;</name>
            <content>
                <baseType ref="type.9700"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1158">
            <name>ValueObject&lt;ushort>&amp;&amp;</name>
            <content>
                <baseType ref="type.9700"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9701">
            <name>ValueObject&lt;ushort>*</name>
            <content>
                <baseType ref="type.9700"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7522">
            <name>ValueType</name>
        </type>
        <type id="7920">
            <name>Visitor</name>
        </type>
        <type derived="true" id="type.6743">
            <name>Visitor&amp;</name>
            <content>
                <baseType ref="6741"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7922">
            <name>Visitor&amp;</name>
            <content>
                <baseType ref="7920"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6743">
            <name>Visitor&amp;</name>
            <content>
                <baseType ref="6741"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7921">
            <name>Visitor*</name>
            <content>
                <baseType ref="7920"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7923">
            <name>XmlLog</name>
        </type>
        <type derived="true" id="type.7925">
            <name>XmlLog&amp;</name>
            <content>
                <baseType ref="7923"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7924">
            <name>XmlLog*</name>
            <content>
                <baseType ref="7923"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9425">
            <name>XmlLog*&amp;</name>
            <content>
                <baseType ref="7923"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9424">
            <name>XmlLog**</name>
            <content>
                <baseType ref="7923"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.1">
            <name>bool</name>
        </type>
        <type derived="true" id="type.18">
            <name>bool&amp;</name>
            <content>
                <baseType ref="type.1"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type id="7884">
            <name>boolRule</name>
        </type>
        <type derived="true" id="type.7886">
            <name>boolRule&amp;</name>
            <content>
                <baseType ref="7884"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7885">
            <name>boolRule*</name>
            <content>
                <baseType ref="7884"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9845">
            <name>boolRule*&amp;</name>
            <content>
                <baseType ref="7884"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9844">
            <name>boolRule**</name>
            <content>
                <baseType ref="7884"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.3">
            <name>byte</name>
        </type>
        <type derived="true" id="type.24">
            <name>byte&amp;</name>
            <content>
                <baseType ref="type.3"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.23">
            <name>byte*</name>
            <content>
                <baseType ref="type.3"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7776">
            <name>byteRule</name>
        </type>
        <type derived="true" id="type.7778">
            <name>byteRule&amp;</name>
            <content>
                <baseType ref="7776"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7777">
            <name>byteRule*</name>
            <content>
                <baseType ref="7776"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9681">
            <name>byteRule*&amp;</name>
            <content>
                <baseType ref="7776"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9680">
            <name>byteRule**</name>
            <content>
                <baseType ref="7776"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.12">
            <name>char</name>
        </type>
        <type derived="true" id="type.51">
            <name>char&amp;</name>
            <content>
                <baseType ref="type.12"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.50">
            <name>char*</name>
            <content>
                <baseType ref="type.12"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7908">
            <name>charRule</name>
        </type>
        <type derived="true" id="type.7910">
            <name>charRule&amp;</name>
            <content>
                <baseType ref="7908"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7909">
            <name>charRule*</name>
            <content>
                <baseType ref="7908"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9879">
            <name>charRule*&amp;</name>
            <content>
                <baseType ref="7908"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9878">
            <name>charRule**</name>
            <content>
                <baseType ref="7908"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7402">
            <name>const ActionParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7399"/>
            </content>
        </type>
        <type derived="true" id="type.7404">
            <name>const ActionParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7399"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7403">
            <name>const ActionParser*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7399"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9171">
            <name>const ActionParser*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7399"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9172">
            <name>const ActionParser**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7399"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1204">
            <name>const AddressOf</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="6507"/>
            </content>
        </type>
        <type derived="true" id="type.1205">
            <name>const AddressOf&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="6507"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1276">
            <name>const AssertStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="6723"/>
            </content>
        </type>
        <type derived="true" id="type.1277">
            <name>const AssertStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="6723"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7734">
            <name>const AttrOrVar</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7731"/>
            </content>
        </type>
        <type derived="true" id="type.7736">
            <name>const AttrOrVar&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7731"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7735">
            <name>const AttrOrVar*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7731"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9408">
            <name>const BinaryFun&lt;Grammar*, Grammar*, bool>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8638"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9330">
            <name>const BinaryFun&lt;String&lt;uchar>, String&lt;uchar>, bool>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8446"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7432">
            <name>const BinaryParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7429"/>
            </content>
        </type>
        <type derived="true" id="type.7434">
            <name>const BinaryParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7429"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7433">
            <name>const BinaryParser*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7429"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9405">
            <name>const BinaryPred&lt;Grammar*, Grammar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8637"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9327">
            <name>const BinaryPred&lt;String&lt;uchar>, String&lt;uchar>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8445"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1173">
            <name>const BinaryReader</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="323"/>
            </content>
        </type>
        <type derived="true" id="type.1174">
            <name>const BinaryReader&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="323"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1175">
            <name>const BinaryWriter</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="326"/>
            </content>
        </type>
        <type derived="true" id="type.1176">
            <name>const BinaryWriter&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="326"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8679">
            <name>const Bucket&lt;Grammar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8676"/>
            </content>
        </type>
        <type derived="true" id="type.8681">
            <name>const Bucket&lt;Grammar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8676"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8680">
            <name>const Bucket&lt;Grammar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8676"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700">
            <name>const Bucket&lt;Grammar*>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8676"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8701">
            <name>const Bucket&lt;Grammar*>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8676"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8927">
            <name>const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8924"/>
            </content>
        </type>
        <type derived="true" id="type.8929">
            <name>const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8924"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8928">
            <name>const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8924"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8949">
            <name>const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8924"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8950">
            <name>const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8924"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9005">
            <name>const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9002"/>
            </content>
        </type>
        <type derived="true" id="type.9007">
            <name>const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9002"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9006">
            <name>const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9002"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9027">
            <name>const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9002"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9028">
            <name>const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9002"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9253">
            <name>const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9250"/>
            </content>
        </type>
        <type derived="true" id="type.9255">
            <name>const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9250"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9254">
            <name>const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9250"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9275">
            <name>const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9250"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9276">
            <name>const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9250"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8489">
            <name>const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8486"/>
            </content>
        </type>
        <type derived="true" id="type.8491">
            <name>const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8486"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8490">
            <name>const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8486"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8511">
            <name>const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8486"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8512">
            <name>const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8486"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8765">
            <name>const Bucket&lt;String&lt;uchar>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8762"/>
            </content>
        </type>
        <type derived="true" id="type.8767">
            <name>const Bucket&lt;String&lt;uchar>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8762"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8766">
            <name>const Bucket&lt;String&lt;uchar>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8762"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8785">
            <name>const Bucket&lt;String&lt;uchar>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8762"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8786">
            <name>const Bucket&lt;String&lt;uchar>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8762"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1177">
            <name>const BufferedByteStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="335"/>
            </content>
        </type>
        <type derived="true" id="type.7560">
            <name>const CharParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7557"/>
            </content>
        </type>
        <type derived="true" id="type.7562">
            <name>const CharParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7557"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7561">
            <name>const CharParser*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7557"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7572">
            <name>const CharRange</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7569"/>
            </content>
        </type>
        <type derived="true" id="type.7574">
            <name>const CharRange&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7569"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7573">
            <name>const CharRange*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7569"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7578">
            <name>const CharSetParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7575"/>
            </content>
        </type>
        <type derived="true" id="type.7580">
            <name>const CharSetParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7575"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7579">
            <name>const CharSetParser*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7575"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1291">
            <name>const CodeExpandingVisitor</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7405"/>
            </content>
        </type>
        <type derived="true" id="type.1292">
            <name>const CodeExpandingVisitor&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7405"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1219">
            <name>const Complement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="6522"/>
            </content>
        </type>
        <type derived="true" id="type.1220">
            <name>const Complement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="6522"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1279">
            <name>const Const</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="6726"/>
            </content>
        </type>
        <type derived="true" id="type.1280">
            <name>const Const&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="6726"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1237">
            <name>const Construct</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="6618"/>
            </content>
        </type>
        <type derived="true" id="type.1238">
            <name>const Construct&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="6618"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8835">
            <name>const Context</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7529"/>
            </content>
        </type>
        <type derived="true" id="type.8836">
            <name>const Context&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7529"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8834">
            <name>const Context*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7529"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9508">
            <name>const ContextStack&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7532"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1186">
            <name>const ConversionException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="474"/>
            </content>
        </type>
        <type derived="true" id="type.1187">
            <name>const ConversionException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="474"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1255">
            <name>const DeleteStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="6681"/>
            </content>
        </type>
        <type derived="true" id="type.1256">
            <name>const DeleteStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="6681"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1201">
            <name>const Deref</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="6504"/>
            </content>
        </type>
        <type derived="true" id="type.1202">
            <name>const Deref&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="6504"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1258">
            <name>const DestroyStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="6684"/>
            </content>
        </type>
        <type derived="true" id="type.1259">
            <name>const DestroyStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="6684"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8633">
            <name>const EqualTo&lt;Grammar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8632"/>
            </content>
        </type>
        <type derived="true" id="type.8635">
            <name>const EqualTo&lt;Grammar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8632"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8634">
            <name>const EqualTo&lt;Grammar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8632"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8441">
            <name>const EqualTo&lt;String&lt;uchar>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8440"/>
            </content>
        </type>
        <type derived="true" id="type.8443">
            <name>const EqualTo&lt;String&lt;uchar>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8440"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8442">
            <name>const EqualTo&lt;String&lt;uchar>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8440"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7459">
            <name>const ExpectationFailure</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7456"/>
            </content>
        </type>
        <type derived="true" id="type.7461">
            <name>const ExpectationFailure&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7456"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7460">
            <name>const ExpectationFailure*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7456"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1303">
            <name>const ExpectationParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7423"/>
            </content>
        </type>
        <type derived="true" id="type.1304">
            <name>const ExpectationParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7423"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1261">
            <name>const ExpressionStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="6690"/>
            </content>
        </type>
        <type derived="true" id="type.1262">
            <name>const ExpressionStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="6690"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8366">
            <name>const FailureAction&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7398"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8557">
            <name>const FileInfo</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7453"/>
            </content>
        </type>
        <type derived="true" id="type.8558">
            <name>const FileInfo&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7453"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8556">
            <name>const FileInfo*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7453"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1178">
            <name>const FileSystemException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="499"/>
            </content>
        </type>
        <type derived="true" id="type.1179">
            <name>const FileSystemException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="499"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1267">
            <name>const GotoCaseStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="6708"/>
            </content>
        </type>
        <type derived="true" id="type.1268">
            <name>const GotoCaseStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="6708"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1252">
            <name>const GotoStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="6675"/>
            </content>
        </type>
        <type derived="true" id="type.1253">
            <name>const GotoStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="6675"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7471">
            <name>const Grammar</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7468"/>
            </content>
        </type>
        <type derived="true" id="type.7473">
            <name>const Grammar&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7468"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7472">
            <name>const Grammar*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7468"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8631">
            <name>const Grammar*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7468"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8682">
            <name>const Grammar**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7468"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8895">
            <name>const HashMap&lt;String&lt;uchar>, Grammar*, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8892"/>
            </content>
        </type>
        <type derived="true" id="type.8897">
            <name>const HashMap&lt;String&lt;uchar>, Grammar*, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8892"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8896">
            <name>const HashMap&lt;String&lt;uchar>, Grammar*, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8892"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8972">
            <name>const HashMap&lt;String&lt;uchar>, Namespace*, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8969"/>
            </content>
        </type>
        <type derived="true" id="type.8974">
            <name>const HashMap&lt;String&lt;uchar>, Namespace*, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8969"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8973">
            <name>const HashMap&lt;String&lt;uchar>, Namespace*, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8969"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9220">
            <name>const HashMap&lt;String&lt;uchar>, ParsingObject*, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9217"/>
            </content>
        </type>
        <type derived="true" id="type.9222">
            <name>const HashMap&lt;String&lt;uchar>, ParsingObject*, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9217"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9221">
            <name>const HashMap&lt;String&lt;uchar>, ParsingObject*, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9217"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8458">
            <name>const HashMap&lt;String&lt;uchar>, String&lt;uchar>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8455"/>
            </content>
        </type>
        <type derived="true" id="type.8460">
            <name>const HashMap&lt;String&lt;uchar>, String&lt;uchar>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8455"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8459">
            <name>const HashMap&lt;String&lt;uchar>, String&lt;uchar>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8455"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8650">
            <name>const HashSet&lt;Grammar*, Hasher&lt;Grammar*>, EqualTo&lt;Grammar*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8647"/>
            </content>
        </type>
        <type derived="true" id="type.8652">
            <name>const HashSet&lt;Grammar*, Hasher&lt;Grammar*>, EqualTo&lt;Grammar*>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8647"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8651">
            <name>const HashSet&lt;Grammar*, Hasher&lt;Grammar*>, EqualTo&lt;Grammar*>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8647"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8738">
            <name>const HashSet&lt;String&lt;uchar>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8735"/>
            </content>
        </type>
        <type derived="true" id="type.8740">
            <name>const HashSet&lt;String&lt;uchar>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8735"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8739">
            <name>const HashSet&lt;String&lt;uchar>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8735"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9395">
            <name>const Hasher&lt;Grammar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8625"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9317">
            <name>const Hasher&lt;String&lt;uchar>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8434"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8665">
            <name>const Hashtable&lt;Grammar*, Grammar*, Identity&lt;Grammar*>, Hasher&lt;Grammar*>, EqualTo&lt;Grammar*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8662"/>
            </content>
        </type>
        <type derived="true" id="type.8667">
            <name>const Hashtable&lt;Grammar*, Grammar*, Identity&lt;Grammar*>, Hasher&lt;Grammar*>, EqualTo&lt;Grammar*>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8662"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8666">
            <name>const Hashtable&lt;Grammar*, Grammar*, Identity&lt;Grammar*>, Hasher&lt;Grammar*>, EqualTo&lt;Grammar*>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8662"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8915">
            <name>const Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Grammar*>, SelectFirst&lt;String&lt;uchar>, Grammar*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8912"/>
            </content>
        </type>
        <type derived="true" id="type.8917">
            <name>const Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Grammar*>, SelectFirst&lt;String&lt;uchar>, Grammar*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8912"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8916">
            <name>const Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Grammar*>, SelectFirst&lt;String&lt;uchar>, Grammar*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8912"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8993">
            <name>const Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Namespace*>, SelectFirst&lt;String&lt;uchar>, Namespace*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8990"/>
            </content>
        </type>
        <type derived="true" id="type.8995">
            <name>const Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Namespace*>, SelectFirst&lt;String&lt;uchar>, Namespace*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8990"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8994">
            <name>const Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Namespace*>, SelectFirst&lt;String&lt;uchar>, Namespace*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8990"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9241">
            <name>const Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, ParsingObject*>, SelectFirst&lt;String&lt;uchar>, ParsingObject*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9238"/>
            </content>
        </type>
        <type derived="true" id="type.9243">
            <name>const Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, ParsingObject*>, SelectFirst&lt;String&lt;uchar>, ParsingObject*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9238"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9242">
            <name>const Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, ParsingObject*>, SelectFirst&lt;String&lt;uchar>, ParsingObject*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9238"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8477">
            <name>const Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, String&lt;uchar>>, SelectFirst&lt;String&lt;uchar>, String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8474"/>
            </content>
        </type>
        <type derived="true" id="type.8479">
            <name>const Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, String&lt;uchar>>, SelectFirst&lt;String&lt;uchar>, String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8474"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8478">
            <name>const Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, String&lt;uchar>>, SelectFirst&lt;String&lt;uchar>, String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8474"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8753">
            <name>const Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8750"/>
            </content>
        </type>
        <type derived="true" id="type.8755">
            <name>const Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8750"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8754">
            <name>const Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8750"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8673">
            <name>const HashtableIterator&lt;Grammar*, Grammar*&amp;, Grammar**, Hashtable&lt;Grammar*, Grammar*, Identity&lt;Grammar*>, Hasher&lt;Grammar*>, EqualTo&lt;Grammar*>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8670"/>
            </content>
        </type>
        <type derived="true" id="type.8675">
            <name>const HashtableIterator&lt;Grammar*, Grammar*&amp;, Grammar**, Hashtable&lt;Grammar*, Grammar*, Identity&lt;Grammar*>, Hasher&lt;Grammar*>, EqualTo&lt;Grammar*>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8670"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8674">
            <name>const HashtableIterator&lt;Grammar*, Grammar*&amp;, Grammar**, Hashtable&lt;Grammar*, Grammar*, Identity&lt;Grammar*>, Hasher&lt;Grammar*>, EqualTo&lt;Grammar*>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8670"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8686">
            <name>const HashtableIterator&lt;Grammar*, const Grammar*&amp;, const Grammar**, Hashtable&lt;Grammar*, Grammar*, Identity&lt;Grammar*>, Hasher&lt;Grammar*>, EqualTo&lt;Grammar*>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8683"/>
            </content>
        </type>
        <type derived="true" id="type.8688">
            <name>const HashtableIterator&lt;Grammar*, const Grammar*&amp;, const Grammar**, Hashtable&lt;Grammar*, Grammar*, Identity&lt;Grammar*>, Hasher&lt;Grammar*>, EqualTo&lt;Grammar*>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8683"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8687">
            <name>const HashtableIterator&lt;Grammar*, const Grammar*&amp;, const Grammar**, Hashtable&lt;Grammar*, Grammar*, Identity&lt;Grammar*>, Hasher&lt;Grammar*>, EqualTo&lt;Grammar*>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8683"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8921">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, Grammar*>, Pair&lt;String&lt;uchar>, Grammar*>&amp;, Pair&lt;String&lt;uchar>, Grammar*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Grammar*>, SelectFirst&lt;String&lt;uchar>, Grammar*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8918"/>
            </content>
        </type>
        <type derived="true" id="type.8923">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, Grammar*>, Pair&lt;String&lt;uchar>, Grammar*>&amp;, Pair&lt;String&lt;uchar>, Grammar*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Grammar*>, SelectFirst&lt;String&lt;uchar>, Grammar*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8918"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8922">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, Grammar*>, Pair&lt;String&lt;uchar>, Grammar*>&amp;, Pair&lt;String&lt;uchar>, Grammar*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Grammar*>, SelectFirst&lt;String&lt;uchar>, Grammar*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8918"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8935">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, Grammar*>, const Pair&lt;String&lt;uchar>, Grammar*>&amp;, const Pair&lt;String&lt;uchar>, Grammar*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Grammar*>, SelectFirst&lt;String&lt;uchar>, Grammar*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8932"/>
            </content>
        </type>
        <type derived="true" id="type.8937">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, Grammar*>, const Pair&lt;String&lt;uchar>, Grammar*>&amp;, const Pair&lt;String&lt;uchar>, Grammar*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Grammar*>, SelectFirst&lt;String&lt;uchar>, Grammar*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8932"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8936">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, Grammar*>, const Pair&lt;String&lt;uchar>, Grammar*>&amp;, const Pair&lt;String&lt;uchar>, Grammar*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Grammar*>, SelectFirst&lt;String&lt;uchar>, Grammar*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8932"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8999">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, Namespace*>, Pair&lt;String&lt;uchar>, Namespace*>&amp;, Pair&lt;String&lt;uchar>, Namespace*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Namespace*>, SelectFirst&lt;String&lt;uchar>, Namespace*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8996"/>
            </content>
        </type>
        <type derived="true" id="type.9001">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, Namespace*>, Pair&lt;String&lt;uchar>, Namespace*>&amp;, Pair&lt;String&lt;uchar>, Namespace*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Namespace*>, SelectFirst&lt;String&lt;uchar>, Namespace*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8996"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9000">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, Namespace*>, Pair&lt;String&lt;uchar>, Namespace*>&amp;, Pair&lt;String&lt;uchar>, Namespace*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Namespace*>, SelectFirst&lt;String&lt;uchar>, Namespace*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8996"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9013">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, Namespace*>, const Pair&lt;String&lt;uchar>, Namespace*>&amp;, const Pair&lt;String&lt;uchar>, Namespace*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Namespace*>, SelectFirst&lt;String&lt;uchar>, Namespace*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9010"/>
            </content>
        </type>
        <type derived="true" id="type.9015">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, Namespace*>, const Pair&lt;String&lt;uchar>, Namespace*>&amp;, const Pair&lt;String&lt;uchar>, Namespace*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Namespace*>, SelectFirst&lt;String&lt;uchar>, Namespace*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9010"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9014">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, Namespace*>, const Pair&lt;String&lt;uchar>, Namespace*>&amp;, const Pair&lt;String&lt;uchar>, Namespace*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, Namespace*>, SelectFirst&lt;String&lt;uchar>, Namespace*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9010"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9247">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, ParsingObject*>, Pair&lt;String&lt;uchar>, ParsingObject*>&amp;, Pair&lt;String&lt;uchar>, ParsingObject*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, ParsingObject*>, SelectFirst&lt;String&lt;uchar>, ParsingObject*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9244"/>
            </content>
        </type>
        <type derived="true" id="type.9249">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, ParsingObject*>, Pair&lt;String&lt;uchar>, ParsingObject*>&amp;, Pair&lt;String&lt;uchar>, ParsingObject*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, ParsingObject*>, SelectFirst&lt;String&lt;uchar>, ParsingObject*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9244"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9248">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, ParsingObject*>, Pair&lt;String&lt;uchar>, ParsingObject*>&amp;, Pair&lt;String&lt;uchar>, ParsingObject*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, ParsingObject*>, SelectFirst&lt;String&lt;uchar>, ParsingObject*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9244"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9261">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, ParsingObject*>, const Pair&lt;String&lt;uchar>, ParsingObject*>&amp;, const Pair&lt;String&lt;uchar>, ParsingObject*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, ParsingObject*>, SelectFirst&lt;String&lt;uchar>, ParsingObject*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9258"/>
            </content>
        </type>
        <type derived="true" id="type.9263">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, ParsingObject*>, const Pair&lt;String&lt;uchar>, ParsingObject*>&amp;, const Pair&lt;String&lt;uchar>, ParsingObject*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, ParsingObject*>, SelectFirst&lt;String&lt;uchar>, ParsingObject*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9258"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9262">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, ParsingObject*>, const Pair&lt;String&lt;uchar>, ParsingObject*>&amp;, const Pair&lt;String&lt;uchar>, ParsingObject*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, ParsingObject*>, SelectFirst&lt;String&lt;uchar>, ParsingObject*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9258"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8483">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>, Pair&lt;String&lt;uchar>, String&lt;uchar>>&amp;, Pair&lt;String&lt;uchar>, String&lt;uchar>>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, String&lt;uchar>>, SelectFirst&lt;String&lt;uchar>, String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8480"/>
            </content>
        </type>
        <type derived="true" id="type.8485">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>, Pair&lt;String&lt;uchar>, String&lt;uchar>>&amp;, Pair&lt;String&lt;uchar>, String&lt;uchar>>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, String&lt;uchar>>, SelectFirst&lt;String&lt;uchar>, String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8480"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8484">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>, Pair&lt;String&lt;uchar>, String&lt;uchar>>&amp;, Pair&lt;String&lt;uchar>, String&lt;uchar>>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, String&lt;uchar>>, SelectFirst&lt;String&lt;uchar>, String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8480"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8497">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>, const Pair&lt;String&lt;uchar>, String&lt;uchar>>&amp;, const Pair&lt;String&lt;uchar>, String&lt;uchar>>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, String&lt;uchar>>, SelectFirst&lt;String&lt;uchar>, String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8494"/>
            </content>
        </type>
        <type derived="true" id="type.8499">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>, const Pair&lt;String&lt;uchar>, String&lt;uchar>>&amp;, const Pair&lt;String&lt;uchar>, String&lt;uchar>>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, String&lt;uchar>>, SelectFirst&lt;String&lt;uchar>, String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8494"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8498">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>, const Pair&lt;String&lt;uchar>, String&lt;uchar>>&amp;, const Pair&lt;String&lt;uchar>, String&lt;uchar>>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, String&lt;uchar>>, SelectFirst&lt;String&lt;uchar>, String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8494"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1116">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1113"/>
            </content>
        </type>
        <type derived="true" id="type.8759">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8756"/>
            </content>
        </type>
        <type derived="true" id="type.8761">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8756"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1118">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1113"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8761">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8756"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1117">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1113"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8760">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8756"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1122">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1119"/>
            </content>
        </type>
        <type derived="true" id="type.8771">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8768"/>
            </content>
        </type>
        <type derived="true" id="type.8773">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8768"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1124">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1119"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8773">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8768"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1123">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1119"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8772">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8768"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7475">
            <name>const IdentifierCharsRule</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7474"/>
            </content>
        </type>
        <type derived="true" id="type.7477">
            <name>const IdentifierCharsRule&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7474"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7476">
            <name>const IdentifierCharsRule*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7474"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8654">
            <name>const Identity&lt;Grammar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8653"/>
            </content>
        </type>
        <type derived="true" id="type.8656">
            <name>const Identity&lt;Grammar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8653"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8655">
            <name>const Identity&lt;Grammar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8653"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8742">
            <name>const Identity&lt;String&lt;uchar>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8741"/>
            </content>
        </type>
        <type derived="true" id="type.8744">
            <name>const Identity&lt;String&lt;uchar>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8741"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8743">
            <name>const Identity&lt;String&lt;uchar>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8741"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1180">
            <name>const InvalidPathException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="699"/>
            </content>
        </type>
        <type derived="true" id="type.1181">
            <name>const InvalidPathException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="699"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1222">
            <name>const Invoke</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="6597"/>
            </content>
        </type>
        <type derived="true" id="type.1223">
            <name>const Invoke&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="6597"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.883">
            <name>const K&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="612"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.928">
            <name>const Key&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="669"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.979">
            <name>const KeyType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="744"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.911">
            <name>const KeyType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="641"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7489">
            <name>const KeywordListParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7486"/>
            </content>
        </type>
        <type derived="true" id="type.7491">
            <name>const KeywordListParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7486"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7490">
            <name>const KeywordListParser*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7486"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7483">
            <name>const KeywordParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7480"/>
            </content>
        </type>
        <type derived="true" id="type.7485">
            <name>const KeywordParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7480"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7484">
            <name>const KeywordParser*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7480"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1300">
            <name>const KleeneStarParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7420"/>
            </content>
        </type>
        <type derived="true" id="type.1301">
            <name>const KleeneStarParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7420"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9168">
            <name>const List&lt;ActionParser*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9165"/>
            </content>
        </type>
        <type derived="true" id="type.9170">
            <name>const List&lt;ActionParser*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9165"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9169">
            <name>const List&lt;ActionParser*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9165"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8697">
            <name>const List&lt;Bucket&lt;Grammar*>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8694"/>
            </content>
        </type>
        <type derived="true" id="type.8699">
            <name>const List&lt;Bucket&lt;Grammar*>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8694"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8698">
            <name>const List&lt;Bucket&lt;Grammar*>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8694"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8946">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8943"/>
            </content>
        </type>
        <type derived="true" id="type.8948">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8943"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8947">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8943"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9024">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9021"/>
            </content>
        </type>
        <type derived="true" id="type.9026">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9021"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9025">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9021"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9272">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9269"/>
            </content>
        </type>
        <type derived="true" id="type.9274">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9269"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9273">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9269"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8508">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8505"/>
            </content>
        </type>
        <type derived="true" id="type.8510">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8505"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8509">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8505"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8782">
            <name>const List&lt;Bucket&lt;String&lt;uchar>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8779"/>
            </content>
        </type>
        <type derived="true" id="type.8784">
            <name>const List&lt;Bucket&lt;String&lt;uchar>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8779"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8783">
            <name>const List&lt;Bucket&lt;String&lt;uchar>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8779"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9057">
            <name>const List&lt;Namespace*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9054"/>
            </content>
        </type>
        <type derived="true" id="type.9059">
            <name>const List&lt;Namespace*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9054"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9058">
            <name>const List&lt;Namespace*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9054"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9194">
            <name>const List&lt;NonterminalParser*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9191"/>
            </content>
        </type>
        <type derived="true" id="type.9196">
            <name>const List&lt;NonterminalParser*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9191"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9195">
            <name>const List&lt;NonterminalParser*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9191"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8602">
            <name>const List&lt;RuleLink*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8599"/>
            </content>
        </type>
        <type derived="true" id="type.8604">
            <name>const List&lt;RuleLink*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8599"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8603">
            <name>const List&lt;RuleLink*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8599"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8576">
            <name>const List&lt;RuleParser*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8573"/>
            </content>
        </type>
        <type derived="true" id="type.8578">
            <name>const List&lt;RuleParser*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8573"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8577">
            <name>const List&lt;RuleParser*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8573"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1067">
            <name>const List&lt;String&lt;char>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1062"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1157">
            <name>const List&lt;String&lt;uchar>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1152"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9146">
            <name>const List&lt;System.Text.Parsing.AttrOrVar></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9143"/>
            </content>
        </type>
        <type derived="true" id="type.9148">
            <name>const List&lt;System.Text.Parsing.AttrOrVar>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9143"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9147">
            <name>const List&lt;System.Text.Parsing.AttrOrVar>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9143"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9125">
            <name>const List&lt;System.Text.Parsing.CharRange></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9122"/>
            </content>
        </type>
        <type derived="true" id="type.9127">
            <name>const List&lt;System.Text.Parsing.CharRange>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9122"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9126">
            <name>const List&lt;System.Text.Parsing.CharRange>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9122"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8868">
            <name>const List&lt;System.Text.Parsing.RuleData></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8865"/>
            </content>
        </type>
        <type derived="true" id="type.8870">
            <name>const List&lt;System.Text.Parsing.RuleData>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8865"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8869">
            <name>const List&lt;System.Text.Parsing.RuleData>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8865"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7101">
            <name>const List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7096"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8846">
            <name>const List&lt;UniquePtr&lt;System.Text.Parsing.Context>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8843"/>
            </content>
        </type>
        <type derived="true" id="type.8848">
            <name>const List&lt;UniquePtr&lt;System.Text.Parsing.Context>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8843"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8847">
            <name>const List&lt;UniquePtr&lt;System.Text.Parsing.Context>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8843"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8416">
            <name>const List&lt;UniquePtr&lt;System.Text.Parsing.Object>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8413"/>
            </content>
        </type>
        <type derived="true" id="type.8418">
            <name>const List&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8413"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8417">
            <name>const List&lt;UniquePtr&lt;System.Text.Parsing.Object>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8413"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9100">
            <name>const List&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9097"/>
            </content>
        </type>
        <type derived="true" id="type.9102">
            <name>const List&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9097"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9101">
            <name>const List&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9097"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8379">
            <name>const List&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8376"/>
            </content>
        </type>
        <type derived="true" id="type.8381">
            <name>const List&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8376"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8380">
            <name>const List&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8376"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1245">
            <name>const Literal</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="6642"/>
            </content>
        </type>
        <type derived="true" id="type.1246">
            <name>const Literal&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="6642"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1189">
            <name>const LockGuard</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="681"/>
            </content>
        </type>
        <type derived="true" id="type.1282">
            <name>const LvalueRef</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="6729"/>
            </content>
        </type>
        <type derived="true" id="type.1283">
            <name>const LvalueRef&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="6729"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7501">
            <name>const Match</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7498"/>
            </content>
        </type>
        <type derived="true" id="type.7503">
            <name>const Match&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7498"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7502">
            <name>const Match*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7498"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1188">
            <name>const Mutex</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="678"/>
            </content>
        </type>
        <type derived="true" id="type.9062">
            <name>const Namespace</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7504"/>
            </content>
        </type>
        <type derived="true" id="type.9063">
            <name>const Namespace&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7504"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9061">
            <name>const Namespace*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7504"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8978">
            <name>const Namespace*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7504"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9060">
            <name>const Namespace**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7504"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1240">
            <name>const New</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="6621"/>
            </content>
        </type>
        <type derived="true" id="type.1241">
            <name>const New&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="6621"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7515">
            <name>const NonterminalParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7512"/>
            </content>
        </type>
        <type derived="true" id="type.7517">
            <name>const NonterminalParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7512"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7516">
            <name>const NonterminalParser*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7512"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9197">
            <name>const NonterminalParser*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7512"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9198">
            <name>const NonterminalParser**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7512"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1198">
            <name>const Not</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="6501"/>
            </content>
        </type>
        <type derived="true" id="type.1199">
            <name>const Not&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="6501"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8405">
            <name>const Object</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7518"/>
            </content>
        </type>
        <type derived="true" id="type.8406">
            <name>const Object&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7518"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8404">
            <name>const Object*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7518"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1294">
            <name>const OptionalParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7414"/>
            </content>
        </type>
        <type derived="true" id="type.1295">
            <name>const OptionalParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7414"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8931">
            <name>const Pair&lt;String&lt;uchar>, Grammar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8898"/>
            </content>
        </type>
        <type derived="true" id="type.8909">
            <name>const Pair&lt;String&lt;uchar>, Grammar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8898"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8930">
            <name>const Pair&lt;String&lt;uchar>, Grammar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8898"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9009">
            <name>const Pair&lt;String&lt;uchar>, Namespace*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8975"/>
            </content>
        </type>
        <type derived="true" id="type.8987">
            <name>const Pair&lt;String&lt;uchar>, Namespace*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8975"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9008">
            <name>const Pair&lt;String&lt;uchar>, Namespace*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8975"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9257">
            <name>const Pair&lt;String&lt;uchar>, ParsingObject*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9223"/>
            </content>
        </type>
        <type derived="true" id="type.9235">
            <name>const Pair&lt;String&lt;uchar>, ParsingObject*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9223"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9256">
            <name>const Pair&lt;String&lt;uchar>, ParsingObject*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9223"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8493">
            <name>const Pair&lt;String&lt;uchar>, String&lt;uchar>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8461"/>
            </content>
        </type>
        <type derived="true" id="type.8471">
            <name>const Pair&lt;String&lt;uchar>, String&lt;uchar>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8461"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8492">
            <name>const Pair&lt;String&lt;uchar>, String&lt;uchar>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8461"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.958">
            <name>const Pair&lt;T, U>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2599"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.953">
            <name>const Pair&lt;T, U>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2582"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7526">
            <name>const Parser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7523"/>
            </content>
        </type>
        <type derived="true" id="type.7528">
            <name>const Parser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7523"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7527">
            <name>const Parser*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7523"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8359">
            <name>const ParsingAction&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7397"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7539">
            <name>const ParsingData</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7536"/>
            </content>
        </type>
        <type derived="true" id="type.7541">
            <name>const ParsingData&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7536"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7540">
            <name>const ParsingData*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7536"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9515">
            <name>const ParsingData*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7536"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9514">
            <name>const ParsingData**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7536"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7545">
            <name>const ParsingDomain</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7542"/>
            </content>
        </type>
        <type derived="true" id="type.7547">
            <name>const ParsingDomain&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7542"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7546">
            <name>const ParsingDomain*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7542"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9559">
            <name>const ParsingDomain*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7542"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9558">
            <name>const ParsingDomain**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7542"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9088">
            <name>const ParsingDomainRepository</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7548"/>
            </content>
        </type>
        <type derived="true" id="type.9089">
            <name>const ParsingDomainRepository&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7548"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9087">
            <name>const ParsingDomainRepository*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7548"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7465">
            <name>const ParsingException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7462"/>
            </content>
        </type>
        <type derived="true" id="type.7467">
            <name>const ParsingException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7462"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7466">
            <name>const ParsingException*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7462"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7554">
            <name>const ParsingObject</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7551"/>
            </content>
        </type>
        <type derived="true" id="type.7556">
            <name>const ParsingObject&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7551"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7555">
            <name>const ParsingObject*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7551"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9226">
            <name>const ParsingObject*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7551"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1288">
            <name>const Pointer</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="6735"/>
            </content>
        </type>
        <type derived="true" id="type.1289">
            <name>const Pointer&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="6735"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1297">
            <name>const PositiveParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7417"/>
            </content>
        </type>
        <type derived="true" id="type.1298">
            <name>const PositiveParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7417"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8817">
            <name>const PostCall&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7508"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1228">
            <name>const PostfixDecrement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="6606"/>
            </content>
        </type>
        <type derived="true" id="type.1229">
            <name>const PostfixDecrement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="6606"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1225">
            <name>const PostfixIncrement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="6603"/>
            </content>
        </type>
        <type derived="true" id="type.1226">
            <name>const PostfixIncrement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="6603"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8810">
            <name>const PreCall&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7507"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1210">
            <name>const PrefixDecrement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="6513"/>
            </content>
        </type>
        <type derived="true" id="type.1211">
            <name>const PrefixDecrement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="6513"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1207">
            <name>const PrefixIncrement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="6510"/>
            </content>
        </type>
        <type derived="true" id="type.1208">
            <name>const PrefixIncrement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="6510"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9185">
            <name>const RandomAccessIter&lt;ActionParser*, ActionParser*&amp;, ActionParser**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9182"/>
            </content>
        </type>
        <type derived="true" id="type.9187">
            <name>const RandomAccessIter&lt;ActionParser*, ActionParser*&amp;, ActionParser**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9182"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9186">
            <name>const RandomAccessIter&lt;ActionParser*, ActionParser*&amp;, ActionParser**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9182"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9176">
            <name>const RandomAccessIter&lt;ActionParser*, const ActionParser*&amp;, const ActionParser**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9173"/>
            </content>
        </type>
        <type derived="true" id="type.9178">
            <name>const RandomAccessIter&lt;ActionParser*, const ActionParser*&amp;, const ActionParser**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9173"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9177">
            <name>const RandomAccessIter&lt;ActionParser*, const ActionParser*&amp;, const ActionParser**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9173"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8714">
            <name>const RandomAccessIter&lt;Bucket&lt;Grammar*>*, Bucket&lt;Grammar*>*&amp;, Bucket&lt;Grammar*>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711"/>
            </content>
        </type>
        <type derived="true" id="type.8716">
            <name>const RandomAccessIter&lt;Bucket&lt;Grammar*>*, Bucket&lt;Grammar*>*&amp;, Bucket&lt;Grammar*>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8715">
            <name>const RandomAccessIter&lt;Bucket&lt;Grammar*>*, Bucket&lt;Grammar*>*&amp;, Bucket&lt;Grammar*>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8705">
            <name>const RandomAccessIter&lt;Bucket&lt;Grammar*>*, const Bucket&lt;Grammar*>*&amp;, const Bucket&lt;Grammar*>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702"/>
            </content>
        </type>
        <type derived="true" id="type.8707">
            <name>const RandomAccessIter&lt;Bucket&lt;Grammar*>*, const Bucket&lt;Grammar*>*&amp;, const Bucket&lt;Grammar*>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8706">
            <name>const RandomAccessIter&lt;Bucket&lt;Grammar*>*, const Bucket&lt;Grammar*>*&amp;, const Bucket&lt;Grammar*>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8702"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8963">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8960"/>
            </content>
        </type>
        <type derived="true" id="type.8965">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8960"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8964">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8960"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8954">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8951"/>
            </content>
        </type>
        <type derived="true" id="type.8956">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8951"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8955">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8951"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9041">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9038"/>
            </content>
        </type>
        <type derived="true" id="type.9043">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9038"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9042">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9038"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9032">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9029"/>
            </content>
        </type>
        <type derived="true" id="type.9034">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9029"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9033">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9029"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9289">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9286"/>
            </content>
        </type>
        <type derived="true" id="type.9291">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9286"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9290">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9286"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9280">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9277"/>
            </content>
        </type>
        <type derived="true" id="type.9282">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9277"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9281">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9277"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8525">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*, Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8522"/>
            </content>
        </type>
        <type derived="true" id="type.8527">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*, Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8522"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8526">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*, Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8522"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8516">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8513"/>
            </content>
        </type>
        <type derived="true" id="type.8518">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8513"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8517">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8513"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8799">
            <name>const RandomAccessIter&lt;Bucket&lt;String&lt;uchar>>*, Bucket&lt;String&lt;uchar>>*&amp;, Bucket&lt;String&lt;uchar>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8796"/>
            </content>
        </type>
        <type derived="true" id="type.8801">
            <name>const RandomAccessIter&lt;Bucket&lt;String&lt;uchar>>*, Bucket&lt;String&lt;uchar>>*&amp;, Bucket&lt;String&lt;uchar>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8796"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8800">
            <name>const RandomAccessIter&lt;Bucket&lt;String&lt;uchar>>*, Bucket&lt;String&lt;uchar>>*&amp;, Bucket&lt;String&lt;uchar>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8796"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8790">
            <name>const RandomAccessIter&lt;Bucket&lt;String&lt;uchar>>*, const Bucket&lt;String&lt;uchar>>*&amp;, const Bucket&lt;String&lt;uchar>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8787"/>
            </content>
        </type>
        <type derived="true" id="type.8792">
            <name>const RandomAccessIter&lt;Bucket&lt;String&lt;uchar>>*, const Bucket&lt;String&lt;uchar>>*&amp;, const Bucket&lt;String&lt;uchar>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8787"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8791">
            <name>const RandomAccessIter&lt;Bucket&lt;String&lt;uchar>>*, const Bucket&lt;String&lt;uchar>>*&amp;, const Bucket&lt;String&lt;uchar>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8787"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9075">
            <name>const RandomAccessIter&lt;Namespace*, Namespace*&amp;, Namespace**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9072"/>
            </content>
        </type>
        <type derived="true" id="type.9077">
            <name>const RandomAccessIter&lt;Namespace*, Namespace*&amp;, Namespace**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9072"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9076">
            <name>const RandomAccessIter&lt;Namespace*, Namespace*&amp;, Namespace**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9072"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9067">
            <name>const RandomAccessIter&lt;Namespace*, const Namespace*&amp;, const Namespace**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9064"/>
            </content>
        </type>
        <type derived="true" id="type.9069">
            <name>const RandomAccessIter&lt;Namespace*, const Namespace*&amp;, const Namespace**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9064"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9068">
            <name>const RandomAccessIter&lt;Namespace*, const Namespace*&amp;, const Namespace**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9064"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9211">
            <name>const RandomAccessIter&lt;NonterminalParser*, NonterminalParser*&amp;, NonterminalParser**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9208"/>
            </content>
        </type>
        <type derived="true" id="type.9213">
            <name>const RandomAccessIter&lt;NonterminalParser*, NonterminalParser*&amp;, NonterminalParser**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9208"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9212">
            <name>const RandomAccessIter&lt;NonterminalParser*, NonterminalParser*&amp;, NonterminalParser**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9208"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9202">
            <name>const RandomAccessIter&lt;NonterminalParser*, const NonterminalParser*&amp;, const NonterminalParser**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9199"/>
            </content>
        </type>
        <type derived="true" id="type.9204">
            <name>const RandomAccessIter&lt;NonterminalParser*, const NonterminalParser*&amp;, const NonterminalParser**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9199"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9203">
            <name>const RandomAccessIter&lt;NonterminalParser*, const NonterminalParser*&amp;, const NonterminalParser**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9199"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8619">
            <name>const RandomAccessIter&lt;RuleLink*, RuleLink*&amp;, RuleLink**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8616"/>
            </content>
        </type>
        <type derived="true" id="type.8621">
            <name>const RandomAccessIter&lt;RuleLink*, RuleLink*&amp;, RuleLink**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8616"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8620">
            <name>const RandomAccessIter&lt;RuleLink*, RuleLink*&amp;, RuleLink**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8616"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8610">
            <name>const RandomAccessIter&lt;RuleLink*, const RuleLink*&amp;, const RuleLink**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8607"/>
            </content>
        </type>
        <type derived="true" id="type.8612">
            <name>const RandomAccessIter&lt;RuleLink*, const RuleLink*&amp;, const RuleLink**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8607"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8611">
            <name>const RandomAccessIter&lt;RuleLink*, const RuleLink*&amp;, const RuleLink**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8607"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8593">
            <name>const RandomAccessIter&lt;RuleParser*, RuleParser*&amp;, RuleParser**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8590"/>
            </content>
        </type>
        <type derived="true" id="type.8595">
            <name>const RandomAccessIter&lt;RuleParser*, RuleParser*&amp;, RuleParser**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8590"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8594">
            <name>const RandomAccessIter&lt;RuleParser*, RuleParser*&amp;, RuleParser**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8590"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8584">
            <name>const RandomAccessIter&lt;RuleParser*, const RuleParser*&amp;, const RuleParser**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8581"/>
            </content>
        </type>
        <type derived="true" id="type.8586">
            <name>const RandomAccessIter&lt;RuleParser*, const RuleParser*&amp;, const RuleParser**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8581"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8585">
            <name>const RandomAccessIter&lt;RuleParser*, const RuleParser*&amp;, const RuleParser**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8581"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9159">
            <name>const RandomAccessIter&lt;System.Text.Parsing.AttrOrVar, AttrOrVar&amp;, AttrOrVar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9156"/>
            </content>
        </type>
        <type derived="true" id="type.9161">
            <name>const RandomAccessIter&lt;System.Text.Parsing.AttrOrVar, AttrOrVar&amp;, AttrOrVar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9156"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9160">
            <name>const RandomAccessIter&lt;System.Text.Parsing.AttrOrVar, AttrOrVar&amp;, AttrOrVar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9156"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9152">
            <name>const RandomAccessIter&lt;System.Text.Parsing.AttrOrVar, const AttrOrVar&amp;, const AttrOrVar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9149"/>
            </content>
        </type>
        <type derived="true" id="type.9154">
            <name>const RandomAccessIter&lt;System.Text.Parsing.AttrOrVar, const AttrOrVar&amp;, const AttrOrVar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9149"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9153">
            <name>const RandomAccessIter&lt;System.Text.Parsing.AttrOrVar, const AttrOrVar&amp;, const AttrOrVar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9149"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9138">
            <name>const RandomAccessIter&lt;System.Text.Parsing.CharRange, CharRange&amp;, CharRange*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9135"/>
            </content>
        </type>
        <type derived="true" id="type.9140">
            <name>const RandomAccessIter&lt;System.Text.Parsing.CharRange, CharRange&amp;, CharRange*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9135"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9139">
            <name>const RandomAccessIter&lt;System.Text.Parsing.CharRange, CharRange&amp;, CharRange*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9135"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9131">
            <name>const RandomAccessIter&lt;System.Text.Parsing.CharRange, const CharRange&amp;, const CharRange*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9128"/>
            </content>
        </type>
        <type derived="true" id="type.9133">
            <name>const RandomAccessIter&lt;System.Text.Parsing.CharRange, const CharRange&amp;, const CharRange*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9128"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9132">
            <name>const RandomAccessIter&lt;System.Text.Parsing.CharRange, const CharRange&amp;, const CharRange*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9128"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8886">
            <name>const RandomAccessIter&lt;System.Text.Parsing.RuleData, RuleData&amp;, RuleData*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8883"/>
            </content>
        </type>
        <type derived="true" id="type.8888">
            <name>const RandomAccessIter&lt;System.Text.Parsing.RuleData, RuleData&amp;, RuleData*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8883"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8887">
            <name>const RandomAccessIter&lt;System.Text.Parsing.RuleData, RuleData&amp;, RuleData*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8883"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8877">
            <name>const RandomAccessIter&lt;System.Text.Parsing.RuleData, const RuleData&amp;, const RuleData*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8874"/>
            </content>
        </type>
        <type derived="true" id="type.8879">
            <name>const RandomAccessIter&lt;System.Text.Parsing.RuleData, const RuleData&amp;, const RuleData*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8874"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8878">
            <name>const RandomAccessIter&lt;System.Text.Parsing.RuleData, const RuleData&amp;, const RuleData*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8874"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8859">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Context>, UniquePtr&lt;System.Text.Parsing.Context>&amp;, UniquePtr&lt;System.Text.Parsing.Context>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8856"/>
            </content>
        </type>
        <type derived="true" id="type.8861">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Context>, UniquePtr&lt;System.Text.Parsing.Context>&amp;, UniquePtr&lt;System.Text.Parsing.Context>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8856"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8860">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Context>, UniquePtr&lt;System.Text.Parsing.Context>&amp;, UniquePtr&lt;System.Text.Parsing.Context>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8856"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8852">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Context>, const UniquePtr&lt;System.Text.Parsing.Context>&amp;, const UniquePtr&lt;System.Text.Parsing.Context>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8849"/>
            </content>
        </type>
        <type derived="true" id="type.8854">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Context>, const UniquePtr&lt;System.Text.Parsing.Context>&amp;, const UniquePtr&lt;System.Text.Parsing.Context>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8849"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8853">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Context>, const UniquePtr&lt;System.Text.Parsing.Context>&amp;, const UniquePtr&lt;System.Text.Parsing.Context>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8849"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8429">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Object>, UniquePtr&lt;System.Text.Parsing.Object>&amp;, UniquePtr&lt;System.Text.Parsing.Object>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8426"/>
            </content>
        </type>
        <type derived="true" id="type.8431">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Object>, UniquePtr&lt;System.Text.Parsing.Object>&amp;, UniquePtr&lt;System.Text.Parsing.Object>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8426"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8430">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Object>, UniquePtr&lt;System.Text.Parsing.Object>&amp;, UniquePtr&lt;System.Text.Parsing.Object>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8426"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8422">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Object>, const UniquePtr&lt;System.Text.Parsing.Object>&amp;, const UniquePtr&lt;System.Text.Parsing.Object>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8419"/>
            </content>
        </type>
        <type derived="true" id="type.8424">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Object>, const UniquePtr&lt;System.Text.Parsing.Object>&amp;, const UniquePtr&lt;System.Text.Parsing.Object>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8419"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8423">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Object>, const UniquePtr&lt;System.Text.Parsing.Object>&amp;, const UniquePtr&lt;System.Text.Parsing.Object>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8419"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9113">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>, UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;, UniquePtr&lt;System.Text.Parsing.ParsingDomain>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9110"/>
            </content>
        </type>
        <type derived="true" id="type.9115">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>, UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;, UniquePtr&lt;System.Text.Parsing.ParsingDomain>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9110"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9114">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>, UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;, UniquePtr&lt;System.Text.Parsing.ParsingDomain>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9110"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9106">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>, const UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;, const UniquePtr&lt;System.Text.Parsing.ParsingDomain>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9103"/>
            </content>
        </type>
        <type derived="true" id="type.9108">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>, const UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;, const UniquePtr&lt;System.Text.Parsing.ParsingDomain>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9103"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9107">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>, const UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;, const UniquePtr&lt;System.Text.Parsing.ParsingDomain>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9103"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8392">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>, UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;, UniquePtr&lt;System.Text.Parsing.ParsingObject>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8389"/>
            </content>
        </type>
        <type derived="true" id="type.8394">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>, UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;, UniquePtr&lt;System.Text.Parsing.ParsingObject>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8389"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8393">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>, UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;, UniquePtr&lt;System.Text.Parsing.ParsingObject>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8389"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8385">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>, const UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;, const UniquePtr&lt;System.Text.Parsing.ParsingObject>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8382"/>
            </content>
        </type>
        <type derived="true" id="type.8387">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>, const UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;, const UniquePtr&lt;System.Text.Parsing.ParsingObject>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8382"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8386">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>, const UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;, const UniquePtr&lt;System.Text.Parsing.ParsingObject>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8382"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8075">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8072"/>
            </content>
        </type>
        <type derived="true" id="type.940">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.937"/>
            </content>
        </type>
        <type derived="true" id="type.942">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.937"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8077">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8072"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.941">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.937"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8076">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8072"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7939">
            <name>const RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7936"/>
            </content>
        </type>
        <type derived="true" id="type.805">
            <name>const RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.802"/>
            </content>
        </type>
        <type derived="true" id="type.7939">
            <name>const RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7936"/>
            </content>
        </type>
        <type derived="true" id="type.7941">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7936"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.807">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.802"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7940">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7936"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.806">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.802"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7932">
            <name>const RandomAccessIter&lt;char, const char&amp;, const char*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7929"/>
            </content>
        </type>
        <type derived="true" id="type.798">
            <name>const RandomAccessIter&lt;char, const char&amp;, const char*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.795"/>
            </content>
        </type>
        <type derived="true" id="type.7932">
            <name>const RandomAccessIter&lt;char, const char&amp;, const char*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7929"/>
            </content>
        </type>
        <type derived="true" id="type.7934">
            <name>const RandomAccessIter&lt;char, const char&amp;, const char*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7929"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.800">
            <name>const RandomAccessIter&lt;char, const char&amp;, const char*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.795"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7934">
            <name>const RandomAccessIter&lt;char, const char&amp;, const char*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7929"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.799">
            <name>const RandomAccessIter&lt;char, const char&amp;, const char*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.795"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7933">
            <name>const RandomAccessIter&lt;char, const char&amp;, const char*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7929"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.824">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.821"/>
            </content>
        </type>
        <type derived="true" id="type.7958">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7955"/>
            </content>
        </type>
        <type derived="true" id="type.7960">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7955"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.826">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.821"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7959">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7955"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.825">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.821"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8212">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8209"/>
            </content>
        </type>
        <type derived="true" id="type.1076">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1073"/>
            </content>
        </type>
        <type derived="true" id="type.1078">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1073"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8214">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8209"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8213">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8209"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1077">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1073"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.834">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.831"/>
            </content>
        </type>
        <type derived="true" id="type.7969">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7966"/>
            </content>
        </type>
        <type derived="true" id="type.836">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.831"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7971">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7966"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.835">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.831"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7970">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7966"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7948">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7945"/>
            </content>
        </type>
        <type derived="true" id="type.814">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.811"/>
            </content>
        </type>
        <type derived="true" id="type.7950">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7945"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.816">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.811"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7949">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7945"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.815">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.811"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7949">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7945"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7728">
            <name>const RangeParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7725"/>
            </content>
        </type>
        <type derived="true" id="type.7730">
            <name>const RangeParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7725"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7729">
            <name>const RangeParser*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7725"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9402">
            <name>const Rel&lt;Grammar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8636"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9324">
            <name>const Rel&lt;String&lt;uchar>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8444"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1249">
            <name>const ReturnStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="6654"/>
            </content>
        </type>
        <type derived="true" id="type.1250">
            <name>const ReturnStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="6654"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8873">
            <name>const RuleData</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7535"/>
            </content>
        </type>
        <type derived="true" id="type.8871">
            <name>const RuleData&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7535"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8872">
            <name>const RuleData*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7535"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7746">
            <name>const RuleLink</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7743"/>
            </content>
        </type>
        <type derived="true" id="type.7748">
            <name>const RuleLink&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7743"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7747">
            <name>const RuleLink*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7743"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8605">
            <name>const RuleLink*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7743"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8606">
            <name>const RuleLink**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7743"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7740">
            <name>const RuleParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7737"/>
            </content>
        </type>
        <type derived="true" id="type.7742">
            <name>const RuleParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7737"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7741">
            <name>const RuleParser*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7737"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8579">
            <name>const RuleParser*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7737"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8580">
            <name>const RuleParser**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7737"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9491">
            <name>const RuleParser**&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7737"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9492">
            <name>const RuleParser**&amp;&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7737"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9490">
            <name>const RuleParser***</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7737"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1285">
            <name>const RvalueRef</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="6732"/>
            </content>
        </type>
        <type derived="true" id="type.1286">
            <name>const RvalueRef&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="6732"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7752">
            <name>const Scanner</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7749"/>
            </content>
        </type>
        <type derived="true" id="type.7754">
            <name>const Scanner&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7749"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7753">
            <name>const Scanner*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7749"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9625">
            <name>const Scanner*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7749"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9624">
            <name>const Scanner**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7749"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7758">
            <name>const Scope</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7755"/>
            </content>
        </type>
        <type derived="true" id="type.7760">
            <name>const Scope&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7755"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7759">
            <name>const Scope*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7755"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9655">
            <name>const Scope*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7755"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9654">
            <name>const Scope**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7755"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8903">
            <name>const SelectFirst&lt;String&lt;uchar>, Grammar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8902"/>
            </content>
        </type>
        <type derived="true" id="type.8905">
            <name>const SelectFirst&lt;String&lt;uchar>, Grammar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8902"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8904">
            <name>const SelectFirst&lt;String&lt;uchar>, Grammar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8902"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9550">
            <name>const SelectFirst&lt;String&lt;uchar>, Grammar*>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8902"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9549">
            <name>const SelectFirst&lt;String&lt;uchar>, Grammar*>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8902"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8981">
            <name>const SelectFirst&lt;String&lt;uchar>, Namespace*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8980"/>
            </content>
        </type>
        <type derived="true" id="type.8983">
            <name>const SelectFirst&lt;String&lt;uchar>, Namespace*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8980"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8982">
            <name>const SelectFirst&lt;String&lt;uchar>, Namespace*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8980"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9536">
            <name>const SelectFirst&lt;String&lt;uchar>, Namespace*>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8980"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9535">
            <name>const SelectFirst&lt;String&lt;uchar>, Namespace*>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8980"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9229">
            <name>const SelectFirst&lt;String&lt;uchar>, ParsingObject*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9228"/>
            </content>
        </type>
        <type derived="true" id="type.9231">
            <name>const SelectFirst&lt;String&lt;uchar>, ParsingObject*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9228"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9230">
            <name>const SelectFirst&lt;String&lt;uchar>, ParsingObject*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9228"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9641">
            <name>const SelectFirst&lt;String&lt;uchar>, ParsingObject*>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9228"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9640">
            <name>const SelectFirst&lt;String&lt;uchar>, ParsingObject*>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9228"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8465">
            <name>const SelectFirst&lt;String&lt;uchar>, String&lt;uchar>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8464"/>
            </content>
        </type>
        <type derived="true" id="type.8467">
            <name>const SelectFirst&lt;String&lt;uchar>, String&lt;uchar>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8464"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8466">
            <name>const SelectFirst&lt;String&lt;uchar>, String&lt;uchar>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8464"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9335">
            <name>const SelectFirst&lt;String&lt;uchar>, String&lt;uchar>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8464"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9334">
            <name>const SelectFirst&lt;String&lt;uchar>, String&lt;uchar>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8464"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1231">
            <name>const SizeOf</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="6609"/>
            </content>
        </type>
        <type derived="true" id="type.1232">
            <name>const SizeOf&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="6609"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7764">
            <name>const Span</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7761"/>
            </content>
        </type>
        <type derived="true" id="type.7766">
            <name>const Span&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7761"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7765">
            <name>const Span*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7761"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9049">
            <name>const Stack&lt;Namespace*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9048"/>
            </content>
        </type>
        <type derived="true" id="type.9051">
            <name>const Stack&lt;Namespace*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9048"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9050">
            <name>const Stack&lt;Namespace*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9048"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8838">
            <name>const Stack&lt;UniquePtr&lt;System.Text.Parsing.Context>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8837"/>
            </content>
        </type>
        <type derived="true" id="type.8840">
            <name>const Stack&lt;UniquePtr&lt;System.Text.Parsing.Context>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8837"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8839">
            <name>const Stack&lt;UniquePtr&lt;System.Text.Parsing.Context>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8837"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8408">
            <name>const Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8407"/>
            </content>
        </type>
        <type derived="true" id="type.8410">
            <name>const Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8407"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8409">
            <name>const Stack&lt;UniquePtr&lt;System.Text.Parsing.Object>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8407"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1170">
            <name>const StaticInitCriticalSection</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="146"/>
            </content>
        </type>
        <type derived="true" id="type.1171">
            <name>const StaticInitCriticalSection&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="146"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1182">
            <name>const StreamReader</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="770"/>
            </content>
        </type>
        <type derived="true" id="type.1183">
            <name>const StreamWriter</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="773"/>
            </content>
        </type>
        <type derived="true" id="type.1045">
            <name>const String&lt;char>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1040"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1133">
            <name>const String&lt;uchar>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1128"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1132">
            <name>const String&lt;uchar>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1128"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9304">
            <name>const String&lt;uchar>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1128"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9462">
            <name>const String&lt;uchar>*&amp;&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1128"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9461">
            <name>const String&lt;uchar>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1128"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7566">
            <name>const StringParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7563"/>
            </content>
        </type>
        <type derived="true" id="type.7568">
            <name>const StringParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7563"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7567">
            <name>const StringParser*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7563"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1264">
            <name>const SwitchStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="6705"/>
            </content>
        </type>
        <type derived="true" id="type.1265">
            <name>const SwitchStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="6705"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.954">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="697"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.859">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="564"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.865">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="574"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.858">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="562"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.857">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="553"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.856">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="551"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.866">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="576"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.949">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="694"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.907">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="632"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.970">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="735"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.854">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="546"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.868">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="579"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.839">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="521"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.841">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="523"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.884">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="613"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.875">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="591"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.869">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="581"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.945">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="685"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.882">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="610"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.905">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="630"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.871">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="584"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.881">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="608"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.880">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="606"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.879">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="604"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.878">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="602"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.877">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="600"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.904">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="628"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.972">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="737"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.874">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="589"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.916">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="649"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.872">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="586"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.863">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="571"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.862">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="569"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.852">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="541"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.855">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="548"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.860">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="566"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.853">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="544"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1190">
            <name>const ThreadingException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="800"/>
            </content>
        </type>
        <type derived="true" id="type.1191">
            <name>const ThreadingException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="800"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1270">
            <name>const ThrowStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="6714"/>
            </content>
        </type>
        <type derived="true" id="type.1271">
            <name>const ThrowStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="6714"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1306">
            <name>const TokenParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7426"/>
            </content>
        </type>
        <type derived="true" id="type.1307">
            <name>const TokenParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7426"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1273">
            <name>const TryStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="6720"/>
            </content>
        </type>
        <type derived="true" id="type.1274">
            <name>const TryStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="6720"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1194">
            <name>const Type</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="6437"/>
            </content>
        </type>
        <type derived="true" id="type.1195">
            <name>const Type&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="6437"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1234">
            <name>const TypeName</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="6612"/>
            </content>
        </type>
        <type derived="true" id="type.1235">
            <name>const TypeName&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="6612"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.876">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="592"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.870">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="582"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.955">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="698"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.867">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="577"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.950">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="695"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.861">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="567"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.864">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="572"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.873">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="587"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.946">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="686"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9392">
            <name>const UnaryFun&lt;Grammar*, Grammar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8657"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9398">
            <name>const UnaryFun&lt;Grammar*, ulong>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8628"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9520">
            <name>const UnaryFun&lt;Pair&lt;String&lt;uchar>, Grammar*>, String&lt;uchar>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8906"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9529">
            <name>const UnaryFun&lt;Pair&lt;String&lt;uchar>, Namespace*>, String&lt;uchar>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8984"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9632">
            <name>const UnaryFun&lt;Pair&lt;String&lt;uchar>, ParsingObject*>, String&lt;uchar>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9232"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9314">
            <name>const UnaryFun&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>, String&lt;uchar>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8468"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9457">
            <name>const UnaryFun&lt;String&lt;uchar>, String&lt;uchar>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8745"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9320">
            <name>const UnaryFun&lt;String&lt;uchar>, ulong>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8437"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1216">
            <name>const UnaryMinus</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="6519"/>
            </content>
        </type>
        <type derived="true" id="type.1217">
            <name>const UnaryMinus&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="6519"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7411">
            <name>const UnaryParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7408"/>
            </content>
        </type>
        <type derived="true" id="type.7413">
            <name>const UnaryParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7408"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7412">
            <name>const UnaryParser*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7408"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1213">
            <name>const UnaryPlus</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="6516"/>
            </content>
        </type>
        <type derived="true" id="type.1214">
            <name>const UnaryPlus&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="6516"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1192">
            <name>const UnicodeException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="809"/>
            </content>
        </type>
        <type derived="true" id="type.1193">
            <name>const UnicodeException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="809"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7066">
            <name>const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7062"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9618">
            <name>const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7062"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9619">
            <name>const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*&amp;&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7062"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9617">
            <name>const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.7062"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8830">
            <name>const UniquePtr&lt;System.Text.Parsing.Context></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8827"/>
            </content>
        </type>
        <type derived="true" id="type.8832">
            <name>const UniquePtr&lt;System.Text.Parsing.Context>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8827"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8831">
            <name>const UniquePtr&lt;System.Text.Parsing.Context>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8827"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9360">
            <name>const UniquePtr&lt;System.Text.Parsing.ExpectationFailure></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9357"/>
            </content>
        </type>
        <type derived="true" id="type.9362">
            <name>const UniquePtr&lt;System.Text.Parsing.ExpectationFailure>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9357"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9361">
            <name>const UniquePtr&lt;System.Text.Parsing.ExpectationFailure>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9357"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8552">
            <name>const UniquePtr&lt;System.Text.Parsing.FileInfo></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8549"/>
            </content>
        </type>
        <type derived="true" id="type.8554">
            <name>const UniquePtr&lt;System.Text.Parsing.FileInfo>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8549"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8553">
            <name>const UniquePtr&lt;System.Text.Parsing.FileInfo>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8549"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8723">
            <name>const UniquePtr&lt;System.Text.Parsing.IdentifierCharsRule></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8720"/>
            </content>
        </type>
        <type derived="true" id="type.8725">
            <name>const UniquePtr&lt;System.Text.Parsing.IdentifierCharsRule>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8720"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8724">
            <name>const UniquePtr&lt;System.Text.Parsing.IdentifierCharsRule>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8720"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8400">
            <name>const UniquePtr&lt;System.Text.Parsing.Object></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8397"/>
            </content>
        </type>
        <type derived="true" id="type.8402">
            <name>const UniquePtr&lt;System.Text.Parsing.Object>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8397"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8401">
            <name>const UniquePtr&lt;System.Text.Parsing.Object>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8397"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8562">
            <name>const UniquePtr&lt;System.Text.Parsing.ParsingData></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8559"/>
            </content>
        </type>
        <type derived="true" id="type.8564">
            <name>const UniquePtr&lt;System.Text.Parsing.ParsingData>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8559"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8563">
            <name>const UniquePtr&lt;System.Text.Parsing.ParsingData>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8559"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9093">
            <name>const UniquePtr&lt;System.Text.Parsing.ParsingDomain></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9090"/>
            </content>
        </type>
        <type derived="true" id="type.9095">
            <name>const UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9090"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9094">
            <name>const UniquePtr&lt;System.Text.Parsing.ParsingDomain>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9090"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9083">
            <name>const UniquePtr&lt;System.Text.Parsing.ParsingDomainRepository></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9080"/>
            </content>
        </type>
        <type derived="true" id="type.9085">
            <name>const UniquePtr&lt;System.Text.Parsing.ParsingDomainRepository>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9080"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9084">
            <name>const UniquePtr&lt;System.Text.Parsing.ParsingDomainRepository>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9080"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9484">
            <name>const UniquePtr&lt;System.Text.Parsing.ParsingException></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9481"/>
            </content>
        </type>
        <type derived="true" id="type.9486">
            <name>const UniquePtr&lt;System.Text.Parsing.ParsingException>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9481"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9485">
            <name>const UniquePtr&lt;System.Text.Parsing.ParsingException>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9481"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8372">
            <name>const UniquePtr&lt;System.Text.Parsing.ParsingObject></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8369"/>
            </content>
        </type>
        <type derived="true" id="type.8374">
            <name>const UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8369"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8373">
            <name>const UniquePtr&lt;System.Text.Parsing.ParsingObject>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8369"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8730">
            <name>const UniquePtr&lt;System.Text.Parsing.RuleParser></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8727"/>
            </content>
        </type>
        <type derived="true" id="type.8732">
            <name>const UniquePtr&lt;System.Text.Parsing.RuleParser>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8727"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8731">
            <name>const UniquePtr&lt;System.Text.Parsing.RuleParser>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8727"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8569">
            <name>const UniquePtr&lt;System.Text.Parsing.XmlLog></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8566"/>
            </content>
        </type>
        <type derived="true" id="type.8571">
            <name>const UniquePtr&lt;System.Text.Parsing.XmlLog>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8566"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8570">
            <name>const UniquePtr&lt;System.Text.Parsing.XmlLog>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8566"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.929">
            <name>const Value&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="670"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9852">
            <name>const ValueObject&lt;String&lt;uchar>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9849"/>
            </content>
        </type>
        <type derived="true" id="type.9854">
            <name>const ValueObject&lt;String&lt;uchar>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9849"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9853">
            <name>const ValueObject&lt;String&lt;uchar>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9849"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8822">
            <name>const ValueObject&lt;ValueType></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8819"/>
            </content>
        </type>
        <type derived="true" id="type.8824">
            <name>const ValueObject&lt;ValueType>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8819"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8823">
            <name>const ValueObject&lt;ValueType>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8819"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9840">
            <name>const ValueObject&lt;bool></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9837"/>
            </content>
        </type>
        <type derived="true" id="type.9842">
            <name>const ValueObject&lt;bool>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9837"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9841">
            <name>const ValueObject&lt;bool>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9837"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9676">
            <name>const ValueObject&lt;byte></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9673"/>
            </content>
        </type>
        <type derived="true" id="type.9678">
            <name>const ValueObject&lt;byte>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9673"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9677">
            <name>const ValueObject&lt;byte>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9673"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9816">
            <name>const ValueObject&lt;double></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9813"/>
            </content>
        </type>
        <type derived="true" id="type.9818">
            <name>const ValueObject&lt;double>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9813"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9817">
            <name>const ValueObject&lt;double>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9813"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9802">
            <name>const ValueObject&lt;float></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9799"/>
            </content>
        </type>
        <type derived="true" id="type.9804">
            <name>const ValueObject&lt;float>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9799"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9803">
            <name>const ValueObject&lt;float>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9799"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9717">
            <name>const ValueObject&lt;int></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9714"/>
            </content>
        </type>
        <type derived="true" id="type.9719">
            <name>const ValueObject&lt;int>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9714"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9718">
            <name>const ValueObject&lt;int>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9714"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9742">
            <name>const ValueObject&lt;long></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9739"/>
            </content>
        </type>
        <type derived="true" id="type.9744">
            <name>const ValueObject&lt;long>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9739"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9743">
            <name>const ValueObject&lt;long>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9739"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9662">
            <name>const ValueObject&lt;sbyte></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9659"/>
            </content>
        </type>
        <type derived="true" id="type.9664">
            <name>const ValueObject&lt;sbyte>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9659"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9663">
            <name>const ValueObject&lt;sbyte>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9659"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9689">
            <name>const ValueObject&lt;short></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9686"/>
            </content>
        </type>
        <type derived="true" id="type.9691">
            <name>const ValueObject&lt;short>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9686"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9690">
            <name>const ValueObject&lt;short>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9686"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9869">
            <name>const ValueObject&lt;uchar></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9866"/>
            </content>
        </type>
        <type derived="true" id="type.9871">
            <name>const ValueObject&lt;uchar>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9866"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9870">
            <name>const ValueObject&lt;uchar>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9866"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9729">
            <name>const ValueObject&lt;uint></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9726"/>
            </content>
        </type>
        <type derived="true" id="type.9731">
            <name>const ValueObject&lt;uint>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9726"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9730">
            <name>const ValueObject&lt;uint>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9726"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9755">
            <name>const ValueObject&lt;ulong></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9752"/>
            </content>
        </type>
        <type derived="true" id="type.9757">
            <name>const ValueObject&lt;ulong>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9752"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9756">
            <name>const ValueObject&lt;ulong>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9752"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9703">
            <name>const ValueObject&lt;ushort></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9700"/>
            </content>
        </type>
        <type derived="true" id="type.9705">
            <name>const ValueObject&lt;ushort>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9700"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9704">
            <name>const ValueObject&lt;ushort>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9700"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1131">
            <name>const ValueType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7522"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7926">
            <name>const XmlLog</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7923"/>
            </content>
        </type>
        <type derived="true" id="type.7928">
            <name>const XmlLog&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7923"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7927">
            <name>const XmlLog*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7923"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1046">
            <name>const char&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.12"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.150">
            <name>const char*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.12"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1165">
            <name>const double&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.11"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1163">
            <name>const float&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.10"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9374">
            <name>const int&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.6"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1152">
            <name>const sbyte&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1155">
            <name>const short&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1311">
            <name>const stdlib</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7767"/>
            </content>
        </type>
        <type derived="true" id="type.1312">
            <name>const stdlib&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="7767"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1135">
            <name>const uchar*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.14"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1157">
            <name>const ushort&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type basic="true" id="type.11">
            <name>double</name>
        </type>
        <type id="7866">
            <name>doubleRule</name>
        </type>
        <type derived="true" id="type.7868">
            <name>doubleRule&amp;</name>
            <content>
                <baseType ref="7866"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7867">
            <name>doubleRule*</name>
            <content>
                <baseType ref="7866"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9822">
            <name>doubleRule*&amp;</name>
            <content>
                <baseType ref="7866"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9821">
            <name>doubleRule**</name>
            <content>
                <baseType ref="7866"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7902">
            <name>escapeRule</name>
        </type>
        <type derived="true" id="type.7904">
            <name>escapeRule&amp;</name>
            <content>
                <baseType ref="7902"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7903">
            <name>escapeRule*</name>
            <content>
                <baseType ref="7902"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9874">
            <name>escapeRule*&amp;</name>
            <content>
                <baseType ref="7902"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9873">
            <name>escapeRule**</name>
            <content>
                <baseType ref="7902"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.10">
            <name>float</name>
        </type>
        <type id="7860">
            <name>floatRule</name>
        </type>
        <type derived="true" id="type.7862">
            <name>floatRule&amp;</name>
            <content>
                <baseType ref="7860"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7861">
            <name>floatRule*</name>
            <content>
                <baseType ref="7860"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9808">
            <name>floatRule*&amp;</name>
            <content>
                <baseType ref="7860"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9807">
            <name>floatRule**</name>
            <content>
                <baseType ref="7860"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7842">
            <name>hexRule</name>
        </type>
        <type derived="true" id="type.7844">
            <name>hexRule&amp;</name>
            <content>
                <baseType ref="7842"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7843">
            <name>hexRule*</name>
            <content>
                <baseType ref="7842"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9785">
            <name>hexRule*&amp;</name>
            <content>
                <baseType ref="7842"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9784">
            <name>hexRule**</name>
            <content>
                <baseType ref="7842"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7848">
            <name>hex_literalRule</name>
        </type>
        <type derived="true" id="type.7850">
            <name>hex_literalRule&amp;</name>
            <content>
                <baseType ref="7848"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7849">
            <name>hex_literalRule*</name>
            <content>
                <baseType ref="7848"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9790">
            <name>hex_literalRule*&amp;</name>
            <content>
                <baseType ref="7848"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9789">
            <name>hex_literalRule**</name>
            <content>
                <baseType ref="7848"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7818">
            <name>hexbyteRule</name>
        </type>
        <type derived="true" id="type.7820">
            <name>hexbyteRule&amp;</name>
            <content>
                <baseType ref="7818"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7819">
            <name>hexbyteRule*</name>
            <content>
                <baseType ref="7818"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9765">
            <name>hexbyteRule*&amp;</name>
            <content>
                <baseType ref="7818"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9764">
            <name>hexbyteRule**</name>
            <content>
                <baseType ref="7818"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7830">
            <name>hexdwordRule</name>
        </type>
        <type derived="true" id="type.7832">
            <name>hexdwordRule&amp;</name>
            <content>
                <baseType ref="7830"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7831">
            <name>hexdwordRule*</name>
            <content>
                <baseType ref="7830"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9775">
            <name>hexdwordRule*&amp;</name>
            <content>
                <baseType ref="7830"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9774">
            <name>hexdwordRule**</name>
            <content>
                <baseType ref="7830"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7836">
            <name>hexqwordRule</name>
        </type>
        <type derived="true" id="type.7838">
            <name>hexqwordRule&amp;</name>
            <content>
                <baseType ref="7836"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7837">
            <name>hexqwordRule*</name>
            <content>
                <baseType ref="7836"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9780">
            <name>hexqwordRule*&amp;</name>
            <content>
                <baseType ref="7836"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9779">
            <name>hexqwordRule**</name>
            <content>
                <baseType ref="7836"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7824">
            <name>hexwordRule</name>
        </type>
        <type derived="true" id="type.7826">
            <name>hexwordRule&amp;</name>
            <content>
                <baseType ref="7824"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7825">
            <name>hexwordRule*</name>
            <content>
                <baseType ref="7824"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9770">
            <name>hexwordRule*&amp;</name>
            <content>
                <baseType ref="7824"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9769">
            <name>hexwordRule**</name>
            <content>
                <baseType ref="7824"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7890">
            <name>identifierRule</name>
        </type>
        <type derived="true" id="type.7892">
            <name>identifierRule&amp;</name>
            <content>
                <baseType ref="7890"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7891">
            <name>identifierRule*</name>
            <content>
                <baseType ref="7890"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9857">
            <name>identifierRule*&amp;</name>
            <content>
                <baseType ref="7890"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9856">
            <name>identifierRule**</name>
            <content>
                <baseType ref="7890"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.6">
            <name>int</name>
        </type>
        <type id="7794">
            <name>intRule</name>
        </type>
        <type derived="true" id="type.7796">
            <name>intRule&amp;</name>
            <content>
                <baseType ref="7794"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7795">
            <name>intRule*</name>
            <content>
                <baseType ref="7794"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9722">
            <name>intRule*&amp;</name>
            <content>
                <baseType ref="7794"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9721">
            <name>intRule**</name>
            <content>
                <baseType ref="7794"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.8">
            <name>long</name>
        </type>
        <type id="7806">
            <name>longRule</name>
        </type>
        <type derived="true" id="type.7808">
            <name>longRule&amp;</name>
            <content>
                <baseType ref="7806"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7807">
            <name>longRule*</name>
            <content>
                <baseType ref="7806"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9747">
            <name>longRule*&amp;</name>
            <content>
                <baseType ref="7806"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9746">
            <name>longRule**</name>
            <content>
                <baseType ref="7806"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7878">
            <name>numRule</name>
        </type>
        <type derived="true" id="type.7880">
            <name>numRule&amp;</name>
            <content>
                <baseType ref="7878"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7879">
            <name>numRule*</name>
            <content>
                <baseType ref="7878"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9833">
            <name>numRule*&amp;</name>
            <content>
                <baseType ref="7878"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9832">
            <name>numRule**</name>
            <content>
                <baseType ref="7878"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7854">
            <name>octal_digitRule</name>
        </type>
        <type derived="true" id="type.7856">
            <name>octal_digitRule&amp;</name>
            <content>
                <baseType ref="7854"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7855">
            <name>octal_digitRule*</name>
            <content>
                <baseType ref="7854"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9795">
            <name>octal_digitRule*&amp;</name>
            <content>
                <baseType ref="7854"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9794">
            <name>octal_digitRule**</name>
            <content>
                <baseType ref="7854"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7896">
            <name>qualified_idRule</name>
        </type>
        <type derived="true" id="type.7898">
            <name>qualified_idRule&amp;</name>
            <content>
                <baseType ref="7896"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7897">
            <name>qualified_idRule*</name>
            <content>
                <baseType ref="7896"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9862">
            <name>qualified_idRule*&amp;</name>
            <content>
                <baseType ref="7896"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9861">
            <name>qualified_idRule**</name>
            <content>
                <baseType ref="7896"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.2">
            <name>sbyte</name>
        </type>
        <type id="7770">
            <name>sbyteRule</name>
        </type>
        <type derived="true" id="type.7772">
            <name>sbyteRule&amp;</name>
            <content>
                <baseType ref="7770"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7771">
            <name>sbyteRule*</name>
            <content>
                <baseType ref="7770"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9668">
            <name>sbyteRule*&amp;</name>
            <content>
                <baseType ref="7770"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9667">
            <name>sbyteRule**</name>
            <content>
                <baseType ref="7770"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.4">
            <name>short</name>
        </type>
        <type id="7782">
            <name>shortRule</name>
        </type>
        <type derived="true" id="type.7784">
            <name>shortRule&amp;</name>
            <content>
                <baseType ref="7782"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7783">
            <name>shortRule*</name>
            <content>
                <baseType ref="7782"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9695">
            <name>shortRule*&amp;</name>
            <content>
                <baseType ref="7782"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9694">
            <name>shortRule**</name>
            <content>
                <baseType ref="7782"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7767">
            <name>stdlib</name>
        </type>
        <type derived="true" id="type.7769">
            <name>stdlib&amp;</name>
            <content>
                <baseType ref="7767"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1313">
            <name>stdlib&amp;&amp;</name>
            <content>
                <baseType ref="7767"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7768">
            <name>stdlib*</name>
            <content>
                <baseType ref="7767"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7914">
            <name>stringRule</name>
        </type>
        <type derived="true" id="type.7916">
            <name>stringRule&amp;</name>
            <content>
                <baseType ref="7914"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7915">
            <name>stringRule*</name>
            <content>
                <baseType ref="7914"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9884">
            <name>stringRule*&amp;</name>
            <content>
                <baseType ref="7914"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9883">
            <name>stringRule**</name>
            <content>
                <baseType ref="7914"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.14">
            <name>uchar</name>
        </type>
        <type derived="true" id="type.57">
            <name>uchar&amp;</name>
            <content>
                <baseType ref="type.14"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.56">
            <name>uchar*</name>
            <content>
                <baseType ref="type.14"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.7">
            <name>uint</name>
        </type>
        <type derived="true" id="type.36">
            <name>uint&amp;</name>
            <content>
                <baseType ref="type.7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.35">
            <name>uint*</name>
            <content>
                <baseType ref="type.7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7800">
            <name>uintRule</name>
        </type>
        <type derived="true" id="type.7802">
            <name>uintRule&amp;</name>
            <content>
                <baseType ref="7800"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7801">
            <name>uintRule*</name>
            <content>
                <baseType ref="7800"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9734">
            <name>uintRule*&amp;</name>
            <content>
                <baseType ref="7800"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9733">
            <name>uintRule**</name>
            <content>
                <baseType ref="7800"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.9">
            <name>ulong</name>
        </type>
        <type derived="true" id="type.42">
            <name>ulong&amp;</name>
            <content>
                <baseType ref="type.9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.41">
            <name>ulong*</name>
            <content>
                <baseType ref="type.9"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7812">
            <name>ulongRule</name>
        </type>
        <type derived="true" id="type.7814">
            <name>ulongRule&amp;</name>
            <content>
                <baseType ref="7812"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7813">
            <name>ulongRule*</name>
            <content>
                <baseType ref="7812"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9760">
            <name>ulongRule*&amp;</name>
            <content>
                <baseType ref="7812"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9759">
            <name>ulongRule**</name>
            <content>
                <baseType ref="7812"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="7872">
            <name>urealRule</name>
        </type>
        <type derived="true" id="type.7874">
            <name>urealRule&amp;</name>
            <content>
                <baseType ref="7872"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7873">
            <name>urealRule*</name>
            <content>
                <baseType ref="7872"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9828">
            <name>urealRule*&amp;</name>
            <content>
                <baseType ref="7872"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9827">
            <name>urealRule**</name>
            <content>
                <baseType ref="7872"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.5">
            <name>ushort</name>
        </type>
        <type id="7788">
            <name>ushortRule</name>
        </type>
        <type derived="true" id="type.7790">
            <name>ushortRule&amp;</name>
            <content>
                <baseType ref="7788"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.7789">
            <name>ushortRule*</name>
            <content>
                <baseType ref="7788"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9709">
            <name>ushortRule*&amp;</name>
            <content>
                <baseType ref="7788"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9708">
            <name>ushortRule**</name>
            <content>
                <baseType ref="7788"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.13">
            <name>wchar</name>
        </type>
        <type derived="true" id="type.54">
            <name>wchar&amp;</name>
            <content>
                <baseType ref="type.13"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.53">
            <name>wchar*</name>
            <content>
                <baseType ref="type.13"/>
                <qualifier>*</qualifier>
            </content>
        </type>
    </types>
</library>
