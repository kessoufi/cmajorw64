<library>
    <name>System.Text.RegularExpressions</name>
    <style>../../style/cmdoc.css</style>
    <namespaces>
        <namespace id="System.Text.RegularExpressions">
            <name>System.Text.RegularExpressions</name>
            <classes>
                <class id="class_CharClass_D0839E83F8129D6C4D261748730F5967D1045544">
                    <name>CharClass</name>
                    <groupName>CharClass</groupName>
                    <syntax> public class CharClass;</syntax>
                    <constructors>
                        <constructor id="default_constructor_CharClass_4F299E04B214EFD79E3917A8DD73C5BE8A797ECF">
                            <name>CharClass()</name>
                            <syntax>public nothrow CharClass();</syntax>
                        </constructor>
                        <constructor id="constructor_CharClass_40A4F82B2A48D14DD89DAB0A9DF3B426A88687DE">
                            <name>CharClass(char c)</name>
                            <syntax>public CharClass(char c);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.9329188"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_CharClass_CDA6DB40AADCBF95F6D36C8A19F6D10B6EC19254">
                            <name>CharClass(char first, char last)</name>
                            <syntax>public CharClass(char first, char last);</syntax>
                            <parameters>
                                <parameter>
                                    <name>first</name>
                                    <type ref="type.9329188"/>
                                </parameter>
                                <parameter>
                                    <name>last</name>
                                    <type ref="type.9329188"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_CharClass_25D571BDCAE49D770485EC5CE744557957ACDBE3">
                            <name>CharClass(const String&lt;char>&amp; ranges_, bool inverse_)</name>
                            <syntax>public CharClass(const String&lt;char>&amp; ranges_, bool inverse_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>ranges_</name>
                                    <type ref="type.9330323"/>
                                </parameter>
                                <parameter>
                                    <name>inverse_</name>
                                    <type ref="type.9329177"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Bits_CharClass_9ECE69FD02C8D17B1F4BD73D01C86B19C96E8B05">
                            <name>Bits() const</name>
                            <syntax>public nothrow const Bitset&amp; Bits() const;</syntax>
                            <returnType ref="type.9329515"/>
                        </function>
                        <function id="member_function_Clear_CharClass_1C3772822A7788BD789A7112740E37BBFAE4014E">
                            <name>Clear()</name>
                            <syntax>public nothrow void Clear();</syntax>
                        </function>
                        <function id="member_function_Contains_CharClass_64AE527B23017CB93AA9B53F8662B10B343DD8D7">
                            <name>Contains(char c) const</name>
                            <syntax>public bool Contains(char c) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.9329188"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.9329177"/>
                        </function>
                        <function id="member_function_Inverse_CharClass_4C38FA76EF0074E679704D9509E685B7799B62C8">
                            <name>Inverse() const</name>
                            <syntax>public nothrow bool Inverse() const;</syntax>
                            <returnType ref="type.9329177"/>
                        </function>
                        <function id="member_function_Ranges_CharClass_25D624B4FD8DB9C0A342A5FDF9F50C326A707EEB">
                            <name>Ranges() const</name>
                            <syntax>public String&lt;char> Ranges() const;</syntax>
                            <returnType ref="type.9330318"/>
                        </function>
                    </functions>
                </class>
                <class id="class_Dfa_C0C2BE49FCC3D3B6EA837CF206D1FE18B6C3B39E">
                    <name>Dfa</name>
                    <groupName>Dfa</groupName>
                    <syntax> public class Dfa;</syntax>
                    <constructors>
                        <constructor id="default_constructor_Dfa_07B3929613F3F1D3AC0F17C91AF2DD120D0F925B">
                            <name>Dfa()</name>
                            <syntax>public Dfa();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_AddState_Dfa_26E6A2488835D869B3AB7BDB7C552FA35EEA12DE">
                            <name>AddState(const DfaState&amp; state)</name>
                            <syntax>public void AddState(const DfaState&amp; state);</syntax>
                            <parameters>
                                <parameter>
                                    <name>state</name>
                                    <type ref="type.9348802"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_GetState_Dfa_7254A2BD303B52356723E9DD6869544B191C42B1">
                            <name>GetState(int i) const</name>
                            <syntax>public nothrow inline const DfaState&amp; GetState(int i) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>i</name>
                                    <type ref="type.9329182"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.9348802"/>
                        </function>
                        <function id="member_function_Next_Dfa_EE4D529688DA0296683B932FC977436566DBF5E8">
                            <name>Next(char c, int s)</name>
                            <syntax>public nothrow inline int Next(char c, int s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.9329188"/>
                                </parameter>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.9329182"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.9329182"/>
                        </function>
                        <function id="member_function_NumStates_Dfa_5FA197DF9994622390F95CEFCF924D9B21B22DBC">
                            <name>NumStates() const</name>
                            <syntax>public nothrow inline long NumStates() const;</syntax>
                            <returnType ref="type.9329184"/>
                        </function>
                        <function id="member_function_SetAccepting_Dfa_1AFD4EC4A55DA9F672AB8B7544CB52F4615D9B9A">
                            <name>SetAccepting(int s)</name>
                            <syntax>public void SetAccepting(int s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.9329182"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetNext_Dfa_E8632C356CC711A2319B8F7E3DDAC03C17236C6F">
                            <name>SetNext(char c, int from, int to)</name>
                            <syntax>public nothrow void SetNext(char c, int from, int to);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.9329188"/>
                                </parameter>
                                <parameter>
                                    <name>from</name>
                                    <type ref="type.9329182"/>
                                </parameter>
                                <parameter>
                                    <name>to</name>
                                    <type ref="type.9329182"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_DfaState_9705397F7C4EF22AB411D3A2CD2F07D838F85228">
                    <name>DfaState</name>
                    <groupName>DfaState</groupName>
                    <syntax> public class DfaState;</syntax>
                    <constructors>
                        <constructor id="default_constructor_DfaState_19F186C1F03FBBEB052944628C3262031F52CE64">
                            <name>DfaState()</name>
                            <syntax>public DfaState();</syntax>
                        </constructor>
                        <constructor id="constructor_DfaState_379F9E98A9A3D7F7EEE2163E05F0EC00201C6C20">
                            <name>DfaState(int id_)</name>
                            <syntax>public DfaState(int id_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>id_</name>
                                    <type ref="type.9329182"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accepting_DfaState_A7310D3993BEA18C9F952F6F19A24B69F71F154F">
                            <name>Accepting() const</name>
                            <syntax>public nothrow inline bool Accepting() const;</syntax>
                            <returnType ref="type.9329177"/>
                        </function>
                        <function id="member_function_Id_DfaState_97D5CBFA0C129D3C05DB810D88AB5C541BD314F7">
                            <name>Id() const</name>
                            <syntax>public nothrow inline int Id() const;</syntax>
                            <returnType ref="type.9329182"/>
                        </function>
                        <function id="member_function_Next_DfaState_9FD3599AACDA82803E14C9F11DD78FD3840E9228">
                            <name>Next(char c) const</name>
                            <syntax>public nothrow inline int Next(char c) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.9329188"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.9329182"/>
                        </function>
                        <function id="member_function_SetAccepting_DfaState_225F14C713639CAB7CB363A38B33DC2ADB9AD4A1">
                            <name>SetAccepting()</name>
                            <syntax>public nothrow inline void SetAccepting();</syntax>
                        </function>
                        <function id="member_function_SetNext_DfaState_A1432436EB7B6E49C1D8319587D2482F770CF3EB">
                            <name>SetNext(char c, int n)</name>
                            <syntax>public nothrow inline void SetNext(char c, int n);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.9329188"/>
                                </parameter>
                                <parameter>
                                    <name>n</name>
                                    <type ref="type.9329182"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_Nfa_5E23E7BB511DC9602941611B6CE87476EC3ECB57">
                    <name>Nfa</name>
                    <groupName>Nfa</groupName>
                    <syntax> public class Nfa;</syntax>
                    <constructors>
                        <constructor id="default_constructor_Nfa_C911A047871E46B502D94CE905FACFC250286635">
                            <name>Nfa()</name>
                            <syntax>public Nfa();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_AddState_Nfa_B04784C00A1F38D5975225A1819B2E7F80FC5524">
                            <name>AddState(const NfaState&amp; state)</name>
                            <syntax>public void AddState(const NfaState&amp; state);</syntax>
                            <parameters>
                                <parameter>
                                    <name>state</name>
                                    <type ref="type.9348820"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_GetState_Nfa_69254B598DF5877CA3EEAF6EA75A9E56EB3A641F">
                            <name>GetState(long i) const</name>
                            <syntax>public nothrow inline const NfaState&amp; GetState(long i) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>i</name>
                                    <type ref="type.9329184"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.9348820"/>
                        </function>
                        <function id="member_function_NumStates_Nfa_36BDB4B847FB98481B3F29F51A81C5BA63A4CA53">
                            <name>NumStates() const</name>
                            <syntax>public nothrow inline long NumStates() const;</syntax>
                            <returnType ref="type.9329184"/>
                        </function>
                        <function id="member_function_States_Nfa_02ACF5CE923C7145CB8872B14A9C917888A0A735">
                            <name>States() const</name>
                            <syntax>public nothrow inline const List&lt;System.Text.RegularExpressions.NfaState>&amp; States() const;</syntax>
                            <returnType ref="type.9349561"/>
                        </function>
                    </functions>
                </class>
                <class id="class_NfaState_9D1ED32B9E916097B40ADF566ECF8BF84ACD9662">
                    <name>NfaState</name>
                    <groupName>NfaState</groupName>
                    <syntax> public class NfaState;</syntax>
                    <constructors>
                        <constructor id="default_constructor_NfaState_CC4550AEE21C0EE53951230670CD03A47DA75FD7">
                            <name>NfaState()</name>
                            <syntax>public NfaState();</syntax>
                        </constructor>
                        <constructor id="constructor_NfaState_DC6741ACEDF986BED3E1D9E3E7AB3E6A929F3673">
                            <name>NfaState(int id_)</name>
                            <syntax>public NfaState(int id_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>id_</name>
                                    <type ref="type.9329182"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accepting_NfaState_AF5C02F9685E4F2B2F518875814539C115F74F16">
                            <name>Accepting()</name>
                            <syntax>public nothrow inline bool Accepting();</syntax>
                            <returnType ref="type.9329177"/>
                        </function>
                        <function id="member_function_Epsilon_NfaState_D60F94B16132539AFC860863C4FE7AEF7249B326">
                            <name>Epsilon() const</name>
                            <syntax>public nothrow const NfaStateNumberSet&amp; Epsilon() const;</syntax>
                            <returnType ref="type.9348814"/>
                        </function>
                        <function id="member_function_Id_NfaState_1901DF43AE73062A31B45016F07FF2890C6B2D1E">
                            <name>Id() const</name>
                            <syntax>public nothrow inline int Id() const;</syntax>
                            <returnType ref="type.9329182"/>
                        </function>
                        <function id="member_function_Next_NfaState_F1C182E26DED97995E45DE94E7A7F66CBF61A74E">
                            <name>Next(char c) const</name>
                            <syntax>public nothrow const NfaStateNumberSet&amp; Next(char c) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.9329188"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.9348814"/>
                        </function>
                        <function id="member_function_SetAccepting_NfaState_9F80C6A52F51B0940F68E65869F9F1A0B2D6DB93">
                            <name>SetAccepting()</name>
                            <syntax>public nothrow inline void SetAccepting();</syntax>
                        </function>
                        <function id="member_function_SetNext_NfaState_F96A4564E9D4510790B3FC80476BB34DC2701E05">
                            <name>SetNext(char c, const NfaStateNumberSet&amp; s)</name>
                            <syntax>public void SetNext(char c, const NfaStateNumberSet&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.9329188"/>
                                </parameter>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.9348814"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_NfaStateNumberSet_94283B9E90ECB564FEF4909226A69DC50DFBEAC3">
                    <name>NfaStateNumberSet</name>
                    <groupName>NfaStateNumberSet</groupName>
                    <syntax> public class NfaStateNumberSet;</syntax>
                    <constructors>
                        <constructor id="default_constructor_NfaStateNumberSet_4432F26437CB58C87A8E2FF4A904CFB34A567BCF">
                            <name>NfaStateNumberSet()</name>
                            <syntax>public nothrow NfaStateNumberSet();</syntax>
                        </constructor>
                        <constructor id="constructor_NfaStateNumberSet_520535118410C8EC3A9D6CDC97A44F3A6D1A3C1E">
                            <name>NfaStateNumberSet(int s)</name>
                            <syntax>public NfaStateNumberSet(int s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.9329182"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Add_NfaStateNumberSet_649B6F8C53A15F573E66E01469E390EAEE74ACA5">
                            <name>Add(int stateNumber)</name>
                            <syntax>public void Add(int stateNumber);</syntax>
                            <parameters>
                                <parameter>
                                    <name>stateNumber</name>
                                    <type ref="type.9329182"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_CanonicalContains_NfaStateNumberSet_3E3C070606C453E2D88124FE922BB741DDB90AE0">
                            <name>CanonicalContains(int stateNumber)</name>
                            <syntax>public nothrow bool CanonicalContains(int stateNumber);</syntax>
                            <parameters>
                                <parameter>
                                    <name>stateNumber</name>
                                    <type ref="type.9329182"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.9329177"/>
                        </function>
                        <function id="member_function_Contains_NfaStateNumberSet_918B8C3DDADA5D4B238A2DD02349CE0FE0F1C45F">
                            <name>Contains(int stateNumber)</name>
                            <syntax>public nothrow bool Contains(int stateNumber);</syntax>
                            <parameters>
                                <parameter>
                                    <name>stateNumber</name>
                                    <type ref="type.9329182"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.9329177"/>
                        </function>
                        <function id="member_function_IsEmpty_NfaStateNumberSet_43645D0B37A3928867F888309EB8452A9B1BDBE3">
                            <name>IsEmpty() const</name>
                            <syntax>public nothrow inline bool IsEmpty() const;</syntax>
                            <returnType ref="type.9329177"/>
                        </function>
                        <function id="member_function_MakeCanonical_NfaStateNumberSet_C42068B1DC4BA252151DD3777C00E7BE26039A0A">
                            <name>MakeCanonical()</name>
                            <syntax>public void MakeCanonical();</syntax>
                        </function>
                        <function id="member_function_Merge_NfaStateNumberSet_767CE8DDFEF6A5C7F29141A28ECA2172FC518E9D">
                            <name>Merge(const NfaStateNumberSet&amp; x)</name>
                            <syntax>public void Merge(const NfaStateNumberSet&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.9348814"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Rep_NfaStateNumberSet_291560AD89F4F0E7F7A1887C43F7F01374E29171">
                            <name>Rep() const</name>
                            <syntax>public nothrow const List&lt;int>&amp; Rep() const;</syntax>
                            <returnType ref="type.9349489"/>
                        </function>
                        <function id="member_function_ToString_NfaStateNumberSet_44BA3F2CB44C01913423DABA63C2B2A64E29D293">
                            <name>ToString() const</name>
                            <syntax>public String&lt;char> ToString() const;</syntax>
                            <returnType ref="type.9330318"/>
                        </function>
                    </functions>
                </class>
                <class id="class_PtrNfa_5708C8189DEAC0F8CBD3A9DA5094DE3E7536B5FB">
                    <name>PtrNfa</name>
                    <groupName>PtrNfa</groupName>
                    <syntax> public class PtrNfa;</syntax>
                    <constructors>
                        <constructor id="default_constructor_PtrNfa_71AA850786E0FF72DFAF4F76055420C328B7A1D0">
                            <name>PtrNfa()</name>
                            <syntax>public PtrNfa();</syntax>
                        </constructor>
                        <constructor id="constructor_PtrNfa_DD413467E32CD13263051E678D94CB3A79B3D1FB">
                            <name>PtrNfa(PtrNfaState* start_, PtrNfaState* end_)</name>
                            <syntax>public PtrNfa(PtrNfaState* start_, PtrNfaState* end_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>start_</name>
                                    <type ref="type.9348831"/>
                                </parameter>
                                <parameter>
                                    <name>end_</name>
                                    <type ref="type.9348831"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_AddState_PtrNfa_9ACE919104983EE7EE583D8D5896F65CD3A6924C">
                            <name>AddState(PtrNfaState* state)</name>
                            <syntax>public void AddState(PtrNfaState* state);</syntax>
                            <parameters>
                                <parameter>
                                    <name>state</name>
                                    <type ref="type.9348831"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_End_PtrNfa_9D0D4AEEB95A05FB49398DCDE44EE409822792A6">
                            <name>End() const</name>
                            <syntax>public nothrow inline PtrNfaState* End() const;</syntax>
                            <returnType ref="type.9348831"/>
                        </function>
                        <function id="member_function_NumberStates_PtrNfa_E15BF6BE88238C33876FB91272D03D3745BC472C">
                            <name>NumberStates()</name>
                            <syntax>public nothrow void NumberStates();</syntax>
                        </function>
                        <function id="member_function_SetEnd_PtrNfa_A046A4A4455872E5113117EBF6F958DBC5772A92">
                            <name>SetEnd(PtrNfaState* end_)</name>
                            <syntax>public inline void SetEnd(PtrNfaState* end_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>end_</name>
                                    <type ref="type.9348831"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetStart_PtrNfa_68D8D18EE0BC53CE9761A4F7871A4756CC6CC579">
                            <name>SetStart(PtrNfaState* start_)</name>
                            <syntax>public inline void SetStart(PtrNfaState* start_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>start_</name>
                                    <type ref="type.9348831"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Start_PtrNfa_6B888DEA26A54DC8A3A86CADBB9DFAEA8D6B419C">
                            <name>Start() const</name>
                            <syntax>public nothrow inline PtrNfaState* Start() const;</syntax>
                            <returnType ref="type.9348831"/>
                        </function>
                        <function id="member_function_States_PtrNfa_1C5C73292FB6212598B84B2AFB46BD29214CF42F">
                            <name>States() const</name>
                            <syntax>public nothrow const List&lt;PtrNfaState*>&amp; States() const;</syntax>
                            <returnType ref="type.9349615"/>
                        </function>
                    </functions>
                </class>
                <class id="class_PtrNfaEdge_937C7F61A080B689DF3D122F26A5057032EE2DB3">
                    <name>PtrNfaEdge</name>
                    <groupName>PtrNfaEdge</groupName>
                    <syntax> public class PtrNfaEdge;</syntax>
                    <constructors>
                        <constructor id="default_constructor_PtrNfaEdge_4E5C4C7D81EF9451C225A411124357E80330BB28">
                            <name>PtrNfaEdge()</name>
                            <syntax>public PtrNfaEdge();</syntax>
                        </constructor>
                        <constructor id="constructor_PtrNfaEdge_B54320755C6D76958ED7659B24C92A774C008725">
                            <name>PtrNfaEdge(const CharClass&amp; cls_, PtrNfaState* next_)</name>
                            <syntax>public PtrNfaEdge(const CharClass&amp; cls_, PtrNfaState* next_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>cls_</name>
                                    <type ref="type.9348796"/>
                                </parameter>
                                <parameter>
                                    <name>next_</name>
                                    <type ref="type.9348831"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Chars_PtrNfaEdge_8DAE9F8CCBF632554AE355DD5114A3CE0362730F">
                            <name>Chars() const</name>
                            <syntax>public nothrow inline const CharClass&amp; Chars() const;</syntax>
                            <returnType ref="type.9348796"/>
                        </function>
                        <function id="member_function_Next_PtrNfaEdge_5C5682B5F4FEE0A942759DD67774745F253CEF68">
                            <name>Next() const</name>
                            <syntax>public nothrow inline PtrNfaState* Next() const;</syntax>
                            <returnType ref="type.9348831"/>
                        </function>
                    </functions>
                </class>
                <class id="class_PtrNfaState_828AD9578262913C0B2EE4669E5D88681833D3E8">
                    <name>PtrNfaState</name>
                    <groupName>PtrNfaState</groupName>
                    <syntax> public class PtrNfaState;</syntax>
                    <constructors>
                        <constructor id="default_constructor_PtrNfaState_9DA055AE969B06DAD332DFB9B42ED7E157B2F4DD">
                            <name>PtrNfaState()</name>
                            <syntax>public PtrNfaState();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accepting_PtrNfaState_F855D1DD52E08421C0B4A21B3FC920F5D7745D77">
                            <name>Accepting() const</name>
                            <syntax>public nothrow inline bool Accepting() const;</syntax>
                            <returnType ref="type.9329177"/>
                        </function>
                        <function id="function_group_AddEdge_8A34AC8F152910A6C8F61BD0CF5B8ABE0FF33E68">
                            <name>AddEdge</name>
                            <overloads>
                                <overload id="member_function_AddEdge_PtrNfaState_3A56537C6A7CC3B736C0B5DF95047218F306FFB1">
                                    <name>AddEdge(PtrNfaEdge&amp;&amp; edge)</name>
                                    <syntax>public void AddEdge(PtrNfaEdge&amp;&amp; edge);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>edge</name>
                                            <type ref="type.9349588"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_AddEdge_PtrNfaState_6265A90DB7DBA58239F893A386EAE44FA6DBA8CD">
                                    <name>AddEdge(const PtrNfaEdge&amp; edge)</name>
                                    <syntax>public void AddEdge(const PtrNfaEdge&amp; edge);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>edge</name>
                                            <type ref="type.9348841"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_Clear_PtrNfaState_DC6DB92F580C0A613488896F73C48108A13070DB">
                            <name>Clear()</name>
                            <syntax>public nothrow void Clear();</syntax>
                        </function>
                        <function id="member_function_Edges_PtrNfaState_E20B01CFC9AD97DFCF490D9311EC7B565E359234">
                            <name>Edges() const</name>
                            <syntax>public nothrow inline const List&lt;System.Text.RegularExpressions.PtrNfaEdge>&amp; Edges() const;</syntax>
                            <returnType ref="type.9349594"/>
                        </function>
                        <function id="member_function_Id_PtrNfaState_68DE82FBD7784855DE6267B33EF7B2B6698A5384">
                            <name>Id() const</name>
                            <syntax>public nothrow inline int Id() const;</syntax>
                            <returnType ref="type.9329182"/>
                        </function>
                        <function id="member_function_Next_PtrNfaState_A090132D956B94CE56194DD7713206B8BA785B0A">
                            <name>Next(char c)</name>
                            <syntax>public List&lt;PtrNfaState*> Next(char c);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.9329188"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.9349610"/>
                        </function>
                        <function id="member_function_ResetAccepting_PtrNfaState_69E6A386FFB55E0B5498D7A8328B7B3D5167EF11">
                            <name>ResetAccepting()</name>
                            <syntax>public nothrow inline void ResetAccepting();</syntax>
                        </function>
                        <function id="member_function_SetAccepting_PtrNfaState_218FCA739C8EE65F4D88C8C0466F2EF6F78CE13D">
                            <name>SetAccepting()</name>
                            <syntax>public nothrow inline void SetAccepting();</syntax>
                        </function>
                        <function id="member_function_SetEdges_PtrNfaState_A96C1C104A95EB2D6C269685FF385287FA62D1BC">
                            <name>SetEdges(const List&lt;System.Text.RegularExpressions.PtrNfaEdge>&amp; edges_)</name>
                            <syntax>public void SetEdges(const List&lt;System.Text.RegularExpressions.PtrNfaEdge>&amp; edges_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>edges_</name>
                                    <type ref="type.9349594"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetId_PtrNfaState_532A57EB866393C4A1FC2910F7038BEE855DCA7D">
                            <name>SetId(int id_)</name>
                            <syntax>public nothrow inline void SetId(int id_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>id_</name>
                                    <type ref="type.9329182"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_PtrNfaStateFactory_22C97F4BF85DB777D68618DE9DD3C7D2D3FFB5E2">
                    <name>PtrNfaStateFactory</name>
                    <groupName>PtrNfaStateFactory</groupName>
                    <syntax> public class PtrNfaStateFactory;</syntax>
                    <functions>
                        <function id="member_function_Clear_PtrNfaStateFactory_B512A7C5924FC729EA3A04EDBAFBD22884889F6F">
                            <name>Clear()</name>
                            <syntax>public void Clear();</syntax>
                        </function>
                        <function id="member_function_FreeState_PtrNfaStateFactory_75536BA04D6F342070BCFDC70C600BF039030D9E">
                            <name>FreeState(PtrNfaState* state)</name>
                            <syntax>public void FreeState(PtrNfaState* state);</syntax>
                            <parameters>
                                <parameter>
                                    <name>state</name>
                                    <type ref="type.9348831"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_MakeState_PtrNfaStateFactory_29EB7C55E503DE112D5A16E05EBF1AA6F69D89A2">
                            <name>MakeState()</name>
                            <syntax>public PtrNfaState* MakeState();</syntax>
                            <returnType ref="type.9348831"/>
                        </function>
                    </functions>
                    <staticMemberFunctions>
                        <function id="member_function_Instance_PtrNfaStateFactory_FABCA8014FD1A3C260209F93CE0A1FC56DE53015">
                            <name>Instance()</name>
                            <syntax>public static PtrNfaStateFactory&amp; Instance();</syntax>
                            <returnType ref="type.9348844"/>
                        </function>
                    </staticMemberFunctions>
                </class>
                <class id="class_RegEx_FF045A8DB810B11A7E1838764E80BDB32C6C837F">
                    <name>RegEx</name>
                    <groupName>RegEx</groupName>
                    <syntax> public class RegEx;</syntax>
                    <constructors>
                        <constructor id="constructor_RegEx_048A5AC6F13DA9ED011823E2E2E8820225A196C8">
                            <name>RegEx(const String&lt;char>&amp; pattern_)</name>
                            <syntax>public RegEx(const String&lt;char>&amp; pattern_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>pattern_</name>
                                    <type ref="type.9330323"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_RegEx_80C0AB8F118532186C3778D5E11AA9A69CD4EC01">
                            <name>RegEx(const String&lt;char>&amp; pattern_, RegExFlags flags)</name>
                            <syntax>public RegEx(const String&lt;char>&amp; pattern_, RegExFlags flags);</syntax>
                            <parameters>
                                <parameter>
                                    <name>pattern_</name>
                                    <type ref="type.9330323"/>
                                </parameter>
                                <parameter>
                                    <name>flags</name>
                                    <type ref="enumerated_type_RegExFlags_B475C391A47B78CB03D5C030D0683E9138EAB603"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Compiled_RegEx_661D620F09E6D141272FCABE143FE78A56C662EB">
                            <name>Compiled() const</name>
                            <syntax>public nothrow inline bool Compiled() const;</syntax>
                            <returnType ref="type.9329177"/>
                        </function>
                        <function id="member_function_GetDfa_RegEx_4827339014C71AE442EEFCFED46D894EC77EA45E">
                            <name>GetDfa() const</name>
                            <syntax>public nothrow inline const Dfa&amp; GetDfa() const;</syntax>
                            <returnType ref="type.9348808"/>
                        </function>
                        <function id="member_function_GetNfa_RegEx_421BE8C85790708F9013444D8E7847B4887CAE76">
                            <name>GetNfa() const</name>
                            <syntax>public nothrow inline const Nfa&amp; GetNfa() const;</syntax>
                            <returnType ref="type.9348826"/>
                        </function>
                        <function id="member_function_Matches_RegEx_59E97BBCEE02267BB93B3A7BDB2A90148DB9D40A">
                            <name>Matches(const String&lt;char>&amp; s)</name>
                            <syntax>public bool Matches(const String&lt;char>&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.9330323"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.9329177"/>
                        </function>
                        <function id="member_function_Pattern_RegEx_911BFB722C9A92651F1B3118FE55413E92546ADE">
                            <name>Pattern() const</name>
                            <syntax>public nothrow inline const String&lt;char>&amp; Pattern() const;</syntax>
                            <returnType ref="type.9330323"/>
                        </function>
                    </functions>
                </class>
                <class id="class_RegExParser_5B375E7989875C02273BF50888FB982C1735A8DC">
                    <name>RegExParser</name>
                    <groupName>RegExParser</groupName>
                    <syntax> public class RegExParser;</syntax>
                    <constructors>
                        <constructor id="default_constructor_RegExParser_8140C92D742EBE123151F6886D3472F9C11B1590">
                            <name>RegExParser()</name>
                            <syntax>public RegExParser();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Parse_RegExParser_01A06ACE0DC9C2175030CADE47EE763C8A0FA90A">
                            <name>Parse(const String&lt;char>&amp; regEx)</name>
                            <syntax>public PtrNfa Parse(const String&lt;char>&amp; regEx);</syntax>
                            <parameters>
                                <parameter>
                                    <name>regEx</name>
                                    <type ref="type.9330323"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_PtrNfa_5708C8189DEAC0F8CBD3A9DA5094DE3E7536B5FB"/>
                        </function>
                    </functions>
                    <staticMemberFunctions>
                        <function id="member_function_Instance_RegExParser_C24BF2834AEC9A218B0ED4D75F0828032116DA00">
                            <name>Instance()</name>
                            <syntax>public static RegExParser&amp; Instance();</syntax>
                            <returnType ref="type.9348829"/>
                        </function>
                    </staticMemberFunctions>
                </class>
                <class id="class_RegularExpressionGrammar_A84552940D28A3C040AE4E8AD6CF59AF13007B22">
                    <name>RegularExpressionGrammar</name>
                    <groupName>RegularExpressionGrammar</groupName>
                    <syntax> public class RegularExpressionGrammar;</syntax>
                    <baseClass ref="class_Grammar_2180D00808E7A786B21C35D11B36E77EC171A6C6"/>
                    <constructors>
                        <constructor id="default_constructor_RegularExpressionGrammar_F36ED07549A921E3839F0FE4EA4B1CF8C4F60484">
                            <name>RegularExpressionGrammar()</name>
                            <syntax>public RegularExpressionGrammar();</syntax>
                        </constructor>
                        <constructor id="constructor_RegularExpressionGrammar_6501A1B591C14B01B647F1F8B4D00B4731CD2A62">
                            <name>RegularExpressionGrammar(ParsingDomain* parsingDomain)</name>
                            <syntax>public RegularExpressionGrammar(ParsingDomain* parsingDomain);</syntax>
                            <parameters>
                                <parameter>
                                    <name>parsingDomain</name>
                                    <type ref="type.9337419"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_CreateRules_RegularExpressionGrammar_7A43A6B5AD3D3A39A6F71E515C7540C3389ED011">
                            <name>CreateRules()</name>
                            <syntax>public override void CreateRules();</syntax>
                        </function>
                        <function id="member_function_GetReferencedGrammars_RegularExpressionGrammar_2732FBB540D81C3CDDBE8F73366811FAA272766C">
                            <name>GetReferencedGrammars()</name>
                            <syntax>public override void GetReferencedGrammars();</syntax>
                        </function>
                        <function id="member_function_Parse_RegularExpressionGrammar_E529B0C217B5C1B88AEA848FB7B7A364CC28B2FF">
                            <name>Parse(const uchar* start, const uchar* end, int fileIndex, const String&lt;char>&amp; fileName)</name>
                            <syntax>public PtrNfa Parse(const uchar* start, const uchar* end, int fileIndex, const String&lt;char>&amp; fileName);</syntax>
                            <parameters>
                                <parameter>
                                    <name>start</name>
                                    <type ref="type.9330413"/>
                                </parameter>
                                <parameter>
                                    <name>end</name>
                                    <type ref="type.9330413"/>
                                </parameter>
                                <parameter>
                                    <name>fileIndex</name>
                                    <type ref="type.9329182"/>
                                </parameter>
                                <parameter>
                                    <name>fileName</name>
                                    <type ref="type.9330323"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_PtrNfa_5708C8189DEAC0F8CBD3A9DA5094DE3E7536B5FB"/>
                        </function>
                    </functions>
                </class>
            </classes>
            <functions>
                <function id="function_AddState_07F1E4FBD352758B79D1E725CC8F92F1D86E6A5F">
                    <name>AddState(int s, List&lt;int>&amp; newStates, Bitset&amp; alreadyOn, const Nfa&amp; nfa)</name>
                    <syntax>public void AddState(int s, List&lt;int>&amp; newStates, Bitset&amp; alreadyOn, const Nfa&amp; nfa);</syntax>
                    <parameters>
                        <parameter>
                            <name>s</name>
                            <type ref="type.9329182"/>
                        </parameter>
                        <parameter>
                            <name>newStates</name>
                            <type ref="type.9349486"/>
                        </parameter>
                        <parameter>
                            <name>alreadyOn</name>
                            <type ref="type.9329512"/>
                        </parameter>
                        <parameter>
                            <name>nfa</name>
                            <type ref="type.9348826"/>
                        </parameter>
                    </parameters>
                </function>
                <function id="function_Alt_D5524DBAD9A12AD8D723443912874B636A784F1E">
                    <name>Alt(const PtrNfa&amp; left, const PtrNfa&amp; right)</name>
                    <syntax>public PtrNfa Alt(const PtrNfa&amp; left, const PtrNfa&amp; right);</syntax>
                    <parameters>
                        <parameter>
                            <name>left</name>
                            <type ref="type.9348850"/>
                        </parameter>
                        <parameter>
                            <name>right</name>
                            <type ref="type.9348850"/>
                        </parameter>
                    </parameters>
                    <returnType ref="class_PtrNfa_5708C8189DEAC0F8CBD3A9DA5094DE3E7536B5FB"/>
                </function>
                <function id="function_Cat_0465226282EC3ABACE56D89A451378945115C788">
                    <name>Cat(const PtrNfa&amp; left, const PtrNfa&amp; right)</name>
                    <syntax>public PtrNfa Cat(const PtrNfa&amp; left, const PtrNfa&amp; right);</syntax>
                    <parameters>
                        <parameter>
                            <name>left</name>
                            <type ref="type.9348850"/>
                        </parameter>
                        <parameter>
                            <name>right</name>
                            <type ref="type.9348850"/>
                        </parameter>
                    </parameters>
                    <returnType ref="class_PtrNfa_5708C8189DEAC0F8CBD3A9DA5094DE3E7536B5FB"/>
                </function>
                <function id="function_group_EpsilonClosure_4289D97C873E7B7EB7A7CC0946FBC68D1515C917">
                    <name>EpsilonClosure</name>
                    <overloads>
                        <overload id="function_EpsilonClosure_2920F52FDF4A51BCA9D33B76B0D92C2E57BE1BFC">
                            <name>EpsilonClosure(const NfaStateNumberSet&amp; states, const Nfa&amp; nfa)</name>
                            <syntax>public NfaStateNumberSet EpsilonClosure(const NfaStateNumberSet&amp; states, const Nfa&amp; nfa);</syntax>
                            <parameters>
                                <parameter>
                                    <name>states</name>
                                    <type ref="type.9348814"/>
                                </parameter>
                                <parameter>
                                    <name>nfa</name>
                                    <type ref="type.9348826"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_NfaStateNumberSet_94283B9E90ECB564FEF4909226A69DC50DFBEAC3"/>
                        </overload>
                        <overload id="function_EpsilonClosure_C70736F90888A8A25B5030EDD28F95D54AC08E4A">
                            <name>EpsilonClosure(int s, const Nfa&amp; nfa)</name>
                            <syntax>public NfaStateNumberSet EpsilonClosure(int s, const Nfa&amp; nfa);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.9329182"/>
                                </parameter>
                                <parameter>
                                    <name>nfa</name>
                                    <type ref="type.9348826"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_NfaStateNumberSet_94283B9E90ECB564FEF4909226A69DC50DFBEAC3"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_FindState_6835210F08F0DAAF90AD37AC594DFE0DCA732DDF">
                    <name>FindState(RandomAccessIter&lt;System.Text.RegularExpressions.NfaStateNumberSet, const NfaStateNumberSet&amp;, const NfaStateNumberSet*> begin, RandomAccessIter&lt;System.Text.RegularExpressions.NfaStateNumberSet, const NfaStateNumberSet&amp;, const NfaStateNumberSet*> end, const NfaStateNumberSet&amp; s)</name>
                    <syntax>public int FindState(RandomAccessIter&lt;System.Text.RegularExpressions.NfaStateNumberSet, const NfaStateNumberSet&amp;, const NfaStateNumberSet*> begin, RandomAccessIter&lt;System.Text.RegularExpressions.NfaStateNumberSet, const NfaStateNumberSet&amp;, const NfaStateNumberSet*> end, const NfaStateNumberSet&amp; s);</syntax>
                    <parameters>
                        <parameter>
                            <name>begin</name>
                            <type ref="type.9349513"/>
                        </parameter>
                        <parameter>
                            <name>end</name>
                            <type ref="type.9349513"/>
                        </parameter>
                        <parameter>
                            <name>s</name>
                            <type ref="type.9348814"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.9329182"/>
                </function>
                <function id="function_Kleene_7713A26D1A3F54B2092A897249CB5E39E3F1B53F">
                    <name>Kleene(const PtrNfa&amp; subject)</name>
                    <syntax>public PtrNfa Kleene(const PtrNfa&amp; subject);</syntax>
                    <parameters>
                        <parameter>
                            <name>subject</name>
                            <type ref="type.9348850"/>
                        </parameter>
                    </parameters>
                    <returnType ref="class_PtrNfa_5708C8189DEAC0F8CBD3A9DA5094DE3E7536B5FB"/>
                </function>
                <function id="function_group_MakeNfa_8132CF2AF0EA5C0C6000822983BC1360BCCFD706">
                    <name>MakeNfa</name>
                    <overloads>
                        <overload id="function_MakeNfa_D79E15BE6BCAEB816164DD385F247B8F62B07957">
                            <name>MakeNfa(char c)</name>
                            <syntax>public PtrNfa MakeNfa(char c);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.9329188"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_PtrNfa_5708C8189DEAC0F8CBD3A9DA5094DE3E7536B5FB"/>
                        </overload>
                        <overload id="function_MakeNfa_E488F2099F06822C021374D0EC23DD5E16D26A23">
                            <name>MakeNfa(const CharClass&amp; cls)</name>
                            <syntax>public PtrNfa MakeNfa(const CharClass&amp; cls);</syntax>
                            <parameters>
                                <parameter>
                                    <name>cls</name>
                                    <type ref="type.9348796"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_PtrNfa_5708C8189DEAC0F8CBD3A9DA5094DE3E7536B5FB"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_Matches_8BAA67F5DC1921A919ED85B64CE0602EBC481F40">
                    <name>Matches</name>
                    <overloads>
                        <overload id="function_Matches_5ACF03A6FF47E999410B0148CF76C540DE97D0A8">
                            <name>Matches(const String&lt;char>&amp; s, const Dfa&amp; dfa)</name>
                            <syntax>public nothrow bool Matches(const String&lt;char>&amp; s, const Dfa&amp; dfa);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.9330323"/>
                                </parameter>
                                <parameter>
                                    <name>dfa</name>
                                    <type ref="type.9348808"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.9329177"/>
                        </overload>
                        <overload id="function_Matches_CABA9735ED4A5D89DEE37FCE1F80C710F4AA7501">
                            <name>Matches(const String&lt;char>&amp; s, const Nfa&amp; nfa)</name>
                            <syntax>public bool Matches(const String&lt;char>&amp; s, const Nfa&amp; nfa);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.9330323"/>
                                </parameter>
                                <parameter>
                                    <name>nfa</name>
                                    <type ref="type.9348826"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.9329177"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_MatchesSlow_3283EC27B79209142A1A6F427314AD173B4B526F">
                    <name>MatchesSlow(const String&lt;char>&amp; s, const Nfa&amp; nfa)</name>
                    <syntax>public bool MatchesSlow(const String&lt;char>&amp; s, const Nfa&amp; nfa);</syntax>
                    <parameters>
                        <parameter>
                            <name>s</name>
                            <type ref="type.9330323"/>
                        </parameter>
                        <parameter>
                            <name>nfa</name>
                            <type ref="type.9348826"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.9329177"/>
                </function>
                <function id="function_Move_0EEDAF3B7AAF3C35467317B8AD4D7F35D2412BF0">
                    <name>Move(const NfaStateNumberSet&amp; states, char c, const Nfa&amp; nfa)</name>
                    <syntax>public NfaStateNumberSet Move(const NfaStateNumberSet&amp; states, char c, const Nfa&amp; nfa);</syntax>
                    <parameters>
                        <parameter>
                            <name>states</name>
                            <type ref="type.9348814"/>
                        </parameter>
                        <parameter>
                            <name>c</name>
                            <type ref="type.9329188"/>
                        </parameter>
                        <parameter>
                            <name>nfa</name>
                            <type ref="type.9348826"/>
                        </parameter>
                    </parameters>
                    <returnType ref="class_NfaStateNumberSet_94283B9E90ECB564FEF4909226A69DC50DFBEAC3"/>
                </function>
                <function id="function_Optional_A91AD05335DB0478FB38E926766295BAF36AED04">
                    <name>Optional(const PtrNfa&amp; subject)</name>
                    <syntax>public PtrNfa Optional(const PtrNfa&amp; subject);</syntax>
                    <parameters>
                        <parameter>
                            <name>subject</name>
                            <type ref="type.9348850"/>
                        </parameter>
                    </parameters>
                    <returnType ref="class_PtrNfa_5708C8189DEAC0F8CBD3A9DA5094DE3E7536B5FB"/>
                </function>
                <function id="function_ParseRegEx_E19FFA4F71A38771F5578C338314BD5F8F10D655">
                    <name>ParseRegEx(const String&lt;char>&amp; pattern, RegExFlags flags)</name>
                    <syntax>public PtrNfa ParseRegEx(const String&lt;char>&amp; pattern, RegExFlags flags);</syntax>
                    <parameters>
                        <parameter>
                            <name>pattern</name>
                            <type ref="type.9330323"/>
                        </parameter>
                        <parameter>
                            <name>flags</name>
                            <type ref="enumerated_type_RegExFlags_B475C391A47B78CB03D5C030D0683E9138EAB603"/>
                        </parameter>
                    </parameters>
                    <returnType ref="class_PtrNfa_5708C8189DEAC0F8CBD3A9DA5094DE3E7536B5FB"/>
                </function>
                <function id="function_Positive_EE60205EB0EC73B6B0BE6BCE863DD0D934FC17AA">
                    <name>Positive(const PtrNfa&amp; subject)</name>
                    <syntax>public PtrNfa Positive(const PtrNfa&amp; subject);</syntax>
                    <parameters>
                        <parameter>
                            <name>subject</name>
                            <type ref="type.9348850"/>
                        </parameter>
                    </parameters>
                    <returnType ref="class_PtrNfa_5708C8189DEAC0F8CBD3A9DA5094DE3E7536B5FB"/>
                </function>
                <function id="function_ToDfa_3C137DA5A679038BEAFCE6E395241C01126DC1A7">
                    <name>ToDfa(const Nfa&amp; nfa)</name>
                    <syntax>public Dfa ToDfa(const Nfa&amp; nfa);</syntax>
                    <parameters>
                        <parameter>
                            <name>nfa</name>
                            <type ref="type.9348826"/>
                        </parameter>
                    </parameters>
                    <returnType ref="class_Dfa_C0C2BE49FCC3D3B6EA837CF206D1FE18B6C3B39E"/>
                </function>
                <function id="function_group_ToNfa_4A30E6BE6D6A4FCB836B6EEDC9EC474A8A6A1B20">
                    <name>ToNfa</name>
                    <overloads>
                        <overload id="function_ToNfa_47B4C0C904524DB43CFF1A2180CBA8B70F84CA00">
                            <name>ToNfa(const PtrNfa&amp; ptrNfa)</name>
                            <syntax>public Nfa ToNfa(const PtrNfa&amp; ptrNfa);</syntax>
                            <parameters>
                                <parameter>
                                    <name>ptrNfa</name>
                                    <type ref="type.9348850"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_Nfa_5E23E7BB511DC9602941611B6CE87476EC3ECB57"/>
                        </overload>
                        <overload id="function_ToNfa_E93F77CDE077C3E57B1556A7A48371CBB10CD64D">
                            <name>ToNfa(const String&lt;char>&amp; pattern, RegExFlags flags)</name>
                            <syntax>public Nfa ToNfa(const String&lt;char>&amp; pattern, RegExFlags flags);</syntax>
                            <parameters>
                                <parameter>
                                    <name>pattern</name>
                                    <type ref="type.9330323"/>
                                </parameter>
                                <parameter>
                                    <name>flags</name>
                                    <type ref="enumerated_type_RegExFlags_B475C391A47B78CB03D5C030D0683E9138EAB603"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_Nfa_5E23E7BB511DC9602941611B6CE87476EC3ECB57"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_ToRanges_3BECBF25B0A0C3200B2FC864696D656B87058250">
                    <name>ToRanges(Class cls)</name>
                    <syntax>public String&lt;char> ToRanges(Class cls);</syntax>
                    <parameters>
                        <parameter>
                            <name>cls</name>
                            <type ref="enumerated_type_Class_0382CE410BDE6580EFF2954226E6159339AA54CB"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.9330318"/>
                </function>
                <function id="function_Transform_A221E9D046B37DA540984D0A629132630378DA3C">
                    <name>Transform(char c, List&lt;int>&amp; oldStates, List&lt;int>&amp; newStates, Bitset&amp; alreadyOn, const Nfa&amp; nfa)</name>
                    <syntax>public void Transform(char c, List&lt;int>&amp; oldStates, List&lt;int>&amp; newStates, Bitset&amp; alreadyOn, const Nfa&amp; nfa);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.9329188"/>
                        </parameter>
                        <parameter>
                            <name>oldStates</name>
                            <type ref="type.9349486"/>
                        </parameter>
                        <parameter>
                            <name>newStates</name>
                            <type ref="type.9349486"/>
                        </parameter>
                        <parameter>
                            <name>alreadyOn</name>
                            <type ref="type.9329512"/>
                        </parameter>
                        <parameter>
                            <name>nfa</name>
                            <type ref="type.9348826"/>
                        </parameter>
                    </parameters>
                </function>
                <function id="function_group_op_shl_637EF27F8E355AF9344F2DA639A81DA4E5ACB541">
                    <name>operator&lt;&lt;</name>
                    <overloads>
                        <overload id="function_op_shl_C1DEC1FF29229F2C2E24F7685ADF587A765B5947">
                            <name>operator&lt;&lt;(OutputStream&amp; s, const CharClass&amp; cls)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, const CharClass&amp; cls);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.9329994"/>
                                </parameter>
                                <parameter>
                                    <name>cls</name>
                                    <type ref="type.9348796"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.9329994"/>
                        </overload>
                        <overload id="function_op_shl_529DAA6DAA82E134670BD473AD7269E2F37C94BA">
                            <name>operator&lt;&lt;(OutputStream&amp; s, const Dfa&amp; dfa)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, const Dfa&amp; dfa);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.9329994"/>
                                </parameter>
                                <parameter>
                                    <name>dfa</name>
                                    <type ref="type.9348808"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.9329994"/>
                        </overload>
                        <overload id="function_op_shl_6FC8187D8A10228A2B234648D5813A2989EE986F">
                            <name>operator&lt;&lt;(OutputStream&amp; s, const DfaState&amp; state)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, const DfaState&amp; state);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.9329994"/>
                                </parameter>
                                <parameter>
                                    <name>state</name>
                                    <type ref="type.9348802"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.9329994"/>
                        </overload>
                        <overload id="function_op_shl_4E5CAC0C1959738EA9F3D41EA8C384D0F55BEB02">
                            <name>operator&lt;&lt;(OutputStream&amp; s, const Nfa&amp; nfa)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, const Nfa&amp; nfa);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.9329994"/>
                                </parameter>
                                <parameter>
                                    <name>nfa</name>
                                    <type ref="type.9348826"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.9329994"/>
                        </overload>
                        <overload id="function_op_shl_F6A1C2C0E02B025CF998B4AF949CC63F52E49A24">
                            <name>operator&lt;&lt;(OutputStream&amp; s, const NfaState&amp; state)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, const NfaState&amp; state);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.9329994"/>
                                </parameter>
                                <parameter>
                                    <name>state</name>
                                    <type ref="type.9348820"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.9329994"/>
                        </overload>
                        <overload id="function_op_shl_4708DEEF88C9580BCAB388C3AE502A8B4382BEC5">
                            <name>operator&lt;&lt;(OutputStream&amp; s, const NfaStateNumberSet&amp; ns)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, const NfaStateNumberSet&amp; ns);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.9329994"/>
                                </parameter>
                                <parameter>
                                    <name>ns</name>
                                    <type ref="type.9348814"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.9329994"/>
                        </overload>
                        <overload id="function_op_shl_0C23222D819AC864A37182196D3EA36958DF633C">
                            <name>operator&lt;&lt;(OutputStream&amp; s, const PtrNfa&amp; nfa)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, const PtrNfa&amp; nfa);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.9329994"/>
                                </parameter>
                                <parameter>
                                    <name>nfa</name>
                                    <type ref="type.9348850"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.9329994"/>
                        </overload>
                        <overload id="function_op_shl_51AABFDB519D7C04C6F3C75CAAB1ABDC5313E49F">
                            <name>operator&lt;&lt;(OutputStream&amp; s, const PtrNfaEdge&amp; edge)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, const PtrNfaEdge&amp; edge);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.9329994"/>
                                </parameter>
                                <parameter>
                                    <name>edge</name>
                                    <type ref="type.9348841"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.9329994"/>
                        </overload>
                        <overload id="function_op_shl_B16D0D64750AB09DA2A841C2F3AB1EDCF83E05A6">
                            <name>operator&lt;&lt;(StreamWriter&amp; s, const CharClass&amp; cls)</name>
                            <syntax>public StreamWriter&amp; operator&lt;&lt;(StreamWriter&amp; s, const CharClass&amp; cls);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.9330006"/>
                                </parameter>
                                <parameter>
                                    <name>cls</name>
                                    <type ref="type.9348796"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.9330006"/>
                        </overload>
                        <overload id="function_op_shl_39E6DB77B3726EE382A4928DE8B747FCE82D55C9">
                            <name>operator&lt;&lt;(StreamWriter&amp; s, const Dfa&amp; dfa)</name>
                            <syntax>public StreamWriter&amp; operator&lt;&lt;(StreamWriter&amp; s, const Dfa&amp; dfa);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.9330006"/>
                                </parameter>
                                <parameter>
                                    <name>dfa</name>
                                    <type ref="type.9348808"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.9330006"/>
                        </overload>
                        <overload id="function_op_shl_DDC9181576324064116CCA12EA81F494F4FD7671">
                            <name>operator&lt;&lt;(StreamWriter&amp; s, const DfaState&amp; state)</name>
                            <syntax>public StreamWriter&amp; operator&lt;&lt;(StreamWriter&amp; s, const DfaState&amp; state);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.9330006"/>
                                </parameter>
                                <parameter>
                                    <name>state</name>
                                    <type ref="type.9348802"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.9330006"/>
                        </overload>
                        <overload id="function_op_shl_32B788139992A46133E1128EA68FE9705068391B">
                            <name>operator&lt;&lt;(StreamWriter&amp; s, const Nfa&amp; nfa)</name>
                            <syntax>public StreamWriter&amp; operator&lt;&lt;(StreamWriter&amp; s, const Nfa&amp; nfa);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.9330006"/>
                                </parameter>
                                <parameter>
                                    <name>nfa</name>
                                    <type ref="type.9348826"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.9330006"/>
                        </overload>
                        <overload id="function_op_shl_6485B9489611903D001C978ACF890102A19BB472">
                            <name>operator&lt;&lt;(StreamWriter&amp; s, const NfaState&amp; state)</name>
                            <syntax>public StreamWriter&amp; operator&lt;&lt;(StreamWriter&amp; s, const NfaState&amp; state);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.9330006"/>
                                </parameter>
                                <parameter>
                                    <name>state</name>
                                    <type ref="type.9348820"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.9330006"/>
                        </overload>
                        <overload id="function_op_shl_825C28946705E8199F546560B5918AF74B4DCA0D">
                            <name>operator&lt;&lt;(StreamWriter&amp; s, const PtrNfa&amp; nfa)</name>
                            <syntax>public StreamWriter&amp; operator&lt;&lt;(StreamWriter&amp; s, const PtrNfa&amp; nfa);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.9330006"/>
                                </parameter>
                                <parameter>
                                    <name>nfa</name>
                                    <type ref="type.9348850"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.9330006"/>
                        </overload>
                        <overload id="function_op_shl_6F9AF13E509A9C210D030CEDBC6B253DC6568410">
                            <name>operator&lt;&lt;(StreamWriter&amp; s, const PtrNfaEdge&amp; edge)</name>
                            <syntax>public StreamWriter&amp; operator&lt;&lt;(StreamWriter&amp; s, const PtrNfaEdge&amp; edge);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.9330006"/>
                                </parameter>
                                <parameter>
                                    <name>edge</name>
                                    <type ref="type.9348841"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.9330006"/>
                        </overload>
                        <overload id="function_op_shl_1FAFC8A002E684C1701F2045817D6A3F812784C0">
                            <name>operator&lt;&lt;(StreamWriter&amp; writer, const NfaStateNumberSet&amp; ns)</name>
                            <syntax>public StreamWriter&amp; operator&lt;&lt;(StreamWriter&amp; writer, const NfaStateNumberSet&amp; ns);</syntax>
                            <parameters>
                                <parameter>
                                    <name>writer</name>
                                    <type ref="type.9330006"/>
                                </parameter>
                                <parameter>
                                    <name>ns</name>
                                    <type ref="type.9348814"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.9330006"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_op_eq_1225FBF89BDAF45ABAD92A7A839964C8025299FA">
                    <name>operator==</name>
                    <overloads>
                        <overload id="function_op_eq_8E43A7A9E8B02E781EBFC6C1D2DD2D8024FA6835">
                            <name>operator==(Class left, Class right)</name>
                            <syntax>public bool operator==(Class left, Class right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="enumerated_type_Class_0382CE410BDE6580EFF2954226E6159339AA54CB"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="enumerated_type_Class_0382CE410BDE6580EFF2954226E6159339AA54CB"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.9329177"/>
                        </overload>
                        <overload id="function_op_eq_1657CC5F4F56C5764772DB14D167206EA3E61EA5">
                            <name>operator==(RegExFlags left, RegExFlags right)</name>
                            <syntax>public bool operator==(RegExFlags left, RegExFlags right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="enumerated_type_RegExFlags_B475C391A47B78CB03D5C030D0683E9138EAB603"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="enumerated_type_RegExFlags_B475C391A47B78CB03D5C030D0683E9138EAB603"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.9329177"/>
                        </overload>
                        <overload id="function_op_eq_E167B657AE9463D25B3B65B5090C498284BDC388">
                            <name>operator==(const NfaStateNumberSet&amp; left, const NfaStateNumberSet&amp; right)</name>
                            <syntax>public nothrow bool operator==(const NfaStateNumberSet&amp; left, const NfaStateNumberSet&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.9348814"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.9348814"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.9329177"/>
                        </overload>
                    </overloads>
                </function>
            </functions>
            <constants>
                <constant id="constant_eps_F7D3432B47D7ADDBD0C715A5872E89F738895881">
                    <name>eps</name>
                    <syntax>public const char eps = 0;</syntax>
                    <type ref="type.9329188"/>
                    <value>0</value>
                </constant>
            </constants>
            <enumerations>
                <enumeration id="enumerated_type_Class_0382CE410BDE6580EFF2954226E6159339AA54CB">
                    <name>Class</name>
                    <syntax>public enum Class;</syntax>
                    <underlyingType ref="type.9329182"/>
                    <enumConstant>
                        <name>alnum</name>
                        <value>0</value>
                    </enumConstant>
                    <enumConstant>
                        <name>alpha</name>
                        <value>1</value>
                    </enumConstant>
                    <enumConstant>
                        <name>blank</name>
                        <value>2</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cntrl</name>
                        <value>3</value>
                    </enumConstant>
                    <enumConstant>
                        <name>digit</name>
                        <value>4</value>
                    </enumConstant>
                    <enumConstant>
                        <name>graph</name>
                        <value>5</value>
                    </enumConstant>
                    <enumConstant>
                        <name>lower</name>
                        <value>6</value>
                    </enumConstant>
                    <enumConstant>
                        <name>print</name>
                        <value>7</value>
                    </enumConstant>
                    <enumConstant>
                        <name>punct</name>
                        <value>8</value>
                    </enumConstant>
                    <enumConstant>
                        <name>space</name>
                        <value>9</value>
                    </enumConstant>
                    <enumConstant>
                        <name>upper</name>
                        <value>10</value>
                    </enumConstant>
                    <enumConstant>
                        <name>word</name>
                        <value>11</value>
                    </enumConstant>
                    <enumConstant>
                        <name>xdigit</name>
                        <value>12</value>
                    </enumConstant>
                </enumeration>
                <enumeration id="enumerated_type_RegExFlags_B475C391A47B78CB03D5C030D0683E9138EAB603">
                    <name>RegExFlags</name>
                    <syntax>public enum RegExFlags;</syntax>
                    <underlyingType ref="type.9329182"/>
                    <enumConstant>
                        <name>none</name>
                        <value>0</value>
                    </enumConstant>
                    <enumConstant>
                        <name>compiled</name>
                        <value>1</value>
                    </enumConstant>
                    <enumConstant>
                        <name>matchLine</name>
                        <value>2</value>
                    </enumConstant>
                </enumeration>
            </enumerations>
        </namespace>
    </namespaces>
    <types>
        <type derived="true" id="type.6254">
            <name>AddressOf&amp;&amp;</name>
            <content>
                <baseType ref="class_AddressOf_F9F594A9680E5BE9D427D963284931AEB8E52492"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_AlternativeExpressionRule_4A8E0A75B1E15D431953E1A2CC7001CE365A23BE">
            <name>AlternativeExpressionRule</name>
        </type>
        <type derived="true" id="type.9348869">
            <name>AlternativeExpressionRule&amp;</name>
            <content>
                <baseType ref="class_AlternativeExpressionRule_4A8E0A75B1E15D431953E1A2CC7001CE365A23BE"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348868">
            <name>AlternativeExpressionRule*</name>
            <content>
                <baseType ref="class_AlternativeExpressionRule_4A8E0A75B1E15D431953E1A2CC7001CE365A23BE"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349810">
            <name>AlternativeExpressionRule*&amp;</name>
            <content>
                <baseType ref="class_AlternativeExpressionRule_4A8E0A75B1E15D431953E1A2CC7001CE365A23BE"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349809">
            <name>AlternativeExpressionRule**</name>
            <content>
                <baseType ref="class_AlternativeExpressionRule_4A8E0A75B1E15D431953E1A2CC7001CE365A23BE"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6326">
            <name>AssertStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_AssertStatement_D3CF5F3C391681B790B0E9E570953DA4FA666696"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9349733" specialization="true">
            <name>BinaryFun&lt;int, int, bool></name>
            <content>
                <primaryType ref="class_BinaryFun_Argument1_Argument2_Result_958A7BAC6F2E3E4BFF4471012FF390F88F6A37D2"/>
                <argumentType ref="type.9329182"/>
                <argumentType ref="type.9329182"/>
                <argumentType ref="type.9329177"/>
            </content>
        </type>
        <type derived="true" id="type.9349735">
            <name>BinaryFun&lt;int, int, bool>&amp;</name>
            <content>
                <baseType ref="type.9349733"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349749">
            <name>BinaryFun&lt;int, int, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.9349733"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349734">
            <name>BinaryFun&lt;int, int, bool>*</name>
            <content>
                <baseType ref="type.9349733"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9349732" specialization="true">
            <name>BinaryPred&lt;int, int></name>
            <content>
                <primaryType ref="class_BinaryPred_Argument1_Argument2_58670947C9368A3B9CA2822A418C109ED49379F7"/>
                <argumentType ref="type.9329182"/>
                <argumentType ref="type.9329182"/>
            </content>
        </type>
        <type derived="true" id="type.9349737">
            <name>BinaryPred&lt;int, int>&amp;</name>
            <content>
                <baseType ref="type.9349732"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349746">
            <name>BinaryPred&lt;int, int>&amp;&amp;</name>
            <content>
                <baseType ref="type.9349732"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349736">
            <name>BinaryPred&lt;int, int>*</name>
            <content>
                <baseType ref="type.9349732"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9329512">
            <name>Bitset&amp;</name>
            <content>
                <baseType ref="class_Bitset_BA1EE2E68426C5445CB6CAF7F957084ADAFD19CA"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type id="type.9331085" specialization="true">
            <name>Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
            </content>
        </type>
        <type derived="true" id="type.5868">
            <name>Bucket&lt;Pair&lt;K, T>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.9331085"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9" specialization="true">
            <name>Bucket&lt;T></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="9329814"/>
            </content>
        </type>
        <type derived="true" id="type.5876">
            <name>Bucket&lt;T>*&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_Bucket_ValueType_5A3E2F108F8CC061B9AC0A82F50CCDA26037ADCE" specialization="true">
            <name>Bucket&lt;ValueType></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="9329835"/>
            </content>
        </type>
        <type derived="true" id="type.5889">
            <name>Bucket&lt;ValueType>*&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Bucket_ValueType_5A3E2F108F8CC061B9AC0A82F50CCDA26037ADCE"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_CharClass_D0839E83F8129D6C4D261748730F5967D1045544">
            <name>CharClass</name>
        </type>
        <type derived="true" id="type.9348793">
            <name>CharClass&amp;</name>
            <content>
                <baseType ref="class_CharClass_D0839E83F8129D6C4D261748730F5967D1045544"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349532">
            <name>CharClass&amp;&amp;</name>
            <content>
                <baseType ref="class_CharClass_D0839E83F8129D6C4D261748730F5967D1045544"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348792">
            <name>CharClass*</name>
            <content>
                <baseType ref="class_CharClass_D0839E83F8129D6C4D261748730F5967D1045544"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_CharClassCharRule_A53117A13BF1152F840E4ABF3F80BB10F64CEC38">
            <name>CharClassCharRule</name>
        </type>
        <type derived="true" id="type.9348917">
            <name>CharClassCharRule&amp;</name>
            <content>
                <baseType ref="class_CharClassCharRule_A53117A13BF1152F840E4ABF3F80BB10F64CEC38"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348916">
            <name>CharClassCharRule*</name>
            <content>
                <baseType ref="class_CharClassCharRule_A53117A13BF1152F840E4ABF3F80BB10F64CEC38"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349867">
            <name>CharClassCharRule*&amp;</name>
            <content>
                <baseType ref="class_CharClassCharRule_A53117A13BF1152F840E4ABF3F80BB10F64CEC38"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349866">
            <name>CharClassCharRule**</name>
            <content>
                <baseType ref="class_CharClassCharRule_A53117A13BF1152F840E4ABF3F80BB10F64CEC38"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_CharClassRule_4F146B0ADDD3D4BE0C73F0669E2FBBF45F3788EE">
            <name>CharClassRule</name>
        </type>
        <type derived="true" id="type.9348899">
            <name>CharClassRule&amp;</name>
            <content>
                <baseType ref="class_CharClassRule_4F146B0ADDD3D4BE0C73F0669E2FBBF45F3788EE"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348898">
            <name>CharClassRule*</name>
            <content>
                <baseType ref="class_CharClassRule_4F146B0ADDD3D4BE0C73F0669E2FBBF45F3788EE"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349843">
            <name>CharClassRule*&amp;</name>
            <content>
                <baseType ref="class_CharClassRule_4F146B0ADDD3D4BE0C73F0669E2FBBF45F3788EE"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349842">
            <name>CharClassRule**</name>
            <content>
                <baseType ref="class_CharClassRule_4F146B0ADDD3D4BE0C73F0669E2FBBF45F3788EE"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6350">
            <name>CharParser&amp;&amp;</name>
            <content>
                <baseType ref="class_CharParser_F30B4B7DDC9B8D3CD1476C03049B3C7189028FDA"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_CharRangeRule_618435CFE0DB4BD0ABFBE4AFB8D7E8ED673F12F7">
            <name>CharRangeRule</name>
        </type>
        <type derived="true" id="type.9348911">
            <name>CharRangeRule&amp;</name>
            <content>
                <baseType ref="class_CharRangeRule_618435CFE0DB4BD0ABFBE4AFB8D7E8ED673F12F7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348910">
            <name>CharRangeRule*</name>
            <content>
                <baseType ref="class_CharRangeRule_618435CFE0DB4BD0ABFBE4AFB8D7E8ED673F12F7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349862">
            <name>CharRangeRule*&amp;</name>
            <content>
                <baseType ref="class_CharRangeRule_618435CFE0DB4BD0ABFBE4AFB8D7E8ED673F12F7"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349861">
            <name>CharRangeRule**</name>
            <content>
                <baseType ref="class_CharRangeRule_618435CFE0DB4BD0ABFBE4AFB8D7E8ED673F12F7"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_CharRule_B7D4B34179E6B09B20AED1A5DC81494C02C4B5F2">
            <name>CharRule</name>
        </type>
        <type derived="true" id="type.9348893">
            <name>CharRule&amp;</name>
            <content>
                <baseType ref="class_CharRule_B7D4B34179E6B09B20AED1A5DC81494C02C4B5F2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348892">
            <name>CharRule*</name>
            <content>
                <baseType ref="class_CharRule_B7D4B34179E6B09B20AED1A5DC81494C02C4B5F2"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349838">
            <name>CharRule*&amp;</name>
            <content>
                <baseType ref="class_CharRule_B7D4B34179E6B09B20AED1A5DC81494C02C4B5F2"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349837">
            <name>CharRule**</name>
            <content>
                <baseType ref="class_CharRule_B7D4B34179E6B09B20AED1A5DC81494C02C4B5F2"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="enumerated_type_Class_0382CE410BDE6580EFF2954226E6159339AA54CB">
            <name>Class</name>
        </type>
        <type derived="true" id="type.9349530">
            <name>Class&amp;</name>
            <content>
                <baseType ref="enumerated_type_Class_0382CE410BDE6580EFF2954226E6159339AA54CB"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349531">
            <name>Class&amp;&amp;</name>
            <content>
                <baseType ref="enumerated_type_Class_0382CE410BDE6580EFF2954226E6159339AA54CB"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349529">
            <name>Class*</name>
            <content>
                <baseType ref="enumerated_type_Class_0382CE410BDE6580EFF2954226E6159339AA54CB"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_ClassRule_CB84A917AD277E1C502ED913C6E87F636CB3D527">
            <name>ClassRule</name>
        </type>
        <type derived="true" id="type.9348905">
            <name>ClassRule&amp;</name>
            <content>
                <baseType ref="class_ClassRule_CB84A917AD277E1C502ED913C6E87F636CB3D527"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348904">
            <name>ClassRule*</name>
            <content>
                <baseType ref="class_ClassRule_CB84A917AD277E1C502ED913C6E87F636CB3D527"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349856">
            <name>ClassRule*&amp;</name>
            <content>
                <baseType ref="class_ClassRule_CB84A917AD277E1C502ED913C6E87F636CB3D527"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349855">
            <name>ClassRule**</name>
            <content>
                <baseType ref="class_ClassRule_CB84A917AD277E1C502ED913C6E87F636CB3D527"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6333">
            <name>CodeExpandingVisitor&amp;&amp;</name>
            <content>
                <baseType ref="class_CodeExpandingVisitor_2D824580300CDC92F6A03DB335EE0BB590738E53"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6232">
            <name>CodeFormatter&amp;&amp;</name>
            <content>
                <baseType ref="class_CodeFormatter_38898A0914E7D27753F0D42E65A18EC272984F99"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6269">
            <name>Complement&amp;&amp;</name>
            <content>
                <baseType ref="class_Complement_E9C39B44C265CC4D19B0EFE97BE0DDAAF5B39DB5"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348750">
            <name>CompoundStatement&amp;</name>
            <content>
                <baseType ref="class_CompoundStatement_D64148F52F69E76B5603068E1B519F54CC99F8A9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5773">
            <name>CompoundStatement&amp;</name>
            <content>
                <baseType ref="class_CompoundStatement_D64148F52F69E76B5603068E1B519F54CC99F8A9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348750">
            <name>CompoundStatement&amp;</name>
            <content>
                <baseType ref="class_CompoundStatement_D64148F52F69E76B5603068E1B519F54CC99F8A9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348749">
            <name>CompoundStatement*</name>
            <content>
                <baseType ref="class_CompoundStatement_D64148F52F69E76B5603068E1B519F54CC99F8A9"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5772">
            <name>CompoundStatement*</name>
            <content>
                <baseType ref="class_CompoundStatement_D64148F52F69E76B5603068E1B519F54CC99F8A9"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6327">
            <name>Const&amp;&amp;</name>
            <content>
                <baseType ref="class_Const_9F4AD8D639ADA7A3FA35707EF7047095B214626A"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6287">
            <name>Construct&amp;&amp;</name>
            <content>
                <baseType ref="class_Construct_9E0CFFBA332AF77070D82685BD0B3B21F6BBDAB8"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_Context_7A52FE4D43A082F3F2C3C8C0342125580652BBD2">
            <name>Context</name>
        </type>
        <type id="class_Context_6F4E6746E48FD0579E593CDF9C2928E1F21F533F">
            <name>Context</name>
        </type>
        <type id="class_Context_B08E85EEE770E2B21335C89CF53D58AB5087B3A6">
            <name>Context</name>
        </type>
        <type id="class_Context_0C61E182102956552E65E5786F357793121668DE">
            <name>Context</name>
        </type>
        <type id="class_Context_8F48190AFFFA303A9B132F56189CDD4703FC16E1">
            <name>Context</name>
        </type>
        <type id="class_Context_0D46FA6C66A259182789E6D19E7461B00281875B">
            <name>Context</name>
        </type>
        <type id="class_Context_63EB906843D5D4373C35066FF5009683B089C34B">
            <name>Context</name>
        </type>
        <type id="class_Context_C54426BCE970844EC5951E8505ABAD41E90D3B3C">
            <name>Context</name>
        </type>
        <type id="class_Context_0C8D185307CAF62D15099706D5FE138E1B6E1288">
            <name>Context</name>
        </type>
        <type id="class_Context_2995333F7FB4E575DF46CB6813BEB1F6F3A7E737">
            <name>Context</name>
        </type>
        <type derived="true" id="type.9348866">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_8F48190AFFFA303A9B132F56189CDD4703FC16E1"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348890">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_0D46FA6C66A259182789E6D19E7461B00281875B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348896">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_0C8D185307CAF62D15099706D5FE138E1B6E1288"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348902">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_63EB906843D5D4373C35066FF5009683B089C34B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348920">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_7A52FE4D43A082F3F2C3C8C0342125580652BBD2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348884">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_C54426BCE970844EC5951E8505ABAD41E90D3B3C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348878">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_B08E85EEE770E2B21335C89CF53D58AB5087B3A6"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348872">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_0C61E182102956552E65E5786F357793121668DE"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348908">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_2995333F7FB4E575DF46CB6813BEB1F6F3A7E737"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348914">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_6F4E6746E48FD0579E593CDF9C2928E1F21F533F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348920">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_7A52FE4D43A082F3F2C3C8C0342125580652BBD2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348865">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_8F48190AFFFA303A9B132F56189CDD4703FC16E1"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348895">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_0C8D185307CAF62D15099706D5FE138E1B6E1288"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348901">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_63EB906843D5D4373C35066FF5009683B089C34B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348919">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_7A52FE4D43A082F3F2C3C8C0342125580652BBD2"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348907">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_2995333F7FB4E575DF46CB6813BEB1F6F3A7E737"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348871">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_0C61E182102956552E65E5786F357793121668DE"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348889">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_0D46FA6C66A259182789E6D19E7461B00281875B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348883">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_C54426BCE970844EC5951E8505ABAD41E90D3B3C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348877">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_B08E85EEE770E2B21335C89CF53D58AB5087B3A6"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348919">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_7A52FE4D43A082F3F2C3C8C0342125580652BBD2"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348913">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_6F4E6746E48FD0579E593CDF9C2928E1F21F533F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349807">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_0C61E182102956552E65E5786F357793121668DE"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349840">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_63EB906843D5D4373C35066FF5009683B089C34B"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349813">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_B08E85EEE770E2B21335C89CF53D58AB5087B3A6"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349823">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_0D46FA6C66A259182789E6D19E7461B00281875B"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349818">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_C54426BCE970844EC5951E8505ABAD41E90D3B3C"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349835">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_0C8D185307CAF62D15099706D5FE138E1B6E1288"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349864">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_7A52FE4D43A082F3F2C3C8C0342125580652BBD2"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349859">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_6F4E6746E48FD0579E593CDF9C2928E1F21F533F"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349853">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_2995333F7FB4E575DF46CB6813BEB1F6F3A7E737"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349802">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_8F48190AFFFA303A9B132F56189CDD4703FC16E1"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349859">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_6F4E6746E48FD0579E593CDF9C2928E1F21F533F"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349863">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_7A52FE4D43A082F3F2C3C8C0342125580652BBD2"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349817">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_C54426BCE970844EC5951E8505ABAD41E90D3B3C"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349839">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_63EB906843D5D4373C35066FF5009683B089C34B"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349812">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_B08E85EEE770E2B21335C89CF53D58AB5087B3A6"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349863">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_7A52FE4D43A082F3F2C3C8C0342125580652BBD2"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349822">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_0D46FA6C66A259182789E6D19E7461B00281875B"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349806">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_0C61E182102956552E65E5786F357793121668DE"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349834">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_0C8D185307CAF62D15099706D5FE138E1B6E1288"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349852">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_2995333F7FB4E575DF46CB6813BEB1F6F3A7E737"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349801">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_8F48190AFFFA303A9B132F56189CDD4703FC16E1"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349858">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_6F4E6746E48FD0579E593CDF9C2928E1F21F533F"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9330292" specialization="true">
            <name>Counter&lt;System.IO.ByteStream></name>
            <content>
                <primaryType ref="class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <argumentType ref="class_ByteStream_3B7A2F3379612ADBD7E416487752A1935AA8B96F"/>
            </content>
        </type>
        <type id="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30" specialization="true">
            <name>Counter&lt;T></name>
            <content>
                <primaryType ref="class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <argumentType ref="9329960"/>
            </content>
        </type>
        <type derived="true" id="type.5995">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5973">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5961">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5964">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5980">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6002">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A" specialization="true">
            <name>Counter&lt;U></name>
            <content>
                <primaryType ref="class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <argumentType ref="9329975"/>
            </content>
        </type>
        <type derived="true" id="type.6305">
            <name>DeleteStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_DeleteStatement_CFF57A1EB43152DAED3E95873037A4F83E2AAF0A"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6251">
            <name>Deref&amp;&amp;</name>
            <content>
                <baseType ref="class_Deref_6825EB2BE00B35C10BF9F18A018CADC1F1F12594"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6308">
            <name>DestroyStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_DestroyStatement_E2AF4A1B38D4AE66FCF9EF639F0D8309CE050550"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_Dfa_C0C2BE49FCC3D3B6EA837CF206D1FE18B6C3B39E">
            <name>Dfa</name>
        </type>
        <type derived="true" id="type.9348805">
            <name>Dfa&amp;</name>
            <content>
                <baseType ref="class_Dfa_C0C2BE49FCC3D3B6EA837CF206D1FE18B6C3B39E"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349708">
            <name>Dfa&amp;&amp;</name>
            <content>
                <baseType ref="class_Dfa_C0C2BE49FCC3D3B6EA837CF206D1FE18B6C3B39E"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348804">
            <name>Dfa*</name>
            <content>
                <baseType ref="class_Dfa_C0C2BE49FCC3D3B6EA837CF206D1FE18B6C3B39E"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_DfaState_9705397F7C4EF22AB411D3A2CD2F07D838F85228">
            <name>DfaState</name>
        </type>
        <type derived="true" id="type.9348799">
            <name>DfaState&amp;</name>
            <content>
                <baseType ref="class_DfaState_9705397F7C4EF22AB411D3A2CD2F07D838F85228"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349533">
            <name>DfaState&amp;&amp;</name>
            <content>
                <baseType ref="class_DfaState_9705397F7C4EF22AB411D3A2CD2F07D838F85228"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348798">
            <name>DfaState*</name>
            <content>
                <baseType ref="class_DfaState_9705397F7C4EF22AB411D3A2CD2F07D838F85228"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349710">
            <name>DfaState*&amp;</name>
            <content>
                <baseType ref="class_DfaState_9705397F7C4EF22AB411D3A2CD2F07D838F85228"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349711">
            <name>DfaState*&amp;&amp;</name>
            <content>
                <baseType ref="class_DfaState_9705397F7C4EF22AB411D3A2CD2F07D838F85228"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349709">
            <name>DfaState**</name>
            <content>
                <baseType ref="class_DfaState_9705397F7C4EF22AB411D3A2CD2F07D838F85228"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348748">
            <name>DomObject&amp;</name>
            <content>
                <baseType ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5771">
            <name>DomObject&amp;</name>
            <content>
                <baseType ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6245">
            <name>DomObject&amp;&amp;</name>
            <content>
                <baseType ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348747">
            <name>DomObject*</name>
            <content>
                <baseType ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5770">
            <name>DomObject*</name>
            <content>
                <baseType ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6345">
            <name>ExpectationParser&amp;&amp;</name>
            <content>
                <baseType ref="class_ExpectationParser_0DFEF78F7EA112E6F20DC00ECFD31592FD692CAB"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6311">
            <name>ExpressionStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_ExpressionStatement_F01731B3CB572136FE603DE87C8C465F5B79ED54"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_ForwardList_T_49B88E2B81E13ED03DA3835C7A074DB98CBE7051" specialization="true">
            <name>ForwardList&lt;T></name>
            <content>
                <primaryType ref="class_ForwardList_T_49B88E2B81E13ED03DA3835C7A074DB98CBE7051"/>
                <argumentType ref="9329723"/>
            </content>
        </type>
        <type derived="true" id="type.5826">
            <name>ForwardList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardList_T_49B88E2B81E13ED03DA3835C7A074DB98CBE7051"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA" specialization="true">
            <name>ForwardListNodeIterator&lt;T, R, P></name>
            <content>
                <primaryType ref="class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <argumentType ref="9329716"/>
                <argumentType ref="9329717"/>
                <argumentType ref="9329718"/>
            </content>
        </type>
        <type derived="true" id="type.5823">
            <name>ForwardListNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5822">
            <name>ForwardListNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84" specialization="true">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <argumentType ref="9329725"/>
                <argumentType ref="type.9330654"/>
                <argumentType ref="type.9330656"/>
            </content>
        </type>
        <type derived="true" id="type.5825">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5830">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5828">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3" specialization="true">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <argumentType ref="9329725"/>
                <argumentType ref="type.9330639"/>
                <argumentType ref="type.9330640"/>
            </content>
        </type>
        <type derived="true" id="type.5824">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5829">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5827">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6317">
            <name>GotoCaseStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_GotoCaseStatement_54B0F8581DE0382A086C8C1EC6A19E93889D566D"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6302">
            <name>GotoStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_GotoStatement_423A80C64905BCD7885A3433F9FE33D8BB37DF7E"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B" specialization="true">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="9329805"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <argumentType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <argumentType ref="9329807"/>
                <argumentType ref="9329808"/>
            </content>
        </type>
        <type derived="true" id="type.5864">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2" specialization="true">
            <name>Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="9329834"/>
                <argumentType ref="9329835"/>
                <argumentType ref="9329836"/>
                <argumentType ref="9329837"/>
                <argumentType ref="9329838"/>
            </content>
        </type>
        <type derived="true" id="type.5884">
            <name>Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9338662" specialization="true">
            <name>Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="type.9330406"/>
                <argumentType ref="type.9330406"/>
                <argumentType ref="type.9338653"/>
                <argumentType ref="type.9338348"/>
                <argumentType ref="type.9338354"/>
            </content>
        </type>
        <type id="type.class_Hashtable_T_T_Identity_T_H_C_73CFDACB21FE662CFE0879B3582A7D1FB223385C" specialization="true">
            <name>Hashtable&lt;T, T, Identity&lt;T>, H, C></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="9329814"/>
                <argumentType ref="9329814"/>
                <argumentType ref="type.class_Identity_T_9DD2E12D3D49B8316EA22259EDBD89C3FE6A1C09"/>
                <argumentType ref="9329815"/>
                <argumentType ref="9329816"/>
            </content>
        </type>
        <type derived="true" id="type.5872">
            <name>Hashtable&lt;T, T, Identity&lt;T>, H, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_T_T_Identity_T_H_C_73CFDACB21FE662CFE0879B3582A7D1FB223385C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9349284" specialization="true">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.9330406"/>
                <argumentType ref="type.9330408"/>
                <argumentType ref="type.9330407"/>
                <argumentType ref="type.9338662"/>
            </content>
        </type>
        <type id="type.6140" specialization="true">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.9330406"/>
                <argumentType ref="type.9330408"/>
                <argumentType ref="type.9330407"/>
                <argumentType ref="type.9338662"/>
            </content>
        </type>
        <type derived="true" id="type.9349286">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.9349284"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6142">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.6140"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349286">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.9349284"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349285">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.9349284"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6141">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.6140"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349285">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.9349284"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.6146" specialization="true">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.9330406"/>
                <argumentType ref="type.9330411"/>
                <argumentType ref="type.9330410"/>
                <argumentType ref="type.9338662"/>
            </content>
        </type>
        <type id="type.9349290" specialization="true">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.9330406"/>
                <argumentType ref="type.9330411"/>
                <argumentType ref="type.9330410"/>
                <argumentType ref="type.9338662"/>
            </content>
        </type>
        <type derived="true" id="type.6148">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.6146"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349292">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.9349290"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6147">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.6146"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349291">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.9349290"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6291">
            <name>Identifier&amp;&amp;</name>
            <content>
                <baseType ref="class_Identifier_4DD63F2DF214C9DDE3105925C5DFD200FC4065A7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6272">
            <name>Invoke&amp;&amp;</name>
            <content>
                <baseType ref="class_Invoke_D6527871DA9EA1727DFAC637E9FF17EF73B2DAF5"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6342">
            <name>KleeneStarParser&amp;&amp;</name>
            <content>
                <baseType ref="class_KleeneStarParser_8B553023A6E0AA98D08C756A40F526859BF46D2D"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9349727" specialization="true">
            <name>Less&lt;int></name>
            <content>
                <primaryType ref="class_Less_T_F840BD6533DFD3706784C819E04FA4FE41C4F3D2"/>
                <argumentType ref="type.9329182"/>
            </content>
        </type>
        <type derived="true" id="type.9349741">
            <name>Less&lt;int>&amp;</name>
            <content>
                <baseType ref="type.9349727"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349742">
            <name>Less&lt;int>&amp;&amp;</name>
            <content>
                <baseType ref="type.9349727"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349740">
            <name>Less&lt;int>*</name>
            <content>
                <baseType ref="type.9349727"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20" specialization="true">
            <name>LinkedList&lt;T></name>
            <content>
                <primaryType ref="class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <argumentType ref="9329844"/>
            </content>
        </type>
        <type derived="true" id="type.5892">
            <name>LinkedList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5893">
            <name>LinkedList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9331104" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.9331086"/>
            </content>
        </type>
        <type derived="true" id="type.5867">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9331104"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9331257" specialization="true">
            <name>List&lt;Bucket&lt;T>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.9331240"/>
            </content>
        </type>
        <type derived="true" id="type.5875">
            <name>List&lt;Bucket&lt;T>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9331257"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9331442" specialization="true">
            <name>List&lt;Bucket&lt;ValueType>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.9331423"/>
            </content>
        </type>
        <type derived="true" id="type.5888">
            <name>List&lt;Bucket&lt;ValueType>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9331442"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9349610" specialization="true">
            <name>List&lt;PtrNfaState*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.9348831"/>
            </content>
        </type>
        <type derived="true" id="type.9349612">
            <name>List&lt;PtrNfaState*>&amp;</name>
            <content>
                <baseType ref="type.9349610"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349634">
            <name>List&lt;PtrNfaState*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9349610"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349611">
            <name>List&lt;PtrNfaState*>*</name>
            <content>
                <baseType ref="type.9349610"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9332807" specialization="true">
            <name>List&lt;String&lt;CharT>></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
            </content>
        </type>
        <type derived="true" id="type.6020">
            <name>List&lt;String&lt;CharT>>&amp;&amp;</name>
            <content>
                <baseType ref="type.9332807"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9349534" specialization="true">
            <name>List&lt;System.Text.RegularExpressions.DfaState></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="class_DfaState_9705397F7C4EF22AB411D3A2CD2F07D838F85228"/>
            </content>
        </type>
        <type derived="true" id="type.9349536">
            <name>List&lt;System.Text.RegularExpressions.DfaState>&amp;</name>
            <content>
                <baseType ref="type.9349534"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349554">
            <name>List&lt;System.Text.RegularExpressions.DfaState>&amp;&amp;</name>
            <content>
                <baseType ref="type.9349534"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349535">
            <name>List&lt;System.Text.RegularExpressions.DfaState>*</name>
            <content>
                <baseType ref="type.9349534"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9349556" specialization="true">
            <name>List&lt;System.Text.RegularExpressions.NfaState></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="class_NfaState_9D1ED32B9E916097B40ADF566ECF8BF84ACD9662"/>
            </content>
        </type>
        <type derived="true" id="type.9349558">
            <name>List&lt;System.Text.RegularExpressions.NfaState>&amp;</name>
            <content>
                <baseType ref="type.9349556"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349576">
            <name>List&lt;System.Text.RegularExpressions.NfaState>&amp;&amp;</name>
            <content>
                <baseType ref="type.9349556"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349557">
            <name>List&lt;System.Text.RegularExpressions.NfaState>*</name>
            <content>
                <baseType ref="type.9349556"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9349507" specialization="true">
            <name>List&lt;System.Text.RegularExpressions.NfaStateNumberSet></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="class_NfaStateNumberSet_94283B9E90ECB564FEF4909226A69DC50DFBEAC3"/>
            </content>
        </type>
        <type derived="true" id="type.9349509">
            <name>List&lt;System.Text.RegularExpressions.NfaStateNumberSet>&amp;</name>
            <content>
                <baseType ref="type.9349507"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349527">
            <name>List&lt;System.Text.RegularExpressions.NfaStateNumberSet>&amp;&amp;</name>
            <content>
                <baseType ref="type.9349507"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349508">
            <name>List&lt;System.Text.RegularExpressions.NfaStateNumberSet>*</name>
            <content>
                <baseType ref="type.9349507"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9349589" specialization="true">
            <name>List&lt;System.Text.RegularExpressions.PtrNfaEdge></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="class_PtrNfaEdge_937C7F61A080B689DF3D122F26A5057032EE2DB3"/>
            </content>
        </type>
        <type derived="true" id="type.9349591">
            <name>List&lt;System.Text.RegularExpressions.PtrNfaEdge>&amp;</name>
            <content>
                <baseType ref="type.9349589"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349609">
            <name>List&lt;System.Text.RegularExpressions.PtrNfaEdge>&amp;&amp;</name>
            <content>
                <baseType ref="type.9349589"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349590">
            <name>List&lt;System.Text.RegularExpressions.PtrNfaEdge>*</name>
            <content>
                <baseType ref="type.9349589"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C" specialization="true">
            <name>List&lt;T></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="9329901"/>
            </content>
        </type>
        <type derived="true" id="type.6014">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5896">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5932">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9349484" specialization="true">
            <name>List&lt;int></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.9329182"/>
            </content>
        </type>
        <type derived="true" id="type.9349486">
            <name>List&lt;int>&amp;</name>
            <content>
                <baseType ref="type.9349484"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349506">
            <name>List&lt;int>&amp;&amp;</name>
            <content>
                <baseType ref="type.9349484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349485">
            <name>List&lt;int>*</name>
            <content>
                <baseType ref="type.9349484"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6295">
            <name>Literal&amp;&amp;</name>
            <content>
                <baseType ref="class_Literal_2996038F9E8CCAE363F6BF2855F68961FFF05F77"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1" specialization="true">
            <name>LockGuard&lt;Mtx></name>
            <content>
                <primaryType ref="class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
                <argumentType ref="9329880"/>
            </content>
        </type>
        <type derived="true" id="type.5920">
            <name>LockGuard&lt;Mtx>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9335149" specialization="true">
            <name>LockGuard&lt;System.Threading.Mutex></name>
            <content>
                <primaryType ref="class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
                <argumentType ref="class_Mutex_CAF802A5F8A71934B07EA6C23937F60D9AECD650"/>
            </content>
        </type>
        <type derived="true" id="type.6107">
            <name>LockGuard&lt;System.Threading.Mutex>&amp;&amp;</name>
            <content>
                <baseType ref="type.9335149"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6328">
            <name>LvalueRef&amp;&amp;</name>
            <content>
                <baseType ref="class_LvalueRef_564B7A22159B1EA0883821F35678B0406B055A05"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5917">
            <name>Mtx&amp;</name>
            <content>
                <baseType ref="9329880"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6290">
            <name>New&amp;&amp;</name>
            <content>
                <baseType ref="class_New_DC04D52C4D476FD919D770D43330D434B51E2D21"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_Nfa_5E23E7BB511DC9602941611B6CE87476EC3ECB57">
            <name>Nfa</name>
        </type>
        <type derived="true" id="type.9348823">
            <name>Nfa&amp;</name>
            <content>
                <baseType ref="class_Nfa_5E23E7BB511DC9602941611B6CE87476EC3ECB57"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349673">
            <name>Nfa&amp;&amp;</name>
            <content>
                <baseType ref="class_Nfa_5E23E7BB511DC9602941611B6CE87476EC3ECB57"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348822">
            <name>Nfa*</name>
            <content>
                <baseType ref="class_Nfa_5E23E7BB511DC9602941611B6CE87476EC3ECB57"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_NfaState_9D1ED32B9E916097B40ADF566ECF8BF84ACD9662">
            <name>NfaState</name>
        </type>
        <type derived="true" id="type.9348817">
            <name>NfaState&amp;</name>
            <content>
                <baseType ref="class_NfaState_9D1ED32B9E916097B40ADF566ECF8BF84ACD9662"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349555">
            <name>NfaState&amp;&amp;</name>
            <content>
                <baseType ref="class_NfaState_9D1ED32B9E916097B40ADF566ECF8BF84ACD9662"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348816">
            <name>NfaState*</name>
            <content>
                <baseType ref="class_NfaState_9D1ED32B9E916097B40ADF566ECF8BF84ACD9662"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349686">
            <name>NfaState*&amp;</name>
            <content>
                <baseType ref="class_NfaState_9D1ED32B9E916097B40ADF566ECF8BF84ACD9662"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349685">
            <name>NfaState**</name>
            <content>
                <baseType ref="class_NfaState_9D1ED32B9E916097B40ADF566ECF8BF84ACD9662"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_NfaStateNumberSet_94283B9E90ECB564FEF4909226A69DC50DFBEAC3">
            <name>NfaStateNumberSet</name>
        </type>
        <type derived="true" id="type.9348811">
            <name>NfaStateNumberSet&amp;</name>
            <content>
                <baseType ref="class_NfaStateNumberSet_94283B9E90ECB564FEF4909226A69DC50DFBEAC3"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349528">
            <name>NfaStateNumberSet&amp;&amp;</name>
            <content>
                <baseType ref="class_NfaStateNumberSet_94283B9E90ECB564FEF4909226A69DC50DFBEAC3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348810">
            <name>NfaStateNumberSet*</name>
            <content>
                <baseType ref="class_NfaStateNumberSet_94283B9E90ECB564FEF4909226A69DC50DFBEAC3"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349680">
            <name>NfaStateNumberSet*&amp;</name>
            <content>
                <baseType ref="class_NfaStateNumberSet_94283B9E90ECB564FEF4909226A69DC50DFBEAC3"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349681">
            <name>NfaStateNumberSet*&amp;&amp;</name>
            <content>
                <baseType ref="class_NfaStateNumberSet_94283B9E90ECB564FEF4909226A69DC50DFBEAC3"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349679">
            <name>NfaStateNumberSet**</name>
            <content>
                <baseType ref="class_NfaStateNumberSet_94283B9E90ECB564FEF4909226A69DC50DFBEAC3"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6248">
            <name>Not&amp;&amp;</name>
            <content>
                <baseType ref="class_Not_5E324445E5A5F8057BEBD48898C26110CD402187"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6336">
            <name>OptionalParser&amp;&amp;</name>
            <content>
                <baseType ref="class_OptionalParser_F2758E0656F6FF0FCFAFB3BADC90975486CE943A"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9329994">
            <name>OutputStream&amp;</name>
            <content>
                <baseType ref="class_OutputStream_D306768ED83C9FB00EA54CD61D604CE2BF727452"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type id="type.6152" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.6140"/>
                <argumentType ref="type.9329177"/>
            </content>
        </type>
        <type id="type.9349296" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.9349284"/>
                <argumentType ref="type.9329177"/>
            </content>
        </type>
        <type derived="true" id="type.9349298">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>&amp;</name>
            <content>
                <baseType ref="type.9349296"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6154">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>&amp;</name>
            <content>
                <baseType ref="type.6152"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349298">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>&amp;</name>
            <content>
                <baseType ref="type.9349296"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349297">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>*</name>
            <content>
                <baseType ref="type.9349296"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6153">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>*</name>
            <content>
                <baseType ref="type.6152"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349297">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>*</name>
            <content>
                <baseType ref="type.9349296"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9" specialization="true">
            <name>Pair&lt;T, U></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="9329894"/>
                <argumentType ref="9329895"/>
            </content>
        </type>
        <type derived="true" id="type.5775">
            <name>Parser&amp;</name>
            <content>
                <baseType ref="class_Parser_59591398FA427ADC5EC015FB52651571177DB77D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348752">
            <name>Parser&amp;</name>
            <content>
                <baseType ref="class_Parser_59591398FA427ADC5EC015FB52651571177DB77D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5774">
            <name>Parser*</name>
            <content>
                <baseType ref="class_Parser_59591398FA427ADC5EC015FB52651571177DB77D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348751">
            <name>Parser*</name>
            <content>
                <baseType ref="class_Parser_59591398FA427ADC5EC015FB52651571177DB77D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6349">
            <name>ParsingData&amp;&amp;</name>
            <content>
                <baseType ref="class_ParsingData_9F05BA66DA13D9A55E1E7FF50B19E250484C3A7B"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348754">
            <name>ParsingDomain&amp;</name>
            <content>
                <baseType ref="class_ParsingDomain_DBADEDB24194482080D6E7112DE96AB5FCAD1A87"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5777">
            <name>ParsingDomain&amp;</name>
            <content>
                <baseType ref="class_ParsingDomain_DBADEDB24194482080D6E7112DE96AB5FCAD1A87"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348754">
            <name>ParsingDomain&amp;</name>
            <content>
                <baseType ref="class_ParsingDomain_DBADEDB24194482080D6E7112DE96AB5FCAD1A87"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9337419">
            <name>ParsingDomain*</name>
            <content>
                <baseType ref="class_ParsingDomain_DBADEDB24194482080D6E7112DE96AB5FCAD1A87"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348753">
            <name>ParsingDomain*</name>
            <content>
                <baseType ref="class_ParsingDomain_DBADEDB24194482080D6E7112DE96AB5FCAD1A87"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5776">
            <name>ParsingDomain*</name>
            <content>
                <baseType ref="class_ParsingDomain_DBADEDB24194482080D6E7112DE96AB5FCAD1A87"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6330">
            <name>Pointer&amp;&amp;</name>
            <content>
                <baseType ref="class_Pointer_37B1358240AF7AEA32F2A089E384F29AB860D4E6"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6339">
            <name>PositiveParser&amp;&amp;</name>
            <content>
                <baseType ref="class_PositiveParser_773062827D5C6002110C7D897D790DAEEE06A502"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6278">
            <name>PostfixDecrement&amp;&amp;</name>
            <content>
                <baseType ref="class_PostfixDecrement_D09AB7ACBA491B153051FDF9DE245E475C7F6392"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_PostfixExpressionRule_54839DB8B1E97899D69C4D4C08ADD8922DA2C262">
            <name>PostfixExpressionRule</name>
        </type>
        <type derived="true" id="type.9348881">
            <name>PostfixExpressionRule&amp;</name>
            <content>
                <baseType ref="class_PostfixExpressionRule_54839DB8B1E97899D69C4D4C08ADD8922DA2C262"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348880">
            <name>PostfixExpressionRule*</name>
            <content>
                <baseType ref="class_PostfixExpressionRule_54839DB8B1E97899D69C4D4C08ADD8922DA2C262"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349821">
            <name>PostfixExpressionRule*&amp;</name>
            <content>
                <baseType ref="class_PostfixExpressionRule_54839DB8B1E97899D69C4D4C08ADD8922DA2C262"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349820">
            <name>PostfixExpressionRule**</name>
            <content>
                <baseType ref="class_PostfixExpressionRule_54839DB8B1E97899D69C4D4C08ADD8922DA2C262"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6275">
            <name>PostfixIncrement&amp;&amp;</name>
            <content>
                <baseType ref="class_PostfixIncrement_DDC6B0BA10308D23CE5F90EE4D6B95A60E196FE9"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6260">
            <name>PrefixDecrement&amp;&amp;</name>
            <content>
                <baseType ref="class_PrefixDecrement_999D7C38861B7D6CED24609E18ACD9197FF478F0"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6257">
            <name>PrefixIncrement&amp;&amp;</name>
            <content>
                <baseType ref="class_PrefixIncrement_8035645A064F2FF3F7808392B992A24FA56E9E9D"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_PrimaryExpressionRule_06E24805A354F46D89064514E21FF94363E8A751">
            <name>PrimaryExpressionRule</name>
        </type>
        <type derived="true" id="type.9348887">
            <name>PrimaryExpressionRule&amp;</name>
            <content>
                <baseType ref="class_PrimaryExpressionRule_06E24805A354F46D89064514E21FF94363E8A751"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348886">
            <name>PrimaryExpressionRule*</name>
            <content>
                <baseType ref="class_PrimaryExpressionRule_06E24805A354F46D89064514E21FF94363E8A751"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349826">
            <name>PrimaryExpressionRule*&amp;</name>
            <content>
                <baseType ref="class_PrimaryExpressionRule_06E24805A354F46D89064514E21FF94363E8A751"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349825">
            <name>PrimaryExpressionRule**</name>
            <content>
                <baseType ref="class_PrimaryExpressionRule_06E24805A354F46D89064514E21FF94363E8A751"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_PtrNfa_5708C8189DEAC0F8CBD3A9DA5094DE3E7536B5FB">
            <name>PtrNfa</name>
        </type>
        <type derived="true" id="type.9348847">
            <name>PtrNfa&amp;</name>
            <content>
                <baseType ref="class_PtrNfa_5708C8189DEAC0F8CBD3A9DA5094DE3E7536B5FB"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349688">
            <name>PtrNfa&amp;&amp;</name>
            <content>
                <baseType ref="class_PtrNfa_5708C8189DEAC0F8CBD3A9DA5094DE3E7536B5FB"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348846">
            <name>PtrNfa*</name>
            <content>
                <baseType ref="class_PtrNfa_5708C8189DEAC0F8CBD3A9DA5094DE3E7536B5FB"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_PtrNfaEdge_937C7F61A080B689DF3D122F26A5057032EE2DB3">
            <name>PtrNfaEdge</name>
        </type>
        <type derived="true" id="type.9348838">
            <name>PtrNfaEdge&amp;</name>
            <content>
                <baseType ref="class_PtrNfaEdge_937C7F61A080B689DF3D122F26A5057032EE2DB3"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349588">
            <name>PtrNfaEdge&amp;&amp;</name>
            <content>
                <baseType ref="class_PtrNfaEdge_937C7F61A080B689DF3D122F26A5057032EE2DB3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348837">
            <name>PtrNfaEdge*</name>
            <content>
                <baseType ref="class_PtrNfaEdge_937C7F61A080B689DF3D122F26A5057032EE2DB3"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349773">
            <name>PtrNfaEdge*&amp;</name>
            <content>
                <baseType ref="class_PtrNfaEdge_937C7F61A080B689DF3D122F26A5057032EE2DB3"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349774">
            <name>PtrNfaEdge*&amp;&amp;</name>
            <content>
                <baseType ref="class_PtrNfaEdge_937C7F61A080B689DF3D122F26A5057032EE2DB3"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349772">
            <name>PtrNfaEdge**</name>
            <content>
                <baseType ref="class_PtrNfaEdge_937C7F61A080B689DF3D122F26A5057032EE2DB3"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_PtrNfaState_828AD9578262913C0B2EE4669E5D88681833D3E8">
            <name>PtrNfaState</name>
        </type>
        <type derived="true" id="type.9348832">
            <name>PtrNfaState&amp;</name>
            <content>
                <baseType ref="class_PtrNfaState_828AD9578262913C0B2EE4669E5D88681833D3E8"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348831">
            <name>PtrNfaState*</name>
            <content>
                <baseType ref="class_PtrNfaState_828AD9578262913C0B2EE4669E5D88681833D3E8"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349625">
            <name>PtrNfaState*&amp;</name>
            <content>
                <baseType ref="class_PtrNfaState_828AD9578262913C0B2EE4669E5D88681833D3E8"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349635">
            <name>PtrNfaState*&amp;&amp;</name>
            <content>
                <baseType ref="class_PtrNfaState_828AD9578262913C0B2EE4669E5D88681833D3E8"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349626">
            <name>PtrNfaState**</name>
            <content>
                <baseType ref="class_PtrNfaState_828AD9578262913C0B2EE4669E5D88681833D3E8"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349663">
            <name>PtrNfaState**&amp;</name>
            <content>
                <baseType ref="class_PtrNfaState_828AD9578262913C0B2EE4669E5D88681833D3E8"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349664">
            <name>PtrNfaState**&amp;&amp;</name>
            <content>
                <baseType ref="class_PtrNfaState_828AD9578262913C0B2EE4669E5D88681833D3E8"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349662">
            <name>PtrNfaState***</name>
            <content>
                <baseType ref="class_PtrNfaState_828AD9578262913C0B2EE4669E5D88681833D3E8"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_PtrNfaStateFactory_22C97F4BF85DB777D68618DE9DD3C7D2D3FFB5E2">
            <name>PtrNfaStateFactory</name>
        </type>
        <type derived="true" id="type.9348844">
            <name>PtrNfaStateFactory&amp;</name>
            <content>
                <baseType ref="class_PtrNfaStateFactory_22C97F4BF85DB777D68618DE9DD3C7D2D3FFB5E2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348843">
            <name>PtrNfaStateFactory*</name>
            <content>
                <baseType ref="class_PtrNfaStateFactory_22C97F4BF85DB777D68618DE9DD3C7D2D3FFB5E2"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349781">
            <name>PtrNfaStateFactory*&amp;</name>
            <content>
                <baseType ref="class_PtrNfaStateFactory_22C97F4BF85DB777D68618DE9DD3C7D2D3FFB5E2"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349780">
            <name>PtrNfaStateFactory**</name>
            <content>
                <baseType ref="class_PtrNfaStateFactory_22C97F4BF85DB777D68618DE9DD3C7D2D3FFB5E2"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9339081" specialization="true">
            <name>RandomAccessIter&lt;ActionParser*, const ActionParser*&amp;, const ActionParser**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9337276"/>
                <argumentType ref="type.9339079"/>
                <argumentType ref="type.9339080"/>
            </content>
        </type>
        <type derived="true" id="type.6172">
            <name>RandomAccessIter&lt;ActionParser*, const ActionParser*&amp;, const ActionParser**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9339081"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9333990" specialization="true">
            <name>RandomAccessIter&lt;Age*, const Age*&amp;, const Age**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9330100"/>
                <argumentType ref="type.9333833"/>
                <argumentType ref="type.9333989"/>
            </content>
        </type>
        <type derived="true" id="type.6064">
            <name>RandomAccessIter&lt;Age*, const Age*&amp;, const Age**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9333990"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9335030" specialization="true">
            <name>RandomAccessIter&lt;AliasType*, const AliasType*&amp;, const AliasType**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9330171"/>
                <argumentType ref="type.9334873"/>
                <argumentType ref="type.9335029"/>
            </content>
        </type>
        <type derived="true" id="type.6089">
            <name>RandomAccessIter&lt;AliasType*, const AliasType*&amp;, const AliasType**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9335030"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9334614" specialization="true">
            <name>RandomAccessIter&lt;BidiClass*, const BidiClass*&amp;, const BidiClass**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9330145"/>
                <argumentType ref="type.9334457"/>
                <argumentType ref="type.9334613"/>
            </content>
        </type>
        <type derived="true" id="type.6079">
            <name>RandomAccessIter&lt;BidiClass*, const BidiClass*&amp;, const BidiClass**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9334614"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9334822" specialization="true">
            <name>RandomAccessIter&lt;BidiPairedBracketType*, const BidiPairedBracketType*&amp;, const BidiPairedBracketType**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9330158"/>
                <argumentType ref="type.9334665"/>
                <argumentType ref="type.9334821"/>
            </content>
        </type>
        <type derived="true" id="type.6084">
            <name>RandomAccessIter&lt;BidiPairedBracketType*, const BidiPairedBracketType*&amp;, const BidiPairedBracketType**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9334822"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9333353" specialization="true">
            <name>RandomAccessIter&lt;BinaryProperty*, const BinaryProperty*&amp;, const BinaryProperty**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9330070"/>
                <argumentType ref="type.9333182"/>
                <argumentType ref="type.9333352"/>
            </content>
        </type>
        <type derived="true" id="type.6049">
            <name>RandomAccessIter&lt;BinaryProperty*, const BinaryProperty*&amp;, const BinaryProperty**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9333353"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9333571" specialization="true">
            <name>RandomAccessIter&lt;Block*, const Block*&amp;, const Block**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9330080"/>
                <argumentType ref="type.9333414"/>
                <argumentType ref="type.9333570"/>
            </content>
        </type>
        <type derived="true" id="type.6054">
            <name>RandomAccessIter&lt;Block*, const Block*&amp;, const Block**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9333571"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9338623" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Grammar*>*, Bucket&lt;Grammar*>*&amp;, Bucket&lt;Grammar*>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9338590"/>
                <argumentType ref="type.9338621"/>
                <argumentType ref="type.9338622"/>
            </content>
        </type>
        <type derived="true" id="type.6139">
            <name>RandomAccessIter&lt;Bucket&lt;Grammar*>*, Bucket&lt;Grammar*>*&amp;, Bucket&lt;Grammar*>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9338623"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9338614" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Grammar*>*, const Bucket&lt;Grammar*>*&amp;, const Bucket&lt;Grammar*>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9338590"/>
                <argumentType ref="type.9338612"/>
                <argumentType ref="type.9338613"/>
            </content>
        </type>
        <type derived="true" id="type.6138">
            <name>RandomAccessIter&lt;Bucket&lt;Grammar*>*, const Bucket&lt;Grammar*>*&amp;, const Bucket&lt;Grammar*>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9338614"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9331199" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9331165"/>
                <argumentType ref="type.9331197"/>
                <argumentType ref="type.9331198"/>
            </content>
        </type>
        <type id="type.9331121" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9331086"/>
                <argumentType ref="type.9331119"/>
                <argumentType ref="type.9331120"/>
            </content>
        </type>
        <type derived="true" id="type.5866">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9331121"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5871">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9331199"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9331190" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9331165"/>
                <argumentType ref="type.9331188"/>
                <argumentType ref="type.9331189"/>
            </content>
        </type>
        <type id="type.9331112" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9331086"/>
                <argumentType ref="type.9331110"/>
                <argumentType ref="type.9331111"/>
            </content>
        </type>
        <type derived="true" id="type.5865">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9331112"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5870">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9331190"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9333967" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Age*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9333933"/>
                <argumentType ref="type.9333965"/>
                <argumentType ref="type.9333966"/>
            </content>
        </type>
        <type derived="true" id="type.6063">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9333967"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9333958" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9333933"/>
                <argumentType ref="type.9333956"/>
                <argumentType ref="type.9333957"/>
            </content>
        </type>
        <type derived="true" id="type.6062">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9333958"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9335007" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9334973"/>
                <argumentType ref="type.9335005"/>
                <argumentType ref="type.9335006"/>
            </content>
        </type>
        <type derived="true" id="type.6088">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9335007"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9334998" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9334973"/>
                <argumentType ref="type.9334996"/>
                <argumentType ref="type.9334997"/>
            </content>
        </type>
        <type derived="true" id="type.6087">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9334998"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9334591" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9334557"/>
                <argumentType ref="type.9334589"/>
                <argumentType ref="type.9334590"/>
            </content>
        </type>
        <type derived="true" id="type.6078">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9334591"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9334582" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9334557"/>
                <argumentType ref="type.9334580"/>
                <argumentType ref="type.9334581"/>
            </content>
        </type>
        <type derived="true" id="type.6077">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9334582"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9334799" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9334765"/>
                <argumentType ref="type.9334797"/>
                <argumentType ref="type.9334798"/>
            </content>
        </type>
        <type derived="true" id="type.6083">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9334799"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9334790" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9334765"/>
                <argumentType ref="type.9334788"/>
                <argumentType ref="type.9334789"/>
            </content>
        </type>
        <type derived="true" id="type.6082">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9334790"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9333337" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9333303"/>
                <argumentType ref="type.9333335"/>
                <argumentType ref="type.9333336"/>
            </content>
        </type>
        <type derived="true" id="type.6048">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9333337"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9333328" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9333303"/>
                <argumentType ref="type.9333326"/>
                <argumentType ref="type.9333327"/>
            </content>
        </type>
        <type derived="true" id="type.6047">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9333328"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9333548" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Block*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9333514"/>
                <argumentType ref="type.9333546"/>
                <argumentType ref="type.9333547"/>
            </content>
        </type>
        <type derived="true" id="type.6053">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9333548"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9333539" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9333514"/>
                <argumentType ref="type.9333537"/>
                <argumentType ref="type.9333538"/>
            </content>
        </type>
        <type derived="true" id="type.6052">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9333539"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9333759" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9333725"/>
                <argumentType ref="type.9333757"/>
                <argumentType ref="type.9333758"/>
            </content>
        </type>
        <type derived="true" id="type.6058">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9333759"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9333750" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9333725"/>
                <argumentType ref="type.9333748"/>
                <argumentType ref="type.9333749"/>
            </content>
        </type>
        <type derived="true" id="type.6057">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9333750"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9334383" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9334349"/>
                <argumentType ref="type.9334381"/>
                <argumentType ref="type.9334382"/>
            </content>
        </type>
        <type derived="true" id="type.6073">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9334383"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9334374" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9334349"/>
                <argumentType ref="type.9334372"/>
                <argumentType ref="type.9334373"/>
            </content>
        </type>
        <type derived="true" id="type.6072">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9334374"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9334175" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Script*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9334141"/>
                <argumentType ref="type.9334173"/>
                <argumentType ref="type.9334174"/>
            </content>
        </type>
        <type derived="true" id="type.6068">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9334175"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9334166" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9334141"/>
                <argumentType ref="type.9334164"/>
                <argumentType ref="type.9334165"/>
            </content>
        </type>
        <type derived="true" id="type.6067">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9334166"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9338869" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9338835"/>
                <argumentType ref="type.9338867"/>
                <argumentType ref="type.9338868"/>
            </content>
        </type>
        <type derived="true" id="type.6163">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9338869"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9338860" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9338835"/>
                <argumentType ref="type.9338858"/>
                <argumentType ref="type.9338859"/>
            </content>
        </type>
        <type derived="true" id="type.6162">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9338860"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9338945" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9338911"/>
                <argumentType ref="type.9338943"/>
                <argumentType ref="type.9338944"/>
            </content>
        </type>
        <type derived="true" id="type.6165">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9338945"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9338936" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9338911"/>
                <argumentType ref="type.9338934"/>
                <argumentType ref="type.9338935"/>
            </content>
        </type>
        <type derived="true" id="type.6164">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9338936"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9339192" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9339158"/>
                <argumentType ref="type.9339190"/>
                <argumentType ref="type.9339191"/>
            </content>
        </type>
        <type derived="true" id="type.6175">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9339192"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9339183" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9339158"/>
                <argumentType ref="type.9339181"/>
                <argumentType ref="type.9339182"/>
            </content>
        </type>
        <type derived="true" id="type.6174">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9339183"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9338435" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*, Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9338401"/>
                <argumentType ref="type.9338433"/>
                <argumentType ref="type.9338434"/>
            </content>
        </type>
        <type derived="true" id="type.6134">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*, Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9338435"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9338426" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9338401"/>
                <argumentType ref="type.9338424"/>
                <argumentType ref="type.9338425"/>
            </content>
        </type>
        <type derived="true" id="type.6133">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9338426"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9333891" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9333857"/>
                <argumentType ref="type.9333889"/>
                <argumentType ref="type.9333890"/>
            </content>
        </type>
        <type derived="true" id="type.6061">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9333891"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9333882" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9333857"/>
                <argumentType ref="type.9333880"/>
                <argumentType ref="type.9333881"/>
            </content>
        </type>
        <type derived="true" id="type.6060">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9333882"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9334931" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9334897"/>
                <argumentType ref="type.9334929"/>
                <argumentType ref="type.9334930"/>
            </content>
        </type>
        <type derived="true" id="type.6086">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9334931"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9334922" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9334897"/>
                <argumentType ref="type.9334920"/>
                <argumentType ref="type.9334921"/>
            </content>
        </type>
        <type derived="true" id="type.6085">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9334922"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9334515" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9334481"/>
                <argumentType ref="type.9334513"/>
                <argumentType ref="type.9334514"/>
            </content>
        </type>
        <type derived="true" id="type.6076">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9334515"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9334506" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9334481"/>
                <argumentType ref="type.9334504"/>
                <argumentType ref="type.9334505"/>
            </content>
        </type>
        <type derived="true" id="type.6075">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9334506"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9334723" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9334689"/>
                <argumentType ref="type.9334721"/>
                <argumentType ref="type.9334722"/>
            </content>
        </type>
        <type derived="true" id="type.6081">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9334723"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9334714" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9334689"/>
                <argumentType ref="type.9334712"/>
                <argumentType ref="type.9334713"/>
            </content>
        </type>
        <type derived="true" id="type.6080">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9334714"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9333240" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9333206"/>
                <argumentType ref="type.9333238"/>
                <argumentType ref="type.9333239"/>
            </content>
        </type>
        <type derived="true" id="type.6046">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9333240"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9333231" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9333206"/>
                <argumentType ref="type.9333229"/>
                <argumentType ref="type.9333230"/>
            </content>
        </type>
        <type derived="true" id="type.6045">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9333231"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9333472" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9333438"/>
                <argumentType ref="type.9333470"/>
                <argumentType ref="type.9333471"/>
            </content>
        </type>
        <type derived="true" id="type.6051">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9333472"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9333463" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9333438"/>
                <argumentType ref="type.9333461"/>
                <argumentType ref="type.9333462"/>
            </content>
        </type>
        <type derived="true" id="type.6050">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9333463"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9333683" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9333649"/>
                <argumentType ref="type.9333681"/>
                <argumentType ref="type.9333682"/>
            </content>
        </type>
        <type derived="true" id="type.6056">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9333683"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9333674" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9333649"/>
                <argumentType ref="type.9333672"/>
                <argumentType ref="type.9333673"/>
            </content>
        </type>
        <type derived="true" id="type.6055">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9333674"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9334307" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9334273"/>
                <argumentType ref="type.9334305"/>
                <argumentType ref="type.9334306"/>
            </content>
        </type>
        <type derived="true" id="type.6071">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9334307"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9334298" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9334273"/>
                <argumentType ref="type.9334296"/>
                <argumentType ref="type.9334297"/>
            </content>
        </type>
        <type derived="true" id="type.6070">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9334298"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9334099" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9334065"/>
                <argumentType ref="type.9334097"/>
                <argumentType ref="type.9334098"/>
            </content>
        </type>
        <type derived="true" id="type.6066">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9334099"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9334090" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9334065"/>
                <argumentType ref="type.9334088"/>
                <argumentType ref="type.9334089"/>
            </content>
        </type>
        <type derived="true" id="type.6065">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9334090"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9338707" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;String&lt;uchar>>*, Bucket&lt;String&lt;uchar>>*&amp;, Bucket&lt;String&lt;uchar>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9338675"/>
                <argumentType ref="type.9338705"/>
                <argumentType ref="type.9338706"/>
            </content>
        </type>
        <type derived="true" id="type.6156">
            <name>RandomAccessIter&lt;Bucket&lt;String&lt;uchar>>*, Bucket&lt;String&lt;uchar>>*&amp;, Bucket&lt;String&lt;uchar>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9338707"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9338698" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;String&lt;uchar>>*, const Bucket&lt;String&lt;uchar>>*&amp;, const Bucket&lt;String&lt;uchar>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9338675"/>
                <argumentType ref="type.9338696"/>
                <argumentType ref="type.9338697"/>
            </content>
        </type>
        <type derived="true" id="type.6155">
            <name>RandomAccessIter&lt;Bucket&lt;String&lt;uchar>>*, const Bucket&lt;String&lt;uchar>>*&amp;, const Bucket&lt;String&lt;uchar>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9338698"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9331274" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9331240"/>
                <argumentType ref="type.9331272"/>
                <argumentType ref="type.9331273"/>
            </content>
        </type>
        <type id="type.9331348" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9331314"/>
                <argumentType ref="type.9331346"/>
                <argumentType ref="type.9331347"/>
            </content>
        </type>
        <type derived="true" id="type.5874">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9331274"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5878">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9331348"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9331339" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9331314"/>
                <argumentType ref="type.9331337"/>
                <argumentType ref="type.9331338"/>
            </content>
        </type>
        <type id="type.9331265" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9331240"/>
                <argumentType ref="type.9331263"/>
                <argumentType ref="type.9331264"/>
            </content>
        </type>
        <type id="type.9331339" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9331314"/>
                <argumentType ref="type.9331337"/>
                <argumentType ref="type.9331338"/>
            </content>
        </type>
        <type derived="true" id="type.5877">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9331339"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5873">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9331265"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9331459" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, Bucket&lt;ValueType>*&amp;, Bucket&lt;ValueType>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9331423"/>
                <argumentType ref="type.9331457"/>
                <argumentType ref="type.9331458"/>
            </content>
        </type>
        <type derived="true" id="type.5887">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, Bucket&lt;ValueType>*&amp;, Bucket&lt;ValueType>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9331459"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9331450" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, const Bucket&lt;ValueType>*&amp;, const Bucket&lt;ValueType>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9331423"/>
                <argumentType ref="type.9331448"/>
                <argumentType ref="type.9331449"/>
            </content>
        </type>
        <type derived="true" id="type.5886">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, const Bucket&lt;ValueType>*&amp;, const Bucket&lt;ValueType>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9331450"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF" specialization="true">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="9330009"/>
                <argumentType ref="type.9332844"/>
                <argumentType ref="type.9332845"/>
            </content>
        </type>
        <type derived="true" id="type.6034">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6030">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6026">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6022">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6016">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6038">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6042">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966" specialization="true">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="9330013"/>
                <argumentType ref="type.9333018"/>
                <argumentType ref="type.9333016"/>
            </content>
        </type>
        <type derived="true" id="type.6025">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6021">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6033">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6015">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6037">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6029">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6041">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9333782" specialization="true">
            <name>RandomAccessIter&lt;GeneralCategory*, const GeneralCategory*&amp;, const GeneralCategory**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9330090"/>
                <argumentType ref="type.9333625"/>
                <argumentType ref="type.9333781"/>
            </content>
        </type>
        <type derived="true" id="type.6059">
            <name>RandomAccessIter&lt;GeneralCategory*, const GeneralCategory*&amp;, const GeneralCategory**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9333782"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9338972" specialization="true">
            <name>RandomAccessIter&lt;Namespace*, const Namespace*&amp;, const Namespace**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9337381"/>
                <argumentType ref="type.9338887"/>
                <argumentType ref="type.9338968"/>
            </content>
        </type>
        <type derived="true" id="type.6166">
            <name>RandomAccessIter&lt;Namespace*, const Namespace*&amp;, const Namespace**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9338972"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9339107" specialization="true">
            <name>RandomAccessIter&lt;NonterminalParser*, const NonterminalParser*&amp;, const NonterminalParser**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9337389"/>
                <argumentType ref="type.9339105"/>
                <argumentType ref="type.9339106"/>
            </content>
        </type>
        <type derived="true" id="type.6173">
            <name>RandomAccessIter&lt;NonterminalParser*, const NonterminalParser*&amp;, const NonterminalParser**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9339107"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9334399" specialization="true">
            <name>RandomAccessIter&lt;NumericType*, const NumericType*&amp;, const NumericType**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9330132"/>
                <argumentType ref="type.9334249"/>
                <argumentType ref="type.9334398"/>
            </content>
        </type>
        <type derived="true" id="type.6074">
            <name>RandomAccessIter&lt;NumericType*, const NumericType*&amp;, const NumericType**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9334399"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9349627" specialization="true">
            <name>RandomAccessIter&lt;PtrNfaState*, PtrNfaState*&amp;, PtrNfaState**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9348831"/>
                <argumentType ref="type.9349625"/>
                <argumentType ref="type.9349626"/>
            </content>
        </type>
        <type derived="true" id="type.9349629">
            <name>RandomAccessIter&lt;PtrNfaState*, PtrNfaState*&amp;, PtrNfaState**>&amp;</name>
            <content>
                <baseType ref="type.9349627"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349633">
            <name>RandomAccessIter&lt;PtrNfaState*, PtrNfaState*&amp;, PtrNfaState**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9349627"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349628">
            <name>RandomAccessIter&lt;PtrNfaState*, PtrNfaState*&amp;, PtrNfaState**>*</name>
            <content>
                <baseType ref="type.9349627"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9349618" specialization="true">
            <name>RandomAccessIter&lt;PtrNfaState*, const PtrNfaState*&amp;, const PtrNfaState**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9348831"/>
                <argumentType ref="type.9349616"/>
                <argumentType ref="type.9349617"/>
            </content>
        </type>
        <type derived="true" id="type.9349620">
            <name>RandomAccessIter&lt;PtrNfaState*, const PtrNfaState*&amp;, const PtrNfaState**>&amp;</name>
            <content>
                <baseType ref="type.9349618"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349624">
            <name>RandomAccessIter&lt;PtrNfaState*, const PtrNfaState*&amp;, const PtrNfaState**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9349618"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349619">
            <name>RandomAccessIter&lt;PtrNfaState*, const PtrNfaState*&amp;, const PtrNfaState**>*</name>
            <content>
                <baseType ref="type.9349618"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9338520" specialization="true">
            <name>RandomAccessIter&lt;RuleLink*, const RuleLink*&amp;, const RuleLink**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9337620"/>
                <argumentType ref="type.9338518"/>
                <argumentType ref="type.9338519"/>
            </content>
        </type>
        <type derived="true" id="type.6137">
            <name>RandomAccessIter&lt;RuleLink*, const RuleLink*&amp;, const RuleLink**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9338520"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9334198" specialization="true">
            <name>RandomAccessIter&lt;Script*, const Script*&amp;, const Script**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9330113"/>
                <argumentType ref="type.9334041"/>
                <argumentType ref="type.9334197"/>
            </content>
        </type>
        <type derived="true" id="type.6069">
            <name>RandomAccessIter&lt;Script*, const Script*&amp;, const Script**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9334198"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9332961" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.9332924"/>
                <argumentType ref="type.9332923"/>
            </content>
        </type>
        <type id="type.9332867" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.9332830"/>
                <argumentType ref="type.9332829"/>
            </content>
        </type>
        <type id="type.9332914" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.9332877"/>
                <argumentType ref="type.9332876"/>
            </content>
        </type>
        <type id="type.9333008" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.9332971"/>
                <argumentType ref="type.9332970"/>
            </content>
        </type>
        <type id="type.9333102" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.9333065"/>
                <argumentType ref="type.9333064"/>
            </content>
        </type>
        <type id="type.9332820" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.9332783"/>
                <argumentType ref="type.9332782"/>
            </content>
        </type>
        <type id="type.9332961" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.9332924"/>
                <argumentType ref="type.9332923"/>
            </content>
        </type>
        <type id="type.9333055" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.9333021"/>
                <argumentType ref="type.9333020"/>
            </content>
        </type>
        <type derived="true" id="type.6028">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9332914"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6040">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9333055"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6032">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9332961"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6024">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9332867"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6044">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9333102"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6019">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9332820"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6036">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9333008"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9332813" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.9332786"/>
                <argumentType ref="type.9332785"/>
            </content>
        </type>
        <type id="type.9332907" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.9332880"/>
                <argumentType ref="type.9332879"/>
            </content>
        </type>
        <type id="type.9333001" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.9332974"/>
                <argumentType ref="type.9332973"/>
            </content>
        </type>
        <type id="type.9332860" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.9332833"/>
                <argumentType ref="type.9332832"/>
            </content>
        </type>
        <type id="type.9332813" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.9332786"/>
                <argumentType ref="type.9332785"/>
            </content>
        </type>
        <type id="type.9333095" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.9333068"/>
                <argumentType ref="type.9333067"/>
            </content>
        </type>
        <type id="type.9332954" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.9332927"/>
                <argumentType ref="type.9332926"/>
            </content>
        </type>
        <type id="type.9333048" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.9333024"/>
                <argumentType ref="type.9333023"/>
            </content>
        </type>
        <type derived="true" id="type.6027">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9332907"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6035">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9333001"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6018">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9332813"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6039">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9333048"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6023">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9332860"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6043">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9333095"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6031">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9332954"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9330353" specialization="true">
            <name>RandomAccessIter&lt;String&lt;char>, String&lt;char>&amp;, String&lt;char>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9330318"/>
                <argumentType ref="type.9330320"/>
                <argumentType ref="type.9330319"/>
            </content>
        </type>
        <type derived="true" id="type.5788">
            <name>RandomAccessIter&lt;String&lt;char>, String&lt;char>&amp;, String&lt;char>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9330353"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9330346" specialization="true">
            <name>RandomAccessIter&lt;String&lt;char>, const String&lt;char>&amp;, const String&lt;char>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9330318"/>
                <argumentType ref="type.9330323"/>
                <argumentType ref="type.9330322"/>
            </content>
        </type>
        <type derived="true" id="type.5787">
            <name>RandomAccessIter&lt;String&lt;char>, const String&lt;char>&amp;, const String&lt;char>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9330346"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9330443" specialization="true">
            <name>RandomAccessIter&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9330406"/>
                <argumentType ref="type.9330408"/>
                <argumentType ref="type.9330407"/>
            </content>
        </type>
        <type derived="true" id="type.5807">
            <name>RandomAccessIter&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9330443"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9330436" specialization="true">
            <name>RandomAccessIter&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9330406"/>
                <argumentType ref="type.9330411"/>
                <argumentType ref="type.9330410"/>
            </content>
        </type>
        <type derived="true" id="type.5806">
            <name>RandomAccessIter&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9330436"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9330398" specialization="true">
            <name>RandomAccessIter&lt;String&lt;wchar>, String&lt;wchar>&amp;, String&lt;wchar>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9330361"/>
                <argumentType ref="type.9330363"/>
                <argumentType ref="type.9330362"/>
            </content>
        </type>
        <type derived="true" id="type.5797">
            <name>RandomAccessIter&lt;String&lt;wchar>, String&lt;wchar>&amp;, String&lt;wchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9330398"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9330391" specialization="true">
            <name>RandomAccessIter&lt;String&lt;wchar>, const String&lt;wchar>&amp;, const String&lt;wchar>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9330361"/>
                <argumentType ref="type.9330366"/>
                <argumentType ref="type.9330365"/>
            </content>
        </type>
        <type derived="true" id="type.5796">
            <name>RandomAccessIter&lt;String&lt;wchar>, const String&lt;wchar>&amp;, const String&lt;wchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9330391"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9339057" specialization="true">
            <name>RandomAccessIter&lt;System.Text.Parsing.AttrOrVar, const AttrOrVar&amp;, const AttrOrVar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_AttrOrVar_50B6EF23E232C2A406B7F5C94499D4CC0CC6D353"/>
                <argumentType ref="type.9337612"/>
                <argumentType ref="type.9337611"/>
            </content>
        </type>
        <type derived="true" id="type.6171">
            <name>RandomAccessIter&lt;System.Text.Parsing.AttrOrVar, const AttrOrVar&amp;, const AttrOrVar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9339057"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9339043" specialization="true">
            <name>RandomAccessIter&lt;System.Text.Parsing.CharRange, CharRange&amp;, CharRange*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_CharRange_59BCB010C02C8EB081B9C5DB566155FFE78B44CC"/>
                <argumentType ref="type.9337447"/>
                <argumentType ref="type.9337446"/>
            </content>
        </type>
        <type derived="true" id="type.6170">
            <name>RandomAccessIter&lt;System.Text.Parsing.CharRange, CharRange&amp;, CharRange*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9339043"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9339036" specialization="true">
            <name>RandomAccessIter&lt;System.Text.Parsing.CharRange, const CharRange&amp;, const CharRange*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_CharRange_59BCB010C02C8EB081B9C5DB566155FFE78B44CC"/>
                <argumentType ref="type.9337450"/>
                <argumentType ref="type.9337449"/>
            </content>
        </type>
        <type derived="true" id="type.6169">
            <name>RandomAccessIter&lt;System.Text.Parsing.CharRange, const CharRange&amp;, const CharRange*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9339036"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9338794" specialization="true">
            <name>RandomAccessIter&lt;System.Text.Parsing.RuleData, RuleData&amp;, RuleData*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_RuleData_8D0490A7E12ED026B00D026E032926DF8F5F526A"/>
                <argumentType ref="type.9338776"/>
                <argumentType ref="type.9338775"/>
            </content>
        </type>
        <type derived="true" id="type.6161">
            <name>RandomAccessIter&lt;System.Text.Parsing.RuleData, RuleData&amp;, RuleData*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9338794"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9338787" specialization="true">
            <name>RandomAccessIter&lt;System.Text.Parsing.RuleData, const RuleData&amp;, const RuleData*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_RuleData_8D0490A7E12ED026B00D026E032926DF8F5F526A"/>
                <argumentType ref="type.9338784"/>
                <argumentType ref="type.9338785"/>
            </content>
        </type>
        <type derived="true" id="type.6160">
            <name>RandomAccessIter&lt;System.Text.Parsing.RuleData, const RuleData&amp;, const RuleData*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9338787"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9349547" specialization="true">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.DfaState, DfaState&amp;, DfaState*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_DfaState_9705397F7C4EF22AB411D3A2CD2F07D838F85228"/>
                <argumentType ref="type.9348799"/>
                <argumentType ref="type.9348798"/>
            </content>
        </type>
        <type derived="true" id="type.9349549">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.DfaState, DfaState&amp;, DfaState*>&amp;</name>
            <content>
                <baseType ref="type.9349547"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6210">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.DfaState, DfaState&amp;, DfaState*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9349547"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349548">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.DfaState, DfaState&amp;, DfaState*>*</name>
            <content>
                <baseType ref="type.9349547"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9349540" specialization="true">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.DfaState, const DfaState&amp;, const DfaState*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_DfaState_9705397F7C4EF22AB411D3A2CD2F07D838F85228"/>
                <argumentType ref="type.9348802"/>
                <argumentType ref="type.9348801"/>
            </content>
        </type>
        <type derived="true" id="type.9349542">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.DfaState, const DfaState&amp;, const DfaState*>&amp;</name>
            <content>
                <baseType ref="type.9349540"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6209">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.DfaState, const DfaState&amp;, const DfaState*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9349540"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349541">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.DfaState, const DfaState&amp;, const DfaState*>*</name>
            <content>
                <baseType ref="type.9349540"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9349569" specialization="true">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.NfaState, NfaState&amp;, NfaState*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_NfaState_9D1ED32B9E916097B40ADF566ECF8BF84ACD9662"/>
                <argumentType ref="type.9348817"/>
                <argumentType ref="type.9348816"/>
            </content>
        </type>
        <type derived="true" id="type.9349571">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.NfaState, NfaState&amp;, NfaState*>&amp;</name>
            <content>
                <baseType ref="type.9349569"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6211">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.NfaState, NfaState&amp;, NfaState*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9349569"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349570">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.NfaState, NfaState&amp;, NfaState*>*</name>
            <content>
                <baseType ref="type.9349569"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9349562" specialization="true">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.NfaState, const NfaState&amp;, const NfaState*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_NfaState_9D1ED32B9E916097B40ADF566ECF8BF84ACD9662"/>
                <argumentType ref="type.9348820"/>
                <argumentType ref="type.9348819"/>
            </content>
        </type>
        <type derived="true" id="type.9349564">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.NfaState, const NfaState&amp;, const NfaState*>&amp;</name>
            <content>
                <baseType ref="type.9349562"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349568">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.NfaState, const NfaState&amp;, const NfaState*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9349562"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349563">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.NfaState, const NfaState&amp;, const NfaState*>*</name>
            <content>
                <baseType ref="type.9349562"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9349520" specialization="true">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.NfaStateNumberSet, NfaStateNumberSet&amp;, NfaStateNumberSet*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_NfaStateNumberSet_94283B9E90ECB564FEF4909226A69DC50DFBEAC3"/>
                <argumentType ref="type.9348811"/>
                <argumentType ref="type.9348810"/>
            </content>
        </type>
        <type derived="true" id="type.9349522">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.NfaStateNumberSet, NfaStateNumberSet&amp;, NfaStateNumberSet*>&amp;</name>
            <content>
                <baseType ref="type.9349520"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6208">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.NfaStateNumberSet, NfaStateNumberSet&amp;, NfaStateNumberSet*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9349520"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349521">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.NfaStateNumberSet, NfaStateNumberSet&amp;, NfaStateNumberSet*>*</name>
            <content>
                <baseType ref="type.9349520"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9349513" specialization="true">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.NfaStateNumberSet, const NfaStateNumberSet&amp;, const NfaStateNumberSet*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_NfaStateNumberSet_94283B9E90ECB564FEF4909226A69DC50DFBEAC3"/>
                <argumentType ref="type.9348814"/>
                <argumentType ref="type.9348813"/>
            </content>
        </type>
        <type derived="true" id="type.9349515">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.NfaStateNumberSet, const NfaStateNumberSet&amp;, const NfaStateNumberSet*>&amp;</name>
            <content>
                <baseType ref="type.9349513"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349519">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.NfaStateNumberSet, const NfaStateNumberSet&amp;, const NfaStateNumberSet*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9349513"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349514">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.NfaStateNumberSet, const NfaStateNumberSet&amp;, const NfaStateNumberSet*>*</name>
            <content>
                <baseType ref="type.9349513"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9349602" specialization="true">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.PtrNfaEdge, PtrNfaEdge&amp;, PtrNfaEdge*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_PtrNfaEdge_937C7F61A080B689DF3D122F26A5057032EE2DB3"/>
                <argumentType ref="type.9348838"/>
                <argumentType ref="type.9348837"/>
            </content>
        </type>
        <type derived="true" id="type.9349604">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.PtrNfaEdge, PtrNfaEdge&amp;, PtrNfaEdge*>&amp;</name>
            <content>
                <baseType ref="type.9349602"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349608">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.PtrNfaEdge, PtrNfaEdge&amp;, PtrNfaEdge*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9349602"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349603">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.PtrNfaEdge, PtrNfaEdge&amp;, PtrNfaEdge*>*</name>
            <content>
                <baseType ref="type.9349602"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9349595" specialization="true">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.PtrNfaEdge, const PtrNfaEdge&amp;, const PtrNfaEdge*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_PtrNfaEdge_937C7F61A080B689DF3D122F26A5057032EE2DB3"/>
                <argumentType ref="type.9348841"/>
                <argumentType ref="type.9348840"/>
            </content>
        </type>
        <type derived="true" id="type.9349597">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.PtrNfaEdge, const PtrNfaEdge&amp;, const PtrNfaEdge*>&amp;</name>
            <content>
                <baseType ref="type.9349595"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349601">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.PtrNfaEdge, const PtrNfaEdge&amp;, const PtrNfaEdge*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9349595"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349596">
            <name>RandomAccessIter&lt;System.Text.RegularExpressions.PtrNfaEdge, const PtrNfaEdge&amp;, const PtrNfaEdge*>*</name>
            <content>
                <baseType ref="type.9349595"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9335060" specialization="true">
            <name>RandomAccessIter&lt;System.Unicode.Alias, Alias&amp;, Alias*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_Alias_F5EF8FC9193282B25B9E84210775A55CF0A14DB2"/>
                <argumentType ref="type.9330184"/>
                <argumentType ref="type.9330183"/>
            </content>
        </type>
        <type derived="true" id="type.6091">
            <name>RandomAccessIter&lt;System.Unicode.Alias, Alias&amp;, Alias*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9335060"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9335053" specialization="true">
            <name>RandomAccessIter&lt;System.Unicode.Alias, const Alias&amp;, const Alias*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_Alias_F5EF8FC9193282B25B9E84210775A55CF0A14DB2"/>
                <argumentType ref="type.9330187"/>
                <argumentType ref="type.9330186"/>
            </content>
        </type>
        <type derived="true" id="type.6090">
            <name>RandomAccessIter&lt;System.Unicode.Alias, const Alias&amp;, const Alias*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9335053"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484" specialization="true">
            <name>RandomAccessIter&lt;T, R, P></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="9329906"/>
                <argumentType ref="9329907"/>
                <argumentType ref="9329908"/>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484" specialization="true">
            <name>RandomAccessIter&lt;T, R, P></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="9329918"/>
                <argumentType ref="9329919"/>
                <argumentType ref="9329920"/>
            </content>
        </type>
        <type derived="true" id="type.5933">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5938">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5934">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5935">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5936">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5937">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5939">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7" specialization="true">
            <name>RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="9329855"/>
                <argumentType ref="type.9331654"/>
                <argumentType ref="type.9331655"/>
            </content>
        </type>
        <type derived="true" id="type.5899">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5901">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6013">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5931">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5895">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892" specialization="true">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="9329857"/>
                <argumentType ref="type.9331698"/>
                <argumentType ref="type.9331699"/>
            </content>
        </type>
        <type derived="true" id="type.6012">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5894">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5930">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5900">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5898">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9337091" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9337075"/>
                <argumentType ref="type.9337080"/>
                <argumentType ref="type.9337079"/>
            </content>
        </type>
        <type derived="true" id="type.6122">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9337091"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9337151" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9337135"/>
                <argumentType ref="type.9337140"/>
                <argumentType ref="type.9337139"/>
            </content>
        </type>
        <type derived="true" id="type.6123">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9337151"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9336990" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9336950"/>
                <argumentType ref="type.9336955"/>
                <argumentType ref="type.9336954"/>
            </content>
        </type>
        <type derived="true" id="type.6120">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9336990"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9337042" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9337029"/>
                <argumentType ref="type.9337034"/>
                <argumentType ref="type.9337033"/>
            </content>
        </type>
        <type derived="true" id="type.6121">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9337042"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9338760" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Context>, const UniquePtr&lt;System.Text.Parsing.Context>&amp;, const UniquePtr&lt;System.Text.Parsing.Context>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9338738"/>
                <argumentType ref="type.9338743"/>
                <argumentType ref="type.9338742"/>
            </content>
        </type>
        <type derived="true" id="type.6159">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Context>, const UniquePtr&lt;System.Text.Parsing.Context>&amp;, const UniquePtr&lt;System.Text.Parsing.Context>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9338760"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9338333" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Object>, const UniquePtr&lt;System.Text.Parsing.Object>&amp;, const UniquePtr&lt;System.Text.Parsing.Object>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9338311"/>
                <argumentType ref="type.9338316"/>
                <argumentType ref="type.9338315"/>
            </content>
        </type>
        <type derived="true" id="type.6132">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Object>, const UniquePtr&lt;System.Text.Parsing.Object>&amp;, const UniquePtr&lt;System.Text.Parsing.Object>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9338333"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9339018" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>, UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;, UniquePtr&lt;System.Text.Parsing.ParsingDomain>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9338998"/>
                <argumentType ref="type.9339000"/>
                <argumentType ref="type.9338999"/>
            </content>
        </type>
        <type derived="true" id="type.6168">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>, UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;, UniquePtr&lt;System.Text.Parsing.ParsingDomain>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9339018"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9339011" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>, const UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;, const UniquePtr&lt;System.Text.Parsing.ParsingDomain>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9338998"/>
                <argumentType ref="type.9339003"/>
                <argumentType ref="type.9339002"/>
            </content>
        </type>
        <type derived="true" id="type.6167">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>, const UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;, const UniquePtr&lt;System.Text.Parsing.ParsingDomain>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9339011"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9338302" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>, UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;, UniquePtr&lt;System.Text.Parsing.ParsingObject>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9338282"/>
                <argumentType ref="type.9338284"/>
                <argumentType ref="type.9338283"/>
            </content>
        </type>
        <type derived="true" id="type.6131">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>, UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;, UniquePtr&lt;System.Text.Parsing.ParsingObject>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9338302"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9338295" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>, const UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;, const UniquePtr&lt;System.Text.Parsing.ParsingObject>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9338282"/>
                <argumentType ref="type.9338287"/>
                <argumentType ref="type.9338286"/>
            </content>
        </type>
        <type derived="true" id="type.6130">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>, const UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;, const UniquePtr&lt;System.Text.Parsing.ParsingObject>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9338295"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9335089" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, UniquePtr&lt;System.Unicode.CharacterInfo>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9335069"/>
                <argumentType ref="type.9335071"/>
                <argumentType ref="type.9335070"/>
            </content>
        </type>
        <type derived="true" id="type.6093">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, UniquePtr&lt;System.Unicode.CharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9335089"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9335082" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, const UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfo>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9335069"/>
                <argumentType ref="type.9335074"/>
                <argumentType ref="type.9335073"/>
            </content>
        </type>
        <type derived="true" id="type.6092">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, const UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9335082"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9335185" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.CharacterInfoPage>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9335165"/>
                <argumentType ref="type.9335167"/>
                <argumentType ref="type.9335166"/>
            </content>
        </type>
        <type derived="true" id="type.6109">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.CharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9335185"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9335178" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, const UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfoPage>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9335165"/>
                <argumentType ref="type.9335170"/>
                <argumentType ref="type.9335169"/>
            </content>
        </type>
        <type derived="true" id="type.6108">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, const UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9335178"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9335117" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9335097"/>
                <argumentType ref="type.9335099"/>
                <argumentType ref="type.9335098"/>
            </content>
        </type>
        <type derived="true" id="type.6095">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9335117"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9335110" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9335097"/>
                <argumentType ref="type.9335102"/>
                <argumentType ref="type.9335101"/>
            </content>
        </type>
        <type derived="true" id="type.6094">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9335110"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9335220" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9335200"/>
                <argumentType ref="type.9335202"/>
                <argumentType ref="type.9335201"/>
            </content>
        </type>
        <type derived="true" id="type.6111">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9335220"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9335213" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9335200"/>
                <argumentType ref="type.9335205"/>
                <argumentType ref="type.9335204"/>
            </content>
        </type>
        <type derived="true" id="type.6110">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9335213"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9337936" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9329179"/>
                <argumentType ref="type.9329200"/>
                <argumentType ref="type.9329199"/>
            </content>
        </type>
        <type id="type.9349052" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9329179"/>
                <argumentType ref="type.9329200"/>
                <argumentType ref="type.9329199"/>
            </content>
        </type>
        <type id="type.9336711" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9329179"/>
                <argumentType ref="type.9329200"/>
                <argumentType ref="type.9329199"/>
            </content>
        </type>
        <type id="type.9331808" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9329179"/>
                <argumentType ref="type.9329200"/>
                <argumentType ref="type.9329199"/>
            </content>
        </type>
        <type id="type.5909" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9329179"/>
                <argumentType ref="type.9329200"/>
                <argumentType ref="type.9329199"/>
            </content>
        </type>
        <type derived="true" id="type.9349054">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <baseType ref="type.9349052"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5911">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <baseType ref="type.5909"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349054">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <baseType ref="type.9349052"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5915">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5909"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5916">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9331808"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6128">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9337936"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6199">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9349052"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6118">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9336711"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349053">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <baseType ref="type.9349052"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5910">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <baseType ref="type.5909"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9348923" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9329188"/>
                <argumentType ref="type.9329227"/>
                <argumentType ref="type.9329226"/>
            </content>
        </type>
        <type id="type.9337807" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9329188"/>
                <argumentType ref="type.9329227"/>
                <argumentType ref="type.9329226"/>
            </content>
        </type>
        <type id="type.9336582" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9329188"/>
                <argumentType ref="type.9329227"/>
                <argumentType ref="type.9329226"/>
            </content>
        </type>
        <type id="type.5780" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9329188"/>
                <argumentType ref="type.9329227"/>
                <argumentType ref="type.9329226"/>
            </content>
        </type>
        <type id="type.9348923" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9329188"/>
                <argumentType ref="type.9329227"/>
                <argumentType ref="type.9329226"/>
            </content>
        </type>
        <type derived="true" id="type.5782">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <baseType ref="type.5780"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348925">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <baseType ref="type.9348923"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348929">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9348923"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5786">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5780"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6114">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9336582"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348929">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9348923"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6124">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9337807"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5781">
            <name>RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <baseType ref="type.5780"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348924">
            <name>RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <baseType ref="type.9348923"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9349492" specialization="true">
            <name>RandomAccessIter&lt;int, const int&amp;, const int*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9329182"/>
                <argumentType ref="type.9339284"/>
                <argumentType ref="type.9349490"/>
            </content>
        </type>
        <type derived="true" id="type.9349494">
            <name>RandomAccessIter&lt;int, const int&amp;, const int*>&amp;</name>
            <content>
                <baseType ref="type.9349492"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349498">
            <name>RandomAccessIter&lt;int, const int&amp;, const int*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9349492"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349493">
            <name>RandomAccessIter&lt;int, const int&amp;, const int*>*</name>
            <content>
                <baseType ref="type.9349492"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.6201" specialization="true">
            <name>RandomAccessIter&lt;int, int&amp;, int*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9329182"/>
                <argumentType ref="type.9329209"/>
                <argumentType ref="type.9329208"/>
            </content>
        </type>
        <type id="type.9349499" specialization="true">
            <name>RandomAccessIter&lt;int, int&amp;, int*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9329182"/>
                <argumentType ref="type.9329209"/>
                <argumentType ref="type.9329208"/>
            </content>
        </type>
        <type derived="true" id="type.6203">
            <name>RandomAccessIter&lt;int, int&amp;, int*>&amp;</name>
            <content>
                <baseType ref="type.6201"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349501">
            <name>RandomAccessIter&lt;int, int&amp;, int*>&amp;</name>
            <content>
                <baseType ref="type.9349499"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349505">
            <name>RandomAccessIter&lt;int, int&amp;, int*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9349499"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6207">
            <name>RandomAccessIter&lt;int, int&amp;, int*>&amp;&amp;</name>
            <content>
                <baseType ref="type.6201"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349505">
            <name>RandomAccessIter&lt;int, int&amp;, int*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9349499"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6202">
            <name>RandomAccessIter&lt;int, int&amp;, int*>*</name>
            <content>
                <baseType ref="type.6201"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349500">
            <name>RandomAccessIter&lt;int, int&amp;, int*>*</name>
            <content>
                <baseType ref="type.9349499"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9348942" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9329190"/>
                <argumentType ref="type.9329233"/>
                <argumentType ref="type.9329232"/>
            </content>
        </type>
        <type id="type.9337826" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9329190"/>
                <argumentType ref="type.9329233"/>
                <argumentType ref="type.9329232"/>
            </content>
        </type>
        <type id="type.9330422" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9329190"/>
                <argumentType ref="type.9329233"/>
                <argumentType ref="type.9329232"/>
            </content>
        </type>
        <type id="type.9336601" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9329190"/>
                <argumentType ref="type.9329233"/>
                <argumentType ref="type.9329232"/>
            </content>
        </type>
        <type id="type.5799" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9329190"/>
                <argumentType ref="type.9329233"/>
                <argumentType ref="type.9329232"/>
            </content>
        </type>
        <type derived="true" id="type.5801">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <baseType ref="type.5799"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348944">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <baseType ref="type.9348942"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6197">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9348942"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6116">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9336601"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6126">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9337826"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5808">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9330422"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5805">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5799"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5800">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <baseType ref="type.5799"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348943">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <baseType ref="type.9348942"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9335134" specialization="true">
            <name>RandomAccessIter&lt;uint, const uint&amp;, const uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9329183"/>
                <argumentType ref="type.9335131"/>
                <argumentType ref="type.9335132"/>
            </content>
        </type>
        <type derived="true" id="type.6096">
            <name>RandomAccessIter&lt;uint, const uint&amp;, const uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9335134"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9349241" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9329183"/>
                <argumentType ref="type.9329212"/>
                <argumentType ref="type.9329211"/>
            </content>
        </type>
        <type id="type.9335141" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9329183"/>
                <argumentType ref="type.9329212"/>
                <argumentType ref="type.9329211"/>
            </content>
        </type>
        <type id="type.9338125" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9329183"/>
                <argumentType ref="type.9329212"/>
                <argumentType ref="type.9329211"/>
            </content>
        </type>
        <type id="type.9336900" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9329183"/>
                <argumentType ref="type.9329212"/>
                <argumentType ref="type.9329211"/>
            </content>
        </type>
        <type id="type.9349241" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9329183"/>
                <argumentType ref="type.9329212"/>
                <argumentType ref="type.9329211"/>
            </content>
        </type>
        <type id="type.6097" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9329183"/>
                <argumentType ref="type.9329212"/>
                <argumentType ref="type.9329211"/>
            </content>
        </type>
        <type derived="true" id="type.6099">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <baseType ref="type.6097"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349243">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <baseType ref="type.9349241"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6104">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9335141"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6103">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.6097"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6200">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9349241"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6129">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9338125"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6119">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9336900"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6098">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <baseType ref="type.6097"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349242">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <baseType ref="type.9349241"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9330465" specialization="true">
            <name>RandomAccessIter&lt;ulong, const ulong&amp;, const ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9329185"/>
                <argumentType ref="type.9330462"/>
                <argumentType ref="type.9330463"/>
            </content>
        </type>
        <type derived="true" id="type.5809">
            <name>RandomAccessIter&lt;ulong, const ulong&amp;, const ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9330465"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5810" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9329185"/>
                <argumentType ref="type.9329218"/>
                <argumentType ref="type.9329217"/>
            </content>
        </type>
        <type id="type.9337837" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9329185"/>
                <argumentType ref="type.9329218"/>
                <argumentType ref="type.9329217"/>
            </content>
        </type>
        <type id="type.9336612" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9329185"/>
                <argumentType ref="type.9329218"/>
                <argumentType ref="type.9329217"/>
            </content>
        </type>
        <type id="type.9348953" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9329185"/>
                <argumentType ref="type.9329218"/>
                <argumentType ref="type.9329217"/>
            </content>
        </type>
        <type id="type.9330472" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9329185"/>
                <argumentType ref="type.9329218"/>
                <argumentType ref="type.9329217"/>
            </content>
        </type>
        <type id="type.9348953" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9329185"/>
                <argumentType ref="type.9329218"/>
                <argumentType ref="type.9329217"/>
            </content>
        </type>
        <type derived="true" id="type.9348955">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <baseType ref="type.9348953"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5812">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <baseType ref="type.5810"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348955">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <baseType ref="type.9348953"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6127">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9337837"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5816">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5810"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5817">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9330472"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6117">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9336612"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6198">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9348953"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5811">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <baseType ref="type.5810"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348954">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <baseType ref="type.9348953"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9336591" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9329189"/>
                <argumentType ref="type.9329230"/>
                <argumentType ref="type.9329229"/>
            </content>
        </type>
        <type id="type.9348932" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9329189"/>
                <argumentType ref="type.9329230"/>
                <argumentType ref="type.9329229"/>
            </content>
        </type>
        <type id="type.9337816" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9329189"/>
                <argumentType ref="type.9329230"/>
                <argumentType ref="type.9329229"/>
            </content>
        </type>
        <type id="type.9348932" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9329189"/>
                <argumentType ref="type.9329230"/>
                <argumentType ref="type.9329229"/>
            </content>
        </type>
        <type id="type.5789" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9329189"/>
                <argumentType ref="type.9329230"/>
                <argumentType ref="type.9329229"/>
            </content>
        </type>
        <type id="type.9330377" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9329189"/>
                <argumentType ref="type.9329230"/>
                <argumentType ref="type.9329229"/>
            </content>
        </type>
        <type derived="true" id="type.9348934">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <baseType ref="type.9348932"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5791">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <baseType ref="type.5789"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348934">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <baseType ref="type.9348932"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5798">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9330377"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6125">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9337816"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6115">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9336591"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6196">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9348932"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5795">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5789"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348933">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <baseType ref="type.9348932"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5790">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <baseType ref="type.5789"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348933">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <baseType ref="type.9348932"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047" specialization="true">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare></name>
            <content>
                <primaryType ref="class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <argumentType ref="9329862"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <argumentType ref="9329864"/>
            </content>
        </type>
        <type derived="true" id="type.5906">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2" specialization="true">
            <name>RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare></name>
            <content>
                <primaryType ref="class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <argumentType ref="9329941"/>
                <argumentType ref="9329942"/>
                <argumentType ref="9329943"/>
                <argumentType ref="9329944"/>
            </content>
        </type>
        <type derived="true" id="type.5948">
            <name>RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTree_T_T_Identity_T_C_BC4C30A5A170B2B4B4BF9109198D17D5A1BD03D3" specialization="true">
            <name>RedBlackTree&lt;T, T, Identity&lt;T>, C></name>
            <content>
                <primaryType ref="class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <argumentType ref="9329947"/>
                <argumentType ref="9329947"/>
                <argumentType ref="type.class_Identity_T_9DD2E12D3D49B8316EA22259EDBD89C3FE6A1C09"/>
                <argumentType ref="9329948"/>
            </content>
        </type>
        <type derived="true" id="type.5953">
            <name>RedBlackTree&lt;T, T, Identity&lt;T>, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_T_T_Identity_T_C_BC4C30A5A170B2B4B4BF9109198D17D5A1BD03D3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348746">
            <name>RedBlackTreeNodeBase&amp;</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5769">
            <name>RedBlackTreeNodeBase&amp;</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348746">
            <name>RedBlackTreeNodeBase&amp;</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6231">
            <name>RedBlackTreeNodeBase&amp;&amp;</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348745">
            <name>RedBlackTreeNodeBase*</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5768">
            <name>RedBlackTreeNodeBase*</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348745">
            <name>RedBlackTreeNodeBase*</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9331772" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.9331733"/>
                <argumentType ref="type.9331732"/>
            </content>
        </type>
        <type derived="true" id="type.5905">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9331772"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9331754" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.9331743"/>
                <argumentType ref="type.9331752"/>
            </content>
        </type>
        <type derived="true" id="type.5904">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9331754"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, R, P></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="9329937"/>
                <argumentType ref="9329938"/>
                <argumentType ref="9329939"/>
            </content>
        </type>
        <type derived="true" id="type.5944">
            <name>RedBlackTreeNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5945">
            <name>RedBlackTreeNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="9329949"/>
                <argumentType ref="type.9332141"/>
                <argumentType ref="type.9332143"/>
            </content>
        </type>
        <type derived="true" id="type.5956">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5958">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5952">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="9329949"/>
                <argumentType ref="type.9332118"/>
                <argumentType ref="type.9332127"/>
            </content>
        </type>
        <type derived="true" id="type.5951">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5957">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5955">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_R_ValueType_P_A72EE6DFD58F3068E8C768CB16BF71716048A80D" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="9329942"/>
                <argumentType ref="type.9332025"/>
                <argumentType ref="type.9332027"/>
            </content>
        </type>
        <type derived="true" id="type.5947">
            <name>RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_R_ValueType_P_A72EE6DFD58F3068E8C768CB16BF71716048A80D"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_C_R_ValueType_C_P_62C8FF5559EB06AAFEDF99196CE7BD850F471D11" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="9329942"/>
                <argumentType ref="type.9332010"/>
                <argumentType ref="type.9332011"/>
            </content>
        </type>
        <type derived="true" id="type.5946">
            <name>RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_C_R_ValueType_C_P_62C8FF5559EB06AAFEDF99196CE7BD850F471D11"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_RegEx_FF045A8DB810B11A7E1838764E80BDB32C6C837F">
            <name>RegEx</name>
        </type>
        <type derived="true" id="type.9348854">
            <name>RegEx&amp;</name>
            <content>
                <baseType ref="class_RegEx_FF045A8DB810B11A7E1838764E80BDB32C6C837F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6354">
            <name>RegEx&amp;&amp;</name>
            <content>
                <baseType ref="class_RegEx_FF045A8DB810B11A7E1838764E80BDB32C6C837F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348853">
            <name>RegEx*</name>
            <content>
                <baseType ref="class_RegEx_FF045A8DB810B11A7E1838764E80BDB32C6C837F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="enumerated_type_RegExFlags_B475C391A47B78CB03D5C030D0683E9138EAB603">
            <name>RegExFlags</name>
        </type>
        <type derived="true" id="type.9349653">
            <name>RegExFlags&amp;</name>
            <content>
                <baseType ref="enumerated_type_RegExFlags_B475C391A47B78CB03D5C030D0683E9138EAB603"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349654">
            <name>RegExFlags&amp;&amp;</name>
            <content>
                <baseType ref="enumerated_type_RegExFlags_B475C391A47B78CB03D5C030D0683E9138EAB603"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349652">
            <name>RegExFlags*</name>
            <content>
                <baseType ref="enumerated_type_RegExFlags_B475C391A47B78CB03D5C030D0683E9138EAB603"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_RegExParser_5B375E7989875C02273BF50888FB982C1735A8DC">
            <name>RegExParser</name>
        </type>
        <type derived="true" id="type.9348829">
            <name>RegExParser&amp;</name>
            <content>
                <baseType ref="class_RegExParser_5B375E7989875C02273BF50888FB982C1735A8DC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349579">
            <name>RegExParser&amp;&amp;</name>
            <content>
                <baseType ref="class_RegExParser_5B375E7989875C02273BF50888FB982C1735A8DC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348828">
            <name>RegExParser*</name>
            <content>
                <baseType ref="class_RegExParser_5B375E7989875C02273BF50888FB982C1735A8DC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349766">
            <name>RegExParser*&amp;</name>
            <content>
                <baseType ref="class_RegExParser_5B375E7989875C02273BF50888FB982C1735A8DC"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349765">
            <name>RegExParser**</name>
            <content>
                <baseType ref="class_RegExParser_5B375E7989875C02273BF50888FB982C1735A8DC"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_RegularExpressionGrammar_A84552940D28A3C040AE4E8AD6CF59AF13007B22">
            <name>RegularExpressionGrammar</name>
        </type>
        <type derived="true" id="type.9348860">
            <name>RegularExpressionGrammar&amp;</name>
            <content>
                <baseType ref="class_RegularExpressionGrammar_A84552940D28A3C040AE4E8AD6CF59AF13007B22"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6357">
            <name>RegularExpressionGrammar&amp;&amp;</name>
            <content>
                <baseType ref="class_RegularExpressionGrammar_A84552940D28A3C040AE4E8AD6CF59AF13007B22"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348859">
            <name>RegularExpressionGrammar*</name>
            <content>
                <baseType ref="class_RegularExpressionGrammar_A84552940D28A3C040AE4E8AD6CF59AF13007B22"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349769">
            <name>RegularExpressionGrammar*&amp;</name>
            <content>
                <baseType ref="class_RegularExpressionGrammar_A84552940D28A3C040AE4E8AD6CF59AF13007B22"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349768">
            <name>RegularExpressionGrammar**</name>
            <content>
                <baseType ref="class_RegularExpressionGrammar_A84552940D28A3C040AE4E8AD6CF59AF13007B22"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_RegularExpressionRule_2B13F70B2A4FF7C115CB38005FA00CC5A61A8284">
            <name>RegularExpressionRule</name>
        </type>
        <type derived="true" id="type.9348863">
            <name>RegularExpressionRule&amp;</name>
            <content>
                <baseType ref="class_RegularExpressionRule_2B13F70B2A4FF7C115CB38005FA00CC5A61A8284"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348862">
            <name>RegularExpressionRule*</name>
            <content>
                <baseType ref="class_RegularExpressionRule_2B13F70B2A4FF7C115CB38005FA00CC5A61A8284"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349805">
            <name>RegularExpressionRule*&amp;</name>
            <content>
                <baseType ref="class_RegularExpressionRule_2B13F70B2A4FF7C115CB38005FA00CC5A61A8284"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349804">
            <name>RegularExpressionRule**</name>
            <content>
                <baseType ref="class_RegularExpressionRule_2B13F70B2A4FF7C115CB38005FA00CC5A61A8284"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9349731" specialization="true">
            <name>Rel&lt;int></name>
            <content>
                <primaryType ref="class_Rel_Argument_7D9E8CBD9DE1923659C6D2DE6978CE428B973071"/>
                <argumentType ref="type.9329182"/>
            </content>
        </type>
        <type derived="true" id="type.9349739">
            <name>Rel&lt;int>&amp;</name>
            <content>
                <baseType ref="type.9349731"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349743">
            <name>Rel&lt;int>&amp;&amp;</name>
            <content>
                <baseType ref="type.9349731"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349738">
            <name>Rel&lt;int>*</name>
            <content>
                <baseType ref="type.9349731"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6299">
            <name>ReturnStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_ReturnStatement_FEC70A987D7361EC167E7C772D29550ABF5D7750"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6329">
            <name>RvalueRef&amp;&amp;</name>
            <content>
                <baseType ref="class_RvalueRef_5B7EBD5222D9942C4FCD5811F21EE1285E406229"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_SequenceExpressionRule_60D359D8CE70B6B0937DCF203E2A5BCF6525CB46">
            <name>SequenceExpressionRule</name>
        </type>
        <type derived="true" id="type.9348875">
            <name>SequenceExpressionRule&amp;</name>
            <content>
                <baseType ref="class_SequenceExpressionRule_60D359D8CE70B6B0937DCF203E2A5BCF6525CB46"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348874">
            <name>SequenceExpressionRule*</name>
            <content>
                <baseType ref="class_SequenceExpressionRule_60D359D8CE70B6B0937DCF203E2A5BCF6525CB46"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349816">
            <name>SequenceExpressionRule*&amp;</name>
            <content>
                <baseType ref="class_SequenceExpressionRule_60D359D8CE70B6B0937DCF203E2A5BCF6525CB46"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349815">
            <name>SequenceExpressionRule**</name>
            <content>
                <baseType ref="class_SequenceExpressionRule_60D359D8CE70B6B0937DCF203E2A5BCF6525CB46"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076" specialization="true">
            <name>SharedCount&lt;T></name>
            <content>
                <primaryType ref="class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <argumentType ref="9329980"/>
            </content>
        </type>
        <type derived="true" id="type.5981">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6003">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5965">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5997">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5975">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F" specialization="true">
            <name>SharedPtr&lt;T></name>
            <content>
                <primaryType ref="class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <argumentType ref="9329980"/>
            </content>
        </type>
        <type derived="true" id="type.6005">
            <name>SharedPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5998">
            <name>SharedPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5983">
            <name>SharedPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6281">
            <name>SizeOf&amp;&amp;</name>
            <content>
                <baseType ref="class_SizeOf_7E82BCAA3BF507459413C346B576D53CFCE5288B"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9349646" specialization="true">
            <name>Stack&lt;PtrNfaState*></name>
            <content>
                <primaryType ref="class_Stack_T_44313E678C6CD0E8DB3743953B65AA105D55A963"/>
                <argumentType ref="type.9348831"/>
            </content>
        </type>
        <type derived="true" id="type.9349651">
            <name>Stack&lt;PtrNfaState*>&amp;</name>
            <content>
                <baseType ref="type.9349646"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349650">
            <name>Stack&lt;PtrNfaState*>*</name>
            <content>
                <baseType ref="type.9349646"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9349478" specialization="true">
            <name>Stack&lt;int></name>
            <content>
                <primaryType ref="class_Stack_T_44313E678C6CD0E8DB3743953B65AA105D55A963"/>
                <argumentType ref="type.9329182"/>
            </content>
        </type>
        <type derived="true" id="type.9349483">
            <name>Stack&lt;int>&amp;</name>
            <content>
                <baseType ref="type.9349478"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349482">
            <name>Stack&lt;int>*</name>
            <content>
                <baseType ref="type.9349478"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6296">
            <name>Statement&amp;&amp;</name>
            <content>
                <baseType ref="class_Statement_4ACF6167B3C915EDAAFD3A91F4749E778C15A0C0"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6218">
            <name>StaticInitCriticalSection&amp;&amp;</name>
            <content>
                <baseType ref="class_StaticInitCriticalSection_39AB37625C7D8624475080E487A05114E48A9C6C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9330006">
            <name>StreamWriter&amp;</name>
            <content>
                <baseType ref="class_StreamWriter_40A39F418049D49DB679452BB514CDFE47500311"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC" specialization="true">
            <name>String&lt;CharT></name>
            <content>
                <primaryType ref="class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="9330008"/>
            </content>
        </type>
        <type derived="true" id="type.6017">
            <name>String&lt;CharT>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9330318" specialization="true">
            <name>String&lt;char></name>
            <content>
                <primaryType ref="class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.9329188"/>
            </content>
        </type>
        <type id="type.9330406" specialization="true">
            <name>String&lt;uchar></name>
            <content>
                <primaryType ref="class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.9329190"/>
            </content>
        </type>
        <type derived="true" id="type.9330408">
            <name>String&lt;uchar>&amp;</name>
            <content>
                <baseType ref="type.9330406"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9330407">
            <name>String&lt;uchar>*</name>
            <content>
                <baseType ref="type.9330406"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6314">
            <name>SwitchStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_SwitchStatement_18D2C0BB3BA2134D050B02EA375A462847662B6E"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5881">
            <name>T&amp;</name>
            <content>
                <baseType ref="9329823"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5941">
            <name>T&amp;</name>
            <content>
                <baseType ref="9329932"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5869">
            <name>T&amp;</name>
            <content>
                <baseType ref="9329806"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5943">
            <name>T&amp;</name>
            <content>
                <baseType ref="9329934"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5821">
            <name>T&amp;</name>
            <content>
                <baseType ref="9329716"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5883">
            <name>T&amp;</name>
            <content>
                <baseType ref="9329825"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5891">
            <name>T&amp;</name>
            <content>
                <baseType ref="9329842"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5819">
            <name>T&amp;</name>
            <content>
                <baseType ref="9329714"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6011">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="9329985"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5897">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="9329855"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5929">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="9329901"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6292">
            <name>TemplateId&amp;&amp;</name>
            <content>
                <baseType ref="class_TemplateId_41C40DA2459C0E10492E8021082B1BF0421C15E5"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6320">
            <name>ThrowStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_ThrowStatement_6216EF486931E535CE6CDEE33F4D2E7A53BE76B7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6348">
            <name>TokenParser&amp;&amp;</name>
            <content>
                <baseType ref="class_TokenParser_319753BA62AEDA94D46A4D47AEE13AEC1B1F3B72"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6323">
            <name>TryStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_TryStatement_1132D26D95ED5027A0CFA7B5E46039A7A645EE96"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6244">
            <name>Type&amp;&amp;</name>
            <content>
                <baseType ref="class_Type_8616C506F1B48B10568C6F4144C4A41FFB320CF3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6284">
            <name>TypeName&amp;&amp;</name>
            <content>
                <baseType ref="class_TypeName_BB4524B12FF73AADA611653B9DE399FFFCEC3BEB"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6266">
            <name>UnaryMinus&amp;&amp;</name>
            <content>
                <baseType ref="class_UnaryMinus_04009179AAFCB4DEE000972E675D4198E1AF838F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6263">
            <name>UnaryPlus&amp;&amp;</name>
            <content>
                <baseType ref="class_UnaryPlus_65EA8B4AEC38C5A830F0C46A73800A840EFCF9C2"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9331783" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.9331760"/>
            </content>
        </type>
        <type derived="true" id="type.5907">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.9331783"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9332098" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
            </content>
        </type>
        <type derived="true" id="type.5954">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>>&amp;&amp;</name>
            <content>
                <baseType ref="type.9332098"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9332040" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;ValueType>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.class_RedBlackTreeNode_ValueType_38B50DA62919A6E728F70DA36817024C5A9A8855"/>
            </content>
        </type>
        <type derived="true" id="type.5950">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;ValueType>>&amp;&amp;</name>
            <content>
                <baseType ref="type.9332040"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9335294" specialization="true">
            <name>UniquePtr&lt;System.Exception></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_Exception_02AEA5204AD1035A91C2D843597EACBE078C8989"/>
            </content>
        </type>
        <type derived="true" id="type.6113">
            <name>UniquePtr&lt;System.Exception>&amp;&amp;</name>
            <content>
                <baseType ref="type.9335294"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9339268" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.ExpectationFailure></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_ExpectationFailure_EBDBB0FC1DDED5BE7E15008622BB34AFCA7E9A8C"/>
            </content>
        </type>
        <type derived="true" id="type.6176">
            <name>UniquePtr&lt;System.Text.Parsing.ExpectationFailure>&amp;&amp;</name>
            <content>
                <baseType ref="type.9339268"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9338472" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingData></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_ParsingData_9F05BA66DA13D9A55E1E7FF50B19E250484C3A7B"/>
            </content>
        </type>
        <type derived="true" id="type.6135">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingData>&amp;&amp;</name>
            <content>
                <baseType ref="type.9338472"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9339394" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingException></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_ParsingException_71361E1F1BFEB5E7F55F5F6E472A696283973396"/>
            </content>
        </type>
        <type derived="true" id="type.6177">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingException>&amp;&amp;</name>
            <content>
                <baseType ref="type.9339394"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9338479" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.XmlLog></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_XmlLog_8F1C6843100321A56502C0710D6A400B6E4C7704"/>
            </content>
        </type>
        <type derived="true" id="type.6136">
            <name>UniquePtr&lt;System.Text.Parsing.XmlLog>&amp;&amp;</name>
            <content>
                <baseType ref="type.9338479"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9349636" specialization="true">
            <name>UniquePtr&lt;System.Text.RegularExpressions.PtrNfaStateFactory></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_PtrNfaStateFactory_22C97F4BF85DB777D68618DE9DD3C7D2D3FFB5E2"/>
            </content>
        </type>
        <type derived="true" id="type.9349638">
            <name>UniquePtr&lt;System.Text.RegularExpressions.PtrNfaStateFactory>&amp;</name>
            <content>
                <baseType ref="type.9349636"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349642">
            <name>UniquePtr&lt;System.Text.RegularExpressions.PtrNfaStateFactory>&amp;&amp;</name>
            <content>
                <baseType ref="type.9349636"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349637">
            <name>UniquePtr&lt;System.Text.RegularExpressions.PtrNfaStateFactory>*</name>
            <content>
                <baseType ref="type.9349636"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9349580" specialization="true">
            <name>UniquePtr&lt;System.Text.RegularExpressions.RegExParser></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_RegExParser_5B375E7989875C02273BF50888FB982C1735A8DC"/>
            </content>
        </type>
        <type derived="true" id="type.9349582">
            <name>UniquePtr&lt;System.Text.RegularExpressions.RegExParser>&amp;</name>
            <content>
                <baseType ref="type.9349580"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349586">
            <name>UniquePtr&lt;System.Text.RegularExpressions.RegExParser>&amp;&amp;</name>
            <content>
                <baseType ref="type.9349580"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349581">
            <name>UniquePtr&lt;System.Text.RegularExpressions.RegExParser>*</name>
            <content>
                <baseType ref="type.9349580"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009" specialization="true">
            <name>UniquePtr&lt;T></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="9330216"/>
            </content>
        </type>
        <type derived="true" id="type.6112">
            <name>UniquePtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5908">
            <name>Value&amp;</name>
            <content>
                <baseType ref="9329863"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type id="type.9339769" specialization="true">
            <name>ValueObject&lt;String&lt;uchar>></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.9330406"/>
            </content>
        </type>
        <type derived="true" id="type.6194">
            <name>ValueObject&lt;String&lt;uchar>>&amp;&amp;</name>
            <content>
                <baseType ref="type.9339769"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9349827" specialization="true">
            <name>ValueObject&lt;System.Text.RegularExpressions.CharClass></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="class_CharClass_D0839E83F8129D6C4D261748730F5967D1045544"/>
            </content>
        </type>
        <type derived="true" id="type.9349829">
            <name>ValueObject&lt;System.Text.RegularExpressions.CharClass>&amp;</name>
            <content>
                <baseType ref="type.9349827"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6213">
            <name>ValueObject&lt;System.Text.RegularExpressions.CharClass>&amp;&amp;</name>
            <content>
                <baseType ref="type.9349827"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349828">
            <name>ValueObject&lt;System.Text.RegularExpressions.CharClass>*</name>
            <content>
                <baseType ref="type.9349827"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9349844" specialization="true">
            <name>ValueObject&lt;System.Text.RegularExpressions.Class></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="enumerated_type_Class_0382CE410BDE6580EFF2954226E6159339AA54CB"/>
            </content>
        </type>
        <type derived="true" id="type.9349846">
            <name>ValueObject&lt;System.Text.RegularExpressions.Class>&amp;</name>
            <content>
                <baseType ref="type.9349844"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6215">
            <name>ValueObject&lt;System.Text.RegularExpressions.Class>&amp;&amp;</name>
            <content>
                <baseType ref="type.9349844"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349845">
            <name>ValueObject&lt;System.Text.RegularExpressions.Class>*</name>
            <content>
                <baseType ref="type.9349844"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9349794" specialization="true">
            <name>ValueObject&lt;System.Text.RegularExpressions.PtrNfa></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="class_PtrNfa_5708C8189DEAC0F8CBD3A9DA5094DE3E7536B5FB"/>
            </content>
        </type>
        <type derived="true" id="type.9349796">
            <name>ValueObject&lt;System.Text.RegularExpressions.PtrNfa>&amp;</name>
            <content>
                <baseType ref="type.9349794"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6212">
            <name>ValueObject&lt;System.Text.RegularExpressions.PtrNfa>&amp;&amp;</name>
            <content>
                <baseType ref="type.9349794"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349795">
            <name>ValueObject&lt;System.Text.RegularExpressions.PtrNfa>*</name>
            <content>
                <baseType ref="type.9349794"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79" specialization="true">
            <name>ValueObject&lt;ValueType></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="9337398"/>
            </content>
        </type>
        <type derived="true" id="type.6158">
            <name>ValueObject&lt;ValueType>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9339757" specialization="true">
            <name>ValueObject&lt;bool></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.9329177"/>
            </content>
        </type>
        <type derived="true" id="type.6193">
            <name>ValueObject&lt;bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.9339757"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9339594" specialization="true">
            <name>ValueObject&lt;byte></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.9329179"/>
            </content>
        </type>
        <type derived="true" id="type.6180">
            <name>ValueObject&lt;byte>&amp;&amp;</name>
            <content>
                <baseType ref="type.9339594"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9339733" specialization="true">
            <name>ValueObject&lt;double></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.9329187"/>
            </content>
        </type>
        <type derived="true" id="type.6192">
            <name>ValueObject&lt;double>&amp;&amp;</name>
            <content>
                <baseType ref="type.9339733"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9339719" specialization="true">
            <name>ValueObject&lt;float></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.9329186"/>
            </content>
        </type>
        <type derived="true" id="type.6190">
            <name>ValueObject&lt;float>&amp;&amp;</name>
            <content>
                <baseType ref="type.9339719"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9339635" specialization="true">
            <name>ValueObject&lt;int></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.9329182"/>
            </content>
        </type>
        <type derived="true" id="type.6185">
            <name>ValueObject&lt;int>&amp;&amp;</name>
            <content>
                <baseType ref="type.9339635"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9339660" specialization="true">
            <name>ValueObject&lt;long></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.9329184"/>
            </content>
        </type>
        <type derived="true" id="type.6187">
            <name>ValueObject&lt;long>&amp;&amp;</name>
            <content>
                <baseType ref="type.9339660"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9339577" specialization="true">
            <name>ValueObject&lt;sbyte></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.9329178"/>
            </content>
        </type>
        <type derived="true" id="type.6179">
            <name>ValueObject&lt;sbyte>&amp;&amp;</name>
            <content>
                <baseType ref="type.9339577"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9339607" specialization="true">
            <name>ValueObject&lt;short></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.9329180"/>
            </content>
        </type>
        <type derived="true" id="type.6182">
            <name>ValueObject&lt;short>&amp;&amp;</name>
            <content>
                <baseType ref="type.9339607"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9339786" specialization="true">
            <name>ValueObject&lt;uchar></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.9329190"/>
            </content>
        </type>
        <type derived="true" id="type.6195">
            <name>ValueObject&lt;uchar>&amp;&amp;</name>
            <content>
                <baseType ref="type.9339786"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9339647" specialization="true">
            <name>ValueObject&lt;uint></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.9329183"/>
            </content>
        </type>
        <type derived="true" id="type.6186">
            <name>ValueObject&lt;uint>&amp;&amp;</name>
            <content>
                <baseType ref="type.9339647"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9339672" specialization="true">
            <name>ValueObject&lt;ulong></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.9329185"/>
            </content>
        </type>
        <type derived="true" id="type.6188">
            <name>ValueObject&lt;ulong>&amp;&amp;</name>
            <content>
                <baseType ref="type.9339672"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9339621" specialization="true">
            <name>ValueObject&lt;ushort></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.9329181"/>
            </content>
        </type>
        <type derived="true" id="type.6184">
            <name>ValueObject&lt;ushort>&amp;&amp;</name>
            <content>
                <baseType ref="type.9339621"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F" specialization="true">
            <name>WeakCount&lt;T></name>
            <content>
                <primaryType ref="class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <argumentType ref="9329962"/>
            </content>
        </type>
        <type derived="true" id="type.5996">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5982">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5974">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6004">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5966">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9330308" specialization="true">
            <name>WeakPtr&lt;System.IO.ByteStream></name>
            <content>
                <primaryType ref="class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <argumentType ref="class_ByteStream_3B7A2F3379612ADBD7E416487752A1935AA8B96F"/>
            </content>
        </type>
        <type derived="true" id="type.5779">
            <name>WeakPtr&lt;System.IO.ByteStream>&amp;&amp;</name>
            <content>
                <baseType ref="type.9330308"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC" specialization="true">
            <name>WeakPtr&lt;T></name>
            <content>
                <primaryType ref="class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <argumentType ref="9329982"/>
            </content>
        </type>
        <type derived="true" id="type.5999">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5986">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5988">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5990">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6006">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5984">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6009">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_WeakPtr_U_DC1FE0F847E4C954B399A783A0BC0307D485B021" specialization="true">
            <name>WeakPtr&lt;U></name>
            <content>
                <primaryType ref="class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <argumentType ref="9329975"/>
            </content>
        </type>
        <type derived="true" id="type.5992">
            <name>WeakPtr&lt;U>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_U_DC1FE0F847E4C954B399A783A0BC0307D485B021"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type basic="true" id="type.9329177">
            <name>bool</name>
        </type>
        <type basic="true" id="type.9329179">
            <name>byte</name>
        </type>
        <type derived="true" id="type.9329200">
            <name>byte&amp;</name>
            <content>
                <baseType ref="type.9329179"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9329199">
            <name>byte*</name>
            <content>
                <baseType ref="type.9329179"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.9329188">
            <name>char</name>
        </type>
        <type derived="true" id="type.9329227">
            <name>char&amp;</name>
            <content>
                <baseType ref="type.9329188"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9329226">
            <name>char*</name>
            <content>
                <baseType ref="type.9329188"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6252">
            <name>const AddressOf</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_AddressOf_F9F594A9680E5BE9D427D963284931AEB8E52492"/>
            </content>
        </type>
        <type derived="true" id="type.6253">
            <name>const AddressOf&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_AddressOf_F9F594A9680E5BE9D427D963284931AEB8E52492"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6324">
            <name>const AssertStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_AssertStatement_D3CF5F3C391681B790B0E9E570953DA4FA666696"/>
            </content>
        </type>
        <type derived="true" id="type.6325">
            <name>const AssertStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_AssertStatement_D3CF5F3C391681B790B0E9E570953DA4FA666696"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349751">
            <name>const BinaryFun&lt;int, int, bool>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349733"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349748">
            <name>const BinaryPred&lt;int, int>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349732"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6219">
            <name>const BinaryReader</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BinaryReader_7D0A41A9C666814155001B1AF5B066E926C8F3AC"/>
            </content>
        </type>
        <type derived="true" id="type.6220">
            <name>const BinaryReader&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BinaryReader_7D0A41A9C666814155001B1AF5B066E926C8F3AC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6221">
            <name>const BinaryWriter</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BinaryWriter_6D47712E9CF8C098A17FFF3729140EE727BD87E2"/>
            </content>
        </type>
        <type derived="true" id="type.6222">
            <name>const BinaryWriter&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BinaryWriter_6D47712E9CF8C098A17FFF3729140EE727BD87E2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9329515">
            <name>const Bitset&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Bitset_BA1EE2E68426C5445CB6CAF7F957084ADAFD19CA"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6223">
            <name>const BufferedByteStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BufferedByteStream_E74639F265FCFA3F7A3E61DE9D92C703A46FD573"/>
            </content>
        </type>
        <type derived="true" id="type.6224">
            <name>const ByteStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ByteStream_3B7A2F3379612ADBD7E416487752A1935AA8B96F"/>
            </content>
        </type>
        <type derived="true" id="type.9348794">
            <name>const CharClass</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_CharClass_D0839E83F8129D6C4D261748730F5967D1045544"/>
            </content>
        </type>
        <type derived="true" id="type.9348796">
            <name>const CharClass&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_CharClass_D0839E83F8129D6C4D261748730F5967D1045544"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348795">
            <name>const CharClass*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_CharClass_D0839E83F8129D6C4D261748730F5967D1045544"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6214">
            <name>const Class&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="enumerated_type_Class_0382CE410BDE6580EFF2954226E6159339AA54CB"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6331">
            <name>const CodeExpandingVisitor</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_CodeExpandingVisitor_2D824580300CDC92F6A03DB335EE0BB590738E53"/>
            </content>
        </type>
        <type derived="true" id="type.6332">
            <name>const CodeExpandingVisitor&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_CodeExpandingVisitor_2D824580300CDC92F6A03DB335EE0BB590738E53"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6267">
            <name>const Complement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Complement_E9C39B44C265CC4D19B0EFE97BE0DDAAF5B39DB5"/>
            </content>
        </type>
        <type derived="true" id="type.6268">
            <name>const Complement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Complement_E9C39B44C265CC4D19B0EFE97BE0DDAAF5B39DB5"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6233">
            <name>const ConditionVariable</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ConditionVariable_019A80625043CF98EC88D8F55238C84CFD4A9C26"/>
            </content>
        </type>
        <type derived="true" id="type.6285">
            <name>const Construct</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Construct_9E0CFFBA332AF77070D82685BD0B3B21F6BBDAB8"/>
            </content>
        </type>
        <type derived="true" id="type.6286">
            <name>const Construct&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Construct_9E0CFFBA332AF77070D82685BD0B3B21F6BBDAB8"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6238">
            <name>const ConversionException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ConversionException_968EDA1D00534F82FF78F973855F91349977511B"/>
            </content>
        </type>
        <type derived="true" id="type.6239">
            <name>const ConversionException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ConversionException_968EDA1D00534F82FF78F973855F91349977511B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5778">
            <name>const Counter&lt;System.IO.ByteStream></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9330292"/>
            </content>
        </type>
        <type derived="true" id="type.5987">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.5989">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.5985">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.5993">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.5977">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.5976">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.5971">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.5978">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.6000">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.5969">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.5968">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.6007">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.5967">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.5962">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.5959">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.6008">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.5994">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5963">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6001">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5972">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5979">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5960">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5991">
            <name>const Counter&lt;U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A"/>
            </content>
        </type>
        <type derived="true" id="type.5970">
            <name>const Counter&lt;U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A"/>
            </content>
        </type>
        <type derived="true" id="type.6010">
            <name>const Counter&lt;U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A"/>
            </content>
        </type>
        <type derived="true" id="type.6303">
            <name>const DeleteStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DeleteStatement_CFF57A1EB43152DAED3E95873037A4F83E2AAF0A"/>
            </content>
        </type>
        <type derived="true" id="type.6304">
            <name>const DeleteStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DeleteStatement_CFF57A1EB43152DAED3E95873037A4F83E2AAF0A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6249">
            <name>const Deref</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Deref_6825EB2BE00B35C10BF9F18A018CADC1F1F12594"/>
            </content>
        </type>
        <type derived="true" id="type.6250">
            <name>const Deref&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Deref_6825EB2BE00B35C10BF9F18A018CADC1F1F12594"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6306">
            <name>const DestroyStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DestroyStatement_E2AF4A1B38D4AE66FCF9EF639F0D8309CE050550"/>
            </content>
        </type>
        <type derived="true" id="type.6307">
            <name>const DestroyStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DestroyStatement_E2AF4A1B38D4AE66FCF9EF639F0D8309CE050550"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348806">
            <name>const Dfa</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Dfa_C0C2BE49FCC3D3B6EA837CF206D1FE18B6C3B39E"/>
            </content>
        </type>
        <type derived="true" id="type.9348808">
            <name>const Dfa&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Dfa_C0C2BE49FCC3D3B6EA837CF206D1FE18B6C3B39E"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348807">
            <name>const Dfa*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Dfa_C0C2BE49FCC3D3B6EA837CF206D1FE18B6C3B39E"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348800">
            <name>const DfaState</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DfaState_9705397F7C4EF22AB411D3A2CD2F07D838F85228"/>
            </content>
        </type>
        <type derived="true" id="type.9348802">
            <name>const DfaState&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DfaState_9705397F7C4EF22AB411D3A2CD2F07D838F85228"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348801">
            <name>const DfaState*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DfaState_9705397F7C4EF22AB411D3A2CD2F07D838F85228"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9329676">
            <name>const Exception*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Exception_02AEA5204AD1035A91C2D843597EACBE078C8989"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349713">
            <name>const Exception*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Exception_02AEA5204AD1035A91C2D843597EACBE078C8989"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349714">
            <name>const Exception**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Exception_02AEA5204AD1035A91C2D843597EACBE078C8989"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6343">
            <name>const ExpectationParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ExpectationParser_0DFEF78F7EA112E6F20DC00ECFD31592FD692CAB"/>
            </content>
        </type>
        <type derived="true" id="type.6344">
            <name>const ExpectationParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ExpectationParser_0DFEF78F7EA112E6F20DC00ECFD31592FD692CAB"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6309">
            <name>const ExpressionStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ExpressionStatement_F01731B3CB572136FE603DE87C8C465F5B79ED54"/>
            </content>
        </type>
        <type derived="true" id="type.6310">
            <name>const ExpressionStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ExpressionStatement_F01731B3CB572136FE603DE87C8C465F5B79ED54"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6225">
            <name>const FileSystemException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_FileSystemException_BB9552A6F8CD7166104BC90F55939797AA006B1A"/>
            </content>
        </type>
        <type derived="true" id="type.6226">
            <name>const FileSystemException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_FileSystemException_BB9552A6F8CD7166104BC90F55939797AA006B1A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6315">
            <name>const GotoCaseStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_GotoCaseStatement_54B0F8581DE0382A086C8C1EC6A19E93889D566D"/>
            </content>
        </type>
        <type derived="true" id="type.6316">
            <name>const GotoCaseStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_GotoCaseStatement_54B0F8581DE0382A086C8C1EC6A19E93889D566D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6300">
            <name>const GotoStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_GotoStatement_423A80C64905BCD7885A3433F9FE33D8BB37DF7E"/>
            </content>
        </type>
        <type derived="true" id="type.6301">
            <name>const GotoStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_GotoStatement_423A80C64905BCD7885A3433F9FE33D8BB37DF7E"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349287">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349284"/>
            </content>
        </type>
        <type derived="true" id="type.6143">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.6140"/>
            </content>
        </type>
        <type derived="true" id="type.9349287">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349284"/>
            </content>
        </type>
        <type derived="true" id="type.9349289">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349284"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6145">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.6140"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349289">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349284"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349288">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349284"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6144">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.6140"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349293">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349290"/>
            </content>
        </type>
        <type derived="true" id="type.6149">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.6146"/>
            </content>
        </type>
        <type derived="true" id="type.9349295">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349290"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6151">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.6146"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349294">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349290"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6150">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.6146"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6227">
            <name>const InvalidPathException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_InvalidPathException_B507BC7383A55580000E7A669FAAE1ABECF7FFBA"/>
            </content>
        </type>
        <type derived="true" id="type.6228">
            <name>const InvalidPathException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_InvalidPathException_B507BC7383A55580000E7A669FAAE1ABECF7FFBA"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6270">
            <name>const Invoke</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Invoke_D6527871DA9EA1727DFAC637E9FF17EF73B2DAF5"/>
            </content>
        </type>
        <type derived="true" id="type.6271">
            <name>const Invoke&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Invoke_D6527871DA9EA1727DFAC637E9FF17EF73B2DAF5"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5862">
            <name>const K&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329805"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5902">
            <name>const Key&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329862"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5949">
            <name>const KeyType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329941"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5885">
            <name>const KeyType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329834"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6340">
            <name>const KleeneStarParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_KleeneStarParser_8B553023A6E0AA98D08C756A40F526859BF46D2D"/>
            </content>
        </type>
        <type derived="true" id="type.6341">
            <name>const KleeneStarParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_KleeneStarParser_8B553023A6E0AA98D08C756A40F526859BF46D2D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349728">
            <name>const Less&lt;int></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349727"/>
            </content>
        </type>
        <type derived="true" id="type.9349730">
            <name>const Less&lt;int>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349727"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349729">
            <name>const Less&lt;int>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349727"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349613">
            <name>const List&lt;PtrNfaState*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349610"/>
            </content>
        </type>
        <type derived="true" id="type.9349615">
            <name>const List&lt;PtrNfaState*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349610"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349614">
            <name>const List&lt;PtrNfaState*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349610"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349537">
            <name>const List&lt;System.Text.RegularExpressions.DfaState></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349534"/>
            </content>
        </type>
        <type derived="true" id="type.9349539">
            <name>const List&lt;System.Text.RegularExpressions.DfaState>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349534"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349538">
            <name>const List&lt;System.Text.RegularExpressions.DfaState>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349534"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349559">
            <name>const List&lt;System.Text.RegularExpressions.NfaState></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349556"/>
            </content>
        </type>
        <type derived="true" id="type.9349561">
            <name>const List&lt;System.Text.RegularExpressions.NfaState>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349556"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349560">
            <name>const List&lt;System.Text.RegularExpressions.NfaState>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349556"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349510">
            <name>const List&lt;System.Text.RegularExpressions.NfaStateNumberSet></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349507"/>
            </content>
        </type>
        <type derived="true" id="type.9349512">
            <name>const List&lt;System.Text.RegularExpressions.NfaStateNumberSet>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349507"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349511">
            <name>const List&lt;System.Text.RegularExpressions.NfaStateNumberSet>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349507"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349592">
            <name>const List&lt;System.Text.RegularExpressions.PtrNfaEdge></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349589"/>
            </content>
        </type>
        <type derived="true" id="type.9349594">
            <name>const List&lt;System.Text.RegularExpressions.PtrNfaEdge>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349589"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349593">
            <name>const List&lt;System.Text.RegularExpressions.PtrNfaEdge>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349589"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349487">
            <name>const List&lt;int></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349484"/>
            </content>
        </type>
        <type derived="true" id="type.9349489">
            <name>const List&lt;int>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349484"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349488">
            <name>const List&lt;int>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349484"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6293">
            <name>const Literal</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Literal_2996038F9E8CCAE363F6BF2855F68961FFF05F77"/>
            </content>
        </type>
        <type derived="true" id="type.6294">
            <name>const Literal&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Literal_2996038F9E8CCAE363F6BF2855F68961FFF05F77"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5918">
            <name>const LockGuard&lt;Mtx></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
            </content>
        </type>
        <type derived="true" id="type.5919">
            <name>const LockGuard&lt;Mtx>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6105">
            <name>const LockGuard&lt;System.Threading.Mutex></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9335149"/>
            </content>
        </type>
        <type derived="true" id="type.6106">
            <name>const LockGuard&lt;System.Threading.Mutex>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9335149"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6234">
            <name>const Mutex</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Mutex_CAF802A5F8A71934B07EA6C23937F60D9AECD650"/>
            </content>
        </type>
        <type derived="true" id="type.6288">
            <name>const New</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_New_DC04D52C4D476FD919D770D43330D434B51E2D21"/>
            </content>
        </type>
        <type derived="true" id="type.6289">
            <name>const New&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_New_DC04D52C4D476FD919D770D43330D434B51E2D21"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348824">
            <name>const Nfa</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Nfa_5E23E7BB511DC9602941611B6CE87476EC3ECB57"/>
            </content>
        </type>
        <type derived="true" id="type.9348826">
            <name>const Nfa&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Nfa_5E23E7BB511DC9602941611B6CE87476EC3ECB57"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348825">
            <name>const Nfa*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Nfa_5E23E7BB511DC9602941611B6CE87476EC3ECB57"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348818">
            <name>const NfaState</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_NfaState_9D1ED32B9E916097B40ADF566ECF8BF84ACD9662"/>
            </content>
        </type>
        <type derived="true" id="type.9348820">
            <name>const NfaState&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_NfaState_9D1ED32B9E916097B40ADF566ECF8BF84ACD9662"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348819">
            <name>const NfaState*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_NfaState_9D1ED32B9E916097B40ADF566ECF8BF84ACD9662"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349696">
            <name>const NfaState*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_NfaState_9D1ED32B9E916097B40ADF566ECF8BF84ACD9662"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349760">
            <name>const NfaState*&amp;&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_NfaState_9D1ED32B9E916097B40ADF566ECF8BF84ACD9662"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349759">
            <name>const NfaState**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_NfaState_9D1ED32B9E916097B40ADF566ECF8BF84ACD9662"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348812">
            <name>const NfaStateNumberSet</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_NfaStateNumberSet_94283B9E90ECB564FEF4909226A69DC50DFBEAC3"/>
            </content>
        </type>
        <type derived="true" id="type.9348814">
            <name>const NfaStateNumberSet&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_NfaStateNumberSet_94283B9E90ECB564FEF4909226A69DC50DFBEAC3"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348813">
            <name>const NfaStateNumberSet*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_NfaStateNumberSet_94283B9E90ECB564FEF4909226A69DC50DFBEAC3"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349706">
            <name>const NfaStateNumberSet*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_NfaStateNumberSet_94283B9E90ECB564FEF4909226A69DC50DFBEAC3"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349707">
            <name>const NfaStateNumberSet*&amp;&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_NfaStateNumberSet_94283B9E90ECB564FEF4909226A69DC50DFBEAC3"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349705">
            <name>const NfaStateNumberSet**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_NfaStateNumberSet_94283B9E90ECB564FEF4909226A69DC50DFBEAC3"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6246">
            <name>const Not</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Not_5E324445E5A5F8057BEBD48898C26110CD402187"/>
            </content>
        </type>
        <type derived="true" id="type.6247">
            <name>const Not&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Not_5E324445E5A5F8057BEBD48898C26110CD402187"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6334">
            <name>const OptionalParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_OptionalParser_F2758E0656F6FF0FCFAFB3BADC90975486CE943A"/>
            </content>
        </type>
        <type derived="true" id="type.6335">
            <name>const OptionalParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_OptionalParser_F2758E0656F6FF0FCFAFB3BADC90975486CE943A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6229">
            <name>const OutputStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_OutputStream_D306768ED83C9FB00EA54CD61D604CE2BF727452"/>
            </content>
        </type>
        <type derived="true" id="type.5928">
            <name>const Pair&lt;T, U>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5925">
            <name>const Pair&lt;T, U>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6337">
            <name>const PositiveParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PositiveParser_773062827D5C6002110C7D897D790DAEEE06A502"/>
            </content>
        </type>
        <type derived="true" id="type.6338">
            <name>const PositiveParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PositiveParser_773062827D5C6002110C7D897D790DAEEE06A502"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6276">
            <name>const PostfixDecrement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PostfixDecrement_D09AB7ACBA491B153051FDF9DE245E475C7F6392"/>
            </content>
        </type>
        <type derived="true" id="type.6277">
            <name>const PostfixDecrement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PostfixDecrement_D09AB7ACBA491B153051FDF9DE245E475C7F6392"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6273">
            <name>const PostfixIncrement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PostfixIncrement_DDC6B0BA10308D23CE5F90EE4D6B95A60E196FE9"/>
            </content>
        </type>
        <type derived="true" id="type.6274">
            <name>const PostfixIncrement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PostfixIncrement_DDC6B0BA10308D23CE5F90EE4D6B95A60E196FE9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6258">
            <name>const PrefixDecrement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PrefixDecrement_999D7C38861B7D6CED24609E18ACD9197FF478F0"/>
            </content>
        </type>
        <type derived="true" id="type.6259">
            <name>const PrefixDecrement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PrefixDecrement_999D7C38861B7D6CED24609E18ACD9197FF478F0"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6255">
            <name>const PrefixIncrement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PrefixIncrement_8035645A064F2FF3F7808392B992A24FA56E9E9D"/>
            </content>
        </type>
        <type derived="true" id="type.6256">
            <name>const PrefixIncrement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PrefixIncrement_8035645A064F2FF3F7808392B992A24FA56E9E9D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348848">
            <name>const PtrNfa</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PtrNfa_5708C8189DEAC0F8CBD3A9DA5094DE3E7536B5FB"/>
            </content>
        </type>
        <type derived="true" id="type.9348850">
            <name>const PtrNfa&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PtrNfa_5708C8189DEAC0F8CBD3A9DA5094DE3E7536B5FB"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348849">
            <name>const PtrNfa*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PtrNfa_5708C8189DEAC0F8CBD3A9DA5094DE3E7536B5FB"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348839">
            <name>const PtrNfaEdge</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PtrNfaEdge_937C7F61A080B689DF3D122F26A5057032EE2DB3"/>
            </content>
        </type>
        <type derived="true" id="type.9348841">
            <name>const PtrNfaEdge&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PtrNfaEdge_937C7F61A080B689DF3D122F26A5057032EE2DB3"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348840">
            <name>const PtrNfaEdge*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PtrNfaEdge_937C7F61A080B689DF3D122F26A5057032EE2DB3"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349779">
            <name>const PtrNfaEdge*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PtrNfaEdge_937C7F61A080B689DF3D122F26A5057032EE2DB3"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349784">
            <name>const PtrNfaEdge*&amp;&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PtrNfaEdge_937C7F61A080B689DF3D122F26A5057032EE2DB3"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349783">
            <name>const PtrNfaEdge**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PtrNfaEdge_937C7F61A080B689DF3D122F26A5057032EE2DB3"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348833">
            <name>const PtrNfaState</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PtrNfaState_828AD9578262913C0B2EE4669E5D88681833D3E8"/>
            </content>
        </type>
        <type derived="true" id="type.9348835">
            <name>const PtrNfaState&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PtrNfaState_828AD9578262913C0B2EE4669E5D88681833D3E8"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348834">
            <name>const PtrNfaState*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PtrNfaState_828AD9578262913C0B2EE4669E5D88681833D3E8"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349616">
            <name>const PtrNfaState*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PtrNfaState_828AD9578262913C0B2EE4669E5D88681833D3E8"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349617">
            <name>const PtrNfaState**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PtrNfaState_828AD9578262913C0B2EE4669E5D88681833D3E8"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349660">
            <name>const PtrNfaState**&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PtrNfaState_828AD9578262913C0B2EE4669E5D88681833D3E8"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349661">
            <name>const PtrNfaState**&amp;&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PtrNfaState_828AD9578262913C0B2EE4669E5D88681833D3E8"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349659">
            <name>const PtrNfaState***</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PtrNfaState_828AD9578262913C0B2EE4669E5D88681833D3E8"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349644">
            <name>const PtrNfaStateFactory</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PtrNfaStateFactory_22C97F4BF85DB777D68618DE9DD3C7D2D3FFB5E2"/>
            </content>
        </type>
        <type derived="true" id="type.9349645">
            <name>const PtrNfaStateFactory&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PtrNfaStateFactory_22C97F4BF85DB777D68618DE9DD3C7D2D3FFB5E2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349643">
            <name>const PtrNfaStateFactory*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PtrNfaStateFactory_22C97F4BF85DB777D68618DE9DD3C7D2D3FFB5E2"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349630">
            <name>const RandomAccessIter&lt;PtrNfaState*, PtrNfaState*&amp;, PtrNfaState**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349627"/>
            </content>
        </type>
        <type derived="true" id="type.9349632">
            <name>const RandomAccessIter&lt;PtrNfaState*, PtrNfaState*&amp;, PtrNfaState**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349627"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349631">
            <name>const RandomAccessIter&lt;PtrNfaState*, PtrNfaState*&amp;, PtrNfaState**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349627"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349621">
            <name>const RandomAccessIter&lt;PtrNfaState*, const PtrNfaState*&amp;, const PtrNfaState**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349618"/>
            </content>
        </type>
        <type derived="true" id="type.9349623">
            <name>const RandomAccessIter&lt;PtrNfaState*, const PtrNfaState*&amp;, const PtrNfaState**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349618"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349622">
            <name>const RandomAccessIter&lt;PtrNfaState*, const PtrNfaState*&amp;, const PtrNfaState**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349618"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349550">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.DfaState, DfaState&amp;, DfaState*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349547"/>
            </content>
        </type>
        <type derived="true" id="type.9349552">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.DfaState, DfaState&amp;, DfaState*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349547"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349551">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.DfaState, DfaState&amp;, DfaState*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349547"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349543">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.DfaState, const DfaState&amp;, const DfaState*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349540"/>
            </content>
        </type>
        <type derived="true" id="type.9349545">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.DfaState, const DfaState&amp;, const DfaState*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349540"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349544">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.DfaState, const DfaState&amp;, const DfaState*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349540"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349572">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.NfaState, NfaState&amp;, NfaState*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349569"/>
            </content>
        </type>
        <type derived="true" id="type.9349574">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.NfaState, NfaState&amp;, NfaState*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349569"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349573">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.NfaState, NfaState&amp;, NfaState*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349569"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349565">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.NfaState, const NfaState&amp;, const NfaState*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349562"/>
            </content>
        </type>
        <type derived="true" id="type.9349567">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.NfaState, const NfaState&amp;, const NfaState*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349562"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349566">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.NfaState, const NfaState&amp;, const NfaState*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349562"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349523">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.NfaStateNumberSet, NfaStateNumberSet&amp;, NfaStateNumberSet*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349520"/>
            </content>
        </type>
        <type derived="true" id="type.9349525">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.NfaStateNumberSet, NfaStateNumberSet&amp;, NfaStateNumberSet*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349520"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349524">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.NfaStateNumberSet, NfaStateNumberSet&amp;, NfaStateNumberSet*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349520"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349516">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.NfaStateNumberSet, const NfaStateNumberSet&amp;, const NfaStateNumberSet*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349513"/>
            </content>
        </type>
        <type derived="true" id="type.9349518">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.NfaStateNumberSet, const NfaStateNumberSet&amp;, const NfaStateNumberSet*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349513"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349517">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.NfaStateNumberSet, const NfaStateNumberSet&amp;, const NfaStateNumberSet*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349513"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349605">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.PtrNfaEdge, PtrNfaEdge&amp;, PtrNfaEdge*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349602"/>
            </content>
        </type>
        <type derived="true" id="type.9349607">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.PtrNfaEdge, PtrNfaEdge&amp;, PtrNfaEdge*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349602"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349606">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.PtrNfaEdge, PtrNfaEdge&amp;, PtrNfaEdge*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349602"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349598">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.PtrNfaEdge, const PtrNfaEdge&amp;, const PtrNfaEdge*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349595"/>
            </content>
        </type>
        <type derived="true" id="type.9349600">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.PtrNfaEdge, const PtrNfaEdge&amp;, const PtrNfaEdge*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349595"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349599">
            <name>const RandomAccessIter&lt;System.Text.RegularExpressions.PtrNfaEdge, const PtrNfaEdge&amp;, const PtrNfaEdge*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349595"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5912">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5909"/>
            </content>
        </type>
        <type derived="true" id="type.9349055">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349052"/>
            </content>
        </type>
        <type derived="true" id="type.9349057">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349052"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5914">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5909"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349057">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349052"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5913">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5909"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349056">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349052"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348926">
            <name>const RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9348923"/>
            </content>
        </type>
        <type derived="true" id="type.5783">
            <name>const RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5780"/>
            </content>
        </type>
        <type derived="true" id="type.9348926">
            <name>const RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9348923"/>
            </content>
        </type>
        <type derived="true" id="type.9348928">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9348923"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5785">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5780"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348927">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9348923"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5784">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5780"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349495">
            <name>const RandomAccessIter&lt;int, const int&amp;, const int*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349492"/>
            </content>
        </type>
        <type derived="true" id="type.9349497">
            <name>const RandomAccessIter&lt;int, const int&amp;, const int*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349492"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349496">
            <name>const RandomAccessIter&lt;int, const int&amp;, const int*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349492"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349502">
            <name>const RandomAccessIter&lt;int, int&amp;, int*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349499"/>
            </content>
        </type>
        <type derived="true" id="type.6204">
            <name>const RandomAccessIter&lt;int, int&amp;, int*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.6201"/>
            </content>
        </type>
        <type derived="true" id="type.9349504">
            <name>const RandomAccessIter&lt;int, int&amp;, int*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349499"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6206">
            <name>const RandomAccessIter&lt;int, int&amp;, int*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.6201"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349504">
            <name>const RandomAccessIter&lt;int, int&amp;, int*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349499"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6205">
            <name>const RandomAccessIter&lt;int, int&amp;, int*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.6201"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349503">
            <name>const RandomAccessIter&lt;int, int&amp;, int*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349499"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5802">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5799"/>
            </content>
        </type>
        <type derived="true" id="type.9348945">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9348942"/>
            </content>
        </type>
        <type derived="true" id="type.9348947">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9348942"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5804">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5799"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348946">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9348942"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5803">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5799"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348946">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9348942"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349244">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349241"/>
            </content>
        </type>
        <type derived="true" id="type.6100">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.6097"/>
            </content>
        </type>
        <type derived="true" id="type.6102">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.6097"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349246">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349241"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349245">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349241"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6101">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.6097"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5813">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5810"/>
            </content>
        </type>
        <type derived="true" id="type.9348956">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9348953"/>
            </content>
        </type>
        <type derived="true" id="type.9348958">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9348953"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5815">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5810"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348958">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9348953"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5814">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5810"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348957">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9348953"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348935">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9348932"/>
            </content>
        </type>
        <type derived="true" id="type.5792">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5789"/>
            </content>
        </type>
        <type derived="true" id="type.9348937">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9348932"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5794">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5789"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348937">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9348932"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348936">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9348932"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5793">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5789"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6235">
            <name>const RecursiveMutex</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_RecursiveMutex_B9ED5479754BBDDED6A4491348BBD2F20F701D82"/>
            </content>
        </type>
        <type derived="true" id="type.9348855">
            <name>const RegEx</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_RegEx_FF045A8DB810B11A7E1838764E80BDB32C6C837F"/>
            </content>
        </type>
        <type derived="true" id="type.9348857">
            <name>const RegEx&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_RegEx_FF045A8DB810B11A7E1838764E80BDB32C6C837F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348856">
            <name>const RegEx*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_RegEx_FF045A8DB810B11A7E1838764E80BDB32C6C837F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349578">
            <name>const RegExParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_RegExParser_5B375E7989875C02273BF50888FB982C1735A8DC"/>
            </content>
        </type>
        <type derived="true" id="type.9349577">
            <name>const RegExParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_RegExParser_5B375E7989875C02273BF50888FB982C1735A8DC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349587">
            <name>const RegExParser*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_RegExParser_5B375E7989875C02273BF50888FB982C1735A8DC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6355">
            <name>const RegularExpressionGrammar</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_RegularExpressionGrammar_A84552940D28A3C040AE4E8AD6CF59AF13007B22"/>
            </content>
        </type>
        <type derived="true" id="type.6356">
            <name>const RegularExpressionGrammar&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_RegularExpressionGrammar_A84552940D28A3C040AE4E8AD6CF59AF13007B22"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349745">
            <name>const Rel&lt;int>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349731"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6297">
            <name>const ReturnStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ReturnStatement_FEC70A987D7361EC167E7C772D29550ABF5D7750"/>
            </content>
        </type>
        <type derived="true" id="type.6298">
            <name>const ReturnStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ReturnStatement_FEC70A987D7361EC167E7C772D29550ABF5D7750"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6279">
            <name>const SizeOf</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_SizeOf_7E82BCAA3BF507459413C346B576D53CFCE5288B"/>
            </content>
        </type>
        <type derived="true" id="type.6280">
            <name>const SizeOf&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_SizeOf_7E82BCAA3BF507459413C346B576D53CFCE5288B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349647">
            <name>const Stack&lt;PtrNfaState*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349646"/>
            </content>
        </type>
        <type derived="true" id="type.9349649">
            <name>const Stack&lt;PtrNfaState*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349646"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349648">
            <name>const Stack&lt;PtrNfaState*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349646"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349479">
            <name>const Stack&lt;int></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349478"/>
            </content>
        </type>
        <type derived="true" id="type.9349481">
            <name>const Stack&lt;int>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349478"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349480">
            <name>const Stack&lt;int>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349478"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6216">
            <name>const StaticInitCriticalSection</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_StaticInitCriticalSection_39AB37625C7D8624475080E487A05114E48A9C6C"/>
            </content>
        </type>
        <type derived="true" id="type.6217">
            <name>const StaticInitCriticalSection&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_StaticInitCriticalSection_39AB37625C7D8624475080E487A05114E48A9C6C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6230">
            <name>const StreamWriter</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_StreamWriter_40A39F418049D49DB679452BB514CDFE47500311"/>
            </content>
        </type>
        <type derived="true" id="type.9330323">
            <name>const String&lt;char>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9330318"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9330411">
            <name>const String&lt;uchar>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9330406"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9330410">
            <name>const String&lt;uchar>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9330406"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6312">
            <name>const SwitchStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_SwitchStatement_18D2C0BB3BA2134D050B02EA375A462847662B6E"/>
            </content>
        </type>
        <type derived="true" id="type.6313">
            <name>const SwitchStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_SwitchStatement_18D2C0BB3BA2134D050B02EA375A462847662B6E"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5845">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329769"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5844">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329767"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5842">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329764"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5841">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329762"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5839">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329759"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5838">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329757"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5837">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329755"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5836">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329746"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5835">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329744"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5834">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329741"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5833">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329739"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5832">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329737"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5820">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329716"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5818">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329714"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5942">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329934"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5940">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329932"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5926">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329894"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5923">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329891"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5921">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329882"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5890">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329842"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5831">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329734"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5882">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329825"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5880">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329823"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5879">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329821"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5863">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329806"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5861">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329803"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5860">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329801"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5859">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329799"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5858">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329797"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5857">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329795"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5856">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329793"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5854">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329784"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5853">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329782"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5851">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329779"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5850">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329777"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5848">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329774"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5847">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329772"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6236">
            <name>const ThreadingException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ThreadingException_4952259FBBDB6BDFCF1A52EABE2C1A61BF601670"/>
            </content>
        </type>
        <type derived="true" id="type.6237">
            <name>const ThreadingException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ThreadingException_4952259FBBDB6BDFCF1A52EABE2C1A61BF601670"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6318">
            <name>const ThrowStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ThrowStatement_6216EF486931E535CE6CDEE33F4D2E7A53BE76B7"/>
            </content>
        </type>
        <type derived="true" id="type.6319">
            <name>const ThrowStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ThrowStatement_6216EF486931E535CE6CDEE33F4D2E7A53BE76B7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6346">
            <name>const TokenParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_TokenParser_319753BA62AEDA94D46A4D47AEE13AEC1B1F3B72"/>
            </content>
        </type>
        <type derived="true" id="type.6347">
            <name>const TokenParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_TokenParser_319753BA62AEDA94D46A4D47AEE13AEC1B1F3B72"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6321">
            <name>const TryStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_TryStatement_1132D26D95ED5027A0CFA7B5E46039A7A645EE96"/>
            </content>
        </type>
        <type derived="true" id="type.6322">
            <name>const TryStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_TryStatement_1132D26D95ED5027A0CFA7B5E46039A7A645EE96"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6242">
            <name>const Type</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Type_8616C506F1B48B10568C6F4144C4A41FFB320CF3"/>
            </content>
        </type>
        <type derived="true" id="type.6243">
            <name>const Type&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Type_8616C506F1B48B10568C6F4144C4A41FFB320CF3"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6282">
            <name>const TypeName</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_TypeName_BB4524B12FF73AADA611653B9DE399FFFCEC3BEB"/>
            </content>
        </type>
        <type derived="true" id="type.6283">
            <name>const TypeName&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_TypeName_BB4524B12FF73AADA611653B9DE399FFFCEC3BEB"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5855">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329785"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5846">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329770"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5852">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329780"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5849">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329775"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5922">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329883"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5840">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329760"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5924">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329892"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5843">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329765"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5927">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329895"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6264">
            <name>const UnaryMinus</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnaryMinus_04009179AAFCB4DEE000972E675D4198E1AF838F"/>
            </content>
        </type>
        <type derived="true" id="type.6265">
            <name>const UnaryMinus&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnaryMinus_04009179AAFCB4DEE000972E675D4198E1AF838F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6261">
            <name>const UnaryPlus</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnaryPlus_65EA8B4AEC38C5A830F0C46A73800A840EFCF9C2"/>
            </content>
        </type>
        <type derived="true" id="type.6262">
            <name>const UnaryPlus&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnaryPlus_65EA8B4AEC38C5A830F0C46A73800A840EFCF9C2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6240">
            <name>const UnicodeException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnicodeException_F535D36BB8009200467ACEA05819217182306079"/>
            </content>
        </type>
        <type derived="true" id="type.6241">
            <name>const UnicodeException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnicodeException_F535D36BB8009200467ACEA05819217182306079"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349639">
            <name>const UniquePtr&lt;System.Text.RegularExpressions.PtrNfaStateFactory></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349636"/>
            </content>
        </type>
        <type derived="true" id="type.9349641">
            <name>const UniquePtr&lt;System.Text.RegularExpressions.PtrNfaStateFactory>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349636"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349640">
            <name>const UniquePtr&lt;System.Text.RegularExpressions.PtrNfaStateFactory>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349636"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349583">
            <name>const UniquePtr&lt;System.Text.RegularExpressions.RegExParser></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349580"/>
            </content>
        </type>
        <type derived="true" id="type.9349585">
            <name>const UniquePtr&lt;System.Text.RegularExpressions.RegExParser>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349580"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349584">
            <name>const UniquePtr&lt;System.Text.RegularExpressions.RegExParser>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349580"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5903">
            <name>const Value&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329863"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349830">
            <name>const ValueObject&lt;System.Text.RegularExpressions.CharClass></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349827"/>
            </content>
        </type>
        <type derived="true" id="type.9349832">
            <name>const ValueObject&lt;System.Text.RegularExpressions.CharClass>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349827"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349831">
            <name>const ValueObject&lt;System.Text.RegularExpressions.CharClass>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349827"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349847">
            <name>const ValueObject&lt;System.Text.RegularExpressions.Class></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349844"/>
            </content>
        </type>
        <type derived="true" id="type.9349849">
            <name>const ValueObject&lt;System.Text.RegularExpressions.Class>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349844"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349848">
            <name>const ValueObject&lt;System.Text.RegularExpressions.Class>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349844"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349797">
            <name>const ValueObject&lt;System.Text.RegularExpressions.PtrNfa></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349794"/>
            </content>
        </type>
        <type derived="true" id="type.9349799">
            <name>const ValueObject&lt;System.Text.RegularExpressions.PtrNfa>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349794"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349798">
            <name>const ValueObject&lt;System.Text.RegularExpressions.PtrNfa>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9349794"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6157">
            <name>const ValueType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9337398"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6191">
            <name>const double&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9329187"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6189">
            <name>const float&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9329186"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9339284">
            <name>const int&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9329182"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349490">
            <name>const int*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9329182"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349690">
            <name>const int*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9329182"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349691">
            <name>const int*&amp;&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9329182"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349689">
            <name>const int**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9329182"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6178">
            <name>const sbyte&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9329178"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6181">
            <name>const short&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9329180"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6351">
            <name>const stdlib</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_stdlib_C45D8720A0EE8749F9E55E6402CA85D0B654A981"/>
            </content>
        </type>
        <type derived="true" id="type.6352">
            <name>const stdlib&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_stdlib_C45D8720A0EE8749F9E55E6402CA85D0B654A981"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9330413">
            <name>const uchar*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9329190"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6183">
            <name>const ushort&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9329181"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type basic="true" id="type.9329187">
            <name>double</name>
        </type>
        <type basic="true" id="type.9329186">
            <name>float</name>
        </type>
        <type basic="true" id="type.9329182">
            <name>int</name>
        </type>
        <type derived="true" id="type.9329209">
            <name>int&amp;</name>
            <content>
                <baseType ref="type.9329182"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9329208">
            <name>int*</name>
            <content>
                <baseType ref="type.9329182"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349675">
            <name>int*&amp;</name>
            <content>
                <baseType ref="type.9329182"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349676">
            <name>int*&amp;&amp;</name>
            <content>
                <baseType ref="type.9329182"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9349674">
            <name>int**</name>
            <content>
                <baseType ref="type.9329182"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.9329184">
            <name>long</name>
        </type>
        <type basic="true" id="type.9329178">
            <name>sbyte</name>
        </type>
        <type basic="true" id="type.9329180">
            <name>short</name>
        </type>
        <type derived="true" id="type.6353">
            <name>stdlib&amp;&amp;</name>
            <content>
                <baseType ref="class_stdlib_C45D8720A0EE8749F9E55E6402CA85D0B654A981"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type basic="true" id="type.9329190">
            <name>uchar</name>
        </type>
        <type derived="true" id="type.9329233">
            <name>uchar&amp;</name>
            <content>
                <baseType ref="type.9329190"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9329232">
            <name>uchar*</name>
            <content>
                <baseType ref="type.9329190"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.9329183">
            <name>uint</name>
        </type>
        <type derived="true" id="type.9329212">
            <name>uint&amp;</name>
            <content>
                <baseType ref="type.9329183"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9329211">
            <name>uint*</name>
            <content>
                <baseType ref="type.9329183"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.9329185">
            <name>ulong</name>
        </type>
        <type derived="true" id="type.9329218">
            <name>ulong&amp;</name>
            <content>
                <baseType ref="type.9329185"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9329217">
            <name>ulong*</name>
            <content>
                <baseType ref="type.9329185"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.9329181">
            <name>ushort</name>
        </type>
        <type basic="true" id="type.9329189">
            <name>wchar</name>
        </type>
        <type derived="true" id="type.9329230">
            <name>wchar&amp;</name>
            <content>
                <baseType ref="type.9329189"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9329229">
            <name>wchar*</name>
            <content>
                <baseType ref="type.9329189"/>
                <qualifier>*</qualifier>
            </content>
        </type>
    </types>
</library>
