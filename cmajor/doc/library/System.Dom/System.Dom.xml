<library>
    <name>System.Dom</name>
    <style>../../style/cmdoc.css</style>
    <namespaces>
        <namespace id="System.Dom">
            <name>System.Dom</name>
            <classes>
                <class id="class_BuildIndexVisitor_2A216A2E67DE23C4749113C859D07166BA8E981B">
                    <name>BuildIndexVisitor</name>
                    <groupName>BuildIndexVisitor</groupName>
                    <syntax> public class BuildIndexVisitor;</syntax>
                    <baseClass ref="class_Visitor_9325C9B633E34A075869657A28EB269260004DBC"/>
                    <constructors>
                        <constructor id="constructor_BuildIndexVisitor_51B5F1343E9A3CEB909523CCDF3813F1B43C4855">
                            <name>BuildIndexVisitor(HashMap&lt;String&lt;uchar>, DomElement*, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp; elementsByIdMap_)</name>
                            <syntax>public nothrow BuildIndexVisitor(HashMap&lt;String&lt;uchar>, DomElement*, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp; elementsByIdMap_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>elementsByIdMap_</name>
                                    <type ref="type.8711894"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_BeginVisit_BuildIndexVisitor_70524D3B38303F20E6093E21332E1B0F05DC4B36">
                            <name>BeginVisit(DomElement* element)</name>
                            <syntax>public override void BeginVisit(DomElement* element);</syntax>
                            <parameters>
                                <parameter>
                                    <name>element</name>
                                    <type ref="type.8711242"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_DomAttr_9E6E1B42DF1CBDED3278FE00CE0A15F354369845">
                    <name>DomAttr</name>
                    <groupName>DomAttr</groupName>
                    <syntax> public class DomAttr;</syntax>
                    <baseClass ref="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509"/>
                    <constructors>
                        <constructor id="default_constructor_DomAttr_AB81CB5DE709B9B2F150026010CE711068D659AE">
                            <name>DomAttr()</name>
                            <syntax>public nothrow DomAttr();</syntax>
                        </constructor>
                        <constructor id="constructor_DomAttr_C5E02F499E72D96385554375EF366871A59B666C">
                            <name>DomAttr(const String&lt;uchar>&amp; name_, const String&lt;uchar>&amp; value_)</name>
                            <syntax>public nothrow DomAttr(const String&lt;uchar>&amp; name_, const String&lt;uchar>&amp; value_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.8700299"/>
                                </parameter>
                                <parameter>
                                    <name>value_</name>
                                    <type ref="type.8700299"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_CloneNode_DomAttr_935C5C343A9FD5B15937A0DB83F63C34AF21AB7B">
                            <name>CloneNode(bool deep) const</name>
                            <syntax>public override UniquePtr&lt;System.Dom.DomNode> CloneNode(bool deep) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>deep</name>
                                    <type ref="type.8699065"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8711878"/>
                        </function>
                        <function id="member_function_Prefix_DomAttr_9E251FBB8F3693299BC88C721AD7E82AC96BE8A8">
                            <name>Prefix() const</name>
                            <syntax>public nothrow override String&lt;uchar> Prefix() const;</syntax>
                            <returnType ref="type.8700294"/>
                        </function>
                        <function id="member_function_SetPrefix_DomAttr_B38F0B9956405E41A3EBD7A8D0E04A5D93B63933">
                            <name>SetPrefix(const String&lt;uchar>&amp; prefix)</name>
                            <syntax>public override void SetPrefix(const String&lt;uchar>&amp; prefix);</syntax>
                            <parameters>
                                <parameter>
                                    <name>prefix</name>
                                    <type ref="type.8700299"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="function_group_Value_73DFA4B0DF934D95503D7A95D8152E8150B0F634">
                            <name>Value</name>
                            <overloads>
                                <overload id="member_function_Value_DomAttr_0688EAFB5D021FF9EA3596D9D9FA1488C0F8E5A6">
                                    <name>Value()</name>
                                    <syntax>public nothrow inline String&lt;uchar>&amp; Value();</syntax>
                                    <returnType ref="type.8700296"/>
                                </overload>
                                <overload id="member_function_Value_DomAttr_350BF1A9B050ED3BF0BA27E4469D4F7AD138FBF5">
                                    <name>Value() const</name>
                                    <syntax>public nothrow inline const String&lt;uchar>&amp; Value() const;</syntax>
                                    <returnType ref="type.8700299"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_Write_DomAttr_1B6A9ACE9639381C547B451DBE726C33AEB0CB94">
                            <name>Write(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Write(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.8699413"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_DomCDataSection_B7F8D16E36F2CB9C1D7CB1E00A5E41623C025C7C">
                    <name>DomCDataSection</name>
                    <groupName>DomCDataSection</groupName>
                    <syntax> public class DomCDataSection;</syntax>
                    <baseClass ref="class_DomText_A6FE62F1B199D0D0DC914DDEC6950372BD94082D"/>
                    <constructors>
                        <constructor id="default_constructor_DomCDataSection_B0AFDEF331FDBF6919B4308C1C105A49BD4555C3">
                            <name>DomCDataSection()</name>
                            <syntax>public nothrow DomCDataSection();</syntax>
                        </constructor>
                        <constructor id="constructor_DomCDataSection_21A8F4462D9EA214BEDDD2AC7C0AD09A1CC34403">
                            <name>DomCDataSection(const String&lt;uchar>&amp; data_)</name>
                            <syntax>public nothrow explicit DomCDataSection(const String&lt;uchar>&amp; data_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>data_</name>
                                    <type ref="type.8700299"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_DomCDataSection_2F328A27731CD73CA08C10553B1CD2EA4B4EADB1">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.8711271"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_CloneNode_DomCDataSection_8DF77F2D3E03157D0AC8218FD9F43B7290948342">
                            <name>CloneNode(bool deep) const</name>
                            <syntax>public override UniquePtr&lt;System.Dom.DomNode> CloneNode(bool deep) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>deep</name>
                                    <type ref="type.8699065"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8711878"/>
                        </function>
                        <function id="member_function_Write_DomCDataSection_93A48B52D57E1E2FC4FE3A8F0106B0C83595D96F">
                            <name>Write(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Write(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.8699413"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_DomCharacterData_0088EED8AB2F3E51DCCF79E1F2620EC545C0C991">
                    <name>DomCharacterData</name>
                    <groupName>DomCharacterData</groupName>
                    <syntax>abstract public class DomCharacterData;</syntax>
                    <baseClass ref="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509"/>
                    <constructors>
                        <constructor id="constructor_DomCharacterData_0D2ED50FD9C542E4989FC83F182A400A992C5279">
                            <name>DomCharacterData(const String&lt;uchar>&amp; name_)</name>
                            <syntax>public nothrow explicit DomCharacterData(const String&lt;uchar>&amp; name_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.8700299"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_DomCharacterData_FC8F73FDD5E03EF991785C797F62291A3258936D">
                            <name>DomCharacterData(const String&lt;uchar>&amp; name_, const String&lt;uchar>&amp; data_)</name>
                            <syntax>public nothrow DomCharacterData(const String&lt;uchar>&amp; name_, const String&lt;uchar>&amp; data_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.8700299"/>
                                </parameter>
                                <parameter>
                                    <name>data_</name>
                                    <type ref="type.8700299"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="function_group_Data_F9BE76778A8EABC85EA40A68A25A7B0703385A7F">
                            <name>Data</name>
                            <overloads>
                                <overload id="member_function_Data_DomCharacterData_971275725C713034BD6564D861B70DA652C0F0BA">
                                    <name>Data()</name>
                                    <syntax>public nothrow String&lt;uchar>&amp; Data();</syntax>
                                    <returnType ref="type.8700296"/>
                                </overload>
                                <overload id="member_function_Data_DomCharacterData_9614944259DCCB50426994A4909CABA60E4ECA0E">
                                    <name>Data() const</name>
                                    <syntax>public nothrow const String&lt;uchar>&amp; Data() const;</syntax>
                                    <returnType ref="type.8700299"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_ValueContainsNewLine_DomCharacterData_0FFE57235C068A23D738740AFA620D3212081A50">
                            <name>ValueContainsNewLine()</name>
                            <syntax>public nothrow override bool ValueContainsNewLine();</syntax>
                            <returnType ref="type.8699065"/>
                        </function>
                        <function id="member_function_Write_DomCharacterData_000E6794CE3D92AA20F50682E234CD4B6F38124A">
                            <name>Write(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Write(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.8699413"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_DomComment_7B14BD5D921A05087E97FD2083821D797C780D38">
                    <name>DomComment</name>
                    <groupName>DomComment</groupName>
                    <syntax> public class DomComment;</syntax>
                    <baseClass ref="class_DomCharacterData_0088EED8AB2F3E51DCCF79E1F2620EC545C0C991"/>
                    <constructors>
                        <constructor id="default_constructor_DomComment_D6391ABCEEC52D7B8E55F450EC9451DD1FDFC642">
                            <name>DomComment()</name>
                            <syntax>public nothrow DomComment();</syntax>
                        </constructor>
                        <constructor id="constructor_DomComment_8F2626E5AF8513C847915CAFDD203F610AA91A3E">
                            <name>DomComment(const String&lt;uchar>&amp; data_)</name>
                            <syntax>public nothrow explicit DomComment(const String&lt;uchar>&amp; data_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>data_</name>
                                    <type ref="type.8700299"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_DomComment_F387713A67D0604D693674D50DA69D7B09738A12">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.8711271"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_CloneNode_DomComment_919EB4CF012E5EE3EABF9FB2DE82DAFF0E044331">
                            <name>CloneNode(bool deep) const</name>
                            <syntax>public override UniquePtr&lt;System.Dom.DomNode> CloneNode(bool deep) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>deep</name>
                                    <type ref="type.8699065"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8711878"/>
                        </function>
                        <function id="member_function_Write_DomComment_99B996338A898CFBEBFEC3BAA0FAB9E2CC0268C3">
                            <name>Write(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Write(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.8699413"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_DomDocument_975632F3AA8CF3FEC1D51FB0E91F580D6EBA16C8">
                    <name>DomDocument</name>
                    <groupName>DomDocument</groupName>
                    <syntax> public class DomDocument;</syntax>
                    <baseClass ref="class_DomParentNode_F9975590E24BA357F4D6034909932314C990E2E2"/>
                    <constructors>
                        <constructor id="default_constructor_DomDocument_B8F0784EA32E884DF21C63B4A14DF9D544567DC9">
                            <name>DomDocument()</name>
                            <syntax>public nothrow DomDocument();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_DomDocument_8F4220E308D689CD6DA67DFF64E8503276BA6543">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.8711271"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_AppendChild_DomDocument_79F3A44DE896CD5FAA80F311288965B7FF1A7E85">
                            <name>AppendChild(UniquePtr&lt;System.Dom.DomNode>&amp;&amp; newChild)</name>
                            <syntax>public override DomNode* AppendChild(UniquePtr&lt;System.Dom.DomNode>&amp;&amp; newChild);</syntax>
                            <parameters>
                                <parameter>
                                    <name>newChild</name>
                                    <type ref="type.8711884"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8711258"/>
                        </function>
                        <function id="member_function_CloneNode_DomDocument_E87D6EE8F706AE697F6C95869C4933882AD49EB0">
                            <name>CloneNode(bool deep) const</name>
                            <syntax>public override UniquePtr&lt;System.Dom.DomNode> CloneNode(bool deep) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>deep</name>
                                    <type ref="type.8699065"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8711878"/>
                        </function>
                        <function id="member_function_DocumentElement_DomDocument_EA7DB052EE2116825A5AA6216D3AE127C9760CE4">
                            <name>DocumentElement() const</name>
                            <syntax>public nothrow inline DomElement* DocumentElement() const;</syntax>
                            <returnType ref="type.8711242"/>
                        </function>
                        <function id="member_function_GetElementById_DomDocument_9CE592627CE61165EB4DBD62EA1E0AEF39F07DAA">
                            <name>GetElementById(const String&lt;uchar>&amp; elementId)</name>
                            <syntax>public DomElement* GetElementById(const String&lt;uchar>&amp; elementId);</syntax>
                            <parameters>
                                <parameter>
                                    <name>elementId</name>
                                    <type ref="type.8700299"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8711242"/>
                        </function>
                        <function id="member_function_InsertBefore_DomDocument_DD4532A7C4B299DE45557825035402E58919B411">
                            <name>InsertBefore(UniquePtr&lt;System.Dom.DomNode>&amp;&amp; newChild, DomNode* refChild)</name>
                            <syntax>public override DomNode* InsertBefore(UniquePtr&lt;System.Dom.DomNode>&amp;&amp; newChild, DomNode* refChild);</syntax>
                            <parameters>
                                <parameter>
                                    <name>newChild</name>
                                    <type ref="type.8711884"/>
                                </parameter>
                                <parameter>
                                    <name>refChild</name>
                                    <type ref="type.8711258"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8711258"/>
                        </function>
                        <function id="member_function_InternalInvalidateIndex_DomDocument_F781AA27409ED770095C4F30128600D4D39EC8DB">
                            <name>InternalInvalidateIndex()</name>
                            <syntax>public nothrow inline void InternalInvalidateIndex();</syntax>
                        </function>
                        <function id="member_function_RemoveChild_DomDocument_90FE30CBAAFDB1C62D343FF6CE06E05B2A11454B">
                            <name>RemoveChild(DomNode* oldChild)</name>
                            <syntax>public override UniquePtr&lt;System.Dom.DomNode> RemoveChild(DomNode* oldChild);</syntax>
                            <parameters>
                                <parameter>
                                    <name>oldChild</name>
                                    <type ref="type.8711258"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8711878"/>
                        </function>
                        <function id="member_function_ReplaceChild_DomDocument_61D8A2CE0D8786438A22377237BBBAC39DD18EFF">
                            <name>ReplaceChild(UniquePtr&lt;System.Dom.DomNode>&amp;&amp; newChild, DomNode* oldChild)</name>
                            <syntax>public override UniquePtr&lt;System.Dom.DomNode> ReplaceChild(UniquePtr&lt;System.Dom.DomNode>&amp;&amp; newChild, DomNode* oldChild);</syntax>
                            <parameters>
                                <parameter>
                                    <name>newChild</name>
                                    <type ref="type.8711884"/>
                                </parameter>
                                <parameter>
                                    <name>oldChild</name>
                                    <type ref="type.8711258"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8711878"/>
                        </function>
                        <function id="member_function_SetXmlEncoding_DomDocument_1FBADC79BCCAF5076E46C065A819B23C113B287B">
                            <name>SetXmlEncoding(const String&lt;uchar>&amp; xmlEncoding_)</name>
                            <syntax>public nothrow inline void SetXmlEncoding(const String&lt;uchar>&amp; xmlEncoding_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>xmlEncoding_</name>
                                    <type ref="type.8700299"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetXmlStandalone_DomDocument_859F7B8E15E3030ED33ACEAF6C7022704035AD40">
                            <name>SetXmlStandalone(bool xmlStandalone_)</name>
                            <syntax>public nothrow inline void SetXmlStandalone(bool xmlStandalone_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>xmlStandalone_</name>
                                    <type ref="type.8699065"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetXmlVersion_DomDocument_F82DBF6FB0290167F663312956F88F27B58582E3">
                            <name>SetXmlVersion(const String&lt;uchar>&amp; xmlVersion_)</name>
                            <syntax>public nothrow inline void SetXmlVersion(const String&lt;uchar>&amp; xmlVersion_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>xmlVersion_</name>
                                    <type ref="type.8700299"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_XmlEncoding_DomDocument_55F846A6B10A28EB0B2427074C636914E17F9BA5">
                            <name>XmlEncoding() const</name>
                            <syntax>public nothrow inline const String&lt;uchar>&amp; XmlEncoding() const;</syntax>
                            <returnType ref="type.8700299"/>
                        </function>
                        <function id="member_function_XmlStandalone_DomDocument_4280CB2592F8D44967B8EB73AC2B0491F1E71DA0">
                            <name>XmlStandalone() const</name>
                            <syntax>public nothrow inline bool XmlStandalone() const;</syntax>
                            <returnType ref="type.8699065"/>
                        </function>
                        <function id="member_function_XmlVersion_DomDocument_90F041999067B56FDD22A11C204CACECC32CE5C9">
                            <name>XmlVersion() const</name>
                            <syntax>public nothrow inline const String&lt;uchar>&amp; XmlVersion() const;</syntax>
                            <returnType ref="type.8700299"/>
                        </function>
                    </functions>
                </class>
                <class id="class_DomDocumentBuilder_397E94D2EA454117602C5070385DB01C1EFBB45B">
                    <name>DomDocumentBuilder</name>
                    <groupName>DomDocumentBuilder</groupName>
                    <syntax> public class DomDocumentBuilder;</syntax>
                    <baseClass ref="class_XmlContentHandler_7429223FCBE3A541F14FD9475F2099B20E248715"/>
                    <constructors>
                        <constructor id="default_constructor_DomDocumentBuilder_3513E415B4B6A29E9AAE2321D004C71B2F4D9118">
                            <name>DomDocumentBuilder()</name>
                            <syntax>public DomDocumentBuilder();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_CDataSection_DomDocumentBuilder_C9C6C3454EE2A21538686310C908DFC265907934">
                            <name>CDataSection(const String&lt;uchar>&amp; cdata)</name>
                            <syntax>public override void CDataSection(const String&lt;uchar>&amp; cdata);</syntax>
                            <parameters>
                                <parameter>
                                    <name>cdata</name>
                                    <type ref="type.8700299"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Comment_DomDocumentBuilder_082FFD95DC14A5AB475CB65318CC235650A57DAA">
                            <name>Comment(const String&lt;uchar>&amp; comment)</name>
                            <syntax>public override void Comment(const String&lt;uchar>&amp; comment);</syntax>
                            <parameters>
                                <parameter>
                                    <name>comment</name>
                                    <type ref="type.8700299"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Encoding_DomDocumentBuilder_85CA7F73D22C1ED735BEC3E5DEF59BFCC460A36A">
                            <name>Encoding(const String&lt;uchar>&amp; encoding)</name>
                            <syntax>public override void Encoding(const String&lt;uchar>&amp; encoding);</syntax>
                            <parameters>
                                <parameter>
                                    <name>encoding</name>
                                    <type ref="type.8700299"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_EndDocument_DomDocumentBuilder_88A13847CC99A504B0A26AE398E0A6977F936E65">
                            <name>EndDocument()</name>
                            <syntax>public override void EndDocument();</syntax>
                        </function>
                        <function id="member_function_EndElement_DomDocumentBuilder_531007E1486D7FE0AE0DC2CD67125DE778D19C35">
                            <name>EndElement(const String&lt;uchar>&amp; namespaceUri, const String&lt;uchar>&amp; localName, const String&lt;uchar>&amp; qualifiedName)</name>
                            <syntax>public override void EndElement(const String&lt;uchar>&amp; namespaceUri, const String&lt;uchar>&amp; localName, const String&lt;uchar>&amp; qualifiedName);</syntax>
                            <parameters>
                                <parameter>
                                    <name>namespaceUri</name>
                                    <type ref="type.8700299"/>
                                </parameter>
                                <parameter>
                                    <name>localName</name>
                                    <type ref="type.8700299"/>
                                </parameter>
                                <parameter>
                                    <name>qualifiedName</name>
                                    <type ref="type.8700299"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_GetDocument_DomDocumentBuilder_CC246904CFD7CD24AF446EDE668F2F20ADB1F359">
                            <name>GetDocument()</name>
                            <syntax>public UniquePtr&lt;System.Dom.DomDocument> GetDocument();</syntax>
                            <returnType ref="type.8712102"/>
                        </function>
                        <function id="member_function_PI_DomDocumentBuilder_61F51DF9AA353D12FE9AADA6520FEB6BEA5C0593">
                            <name>PI(const String&lt;uchar>&amp; target, const String&lt;uchar>&amp; data)</name>
                            <syntax>public override void PI(const String&lt;uchar>&amp; target, const String&lt;uchar>&amp; data);</syntax>
                            <parameters>
                                <parameter>
                                    <name>target</name>
                                    <type ref="type.8700299"/>
                                </parameter>
                                <parameter>
                                    <name>data</name>
                                    <type ref="type.8700299"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SkippedEntity_DomDocumentBuilder_15657861BA4A18BD4976D5430AF7A427169E9A3F">
                            <name>SkippedEntity(const String&lt;uchar>&amp; entityName)</name>
                            <syntax>public override void SkippedEntity(const String&lt;uchar>&amp; entityName);</syntax>
                            <parameters>
                                <parameter>
                                    <name>entityName</name>
                                    <type ref="type.8700299"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Standalone_DomDocumentBuilder_B408A87030CEE9CB9B32143D6A469B17F4F9C7D1">
                            <name>Standalone(bool standalone)</name>
                            <syntax>public override void Standalone(bool standalone);</syntax>
                            <parameters>
                                <parameter>
                                    <name>standalone</name>
                                    <type ref="type.8699065"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_StartDocument_DomDocumentBuilder_81609C5E7C8C1F3ABC965847DAFC035EFB6232DD">
                            <name>StartDocument()</name>
                            <syntax>public override void StartDocument();</syntax>
                        </function>
                        <function id="member_function_StartElement_DomDocumentBuilder_0BB68E5B2C1AF454B0DE3D59A0BC8D62F4E3966B">
                            <name>StartElement(const String&lt;uchar>&amp; namespaceUri, const String&lt;uchar>&amp; localName, const String&lt;uchar>&amp; qualifiedName, const Attributes&amp; attributes)</name>
                            <syntax>public override void StartElement(const String&lt;uchar>&amp; namespaceUri, const String&lt;uchar>&amp; localName, const String&lt;uchar>&amp; qualifiedName, const Attributes&amp; attributes);</syntax>
                            <parameters>
                                <parameter>
                                    <name>namespaceUri</name>
                                    <type ref="type.8700299"/>
                                </parameter>
                                <parameter>
                                    <name>localName</name>
                                    <type ref="type.8700299"/>
                                </parameter>
                                <parameter>
                                    <name>qualifiedName</name>
                                    <type ref="type.8700299"/>
                                </parameter>
                                <parameter>
                                    <name>attributes</name>
                                    <type ref="type.8709749"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Text_DomDocumentBuilder_BE076A6CAECBA788FC2003811419E82FFF7D7D84">
                            <name>Text(const String&lt;uchar>&amp; text)</name>
                            <syntax>public override void Text(const String&lt;uchar>&amp; text);</syntax>
                            <parameters>
                                <parameter>
                                    <name>text</name>
                                    <type ref="type.8700299"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Version_DomDocumentBuilder_2D201C2C5147C07698DD6C449348343BB7BA61B1">
                            <name>Version(const String&lt;uchar>&amp; version)</name>
                            <syntax>public override void Version(const String&lt;uchar>&amp; version);</syntax>
                            <parameters>
                                <parameter>
                                    <name>version</name>
                                    <type ref="type.8700299"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_DomDocumentFragment_F8F4B9224E04A95DBEE5184849B88CF399A2ABD3">
                    <name>DomDocumentFragment</name>
                    <groupName>DomDocumentFragment</groupName>
                    <syntax> public class DomDocumentFragment;</syntax>
                    <baseClass ref="class_DomParentNode_F9975590E24BA357F4D6034909932314C990E2E2"/>
                    <constructors>
                        <constructor id="default_constructor_DomDocumentFragment_93DE42A92D8A94F263414AC46CE66B08C5038967">
                            <name>DomDocumentFragment()</name>
                            <syntax>public nothrow DomDocumentFragment();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_CloneNode_DomDocumentFragment_35B846C79961A3025073B5C482B4A40539283892">
                            <name>CloneNode(bool deep) const</name>
                            <syntax>public override UniquePtr&lt;System.Dom.DomNode> CloneNode(bool deep) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>deep</name>
                                    <type ref="type.8699065"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8711878"/>
                        </function>
                    </functions>
                </class>
                <class id="class_DomElement_2F019E5CBBCF1F9C65CE734BA20F69BEFDC19B3B">
                    <name>DomElement</name>
                    <groupName>DomElement</groupName>
                    <syntax> public class DomElement;</syntax>
                    <baseClass ref="class_DomParentNode_F9975590E24BA357F4D6034909932314C990E2E2"/>
                    <constructors>
                        <constructor id="constructor_DomElement_186B1B1F0883B010030F370B2A79FE1306D9FFD9">
                            <name>DomElement(const String&lt;uchar>&amp; name_)</name>
                            <syntax>public explicit DomElement(const String&lt;uchar>&amp; name_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.8700299"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_DomElement_197296D679BDD963B14CB5BF301229DCBB641F36">
                            <name>DomElement(const String&lt;uchar>&amp; name_, List&lt;UniquePtr&lt;System.Dom.DomAttr>>&amp;&amp; attrs_, Map&lt;String&lt;uchar>, DomAttr*, Less&lt;String&lt;uchar>>>&amp;&amp; attrMap_)</name>
                            <syntax>public DomElement(const String&lt;uchar>&amp; name_, List&lt;UniquePtr&lt;System.Dom.DomAttr>>&amp;&amp; attrs_, Map&lt;String&lt;uchar>, DomAttr*, Less&lt;String&lt;uchar>>>&amp;&amp; attrMap_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.8700299"/>
                                </parameter>
                                <parameter>
                                    <name>attrs_</name>
                                    <type ref="type.8712002"/>
                                </parameter>
                                <parameter>
                                    <name>attrMap_</name>
                                    <type ref="type.8712069"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_AddAttribute_DomElement_35F28C40B3AF25749FFE7E3857BD6A6A71244A96">
                            <name>AddAttribute(UniquePtr&lt;System.Dom.DomAttr>&amp;&amp; attr)</name>
                            <syntax>public void AddAttribute(UniquePtr&lt;System.Dom.DomAttr>&amp;&amp; attr);</syntax>
                            <parameters>
                                <parameter>
                                    <name>attr</name>
                                    <type ref="type.8711981"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_CloneNode_DomElement_BEA193FB092CFFC0973D2E84DA0205A1CB679EDA">
                            <name>CloneNode(bool deep) const</name>
                            <syntax>public override UniquePtr&lt;System.Dom.DomNode> CloneNode(bool deep) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>deep</name>
                                    <type ref="type.8699065"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8711878"/>
                        </function>
                        <function id="member_function_GetAttribute_DomElement_E340EFCACFF415B6AE664EAC51245781B895A16D">
                            <name>GetAttribute(const String&lt;uchar>&amp; attrName) const</name>
                            <syntax>public String&lt;uchar> GetAttribute(const String&lt;uchar>&amp; attrName) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>attrName</name>
                                    <type ref="type.8700299"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8700294"/>
                        </function>
                        <function id="member_function_GetElementsByTagName_DomElement_7805B6581C1815547E63C325E65F07DD439A84CE">
                            <name>GetElementsByTagName(const String&lt;uchar>&amp; tagName)</name>
                            <syntax>public NodeList GetElementsByTagName(const String&lt;uchar>&amp; tagName);</syntax>
                            <parameters>
                                <parameter>
                                    <name>tagName</name>
                                    <type ref="type.8700299"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_NodeList_B93D67EB9918764021AB095F8DF0C822938F175B"/>
                        </function>
                        <function id="member_function_HasAttributes_DomElement_7849C3B615C07C6DDC4EF43809539FE2798FF326">
                            <name>HasAttributes() const</name>
                            <syntax>public nothrow override bool HasAttributes() const;</syntax>
                            <returnType ref="type.8699065"/>
                        </function>
                        <function id="member_function_Prefix_DomElement_A8D720F37E6FD61240CCF1A6C3A835524F125A9B">
                            <name>Prefix() const</name>
                            <syntax>public nothrow override String&lt;uchar> Prefix() const;</syntax>
                            <returnType ref="type.8700294"/>
                        </function>
                        <function id="member_function_RemoveAttribute_DomElement_98ABF1EA03C0C539ABA7D5D0004ED9C074CFD5C1">
                            <name>RemoveAttribute(const String&lt;uchar>&amp; attrName)</name>
                            <syntax>public void RemoveAttribute(const String&lt;uchar>&amp; attrName);</syntax>
                            <parameters>
                                <parameter>
                                    <name>attrName</name>
                                    <type ref="type.8700299"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetAttribute_DomElement_B7062E899FF7C4A47CFD4C689D80F65222ACBB52">
                            <name>SetAttribute(const String&lt;uchar>&amp; attrName, const String&lt;uchar>&amp; attrValue)</name>
                            <syntax>public void SetAttribute(const String&lt;uchar>&amp; attrName, const String&lt;uchar>&amp; attrValue);</syntax>
                            <parameters>
                                <parameter>
                                    <name>attrName</name>
                                    <type ref="type.8700299"/>
                                </parameter>
                                <parameter>
                                    <name>attrValue</name>
                                    <type ref="type.8700299"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetPrefix_DomElement_3908E49BBCD453800503F73891121EB356014C8F">
                            <name>SetPrefix(const String&lt;uchar>&amp; prefix)</name>
                            <syntax>public override void SetPrefix(const String&lt;uchar>&amp; prefix);</syntax>
                            <parameters>
                                <parameter>
                                    <name>prefix</name>
                                    <type ref="type.8700299"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_TagName_DomElement_7677108EDD12B88BF7E56662293BDB90B3D4C125">
                            <name>TagName() const</name>
                            <syntax>public nothrow inline const String&lt;uchar>&amp; TagName() const;</syntax>
                            <returnType ref="type.8700299"/>
                        </function>
                        <function id="member_function_WalkAttribute_DomElement_A479D4CEC7BB7E257B51125038E1BA90342C3465">
                            <name>WalkAttribute(NodeOp&amp; nodeOp)</name>
                            <syntax>public override void WalkAttribute(NodeOp&amp; nodeOp);</syntax>
                            <parameters>
                                <parameter>
                                    <name>nodeOp</name>
                                    <type ref="type.8711256"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Write_DomElement_D13A7148F28037033B06BE4350145904F0951B79">
                            <name>Write(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Write(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.8699413"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_DomException_EE72D4E688A5F4B0F4D22924FF24D42E74D944CA">
                    <name>DomException</name>
                    <groupName>DomException</groupName>
                    <syntax> public class DomException;</syntax>
                    <baseClass ref="class_Exception_02AEA5204AD1035A91C2D843597EACBE078C8989"/>
                    <constructors>
                        <constructor id="constructor_DomException_B242291ADF40674A01BECFCB5FFC4134A9C08232">
                            <name>DomException(const String&lt;char>&amp; message_)</name>
                            <syntax>public nothrow DomException(const String&lt;char>&amp; message_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>message_</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                </class>
                <class id="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509">
                    <name>DomNode</name>
                    <groupName>DomNode</groupName>
                    <syntax>abstract public class DomNode;</syntax>
                    <constructors>
                        <constructor id="constructor_DomNode_DEF6FCBFFA6705BF64FC558B4793E0504D78D924">
                            <name>DomNode(const String&lt;uchar>&amp; name_)</name>
                            <syntax>public nothrow explicit DomNode(const String&lt;uchar>&amp; name_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.8700299"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_DomNode_93156422DA9CB0B1C2D63101BBAF37A641684CBA">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public virtual void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.8711271"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_CloneNode_DomNode_80F4FF592368B1019ACFF7973093B65A977546C8">
                            <name>CloneNode(bool deep) const</name>
                            <syntax>public abstract UniquePtr&lt;System.Dom.DomNode> CloneNode(bool deep) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>deep</name>
                                    <type ref="type.8699065"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8711878"/>
                        </function>
                        <function id="member_function_HasAttributes_DomNode_54692EAF28A9A74D13108AA969F4DE6282EAD5E2">
                            <name>HasAttributes() const</name>
                            <syntax>public nothrow virtual bool HasAttributes() const;</syntax>
                            <returnType ref="type.8699065"/>
                        </function>
                        <function id="member_function_HasChildNodes_DomNode_B54CDA859D4965DDBC948BB3FDF17166ED63D5C3">
                            <name>HasChildNodes() const</name>
                            <syntax>public nothrow virtual bool HasChildNodes() const;</syntax>
                            <returnType ref="type.8699065"/>
                        </function>
                        <function id="member_function_InternalLinkAfter_DomNode_E4B161D58A96C09A21C45015A8DB8265EC8C5343">
                            <name>InternalLinkAfter(DomNode* newNode)</name>
                            <syntax>public nothrow void InternalLinkAfter(DomNode* newNode);</syntax>
                            <parameters>
                                <parameter>
                                    <name>newNode</name>
                                    <type ref="type.8711258"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_InternalLinkBefore_DomNode_C6640AB2F340DA5649F3A4A8E88E6DFF893A30E8">
                            <name>InternalLinkBefore(DomNode* newNode)</name>
                            <syntax>public nothrow void InternalLinkBefore(DomNode* newNode);</syntax>
                            <parameters>
                                <parameter>
                                    <name>newNode</name>
                                    <type ref="type.8711258"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_InternalSetNamespaceUri_DomNode_C8A2900D5C2AB1CCFAC3B8518C2697519F8E3F7C">
                            <name>InternalSetNamespaceUri(const String&lt;uchar>&amp; namespaceUri_)</name>
                            <syntax>public nothrow void InternalSetNamespaceUri(const String&lt;uchar>&amp; namespaceUri_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>namespaceUri_</name>
                                    <type ref="type.8700299"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_InternalSetOwnerDocument_DomNode_2C7B4B1F61644BB75869AFF28315BE03BF5D5C3E">
                            <name>InternalSetOwnerDocument(DomDocument* ownerDocument_)</name>
                            <syntax>public nothrow inline void InternalSetOwnerDocument(DomDocument* ownerDocument_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>ownerDocument_</name>
                                    <type ref="type.8711221"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_InternalSetParent_DomNode_D22E05A7FBD258419F2399CDD157320F1042ADA1">
                            <name>InternalSetParent(DomParentNode* parent_)</name>
                            <syntax>public nothrow inline void InternalSetParent(DomParentNode* parent_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>parent_</name>
                                    <type ref="type.8711264"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_InternalUnlink_DomNode_372BF940A9BCBDD4C88FBA39B4E58A6B956FF862">
                            <name>InternalUnlink()</name>
                            <syntax>public nothrow void InternalUnlink();</syntax>
                        </function>
                        <function id="member_function_LocalName_DomNode_8FCF7CCC9ED964F2F3F18157D385CD15FCA5B8A1">
                            <name>LocalName() const</name>
                            <syntax>public nothrow virtual String&lt;uchar> LocalName() const;</syntax>
                            <returnType ref="type.8700294"/>
                        </function>
                        <function id="member_function_Name_DomNode_8CD8D09862447AE4797372A4EDFF89767B901773">
                            <name>Name() const</name>
                            <syntax>public nothrow inline const String&lt;uchar>&amp; Name() const;</syntax>
                            <returnType ref="type.8700299"/>
                        </function>
                        <function id="member_function_NamespaceUri_DomNode_E5EAFC2221783EA15DBACE764BA8D26A31E7ABDA">
                            <name>NamespaceUri() const</name>
                            <syntax>public nothrow inline const String&lt;uchar>&amp; NamespaceUri() const;</syntax>
                            <returnType ref="type.8700299"/>
                        </function>
                        <function id="member_function_NextSibling_DomNode_0F805F8FF3BA2E16BAD6076AD19F39E281F97560">
                            <name>NextSibling() const</name>
                            <syntax>public nothrow inline DomNode* NextSibling() const;</syntax>
                            <returnType ref="type.8711258"/>
                        </function>
                        <function id="member_function_OwnerDocument_DomNode_51DC44DE9EB31C919B8FAF2B2BA58E99DAF00459">
                            <name>OwnerDocument() const</name>
                            <syntax>public nothrow inline DomDocument* OwnerDocument() const;</syntax>
                            <returnType ref="type.8711221"/>
                        </function>
                        <function id="member_function_Parent_DomNode_98114524C537E4DA6BCA22B350EFF8DBC67FDF74">
                            <name>Parent() const</name>
                            <syntax>public nothrow inline DomParentNode* Parent() const;</syntax>
                            <returnType ref="type.8711264"/>
                        </function>
                        <function id="member_function_Prefix_DomNode_40E6CCC46282FA896E243C1DFCC5F7026765F4BC">
                            <name>Prefix() const</name>
                            <syntax>public nothrow virtual String&lt;uchar> Prefix() const;</syntax>
                            <returnType ref="type.8700294"/>
                        </function>
                        <function id="member_function_PreviousSibling_DomNode_8D75DC5A9E4CB7CA82FB1CA757CF1BA8BDD85DA5">
                            <name>PreviousSibling() const</name>
                            <syntax>public nothrow inline DomNode* PreviousSibling() const;</syntax>
                            <returnType ref="type.8711258"/>
                        </function>
                        <function id="member_function_SetName_DomNode_91F610996B54D1DF548AF27DFFAB5413120FCF58">
                            <name>SetName(const String&lt;uchar>&amp; name_)</name>
                            <syntax>public nothrow inline void SetName(const String&lt;uchar>&amp; name_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.8700299"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetPrefix_DomNode_1EF9E6E9F12B9304CBCCE73EF377A7845644752A">
                            <name>SetPrefix(const String&lt;uchar>&amp; prefix)</name>
                            <syntax>public virtual void SetPrefix(const String&lt;uchar>&amp; prefix);</syntax>
                            <parameters>
                                <parameter>
                                    <name>prefix</name>
                                    <type ref="type.8700299"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_ValueContainsNewLine_DomNode_974B7395ED104A9EA1FC118BDC23FB852C72CD01">
                            <name>ValueContainsNewLine() const</name>
                            <syntax>public nothrow virtual bool ValueContainsNewLine() const;</syntax>
                            <returnType ref="type.8699065"/>
                        </function>
                        <function id="member_function_Walk_DomNode_01D4B49EA0B27E6999659D9231EAA4CE5F93FA17">
                            <name>Walk(NodeOp&amp; nodeOp, Axis axis)</name>
                            <syntax>public void Walk(NodeOp&amp; nodeOp, Axis axis);</syntax>
                            <parameters>
                                <parameter>
                                    <name>nodeOp</name>
                                    <type ref="type.8711256"/>
                                </parameter>
                                <parameter>
                                    <name>axis</name>
                                    <type ref="enumerated_type_Axis_8D4FE5B83262A122798FD80A5636BA4533BD15EB"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_WalkAncestor_DomNode_8A1869ED749CAEA7336C50365124ADB13DEE7333">
                            <name>WalkAncestor(NodeOp&amp; nodeOp)</name>
                            <syntax>public void WalkAncestor(NodeOp&amp; nodeOp);</syntax>
                            <parameters>
                                <parameter>
                                    <name>nodeOp</name>
                                    <type ref="type.8711256"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_WalkAncestorOrSelf_DomNode_A604F521EF7C8A9696C620419BEDC0572DB09D3E">
                            <name>WalkAncestorOrSelf(NodeOp&amp; nodeOp)</name>
                            <syntax>public void WalkAncestorOrSelf(NodeOp&amp; nodeOp);</syntax>
                            <parameters>
                                <parameter>
                                    <name>nodeOp</name>
                                    <type ref="type.8711256"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_WalkAttribute_DomNode_8A0665448EE9CE1E9C74FE41BF720F7C86C216A6">
                            <name>WalkAttribute(NodeOp&amp; nodeOp)</name>
                            <syntax>public virtual void WalkAttribute(NodeOp&amp; nodeOp);</syntax>
                            <parameters>
                                <parameter>
                                    <name>nodeOp</name>
                                    <type ref="type.8711256"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_WalkChildren_DomNode_4DD4F52B40723B3813286AC7E5E3EFFBEF6309E8">
                            <name>WalkChildren(NodeOp&amp; nodeOp)</name>
                            <syntax>public virtual void WalkChildren(NodeOp&amp; nodeOp);</syntax>
                            <parameters>
                                <parameter>
                                    <name>nodeOp</name>
                                    <type ref="type.8711256"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_WalkDescendant_DomNode_B7C74C6FA6D24AC004677A8BCF260A391793DC03">
                            <name>WalkDescendant(NodeOp&amp; nodeOp)</name>
                            <syntax>public virtual void WalkDescendant(NodeOp&amp; nodeOp);</syntax>
                            <parameters>
                                <parameter>
                                    <name>nodeOp</name>
                                    <type ref="type.8711256"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_WalkDescendantOrSelf_DomNode_3A057E15ABDDD5FC0174C40D8B192F311787BF6A">
                            <name>WalkDescendantOrSelf(NodeOp&amp; nodeOp)</name>
                            <syntax>public virtual void WalkDescendantOrSelf(NodeOp&amp; nodeOp);</syntax>
                            <parameters>
                                <parameter>
                                    <name>nodeOp</name>
                                    <type ref="type.8711256"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_WalkFollowing_DomNode_7CFDC8A2014BE7FD32038D0392616893F5834737">
                            <name>WalkFollowing(NodeOp&amp; nodeOp)</name>
                            <syntax>public virtual void WalkFollowing(NodeOp&amp; nodeOp);</syntax>
                            <parameters>
                                <parameter>
                                    <name>nodeOp</name>
                                    <type ref="type.8711256"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_WalkFollowingSibling_DomNode_81AB8D182C77437313C38ADB960FAE0A12323961">
                            <name>WalkFollowingSibling(NodeOp&amp; nodeOp)</name>
                            <syntax>public void WalkFollowingSibling(NodeOp&amp; nodeOp);</syntax>
                            <parameters>
                                <parameter>
                                    <name>nodeOp</name>
                                    <type ref="type.8711256"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_WalkParent_DomNode_38AAB90381E23F25AEDED3949B52676416064649">
                            <name>WalkParent(NodeOp&amp; nodeOp)</name>
                            <syntax>public virtual void WalkParent(NodeOp&amp; nodeOp);</syntax>
                            <parameters>
                                <parameter>
                                    <name>nodeOp</name>
                                    <type ref="type.8711256"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_WalkPreceding_DomNode_9555D61B3089AAB5DE2EB57A9BE97A4ABC954760">
                            <name>WalkPreceding(NodeOp&amp; nodeOp)</name>
                            <syntax>public virtual void WalkPreceding(NodeOp&amp; nodeOp);</syntax>
                            <parameters>
                                <parameter>
                                    <name>nodeOp</name>
                                    <type ref="type.8711256"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_WalkPrecedingOrSelf_DomNode_B139187B8ECA3961CA670800D1459FB50123EFB9">
                            <name>WalkPrecedingOrSelf(NodeOp&amp; nodeOp)</name>
                            <syntax>public virtual void WalkPrecedingOrSelf(NodeOp&amp; nodeOp);</syntax>
                            <parameters>
                                <parameter>
                                    <name>nodeOp</name>
                                    <type ref="type.8711256"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_WalkPrecedingSibling_DomNode_213F71D6721D3C10C66EDCCA57EA6EFF4A97ED69">
                            <name>WalkPrecedingSibling(NodeOp&amp; nodeOp)</name>
                            <syntax>public void WalkPrecedingSibling(NodeOp&amp; nodeOp);</syntax>
                            <parameters>
                                <parameter>
                                    <name>nodeOp</name>
                                    <type ref="type.8711256"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Write_DomNode_05F285958389E34CA6C2512D954F2AA7FDB24AD0">
                            <name>Write(CodeFormatter&amp; formatter)</name>
                            <syntax>public abstract void Write(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.8699413"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_DomParentNode_F9975590E24BA357F4D6034909932314C990E2E2">
                    <name>DomParentNode</name>
                    <groupName>DomParentNode</groupName>
                    <syntax>abstract public class DomParentNode;</syntax>
                    <baseClass ref="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509"/>
                    <constructors>
                        <constructor id="constructor_DomParentNode_2EDAC20B45AD0B1A87C3482C3E5B254E7956735E">
                            <name>DomParentNode(const String&lt;uchar>&amp; name_)</name>
                            <syntax>public nothrow explicit DomParentNode(const String&lt;uchar>&amp; name_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.8700299"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_DomParentNode_175630373BD383BB3C6E293E38D5E5C53BF34F9A">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.8711271"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_AppendChild_DomParentNode_DF3053D68BC15CAB455F46A051614D39DA1617AA">
                            <name>AppendChild(UniquePtr&lt;System.Dom.DomNode>&amp;&amp; newChild)</name>
                            <syntax>public virtual DomNode* AppendChild(UniquePtr&lt;System.Dom.DomNode>&amp;&amp; newChild);</syntax>
                            <parameters>
                                <parameter>
                                    <name>newChild</name>
                                    <type ref="type.8711884"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8711258"/>
                        </function>
                        <function id="member_function_ChildNodes_DomParentNode_6CB6FF0C8FD2B4262A6BBA7000162F3F1C4D0E4C">
                            <name>ChildNodes() const</name>
                            <syntax>public NodeList ChildNodes() const;</syntax>
                            <returnType ref="class_NodeList_B93D67EB9918764021AB095F8DF0C822938F175B"/>
                        </function>
                        <function id="member_function_CloneChildrenTo_DomParentNode_E2459F3C1144E6B9C29FF70D150EA6F05945360B">
                            <name>CloneChildrenTo(DomParentNode* clone)</name>
                            <syntax>public void CloneChildrenTo(DomParentNode* clone);</syntax>
                            <parameters>
                                <parameter>
                                    <name>clone</name>
                                    <type ref="type.8711264"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_FirstChild_DomParentNode_B129A4013D1ECA9D760003712A718B9862B795DA">
                            <name>FirstChild() const</name>
                            <syntax>public nothrow inline DomNode* FirstChild() const;</syntax>
                            <returnType ref="type.8711258"/>
                        </function>
                        <function id="member_function_HasChildNodes_DomParentNode_18200E1E599C509661EB96D824FD8BA6B2EBEC7E">
                            <name>HasChildNodes() const</name>
                            <syntax>public nothrow override bool HasChildNodes() const;</syntax>
                            <returnType ref="type.8699065"/>
                        </function>
                        <function id="member_function_InsertBefore_DomParentNode_0CA9971641672C82BAFEA8AB38C97C38E2DAAE45">
                            <name>InsertBefore(UniquePtr&lt;System.Dom.DomNode>&amp;&amp; newChild, DomNode* refChild)</name>
                            <syntax>public virtual DomNode* InsertBefore(UniquePtr&lt;System.Dom.DomNode>&amp;&amp; newChild, DomNode* refChild);</syntax>
                            <parameters>
                                <parameter>
                                    <name>newChild</name>
                                    <type ref="type.8711884"/>
                                </parameter>
                                <parameter>
                                    <name>refChild</name>
                                    <type ref="type.8711258"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8711258"/>
                        </function>
                        <function id="member_function_LastChild_DomParentNode_01D8CE35EB4B754F1A625ABAE597FA0C56CF6371">
                            <name>LastChild() const</name>
                            <syntax>public nothrow inline DomNode* LastChild() const;</syntax>
                            <returnType ref="type.8711258"/>
                        </function>
                        <function id="member_function_RemoveChild_DomParentNode_BC671645753B4144C18087A3B363FC1FF2A50A4F">
                            <name>RemoveChild(DomNode* oldChild)</name>
                            <syntax>public virtual UniquePtr&lt;System.Dom.DomNode> RemoveChild(DomNode* oldChild);</syntax>
                            <parameters>
                                <parameter>
                                    <name>oldChild</name>
                                    <type ref="type.8711258"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8711878"/>
                        </function>
                        <function id="member_function_ReplaceChild_DomParentNode_F30E2B35F5C6E879A979D455243DD32E9965E37E">
                            <name>ReplaceChild(UniquePtr&lt;System.Dom.DomNode>&amp;&amp; newChild, DomNode* oldChild)</name>
                            <syntax>public virtual UniquePtr&lt;System.Dom.DomNode> ReplaceChild(UniquePtr&lt;System.Dom.DomNode>&amp;&amp; newChild, DomNode* oldChild);</syntax>
                            <parameters>
                                <parameter>
                                    <name>newChild</name>
                                    <type ref="type.8711884"/>
                                </parameter>
                                <parameter>
                                    <name>oldChild</name>
                                    <type ref="type.8711258"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8711878"/>
                        </function>
                        <function id="member_function_WalkChildren_DomParentNode_F71B72A14AC2758A406A828A5686082E4D163532">
                            <name>WalkChildren(NodeOp&amp; nodeOp)</name>
                            <syntax>public override void WalkChildren(NodeOp&amp; nodeOp);</syntax>
                            <parameters>
                                <parameter>
                                    <name>nodeOp</name>
                                    <type ref="type.8711256"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_WalkDescendant_DomParentNode_440D2197E6D78C9AD8B5EE673525FF6A4032C700">
                            <name>WalkDescendant(NodeOp&amp; nodeOp)</name>
                            <syntax>public override void WalkDescendant(NodeOp&amp; nodeOp);</syntax>
                            <parameters>
                                <parameter>
                                    <name>nodeOp</name>
                                    <type ref="type.8711256"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_WalkDescendantOrSelf_DomParentNode_366E0175C363C8A7904AA01D63B4AE6895EB4B97">
                            <name>WalkDescendantOrSelf(NodeOp&amp; nodeOp)</name>
                            <syntax>public override void WalkDescendantOrSelf(NodeOp&amp; nodeOp);</syntax>
                            <parameters>
                                <parameter>
                                    <name>nodeOp</name>
                                    <type ref="type.8711256"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_WalkPreceding_DomParentNode_B0FFC420855EF0F92B933377CF6CCC74820998ED">
                            <name>WalkPreceding(NodeOp&amp; nodeOp)</name>
                            <syntax>public override void WalkPreceding(NodeOp&amp; nodeOp);</syntax>
                            <parameters>
                                <parameter>
                                    <name>nodeOp</name>
                                    <type ref="type.8711256"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_WalkPrecedingOrSelf_DomParentNode_6FE048113B73BFDBABB90BB32AE75681CF7880DA">
                            <name>WalkPrecedingOrSelf(NodeOp&amp; nodeOp)</name>
                            <syntax>public override void WalkPrecedingOrSelf(NodeOp&amp; nodeOp);</syntax>
                            <parameters>
                                <parameter>
                                    <name>nodeOp</name>
                                    <type ref="type.8711256"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Write_DomParentNode_81B62CCF5A83DC3EEA9195BC39D3F1CC22B26A89">
                            <name>Write(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Write(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.8699413"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_DomProcessingInstruction_AFC6552B5FD094A4D6CA02BA005DB0DAC3468881">
                    <name>DomProcessingInstruction</name>
                    <groupName>DomProcessingInstruction</groupName>
                    <syntax> public class DomProcessingInstruction;</syntax>
                    <baseClass ref="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509"/>
                    <constructors>
                        <constructor id="constructor_DomProcessingInstruction_DE21C7B52CDBA1009A84861A78DCDE03CECE4BC7">
                            <name>DomProcessingInstruction(const String&lt;uchar>&amp; target_, const String&lt;uchar>&amp; data_)</name>
                            <syntax>public nothrow DomProcessingInstruction(const String&lt;uchar>&amp; target_, const String&lt;uchar>&amp; data_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>target_</name>
                                    <type ref="type.8700299"/>
                                </parameter>
                                <parameter>
                                    <name>data_</name>
                                    <type ref="type.8700299"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_DomProcessingInstruction_F0E91A1A782BC0C775010334643E7FF0817FB99B">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.8711271"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_CloneNode_DomProcessingInstruction_D80974BD3509ADF130742C494ABE20283916CEAC">
                            <name>CloneNode(bool deep) const</name>
                            <syntax>public override UniquePtr&lt;System.Dom.DomNode> CloneNode(bool deep) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>deep</name>
                                    <type ref="type.8699065"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8711878"/>
                        </function>
                        <function id="function_group_Data_4D2BA8D5B249FFFCE41FD8C890321070827616EC">
                            <name>Data</name>
                            <overloads>
                                <overload id="member_function_Data_DomProcessingInstruction_AB163AA45F23C116BF841417BB9BF40FE0B874D4">
                                    <name>Data()</name>
                                    <syntax>public nothrow inline String&lt;uchar>&amp; Data();</syntax>
                                    <returnType ref="type.8700296"/>
                                </overload>
                                <overload id="member_function_Data_DomProcessingInstruction_8FB02FEF10367B281308D8E28BCE5E6589079D59">
                                    <name>Data() const</name>
                                    <syntax>public nothrow inline const String&lt;uchar>&amp; Data() const;</syntax>
                                    <returnType ref="type.8700299"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_Target_5F883D15E62A29E04C1477225F4BFD81303AE764">
                            <name>Target</name>
                            <overloads>
                                <overload id="member_function_Target_DomProcessingInstruction_951942C2E3FDE12B36440A2351C6817A25554AA2">
                                    <name>Target()</name>
                                    <syntax>public nothrow inline String&lt;uchar>&amp; Target();</syntax>
                                    <returnType ref="type.8700296"/>
                                </overload>
                                <overload id="member_function_Target_DomProcessingInstruction_6F380474EBCAF57D61BDD7F12D4D7A3174B5A844">
                                    <name>Target() const</name>
                                    <syntax>public nothrow inline const String&lt;uchar>&amp; Target() const;</syntax>
                                    <returnType ref="type.8700299"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_Write_DomProcessingInstruction_C1B17952426F3D4C254F69BD0AF10A60F266D8C8">
                            <name>Write(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Write(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.8699413"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_DomText_A6FE62F1B199D0D0DC914DDEC6950372BD94082D">
                    <name>DomText</name>
                    <groupName>DomText</groupName>
                    <syntax> public class DomText;</syntax>
                    <baseClass ref="class_DomCharacterData_0088EED8AB2F3E51DCCF79E1F2620EC545C0C991"/>
                    <constructors>
                        <constructor id="default_constructor_DomText_B844151B3EF41E0790D555F06F518F3F7FD16496">
                            <name>DomText()</name>
                            <syntax>public nothrow DomText();</syntax>
                        </constructor>
                        <constructor id="constructor_DomText_B3E3835B94AD0A4CE92A3F8AFA7BFD3D2A5606B0">
                            <name>DomText(const String&lt;uchar>&amp; name_)</name>
                            <syntax>public nothrow explicit DomText(const String&lt;uchar>&amp; name_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.8700299"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_DomText_F419AA7037823C5D76020FADE3B2C177539CBEB8">
                            <name>DomText(const String&lt;uchar>&amp; name_, const String&lt;uchar>&amp; data_)</name>
                            <syntax>public nothrow DomText(const String&lt;uchar>&amp; name_, const String&lt;uchar>&amp; data_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.8700299"/>
                                </parameter>
                                <parameter>
                                    <name>data_</name>
                                    <type ref="type.8700299"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_DomText_C20BA958979ABC837784825A7CCACBB950ACF37A">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.8711271"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_CloneNode_DomText_437A987BDB56AEBE601A7FF332519456A1FB2E00">
                            <name>CloneNode(bool deep) const</name>
                            <syntax>public override UniquePtr&lt;System.Dom.DomNode> CloneNode(bool deep) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>deep</name>
                                    <type ref="type.8699065"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8711878"/>
                        </function>
                    </functions>
                </class>
                <class id="class_ElementsByTagNameVisitor_DBE61B07E819E1EB70C9AEFFF9A22069D47BD652">
                    <name>ElementsByTagNameVisitor</name>
                    <groupName>ElementsByTagNameVisitor</groupName>
                    <syntax> public class ElementsByTagNameVisitor;</syntax>
                    <baseClass ref="class_Visitor_9325C9B633E34A075869657A28EB269260004DBC"/>
                    <constructors>
                        <constructor id="constructor_ElementsByTagNameVisitor_A9CC3BAD2BAE97A962E046EB9F5296C1FB00E044">
                            <name>ElementsByTagNameVisitor(NodeList&amp; elements_, const String&lt;uchar>&amp; tagName_)</name>
                            <syntax>public nothrow ElementsByTagNameVisitor(NodeList&amp; elements_, const String&lt;uchar>&amp; tagName_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>elements_</name>
                                    <type ref="type.8711277"/>
                                </parameter>
                                <parameter>
                                    <name>tagName_</name>
                                    <type ref="type.8700299"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_BeginVisit_ElementsByTagNameVisitor_1E834A403D412DF90E15C2817BFF05858EBA7ECE">
                            <name>BeginVisit(DomElement* element)</name>
                            <syntax>public override void BeginVisit(DomElement* element);</syntax>
                            <parameters>
                                <parameter>
                                    <name>element</name>
                                    <type ref="type.8711242"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_NodeList_B93D67EB9918764021AB095F8DF0C822938F175B">
                    <name>NodeList</name>
                    <groupName>NodeList</groupName>
                    <syntax> public class NodeList;</syntax>
                    <functions>
                        <function id="member_function_InternalAddNode_NodeList_AD29C2CD97655C72BC89C20E8785A03E0EE09AA8">
                            <name>InternalAddNode(DomNode* node)</name>
                            <syntax>public void InternalAddNode(DomNode* node);</syntax>
                            <parameters>
                                <parameter>
                                    <name>node</name>
                                    <type ref="type.8711258"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Item_NodeList_3A3D59B690B0DBC6AD7459F73805CAA1451D3F3F">
                            <name>Item(long index) const</name>
                            <syntax>public nothrow inline DomNode* Item(long index) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>index</name>
                                    <type ref="type.8699072"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8711258"/>
                        </function>
                        <function id="member_function_Length_NodeList_F2FE1619D547220DDBAEC7BAA5E5C4B6EE9C4DC9">
                            <name>Length() const</name>
                            <syntax>public nothrow inline long Length() const;</syntax>
                            <returnType ref="type.8699072"/>
                        </function>
                        <function id="member_function_op_index_NodeList_1780681D22AE39396942CA34FF753C94B5DEEAED">
                            <name>operator[](long index) const</name>
                            <syntax>public nothrow inline DomNode* operator[](long index) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>index</name>
                                    <type ref="type.8699072"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8711258"/>
                        </function>
                    </functions>
                </class>
                <class id="class_NodeOp_A834E32432E8B9893D49D376C8198B2DA0983A10">
                    <name>NodeOp</name>
                    <groupName>NodeOp</groupName>
                    <syntax> public class NodeOp;</syntax>
                    <functions>
                        <function id="member_function_Apply_NodeOp_9D50791E1E5C94351EFCB6673C31DC266BB61D94">
                            <name>Apply(DomNode* node)</name>
                            <syntax>public virtual void Apply(DomNode* node);</syntax>
                            <parameters>
                                <parameter>
                                    <name>node</name>
                                    <type ref="type.8711258"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="class_Visitor_9325C9B633E34A075869657A28EB269260004DBC">
                    <name>Visitor</name>
                    <groupName>Visitor</groupName>
                    <syntax> public class Visitor;</syntax>
                    <functions>
                        <function id="function_group_BeginVisit_B95139E413B6344EE39468BC12C1EBAA4A84CAAE">
                            <name>BeginVisit</name>
                            <overloads>
                                <overload id="member_function_BeginVisit_Visitor_9932BCCF15E1E576730A17901E60D14F62FADAA1">
                                    <name>BeginVisit(DomDocument* document)</name>
                                    <syntax>public virtual void BeginVisit(DomDocument* document);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>document</name>
                                            <type ref="type.8711221"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_BeginVisit_Visitor_B15AA35A55ED994E7C1E95FEBC0ED7BEA62EC1DD">
                                    <name>BeginVisit(DomElement* element)</name>
                                    <syntax>public virtual void BeginVisit(DomElement* element);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>element</name>
                                            <type ref="type.8711242"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_EndVisit_6794E8B220ADA88A084AE3C6637B0804D14056F1">
                            <name>EndVisit</name>
                            <overloads>
                                <overload id="member_function_EndVisit_Visitor_245CB1C98B54C28A814CC3E39B212FE05015CD6F">
                                    <name>EndVisit(DomDocument* document)</name>
                                    <syntax>public virtual void EndVisit(DomDocument* document);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>document</name>
                                            <type ref="type.8711221"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_EndVisit_Visitor_9E5C2BB49E3CC3D2AFD84D51EA0B3F8007F5192E">
                                    <name>EndVisit(DomElement* element)</name>
                                    <syntax>public virtual void EndVisit(DomElement* element);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>element</name>
                                            <type ref="type.8711242"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_Visit_B12049CF36CAD47850D47714F20E6756604181A6">
                            <name>Visit</name>
                            <overloads>
                                <overload id="member_function_Visit_Visitor_1A27464E9FE736CA7E9E6D09721F4428BE2D250D">
                                    <name>Visit(DomCDataSection* cdataSection)</name>
                                    <syntax>public virtual void Visit(DomCDataSection* cdataSection);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>cdataSection</name>
                                            <type ref="type.8711203"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_A0BB6B6195C899ACC084C24EE4AB684FE22F0072">
                                    <name>Visit(DomComment* comment)</name>
                                    <syntax>public virtual void Visit(DomComment* comment);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>comment</name>
                                            <type ref="type.8711209"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_066CDCD711BD2D7F6D6F54485317F141C05F030A">
                                    <name>Visit(DomProcessingInstruction* processingInstruction)</name>
                                    <syntax>public virtual void Visit(DomProcessingInstruction* processingInstruction);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>processingInstruction</name>
                                            <type ref="type.8711215"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_5866A26A863EB49561A5F8CC68AC6CA84D5B94A6">
                                    <name>Visit(DomText* text)</name>
                                    <syntax>public virtual void Visit(DomText* text);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>text</name>
                                            <type ref="type.8711197"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                    </functions>
                </class>
            </classes>
            <functions>
                <function id="function_AttrValueEscape_362208DD2DF9A6171A5AF308A9E079DB7C7E27B0">
                    <name>AttrValueEscape(const String&lt;uchar>&amp; attributeValue, uchar delimiter)</name>
                    <syntax>public nothrow String&lt;uchar> AttrValueEscape(const String&lt;uchar>&amp; attributeValue, uchar delimiter);</syntax>
                    <parameters>
                        <parameter>
                            <name>attributeValue</name>
                            <type ref="type.8700299"/>
                        </parameter>
                        <parameter>
                            <name>delimiter</name>
                            <type ref="type.8699078"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8700294"/>
                </function>
                <function id="function_AxisName_D89A234F6060B307C3C9DADFF0CBDE9BF2CA2312">
                    <name>AxisName(Axis axis)</name>
                    <syntax>public nothrow String&lt;uchar> AxisName(Axis axis);</syntax>
                    <parameters>
                        <parameter>
                            <name>axis</name>
                            <type ref="enumerated_type_Axis_8D4FE5B83262A122798FD80A5636BA4533BD15EB"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8700294"/>
                </function>
                <function id="function_MakeXmlAttrValue_EF82DEEB8B524A7E6BE0F669B376D42D9ED4A48A">
                    <name>MakeXmlAttrValue(const String&lt;uchar>&amp; attrValue)</name>
                    <syntax>public nothrow String&lt;uchar> MakeXmlAttrValue(const String&lt;uchar>&amp; attrValue);</syntax>
                    <parameters>
                        <parameter>
                            <name>attrValue</name>
                            <type ref="type.8700299"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8700294"/>
                </function>
                <function id="function_group_ParseXmlContentToDomDocument_3D7C62FBB65FEC9673C2CB0A95BD58D4A0081799">
                    <name>ParseXmlContentToDomDocument</name>
                    <overloads>
                        <overload id="function_ParseXmlContentToDomDocument_908DF5EBE9F27F3A5F117904A2E58021B0EC0AC2">
                            <name>ParseXmlContentToDomDocument(const String&lt;char>&amp; xmlContent, const String&lt;char>&amp; systemId)</name>
                            <syntax>public UniquePtr&lt;System.Dom.DomDocument> ParseXmlContentToDomDocument(const String&lt;char>&amp; xmlContent, const String&lt;char>&amp; systemId);</syntax>
                            <parameters>
                                <parameter>
                                    <name>xmlContent</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                                <parameter>
                                    <name>systemId</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8712102"/>
                        </overload>
                        <overload id="function_ParseXmlContentToDomDocument_43FCDABD5857D3B7093B08EE39ABDA8D063B9990">
                            <name>ParseXmlContentToDomDocument(const String&lt;uchar>&amp; xmlContent, const String&lt;char>&amp; systemId)</name>
                            <syntax>public UniquePtr&lt;System.Dom.DomDocument> ParseXmlContentToDomDocument(const String&lt;uchar>&amp; xmlContent, const String&lt;char>&amp; systemId);</syntax>
                            <parameters>
                                <parameter>
                                    <name>xmlContent</name>
                                    <type ref="type.8700299"/>
                                </parameter>
                                <parameter>
                                    <name>systemId</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8712102"/>
                        </overload>
                        <overload id="function_ParseXmlContentToDomDocument_0BE70E7597FC179FFB38BBE863EB51E81DCF4005">
                            <name>ParseXmlContentToDomDocument(const String&lt;wchar>&amp; xmlContent, const String&lt;char>&amp; systemId)</name>
                            <syntax>public UniquePtr&lt;System.Dom.DomDocument> ParseXmlContentToDomDocument(const String&lt;wchar>&amp; xmlContent, const String&lt;char>&amp; systemId);</syntax>
                            <parameters>
                                <parameter>
                                    <name>xmlContent</name>
                                    <type ref="type.8700254"/>
                                </parameter>
                                <parameter>
                                    <name>systemId</name>
                                    <type ref="type.8700211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.8712102"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_ParseXmlFileToDomDocument_CDBEF03097E654DC3609B662FEAF72116D01B7CA">
                    <name>ParseXmlFileToDomDocument(const String&lt;char>&amp; xmlFileName)</name>
                    <syntax>public UniquePtr&lt;System.Dom.DomDocument> ParseXmlFileToDomDocument(const String&lt;char>&amp; xmlFileName);</syntax>
                    <parameters>
                        <parameter>
                            <name>xmlFileName</name>
                            <type ref="type.8700211"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8712102"/>
                </function>
                <function id="function_XmlCharDataEscape_3E37A8F52A656F4295DB0FCACB3F063949966382">
                    <name>XmlCharDataEscape(const String&lt;uchar>&amp; charData)</name>
                    <syntax>public nothrow String&lt;uchar> XmlCharDataEscape(const String&lt;uchar>&amp; charData);</syntax>
                    <parameters>
                        <parameter>
                            <name>charData</name>
                            <type ref="type.8700299"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8700294"/>
                </function>
                <function id="function_op_eq_C18E752F81824F111C84E6AE9A1DA83240CB03B6">
                    <name>operator==(Axis left, Axis right)</name>
                    <syntax>public bool operator==(Axis left, Axis right);</syntax>
                    <parameters>
                        <parameter>
                            <name>left</name>
                            <type ref="enumerated_type_Axis_8D4FE5B83262A122798FD80A5636BA4533BD15EB"/>
                        </parameter>
                        <parameter>
                            <name>right</name>
                            <type ref="enumerated_type_Axis_8D4FE5B83262A122798FD80A5636BA4533BD15EB"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.8699065"/>
                </function>
            </functions>
            <enumerations>
                <enumeration id="enumerated_type_Axis_8D4FE5B83262A122798FD80A5636BA4533BD15EB">
                    <name>Axis</name>
                    <syntax>public enum Axis;</syntax>
                    <underlyingType ref="type.8699070"/>
                    <enumConstant>
                        <name>child</name>
                        <value>0</value>
                    </enumConstant>
                    <enumConstant>
                        <name>descendant</name>
                        <value>1</value>
                    </enumConstant>
                    <enumConstant>
                        <name>parent</name>
                        <value>2</value>
                    </enumConstant>
                    <enumConstant>
                        <name>ancestor</name>
                        <value>3</value>
                    </enumConstant>
                    <enumConstant>
                        <name>followingSibling</name>
                        <value>4</value>
                    </enumConstant>
                    <enumConstant>
                        <name>precedingSibling</name>
                        <value>5</value>
                    </enumConstant>
                    <enumConstant>
                        <name>following</name>
                        <value>6</value>
                    </enumConstant>
                    <enumConstant>
                        <name>preceding</name>
                        <value>7</value>
                    </enumConstant>
                    <enumConstant>
                        <name>attribute</name>
                        <value>8</value>
                    </enumConstant>
                    <enumConstant>
                        <name>ns</name>
                        <value>9</value>
                    </enumConstant>
                    <enumConstant>
                        <name>self</name>
                        <value>10</value>
                    </enumConstant>
                    <enumConstant>
                        <name>descendantOrSelf</name>
                        <value>11</value>
                    </enumConstant>
                    <enumConstant>
                        <name>ancestorOrSelf</name>
                        <value>12</value>
                    </enumConstant>
                </enumeration>
            </enumerations>
        </namespace>
    </namespaces>
    <types>
        <type derived="true" id="type.4243">
            <name>AddressOf&amp;&amp;</name>
            <content>
                <baseType ref="class_AddressOf_F9F594A9680E5BE9D427D963284931AEB8E52492"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4315">
            <name>AssertStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_AssertStatement_D3CF5F3C391681B790B0E9E570953DA4FA666696"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="enumerated_type_Axis_8D4FE5B83262A122798FD80A5636BA4533BD15EB">
            <name>Axis</name>
        </type>
        <type derived="true" id="type.8712071">
            <name>Axis&amp;</name>
            <content>
                <baseType ref="enumerated_type_Axis_8D4FE5B83262A122798FD80A5636BA4533BD15EB"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712072">
            <name>Axis&amp;&amp;</name>
            <content>
                <baseType ref="enumerated_type_Axis_8D4FE5B83262A122798FD80A5636BA4533BD15EB"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712070">
            <name>Axis*</name>
            <content>
                <baseType ref="enumerated_type_Axis_8D4FE5B83262A122798FD80A5636BA4533BD15EB"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8700973" specialization="true">
            <name>Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
            </content>
        </type>
        <type derived="true" id="type.3830">
            <name>Bucket&lt;Pair&lt;K, T>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.8700973"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8711924" specialization="true">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="type.8711898"/>
            </content>
        </type>
        <type derived="true" id="type.8711926">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>&amp;</name>
            <content>
                <baseType ref="type.8711924"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711925">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*</name>
            <content>
                <baseType ref="type.8711924"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711957">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*&amp;</name>
            <content>
                <baseType ref="type.8711924"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711967">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.8711924"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711958">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>**</name>
            <content>
                <baseType ref="type.8711924"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712164">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>**&amp;</name>
            <content>
                <baseType ref="type.8711924"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712165">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>**&amp;&amp;</name>
            <content>
                <baseType ref="type.8711924"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712163">
            <name>Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>***</name>
            <content>
                <baseType ref="type.8711924"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9" specialization="true">
            <name>Bucket&lt;T></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="8699702"/>
            </content>
        </type>
        <type derived="true" id="type.3838">
            <name>Bucket&lt;T>*&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_Bucket_ValueType_5A3E2F108F8CC061B9AC0A82F50CCDA26037ADCE" specialization="true">
            <name>Bucket&lt;ValueType></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="8699723"/>
            </content>
        </type>
        <type derived="true" id="type.3851">
            <name>Bucket&lt;ValueType>*&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Bucket_ValueType_5A3E2F108F8CC061B9AC0A82F50CCDA26037ADCE"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_BuildIndexVisitor_2A216A2E67DE23C4749113C859D07166BA8E981B">
            <name>BuildIndexVisitor</name>
        </type>
        <type derived="true" id="type.8711228">
            <name>BuildIndexVisitor&amp;</name>
            <content>
                <baseType ref="class_BuildIndexVisitor_2A216A2E67DE23C4749113C859D07166BA8E981B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4351">
            <name>BuildIndexVisitor&amp;&amp;</name>
            <content>
                <baseType ref="class_BuildIndexVisitor_2A216A2E67DE23C4749113C859D07166BA8E981B"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711227">
            <name>BuildIndexVisitor*</name>
            <content>
                <baseType ref="class_BuildIndexVisitor_2A216A2E67DE23C4749113C859D07166BA8E981B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4339">
            <name>CharParser&amp;&amp;</name>
            <content>
                <baseType ref="class_CharParser_F30B4B7DDC9B8D3CD1476C03049B3C7189028FDA"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4322">
            <name>CodeExpandingVisitor&amp;&amp;</name>
            <content>
                <baseType ref="class_CodeExpandingVisitor_2D824580300CDC92F6A03DB335EE0BB590738E53"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699413">
            <name>CodeFormatter&amp;</name>
            <content>
                <baseType ref="class_CodeFormatter_38898A0914E7D27753F0D42E65A18EC272984F99"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4221">
            <name>CodeFormatter&amp;&amp;</name>
            <content>
                <baseType ref="class_CodeFormatter_38898A0914E7D27753F0D42E65A18EC272984F99"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4258">
            <name>Complement&amp;&amp;</name>
            <content>
                <baseType ref="class_Complement_E9C39B44C265CC4D19B0EFE97BE0DDAAF5B39DB5"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3735">
            <name>CompoundStatement&amp;</name>
            <content>
                <baseType ref="class_CompoundStatement_D64148F52F69E76B5603068E1B519F54CC99F8A9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711150">
            <name>CompoundStatement&amp;</name>
            <content>
                <baseType ref="class_CompoundStatement_D64148F52F69E76B5603068E1B519F54CC99F8A9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711149">
            <name>CompoundStatement*</name>
            <content>
                <baseType ref="class_CompoundStatement_D64148F52F69E76B5603068E1B519F54CC99F8A9"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3734">
            <name>CompoundStatement*</name>
            <content>
                <baseType ref="class_CompoundStatement_D64148F52F69E76B5603068E1B519F54CC99F8A9"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711149">
            <name>CompoundStatement*</name>
            <content>
                <baseType ref="class_CompoundStatement_D64148F52F69E76B5603068E1B519F54CC99F8A9"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4316">
            <name>Const&amp;&amp;</name>
            <content>
                <baseType ref="class_Const_9F4AD8D639ADA7A3FA35707EF7047095B214626A"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4276">
            <name>Construct&amp;&amp;</name>
            <content>
                <baseType ref="class_Construct_9E0CFFBA332AF77070D82685BD0B3B21F6BBDAB8"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8700180" specialization="true">
            <name>Counter&lt;System.IO.ByteStream></name>
            <content>
                <primaryType ref="class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <argumentType ref="class_ByteStream_3B7A2F3379612ADBD7E416487752A1935AA8B96F"/>
            </content>
        </type>
        <type id="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30" specialization="true">
            <name>Counter&lt;T></name>
            <content>
                <primaryType ref="class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <argumentType ref="8699848"/>
            </content>
        </type>
        <type derived="true" id="type.3923">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3942">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3926">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3957">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3964">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3935">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A" specialization="true">
            <name>Counter&lt;U></name>
            <content>
                <primaryType ref="class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <argumentType ref="8699871"/>
            </content>
        </type>
        <type derived="true" id="type.4294">
            <name>DeleteStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_DeleteStatement_CFF57A1EB43152DAED3E95873037A4F83E2AAF0A"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4240">
            <name>Deref&amp;&amp;</name>
            <content>
                <baseType ref="class_Deref_6825EB2BE00B35C10BF9F18A018CADC1F1F12594"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4297">
            <name>DestroyStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_DestroyStatement_E2AF4A1B38D4AE66FCF9EF639F0D8309CE050550"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_DomAttr_9E6E1B42DF1CBDED3278FE00CE0A15F354369845">
            <name>DomAttr</name>
        </type>
        <type derived="true" id="type.8711237">
            <name>DomAttr&amp;</name>
            <content>
                <baseType ref="class_DomAttr_9E6E1B42DF1CBDED3278FE00CE0A15F354369845"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711973">
            <name>DomAttr&amp;&amp;</name>
            <content>
                <baseType ref="class_DomAttr_9E6E1B42DF1CBDED3278FE00CE0A15F354369845"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711236">
            <name>DomAttr*</name>
            <content>
                <baseType ref="class_DomAttr_9E6E1B42DF1CBDED3278FE00CE0A15F354369845"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712068">
            <name>DomAttr*&amp;</name>
            <content>
                <baseType ref="class_DomAttr_9E6E1B42DF1CBDED3278FE00CE0A15F354369845"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712203">
            <name>DomAttr*&amp;&amp;</name>
            <content>
                <baseType ref="class_DomAttr_9E6E1B42DF1CBDED3278FE00CE0A15F354369845"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712202">
            <name>DomAttr**</name>
            <content>
                <baseType ref="class_DomAttr_9E6E1B42DF1CBDED3278FE00CE0A15F354369845"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_DomCDataSection_B7F8D16E36F2CB9C1D7CB1E00A5E41623C025C7C">
            <name>DomCDataSection</name>
        </type>
        <type derived="true" id="type.8711204">
            <name>DomCDataSection&amp;</name>
            <content>
                <baseType ref="class_DomCDataSection_B7F8D16E36F2CB9C1D7CB1E00A5E41623C025C7C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711887">
            <name>DomCDataSection&amp;&amp;</name>
            <content>
                <baseType ref="class_DomCDataSection_B7F8D16E36F2CB9C1D7CB1E00A5E41623C025C7C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711203">
            <name>DomCDataSection*</name>
            <content>
                <baseType ref="class_DomCDataSection_B7F8D16E36F2CB9C1D7CB1E00A5E41623C025C7C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_DomCharacterData_0088EED8AB2F3E51DCCF79E1F2620EC545C0C991">
            <name>DomCharacterData</name>
        </type>
        <type derived="true" id="type.8711192">
            <name>DomCharacterData&amp;</name>
            <content>
                <baseType ref="class_DomCharacterData_0088EED8AB2F3E51DCCF79E1F2620EC545C0C991"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711885">
            <name>DomCharacterData&amp;&amp;</name>
            <content>
                <baseType ref="class_DomCharacterData_0088EED8AB2F3E51DCCF79E1F2620EC545C0C991"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711191">
            <name>DomCharacterData*</name>
            <content>
                <baseType ref="class_DomCharacterData_0088EED8AB2F3E51DCCF79E1F2620EC545C0C991"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_DomComment_7B14BD5D921A05087E97FD2083821D797C780D38">
            <name>DomComment</name>
        </type>
        <type derived="true" id="type.8711210">
            <name>DomComment&amp;</name>
            <content>
                <baseType ref="class_DomComment_7B14BD5D921A05087E97FD2083821D797C780D38"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711888">
            <name>DomComment&amp;&amp;</name>
            <content>
                <baseType ref="class_DomComment_7B14BD5D921A05087E97FD2083821D797C780D38"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711209">
            <name>DomComment*</name>
            <content>
                <baseType ref="class_DomComment_7B14BD5D921A05087E97FD2083821D797C780D38"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_DomDocument_975632F3AA8CF3FEC1D51FB0E91F580D6EBA16C8">
            <name>DomDocument</name>
        </type>
        <type derived="true" id="type.8711222">
            <name>DomDocument&amp;</name>
            <content>
                <baseType ref="class_DomDocument_975632F3AA8CF3FEC1D51FB0E91F580D6EBA16C8"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711891">
            <name>DomDocument&amp;&amp;</name>
            <content>
                <baseType ref="class_DomDocument_975632F3AA8CF3FEC1D51FB0E91F580D6EBA16C8"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711221">
            <name>DomDocument*</name>
            <content>
                <baseType ref="class_DomDocument_975632F3AA8CF3FEC1D51FB0E91F580D6EBA16C8"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712186">
            <name>DomDocument*&amp;</name>
            <content>
                <baseType ref="class_DomDocument_975632F3AA8CF3FEC1D51FB0E91F580D6EBA16C8"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712185">
            <name>DomDocument**</name>
            <content>
                <baseType ref="class_DomDocument_975632F3AA8CF3FEC1D51FB0E91F580D6EBA16C8"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_DomDocumentBuilder_397E94D2EA454117602C5070385DB01C1EFBB45B">
            <name>DomDocumentBuilder</name>
        </type>
        <type derived="true" id="type.8711280">
            <name>DomDocumentBuilder&amp;</name>
            <content>
                <baseType ref="class_DomDocumentBuilder_397E94D2EA454117602C5070385DB01C1EFBB45B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711279">
            <name>DomDocumentBuilder*</name>
            <content>
                <baseType ref="class_DomDocumentBuilder_397E94D2EA454117602C5070385DB01C1EFBB45B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_DomDocumentFragment_F8F4B9224E04A95DBEE5184849B88CF399A2ABD3">
            <name>DomDocumentFragment</name>
        </type>
        <type derived="true" id="type.8711231">
            <name>DomDocumentFragment&amp;</name>
            <content>
                <baseType ref="class_DomDocumentFragment_F8F4B9224E04A95DBEE5184849B88CF399A2ABD3"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711972">
            <name>DomDocumentFragment&amp;&amp;</name>
            <content>
                <baseType ref="class_DomDocumentFragment_F8F4B9224E04A95DBEE5184849B88CF399A2ABD3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711230">
            <name>DomDocumentFragment*</name>
            <content>
                <baseType ref="class_DomDocumentFragment_F8F4B9224E04A95DBEE5184849B88CF399A2ABD3"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712258">
            <name>DomDocumentFragment*&amp;</name>
            <content>
                <baseType ref="class_DomDocumentFragment_F8F4B9224E04A95DBEE5184849B88CF399A2ABD3"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712257">
            <name>DomDocumentFragment**</name>
            <content>
                <baseType ref="class_DomDocumentFragment_F8F4B9224E04A95DBEE5184849B88CF399A2ABD3"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_DomElement_2F019E5CBBCF1F9C65CE734BA20F69BEFDC19B3B">
            <name>DomElement</name>
        </type>
        <type derived="true" id="type.8711243">
            <name>DomElement&amp;</name>
            <content>
                <baseType ref="class_DomElement_2F019E5CBBCF1F9C65CE734BA20F69BEFDC19B3B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711974">
            <name>DomElement&amp;&amp;</name>
            <content>
                <baseType ref="class_DomElement_2F019E5CBBCF1F9C65CE734BA20F69BEFDC19B3B"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711242">
            <name>DomElement*</name>
            <content>
                <baseType ref="class_DomElement_2F019E5CBBCF1F9C65CE734BA20F69BEFDC19B3B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711968">
            <name>DomElement*&amp;</name>
            <content>
                <baseType ref="class_DomElement_2F019E5CBBCF1F9C65CE734BA20F69BEFDC19B3B"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712150">
            <name>DomElement*&amp;&amp;</name>
            <content>
                <baseType ref="class_DomElement_2F019E5CBBCF1F9C65CE734BA20F69BEFDC19B3B"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712148">
            <name>DomElement**</name>
            <content>
                <baseType ref="class_DomElement_2F019E5CBBCF1F9C65CE734BA20F69BEFDC19B3B"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_DomException_EE72D4E688A5F4B0F4D22924FF24D42E74D944CA">
            <name>DomException</name>
        </type>
        <type derived="true" id="type.8711253">
            <name>DomException&amp;</name>
            <content>
                <baseType ref="class_DomException_EE72D4E688A5F4B0F4D22924FF24D42E74D944CA"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712075">
            <name>DomException&amp;&amp;</name>
            <content>
                <baseType ref="class_DomException_EE72D4E688A5F4B0F4D22924FF24D42E74D944CA"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711252">
            <name>DomException*</name>
            <content>
                <baseType ref="class_DomException_EE72D4E688A5F4B0F4D22924FF24D42E74D944CA"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509">
            <name>DomNode</name>
        </type>
        <type derived="true" id="type.8711259">
            <name>DomNode&amp;</name>
            <content>
                <baseType ref="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711877">
            <name>DomNode&amp;&amp;</name>
            <content>
                <baseType ref="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711258">
            <name>DomNode*</name>
            <content>
                <baseType ref="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712091">
            <name>DomNode*&amp;</name>
            <content>
                <baseType ref="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712101">
            <name>DomNode*&amp;&amp;</name>
            <content>
                <baseType ref="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712092">
            <name>DomNode**</name>
            <content>
                <baseType ref="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712252">
            <name>DomNode**&amp;</name>
            <content>
                <baseType ref="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712251">
            <name>DomNode***</name>
            <content>
                <baseType ref="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711148">
            <name>DomObject&amp;</name>
            <content>
                <baseType ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3733">
            <name>DomObject&amp;</name>
            <content>
                <baseType ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711148">
            <name>DomObject&amp;</name>
            <content>
                <baseType ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4234">
            <name>DomObject&amp;&amp;</name>
            <content>
                <baseType ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3732">
            <name>DomObject*</name>
            <content>
                <baseType ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711147">
            <name>DomObject*</name>
            <content>
                <baseType ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_DomParentNode_F9975590E24BA357F4D6034909932314C990E2E2">
            <name>DomParentNode</name>
        </type>
        <type derived="true" id="type.8711265">
            <name>DomParentNode&amp;</name>
            <content>
                <baseType ref="class_DomParentNode_F9975590E24BA357F4D6034909932314C990E2E2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711890">
            <name>DomParentNode&amp;&amp;</name>
            <content>
                <baseType ref="class_DomParentNode_F9975590E24BA357F4D6034909932314C990E2E2"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711264">
            <name>DomParentNode*</name>
            <content>
                <baseType ref="class_DomParentNode_F9975590E24BA357F4D6034909932314C990E2E2"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712167">
            <name>DomParentNode*&amp;</name>
            <content>
                <baseType ref="class_DomParentNode_F9975590E24BA357F4D6034909932314C990E2E2"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712166">
            <name>DomParentNode**</name>
            <content>
                <baseType ref="class_DomParentNode_F9975590E24BA357F4D6034909932314C990E2E2"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_DomProcessingInstruction_AFC6552B5FD094A4D6CA02BA005DB0DAC3468881">
            <name>DomProcessingInstruction</name>
        </type>
        <type derived="true" id="type.8711216">
            <name>DomProcessingInstruction&amp;</name>
            <content>
                <baseType ref="class_DomProcessingInstruction_AFC6552B5FD094A4D6CA02BA005DB0DAC3468881"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711889">
            <name>DomProcessingInstruction&amp;&amp;</name>
            <content>
                <baseType ref="class_DomProcessingInstruction_AFC6552B5FD094A4D6CA02BA005DB0DAC3468881"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711215">
            <name>DomProcessingInstruction*</name>
            <content>
                <baseType ref="class_DomProcessingInstruction_AFC6552B5FD094A4D6CA02BA005DB0DAC3468881"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_DomText_A6FE62F1B199D0D0DC914DDEC6950372BD94082D">
            <name>DomText</name>
        </type>
        <type derived="true" id="type.8711198">
            <name>DomText&amp;</name>
            <content>
                <baseType ref="class_DomText_A6FE62F1B199D0D0DC914DDEC6950372BD94082D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711886">
            <name>DomText&amp;&amp;</name>
            <content>
                <baseType ref="class_DomText_A6FE62F1B199D0D0DC914DDEC6950372BD94082D"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711197">
            <name>DomText*</name>
            <content>
                <baseType ref="class_DomText_A6FE62F1B199D0D0DC914DDEC6950372BD94082D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_ElementsByTagNameVisitor_DBE61B07E819E1EB70C9AEFFF9A22069D47BD652">
            <name>ElementsByTagNameVisitor</name>
        </type>
        <type derived="true" id="type.8711249">
            <name>ElementsByTagNameVisitor&amp;</name>
            <content>
                <baseType ref="class_ElementsByTagNameVisitor_DBE61B07E819E1EB70C9AEFFF9A22069D47BD652"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711248">
            <name>ElementsByTagNameVisitor*</name>
            <content>
                <baseType ref="class_ElementsByTagNameVisitor_DBE61B07E819E1EB70C9AEFFF9A22069D47BD652"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8708242" specialization="true">
            <name>EqualTo&lt;String&lt;uchar>></name>
            <content>
                <primaryType ref="class_EqualTo_T_483B326DC1355EE905B9A0F4E9331F702788D28E"/>
                <argumentType ref="type.8700294"/>
            </content>
        </type>
        <type derived="true" id="type.4334">
            <name>ExpectationParser&amp;&amp;</name>
            <content>
                <baseType ref="class_ExpectationParser_0DFEF78F7EA112E6F20DC00ECFD31592FD692CAB"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4300">
            <name>ExpressionStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_ExpressionStatement_F01731B3CB572136FE603DE87C8C465F5B79ED54"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_ForwardList_T_49B88E2B81E13ED03DA3835C7A074DB98CBE7051" specialization="true">
            <name>ForwardList&lt;T></name>
            <content>
                <primaryType ref="class_ForwardList_T_49B88E2B81E13ED03DA3835C7A074DB98CBE7051"/>
                <argumentType ref="8699611"/>
            </content>
        </type>
        <type derived="true" id="type.3788">
            <name>ForwardList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardList_T_49B88E2B81E13ED03DA3835C7A074DB98CBE7051"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA" specialization="true">
            <name>ForwardListNodeIterator&lt;T, R, P></name>
            <content>
                <primaryType ref="class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <argumentType ref="8699607"/>
                <argumentType ref="8699608"/>
                <argumentType ref="8699609"/>
            </content>
        </type>
        <type derived="true" id="type.3784">
            <name>ForwardListNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3785">
            <name>ForwardListNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84" specialization="true">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <argumentType ref="8699612"/>
                <argumentType ref="type.8700510"/>
                <argumentType ref="type.8700512"/>
            </content>
        </type>
        <type derived="true" id="type.3787">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3792">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3790">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3" specialization="true">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <argumentType ref="8699613"/>
                <argumentType ref="type.8700527"/>
                <argumentType ref="type.8700528"/>
            </content>
        </type>
        <type derived="true" id="type.3791">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3789">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3786">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4306">
            <name>GotoCaseStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_GotoCaseStatement_54B0F8581DE0382A086C8C1EC6A19E93889D566D"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4291">
            <name>GotoStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_GotoStatement_423A80C64905BCD7885A3433F9FE33D8BB37DF7E"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8711892" specialization="true">
            <name>HashMap&lt;String&lt;uchar>, DomElement*, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>></name>
            <content>
                <primaryType ref="class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <argumentType ref="type.8700294"/>
                <argumentType ref="type.8711242"/>
                <argumentType ref="type.8708236"/>
                <argumentType ref="type.8708242"/>
            </content>
        </type>
        <type derived="true" id="type.8711894">
            <name>HashMap&lt;String&lt;uchar>, DomElement*, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <baseType ref="type.8711892"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711893">
            <name>HashMap&lt;String&lt;uchar>, DomElement*, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*</name>
            <content>
                <baseType ref="type.8711892"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712197">
            <name>HashMap&lt;String&lt;uchar>, DomElement*, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*&amp;</name>
            <content>
                <baseType ref="type.8711892"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712196">
            <name>HashMap&lt;String&lt;uchar>, DomElement*, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>**</name>
            <content>
                <baseType ref="type.8711892"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8708236" specialization="true">
            <name>Hasher&lt;String&lt;uchar>></name>
            <content>
                <primaryType ref="class_Hasher_T_9E06FCD9B56B8B3B7E7F8286BE8179D3B1CB8325"/>
                <argumentType ref="type.8700294"/>
            </content>
        </type>
        <type id="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B" specialization="true">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="8699693"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <argumentType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <argumentType ref="8699695"/>
                <argumentType ref="8699696"/>
            </content>
        </type>
        <type derived="true" id="type.3826">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2" specialization="true">
            <name>Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="8699722"/>
                <argumentType ref="8699723"/>
                <argumentType ref="8699724"/>
                <argumentType ref="8699725"/>
                <argumentType ref="8699726"/>
            </content>
        </type>
        <type derived="true" id="type.3846">
            <name>Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8711912" specialization="true">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="type.8700294"/>
                <argumentType ref="type.8711898"/>
                <argumentType ref="type.8711902"/>
                <argumentType ref="type.8708236"/>
                <argumentType ref="type.8708242"/>
            </content>
        </type>
        <type derived="true" id="type.8711914">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <baseType ref="type.8711912"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711938">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8711912"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711913">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*</name>
            <content>
                <baseType ref="type.8711912"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712181">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*&amp;</name>
            <content>
                <baseType ref="type.8711912"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712182">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.8711912"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712180">
            <name>Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>**</name>
            <content>
                <baseType ref="type.8711912"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8708550" specialization="true">
            <name>Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="type.8700294"/>
                <argumentType ref="type.8700294"/>
                <argumentType ref="type.8708541"/>
                <argumentType ref="type.8708236"/>
                <argumentType ref="type.8708242"/>
            </content>
        </type>
        <type id="type.class_Hashtable_T_T_Identity_T_H_C_73CFDACB21FE662CFE0879B3582A7D1FB223385C" specialization="true">
            <name>Hashtable&lt;T, T, Identity&lt;T>, H, C></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="8699702"/>
                <argumentType ref="8699702"/>
                <argumentType ref="type.class_Identity_T_9DD2E12D3D49B8316EA22259EDBD89C3FE6A1C09"/>
                <argumentType ref="8699703"/>
                <argumentType ref="8699704"/>
            </content>
        </type>
        <type derived="true" id="type.3834">
            <name>Hashtable&lt;T, T, Identity&lt;T>, H, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_T_T_Identity_T_H_C_73CFDACB21FE662CFE0879B3582A7D1FB223385C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8711918" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, DomElement*>, Pair&lt;String&lt;uchar>, DomElement*>&amp;, Pair&lt;String&lt;uchar>, DomElement*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.8711898"/>
                <argumentType ref="type.8711900"/>
                <argumentType ref="type.8711899"/>
                <argumentType ref="type.8711912"/>
            </content>
        </type>
        <type derived="true" id="type.8711920">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, DomElement*>, Pair&lt;String&lt;uchar>, DomElement*>&amp;, Pair&lt;String&lt;uchar>, DomElement*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.8711918"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712189">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, DomElement*>, Pair&lt;String&lt;uchar>, DomElement*>&amp;, Pair&lt;String&lt;uchar>, DomElement*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8711918"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711919">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, DomElement*>, Pair&lt;String&lt;uchar>, DomElement*>&amp;, Pair&lt;String&lt;uchar>, DomElement*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.8711918"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8711932" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, DomElement*>, const Pair&lt;String&lt;uchar>, DomElement*>&amp;, const Pair&lt;String&lt;uchar>, DomElement*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.8711898"/>
                <argumentType ref="type.8711909"/>
                <argumentType ref="type.8711930"/>
                <argumentType ref="type.8711912"/>
            </content>
        </type>
        <type derived="true" id="type.8711934">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, DomElement*>, const Pair&lt;String&lt;uchar>, DomElement*>&amp;, const Pair&lt;String&lt;uchar>, DomElement*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.8711932"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712183">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, DomElement*>, const Pair&lt;String&lt;uchar>, DomElement*>&amp;, const Pair&lt;String&lt;uchar>, DomElement*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8711932"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711933">
            <name>HashtableIterator&lt;Pair&lt;String&lt;uchar>, DomElement*>, const Pair&lt;String&lt;uchar>, DomElement*>&amp;, const Pair&lt;String&lt;uchar>, DomElement*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.8711932"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8711644" specialization="true">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.8700294"/>
                <argumentType ref="type.8700296"/>
                <argumentType ref="type.8700295"/>
                <argumentType ref="type.8708550"/>
            </content>
        </type>
        <type id="type.4102" specialization="true">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.8700294"/>
                <argumentType ref="type.8700296"/>
                <argumentType ref="type.8700295"/>
                <argumentType ref="type.8708550"/>
            </content>
        </type>
        <type id="type.8711644" specialization="true">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.8700294"/>
                <argumentType ref="type.8700296"/>
                <argumentType ref="type.8700295"/>
                <argumentType ref="type.8708550"/>
            </content>
        </type>
        <type derived="true" id="type.8711646">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.8711644"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4104">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.4102"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711645">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.8711644"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4103">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.4102"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8711650" specialization="true">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.8700294"/>
                <argumentType ref="type.8700299"/>
                <argumentType ref="type.8700298"/>
                <argumentType ref="type.8708550"/>
            </content>
        </type>
        <type id="type.4108" specialization="true">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.8700294"/>
                <argumentType ref="type.8700299"/>
                <argumentType ref="type.8700298"/>
                <argumentType ref="type.8708550"/>
            </content>
        </type>
        <type id="type.8711650" specialization="true">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.8700294"/>
                <argumentType ref="type.8700299"/>
                <argumentType ref="type.8700298"/>
                <argumentType ref="type.8708550"/>
            </content>
        </type>
        <type derived="true" id="type.4110">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.4108"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711652">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.8711650"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711651">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.8711650"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4109">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.4108"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711651">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.8711650"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4280">
            <name>Identifier&amp;&amp;</name>
            <content>
                <baseType ref="class_Identifier_4DD63F2DF214C9DDE3105925C5DFD200FC4065A7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4348">
            <name>InternalEntity&amp;&amp;</name>
            <content>
                <baseType ref="class_InternalEntity_724D2DA658DF130784EEFD7D00A1AF74339A3CBD"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4261">
            <name>Invoke&amp;&amp;</name>
            <content>
                <baseType ref="class_Invoke_D6527871DA9EA1727DFAC637E9FF17EF73B2DAF5"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4331">
            <name>KleeneStarParser&amp;&amp;</name>
            <content>
                <baseType ref="class_KleeneStarParser_8B553023A6E0AA98D08C756A40F526859BF46D2D"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8712003" specialization="true">
            <name>Less&lt;String&lt;uchar>></name>
            <content>
                <primaryType ref="class_Less_T_F840BD6533DFD3706784C819E04FA4FE41C4F3D2"/>
                <argumentType ref="type.8700294"/>
            </content>
        </type>
        <type derived="true" id="type.8712008">
            <name>Less&lt;String&lt;uchar>>&amp;</name>
            <content>
                <baseType ref="type.8712003"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712209">
            <name>Less&lt;String&lt;uchar>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8712003"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712007">
            <name>Less&lt;String&lt;uchar>>*</name>
            <content>
                <baseType ref="type.8712003"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20" specialization="true">
            <name>LinkedList&lt;T></name>
            <content>
                <primaryType ref="class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <argumentType ref="8699739"/>
            </content>
        </type>
        <type derived="true" id="type.3854">
            <name>LinkedList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3855">
            <name>LinkedList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8700992" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.8700974"/>
            </content>
        </type>
        <type derived="true" id="type.3829">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8700992"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8711942" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.8711925"/>
            </content>
        </type>
        <type derived="true" id="type.8711944">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*>&amp;</name>
            <content>
                <baseType ref="type.8711942"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711966">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8711942"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711943">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*>*</name>
            <content>
                <baseType ref="type.8711942"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8701145" specialization="true">
            <name>List&lt;Bucket&lt;T>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.8701128"/>
            </content>
        </type>
        <type derived="true" id="type.3837">
            <name>List&lt;Bucket&lt;T>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8701145"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8701330" specialization="true">
            <name>List&lt;Bucket&lt;ValueType>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.8701311"/>
            </content>
        </type>
        <type derived="true" id="type.3850">
            <name>List&lt;Bucket&lt;ValueType>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8701330"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8712076" specialization="true">
            <name>List&lt;DomNode*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.8711258"/>
            </content>
        </type>
        <type derived="true" id="type.8712078">
            <name>List&lt;DomNode*>&amp;</name>
            <content>
                <baseType ref="type.8712076"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712100">
            <name>List&lt;DomNode*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8712076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712077">
            <name>List&lt;DomNode*>*</name>
            <content>
                <baseType ref="type.8712076"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8702695" specialization="true">
            <name>List&lt;String&lt;CharT>></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
            </content>
        </type>
        <type derived="true" id="type.3982">
            <name>List&lt;String&lt;CharT>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8702695"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4166" specialization="true">
            <name>List&lt;String&lt;uchar>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.8700295"/>
            </content>
        </type>
        <type id="type.8711708" specialization="true">
            <name>List&lt;String&lt;uchar>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.8700295"/>
            </content>
        </type>
        <type derived="true" id="type.8711710">
            <name>List&lt;String&lt;uchar>*>&amp;</name>
            <content>
                <baseType ref="type.8711708"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4168">
            <name>List&lt;String&lt;uchar>*>&amp;</name>
            <content>
                <baseType ref="type.4166"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711710">
            <name>List&lt;String&lt;uchar>*>&amp;</name>
            <content>
                <baseType ref="type.8711708"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4186">
            <name>List&lt;String&lt;uchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4166"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4197">
            <name>List&lt;String&lt;uchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8711708"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711709">
            <name>List&lt;String&lt;uchar>*>*</name>
            <content>
                <baseType ref="type.8711708"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4167">
            <name>List&lt;String&lt;uchar>*>*</name>
            <content>
                <baseType ref="type.4166"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711709">
            <name>List&lt;String&lt;uchar>*>*</name>
            <content>
                <baseType ref="type.8711708"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C" specialization="true">
            <name>List&lt;T></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="8699873"/>
            </content>
        </type>
        <type derived="true" id="type.3976">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3894">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3858">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8711982" specialization="true">
            <name>List&lt;UniquePtr&lt;System.Dom.DomAttr>></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.8711975"/>
            </content>
        </type>
        <type derived="true" id="type.8711984">
            <name>List&lt;UniquePtr&lt;System.Dom.DomAttr>>&amp;</name>
            <content>
                <baseType ref="type.8711982"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712002">
            <name>List&lt;UniquePtr&lt;System.Dom.DomAttr>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8711982"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711983">
            <name>List&lt;UniquePtr&lt;System.Dom.DomAttr>>*</name>
            <content>
                <baseType ref="type.8711982"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8712122" specialization="true">
            <name>List&lt;UniquePtr&lt;System.Dom.DomElement>></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.8712109"/>
            </content>
        </type>
        <type derived="true" id="type.8712124">
            <name>List&lt;UniquePtr&lt;System.Dom.DomElement>>&amp;</name>
            <content>
                <baseType ref="type.8712122"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712142">
            <name>List&lt;UniquePtr&lt;System.Dom.DomElement>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8712122"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712123">
            <name>List&lt;UniquePtr&lt;System.Dom.DomElement>>*</name>
            <content>
                <baseType ref="type.8712122"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4284">
            <name>Literal&amp;&amp;</name>
            <content>
                <baseType ref="class_Literal_2996038F9E8CCAE363F6BF2855F68961FFF05F77"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1" specialization="true">
            <name>LockGuard&lt;Mtx></name>
            <content>
                <primaryType ref="class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
                <argumentType ref="8699768"/>
            </content>
        </type>
        <type derived="true" id="type.3882">
            <name>LockGuard&lt;Mtx>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8705037" specialization="true">
            <name>LockGuard&lt;System.Threading.Mutex></name>
            <content>
                <primaryType ref="class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
                <argumentType ref="class_Mutex_CAF802A5F8A71934B07EA6C23937F60D9AECD650"/>
            </content>
        </type>
        <type derived="true" id="type.4069">
            <name>LockGuard&lt;System.Threading.Mutex>&amp;&amp;</name>
            <content>
                <baseType ref="type.8705037"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4317">
            <name>LvalueRef&amp;&amp;</name>
            <content>
                <baseType ref="class_LvalueRef_564B7A22159B1EA0883821F35678B0406B055A05"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8712009" specialization="true">
            <name>Map&lt;String&lt;uchar>, DomAttr*, Less&lt;String&lt;uchar>>></name>
            <content>
                <primaryType ref="class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <argumentType ref="type.8700294"/>
                <argumentType ref="type.8711236"/>
                <argumentType ref="type.8712003"/>
            </content>
        </type>
        <type derived="true" id="type.8712011">
            <name>Map&lt;String&lt;uchar>, DomAttr*, Less&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <baseType ref="type.8712009"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712069">
            <name>Map&lt;String&lt;uchar>, DomAttr*, Less&lt;String&lt;uchar>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8712009"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712010">
            <name>Map&lt;String&lt;uchar>, DomAttr*, Less&lt;String&lt;uchar>>>*</name>
            <content>
                <baseType ref="type.8712009"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712237">
            <name>Map&lt;String&lt;uchar>, DomAttr*, Less&lt;String&lt;uchar>>>*&amp;</name>
            <content>
                <baseType ref="type.8712009"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712236">
            <name>Map&lt;String&lt;uchar>, DomAttr*, Less&lt;String&lt;uchar>>>**</name>
            <content>
                <baseType ref="type.8712009"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3879">
            <name>Mtx&amp;</name>
            <content>
                <baseType ref="8699768"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4279">
            <name>New&amp;&amp;</name>
            <content>
                <baseType ref="class_New_DC04D52C4D476FD919D770D43330D434B51E2D21"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_NodeList_B93D67EB9918764021AB095F8DF0C822938F175B">
            <name>NodeList</name>
        </type>
        <type derived="true" id="type.8711277">
            <name>NodeList&amp;</name>
            <content>
                <baseType ref="class_NodeList_B93D67EB9918764021AB095F8DF0C822938F175B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712254">
            <name>NodeList&amp;&amp;</name>
            <content>
                <baseType ref="class_NodeList_B93D67EB9918764021AB095F8DF0C822938F175B"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711276">
            <name>NodeList*</name>
            <content>
                <baseType ref="class_NodeList_B93D67EB9918764021AB095F8DF0C822938F175B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_NodeOp_A834E32432E8B9893D49D376C8198B2DA0983A10">
            <name>NodeOp</name>
        </type>
        <type derived="true" id="type.8711256">
            <name>NodeOp&amp;</name>
            <content>
                <baseType ref="class_NodeOp_A834E32432E8B9893D49D376C8198B2DA0983A10"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711255">
            <name>NodeOp*</name>
            <content>
                <baseType ref="class_NodeOp_A834E32432E8B9893D49D376C8198B2DA0983A10"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4237">
            <name>Not&amp;&amp;</name>
            <content>
                <baseType ref="class_Not_5E324445E5A5F8057BEBD48898C26110CD402187"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4325">
            <name>OptionalParser&amp;&amp;</name>
            <content>
                <baseType ref="class_OptionalParser_F2758E0656F6FF0FCFAFB3BADC90975486CE943A"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8711939" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;uchar>, DomElement*>, Pair&lt;String&lt;uchar>, DomElement*>&amp;, Pair&lt;String&lt;uchar>, DomElement*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.8711918"/>
                <argumentType ref="type.8699065"/>
            </content>
        </type>
        <type derived="true" id="type.8711941">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;uchar>, DomElement*>, Pair&lt;String&lt;uchar>, DomElement*>&amp;, Pair&lt;String&lt;uchar>, DomElement*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>&amp;</name>
            <content>
                <baseType ref="type.8711939"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712192">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;uchar>, DomElement*>, Pair&lt;String&lt;uchar>, DomElement*>&amp;, Pair&lt;String&lt;uchar>, DomElement*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.8711939"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711940">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;uchar>, DomElement*>, Pair&lt;String&lt;uchar>, DomElement*>&amp;, Pair&lt;String&lt;uchar>, DomElement*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>*</name>
            <content>
                <baseType ref="type.8711939"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8711656" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.8711644"/>
                <argumentType ref="type.8699065"/>
            </content>
        </type>
        <type id="type.4114" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.4102"/>
                <argumentType ref="type.8699065"/>
            </content>
        </type>
        <type derived="true" id="type.4116">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>&amp;</name>
            <content>
                <baseType ref="type.4114"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711658">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>&amp;</name>
            <content>
                <baseType ref="type.8711656"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4115">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>*</name>
            <content>
                <baseType ref="type.4114"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711657">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>*</name>
            <content>
                <baseType ref="type.8711656"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8712058" specialization="true">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, DomAttr*>, Pair&lt;String&lt;uchar>, DomAttr*>&amp;, Pair&lt;String&lt;uchar>, DomAttr*>*>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.8712050"/>
                <argumentType ref="type.8699065"/>
            </content>
        </type>
        <type derived="true" id="type.8712060">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, DomAttr*>, Pair&lt;String&lt;uchar>, DomAttr*>&amp;, Pair&lt;String&lt;uchar>, DomAttr*>*>, bool>&amp;</name>
            <content>
                <baseType ref="type.8712058"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712233">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, DomAttr*>, Pair&lt;String&lt;uchar>, DomAttr*>&amp;, Pair&lt;String&lt;uchar>, DomAttr*>*>, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.8712058"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712059">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, DomAttr*>, Pair&lt;String&lt;uchar>, DomAttr*>&amp;, Pair&lt;String&lt;uchar>, DomAttr*>*>, bool>*</name>
            <content>
                <baseType ref="type.8712058"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8712015" specialization="true">
            <name>Pair&lt;String&lt;uchar>, DomAttr*></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.8700294"/>
                <argumentType ref="type.8711236"/>
            </content>
        </type>
        <type derived="true" id="type.8712017">
            <name>Pair&lt;String&lt;uchar>, DomAttr*>&amp;</name>
            <content>
                <baseType ref="type.8712015"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712201">
            <name>Pair&lt;String&lt;uchar>, DomAttr*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8712015"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712016">
            <name>Pair&lt;String&lt;uchar>, DomAttr*>*</name>
            <content>
                <baseType ref="type.8712015"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8711898" specialization="true">
            <name>Pair&lt;String&lt;uchar>, DomElement*></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.8700294"/>
                <argumentType ref="type.8711242"/>
            </content>
        </type>
        <type derived="true" id="type.8711900">
            <name>Pair&lt;String&lt;uchar>, DomElement*>&amp;</name>
            <content>
                <baseType ref="type.8711898"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712149">
            <name>Pair&lt;String&lt;uchar>, DomElement*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8711898"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711899">
            <name>Pair&lt;String&lt;uchar>, DomElement*>*</name>
            <content>
                <baseType ref="type.8711898"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9" specialization="true">
            <name>Pair&lt;T, U></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="8699779"/>
                <argumentType ref="8699780"/>
            </content>
        </type>
        <type id="type.class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9" specialization="true">
            <name>Pair&lt;T, U></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="8699779"/>
                <argumentType ref="8699780"/>
            </content>
        </type>
        <type derived="true" id="type.8711152">
            <name>Parser&amp;</name>
            <content>
                <baseType ref="class_Parser_59591398FA427ADC5EC015FB52651571177DB77D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3737">
            <name>Parser&amp;</name>
            <content>
                <baseType ref="class_Parser_59591398FA427ADC5EC015FB52651571177DB77D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711152">
            <name>Parser&amp;</name>
            <content>
                <baseType ref="class_Parser_59591398FA427ADC5EC015FB52651571177DB77D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711151">
            <name>Parser*</name>
            <content>
                <baseType ref="class_Parser_59591398FA427ADC5EC015FB52651571177DB77D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3736">
            <name>Parser*</name>
            <content>
                <baseType ref="class_Parser_59591398FA427ADC5EC015FB52651571177DB77D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711151">
            <name>Parser*</name>
            <content>
                <baseType ref="class_Parser_59591398FA427ADC5EC015FB52651571177DB77D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4338">
            <name>ParsingData&amp;&amp;</name>
            <content>
                <baseType ref="class_ParsingData_9F05BA66DA13D9A55E1E7FF50B19E250484C3A7B"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711154">
            <name>ParsingDomain&amp;</name>
            <content>
                <baseType ref="class_ParsingDomain_DBADEDB24194482080D6E7112DE96AB5FCAD1A87"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3739">
            <name>ParsingDomain&amp;</name>
            <content>
                <baseType ref="class_ParsingDomain_DBADEDB24194482080D6E7112DE96AB5FCAD1A87"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711153">
            <name>ParsingDomain*</name>
            <content>
                <baseType ref="class_ParsingDomain_DBADEDB24194482080D6E7112DE96AB5FCAD1A87"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3738">
            <name>ParsingDomain*</name>
            <content>
                <baseType ref="class_ParsingDomain_DBADEDB24194482080D6E7112DE96AB5FCAD1A87"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711153">
            <name>ParsingDomain*</name>
            <content>
                <baseType ref="class_ParsingDomain_DBADEDB24194482080D6E7112DE96AB5FCAD1A87"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4319">
            <name>Pointer&amp;&amp;</name>
            <content>
                <baseType ref="class_Pointer_37B1358240AF7AEA32F2A089E384F29AB860D4E6"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4328">
            <name>PositiveParser&amp;&amp;</name>
            <content>
                <baseType ref="class_PositiveParser_773062827D5C6002110C7D897D790DAEEE06A502"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4267">
            <name>PostfixDecrement&amp;&amp;</name>
            <content>
                <baseType ref="class_PostfixDecrement_D09AB7ACBA491B153051FDF9DE245E475C7F6392"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4264">
            <name>PostfixIncrement&amp;&amp;</name>
            <content>
                <baseType ref="class_PostfixIncrement_DDC6B0BA10308D23CE5F90EE4D6B95A60E196FE9"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4249">
            <name>PrefixDecrement&amp;&amp;</name>
            <content>
                <baseType ref="class_PrefixDecrement_999D7C38861B7D6CED24609E18ACD9197FF478F0"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4246">
            <name>PrefixIncrement&amp;&amp;</name>
            <content>
                <baseType ref="class_PrefixIncrement_8035645A064F2FF3F7808392B992A24FA56E9E9D"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8708969" specialization="true">
            <name>RandomAccessIter&lt;ActionParser*, const ActionParser*&amp;, const ActionParser**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8707164"/>
                <argumentType ref="type.8708967"/>
                <argumentType ref="type.8708968"/>
            </content>
        </type>
        <type derived="true" id="type.4134">
            <name>RandomAccessIter&lt;ActionParser*, const ActionParser*&amp;, const ActionParser**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8708969"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8703878" specialization="true">
            <name>RandomAccessIter&lt;Age*, const Age*&amp;, const Age**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699988"/>
                <argumentType ref="type.8703721"/>
                <argumentType ref="type.8703877"/>
            </content>
        </type>
        <type derived="true" id="type.4026">
            <name>RandomAccessIter&lt;Age*, const Age*&amp;, const Age**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703878"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8704918" specialization="true">
            <name>RandomAccessIter&lt;AliasType*, const AliasType*&amp;, const AliasType**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8700059"/>
                <argumentType ref="type.8704761"/>
                <argumentType ref="type.8704917"/>
            </content>
        </type>
        <type derived="true" id="type.4051">
            <name>RandomAccessIter&lt;AliasType*, const AliasType*&amp;, const AliasType**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704918"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8704502" specialization="true">
            <name>RandomAccessIter&lt;BidiClass*, const BidiClass*&amp;, const BidiClass**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8700033"/>
                <argumentType ref="type.8704345"/>
                <argumentType ref="type.8704501"/>
            </content>
        </type>
        <type derived="true" id="type.4041">
            <name>RandomAccessIter&lt;BidiClass*, const BidiClass*&amp;, const BidiClass**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704502"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8704710" specialization="true">
            <name>RandomAccessIter&lt;BidiPairedBracketType*, const BidiPairedBracketType*&amp;, const BidiPairedBracketType**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8700046"/>
                <argumentType ref="type.8704553"/>
                <argumentType ref="type.8704709"/>
            </content>
        </type>
        <type derived="true" id="type.4046">
            <name>RandomAccessIter&lt;BidiPairedBracketType*, const BidiPairedBracketType*&amp;, const BidiPairedBracketType**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704710"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8703241" specialization="true">
            <name>RandomAccessIter&lt;BinaryProperty*, const BinaryProperty*&amp;, const BinaryProperty**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699958"/>
                <argumentType ref="type.8703070"/>
                <argumentType ref="type.8703240"/>
            </content>
        </type>
        <type derived="true" id="type.4011">
            <name>RandomAccessIter&lt;BinaryProperty*, const BinaryProperty*&amp;, const BinaryProperty**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703241"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8703459" specialization="true">
            <name>RandomAccessIter&lt;Block*, const Block*&amp;, const Block**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699968"/>
                <argumentType ref="type.8703302"/>
                <argumentType ref="type.8703458"/>
            </content>
        </type>
        <type derived="true" id="type.4016">
            <name>RandomAccessIter&lt;Block*, const Block*&amp;, const Block**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703459"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8708511" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Grammar*>*, Bucket&lt;Grammar*>*&amp;, Bucket&lt;Grammar*>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8708478"/>
                <argumentType ref="type.8708509"/>
                <argumentType ref="type.8708510"/>
            </content>
        </type>
        <type derived="true" id="type.4101">
            <name>RandomAccessIter&lt;Bucket&lt;Grammar*>*, Bucket&lt;Grammar*>*&amp;, Bucket&lt;Grammar*>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8708511"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8708502" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Grammar*>*, const Bucket&lt;Grammar*>*&amp;, const Bucket&lt;Grammar*>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8708478"/>
                <argumentType ref="type.8708500"/>
                <argumentType ref="type.8708501"/>
            </content>
        </type>
        <type derived="true" id="type.4100">
            <name>RandomAccessIter&lt;Bucket&lt;Grammar*>*, const Bucket&lt;Grammar*>*&amp;, const Bucket&lt;Grammar*>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8708502"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8701087" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8701053"/>
                <argumentType ref="type.8701085"/>
                <argumentType ref="type.8701086"/>
            </content>
        </type>
        <type id="type.8701009" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8700974"/>
                <argumentType ref="type.8701007"/>
                <argumentType ref="type.8701008"/>
            </content>
        </type>
        <type derived="true" id="type.3833">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8701087"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3828">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8701009"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8701078" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8701053"/>
                <argumentType ref="type.8701076"/>
                <argumentType ref="type.8701077"/>
            </content>
        </type>
        <type id="type.8701000" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8700974"/>
                <argumentType ref="type.8700998"/>
                <argumentType ref="type.8700999"/>
            </content>
        </type>
        <type derived="true" id="type.3827">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8701000"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3832">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8701078"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8703855" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Age*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8703821"/>
                <argumentType ref="type.8703853"/>
                <argumentType ref="type.8703854"/>
            </content>
        </type>
        <type derived="true" id="type.4025">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703855"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8703846" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8703821"/>
                <argumentType ref="type.8703844"/>
                <argumentType ref="type.8703845"/>
            </content>
        </type>
        <type derived="true" id="type.4024">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703846"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8704895" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8704861"/>
                <argumentType ref="type.8704893"/>
                <argumentType ref="type.8704894"/>
            </content>
        </type>
        <type derived="true" id="type.4050">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704895"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8704886" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8704861"/>
                <argumentType ref="type.8704884"/>
                <argumentType ref="type.8704885"/>
            </content>
        </type>
        <type derived="true" id="type.4049">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704886"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8704479" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8704445"/>
                <argumentType ref="type.8704477"/>
                <argumentType ref="type.8704478"/>
            </content>
        </type>
        <type derived="true" id="type.4040">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704479"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8704470" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8704445"/>
                <argumentType ref="type.8704468"/>
                <argumentType ref="type.8704469"/>
            </content>
        </type>
        <type derived="true" id="type.4039">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704470"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8704687" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8704653"/>
                <argumentType ref="type.8704685"/>
                <argumentType ref="type.8704686"/>
            </content>
        </type>
        <type derived="true" id="type.4045">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704687"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8704678" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8704653"/>
                <argumentType ref="type.8704676"/>
                <argumentType ref="type.8704677"/>
            </content>
        </type>
        <type derived="true" id="type.4044">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704678"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8703225" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8703191"/>
                <argumentType ref="type.8703223"/>
                <argumentType ref="type.8703224"/>
            </content>
        </type>
        <type derived="true" id="type.4010">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703225"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8703216" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8703191"/>
                <argumentType ref="type.8703214"/>
                <argumentType ref="type.8703215"/>
            </content>
        </type>
        <type derived="true" id="type.4009">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703216"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8703436" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Block*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8703402"/>
                <argumentType ref="type.8703434"/>
                <argumentType ref="type.8703435"/>
            </content>
        </type>
        <type derived="true" id="type.4015">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703436"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8703427" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8703402"/>
                <argumentType ref="type.8703425"/>
                <argumentType ref="type.8703426"/>
            </content>
        </type>
        <type derived="true" id="type.4014">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703427"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8703647" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8703613"/>
                <argumentType ref="type.8703645"/>
                <argumentType ref="type.8703646"/>
            </content>
        </type>
        <type derived="true" id="type.4020">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703647"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8703638" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8703613"/>
                <argumentType ref="type.8703636"/>
                <argumentType ref="type.8703637"/>
            </content>
        </type>
        <type derived="true" id="type.4019">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703638"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8704271" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8704237"/>
                <argumentType ref="type.8704269"/>
                <argumentType ref="type.8704270"/>
            </content>
        </type>
        <type derived="true" id="type.4035">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704271"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8704262" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8704237"/>
                <argumentType ref="type.8704260"/>
                <argumentType ref="type.8704261"/>
            </content>
        </type>
        <type derived="true" id="type.4034">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704262"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8704063" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Script*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8704029"/>
                <argumentType ref="type.8704061"/>
                <argumentType ref="type.8704062"/>
            </content>
        </type>
        <type derived="true" id="type.4030">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704063"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8704054" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8704029"/>
                <argumentType ref="type.8704052"/>
                <argumentType ref="type.8704053"/>
            </content>
        </type>
        <type derived="true" id="type.4029">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704054"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8711959" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8711925"/>
                <argumentType ref="type.8711957"/>
                <argumentType ref="type.8711958"/>
            </content>
        </type>
        <type derived="true" id="type.8711961">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>**>&amp;</name>
            <content>
                <baseType ref="type.8711959"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4201">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8711959"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711960">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>**>*</name>
            <content>
                <baseType ref="type.8711959"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8711950" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8711925"/>
                <argumentType ref="type.8711948"/>
                <argumentType ref="type.8711949"/>
            </content>
        </type>
        <type derived="true" id="type.8711952">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>**>&amp;</name>
            <content>
                <baseType ref="type.8711950"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4200">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8711950"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711951">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>**>*</name>
            <content>
                <baseType ref="type.8711950"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8710730" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Entity*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Entity*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Entity*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8710696"/>
                <argumentType ref="type.8710728"/>
                <argumentType ref="type.8710729"/>
            </content>
        </type>
        <type derived="true" id="type.4165">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Entity*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Entity*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Entity*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8710730"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8710721" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Entity*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Entity*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Entity*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8710696"/>
                <argumentType ref="type.8710719"/>
                <argumentType ref="type.8710720"/>
            </content>
        </type>
        <type derived="true" id="type.4164">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Entity*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Entity*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Entity*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8710721"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8708757" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8708723"/>
                <argumentType ref="type.8708755"/>
                <argumentType ref="type.8708756"/>
            </content>
        </type>
        <type derived="true" id="type.4125">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8708757"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8708748" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8708723"/>
                <argumentType ref="type.8708746"/>
                <argumentType ref="type.8708747"/>
            </content>
        </type>
        <type derived="true" id="type.4124">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8708748"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8708833" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8708799"/>
                <argumentType ref="type.8708831"/>
                <argumentType ref="type.8708832"/>
            </content>
        </type>
        <type derived="true" id="type.4127">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8708833"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8708824" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8708799"/>
                <argumentType ref="type.8708822"/>
                <argumentType ref="type.8708823"/>
            </content>
        </type>
        <type derived="true" id="type.4126">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8708824"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8709080" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8709046"/>
                <argumentType ref="type.8709078"/>
                <argumentType ref="type.8709079"/>
            </content>
        </type>
        <type derived="true" id="type.4137">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8709080"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8709071" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8709046"/>
                <argumentType ref="type.8709069"/>
                <argumentType ref="type.8709070"/>
            </content>
        </type>
        <type derived="true" id="type.4136">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8709071"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8708323" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*, Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8708289"/>
                <argumentType ref="type.8708321"/>
                <argumentType ref="type.8708322"/>
            </content>
        </type>
        <type derived="true" id="type.4096">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*, Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8708323"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8708314" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8708289"/>
                <argumentType ref="type.8708312"/>
                <argumentType ref="type.8708313"/>
            </content>
        </type>
        <type derived="true" id="type.4095">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8708314"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8703779" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8703745"/>
                <argumentType ref="type.8703777"/>
                <argumentType ref="type.8703778"/>
            </content>
        </type>
        <type derived="true" id="type.4023">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703779"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8703770" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8703745"/>
                <argumentType ref="type.8703768"/>
                <argumentType ref="type.8703769"/>
            </content>
        </type>
        <type derived="true" id="type.4022">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703770"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8704819" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8704785"/>
                <argumentType ref="type.8704817"/>
                <argumentType ref="type.8704818"/>
            </content>
        </type>
        <type derived="true" id="type.4048">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704819"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8704810" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8704785"/>
                <argumentType ref="type.8704808"/>
                <argumentType ref="type.8704809"/>
            </content>
        </type>
        <type derived="true" id="type.4047">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704810"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8704403" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8704369"/>
                <argumentType ref="type.8704401"/>
                <argumentType ref="type.8704402"/>
            </content>
        </type>
        <type derived="true" id="type.4038">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704403"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8704394" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8704369"/>
                <argumentType ref="type.8704392"/>
                <argumentType ref="type.8704393"/>
            </content>
        </type>
        <type derived="true" id="type.4037">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704394"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8704611" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8704577"/>
                <argumentType ref="type.8704609"/>
                <argumentType ref="type.8704610"/>
            </content>
        </type>
        <type derived="true" id="type.4043">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704611"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8704602" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8704577"/>
                <argumentType ref="type.8704600"/>
                <argumentType ref="type.8704601"/>
            </content>
        </type>
        <type derived="true" id="type.4042">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704602"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8703128" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8703094"/>
                <argumentType ref="type.8703126"/>
                <argumentType ref="type.8703127"/>
            </content>
        </type>
        <type derived="true" id="type.4008">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703128"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8703119" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8703094"/>
                <argumentType ref="type.8703117"/>
                <argumentType ref="type.8703118"/>
            </content>
        </type>
        <type derived="true" id="type.4007">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703119"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8703360" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8703326"/>
                <argumentType ref="type.8703358"/>
                <argumentType ref="type.8703359"/>
            </content>
        </type>
        <type derived="true" id="type.4013">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703360"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8703351" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8703326"/>
                <argumentType ref="type.8703349"/>
                <argumentType ref="type.8703350"/>
            </content>
        </type>
        <type derived="true" id="type.4012">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703351"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8703571" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8703537"/>
                <argumentType ref="type.8703569"/>
                <argumentType ref="type.8703570"/>
            </content>
        </type>
        <type derived="true" id="type.4018">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703571"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8703562" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8703537"/>
                <argumentType ref="type.8703560"/>
                <argumentType ref="type.8703561"/>
            </content>
        </type>
        <type derived="true" id="type.4017">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703562"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8704195" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8704161"/>
                <argumentType ref="type.8704193"/>
                <argumentType ref="type.8704194"/>
            </content>
        </type>
        <type derived="true" id="type.4033">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704195"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8704186" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8704161"/>
                <argumentType ref="type.8704184"/>
                <argumentType ref="type.8704185"/>
            </content>
        </type>
        <type derived="true" id="type.4032">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704186"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8703987" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8703953"/>
                <argumentType ref="type.8703985"/>
                <argumentType ref="type.8703986"/>
            </content>
        </type>
        <type derived="true" id="type.4028">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703987"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8703978" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8703953"/>
                <argumentType ref="type.8703976"/>
                <argumentType ref="type.8703977"/>
            </content>
        </type>
        <type derived="true" id="type.4027">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703978"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8708595" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;String&lt;uchar>>*, Bucket&lt;String&lt;uchar>>*&amp;, Bucket&lt;String&lt;uchar>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8708563"/>
                <argumentType ref="type.8708593"/>
                <argumentType ref="type.8708594"/>
            </content>
        </type>
        <type derived="true" id="type.4118">
            <name>RandomAccessIter&lt;Bucket&lt;String&lt;uchar>>*, Bucket&lt;String&lt;uchar>>*&amp;, Bucket&lt;String&lt;uchar>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8708595"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8708586" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;String&lt;uchar>>*, const Bucket&lt;String&lt;uchar>>*&amp;, const Bucket&lt;String&lt;uchar>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8708563"/>
                <argumentType ref="type.8708584"/>
                <argumentType ref="type.8708585"/>
            </content>
        </type>
        <type derived="true" id="type.4117">
            <name>RandomAccessIter&lt;Bucket&lt;String&lt;uchar>>*, const Bucket&lt;String&lt;uchar>>*&amp;, const Bucket&lt;String&lt;uchar>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8708586"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8701236" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8701202"/>
                <argumentType ref="type.8701234"/>
                <argumentType ref="type.8701235"/>
            </content>
        </type>
        <type id="type.8701162" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8701128"/>
                <argumentType ref="type.8701160"/>
                <argumentType ref="type.8701161"/>
            </content>
        </type>
        <type derived="true" id="type.3840">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8701236"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3836">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8701162"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8701153" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8701128"/>
                <argumentType ref="type.8701151"/>
                <argumentType ref="type.8701152"/>
            </content>
        </type>
        <type id="type.8701227" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8701202"/>
                <argumentType ref="type.8701225"/>
                <argumentType ref="type.8701226"/>
            </content>
        </type>
        <type derived="true" id="type.3839">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8701227"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3835">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8701153"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8701347" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, Bucket&lt;ValueType>*&amp;, Bucket&lt;ValueType>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8701311"/>
                <argumentType ref="type.8701345"/>
                <argumentType ref="type.8701346"/>
            </content>
        </type>
        <type derived="true" id="type.3849">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, Bucket&lt;ValueType>*&amp;, Bucket&lt;ValueType>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8701347"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8701338" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, const Bucket&lt;ValueType>*&amp;, const Bucket&lt;ValueType>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8701311"/>
                <argumentType ref="type.8701336"/>
                <argumentType ref="type.8701337"/>
            </content>
        </type>
        <type derived="true" id="type.3848">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, const Bucket&lt;ValueType>*&amp;, const Bucket&lt;ValueType>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8701338"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF" specialization="true">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="8699899"/>
                <argumentType ref="type.8702826"/>
                <argumentType ref="type.8702827"/>
            </content>
        </type>
        <type derived="true" id="type.3978">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3992">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3996">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3988">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3984">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4004">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4000">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966" specialization="true">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="8699897"/>
                <argumentType ref="type.8702722"/>
                <argumentType ref="type.8702723"/>
            </content>
        </type>
        <type derived="true" id="type.3999">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4003">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3995">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3991">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3987">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3977">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3983">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8712093" specialization="true">
            <name>RandomAccessIter&lt;DomNode*, DomNode*&amp;, DomNode**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8711258"/>
                <argumentType ref="type.8712091"/>
                <argumentType ref="type.8712092"/>
            </content>
        </type>
        <type derived="true" id="type.8712095">
            <name>RandomAccessIter&lt;DomNode*, DomNode*&amp;, DomNode**>&amp;</name>
            <content>
                <baseType ref="type.8712093"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4203">
            <name>RandomAccessIter&lt;DomNode*, DomNode*&amp;, DomNode**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8712093"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712094">
            <name>RandomAccessIter&lt;DomNode*, DomNode*&amp;, DomNode**>*</name>
            <content>
                <baseType ref="type.8712093"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8712084" specialization="true">
            <name>RandomAccessIter&lt;DomNode*, const DomNode*&amp;, const DomNode**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8711258"/>
                <argumentType ref="type.8712082"/>
                <argumentType ref="type.8712083"/>
            </content>
        </type>
        <type derived="true" id="type.8712086">
            <name>RandomAccessIter&lt;DomNode*, const DomNode*&amp;, const DomNode**>&amp;</name>
            <content>
                <baseType ref="type.8712084"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712090">
            <name>RandomAccessIter&lt;DomNode*, const DomNode*&amp;, const DomNode**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8712084"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712085">
            <name>RandomAccessIter&lt;DomNode*, const DomNode*&amp;, const DomNode**>*</name>
            <content>
                <baseType ref="type.8712084"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8703670" specialization="true">
            <name>RandomAccessIter&lt;GeneralCategory*, const GeneralCategory*&amp;, const GeneralCategory**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699978"/>
                <argumentType ref="type.8703513"/>
                <argumentType ref="type.8703669"/>
            </content>
        </type>
        <type derived="true" id="type.4021">
            <name>RandomAccessIter&lt;GeneralCategory*, const GeneralCategory*&amp;, const GeneralCategory**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8703670"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8708860" specialization="true">
            <name>RandomAccessIter&lt;Namespace*, const Namespace*&amp;, const Namespace**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8707269"/>
                <argumentType ref="type.8708775"/>
                <argumentType ref="type.8708856"/>
            </content>
        </type>
        <type derived="true" id="type.4128">
            <name>RandomAccessIter&lt;Namespace*, const Namespace*&amp;, const Namespace**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8708860"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8708995" specialization="true">
            <name>RandomAccessIter&lt;NonterminalParser*, const NonterminalParser*&amp;, const NonterminalParser**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8707277"/>
                <argumentType ref="type.8708993"/>
                <argumentType ref="type.8708994"/>
            </content>
        </type>
        <type derived="true" id="type.4135">
            <name>RandomAccessIter&lt;NonterminalParser*, const NonterminalParser*&amp;, const NonterminalParser**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8708995"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8704287" specialization="true">
            <name>RandomAccessIter&lt;NumericType*, const NumericType*&amp;, const NumericType**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8700020"/>
                <argumentType ref="type.8704137"/>
                <argumentType ref="type.8704286"/>
            </content>
        </type>
        <type derived="true" id="type.4036">
            <name>RandomAccessIter&lt;NumericType*, const NumericType*&amp;, const NumericType**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704287"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8708408" specialization="true">
            <name>RandomAccessIter&lt;RuleLink*, const RuleLink*&amp;, const RuleLink**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8707508"/>
                <argumentType ref="type.8708406"/>
                <argumentType ref="type.8708407"/>
            </content>
        </type>
        <type derived="true" id="type.4099">
            <name>RandomAccessIter&lt;RuleLink*, const RuleLink*&amp;, const RuleLink**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8708408"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8704086" specialization="true">
            <name>RandomAccessIter&lt;Script*, const Script*&amp;, const Script**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8700001"/>
                <argumentType ref="type.8703929"/>
                <argumentType ref="type.8704085"/>
            </content>
        </type>
        <type derived="true" id="type.4031">
            <name>RandomAccessIter&lt;Script*, const Script*&amp;, const Script**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704086"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8702943" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.8702909"/>
                <argumentType ref="type.8702908"/>
            </content>
        </type>
        <type id="type.8702896" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.8702859"/>
                <argumentType ref="type.8702858"/>
            </content>
        </type>
        <type id="type.8702849" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.8702812"/>
                <argumentType ref="type.8702811"/>
            </content>
        </type>
        <type id="type.8702802" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.8702765"/>
                <argumentType ref="type.8702764"/>
            </content>
        </type>
        <type id="type.8702755" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.8702718"/>
                <argumentType ref="type.8702717"/>
            </content>
        </type>
        <type id="type.8702708" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.8702671"/>
                <argumentType ref="type.8702670"/>
            </content>
        </type>
        <type id="type.8702990" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.8702953"/>
                <argumentType ref="type.8702952"/>
            </content>
        </type>
        <type derived="true" id="type.4002">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8702943"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3990">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8702802"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3986">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8702755"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4006">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8702990"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3981">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8702708"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3998">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8702896"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3994">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8702849"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8702983" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.8702956"/>
                <argumentType ref="type.8702955"/>
            </content>
        </type>
        <type id="type.8702701" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.8702674"/>
                <argumentType ref="type.8702673"/>
            </content>
        </type>
        <type id="type.8702936" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.8702912"/>
                <argumentType ref="type.8702911"/>
            </content>
        </type>
        <type id="type.8702889" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.8702862"/>
                <argumentType ref="type.8702861"/>
            </content>
        </type>
        <type id="type.8702983" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.8702956"/>
                <argumentType ref="type.8702955"/>
            </content>
        </type>
        <type id="type.8702795" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.8702768"/>
                <argumentType ref="type.8702767"/>
            </content>
        </type>
        <type id="type.8702842" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.8702815"/>
                <argumentType ref="type.8702814"/>
            </content>
        </type>
        <type id="type.8702748" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.8702721"/>
                <argumentType ref="type.8702720"/>
            </content>
        </type>
        <type derived="true" id="type.3985">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8702748"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3980">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8702701"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3993">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8702842"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3997">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8702889"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3989">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8702795"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4001">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8702936"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4005">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8702983"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8700241" specialization="true">
            <name>RandomAccessIter&lt;String&lt;char>, String&lt;char>&amp;, String&lt;char>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8700206"/>
                <argumentType ref="type.8700208"/>
                <argumentType ref="type.8700207"/>
            </content>
        </type>
        <type derived="true" id="type.3750">
            <name>RandomAccessIter&lt;String&lt;char>, String&lt;char>&amp;, String&lt;char>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8700241"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8700234" specialization="true">
            <name>RandomAccessIter&lt;String&lt;char>, const String&lt;char>&amp;, const String&lt;char>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8700206"/>
                <argumentType ref="type.8700211"/>
                <argumentType ref="type.8700210"/>
            </content>
        </type>
        <type derived="true" id="type.3749">
            <name>RandomAccessIter&lt;String&lt;char>, const String&lt;char>&amp;, const String&lt;char>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8700234"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8711721" specialization="true">
            <name>RandomAccessIter&lt;String&lt;uchar>*, String&lt;uchar>*&amp;, String&lt;uchar>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8700295"/>
                <argumentType ref="type.8709152"/>
                <argumentType ref="type.8709263"/>
            </content>
        </type>
        <type id="type.4179" specialization="true">
            <name>RandomAccessIter&lt;String&lt;uchar>*, String&lt;uchar>*&amp;, String&lt;uchar>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8700295"/>
                <argumentType ref="type.8709152"/>
                <argumentType ref="type.8709263"/>
            </content>
        </type>
        <type derived="true" id="type.8711723">
            <name>RandomAccessIter&lt;String&lt;uchar>*, String&lt;uchar>*&amp;, String&lt;uchar>**>&amp;</name>
            <content>
                <baseType ref="type.8711721"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4181">
            <name>RandomAccessIter&lt;String&lt;uchar>*, String&lt;uchar>*&amp;, String&lt;uchar>**>&amp;</name>
            <content>
                <baseType ref="type.4179"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711723">
            <name>RandomAccessIter&lt;String&lt;uchar>*, String&lt;uchar>*&amp;, String&lt;uchar>**>&amp;</name>
            <content>
                <baseType ref="type.8711721"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4199">
            <name>RandomAccessIter&lt;String&lt;uchar>*, String&lt;uchar>*&amp;, String&lt;uchar>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8711721"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4185">
            <name>RandomAccessIter&lt;String&lt;uchar>*, String&lt;uchar>*&amp;, String&lt;uchar>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4179"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4180">
            <name>RandomAccessIter&lt;String&lt;uchar>*, String&lt;uchar>*&amp;, String&lt;uchar>**>*</name>
            <content>
                <baseType ref="type.4179"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711722">
            <name>RandomAccessIter&lt;String&lt;uchar>*, String&lt;uchar>*&amp;, String&lt;uchar>**>*</name>
            <content>
                <baseType ref="type.8711721"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8710759" specialization="true">
            <name>RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8700295"/>
                <argumentType ref="type.8709097"/>
                <argumentType ref="type.8709261"/>
            </content>
        </type>
        <type id="type.4172" specialization="true">
            <name>RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8700295"/>
                <argumentType ref="type.8709097"/>
                <argumentType ref="type.8709261"/>
            </content>
        </type>
        <type id="type.8711714" specialization="true">
            <name>RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8700295"/>
                <argumentType ref="type.8709097"/>
                <argumentType ref="type.8709261"/>
            </content>
        </type>
        <type id="type.8710759" specialization="true">
            <name>RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8700295"/>
                <argumentType ref="type.8709097"/>
                <argumentType ref="type.8709261"/>
            </content>
        </type>
        <type derived="true" id="type.8711716">
            <name>RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**>&amp;</name>
            <content>
                <baseType ref="type.8711714"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4174">
            <name>RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**>&amp;</name>
            <content>
                <baseType ref="type.4172"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4187">
            <name>RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8710759"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4198">
            <name>RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.8711714"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4178">
            <name>RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4172"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4173">
            <name>RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**>*</name>
            <content>
                <baseType ref="type.4172"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711715">
            <name>RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**>*</name>
            <content>
                <baseType ref="type.8711714"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8700331" specialization="true">
            <name>RandomAccessIter&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8700294"/>
                <argumentType ref="type.8700296"/>
                <argumentType ref="type.8700295"/>
            </content>
        </type>
        <type derived="true" id="type.3769">
            <name>RandomAccessIter&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8700331"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8700324" specialization="true">
            <name>RandomAccessIter&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8700294"/>
                <argumentType ref="type.8700299"/>
                <argumentType ref="type.8700298"/>
            </content>
        </type>
        <type derived="true" id="type.3768">
            <name>RandomAccessIter&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8700324"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8700286" specialization="true">
            <name>RandomAccessIter&lt;String&lt;wchar>, String&lt;wchar>&amp;, String&lt;wchar>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8700249"/>
                <argumentType ref="type.8700251"/>
                <argumentType ref="type.8700250"/>
            </content>
        </type>
        <type derived="true" id="type.3759">
            <name>RandomAccessIter&lt;String&lt;wchar>, String&lt;wchar>&amp;, String&lt;wchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8700286"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8700279" specialization="true">
            <name>RandomAccessIter&lt;String&lt;wchar>, const String&lt;wchar>&amp;, const String&lt;wchar>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8700249"/>
                <argumentType ref="type.8700254"/>
                <argumentType ref="type.8700253"/>
            </content>
        </type>
        <type derived="true" id="type.3758">
            <name>RandomAccessIter&lt;String&lt;wchar>, const String&lt;wchar>&amp;, const String&lt;wchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8700279"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8708945" specialization="true">
            <name>RandomAccessIter&lt;System.Text.Parsing.AttrOrVar, const AttrOrVar&amp;, const AttrOrVar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_AttrOrVar_50B6EF23E232C2A406B7F5C94499D4CC0CC6D353"/>
                <argumentType ref="type.8707500"/>
                <argumentType ref="type.8707499"/>
            </content>
        </type>
        <type derived="true" id="type.4133">
            <name>RandomAccessIter&lt;System.Text.Parsing.AttrOrVar, const AttrOrVar&amp;, const AttrOrVar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8708945"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8708931" specialization="true">
            <name>RandomAccessIter&lt;System.Text.Parsing.CharRange, CharRange&amp;, CharRange*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_CharRange_59BCB010C02C8EB081B9C5DB566155FFE78B44CC"/>
                <argumentType ref="type.8707335"/>
                <argumentType ref="type.8707334"/>
            </content>
        </type>
        <type derived="true" id="type.4132">
            <name>RandomAccessIter&lt;System.Text.Parsing.CharRange, CharRange&amp;, CharRange*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8708931"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8708924" specialization="true">
            <name>RandomAccessIter&lt;System.Text.Parsing.CharRange, const CharRange&amp;, const CharRange*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_CharRange_59BCB010C02C8EB081B9C5DB566155FFE78B44CC"/>
                <argumentType ref="type.8707338"/>
                <argumentType ref="type.8707337"/>
            </content>
        </type>
        <type derived="true" id="type.4131">
            <name>RandomAccessIter&lt;System.Text.Parsing.CharRange, const CharRange&amp;, const CharRange*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8708924"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8708682" specialization="true">
            <name>RandomAccessIter&lt;System.Text.Parsing.RuleData, RuleData&amp;, RuleData*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_RuleData_8D0490A7E12ED026B00D026E032926DF8F5F526A"/>
                <argumentType ref="type.8708664"/>
                <argumentType ref="type.8708663"/>
            </content>
        </type>
        <type derived="true" id="type.4123">
            <name>RandomAccessIter&lt;System.Text.Parsing.RuleData, RuleData&amp;, RuleData*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8708682"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8708675" specialization="true">
            <name>RandomAccessIter&lt;System.Text.Parsing.RuleData, const RuleData&amp;, const RuleData*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_RuleData_8D0490A7E12ED026B00D026E032926DF8F5F526A"/>
                <argumentType ref="type.8708672"/>
                <argumentType ref="type.8708673"/>
            </content>
        </type>
        <type derived="true" id="type.4122">
            <name>RandomAccessIter&lt;System.Text.Parsing.RuleData, const RuleData&amp;, const RuleData*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8708675"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8704948" specialization="true">
            <name>RandomAccessIter&lt;System.Unicode.Alias, Alias&amp;, Alias*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_Alias_F5EF8FC9193282B25B9E84210775A55CF0A14DB2"/>
                <argumentType ref="type.8700072"/>
                <argumentType ref="type.8700071"/>
            </content>
        </type>
        <type derived="true" id="type.4053">
            <name>RandomAccessIter&lt;System.Unicode.Alias, Alias&amp;, Alias*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704948"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8704941" specialization="true">
            <name>RandomAccessIter&lt;System.Unicode.Alias, const Alias&amp;, const Alias*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_Alias_F5EF8FC9193282B25B9E84210775A55CF0A14DB2"/>
                <argumentType ref="type.8700075"/>
                <argumentType ref="type.8700074"/>
            </content>
        </type>
        <type derived="true" id="type.4052">
            <name>RandomAccessIter&lt;System.Unicode.Alias, const Alias&amp;, const Alias*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704941"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484" specialization="true">
            <name>RandomAccessIter&lt;T, R, P></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="8699791"/>
                <argumentType ref="8699792"/>
                <argumentType ref="8699793"/>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484" specialization="true">
            <name>RandomAccessIter&lt;T, R, P></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="8699809"/>
                <argumentType ref="8699810"/>
                <argumentType ref="8699811"/>
            </content>
        </type>
        <type derived="true" id="type.3899">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3898">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3901">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3900">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3896">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3895">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3897">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7" specialization="true">
            <name>RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="8699789"/>
                <argumentType ref="type.8701795"/>
                <argumentType ref="type.8701796"/>
            </content>
        </type>
        <type derived="true" id="type.3975">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3893">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3857">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3861">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3863">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892" specialization="true">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="8699743"/>
                <argumentType ref="type.8701532"/>
                <argumentType ref="type.8701533"/>
            </content>
        </type>
        <type derived="true" id="type.3892">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3974">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3856">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3862">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3860">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8711995" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomAttr>, UniquePtr&lt;System.Dom.DomAttr>&amp;, UniquePtr&lt;System.Dom.DomAttr>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8711975"/>
                <argumentType ref="type.8711977"/>
                <argumentType ref="type.8711976"/>
            </content>
        </type>
        <type derived="true" id="type.8711997">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomAttr>, UniquePtr&lt;System.Dom.DomAttr>&amp;, UniquePtr&lt;System.Dom.DomAttr>*>&amp;</name>
            <content>
                <baseType ref="type.8711995"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712001">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomAttr>, UniquePtr&lt;System.Dom.DomAttr>&amp;, UniquePtr&lt;System.Dom.DomAttr>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8711995"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711996">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomAttr>, UniquePtr&lt;System.Dom.DomAttr>&amp;, UniquePtr&lt;System.Dom.DomAttr>*>*</name>
            <content>
                <baseType ref="type.8711995"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8711988" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomAttr>, const UniquePtr&lt;System.Dom.DomAttr>&amp;, const UniquePtr&lt;System.Dom.DomAttr>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8711975"/>
                <argumentType ref="type.8711980"/>
                <argumentType ref="type.8711979"/>
            </content>
        </type>
        <type derived="true" id="type.8711990">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomAttr>, const UniquePtr&lt;System.Dom.DomAttr>&amp;, const UniquePtr&lt;System.Dom.DomAttr>*>&amp;</name>
            <content>
                <baseType ref="type.8711988"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4202">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomAttr>, const UniquePtr&lt;System.Dom.DomAttr>&amp;, const UniquePtr&lt;System.Dom.DomAttr>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8711988"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711989">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomAttr>, const UniquePtr&lt;System.Dom.DomAttr>&amp;, const UniquePtr&lt;System.Dom.DomAttr>*>*</name>
            <content>
                <baseType ref="type.8711988"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8712135" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomElement>, UniquePtr&lt;System.Dom.DomElement>&amp;, UniquePtr&lt;System.Dom.DomElement>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8712109"/>
                <argumentType ref="type.8712111"/>
                <argumentType ref="type.8712110"/>
            </content>
        </type>
        <type derived="true" id="type.8712137">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomElement>, UniquePtr&lt;System.Dom.DomElement>&amp;, UniquePtr&lt;System.Dom.DomElement>*>&amp;</name>
            <content>
                <baseType ref="type.8712135"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712141">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomElement>, UniquePtr&lt;System.Dom.DomElement>&amp;, UniquePtr&lt;System.Dom.DomElement>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8712135"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712136">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomElement>, UniquePtr&lt;System.Dom.DomElement>&amp;, UniquePtr&lt;System.Dom.DomElement>*>*</name>
            <content>
                <baseType ref="type.8712135"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8712128" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomElement>, const UniquePtr&lt;System.Dom.DomElement>&amp;, const UniquePtr&lt;System.Dom.DomElement>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8712109"/>
                <argumentType ref="type.8712114"/>
                <argumentType ref="type.8712113"/>
            </content>
        </type>
        <type derived="true" id="type.8712130">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomElement>, const UniquePtr&lt;System.Dom.DomElement>&amp;, const UniquePtr&lt;System.Dom.DomElement>*>&amp;</name>
            <content>
                <baseType ref="type.8712128"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4204">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomElement>, const UniquePtr&lt;System.Dom.DomElement>&amp;, const UniquePtr&lt;System.Dom.DomElement>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8712128"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712129">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomElement>, const UniquePtr&lt;System.Dom.DomElement>&amp;, const UniquePtr&lt;System.Dom.DomElement>*>*</name>
            <content>
                <baseType ref="type.8712128"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8706979" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8706963"/>
                <argumentType ref="type.8706968"/>
                <argumentType ref="type.8706967"/>
            </content>
        </type>
        <type derived="true" id="type.4084">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8706979"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8707039" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8707023"/>
                <argumentType ref="type.8707028"/>
                <argumentType ref="type.8707027"/>
            </content>
        </type>
        <type derived="true" id="type.4085">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8707039"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8706878" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8706838"/>
                <argumentType ref="type.8706843"/>
                <argumentType ref="type.8706842"/>
            </content>
        </type>
        <type derived="true" id="type.4082">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8706878"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8706930" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8706917"/>
                <argumentType ref="type.8706922"/>
                <argumentType ref="type.8706921"/>
            </content>
        </type>
        <type derived="true" id="type.4083">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8706930"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8708648" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Context>, const UniquePtr&lt;System.Text.Parsing.Context>&amp;, const UniquePtr&lt;System.Text.Parsing.Context>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8708626"/>
                <argumentType ref="type.8708631"/>
                <argumentType ref="type.8708630"/>
            </content>
        </type>
        <type derived="true" id="type.4121">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Context>, const UniquePtr&lt;System.Text.Parsing.Context>&amp;, const UniquePtr&lt;System.Text.Parsing.Context>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8708648"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8708221" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Object>, const UniquePtr&lt;System.Text.Parsing.Object>&amp;, const UniquePtr&lt;System.Text.Parsing.Object>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8708199"/>
                <argumentType ref="type.8708204"/>
                <argumentType ref="type.8708203"/>
            </content>
        </type>
        <type derived="true" id="type.4094">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Object>, const UniquePtr&lt;System.Text.Parsing.Object>&amp;, const UniquePtr&lt;System.Text.Parsing.Object>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8708221"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8708906" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>, UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;, UniquePtr&lt;System.Text.Parsing.ParsingDomain>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8708886"/>
                <argumentType ref="type.8708888"/>
                <argumentType ref="type.8708887"/>
            </content>
        </type>
        <type derived="true" id="type.4130">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>, UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;, UniquePtr&lt;System.Text.Parsing.ParsingDomain>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8708906"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8708899" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>, const UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;, const UniquePtr&lt;System.Text.Parsing.ParsingDomain>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8708886"/>
                <argumentType ref="type.8708891"/>
                <argumentType ref="type.8708890"/>
            </content>
        </type>
        <type derived="true" id="type.4129">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>, const UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;, const UniquePtr&lt;System.Text.Parsing.ParsingDomain>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8708899"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8708190" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>, UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;, UniquePtr&lt;System.Text.Parsing.ParsingObject>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8708170"/>
                <argumentType ref="type.8708172"/>
                <argumentType ref="type.8708171"/>
            </content>
        </type>
        <type derived="true" id="type.4093">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>, UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;, UniquePtr&lt;System.Text.Parsing.ParsingObject>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8708190"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8708183" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>, const UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;, const UniquePtr&lt;System.Text.Parsing.ParsingObject>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8708170"/>
                <argumentType ref="type.8708175"/>
                <argumentType ref="type.8708174"/>
            </content>
        </type>
        <type derived="true" id="type.4092">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>, const UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;, const UniquePtr&lt;System.Text.Parsing.ParsingObject>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8708183"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8704977" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, UniquePtr&lt;System.Unicode.CharacterInfo>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8704957"/>
                <argumentType ref="type.8704959"/>
                <argumentType ref="type.8704958"/>
            </content>
        </type>
        <type derived="true" id="type.4055">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, UniquePtr&lt;System.Unicode.CharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704977"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8704970" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, const UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfo>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8704957"/>
                <argumentType ref="type.8704962"/>
                <argumentType ref="type.8704961"/>
            </content>
        </type>
        <type derived="true" id="type.4054">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, const UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704970"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8705073" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.CharacterInfoPage>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8705053"/>
                <argumentType ref="type.8705055"/>
                <argumentType ref="type.8705054"/>
            </content>
        </type>
        <type derived="true" id="type.4071">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.CharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8705073"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8705066" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, const UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfoPage>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8705053"/>
                <argumentType ref="type.8705058"/>
                <argumentType ref="type.8705057"/>
            </content>
        </type>
        <type derived="true" id="type.4070">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, const UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8705066"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8705005" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8704985"/>
                <argumentType ref="type.8704987"/>
                <argumentType ref="type.8704986"/>
            </content>
        </type>
        <type derived="true" id="type.4057">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8705005"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8704998" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8704985"/>
                <argumentType ref="type.8704990"/>
                <argumentType ref="type.8704989"/>
            </content>
        </type>
        <type derived="true" id="type.4056">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8704998"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8705108" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8705088"/>
                <argumentType ref="type.8705090"/>
                <argumentType ref="type.8705089"/>
            </content>
        </type>
        <type derived="true" id="type.4073">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8705108"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8705101" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8705088"/>
                <argumentType ref="type.8705093"/>
                <argumentType ref="type.8705092"/>
            </content>
        </type>
        <type derived="true" id="type.4072">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8705101"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8710797" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Xml.Entity>, UniquePtr&lt;System.Xml.Entity>&amp;, UniquePtr&lt;System.Xml.Entity>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8710774"/>
                <argumentType ref="type.8710776"/>
                <argumentType ref="type.8710775"/>
            </content>
        </type>
        <type derived="true" id="type.4189">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Xml.Entity>, UniquePtr&lt;System.Xml.Entity>&amp;, UniquePtr&lt;System.Xml.Entity>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8710797"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8710790" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Xml.Entity>, const UniquePtr&lt;System.Xml.Entity>&amp;, const UniquePtr&lt;System.Xml.Entity>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8710774"/>
                <argumentType ref="type.8710779"/>
                <argumentType ref="type.8710778"/>
            </content>
        </type>
        <type derived="true" id="type.4188">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Xml.Entity>, const UniquePtr&lt;System.Xml.Entity>&amp;, const UniquePtr&lt;System.Xml.Entity>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8710790"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8706599" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699067"/>
                <argumentType ref="type.8699088"/>
                <argumentType ref="type.8699087"/>
            </content>
        </type>
        <type id="type.8707824" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699067"/>
                <argumentType ref="type.8699088"/>
                <argumentType ref="type.8699087"/>
            </content>
        </type>
        <type id="type.8701696" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699067"/>
                <argumentType ref="type.8699088"/>
                <argumentType ref="type.8699087"/>
            </content>
        </type>
        <type id="type.8711412" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699067"/>
                <argumentType ref="type.8699088"/>
                <argumentType ref="type.8699087"/>
            </content>
        </type>
        <type id="type.8710198" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699067"/>
                <argumentType ref="type.8699088"/>
                <argumentType ref="type.8699087"/>
            </content>
        </type>
        <type id="type.8711412" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699067"/>
                <argumentType ref="type.8699088"/>
                <argumentType ref="type.8699087"/>
            </content>
        </type>
        <type id="type.3871" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699067"/>
                <argumentType ref="type.8699088"/>
                <argumentType ref="type.8699087"/>
            </content>
        </type>
        <type derived="true" id="type.3873">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <baseType ref="type.3871"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711414">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <baseType ref="type.8711412"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3878">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8701696"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4080">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8706599"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4090">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8707824"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3877">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.3871"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4195">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8711412"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4162">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8710198"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711413">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <baseType ref="type.8711412"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3872">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <baseType ref="type.3871"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711413">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <baseType ref="type.8711412"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8706470" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699076"/>
                <argumentType ref="type.8699115"/>
                <argumentType ref="type.8699114"/>
            </content>
        </type>
        <type id="type.8710069" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699076"/>
                <argumentType ref="type.8699115"/>
                <argumentType ref="type.8699114"/>
            </content>
        </type>
        <type id="type.3742" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699076"/>
                <argumentType ref="type.8699115"/>
                <argumentType ref="type.8699114"/>
            </content>
        </type>
        <type id="type.8711283" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699076"/>
                <argumentType ref="type.8699115"/>
                <argumentType ref="type.8699114"/>
            </content>
        </type>
        <type id="type.8707695" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699076"/>
                <argumentType ref="type.8699115"/>
                <argumentType ref="type.8699114"/>
            </content>
        </type>
        <type derived="true" id="type.8711285">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <baseType ref="type.8711283"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3744">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <baseType ref="type.3742"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711285">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <baseType ref="type.8711283"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4158">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8710069"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4076">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8706470"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4086">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8707695"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3748">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;&amp;</name>
            <content>
                <baseType ref="type.3742"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4191">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8711283"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711284">
            <name>RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <baseType ref="type.8711283"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3743">
            <name>RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <baseType ref="type.3742"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8700310" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699078"/>
                <argumentType ref="type.8699121"/>
                <argumentType ref="type.8699120"/>
            </content>
        </type>
        <type id="type.8710088" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699078"/>
                <argumentType ref="type.8699121"/>
                <argumentType ref="type.8699120"/>
            </content>
        </type>
        <type id="type.8711302" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699078"/>
                <argumentType ref="type.8699121"/>
                <argumentType ref="type.8699120"/>
            </content>
        </type>
        <type id="type.3761" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699078"/>
                <argumentType ref="type.8699121"/>
                <argumentType ref="type.8699120"/>
            </content>
        </type>
        <type id="type.8707714" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699078"/>
                <argumentType ref="type.8699121"/>
                <argumentType ref="type.8699120"/>
            </content>
        </type>
        <type id="type.8706489" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699078"/>
                <argumentType ref="type.8699121"/>
                <argumentType ref="type.8699120"/>
            </content>
        </type>
        <type derived="true" id="type.8711304">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <baseType ref="type.8711302"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3763">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <baseType ref="type.3761"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3770">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8700310"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4193">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8711302"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4160">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8710088"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4078">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8706489"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3767">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.3761"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4088">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8707714"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711303">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <baseType ref="type.8711302"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3762">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <baseType ref="type.3761"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8705022" specialization="true">
            <name>RandomAccessIter&lt;uint, const uint&amp;, const uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699071"/>
                <argumentType ref="type.8705019"/>
                <argumentType ref="type.8705020"/>
            </content>
        </type>
        <type derived="true" id="type.4058">
            <name>RandomAccessIter&lt;uint, const uint&amp;, const uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8705022"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8710387" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699071"/>
                <argumentType ref="type.8699100"/>
                <argumentType ref="type.8699099"/>
            </content>
        </type>
        <type id="type.8711601" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699071"/>
                <argumentType ref="type.8699100"/>
                <argumentType ref="type.8699099"/>
            </content>
        </type>
        <type id="type.8705029" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699071"/>
                <argumentType ref="type.8699100"/>
                <argumentType ref="type.8699099"/>
            </content>
        </type>
        <type id="type.4059" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699071"/>
                <argumentType ref="type.8699100"/>
                <argumentType ref="type.8699099"/>
            </content>
        </type>
        <type id="type.8708013" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699071"/>
                <argumentType ref="type.8699100"/>
                <argumentType ref="type.8699099"/>
            </content>
        </type>
        <type id="type.8711601" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699071"/>
                <argumentType ref="type.8699100"/>
                <argumentType ref="type.8699099"/>
            </content>
        </type>
        <type id="type.8706788" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699071"/>
                <argumentType ref="type.8699100"/>
                <argumentType ref="type.8699099"/>
            </content>
        </type>
        <type derived="true" id="type.8711603">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <baseType ref="type.8711601"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4061">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <baseType ref="type.4059"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4196">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8711601"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4163">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8710387"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4091">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8708013"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4065">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4059"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4066">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8705029"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4081">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8706788"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711602">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <baseType ref="type.8711601"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4060">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <baseType ref="type.4059"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8700353" specialization="true">
            <name>RandomAccessIter&lt;ulong, const ulong&amp;, const ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699073"/>
                <argumentType ref="type.8700350"/>
                <argumentType ref="type.8700351"/>
            </content>
        </type>
        <type derived="true" id="type.3771">
            <name>RandomAccessIter&lt;ulong, const ulong&amp;, const ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8700353"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8706500" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699073"/>
                <argumentType ref="type.8699106"/>
                <argumentType ref="type.8699105"/>
            </content>
        </type>
        <type id="type.8711313" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699073"/>
                <argumentType ref="type.8699106"/>
                <argumentType ref="type.8699105"/>
            </content>
        </type>
        <type id="type.8707725" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699073"/>
                <argumentType ref="type.8699106"/>
                <argumentType ref="type.8699105"/>
            </content>
        </type>
        <type id="type.8700360" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699073"/>
                <argumentType ref="type.8699106"/>
                <argumentType ref="type.8699105"/>
            </content>
        </type>
        <type id="type.8710099" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699073"/>
                <argumentType ref="type.8699106"/>
                <argumentType ref="type.8699105"/>
            </content>
        </type>
        <type id="type.3772" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699073"/>
                <argumentType ref="type.8699106"/>
                <argumentType ref="type.8699105"/>
            </content>
        </type>
        <type id="type.8711313" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699073"/>
                <argumentType ref="type.8699106"/>
                <argumentType ref="type.8699105"/>
            </content>
        </type>
        <type derived="true" id="type.3774">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <baseType ref="type.3772"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711315">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <baseType ref="type.8711313"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4089">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8707725"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4079">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8706500"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3778">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.3772"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4194">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8711313"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4161">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8710099"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3779">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8700360"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3773">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <baseType ref="type.3772"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711314">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <baseType ref="type.8711313"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8707704" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699077"/>
                <argumentType ref="type.8699118"/>
                <argumentType ref="type.8699117"/>
            </content>
        </type>
        <type id="type.8706479" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699077"/>
                <argumentType ref="type.8699118"/>
                <argumentType ref="type.8699117"/>
            </content>
        </type>
        <type id="type.8711292" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699077"/>
                <argumentType ref="type.8699118"/>
                <argumentType ref="type.8699117"/>
            </content>
        </type>
        <type id="type.8710078" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699077"/>
                <argumentType ref="type.8699118"/>
                <argumentType ref="type.8699117"/>
            </content>
        </type>
        <type id="type.3751" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699077"/>
                <argumentType ref="type.8699118"/>
                <argumentType ref="type.8699117"/>
            </content>
        </type>
        <type id="type.8710078" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699077"/>
                <argumentType ref="type.8699118"/>
                <argumentType ref="type.8699117"/>
            </content>
        </type>
        <type id="type.8700265" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.8699077"/>
                <argumentType ref="type.8699118"/>
                <argumentType ref="type.8699117"/>
            </content>
        </type>
        <type derived="true" id="type.3753">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <baseType ref="type.3751"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711294">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <baseType ref="type.8711292"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4077">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8706479"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4087">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8707704"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4159">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8710078"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3760">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8700265"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3757">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.3751"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4192">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8711292"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3752">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <baseType ref="type.3751"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711293">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <baseType ref="type.8711292"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047" specialization="true">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare></name>
            <content>
                <primaryType ref="class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <argumentType ref="8699750"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <argumentType ref="8699752"/>
            </content>
        </type>
        <type derived="true" id="type.3868">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2" specialization="true">
            <name>RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare></name>
            <content>
                <primaryType ref="class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <argumentType ref="8699829"/>
                <argumentType ref="8699830"/>
                <argumentType ref="8699831"/>
                <argumentType ref="8699832"/>
            </content>
        </type>
        <type derived="true" id="type.3910">
            <name>RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8712029" specialization="true">
            <name>RedBlackTree&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomAttr*>, SelectFirst&lt;String&lt;uchar>, DomAttr*>, Less&lt;String&lt;uchar>>></name>
            <content>
                <primaryType ref="class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <argumentType ref="type.8700294"/>
                <argumentType ref="type.8712015"/>
                <argumentType ref="type.8712019"/>
                <argumentType ref="type.8712003"/>
            </content>
        </type>
        <type derived="true" id="type.8712031">
            <name>RedBlackTree&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomAttr*>, SelectFirst&lt;String&lt;uchar>, DomAttr*>, Less&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <baseType ref="type.8712029"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712057">
            <name>RedBlackTree&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomAttr*>, SelectFirst&lt;String&lt;uchar>, DomAttr*>, Less&lt;String&lt;uchar>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8712029"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712030">
            <name>RedBlackTree&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomAttr*>, SelectFirst&lt;String&lt;uchar>, DomAttr*>, Less&lt;String&lt;uchar>>>*</name>
            <content>
                <baseType ref="type.8712029"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTree_T_T_Identity_T_C_BC4C30A5A170B2B4B4BF9109198D17D5A1BD03D3" specialization="true">
            <name>RedBlackTree&lt;T, T, Identity&lt;T>, C></name>
            <content>
                <primaryType ref="class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <argumentType ref="8699835"/>
                <argumentType ref="8699835"/>
                <argumentType ref="type.class_Identity_T_9DD2E12D3D49B8316EA22259EDBD89C3FE6A1C09"/>
                <argumentType ref="8699836"/>
            </content>
        </type>
        <type derived="true" id="type.3915">
            <name>RedBlackTree&lt;T, T, Identity&lt;T>, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_T_T_Identity_T_C_BC4C30A5A170B2B4B4BF9109198D17D5A1BD03D3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8712043" specialization="true">
            <name>RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, DomAttr*>></name>
            <content>
                <primaryType ref="class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
                <argumentType ref="type.8712015"/>
            </content>
        </type>
        <type derived="true" id="type.8712045">
            <name>RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, DomAttr*>>&amp;</name>
            <content>
                <baseType ref="type.8712043"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712044">
            <name>RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, DomAttr*>>*</name>
            <content>
                <baseType ref="type.8712043"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712211">
            <name>RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, DomAttr*>>*&amp;</name>
            <content>
                <baseType ref="type.8712043"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712212">
            <name>RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, DomAttr*>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.8712043"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712210">
            <name>RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, DomAttr*>>**</name>
            <content>
                <baseType ref="type.8712043"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711146">
            <name>RedBlackTreeNodeBase&amp;</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3731">
            <name>RedBlackTreeNodeBase&amp;</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4220">
            <name>RedBlackTreeNodeBase&amp;&amp;</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711145">
            <name>RedBlackTreeNodeBase*</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3730">
            <name>RedBlackTreeNodeBase*</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711145">
            <name>RedBlackTreeNodeBase*</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8701660" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.8701621"/>
                <argumentType ref="type.8701620"/>
            </content>
        </type>
        <type derived="true" id="type.3867">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8701660"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8701642" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.8701631"/>
                <argumentType ref="type.8701640"/>
            </content>
        </type>
        <type derived="true" id="type.3866">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8701642"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8712050" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, DomAttr*>, Pair&lt;String&lt;uchar>, DomAttr*>&amp;, Pair&lt;String&lt;uchar>, DomAttr*>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.8712015"/>
                <argumentType ref="type.8712017"/>
                <argumentType ref="type.8712016"/>
            </content>
        </type>
        <type derived="true" id="type.8712052">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, DomAttr*>, Pair&lt;String&lt;uchar>, DomAttr*>&amp;, Pair&lt;String&lt;uchar>, DomAttr*>*>&amp;</name>
            <content>
                <baseType ref="type.8712050"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712056">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, DomAttr*>, Pair&lt;String&lt;uchar>, DomAttr*>&amp;, Pair&lt;String&lt;uchar>, DomAttr*>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8712050"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712051">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, DomAttr*>, Pair&lt;String&lt;uchar>, DomAttr*>&amp;, Pair&lt;String&lt;uchar>, DomAttr*>*>*</name>
            <content>
                <baseType ref="type.8712050"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8712037" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, DomAttr*>, const Pair&lt;String&lt;uchar>, DomAttr*>&amp;, const Pair&lt;String&lt;uchar>, DomAttr*>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.8712015"/>
                <argumentType ref="type.8712026"/>
                <argumentType ref="type.8712035"/>
            </content>
        </type>
        <type derived="true" id="type.8712039">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, DomAttr*>, const Pair&lt;String&lt;uchar>, DomAttr*>&amp;, const Pair&lt;String&lt;uchar>, DomAttr*>*>&amp;</name>
            <content>
                <baseType ref="type.8712037"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712049">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, DomAttr*>, const Pair&lt;String&lt;uchar>, DomAttr*>&amp;, const Pair&lt;String&lt;uchar>, DomAttr*>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8712037"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712038">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, DomAttr*>, const Pair&lt;String&lt;uchar>, DomAttr*>&amp;, const Pair&lt;String&lt;uchar>, DomAttr*>*>*</name>
            <content>
                <baseType ref="type.8712037"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, R, P></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="8699825"/>
                <argumentType ref="8699826"/>
                <argumentType ref="8699827"/>
            </content>
        </type>
        <type derived="true" id="type.3906">
            <name>RedBlackTreeNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3907">
            <name>RedBlackTreeNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="8699839"/>
                <argumentType ref="type.8702086"/>
                <argumentType ref="type.8702088"/>
            </content>
        </type>
        <type derived="true" id="type.3918">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3920">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3914">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="8699839"/>
                <argumentType ref="type.8702063"/>
                <argumentType ref="type.8702072"/>
            </content>
        </type>
        <type derived="true" id="type.3913">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3917">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3919">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_R_ValueType_P_A72EE6DFD58F3068E8C768CB16BF71716048A80D" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="8699830"/>
                <argumentType ref="type.8701913"/>
                <argumentType ref="type.8701915"/>
            </content>
        </type>
        <type derived="true" id="type.3909">
            <name>RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_R_ValueType_P_A72EE6DFD58F3068E8C768CB16BF71716048A80D"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_C_R_ValueType_C_P_62C8FF5559EB06AAFEDF99196CE7BD850F471D11" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="8699830"/>
                <argumentType ref="type.8701898"/>
                <argumentType ref="type.8701899"/>
            </content>
        </type>
        <type derived="true" id="type.3908">
            <name>RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_C_R_ValueType_C_P_62C8FF5559EB06AAFEDF99196CE7BD850F471D11"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4288">
            <name>ReturnStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_ReturnStatement_FEC70A987D7361EC167E7C772D29550ABF5D7750"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4318">
            <name>RvalueRef&amp;&amp;</name>
            <content>
                <baseType ref="class_RvalueRef_5B7EBD5222D9942C4FCD5811F21EE1285E406229"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8712019" specialization="true">
            <name>SelectFirst&lt;String&lt;uchar>, DomAttr*></name>
            <content>
                <primaryType ref="class_SelectFirst_T_U_5C7DFA11E2AE3BB651846960A70B00A231DD5282"/>
                <argumentType ref="type.8700294"/>
                <argumentType ref="type.8711236"/>
            </content>
        </type>
        <type derived="true" id="type.8712028">
            <name>SelectFirst&lt;String&lt;uchar>, DomAttr*>&amp;</name>
            <content>
                <baseType ref="type.8712019"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712205">
            <name>SelectFirst&lt;String&lt;uchar>, DomAttr*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8712019"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712027">
            <name>SelectFirst&lt;String&lt;uchar>, DomAttr*>*</name>
            <content>
                <baseType ref="type.8712019"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712223">
            <name>SelectFirst&lt;String&lt;uchar>, DomAttr*>*&amp;</name>
            <content>
                <baseType ref="type.8712019"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712222">
            <name>SelectFirst&lt;String&lt;uchar>, DomAttr*>**</name>
            <content>
                <baseType ref="type.8712019"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8711902" specialization="true">
            <name>SelectFirst&lt;String&lt;uchar>, DomElement*></name>
            <content>
                <primaryType ref="class_SelectFirst_T_U_5C7DFA11E2AE3BB651846960A70B00A231DD5282"/>
                <argumentType ref="type.8700294"/>
                <argumentType ref="type.8711242"/>
            </content>
        </type>
        <type derived="true" id="type.8711911">
            <name>SelectFirst&lt;String&lt;uchar>, DomElement*>&amp;</name>
            <content>
                <baseType ref="type.8711902"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712154">
            <name>SelectFirst&lt;String&lt;uchar>, DomElement*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8711902"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711910">
            <name>SelectFirst&lt;String&lt;uchar>, DomElement*>*</name>
            <content>
                <baseType ref="type.8711902"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712172">
            <name>SelectFirst&lt;String&lt;uchar>, DomElement*>*&amp;</name>
            <content>
                <baseType ref="type.8711902"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712171">
            <name>SelectFirst&lt;String&lt;uchar>, DomElement*>**</name>
            <content>
                <baseType ref="type.8711902"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076" specialization="true">
            <name>SharedCount&lt;T></name>
            <content>
                <primaryType ref="class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <argumentType ref="8699850"/>
            </content>
        </type>
        <type derived="true" id="type.3927">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3937">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3943">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3965">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3959">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F" specialization="true">
            <name>SharedPtr&lt;T></name>
            <content>
                <primaryType ref="class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <argumentType ref="8699860"/>
            </content>
        </type>
        <type derived="true" id="type.3967">
            <name>SharedPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3960">
            <name>SharedPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3945">
            <name>SharedPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4270">
            <name>SizeOf&amp;&amp;</name>
            <content>
                <baseType ref="class_SizeOf_7E82BCAA3BF507459413C346B576D53CFCE5288B"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8712116" specialization="true">
            <name>Stack&lt;UniquePtr&lt;System.Dom.DomElement>></name>
            <content>
                <primaryType ref="class_Stack_T_44313E678C6CD0E8DB3743953B65AA105D55A963"/>
                <argumentType ref="type.8712109"/>
            </content>
        </type>
        <type derived="true" id="type.8712121">
            <name>Stack&lt;UniquePtr&lt;System.Dom.DomElement>>&amp;</name>
            <content>
                <baseType ref="type.8712116"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712120">
            <name>Stack&lt;UniquePtr&lt;System.Dom.DomElement>>*</name>
            <content>
                <baseType ref="type.8712116"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4285">
            <name>Statement&amp;&amp;</name>
            <content>
                <baseType ref="class_Statement_4ACF6167B3C915EDAAFD3A91F4749E778C15A0C0"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4207">
            <name>StaticInitCriticalSection&amp;&amp;</name>
            <content>
                <baseType ref="class_StaticInitCriticalSection_39AB37625C7D8624475080E487A05114E48A9C6C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC" specialization="true">
            <name>String&lt;CharT></name>
            <content>
                <primaryType ref="class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="8699896"/>
            </content>
        </type>
        <type derived="true" id="type.3979">
            <name>String&lt;CharT>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8700294" specialization="true">
            <name>String&lt;uchar></name>
            <content>
                <primaryType ref="class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.8699078"/>
            </content>
        </type>
        <type derived="true" id="type.8700296">
            <name>String&lt;uchar>&amp;</name>
            <content>
                <baseType ref="type.8700294"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700295">
            <name>String&lt;uchar>*</name>
            <content>
                <baseType ref="type.8700294"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8709152">
            <name>String&lt;uchar>*&amp;</name>
            <content>
                <baseType ref="type.8700294"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8709263">
            <name>String&lt;uchar>**</name>
            <content>
                <baseType ref="type.8700294"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4303">
            <name>SwitchStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_SwitchStatement_18D2C0BB3BA2134D050B02EA375A462847662B6E"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3903">
            <name>T&amp;</name>
            <content>
                <baseType ref="8699820"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3831">
            <name>T&amp;</name>
            <content>
                <baseType ref="8699694"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3905">
            <name>T&amp;</name>
            <content>
                <baseType ref="8699822"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3853">
            <name>T&amp;</name>
            <content>
                <baseType ref="8699730"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3845">
            <name>T&amp;</name>
            <content>
                <baseType ref="8699713"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3781">
            <name>T&amp;</name>
            <content>
                <baseType ref="8699602"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3783">
            <name>T&amp;</name>
            <content>
                <baseType ref="8699604"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3843">
            <name>T&amp;</name>
            <content>
                <baseType ref="8699711"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3891">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="8699789"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3859">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="8699743"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3973">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="8699873"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4281">
            <name>TemplateId&amp;&amp;</name>
            <content>
                <baseType ref="class_TemplateId_41C40DA2459C0E10492E8021082B1BF0421C15E5"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4309">
            <name>ThrowStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_ThrowStatement_6216EF486931E535CE6CDEE33F4D2E7A53BE76B7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4337">
            <name>TokenParser&amp;&amp;</name>
            <content>
                <baseType ref="class_TokenParser_319753BA62AEDA94D46A4D47AEE13AEC1B1F3B72"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4312">
            <name>TryStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_TryStatement_1132D26D95ED5027A0CFA7B5E46039A7A645EE96"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4233">
            <name>Type&amp;&amp;</name>
            <content>
                <baseType ref="class_Type_8616C506F1B48B10568C6F4144C4A41FFB320CF3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4273">
            <name>TypeName&amp;&amp;</name>
            <content>
                <baseType ref="class_TypeName_BB4524B12FF73AADA611653B9DE399FFFCEC3BEB"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8712023" specialization="true">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, DomAttr*>, String&lt;uchar>></name>
            <content>
                <primaryType ref="class_UnaryFun_Argument_Result_40A5782E1C44E354DC2704648D2CE25C6A226646"/>
                <argumentType ref="type.8712015"/>
                <argumentType ref="type.8700294"/>
            </content>
        </type>
        <type derived="true" id="type.8712025">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, DomAttr*>, String&lt;uchar>>&amp;</name>
            <content>
                <baseType ref="type.8712023"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712206">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, DomAttr*>, String&lt;uchar>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8712023"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712024">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, DomAttr*>, String&lt;uchar>>*</name>
            <content>
                <baseType ref="type.8712023"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8711906" specialization="true">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, DomElement*>, String&lt;uchar>></name>
            <content>
                <primaryType ref="class_UnaryFun_Argument_Result_40A5782E1C44E354DC2704648D2CE25C6A226646"/>
                <argumentType ref="type.8711898"/>
                <argumentType ref="type.8700294"/>
            </content>
        </type>
        <type derived="true" id="type.8711908">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, DomElement*>, String&lt;uchar>>&amp;</name>
            <content>
                <baseType ref="type.8711906"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712155">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, DomElement*>, String&lt;uchar>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8711906"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711907">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, DomElement*>, String&lt;uchar>>*</name>
            <content>
                <baseType ref="type.8711906"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4255">
            <name>UnaryMinus&amp;&amp;</name>
            <content>
                <baseType ref="class_UnaryMinus_04009179AAFCB4DEE000972E675D4198E1AF838F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4252">
            <name>UnaryPlus&amp;&amp;</name>
            <content>
                <baseType ref="class_UnaryPlus_65EA8B4AEC38C5A830F0C46A73800A840EFCF9C2"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8701671" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.8701648"/>
            </content>
        </type>
        <type derived="true" id="type.3869">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8701671"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8712061" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, DomAttr*>>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.8712043"/>
            </content>
        </type>
        <type derived="true" id="type.8712063">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, DomAttr*>>>&amp;</name>
            <content>
                <baseType ref="type.8712061"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712067">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, DomAttr*>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8712061"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712062">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, DomAttr*>>>*</name>
            <content>
                <baseType ref="type.8712061"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8701986" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
            </content>
        </type>
        <type derived="true" id="type.3916">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8701986"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8701928" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;ValueType>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.class_RedBlackTreeNode_ValueType_38B50DA62919A6E728F70DA36817024C5A9A8855"/>
            </content>
        </type>
        <type derived="true" id="type.3912">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;ValueType>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8701928"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8711975" specialization="true">
            <name>UniquePtr&lt;System.Dom.DomAttr></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_DomAttr_9E6E1B42DF1CBDED3278FE00CE0A15F354369845"/>
            </content>
        </type>
        <type derived="true" id="type.8711977">
            <name>UniquePtr&lt;System.Dom.DomAttr>&amp;</name>
            <content>
                <baseType ref="type.8711975"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711981">
            <name>UniquePtr&lt;System.Dom.DomAttr>&amp;&amp;</name>
            <content>
                <baseType ref="type.8711975"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711976">
            <name>UniquePtr&lt;System.Dom.DomAttr>*</name>
            <content>
                <baseType ref="type.8711975"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712199">
            <name>UniquePtr&lt;System.Dom.DomAttr>*&amp;</name>
            <content>
                <baseType ref="type.8711975"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712200">
            <name>UniquePtr&lt;System.Dom.DomAttr>*&amp;&amp;</name>
            <content>
                <baseType ref="type.8711975"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712198">
            <name>UniquePtr&lt;System.Dom.DomAttr>**</name>
            <content>
                <baseType ref="type.8711975"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8712102" specialization="true">
            <name>UniquePtr&lt;System.Dom.DomDocument></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_DomDocument_975632F3AA8CF3FEC1D51FB0E91F580D6EBA16C8"/>
            </content>
        </type>
        <type derived="true" id="type.8712104">
            <name>UniquePtr&lt;System.Dom.DomDocument>&amp;</name>
            <content>
                <baseType ref="type.8712102"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712108">
            <name>UniquePtr&lt;System.Dom.DomDocument>&amp;&amp;</name>
            <content>
                <baseType ref="type.8712102"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712103">
            <name>UniquePtr&lt;System.Dom.DomDocument>*</name>
            <content>
                <baseType ref="type.8712102"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8712109" specialization="true">
            <name>UniquePtr&lt;System.Dom.DomElement></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_DomElement_2F019E5CBBCF1F9C65CE734BA20F69BEFDC19B3B"/>
            </content>
        </type>
        <type derived="true" id="type.8712111">
            <name>UniquePtr&lt;System.Dom.DomElement>&amp;</name>
            <content>
                <baseType ref="type.8712109"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712115">
            <name>UniquePtr&lt;System.Dom.DomElement>&amp;&amp;</name>
            <content>
                <baseType ref="type.8712109"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712110">
            <name>UniquePtr&lt;System.Dom.DomElement>*</name>
            <content>
                <baseType ref="type.8712109"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712271">
            <name>UniquePtr&lt;System.Dom.DomElement>*&amp;</name>
            <content>
                <baseType ref="type.8712109"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712272">
            <name>UniquePtr&lt;System.Dom.DomElement>*&amp;&amp;</name>
            <content>
                <baseType ref="type.8712109"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712270">
            <name>UniquePtr&lt;System.Dom.DomElement>**</name>
            <content>
                <baseType ref="type.8712109"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8711878" specialization="true">
            <name>UniquePtr&lt;System.Dom.DomNode></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509"/>
            </content>
        </type>
        <type derived="true" id="type.8711880">
            <name>UniquePtr&lt;System.Dom.DomNode>&amp;</name>
            <content>
                <baseType ref="type.8711878"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711884">
            <name>UniquePtr&lt;System.Dom.DomNode>&amp;&amp;</name>
            <content>
                <baseType ref="type.8711878"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711879">
            <name>UniquePtr&lt;System.Dom.DomNode>*</name>
            <content>
                <baseType ref="type.8711878"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.8705182" specialization="true">
            <name>UniquePtr&lt;System.Exception></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_Exception_02AEA5204AD1035A91C2D843597EACBE078C8989"/>
            </content>
        </type>
        <type derived="true" id="type.4075">
            <name>UniquePtr&lt;System.Exception>&amp;&amp;</name>
            <content>
                <baseType ref="type.8705182"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8709156" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.ExpectationFailure></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_ExpectationFailure_EBDBB0FC1DDED5BE7E15008622BB34AFCA7E9A8C"/>
            </content>
        </type>
        <type derived="true" id="type.4138">
            <name>UniquePtr&lt;System.Text.Parsing.ExpectationFailure>&amp;&amp;</name>
            <content>
                <baseType ref="type.8709156"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8708360" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingData></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_ParsingData_9F05BA66DA13D9A55E1E7FF50B19E250484C3A7B"/>
            </content>
        </type>
        <type derived="true" id="type.4097">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingData>&amp;&amp;</name>
            <content>
                <baseType ref="type.8708360"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8709282" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingException></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_ParsingException_71361E1F1BFEB5E7F55F5F6E472A696283973396"/>
            </content>
        </type>
        <type derived="true" id="type.4139">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingException>&amp;&amp;</name>
            <content>
                <baseType ref="type.8709282"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8708367" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.XmlLog></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_XmlLog_8F1C6843100321A56502C0710D6A400B6E4C7704"/>
            </content>
        </type>
        <type derived="true" id="type.4098">
            <name>UniquePtr&lt;System.Text.Parsing.XmlLog>&amp;&amp;</name>
            <content>
                <baseType ref="type.8708367"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009" specialization="true">
            <name>UniquePtr&lt;T></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="8700104"/>
            </content>
        </type>
        <type derived="true" id="type.4074">
            <name>UniquePtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3870">
            <name>Value&amp;</name>
            <content>
                <baseType ref="8699751"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type id="type.8709657" specialization="true">
            <name>ValueObject&lt;String&lt;uchar>></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.8700294"/>
            </content>
        </type>
        <type derived="true" id="type.4156">
            <name>ValueObject&lt;String&lt;uchar>>&amp;&amp;</name>
            <content>
                <baseType ref="type.8709657"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79" specialization="true">
            <name>ValueObject&lt;ValueType></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="8707286"/>
            </content>
        </type>
        <type derived="true" id="type.4120">
            <name>ValueObject&lt;ValueType>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8710827" specialization="true">
            <name>ValueObject&lt;XmlProcessor*></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.8710062"/>
            </content>
        </type>
        <type derived="true" id="type.4190">
            <name>ValueObject&lt;XmlProcessor*>&amp;&amp;</name>
            <content>
                <baseType ref="type.8710827"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8709645" specialization="true">
            <name>ValueObject&lt;bool></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.8699065"/>
            </content>
        </type>
        <type derived="true" id="type.4155">
            <name>ValueObject&lt;bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.8709645"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8709482" specialization="true">
            <name>ValueObject&lt;byte></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.8699067"/>
            </content>
        </type>
        <type derived="true" id="type.4142">
            <name>ValueObject&lt;byte>&amp;&amp;</name>
            <content>
                <baseType ref="type.8709482"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8709621" specialization="true">
            <name>ValueObject&lt;double></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.8699075"/>
            </content>
        </type>
        <type derived="true" id="type.4154">
            <name>ValueObject&lt;double>&amp;&amp;</name>
            <content>
                <baseType ref="type.8709621"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8709607" specialization="true">
            <name>ValueObject&lt;float></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.8699074"/>
            </content>
        </type>
        <type derived="true" id="type.4152">
            <name>ValueObject&lt;float>&amp;&amp;</name>
            <content>
                <baseType ref="type.8709607"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8709523" specialization="true">
            <name>ValueObject&lt;int></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.8699070"/>
            </content>
        </type>
        <type derived="true" id="type.4147">
            <name>ValueObject&lt;int>&amp;&amp;</name>
            <content>
                <baseType ref="type.8709523"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8709548" specialization="true">
            <name>ValueObject&lt;long></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.8699072"/>
            </content>
        </type>
        <type derived="true" id="type.4149">
            <name>ValueObject&lt;long>&amp;&amp;</name>
            <content>
                <baseType ref="type.8709548"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8709465" specialization="true">
            <name>ValueObject&lt;sbyte></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.8699066"/>
            </content>
        </type>
        <type derived="true" id="type.4141">
            <name>ValueObject&lt;sbyte>&amp;&amp;</name>
            <content>
                <baseType ref="type.8709465"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8709495" specialization="true">
            <name>ValueObject&lt;short></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.8699068"/>
            </content>
        </type>
        <type derived="true" id="type.4144">
            <name>ValueObject&lt;short>&amp;&amp;</name>
            <content>
                <baseType ref="type.8709495"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8709674" specialization="true">
            <name>ValueObject&lt;uchar></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.8699078"/>
            </content>
        </type>
        <type derived="true" id="type.4157">
            <name>ValueObject&lt;uchar>&amp;&amp;</name>
            <content>
                <baseType ref="type.8709674"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8709535" specialization="true">
            <name>ValueObject&lt;uint></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.8699071"/>
            </content>
        </type>
        <type derived="true" id="type.4148">
            <name>ValueObject&lt;uint>&amp;&amp;</name>
            <content>
                <baseType ref="type.8709535"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8709560" specialization="true">
            <name>ValueObject&lt;ulong></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.8699073"/>
            </content>
        </type>
        <type derived="true" id="type.4150">
            <name>ValueObject&lt;ulong>&amp;&amp;</name>
            <content>
                <baseType ref="type.8709560"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8709509" specialization="true">
            <name>ValueObject&lt;ushort></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.8699069"/>
            </content>
        </type>
        <type derived="true" id="type.4146">
            <name>ValueObject&lt;ushort>&amp;&amp;</name>
            <content>
                <baseType ref="type.8709509"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_Visitor_9325C9B633E34A075869657A28EB269260004DBC">
            <name>Visitor</name>
        </type>
        <type derived="true" id="type.8711271">
            <name>Visitor&amp;</name>
            <content>
                <baseType ref="class_Visitor_9325C9B633E34A075869657A28EB269260004DBC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711270">
            <name>Visitor*</name>
            <content>
                <baseType ref="class_Visitor_9325C9B633E34A075869657A28EB269260004DBC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F" specialization="true">
            <name>WeakCount&lt;T></name>
            <content>
                <primaryType ref="class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <argumentType ref="8699866"/>
            </content>
        </type>
        <type derived="true" id="type.3944">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3928">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3936">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3958">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3966">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.8700196" specialization="true">
            <name>WeakPtr&lt;System.IO.ByteStream></name>
            <content>
                <primaryType ref="class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <argumentType ref="class_ByteStream_3B7A2F3379612ADBD7E416487752A1935AA8B96F"/>
            </content>
        </type>
        <type derived="true" id="type.3741">
            <name>WeakPtr&lt;System.IO.ByteStream>&amp;&amp;</name>
            <content>
                <baseType ref="type.8700196"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC" specialization="true">
            <name>WeakPtr&lt;T></name>
            <content>
                <primaryType ref="class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <argumentType ref="8699864"/>
            </content>
        </type>
        <type derived="true" id="type.3968">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3948">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3946">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3961">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3952">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3950">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3971">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_WeakPtr_U_DC1FE0F847E4C954B399A783A0BC0307D485B021" specialization="true">
            <name>WeakPtr&lt;U></name>
            <content>
                <primaryType ref="class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <argumentType ref="8699863"/>
            </content>
        </type>
        <type derived="true" id="type.3954">
            <name>WeakPtr&lt;U>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_U_DC1FE0F847E4C954B399A783A0BC0307D485B021"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4345">
            <name>XmlGrammar&amp;&amp;</name>
            <content>
                <baseType ref="class_XmlGrammar_514387B50789C8E470155317F17349CFC3DF6E94"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type basic="true" id="type.8699065">
            <name>bool</name>
        </type>
        <type basic="true" id="type.8699067">
            <name>byte</name>
        </type>
        <type derived="true" id="type.8699088">
            <name>byte&amp;</name>
            <content>
                <baseType ref="type.8699067"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699087">
            <name>byte*</name>
            <content>
                <baseType ref="type.8699067"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.8699076">
            <name>char</name>
        </type>
        <type derived="true" id="type.8699115">
            <name>char&amp;</name>
            <content>
                <baseType ref="type.8699076"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699114">
            <name>char*</name>
            <content>
                <baseType ref="type.8699076"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4241">
            <name>const AddressOf</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_AddressOf_F9F594A9680E5BE9D427D963284931AEB8E52492"/>
            </content>
        </type>
        <type derived="true" id="type.4242">
            <name>const AddressOf&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_AddressOf_F9F594A9680E5BE9D427D963284931AEB8E52492"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4313">
            <name>const AssertStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_AssertStatement_D3CF5F3C391681B790B0E9E570953DA4FA666696"/>
            </content>
        </type>
        <type derived="true" id="type.4314">
            <name>const AssertStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_AssertStatement_D3CF5F3C391681B790B0E9E570953DA4FA666696"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8709749">
            <name>const Attributes&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Attributes_C4B2B129CAB6BB03A5BC75E44A8C3E96E227069A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4208">
            <name>const BinaryReader</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BinaryReader_7D0A41A9C666814155001B1AF5B066E926C8F3AC"/>
            </content>
        </type>
        <type derived="true" id="type.4209">
            <name>const BinaryReader&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BinaryReader_7D0A41A9C666814155001B1AF5B066E926C8F3AC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4210">
            <name>const BinaryWriter</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BinaryWriter_6D47712E9CF8C098A17FFF3729140EE727BD87E2"/>
            </content>
        </type>
        <type derived="true" id="type.4211">
            <name>const BinaryWriter&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BinaryWriter_6D47712E9CF8C098A17FFF3729140EE727BD87E2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711927">
            <name>const Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711924"/>
            </content>
        </type>
        <type derived="true" id="type.8711929">
            <name>const Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711924"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711928">
            <name>const Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711924"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711948">
            <name>const Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711924"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711949">
            <name>const Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711924"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4212">
            <name>const BufferedByteStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BufferedByteStream_E74639F265FCFA3F7A3E61DE9D92C703A46FD573"/>
            </content>
        </type>
        <type derived="true" id="type.4349">
            <name>const BuildIndexVisitor</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BuildIndexVisitor_2A216A2E67DE23C4749113C859D07166BA8E981B"/>
            </content>
        </type>
        <type derived="true" id="type.4350">
            <name>const BuildIndexVisitor&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BuildIndexVisitor_2A216A2E67DE23C4749113C859D07166BA8E981B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4213">
            <name>const ByteStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ByteStream_3B7A2F3379612ADBD7E416487752A1935AA8B96F"/>
            </content>
        </type>
        <type derived="true" id="type.4320">
            <name>const CodeExpandingVisitor</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_CodeExpandingVisitor_2D824580300CDC92F6A03DB335EE0BB590738E53"/>
            </content>
        </type>
        <type derived="true" id="type.4321">
            <name>const CodeExpandingVisitor&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_CodeExpandingVisitor_2D824580300CDC92F6A03DB335EE0BB590738E53"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4256">
            <name>const Complement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Complement_E9C39B44C265CC4D19B0EFE97BE0DDAAF5B39DB5"/>
            </content>
        </type>
        <type derived="true" id="type.4257">
            <name>const Complement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Complement_E9C39B44C265CC4D19B0EFE97BE0DDAAF5B39DB5"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4222">
            <name>const ConditionVariable</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ConditionVariable_019A80625043CF98EC88D8F55238C84CFD4A9C26"/>
            </content>
        </type>
        <type derived="true" id="type.4274">
            <name>const Construct</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Construct_9E0CFFBA332AF77070D82685BD0B3B21F6BBDAB8"/>
            </content>
        </type>
        <type derived="true" id="type.4275">
            <name>const Construct&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Construct_9E0CFFBA332AF77070D82685BD0B3B21F6BBDAB8"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4227">
            <name>const ConversionException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ConversionException_968EDA1D00534F82FF78F973855F91349977511B"/>
            </content>
        </type>
        <type derived="true" id="type.4228">
            <name>const ConversionException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ConversionException_968EDA1D00534F82FF78F973855F91349977511B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3740">
            <name>const Counter&lt;System.IO.ByteStream></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700180"/>
            </content>
        </type>
        <type derived="true" id="type.3938">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.3949">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.3947">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.3933">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.3940">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.3931">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.3930">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.3929">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.3924">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.3921">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.3939">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.3962">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.3955">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.3969">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.3970">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.3951">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.3934">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3941">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3956">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3922">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3925">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3963">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3932">
            <name>const Counter&lt;U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A"/>
            </content>
        </type>
        <type derived="true" id="type.3953">
            <name>const Counter&lt;U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A"/>
            </content>
        </type>
        <type derived="true" id="type.3972">
            <name>const Counter&lt;U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A"/>
            </content>
        </type>
        <type derived="true" id="type.4292">
            <name>const DeleteStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DeleteStatement_CFF57A1EB43152DAED3E95873037A4F83E2AAF0A"/>
            </content>
        </type>
        <type derived="true" id="type.4293">
            <name>const DeleteStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DeleteStatement_CFF57A1EB43152DAED3E95873037A4F83E2AAF0A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4238">
            <name>const Deref</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Deref_6825EB2BE00B35C10BF9F18A018CADC1F1F12594"/>
            </content>
        </type>
        <type derived="true" id="type.4239">
            <name>const Deref&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Deref_6825EB2BE00B35C10BF9F18A018CADC1F1F12594"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4295">
            <name>const DestroyStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DestroyStatement_E2AF4A1B38D4AE66FCF9EF639F0D8309CE050550"/>
            </content>
        </type>
        <type derived="true" id="type.4296">
            <name>const DestroyStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DestroyStatement_E2AF4A1B38D4AE66FCF9EF639F0D8309CE050550"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711238">
            <name>const DomAttr</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomAttr_9E6E1B42DF1CBDED3278FE00CE0A15F354369845"/>
            </content>
        </type>
        <type derived="true" id="type.8711240">
            <name>const DomAttr&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomAttr_9E6E1B42DF1CBDED3278FE00CE0A15F354369845"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711239">
            <name>const DomAttr*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomAttr_9E6E1B42DF1CBDED3278FE00CE0A15F354369845"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712018">
            <name>const DomAttr*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomAttr_9E6E1B42DF1CBDED3278FE00CE0A15F354369845"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711205">
            <name>const DomCDataSection</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomCDataSection_B7F8D16E36F2CB9C1D7CB1E00A5E41623C025C7C"/>
            </content>
        </type>
        <type derived="true" id="type.8711207">
            <name>const DomCDataSection&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomCDataSection_B7F8D16E36F2CB9C1D7CB1E00A5E41623C025C7C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711206">
            <name>const DomCDataSection*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomCDataSection_B7F8D16E36F2CB9C1D7CB1E00A5E41623C025C7C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711193">
            <name>const DomCharacterData</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomCharacterData_0088EED8AB2F3E51DCCF79E1F2620EC545C0C991"/>
            </content>
        </type>
        <type derived="true" id="type.8711195">
            <name>const DomCharacterData&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomCharacterData_0088EED8AB2F3E51DCCF79E1F2620EC545C0C991"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711194">
            <name>const DomCharacterData*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomCharacterData_0088EED8AB2F3E51DCCF79E1F2620EC545C0C991"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711211">
            <name>const DomComment</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomComment_7B14BD5D921A05087E97FD2083821D797C780D38"/>
            </content>
        </type>
        <type derived="true" id="type.8711213">
            <name>const DomComment&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomComment_7B14BD5D921A05087E97FD2083821D797C780D38"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711212">
            <name>const DomComment*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomComment_7B14BD5D921A05087E97FD2083821D797C780D38"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711223">
            <name>const DomDocument</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomDocument_975632F3AA8CF3FEC1D51FB0E91F580D6EBA16C8"/>
            </content>
        </type>
        <type derived="true" id="type.8711225">
            <name>const DomDocument&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomDocument_975632F3AA8CF3FEC1D51FB0E91F580D6EBA16C8"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711224">
            <name>const DomDocument*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomDocument_975632F3AA8CF3FEC1D51FB0E91F580D6EBA16C8"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711232">
            <name>const DomDocumentFragment</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomDocumentFragment_F8F4B9224E04A95DBEE5184849B88CF399A2ABD3"/>
            </content>
        </type>
        <type derived="true" id="type.8711234">
            <name>const DomDocumentFragment&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomDocumentFragment_F8F4B9224E04A95DBEE5184849B88CF399A2ABD3"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711233">
            <name>const DomDocumentFragment*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomDocumentFragment_F8F4B9224E04A95DBEE5184849B88CF399A2ABD3"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711244">
            <name>const DomElement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomElement_2F019E5CBBCF1F9C65CE734BA20F69BEFDC19B3B"/>
            </content>
        </type>
        <type derived="true" id="type.8711246">
            <name>const DomElement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomElement_2F019E5CBBCF1F9C65CE734BA20F69BEFDC19B3B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711245">
            <name>const DomElement*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomElement_2F019E5CBBCF1F9C65CE734BA20F69BEFDC19B3B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711901">
            <name>const DomElement*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomElement_2F019E5CBBCF1F9C65CE734BA20F69BEFDC19B3B"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712219">
            <name>const DomElement**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomElement_2F019E5CBBCF1F9C65CE734BA20F69BEFDC19B3B"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4352">
            <name>const DomException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomException_EE72D4E688A5F4B0F4D22924FF24D42E74D944CA"/>
            </content>
        </type>
        <type derived="true" id="type.4353">
            <name>const DomException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomException_EE72D4E688A5F4B0F4D22924FF24D42E74D944CA"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711260">
            <name>const DomNode</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509"/>
            </content>
        </type>
        <type derived="true" id="type.8711262">
            <name>const DomNode&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711261">
            <name>const DomNode*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712082">
            <name>const DomNode*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712083">
            <name>const DomNode**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712261">
            <name>const DomNode**&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712262">
            <name>const DomNode**&amp;&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712260">
            <name>const DomNode***</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomNode_AAD27BD01107131DCBD7D66B91A6A861C7C23509"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711266">
            <name>const DomParentNode</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomParentNode_F9975590E24BA357F4D6034909932314C990E2E2"/>
            </content>
        </type>
        <type derived="true" id="type.8711268">
            <name>const DomParentNode&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomParentNode_F9975590E24BA357F4D6034909932314C990E2E2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711267">
            <name>const DomParentNode*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomParentNode_F9975590E24BA357F4D6034909932314C990E2E2"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711217">
            <name>const DomProcessingInstruction</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomProcessingInstruction_AFC6552B5FD094A4D6CA02BA005DB0DAC3468881"/>
            </content>
        </type>
        <type derived="true" id="type.8711219">
            <name>const DomProcessingInstruction&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomProcessingInstruction_AFC6552B5FD094A4D6CA02BA005DB0DAC3468881"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711218">
            <name>const DomProcessingInstruction*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomProcessingInstruction_AFC6552B5FD094A4D6CA02BA005DB0DAC3468881"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711199">
            <name>const DomText</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomText_A6FE62F1B199D0D0DC914DDEC6950372BD94082D"/>
            </content>
        </type>
        <type derived="true" id="type.8711201">
            <name>const DomText&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomText_A6FE62F1B199D0D0DC914DDEC6950372BD94082D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711200">
            <name>const DomText*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DomText_A6FE62F1B199D0D0DC914DDEC6950372BD94082D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4332">
            <name>const ExpectationParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ExpectationParser_0DFEF78F7EA112E6F20DC00ECFD31592FD692CAB"/>
            </content>
        </type>
        <type derived="true" id="type.4333">
            <name>const ExpectationParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ExpectationParser_0DFEF78F7EA112E6F20DC00ECFD31592FD692CAB"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4298">
            <name>const ExpressionStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ExpressionStatement_F01731B3CB572136FE603DE87C8C465F5B79ED54"/>
            </content>
        </type>
        <type derived="true" id="type.4299">
            <name>const ExpressionStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ExpressionStatement_F01731B3CB572136FE603DE87C8C465F5B79ED54"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4214">
            <name>const FileSystemException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_FileSystemException_BB9552A6F8CD7166104BC90F55939797AA006B1A"/>
            </content>
        </type>
        <type derived="true" id="type.4215">
            <name>const FileSystemException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_FileSystemException_BB9552A6F8CD7166104BC90F55939797AA006B1A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4304">
            <name>const GotoCaseStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_GotoCaseStatement_54B0F8581DE0382A086C8C1EC6A19E93889D566D"/>
            </content>
        </type>
        <type derived="true" id="type.4305">
            <name>const GotoCaseStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_GotoCaseStatement_54B0F8581DE0382A086C8C1EC6A19E93889D566D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4289">
            <name>const GotoStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_GotoStatement_423A80C64905BCD7885A3433F9FE33D8BB37DF7E"/>
            </content>
        </type>
        <type derived="true" id="type.4290">
            <name>const GotoStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_GotoStatement_423A80C64905BCD7885A3433F9FE33D8BB37DF7E"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711895">
            <name>const HashMap&lt;String&lt;uchar>, DomElement*, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711892"/>
            </content>
        </type>
        <type derived="true" id="type.8711897">
            <name>const HashMap&lt;String&lt;uchar>, DomElement*, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711892"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711896">
            <name>const HashMap&lt;String&lt;uchar>, DomElement*, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711892"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711915">
            <name>const Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711912"/>
            </content>
        </type>
        <type derived="true" id="type.8711917">
            <name>const Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711912"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711916">
            <name>const Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711912"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711921">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, DomElement*>, Pair&lt;String&lt;uchar>, DomElement*>&amp;, Pair&lt;String&lt;uchar>, DomElement*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711918"/>
            </content>
        </type>
        <type derived="true" id="type.8711923">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, DomElement*>, Pair&lt;String&lt;uchar>, DomElement*>&amp;, Pair&lt;String&lt;uchar>, DomElement*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711918"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711922">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, DomElement*>, Pair&lt;String&lt;uchar>, DomElement*>&amp;, Pair&lt;String&lt;uchar>, DomElement*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711918"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711935">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, DomElement*>, const Pair&lt;String&lt;uchar>, DomElement*>&amp;, const Pair&lt;String&lt;uchar>, DomElement*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711932"/>
            </content>
        </type>
        <type derived="true" id="type.8711937">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, DomElement*>, const Pair&lt;String&lt;uchar>, DomElement*>&amp;, const Pair&lt;String&lt;uchar>, DomElement*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711932"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711936">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;uchar>, DomElement*>, const Pair&lt;String&lt;uchar>, DomElement*>&amp;, const Pair&lt;String&lt;uchar>, DomElement*>*, Hashtable&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomElement*>, SelectFirst&lt;String&lt;uchar>, DomElement*>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711932"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711647">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711644"/>
            </content>
        </type>
        <type derived="true" id="type.4105">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4102"/>
            </content>
        </type>
        <type derived="true" id="type.4107">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4102"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711649">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711644"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4106">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4102"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711648">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711644"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4111">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4108"/>
            </content>
        </type>
        <type derived="true" id="type.8711653">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711650"/>
            </content>
        </type>
        <type derived="true" id="type.8711655">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711650"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4113">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4108"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711654">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711650"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4112">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4108"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4216">
            <name>const InvalidPathException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_InvalidPathException_B507BC7383A55580000E7A669FAAE1ABECF7FFBA"/>
            </content>
        </type>
        <type derived="true" id="type.4217">
            <name>const InvalidPathException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_InvalidPathException_B507BC7383A55580000E7A669FAAE1ABECF7FFBA"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4259">
            <name>const Invoke</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Invoke_D6527871DA9EA1727DFAC637E9FF17EF73B2DAF5"/>
            </content>
        </type>
        <type derived="true" id="type.4260">
            <name>const Invoke&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Invoke_D6527871DA9EA1727DFAC637E9FF17EF73B2DAF5"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3824">
            <name>const K&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699693"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3864">
            <name>const Key&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699750"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3847">
            <name>const KeyType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699722"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3911">
            <name>const KeyType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699829"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4329">
            <name>const KleeneStarParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_KleeneStarParser_8B553023A6E0AA98D08C756A40F526859BF46D2D"/>
            </content>
        </type>
        <type derived="true" id="type.4330">
            <name>const KleeneStarParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_KleeneStarParser_8B553023A6E0AA98D08C756A40F526859BF46D2D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712004">
            <name>const Less&lt;String&lt;uchar>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8712003"/>
            </content>
        </type>
        <type derived="true" id="type.8712006">
            <name>const Less&lt;String&lt;uchar>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8712003"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712005">
            <name>const Less&lt;String&lt;uchar>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8712003"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711945">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711942"/>
            </content>
        </type>
        <type derived="true" id="type.8711947">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711942"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711946">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711942"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712079">
            <name>const List&lt;DomNode*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8712076"/>
            </content>
        </type>
        <type derived="true" id="type.8712081">
            <name>const List&lt;DomNode*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8712076"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712080">
            <name>const List&lt;DomNode*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8712076"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4169">
            <name>const List&lt;String&lt;uchar>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4166"/>
            </content>
        </type>
        <type derived="true" id="type.8711711">
            <name>const List&lt;String&lt;uchar>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711708"/>
            </content>
        </type>
        <type derived="true" id="type.8711713">
            <name>const List&lt;String&lt;uchar>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711708"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4171">
            <name>const List&lt;String&lt;uchar>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4166"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711712">
            <name>const List&lt;String&lt;uchar>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711708"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4170">
            <name>const List&lt;String&lt;uchar>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4166"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711985">
            <name>const List&lt;UniquePtr&lt;System.Dom.DomAttr>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711982"/>
            </content>
        </type>
        <type derived="true" id="type.8711987">
            <name>const List&lt;UniquePtr&lt;System.Dom.DomAttr>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711982"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711986">
            <name>const List&lt;UniquePtr&lt;System.Dom.DomAttr>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711982"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712125">
            <name>const List&lt;UniquePtr&lt;System.Dom.DomElement>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8712122"/>
            </content>
        </type>
        <type derived="true" id="type.8712127">
            <name>const List&lt;UniquePtr&lt;System.Dom.DomElement>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8712122"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712126">
            <name>const List&lt;UniquePtr&lt;System.Dom.DomElement>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8712122"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4282">
            <name>const Literal</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Literal_2996038F9E8CCAE363F6BF2855F68961FFF05F77"/>
            </content>
        </type>
        <type derived="true" id="type.4283">
            <name>const Literal&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Literal_2996038F9E8CCAE363F6BF2855F68961FFF05F77"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3880">
            <name>const LockGuard&lt;Mtx></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
            </content>
        </type>
        <type derived="true" id="type.3881">
            <name>const LockGuard&lt;Mtx>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4067">
            <name>const LockGuard&lt;System.Threading.Mutex></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8705037"/>
            </content>
        </type>
        <type derived="true" id="type.4068">
            <name>const LockGuard&lt;System.Threading.Mutex>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8705037"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712012">
            <name>const Map&lt;String&lt;uchar>, DomAttr*, Less&lt;String&lt;uchar>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8712009"/>
            </content>
        </type>
        <type derived="true" id="type.8712014">
            <name>const Map&lt;String&lt;uchar>, DomAttr*, Less&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8712009"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712013">
            <name>const Map&lt;String&lt;uchar>, DomAttr*, Less&lt;String&lt;uchar>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8712009"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4223">
            <name>const Mutex</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Mutex_CAF802A5F8A71934B07EA6C23937F60D9AECD650"/>
            </content>
        </type>
        <type derived="true" id="type.4277">
            <name>const New</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_New_DC04D52C4D476FD919D770D43330D434B51E2D21"/>
            </content>
        </type>
        <type derived="true" id="type.4278">
            <name>const New&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_New_DC04D52C4D476FD919D770D43330D434B51E2D21"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711273">
            <name>const NodeList</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_NodeList_B93D67EB9918764021AB095F8DF0C822938F175B"/>
            </content>
        </type>
        <type derived="true" id="type.8711275">
            <name>const NodeList&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_NodeList_B93D67EB9918764021AB095F8DF0C822938F175B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711274">
            <name>const NodeList*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_NodeList_B93D67EB9918764021AB095F8DF0C822938F175B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4235">
            <name>const Not</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Not_5E324445E5A5F8057BEBD48898C26110CD402187"/>
            </content>
        </type>
        <type derived="true" id="type.4236">
            <name>const Not&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Not_5E324445E5A5F8057BEBD48898C26110CD402187"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4323">
            <name>const OptionalParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_OptionalParser_F2758E0656F6FF0FCFAFB3BADC90975486CE943A"/>
            </content>
        </type>
        <type derived="true" id="type.4324">
            <name>const OptionalParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_OptionalParser_F2758E0656F6FF0FCFAFB3BADC90975486CE943A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4218">
            <name>const OutputStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_OutputStream_D306768ED83C9FB00EA54CD61D604CE2BF727452"/>
            </content>
        </type>
        <type derived="true" id="type.8712036">
            <name>const Pair&lt;String&lt;uchar>, DomAttr*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8712015"/>
            </content>
        </type>
        <type derived="true" id="type.8712026">
            <name>const Pair&lt;String&lt;uchar>, DomAttr*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8712015"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712035">
            <name>const Pair&lt;String&lt;uchar>, DomAttr*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8712015"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711931">
            <name>const Pair&lt;String&lt;uchar>, DomElement*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711898"/>
            </content>
        </type>
        <type derived="true" id="type.8711909">
            <name>const Pair&lt;String&lt;uchar>, DomElement*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711898"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711930">
            <name>const Pair&lt;String&lt;uchar>, DomElement*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711898"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3890">
            <name>const Pair&lt;T, U>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3887">
            <name>const Pair&lt;T, U>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4326">
            <name>const PositiveParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PositiveParser_773062827D5C6002110C7D897D790DAEEE06A502"/>
            </content>
        </type>
        <type derived="true" id="type.4327">
            <name>const PositiveParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PositiveParser_773062827D5C6002110C7D897D790DAEEE06A502"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4265">
            <name>const PostfixDecrement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PostfixDecrement_D09AB7ACBA491B153051FDF9DE245E475C7F6392"/>
            </content>
        </type>
        <type derived="true" id="type.4266">
            <name>const PostfixDecrement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PostfixDecrement_D09AB7ACBA491B153051FDF9DE245E475C7F6392"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4262">
            <name>const PostfixIncrement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PostfixIncrement_DDC6B0BA10308D23CE5F90EE4D6B95A60E196FE9"/>
            </content>
        </type>
        <type derived="true" id="type.4263">
            <name>const PostfixIncrement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PostfixIncrement_DDC6B0BA10308D23CE5F90EE4D6B95A60E196FE9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4247">
            <name>const PrefixDecrement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PrefixDecrement_999D7C38861B7D6CED24609E18ACD9197FF478F0"/>
            </content>
        </type>
        <type derived="true" id="type.4248">
            <name>const PrefixDecrement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PrefixDecrement_999D7C38861B7D6CED24609E18ACD9197FF478F0"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4244">
            <name>const PrefixIncrement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PrefixIncrement_8035645A064F2FF3F7808392B992A24FA56E9E9D"/>
            </content>
        </type>
        <type derived="true" id="type.4245">
            <name>const PrefixIncrement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PrefixIncrement_8035645A064F2FF3F7808392B992A24FA56E9E9D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711962">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711959"/>
            </content>
        </type>
        <type derived="true" id="type.8711964">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711959"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711963">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711959"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711953">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711950"/>
            </content>
        </type>
        <type derived="true" id="type.8711955">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711950"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711954">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, DomElement*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711950"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712096">
            <name>const RandomAccessIter&lt;DomNode*, DomNode*&amp;, DomNode**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8712093"/>
            </content>
        </type>
        <type derived="true" id="type.8712098">
            <name>const RandomAccessIter&lt;DomNode*, DomNode*&amp;, DomNode**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8712093"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712097">
            <name>const RandomAccessIter&lt;DomNode*, DomNode*&amp;, DomNode**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8712093"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712087">
            <name>const RandomAccessIter&lt;DomNode*, const DomNode*&amp;, const DomNode**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8712084"/>
            </content>
        </type>
        <type derived="true" id="type.8712089">
            <name>const RandomAccessIter&lt;DomNode*, const DomNode*&amp;, const DomNode**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8712084"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712088">
            <name>const RandomAccessIter&lt;DomNode*, const DomNode*&amp;, const DomNode**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8712084"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4182">
            <name>const RandomAccessIter&lt;String&lt;uchar>*, String&lt;uchar>*&amp;, String&lt;uchar>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4179"/>
            </content>
        </type>
        <type derived="true" id="type.8711724">
            <name>const RandomAccessIter&lt;String&lt;uchar>*, String&lt;uchar>*&amp;, String&lt;uchar>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711721"/>
            </content>
        </type>
        <type derived="true" id="type.8711726">
            <name>const RandomAccessIter&lt;String&lt;uchar>*, String&lt;uchar>*&amp;, String&lt;uchar>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711721"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4184">
            <name>const RandomAccessIter&lt;String&lt;uchar>*, String&lt;uchar>*&amp;, String&lt;uchar>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4179"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711726">
            <name>const RandomAccessIter&lt;String&lt;uchar>*, String&lt;uchar>*&amp;, String&lt;uchar>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711721"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711725">
            <name>const RandomAccessIter&lt;String&lt;uchar>*, String&lt;uchar>*&amp;, String&lt;uchar>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711721"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4183">
            <name>const RandomAccessIter&lt;String&lt;uchar>*, String&lt;uchar>*&amp;, String&lt;uchar>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4179"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711717">
            <name>const RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711714"/>
            </content>
        </type>
        <type derived="true" id="type.4175">
            <name>const RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4172"/>
            </content>
        </type>
        <type derived="true" id="type.8711717">
            <name>const RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711714"/>
            </content>
        </type>
        <type derived="true" id="type.4177">
            <name>const RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4172"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711719">
            <name>const RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711714"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711718">
            <name>const RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711714"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4176">
            <name>const RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4172"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711718">
            <name>const RandomAccessIter&lt;String&lt;uchar>*, const String&lt;uchar>*&amp;, const String&lt;uchar>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711714"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711998">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomAttr>, UniquePtr&lt;System.Dom.DomAttr>&amp;, UniquePtr&lt;System.Dom.DomAttr>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711995"/>
            </content>
        </type>
        <type derived="true" id="type.8712000">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomAttr>, UniquePtr&lt;System.Dom.DomAttr>&amp;, UniquePtr&lt;System.Dom.DomAttr>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711995"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711999">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomAttr>, UniquePtr&lt;System.Dom.DomAttr>&amp;, UniquePtr&lt;System.Dom.DomAttr>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711995"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711991">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomAttr>, const UniquePtr&lt;System.Dom.DomAttr>&amp;, const UniquePtr&lt;System.Dom.DomAttr>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711988"/>
            </content>
        </type>
        <type derived="true" id="type.8711993">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomAttr>, const UniquePtr&lt;System.Dom.DomAttr>&amp;, const UniquePtr&lt;System.Dom.DomAttr>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711988"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711992">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomAttr>, const UniquePtr&lt;System.Dom.DomAttr>&amp;, const UniquePtr&lt;System.Dom.DomAttr>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711988"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712138">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomElement>, UniquePtr&lt;System.Dom.DomElement>&amp;, UniquePtr&lt;System.Dom.DomElement>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8712135"/>
            </content>
        </type>
        <type derived="true" id="type.8712140">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomElement>, UniquePtr&lt;System.Dom.DomElement>&amp;, UniquePtr&lt;System.Dom.DomElement>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8712135"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712139">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomElement>, UniquePtr&lt;System.Dom.DomElement>&amp;, UniquePtr&lt;System.Dom.DomElement>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8712135"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712131">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomElement>, const UniquePtr&lt;System.Dom.DomElement>&amp;, const UniquePtr&lt;System.Dom.DomElement>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8712128"/>
            </content>
        </type>
        <type derived="true" id="type.8712133">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomElement>, const UniquePtr&lt;System.Dom.DomElement>&amp;, const UniquePtr&lt;System.Dom.DomElement>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8712128"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712132">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Dom.DomElement>, const UniquePtr&lt;System.Dom.DomElement>&amp;, const UniquePtr&lt;System.Dom.DomElement>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8712128"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711415">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711412"/>
            </content>
        </type>
        <type derived="true" id="type.3874">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3871"/>
            </content>
        </type>
        <type derived="true" id="type.8711417">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711412"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3876">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3871"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711417">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711412"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3875">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3871"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711416">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711412"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3745">
            <name>const RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3742"/>
            </content>
        </type>
        <type derived="true" id="type.8711286">
            <name>const RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711283"/>
            </content>
        </type>
        <type derived="true" id="type.8711288">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711283"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3747">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3742"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711287">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711283"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3746">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3742"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3764">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3761"/>
            </content>
        </type>
        <type derived="true" id="type.8711305">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711302"/>
            </content>
        </type>
        <type derived="true" id="type.3766">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3761"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711307">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711302"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711306">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711302"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3765">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3761"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711604">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711601"/>
            </content>
        </type>
        <type derived="true" id="type.4062">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4059"/>
            </content>
        </type>
        <type derived="true" id="type.8711606">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711601"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4064">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4059"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711605">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711601"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4063">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4059"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711605">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711601"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3775">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3772"/>
            </content>
        </type>
        <type derived="true" id="type.8711316">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711313"/>
            </content>
        </type>
        <type derived="true" id="type.8711318">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711313"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3777">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3772"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711317">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711313"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3776">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3772"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711317">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711313"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3754">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3751"/>
            </content>
        </type>
        <type derived="true" id="type.8711295">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711292"/>
            </content>
        </type>
        <type derived="true" id="type.3756">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3751"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711297">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711292"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711296">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711292"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3755">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.3751"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4224">
            <name>const RecursiveMutex</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_RecursiveMutex_B9ED5479754BBDDED6A4491348BBD2F20F701D82"/>
            </content>
        </type>
        <type derived="true" id="type.8712032">
            <name>const RedBlackTree&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomAttr*>, SelectFirst&lt;String&lt;uchar>, DomAttr*>, Less&lt;String&lt;uchar>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8712029"/>
            </content>
        </type>
        <type derived="true" id="type.8712034">
            <name>const RedBlackTree&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomAttr*>, SelectFirst&lt;String&lt;uchar>, DomAttr*>, Less&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8712029"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712033">
            <name>const RedBlackTree&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, DomAttr*>, SelectFirst&lt;String&lt;uchar>, DomAttr*>, Less&lt;String&lt;uchar>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8712029"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712046">
            <name>const RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, DomAttr*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8712043"/>
            </content>
        </type>
        <type derived="true" id="type.8712048">
            <name>const RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, DomAttr*>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8712043"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712047">
            <name>const RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, DomAttr*>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8712043"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712053">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, DomAttr*>, Pair&lt;String&lt;uchar>, DomAttr*>&amp;, Pair&lt;String&lt;uchar>, DomAttr*>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8712050"/>
            </content>
        </type>
        <type derived="true" id="type.8712055">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, DomAttr*>, Pair&lt;String&lt;uchar>, DomAttr*>&amp;, Pair&lt;String&lt;uchar>, DomAttr*>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8712050"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712054">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, DomAttr*>, Pair&lt;String&lt;uchar>, DomAttr*>&amp;, Pair&lt;String&lt;uchar>, DomAttr*>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8712050"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712040">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, DomAttr*>, const Pair&lt;String&lt;uchar>, DomAttr*>&amp;, const Pair&lt;String&lt;uchar>, DomAttr*>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8712037"/>
            </content>
        </type>
        <type derived="true" id="type.8712042">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, DomAttr*>, const Pair&lt;String&lt;uchar>, DomAttr*>&amp;, const Pair&lt;String&lt;uchar>, DomAttr*>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8712037"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712041">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, DomAttr*>, const Pair&lt;String&lt;uchar>, DomAttr*>&amp;, const Pair&lt;String&lt;uchar>, DomAttr*>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8712037"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4286">
            <name>const ReturnStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ReturnStatement_FEC70A987D7361EC167E7C772D29550ABF5D7750"/>
            </content>
        </type>
        <type derived="true" id="type.4287">
            <name>const ReturnStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ReturnStatement_FEC70A987D7361EC167E7C772D29550ABF5D7750"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712020">
            <name>const SelectFirst&lt;String&lt;uchar>, DomAttr*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8712019"/>
            </content>
        </type>
        <type derived="true" id="type.8712022">
            <name>const SelectFirst&lt;String&lt;uchar>, DomAttr*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8712019"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712021">
            <name>const SelectFirst&lt;String&lt;uchar>, DomAttr*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8712019"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712221">
            <name>const SelectFirst&lt;String&lt;uchar>, DomAttr*>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8712019"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712220">
            <name>const SelectFirst&lt;String&lt;uchar>, DomAttr*>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8712019"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711903">
            <name>const SelectFirst&lt;String&lt;uchar>, DomElement*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711902"/>
            </content>
        </type>
        <type derived="true" id="type.8711905">
            <name>const SelectFirst&lt;String&lt;uchar>, DomElement*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711902"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711904">
            <name>const SelectFirst&lt;String&lt;uchar>, DomElement*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711902"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712170">
            <name>const SelectFirst&lt;String&lt;uchar>, DomElement*>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711902"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712169">
            <name>const SelectFirst&lt;String&lt;uchar>, DomElement*>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711902"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4268">
            <name>const SizeOf</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_SizeOf_7E82BCAA3BF507459413C346B576D53CFCE5288B"/>
            </content>
        </type>
        <type derived="true" id="type.4269">
            <name>const SizeOf&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_SizeOf_7E82BCAA3BF507459413C346B576D53CFCE5288B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712117">
            <name>const Stack&lt;UniquePtr&lt;System.Dom.DomElement>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8712116"/>
            </content>
        </type>
        <type derived="true" id="type.8712119">
            <name>const Stack&lt;UniquePtr&lt;System.Dom.DomElement>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8712116"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712118">
            <name>const Stack&lt;UniquePtr&lt;System.Dom.DomElement>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8712116"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4205">
            <name>const StaticInitCriticalSection</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_StaticInitCriticalSection_39AB37625C7D8624475080E487A05114E48A9C6C"/>
            </content>
        </type>
        <type derived="true" id="type.4206">
            <name>const StaticInitCriticalSection&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_StaticInitCriticalSection_39AB37625C7D8624475080E487A05114E48A9C6C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4219">
            <name>const StreamWriter</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_StreamWriter_40A39F418049D49DB679452BB514CDFE47500311"/>
            </content>
        </type>
        <type derived="true" id="type.8700211">
            <name>const String&lt;char>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700206"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700299">
            <name>const String&lt;uchar>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700294"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700298">
            <name>const String&lt;uchar>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700294"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8709097">
            <name>const String&lt;uchar>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700294"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8709261">
            <name>const String&lt;uchar>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700294"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8700254">
            <name>const String&lt;wchar>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8700249"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4301">
            <name>const SwitchStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_SwitchStatement_18D2C0BB3BA2134D050B02EA375A462847662B6E"/>
            </content>
        </type>
        <type derived="true" id="type.4302">
            <name>const SwitchStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_SwitchStatement_18D2C0BB3BA2134D050B02EA375A462847662B6E"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3796">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699629"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3797">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699632"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3798">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699634"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3799">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699643"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3800">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699645"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3801">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699647"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3852">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699730"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3810">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699662"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3885">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699779"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3888">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699782"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3844">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699713"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3842">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699711"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3841">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699709"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3821">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699687"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3809">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699660"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3883">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699770"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3807">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699657"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3806">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699655"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3804">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699652"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3902">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699820"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3825">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699694"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3823">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699691"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3822">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699689"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3904">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699822"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3820">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699685"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3803">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699650"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3793">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699622"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3819">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699683"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3818">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699681"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3812">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699665"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3816">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699672"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3780">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699602"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3815">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699670"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3794">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699625"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3813">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699667"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3782">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699604"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3795">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699627"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4225">
            <name>const ThreadingException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ThreadingException_4952259FBBDB6BDFCF1A52EABE2C1A61BF601670"/>
            </content>
        </type>
        <type derived="true" id="type.4226">
            <name>const ThreadingException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ThreadingException_4952259FBBDB6BDFCF1A52EABE2C1A61BF601670"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4307">
            <name>const ThrowStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ThrowStatement_6216EF486931E535CE6CDEE33F4D2E7A53BE76B7"/>
            </content>
        </type>
        <type derived="true" id="type.4308">
            <name>const ThrowStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ThrowStatement_6216EF486931E535CE6CDEE33F4D2E7A53BE76B7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4335">
            <name>const TokenParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_TokenParser_319753BA62AEDA94D46A4D47AEE13AEC1B1F3B72"/>
            </content>
        </type>
        <type derived="true" id="type.4336">
            <name>const TokenParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_TokenParser_319753BA62AEDA94D46A4D47AEE13AEC1B1F3B72"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4310">
            <name>const TryStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_TryStatement_1132D26D95ED5027A0CFA7B5E46039A7A645EE96"/>
            </content>
        </type>
        <type derived="true" id="type.4311">
            <name>const TryStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_TryStatement_1132D26D95ED5027A0CFA7B5E46039A7A645EE96"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4231">
            <name>const Type</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Type_8616C506F1B48B10568C6F4144C4A41FFB320CF3"/>
            </content>
        </type>
        <type derived="true" id="type.4232">
            <name>const Type&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Type_8616C506F1B48B10568C6F4144C4A41FFB320CF3"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4271">
            <name>const TypeName</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_TypeName_BB4524B12FF73AADA611653B9DE399FFFCEC3BEB"/>
            </content>
        </type>
        <type derived="true" id="type.4272">
            <name>const TypeName&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_TypeName_BB4524B12FF73AADA611653B9DE399FFFCEC3BEB"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3884">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699771"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3886">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699780"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3889">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699783"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3817">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699673"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3805">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699653"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3808">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699658"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3811">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699663"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3802">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699648"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3814">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699668"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712208">
            <name>const UnaryFun&lt;Pair&lt;String&lt;uchar>, DomAttr*>, String&lt;uchar>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8712023"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712157">
            <name>const UnaryFun&lt;Pair&lt;String&lt;uchar>, DomElement*>, String&lt;uchar>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711906"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4253">
            <name>const UnaryMinus</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnaryMinus_04009179AAFCB4DEE000972E675D4198E1AF838F"/>
            </content>
        </type>
        <type derived="true" id="type.4254">
            <name>const UnaryMinus&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnaryMinus_04009179AAFCB4DEE000972E675D4198E1AF838F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4250">
            <name>const UnaryPlus</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnaryPlus_65EA8B4AEC38C5A830F0C46A73800A840EFCF9C2"/>
            </content>
        </type>
        <type derived="true" id="type.4251">
            <name>const UnaryPlus&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnaryPlus_65EA8B4AEC38C5A830F0C46A73800A840EFCF9C2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4229">
            <name>const UnicodeException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnicodeException_F535D36BB8009200467ACEA05819217182306079"/>
            </content>
        </type>
        <type derived="true" id="type.4230">
            <name>const UnicodeException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnicodeException_F535D36BB8009200467ACEA05819217182306079"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712064">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, DomAttr*>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8712061"/>
            </content>
        </type>
        <type derived="true" id="type.8712066">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, DomAttr*>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8712061"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712065">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, DomAttr*>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8712061"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711978">
            <name>const UniquePtr&lt;System.Dom.DomAttr></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711975"/>
            </content>
        </type>
        <type derived="true" id="type.8711980">
            <name>const UniquePtr&lt;System.Dom.DomAttr>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711975"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711979">
            <name>const UniquePtr&lt;System.Dom.DomAttr>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711975"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712105">
            <name>const UniquePtr&lt;System.Dom.DomDocument></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8712102"/>
            </content>
        </type>
        <type derived="true" id="type.8712107">
            <name>const UniquePtr&lt;System.Dom.DomDocument>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8712102"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712106">
            <name>const UniquePtr&lt;System.Dom.DomDocument>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8712102"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712112">
            <name>const UniquePtr&lt;System.Dom.DomElement></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8712109"/>
            </content>
        </type>
        <type derived="true" id="type.8712114">
            <name>const UniquePtr&lt;System.Dom.DomElement>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8712109"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8712113">
            <name>const UniquePtr&lt;System.Dom.DomElement>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8712109"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711881">
            <name>const UniquePtr&lt;System.Dom.DomNode></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711878"/>
            </content>
        </type>
        <type derived="true" id="type.8711883">
            <name>const UniquePtr&lt;System.Dom.DomNode>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711878"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8711882">
            <name>const UniquePtr&lt;System.Dom.DomNode>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8711878"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3865">
            <name>const Value&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8699751"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4119">
            <name>const ValueType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="8707286"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4343">
            <name>const XmlGrammar</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XmlGrammar_514387B50789C8E470155317F17349CFC3DF6E94"/>
            </content>
        </type>
        <type derived="true" id="type.4344">
            <name>const XmlGrammar&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XmlGrammar_514387B50789C8E470155317F17349CFC3DF6E94"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4346">
            <name>const XmlProcessingException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XmlProcessingException_38961E809BD4812FD6BEA01B8DDA08229100E6F5"/>
            </content>
        </type>
        <type derived="true" id="type.4347">
            <name>const XmlProcessingException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_XmlProcessingException_38961E809BD4812FD6BEA01B8DDA08229100E6F5"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4153">
            <name>const double&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8699075"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4151">
            <name>const float&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8699074"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4140">
            <name>const sbyte&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8699066"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4143">
            <name>const short&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8699068"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4340">
            <name>const stdlib</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_stdlib_C45D8720A0EE8749F9E55E6402CA85D0B654A981"/>
            </content>
        </type>
        <type derived="true" id="type.4341">
            <name>const stdlib&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_stdlib_C45D8720A0EE8749F9E55E6402CA85D0B654A981"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4145">
            <name>const ushort&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.8699069"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type basic="true" id="type.8699075">
            <name>double</name>
        </type>
        <type basic="true" id="type.8699074">
            <name>float</name>
        </type>
        <type basic="true" id="type.8699070">
            <name>int</name>
        </type>
        <type basic="true" id="type.8699072">
            <name>long</name>
        </type>
        <type basic="true" id="type.8699066">
            <name>sbyte</name>
        </type>
        <type basic="true" id="type.8699068">
            <name>short</name>
        </type>
        <type derived="true" id="type.4342">
            <name>stdlib&amp;&amp;</name>
            <content>
                <baseType ref="class_stdlib_C45D8720A0EE8749F9E55E6402CA85D0B654A981"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type basic="true" id="type.8699078">
            <name>uchar</name>
        </type>
        <type derived="true" id="type.8699121">
            <name>uchar&amp;</name>
            <content>
                <baseType ref="type.8699078"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699120">
            <name>uchar*</name>
            <content>
                <baseType ref="type.8699078"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.8699071">
            <name>uint</name>
        </type>
        <type derived="true" id="type.8699100">
            <name>uint&amp;</name>
            <content>
                <baseType ref="type.8699071"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699099">
            <name>uint*</name>
            <content>
                <baseType ref="type.8699071"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.8699073">
            <name>ulong</name>
        </type>
        <type derived="true" id="type.8699106">
            <name>ulong&amp;</name>
            <content>
                <baseType ref="type.8699073"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699105">
            <name>ulong*</name>
            <content>
                <baseType ref="type.8699073"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.8699069">
            <name>ushort</name>
        </type>
        <type basic="true" id="type.8699077">
            <name>wchar</name>
        </type>
        <type derived="true" id="type.8699118">
            <name>wchar&amp;</name>
            <content>
                <baseType ref="type.8699077"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8699117">
            <name>wchar*</name>
            <content>
                <baseType ref="type.8699077"/>
                <qualifier>*</qualifier>
            </content>
        </type>
    </types>
</library>
