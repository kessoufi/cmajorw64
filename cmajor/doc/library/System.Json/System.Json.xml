<library>
    <name>System.Json</name>
    <style>../../style/cmdoc.css</style>
    <namespaces>
        <namespace id="System.Json">
            <name>System.Json</name>
            <classes>
                <class id="class_JsonArray_595A35C98AB243A92CA1C39BB1B07E82AA246D18">
                    <name>JsonArray</name>
                    <groupName>JsonArray</groupName>
                    <syntax> public class JsonArray;</syntax>
                    <baseClass ref="class_JsonValue_B86942C2856CC5758E1FB19BBBE97E4002D4008A"/>
                    <constructors>
                        <constructor id="default_constructor_JsonArray_27ECF6EF0157D1CAB00898D898CC7849D18B95CB">
                            <name>JsonArray()</name>
                            <syntax>public nothrow JsonArray();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_AddItem_JsonArray_93D6706B2A24ED128A3C59415964A857BA13317F">
                            <name>AddItem(UniquePtr&lt;System.Json.JsonValue>&amp;&amp; item)</name>
                            <syntax>public void AddItem(UniquePtr&lt;System.Json.JsonValue>&amp;&amp; item);</syntax>
                            <parameters>
                                <parameter>
                                    <name>item</name>
                                    <type ref="type.4617321"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Count_JsonArray_57652BF582B2E717BB319EE40CAA85E2A285CDEB">
                            <name>Count() const</name>
                            <syntax>public nothrow inline long Count() const;</syntax>
                            <returnType ref="type.4605937"/>
                        </function>
                        <function id="member_function_ToString_JsonArray_BA7E1AD315213109D0099F88CDFFD9C0E98E2E93">
                            <name>ToString() const</name>
                            <syntax>public override String&lt;char> ToString() const;</syntax>
                            <returnType ref="type.4607054"/>
                        </function>
                        <function id="member_function_op_index_JsonArray_1378E53BF82426D07CFC777A2B475C65FFE24597">
                            <name>operator[](long index) const</name>
                            <syntax>public JsonValue* operator[](long index) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>index</name>
                                    <type ref="type.4605937"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.4616576"/>
                        </function>
                    </functions>
                </class>
                <class id="class_JsonBool_DECA0A9F59CE58DA61371982ADCFCD31F1497F79">
                    <name>JsonBool</name>
                    <groupName>JsonBool</groupName>
                    <syntax> public class JsonBool;</syntax>
                    <baseClass ref="class_JsonValue_B86942C2856CC5758E1FB19BBBE97E4002D4008A"/>
                    <constructors>
                        <constructor id="default_constructor_JsonBool_6CDD1C0BAA418963493BBB6418B186CF96E87CE9">
                            <name>JsonBool()</name>
                            <syntax>public nothrow JsonBool();</syntax>
                        </constructor>
                        <constructor id="constructor_JsonBool_29321643A9D00B4E2219FA0BA146A80E0BBFD182">
                            <name>JsonBool(bool value_)</name>
                            <syntax>public nothrow explicit JsonBool(bool value_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value_</name>
                                    <type ref="type.4605930"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_SetValue_JsonBool_465B34C0AC7756D2E393EF971A4CBF597F63549F">
                            <name>SetValue(bool value_)</name>
                            <syntax>public nothrow inline void SetValue(bool value_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value_</name>
                                    <type ref="type.4605930"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_ToString_JsonBool_11D1A4DC9F36611D4EC388D0AEB6152721A9A1BF">
                            <name>ToString() const</name>
                            <syntax>public override String&lt;char> ToString() const;</syntax>
                            <returnType ref="type.4607054"/>
                        </function>
                        <function id="member_function_Value_JsonBool_04618DA66215ABE8B9F977205B2D90FA5BBD060A">
                            <name>Value() const</name>
                            <syntax>public nothrow inline bool Value() const;</syntax>
                            <returnType ref="type.4605930"/>
                        </function>
                    </functions>
                </class>
                <class id="class_JsonGrammar_35AA9FF722AADCE4D0495A1DD9EF9B19479BF318">
                    <name>JsonGrammar</name>
                    <groupName>JsonGrammar</groupName>
                    <syntax> public class JsonGrammar;</syntax>
                    <baseClass ref="class_Grammar_2180D00808E7A786B21C35D11B36E77EC171A6C6"/>
                    <constructors>
                        <constructor id="default_constructor_JsonGrammar_1DB8D01EFAC1CEB1D3029D41B94B632BAB7B4BE0">
                            <name>JsonGrammar()</name>
                            <syntax>public JsonGrammar();</syntax>
                        </constructor>
                        <constructor id="constructor_JsonGrammar_BCAACB6C3F24AF6C14564C9A1F52903CDE668AAC">
                            <name>JsonGrammar(ParsingDomain* parsingDomain)</name>
                            <syntax>public JsonGrammar(ParsingDomain* parsingDomain);</syntax>
                            <parameters>
                                <parameter>
                                    <name>parsingDomain</name>
                                    <type ref="type.4614139"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_CreateRules_JsonGrammar_D6A82B25C567F66A831D4C2E84BAF38D9A84CF7E">
                            <name>CreateRules()</name>
                            <syntax>public override void CreateRules();</syntax>
                        </function>
                        <function id="member_function_GetReferencedGrammars_JsonGrammar_0DD617D5F948F46B03B9C5A995696B4EC6B595F4">
                            <name>GetReferencedGrammars()</name>
                            <syntax>public override void GetReferencedGrammars();</syntax>
                        </function>
                        <function id="member_function_Parse_JsonGrammar_657298B2AC17F5EF7701EF3B2F2F1DE7C6D17844">
                            <name>Parse(const uchar* start, const uchar* end, int fileIndex, const String&lt;char>&amp; fileName)</name>
                            <syntax>public JsonValue* Parse(const uchar* start, const uchar* end, int fileIndex, const String&lt;char>&amp; fileName);</syntax>
                            <parameters>
                                <parameter>
                                    <name>start</name>
                                    <type ref="type.4607149"/>
                                </parameter>
                                <parameter>
                                    <name>end</name>
                                    <type ref="type.4607149"/>
                                </parameter>
                                <parameter>
                                    <name>fileIndex</name>
                                    <type ref="type.4605935"/>
                                </parameter>
                                <parameter>
                                    <name>fileName</name>
                                    <type ref="type.4607059"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.4616576"/>
                        </function>
                    </functions>
                </class>
                <class id="class_JsonImportException_B2C659772CC55BEE3DF2ECEA8C50121E3DA06723">
                    <name>JsonImportException</name>
                    <groupName>JsonImportException</groupName>
                    <syntax> public class JsonImportException;</syntax>
                    <baseClass ref="class_Exception_02AEA5204AD1035A91C2D843597EACBE078C8989"/>
                    <constructors>
                        <constructor id="constructor_JsonImportException_9015D892D35DFEF8203E58FB745BF6B2D9C1ED9A">
                            <name>JsonImportException(const String&lt;char>&amp; message_)</name>
                            <syntax>public nothrow JsonImportException(const String&lt;char>&amp; message_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>message_</name>
                                    <type ref="type.4607059"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                </class>
                <class id="class_JsonNull_E0746AE6880508740D5FFC8AF4E0FB0A7AE20ED2">
                    <name>JsonNull</name>
                    <groupName>JsonNull</groupName>
                    <syntax> public class JsonNull;</syntax>
                    <baseClass ref="class_JsonValue_B86942C2856CC5758E1FB19BBBE97E4002D4008A"/>
                    <functions>
                        <function id="member_function_ToString_JsonNull_98302ABC70984F02CEFDC4D7D9AC5077D5C3C670">
                            <name>ToString() const</name>
                            <syntax>public override String&lt;char> ToString() const;</syntax>
                            <returnType ref="type.4607054"/>
                        </function>
                    </functions>
                </class>
                <class id="class_JsonNumber_BA94887A1742701B420D069040E7953026161429">
                    <name>JsonNumber</name>
                    <groupName>JsonNumber</groupName>
                    <syntax> public class JsonNumber;</syntax>
                    <baseClass ref="class_JsonValue_B86942C2856CC5758E1FB19BBBE97E4002D4008A"/>
                    <constructors>
                        <constructor id="default_constructor_JsonNumber_E3F45F095A90F5A0F4FBE1C03D7FB8FF4D10A14B">
                            <name>JsonNumber()</name>
                            <syntax>public nothrow JsonNumber();</syntax>
                        </constructor>
                        <constructor id="constructor_JsonNumber_FDC08E33EFFBBE794D13997E4CAE9D2B808068F9">
                            <name>JsonNumber(double value_)</name>
                            <syntax>public nothrow explicit JsonNumber(double value_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value_</name>
                                    <type ref="type.4605940"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_SetValue_JsonNumber_DAAA54BD89B58AB65CD4499C7D07AF0E9ACA07B4">
                            <name>SetValue(double value_)</name>
                            <syntax>public nothrow inline void SetValue(double value_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value_</name>
                                    <type ref="type.4605940"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_ToString_JsonNumber_550723B35AC58E078F1F206AFC8854D1AE621DD1">
                            <name>ToString() const</name>
                            <syntax>public override String&lt;char> ToString() const;</syntax>
                            <returnType ref="type.4607054"/>
                        </function>
                        <function id="member_function_Value_JsonNumber_EEB14F86A8149741AF8DCC15731228CBFFE63CA3">
                            <name>Value() const</name>
                            <syntax>public nothrow inline double Value() const;</syntax>
                            <returnType ref="type.4605940"/>
                        </function>
                    </functions>
                </class>
                <class id="class_JsonObject_1ACA524ABF05C4E15B709275F66F3BF5C165B69D">
                    <name>JsonObject</name>
                    <groupName>JsonObject</groupName>
                    <syntax> public class JsonObject;</syntax>
                    <baseClass ref="class_JsonValue_B86942C2856CC5758E1FB19BBBE97E4002D4008A"/>
                    <constructors>
                        <constructor id="default_constructor_JsonObject_E16F3B423E9F14DE43D5DAB5762ADFDEABE53987">
                            <name>JsonObject()</name>
                            <syntax>public JsonObject();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="function_group_AddField_9C28B5737E68F5B7F6EFF0734E146A93E593F379">
                            <name>AddField</name>
                            <overloads>
                                <overload id="member_function_AddField_JsonObject_DD02685AFE75C76A9991A018417EFA3C01D031D2">
                                    <name>AddField(const String&lt;char>&amp; fieldName, UniquePtr&lt;System.Json.JsonValue>&amp;&amp; fieldValue)</name>
                                    <syntax>public void AddField(const String&lt;char>&amp; fieldName, UniquePtr&lt;System.Json.JsonValue>&amp;&amp; fieldValue);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>fieldName</name>
                                            <type ref="type.4607059"/>
                                        </parameter>
                                        <parameter>
                                            <name>fieldValue</name>
                                            <type ref="type.4617321"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_AddField_JsonObject_8DFE70E7F550CB1ED6417EB9195A69A486F401DC">
                                    <name>AddField(const String&lt;uchar>&amp; fieldName, UniquePtr&lt;System.Json.JsonValue>&amp;&amp; fieldValue)</name>
                                    <syntax>public void AddField(const String&lt;uchar>&amp; fieldName, UniquePtr&lt;System.Json.JsonValue>&amp;&amp; fieldValue);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>fieldName</name>
                                            <type ref="type.4607147"/>
                                        </parameter>
                                        <parameter>
                                            <name>fieldValue</name>
                                            <type ref="type.4617321"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_AddField_JsonObject_BB0F40BF879C0642E895C842012A6FFBE84A73CF">
                                    <name>AddField(const String&lt;wchar>&amp; fieldName, UniquePtr&lt;System.Json.JsonValue>&amp;&amp; fieldValue)</name>
                                    <syntax>public void AddField(const String&lt;wchar>&amp; fieldName, UniquePtr&lt;System.Json.JsonValue>&amp;&amp; fieldValue);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>fieldName</name>
                                            <type ref="type.4607102"/>
                                        </parameter>
                                        <parameter>
                                            <name>fieldValue</name>
                                            <type ref="type.4617321"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_Fields_AF12E1547B6C54A07F8D8CA30B9F64B529C81D9C">
                            <name>Fields</name>
                            <overloads>
                                <overload id="member_function_Fields_JsonObject_6FBBFB84E3B990711F34D56259CBFF71582E3783">
                                    <name>Fields()</name>
                                    <syntax>public nothrow Map&lt;String&lt;uchar>, JsonValue*, Less&lt;String&lt;uchar>>>&amp; Fields();</syntax>
                                    <returnType ref="type.4617330"/>
                                </overload>
                                <overload id="member_function_Fields_JsonObject_2FDE93F351742DB8AF31FBF4F61EE01FA575D806">
                                    <name>Fields() const</name>
                                    <syntax>public nothrow const Map&lt;String&lt;uchar>, JsonValue*, Less&lt;String&lt;uchar>>>&amp; Fields() const;</syntax>
                                    <returnType ref="type.4617333"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_GetField_A070B2A86A16E986AB5708FC468ACB5C63644DE9">
                            <name>GetField</name>
                            <overloads>
                                <overload id="member_function_GetField_JsonObject_5EBC38E8BD34EFC54485EBD3A6E722ED17CE2656">
                                    <name>GetField(const String&lt;char>&amp; fieldName) const</name>
                                    <syntax>public JsonValue* GetField(const String&lt;char>&amp; fieldName) const;</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>fieldName</name>
                                            <type ref="type.4607059"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.4616576"/>
                                </overload>
                                <overload id="member_function_GetField_JsonObject_7F5393C75E599A3AB9026AEA200FAA814EE3D55E">
                                    <name>GetField(const String&lt;uchar>&amp; fieldName) const</name>
                                    <syntax>public JsonValue* GetField(const String&lt;uchar>&amp; fieldName) const;</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>fieldName</name>
                                            <type ref="type.4607147"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.4616576"/>
                                </overload>
                                <overload id="member_function_GetField_JsonObject_369351A3AB3806CA419789FB1E6220C53F899C71">
                                    <name>GetField(const String&lt;wchar>&amp; fieldName) const</name>
                                    <syntax>public JsonValue* GetField(const String&lt;wchar>&amp; fieldName) const;</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>fieldName</name>
                                            <type ref="type.4607102"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.4616576"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_ToString_JsonObject_908D139FF48AE265A3D8785366898691E6FE1AD2">
                            <name>ToString() const</name>
                            <syntax>public override String&lt;char> ToString() const;</syntax>
                            <returnType ref="type.4607054"/>
                        </function>
                    </functions>
                </class>
                <class id="class_JsonParser_821F84FEBAE4D09942A9E5D6B178B8C8CB1D24E9">
                    <name>JsonParser</name>
                    <groupName>JsonParser</groupName>
                    <syntax> public class JsonParser;</syntax>
                    <functions>
                        <function id="member_function_GetJsonGrammar_JsonParser_0D8370F75DD6DE1916BDCC1D635F967F38CEA6B5">
                            <name>GetJsonGrammar() const</name>
                            <syntax>public nothrow JsonGrammar* GetJsonGrammar() const;</syntax>
                            <returnType ref="type.4616640"/>
                        </function>
                    </functions>
                    <staticMemberFunctions>
                        <function id="member_function_Instance_JsonParser_E9AA664A2A5D30F70953E6B3922FF101467AB798">
                            <name>Instance()</name>
                            <syntax>public static nothrow JsonParser&amp; Instance();</syntax>
                            <returnType ref="type.4616617"/>
                        </function>
                    </staticMemberFunctions>
                </class>
                <class id="class_JsonString_5806452F49D8C71DEDC42FCEB48EC3A2163F7516">
                    <name>JsonString</name>
                    <groupName>JsonString</groupName>
                    <syntax> public class JsonString;</syntax>
                    <baseClass ref="class_JsonValue_B86942C2856CC5758E1FB19BBBE97E4002D4008A"/>
                    <constructors>
                        <constructor id="default_constructor_JsonString_3A7C62B9267602DAB602A8EF30A8D92559208784">
                            <name>JsonString()</name>
                            <syntax>public nothrow JsonString();</syntax>
                        </constructor>
                        <constructor id="constructor_JsonString_D3BE7AAE2CD078E46809B81D0721D508C009194E">
                            <name>JsonString(const String&lt;uchar>&amp; value_)</name>
                            <syntax>public nothrow JsonString(const String&lt;uchar>&amp; value_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value_</name>
                                    <type ref="type.4607147"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="function_group_Append_78B62F7E28AEBF2F96AB59856D234EA0471FD424">
                            <name>Append</name>
                            <overloads>
                                <overload id="member_function_Append_JsonString_E9CF408B6A27F38BF4CFA45666CA5C3475A2F859">
                                    <name>Append(const String&lt;uchar>&amp; s)</name>
                                    <syntax>public nothrow JsonString&amp; Append(const String&lt;uchar>&amp; s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.4607147"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.4616599"/>
                                </overload>
                                <overload id="member_function_Append_JsonString_379050D4A6A8001570E98A20809FDB242B446EFD">
                                    <name>Append(const uchar* s)</name>
                                    <syntax>public nothrow JsonString&amp; Append(const uchar* s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.4607149"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.4616599"/>
                                </overload>
                                <overload id="member_function_Append_JsonString_E822E33CEBC9626C33424C43F829AD378A77B659">
                                    <name>Append(uchar c)</name>
                                    <syntax>public nothrow JsonString&amp; Append(uchar c);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>c</name>
                                            <type ref="type.4605943"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.4616599"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_SetValue_JsonString_F9199A8A958220B64ED8005718B7AE7185509E55">
                            <name>SetValue(const String&lt;uchar>&amp; value_)</name>
                            <syntax>public nothrow inline void SetValue(const String&lt;uchar>&amp; value_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value_</name>
                                    <type ref="type.4607147"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_ToString_JsonString_4CBCB9FCD9FB546EB1C49167CD4C2C37BE606533">
                            <name>ToString() const</name>
                            <syntax>public override String&lt;char> ToString() const;</syntax>
                            <returnType ref="type.4607054"/>
                        </function>
                        <function id="member_function_Value_JsonString_1D360D73C54B65BBE85083AC095029213ED568BA">
                            <name>Value() const</name>
                            <syntax>public nothrow inline const String&lt;uchar>&amp; Value() const;</syntax>
                            <returnType ref="type.4607147"/>
                        </function>
                    </functions>
                </class>
                <class id="class_JsonValue_B86942C2856CC5758E1FB19BBBE97E4002D4008A">
                    <name>JsonValue</name>
                    <groupName>JsonValue</groupName>
                    <syntax>abstract public class JsonValue;</syntax>
                    <functions>
                        <function id="member_function_ToString_JsonValue_0E8D02CC91EA26B2A9A8AF1C11DF12FD5FE86F31">
                            <name>ToString() const</name>
                            <syntax>public abstract String&lt;char> ToString() const;</syntax>
                            <returnType ref="type.4607054"/>
                        </function>
                    </functions>
                </class>
            </classes>
            <functions>
                <function id="function_group_FromJson_22997B691ACDD99EB254F19DD18F75F989FE89EF">
                    <name>FromJson</name>
                    <overloads>
                        <overload id="function_FromJson_0D468A43DEB7747049443EB4EF884A4135625F54">
                            <name>FromJson(JsonValue* container, const String&lt;char>&amp; fieldName, String&lt;char>&amp; field)</name>
                            <syntax>public void FromJson(JsonValue* container, const String&lt;char>&amp; fieldName, String&lt;char>&amp; field);</syntax>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.4616576"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.4607059"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.4607056"/>
                                </parameter>
                            </parameters>
                        </overload>
                        <overload id="function_FromJson_FD4DA9B1398050558E5BF922A072C03C129097FB">
                            <name>FromJson(JsonValue* container, const String&lt;char>&amp; fieldName, String&lt;uchar>&amp; field)</name>
                            <syntax>public void FromJson(JsonValue* container, const String&lt;char>&amp; fieldName, String&lt;uchar>&amp; field);</syntax>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.4616576"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.4607059"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.4607144"/>
                                </parameter>
                            </parameters>
                        </overload>
                        <overload id="function_FromJson_8D111EF5D30668FB333D278DE18BB7084EC1BEC1">
                            <name>FromJson(JsonValue* container, const String&lt;char>&amp; fieldName, String&lt;wchar>&amp; field)</name>
                            <syntax>public void FromJson(JsonValue* container, const String&lt;char>&amp; fieldName, String&lt;wchar>&amp; field);</syntax>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.4616576"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.4607059"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.4607099"/>
                                </parameter>
                            </parameters>
                        </overload>
                        <overload id="function_FromJson_5452FE9912EEC2CAD2FCDDA224EC9780340F70E3">
                            <name>FromJson(JsonValue* container, const String&lt;char>&amp; fieldName, bool&amp; field)</name>
                            <syntax>public void FromJson(JsonValue* container, const String&lt;char>&amp; fieldName, bool&amp; field);</syntax>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.4616576"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.4607059"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.4605947"/>
                                </parameter>
                            </parameters>
                        </overload>
                        <overload id="function_FromJson_E0103885FB5C2EAA85A69FB9E3B88B0F08505C38">
                            <name>FromJson(JsonValue* container, const String&lt;char>&amp; fieldName, double&amp; field)</name>
                            <syntax>public void FromJson(JsonValue* container, const String&lt;char>&amp; fieldName, double&amp; field);</syntax>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.4616576"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.4607059"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.4605977"/>
                                </parameter>
                            </parameters>
                        </overload>
                        <overload id="function_FromJson_54062682CD69EE8046DDAA7F0FC20A9EE527901D">
                            <name>FromJson(JsonValue* container, const String&lt;char>&amp; fieldName, int&amp; field)</name>
                            <syntax>public void FromJson(JsonValue* container, const String&lt;char>&amp; fieldName, int&amp; field);</syntax>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.4616576"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.4607059"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.4605962"/>
                                </parameter>
                            </parameters>
                        </overload>
                        <overload id="function_FromJson_0FDE02F2AC8E3A1E0E469FC27DE91FAB6714F244">
                            <name>FromJson(JsonValue* container, const String&lt;uchar>&amp; fieldName, String&lt;char>&amp; field)</name>
                            <syntax>public void FromJson(JsonValue* container, const String&lt;uchar>&amp; fieldName, String&lt;char>&amp; field);</syntax>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.4616576"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.4607147"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.4607056"/>
                                </parameter>
                            </parameters>
                        </overload>
                        <overload id="function_FromJson_F738AFA288AFAB4C745BD61D99B2EEEA6337335D">
                            <name>FromJson(JsonValue* container, const String&lt;uchar>&amp; fieldName, String&lt;uchar>&amp; field)</name>
                            <syntax>public void FromJson(JsonValue* container, const String&lt;uchar>&amp; fieldName, String&lt;uchar>&amp; field);</syntax>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.4616576"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.4607147"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.4607144"/>
                                </parameter>
                            </parameters>
                        </overload>
                        <overload id="function_FromJson_37C1ACCEBB7EDA0F42A57D178260B0143BBEBA17">
                            <name>FromJson(JsonValue* container, const String&lt;uchar>&amp; fieldName, String&lt;wchar>&amp; field)</name>
                            <syntax>public void FromJson(JsonValue* container, const String&lt;uchar>&amp; fieldName, String&lt;wchar>&amp; field);</syntax>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.4616576"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.4607147"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.4607099"/>
                                </parameter>
                            </parameters>
                        </overload>
                        <overload id="function_FromJson_4B7564FFFFF32A4E3B2D0AD8B2601BB144CC2935">
                            <name>FromJson(JsonValue* container, const String&lt;uchar>&amp; fieldName, bool&amp; field)</name>
                            <syntax>public void FromJson(JsonValue* container, const String&lt;uchar>&amp; fieldName, bool&amp; field);</syntax>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.4616576"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.4607147"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.4605947"/>
                                </parameter>
                            </parameters>
                        </overload>
                        <overload id="function_FromJson_DB824D49846A7E03111FBBB884E79002D2431F8A">
                            <name>FromJson(JsonValue* container, const String&lt;uchar>&amp; fieldName, double&amp; field)</name>
                            <syntax>public void FromJson(JsonValue* container, const String&lt;uchar>&amp; fieldName, double&amp; field);</syntax>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.4616576"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.4607147"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.4605977"/>
                                </parameter>
                            </parameters>
                        </overload>
                        <overload id="function_FromJson_9D0EF3A56DF7ED266DB174141193A894B5A409EC">
                            <name>FromJson(JsonValue* container, const String&lt;uchar>&amp; fieldName, int&amp; field)</name>
                            <syntax>public void FromJson(JsonValue* container, const String&lt;uchar>&amp; fieldName, int&amp; field);</syntax>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.4616576"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.4607147"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.4605962"/>
                                </parameter>
                            </parameters>
                        </overload>
                        <overload id="function_FromJson_28A1E6951F82E0549D2DF5680C519D9FC076C9CB">
                            <name>FromJson(JsonValue* container, const String&lt;wchar>&amp; fieldName, String&lt;char>&amp; field)</name>
                            <syntax>public void FromJson(JsonValue* container, const String&lt;wchar>&amp; fieldName, String&lt;char>&amp; field);</syntax>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.4616576"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.4607102"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.4607056"/>
                                </parameter>
                            </parameters>
                        </overload>
                        <overload id="function_FromJson_B966CCBA3C2871F5525034998A78EA8217194B24">
                            <name>FromJson(JsonValue* container, const String&lt;wchar>&amp; fieldName, String&lt;uchar>&amp; field)</name>
                            <syntax>public void FromJson(JsonValue* container, const String&lt;wchar>&amp; fieldName, String&lt;uchar>&amp; field);</syntax>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.4616576"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.4607102"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.4607144"/>
                                </parameter>
                            </parameters>
                        </overload>
                        <overload id="function_FromJson_8EAA46E11086492741B83B71530310637D8DE4AB">
                            <name>FromJson(JsonValue* container, const String&lt;wchar>&amp; fieldName, String&lt;wchar>&amp; field)</name>
                            <syntax>public void FromJson(JsonValue* container, const String&lt;wchar>&amp; fieldName, String&lt;wchar>&amp; field);</syntax>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.4616576"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.4607102"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.4607099"/>
                                </parameter>
                            </parameters>
                        </overload>
                        <overload id="function_FromJson_E5E9BCD1395BC8C39A06FB102FF0B9E8DDF22E56">
                            <name>FromJson(JsonValue* container, const String&lt;wchar>&amp; fieldName, bool&amp; field)</name>
                            <syntax>public void FromJson(JsonValue* container, const String&lt;wchar>&amp; fieldName, bool&amp; field);</syntax>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.4616576"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.4607102"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.4605947"/>
                                </parameter>
                            </parameters>
                        </overload>
                        <overload id="function_FromJson_62C4C32E61B89D3AB75712DBABEA0BFC3F5B1976">
                            <name>FromJson(JsonValue* container, const String&lt;wchar>&amp; fieldName, double&amp; field)</name>
                            <syntax>public void FromJson(JsonValue* container, const String&lt;wchar>&amp; fieldName, double&amp; field);</syntax>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.4616576"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.4607102"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.4605977"/>
                                </parameter>
                            </parameters>
                        </overload>
                        <overload id="function_FromJson_4B63168BDE07291BB93873BB968CC902EA2EA499">
                            <name>FromJson(JsonValue* container, const String&lt;wchar>&amp; fieldName, int&amp; field)</name>
                            <syntax>public void FromJson(JsonValue* container, const String&lt;wchar>&amp; fieldName, int&amp; field);</syntax>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.4616576"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.4607102"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.4605962"/>
                                </parameter>
                            </parameters>
                        </overload>
                        <overload id="function_FromJson_B24EF3B2CA6DACDDA40455C0BAC1F81D35CBB64B">
                            <name>FromJson(JsonValue* value, String&lt;char>&amp; field)</name>
                            <syntax>public void FromJson(JsonValue* value, String&lt;char>&amp; field);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.4616576"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.4607056"/>
                                </parameter>
                            </parameters>
                        </overload>
                        <overload id="function_FromJson_D379803A898D08C1B1B70B198CDCF31596A8FAEF">
                            <name>FromJson(JsonValue* value, String&lt;uchar>&amp; field)</name>
                            <syntax>public void FromJson(JsonValue* value, String&lt;uchar>&amp; field);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.4616576"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.4607144"/>
                                </parameter>
                            </parameters>
                        </overload>
                        <overload id="function_FromJson_135453EE5B5381C490F9AA5A9DB42B54B8B0D473">
                            <name>FromJson(JsonValue* value, String&lt;wchar>&amp; field)</name>
                            <syntax>public void FromJson(JsonValue* value, String&lt;wchar>&amp; field);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.4616576"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.4607099"/>
                                </parameter>
                            </parameters>
                        </overload>
                        <overload id="function_FromJson_1A5EF2BB505A65AE272D6778E5C726D7152C8209">
                            <name>FromJson(JsonValue* value, bool&amp; field)</name>
                            <syntax>public void FromJson(JsonValue* value, bool&amp; field);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.4616576"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.4605947"/>
                                </parameter>
                            </parameters>
                        </overload>
                        <overload id="function_FromJson_EE92D51E43D5311A8A834EC6CAFD7552BC74BC2C">
                            <name>FromJson(JsonValue* value, double&amp; field)</name>
                            <syntax>public void FromJson(JsonValue* value, double&amp; field);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.4616576"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.4605977"/>
                                </parameter>
                            </parameters>
                        </overload>
                        <overload id="function_FromJson_312EBF86915CFC46CC7A612B242406BD677FAF3C">
                            <name>FromJson(JsonValue* value, int&amp; field)</name>
                            <syntax>public void FromJson(JsonValue* value, int&amp; field);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.4616576"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.4605962"/>
                                </parameter>
                            </parameters>
                        </overload>
                        <overload id="function_FromJson_FFAD692C1C6A68793C98499789D9D0995D7D5432">
                            <name>FromJson&lt;K, T, H, C>(JsonValue* container, const String&lt;char>&amp; fieldName, HashMap&lt;K, T, H, C>&amp; field) where T is JsonValueType or T is JsonConstructible</name>
                            <syntax>public void FromJson&lt;K, T, H, C>(JsonValue* container, const String&lt;char>&amp; fieldName, HashMap&lt;K, T, H, C>&amp; field);</syntax>
                            <templateParameters>
                                <templateParameter id="4616736">
                                    <name>K</name>
                                </templateParameter>
                                <templateParameter id="4616737">
                                    <name>T</name>
                                </templateParameter>
                                <templateParameter id="4616738">
                                    <name>H</name>
                                </templateParameter>
                                <templateParameter id="4616739">
                                    <name>C</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.4616576"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.4607059"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.4618649"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="4616737"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonValueType_6519CA3F247A823EA53E9BBD4C42E505C0A78F5D"/>
                                <connector>or</connector>
                                <type ref="4616737"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonConstructible_FDF8EB5A6050ED39397E14EF89FACCA63F29DDF2"/>
                            </constraint>
                        </overload>
                        <overload id="function_FromJson_E3F84A3CD39C44F180D8531D0B9613C98EED3828">
                            <name>FromJson&lt;K, T, H, C>(JsonValue* container, const String&lt;uchar>&amp; fieldName, HashMap&lt;K, T, H, C>&amp; field) where T is JsonValueType or T is JsonConstructible</name>
                            <syntax>public void FromJson&lt;K, T, H, C>(JsonValue* container, const String&lt;uchar>&amp; fieldName, HashMap&lt;K, T, H, C>&amp; field);</syntax>
                            <templateParameters>
                                <templateParameter id="4616744">
                                    <name>K</name>
                                </templateParameter>
                                <templateParameter id="4616745">
                                    <name>T</name>
                                </templateParameter>
                                <templateParameter id="4616746">
                                    <name>H</name>
                                </templateParameter>
                                <templateParameter id="4616747">
                                    <name>C</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.4616576"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.4607147"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.4618805"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="4616745"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonValueType_6519CA3F247A823EA53E9BBD4C42E505C0A78F5D"/>
                                <connector>or</connector>
                                <type ref="4616745"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonConstructible_FDF8EB5A6050ED39397E14EF89FACCA63F29DDF2"/>
                            </constraint>
                        </overload>
                        <overload id="function_FromJson_1841BC18B6B4F57155CA82AD178323BC48F79296">
                            <name>FromJson&lt;K, T, H, C>(JsonValue* container, const String&lt;wchar>&amp; fieldName, HashMap&lt;K, T, H, C>&amp; field) where T is JsonValueType or T is JsonConstructible</name>
                            <syntax>public void FromJson&lt;K, T, H, C>(JsonValue* container, const String&lt;wchar>&amp; fieldName, HashMap&lt;K, T, H, C>&amp; field);</syntax>
                            <templateParameters>
                                <templateParameter id="4616740">
                                    <name>K</name>
                                </templateParameter>
                                <templateParameter id="4616741">
                                    <name>T</name>
                                </templateParameter>
                                <templateParameter id="4616742">
                                    <name>H</name>
                                </templateParameter>
                                <templateParameter id="4616743">
                                    <name>C</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.4616576"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.4607102"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.4618727"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="4616741"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonValueType_6519CA3F247A823EA53E9BBD4C42E505C0A78F5D"/>
                                <connector>or</connector>
                                <type ref="4616741"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonConstructible_FDF8EB5A6050ED39397E14EF89FACCA63F29DDF2"/>
                            </constraint>
                        </overload>
                        <overload id="function_FromJson_F0AB8F8B2A3CAB4709E73C0B40ADEC76D5381496">
                            <name>FromJson&lt;K, T, H, C>(JsonValue* value, HashMap&lt;K, T, H, C>&amp; field) where K is ustring and T is JsonValueType</name>
                            <syntax>public void FromJson&lt;K, T, H, C>(JsonValue* value, HashMap&lt;K, T, H, C>&amp; field);</syntax>
                            <templateParameters>
                                <templateParameter id="4616711">
                                    <name>K</name>
                                </templateParameter>
                                <templateParameter id="4616712">
                                    <name>T</name>
                                </templateParameter>
                                <templateParameter id="4616713">
                                    <name>H</name>
                                </templateParameter>
                                <templateParameter id="4616714">
                                    <name>C</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.4616576"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.4618150"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="4616711"/>
                                <connector>is</connector>
                                <type ref="type.4607142"/>
                                <connector>and</connector>
                                <type ref="4616712"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonValueType_6519CA3F247A823EA53E9BBD4C42E505C0A78F5D"/>
                            </constraint>
                        </overload>
                        <overload id="function_FromJson_CA66F53A4B7279D7819C28DF759545627929AC07">
                            <name>FromJson&lt;K, T, H, C>(JsonValue* value, HashMap&lt;K, T, H, C>&amp; field) where K is wstring and T is JsonValueType</name>
                            <syntax>public void FromJson&lt;K, T, H, C>(JsonValue* value, HashMap&lt;K, T, H, C>&amp; field);</syntax>
                            <templateParameters>
                                <templateParameter id="4616715">
                                    <name>K</name>
                                </templateParameter>
                                <templateParameter id="4616716">
                                    <name>T</name>
                                </templateParameter>
                                <templateParameter id="4616717">
                                    <name>H</name>
                                </templateParameter>
                                <templateParameter id="4616718">
                                    <name>C</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.4616576"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.4618228"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="4616715"/>
                                <connector>is</connector>
                                <type ref="type.4607097"/>
                                <connector>and</connector>
                                <type ref="4616716"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonValueType_6519CA3F247A823EA53E9BBD4C42E505C0A78F5D"/>
                            </constraint>
                        </overload>
                        <overload id="function_FromJson_9CEA6C1C5DCE40E3C08ED971B107560C25A2BD58">
                            <name>FromJson&lt;K, T, H, C>(JsonValue* value, HashMap&lt;K, T, H, C>&amp; field) where K is string and T is JsonValueType</name>
                            <syntax>public void FromJson&lt;K, T, H, C>(JsonValue* value, HashMap&lt;K, T, H, C>&amp; field);</syntax>
                            <templateParameters>
                                <templateParameter id="4616719">
                                    <name>K</name>
                                </templateParameter>
                                <templateParameter id="4616720">
                                    <name>T</name>
                                </templateParameter>
                                <templateParameter id="4616721">
                                    <name>H</name>
                                </templateParameter>
                                <templateParameter id="4616722">
                                    <name>C</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.4616576"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.4618306"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="4616719"/>
                                <connector>is</connector>
                                <type ref="type.4607054"/>
                                <connector>and</connector>
                                <type ref="4616720"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonValueType_6519CA3F247A823EA53E9BBD4C42E505C0A78F5D"/>
                            </constraint>
                        </overload>
                        <overload id="function_FromJson_835C4BD46FFB629533B1344AF81392E241235C5A">
                            <name>FromJson&lt;Key, Value, KeyCompare>(JsonValue* container, const String&lt;char>&amp; fieldName, Map&lt;Key, Value, KeyCompare>&amp; field) where Value is JsonValueType or Value is JsonConstructible</name>
                            <syntax>public void FromJson&lt;Key, Value, KeyCompare>(JsonValue* container, const String&lt;char>&amp; fieldName, Map&lt;Key, Value, KeyCompare>&amp; field);</syntax>
                            <templateParameters>
                                <templateParameter id="4616727">
                                    <name>Key</name>
                                </templateParameter>
                                <templateParameter id="4616728">
                                    <name>Value</name>
                                </templateParameter>
                                <templateParameter id="4616729">
                                    <name>KeyCompare</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.4616576"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.4607059"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.4618466"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="4616728"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonValueType_6519CA3F247A823EA53E9BBD4C42E505C0A78F5D"/>
                                <connector>or</connector>
                                <type ref="4616728"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonConstructible_FDF8EB5A6050ED39397E14EF89FACCA63F29DDF2"/>
                            </constraint>
                        </overload>
                        <overload id="function_FromJson_6F1E1E91A9CE9B3F27A7E95F2032FBD9785CC5CD">
                            <name>FromJson&lt;Key, Value, KeyCompare>(JsonValue* container, const String&lt;uchar>&amp; fieldName, Map&lt;Key, Value, KeyCompare>&amp; field) where Value is JsonValueType or Value is JsonConstructible</name>
                            <syntax>public void FromJson&lt;Key, Value, KeyCompare>(JsonValue* container, const String&lt;uchar>&amp; fieldName, Map&lt;Key, Value, KeyCompare>&amp; field);</syntax>
                            <templateParameters>
                                <templateParameter id="4616733">
                                    <name>Key</name>
                                </templateParameter>
                                <templateParameter id="4616734">
                                    <name>Value</name>
                                </templateParameter>
                                <templateParameter id="4616735">
                                    <name>KeyCompare</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.4616576"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.4607147"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.4618588"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="4616734"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonValueType_6519CA3F247A823EA53E9BBD4C42E505C0A78F5D"/>
                                <connector>or</connector>
                                <type ref="4616734"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonConstructible_FDF8EB5A6050ED39397E14EF89FACCA63F29DDF2"/>
                            </constraint>
                        </overload>
                        <overload id="function_FromJson_141AD8D028A1463F11D57A1CC7D3DDBCA7EC1A26">
                            <name>FromJson&lt;Key, Value, KeyCompare>(JsonValue* container, const String&lt;wchar>&amp; fieldName, Map&lt;Key, Value, KeyCompare>&amp; field) where Value is JsonValueType or Value is JsonConstructible</name>
                            <syntax>public void FromJson&lt;Key, Value, KeyCompare>(JsonValue* container, const String&lt;wchar>&amp; fieldName, Map&lt;Key, Value, KeyCompare>&amp; field);</syntax>
                            <templateParameters>
                                <templateParameter id="4616730">
                                    <name>Key</name>
                                </templateParameter>
                                <templateParameter id="4616731">
                                    <name>Value</name>
                                </templateParameter>
                                <templateParameter id="4616732">
                                    <name>KeyCompare</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.4616576"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.4607102"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.4618527"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="4616731"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonValueType_6519CA3F247A823EA53E9BBD4C42E505C0A78F5D"/>
                                <connector>or</connector>
                                <type ref="4616731"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonConstructible_FDF8EB5A6050ED39397E14EF89FACCA63F29DDF2"/>
                            </constraint>
                        </overload>
                        <overload id="function_FromJson_F0428D168859D23AC8741373B4D4CE9BD7E604BF">
                            <name>FromJson&lt;Key, Value, KeyCompare>(JsonValue* value, Map&lt;Key, Value, KeyCompare>&amp; field) where Key is wstring and Value is JsonValueType</name>
                            <syntax>public void FromJson&lt;Key, Value, KeyCompare>(JsonValue* value, Map&lt;Key, Value, KeyCompare>&amp; field);</syntax>
                            <templateParameters>
                                <templateParameter id="4616696">
                                    <name>Key</name>
                                </templateParameter>
                                <templateParameter id="4616697">
                                    <name>Value</name>
                                </templateParameter>
                                <templateParameter id="4616698">
                                    <name>KeyCompare</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.4616576"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.4617845"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="4616696"/>
                                <connector>is</connector>
                                <type ref="type.4607097"/>
                                <connector>and</connector>
                                <type ref="4616697"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonValueType_6519CA3F247A823EA53E9BBD4C42E505C0A78F5D"/>
                            </constraint>
                        </overload>
                        <overload id="function_FromJson_5549A8B6E26ED0527CDEAD71A05C23A4AAE3F70F">
                            <name>FromJson&lt;Key, Value, KeyCompare>(JsonValue* value, Map&lt;Key, Value, KeyCompare>&amp; field) where Key is ustring and Value is JsonConstructible</name>
                            <syntax>public void FromJson&lt;Key, Value, KeyCompare>(JsonValue* value, Map&lt;Key, Value, KeyCompare>&amp; field);</syntax>
                            <templateParameters>
                                <templateParameter id="4616702">
                                    <name>Key</name>
                                </templateParameter>
                                <templateParameter id="4616703">
                                    <name>Value</name>
                                </templateParameter>
                                <templateParameter id="4616704">
                                    <name>KeyCompare</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.4616576"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.4617967"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="4616702"/>
                                <connector>is</connector>
                                <type ref="type.4607142"/>
                                <connector>and</connector>
                                <type ref="4616703"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonConstructible_FDF8EB5A6050ED39397E14EF89FACCA63F29DDF2"/>
                            </constraint>
                        </overload>
                        <overload id="function_FromJson_1824593656021EB8DC78E7379E9787F7EA4BC08C">
                            <name>FromJson&lt;Key, Value, KeyCompare>(JsonValue* value, Map&lt;Key, Value, KeyCompare>&amp; field) where Key is wstring and Value is JsonConstructible</name>
                            <syntax>public void FromJson&lt;Key, Value, KeyCompare>(JsonValue* value, Map&lt;Key, Value, KeyCompare>&amp; field);</syntax>
                            <templateParameters>
                                <templateParameter id="4616705">
                                    <name>Key</name>
                                </templateParameter>
                                <templateParameter id="4616706">
                                    <name>Value</name>
                                </templateParameter>
                                <templateParameter id="4616707">
                                    <name>KeyCompare</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.4616576"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.4618028"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="4616705"/>
                                <connector>is</connector>
                                <type ref="type.4607097"/>
                                <connector>and</connector>
                                <type ref="4616706"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonConstructible_FDF8EB5A6050ED39397E14EF89FACCA63F29DDF2"/>
                            </constraint>
                        </overload>
                        <overload id="function_FromJson_86B24EEC8A29EEDEEB1BDA72F46E16FF97EDB455">
                            <name>FromJson&lt;Key, Value, KeyCompare>(JsonValue* value, Map&lt;Key, Value, KeyCompare>&amp; field) where Key is string and Value is JsonConstructible</name>
                            <syntax>public void FromJson&lt;Key, Value, KeyCompare>(JsonValue* value, Map&lt;Key, Value, KeyCompare>&amp; field);</syntax>
                            <templateParameters>
                                <templateParameter id="4616708">
                                    <name>Key</name>
                                </templateParameter>
                                <templateParameter id="4616709">
                                    <name>Value</name>
                                </templateParameter>
                                <templateParameter id="4616710">
                                    <name>KeyCompare</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.4616576"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.4618089"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="4616708"/>
                                <connector>is</connector>
                                <type ref="type.4607054"/>
                                <connector>and</connector>
                                <type ref="4616709"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonConstructible_FDF8EB5A6050ED39397E14EF89FACCA63F29DDF2"/>
                            </constraint>
                        </overload>
                        <overload id="function_FromJson_325A8C52C7395B16BC61FCDE988845CF3900DD30">
                            <name>FromJson&lt;Key, Value, KeyCompare>(JsonValue* value, Map&lt;Key, Value, KeyCompare>&amp; field) where Key is string and Value is JsonValueType</name>
                            <syntax>public void FromJson&lt;Key, Value, KeyCompare>(JsonValue* value, Map&lt;Key, Value, KeyCompare>&amp; field);</syntax>
                            <templateParameters>
                                <templateParameter id="4616699">
                                    <name>Key</name>
                                </templateParameter>
                                <templateParameter id="4616700">
                                    <name>Value</name>
                                </templateParameter>
                                <templateParameter id="4616701">
                                    <name>KeyCompare</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.4616576"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.4617906"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="4616699"/>
                                <connector>is</connector>
                                <type ref="type.4607054"/>
                                <connector>and</connector>
                                <type ref="4616700"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonValueType_6519CA3F247A823EA53E9BBD4C42E505C0A78F5D"/>
                            </constraint>
                        </overload>
                        <overload id="function_FromJson_293CA650CEA60428E41363EF452297EA636E2B53">
                            <name>FromJson&lt;Key, Value, KeyCompare>(JsonValue* value, Map&lt;Key, Value, KeyCompare>&amp; field) where Key is ustring and Value is JsonValueType</name>
                            <syntax>public void FromJson&lt;Key, Value, KeyCompare>(JsonValue* value, Map&lt;Key, Value, KeyCompare>&amp; field);</syntax>
                            <templateParameters>
                                <templateParameter id="4616693">
                                    <name>Key</name>
                                </templateParameter>
                                <templateParameter id="4616694">
                                    <name>Value</name>
                                </templateParameter>
                                <templateParameter id="4616695">
                                    <name>KeyCompare</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.4616576"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.4617784"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="4616693"/>
                                <connector>is</connector>
                                <type ref="type.4607142"/>
                                <connector>and</connector>
                                <type ref="4616694"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonValueType_6519CA3F247A823EA53E9BBD4C42E505C0A78F5D"/>
                            </constraint>
                        </overload>
                        <overload id="function_FromJson_72C2B78EE74B873441A263F7D964176DF45A1536">
                            <name>FromJson&lt;T>(JsonValue* container, const String&lt;char>&amp; fieldName, List&lt;T>&amp; field) where T is JsonValueType or T is JsonConstructible</name>
                            <syntax>public void FromJson&lt;T>(JsonValue* container, const String&lt;char>&amp; fieldName, List&lt;T>&amp; field);</syntax>
                            <templateParameters>
                                <templateParameter id="4616724">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.4616576"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.4607059"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.4618385"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="4616724"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonValueType_6519CA3F247A823EA53E9BBD4C42E505C0A78F5D"/>
                                <connector>or</connector>
                                <type ref="4616724"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonConstructible_FDF8EB5A6050ED39397E14EF89FACCA63F29DDF2"/>
                            </constraint>
                        </overload>
                        <overload id="function_FromJson_E85B239D4801966BC0C36D7D0EABDB6B3B4153A6">
                            <name>FromJson&lt;T>(JsonValue* container, const String&lt;char>&amp; fieldName, T&amp; field) where T is JsonConstructible</name>
                            <syntax>public void FromJson&lt;T>(JsonValue* container, const String&lt;char>&amp; fieldName, T&amp; field);</syntax>
                            <templateParameters>
                                <templateParameter id="4616748">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.4616576"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.4607059"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.4618881"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="4616748"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonConstructible_FDF8EB5A6050ED39397E14EF89FACCA63F29DDF2"/>
                            </constraint>
                        </overload>
                        <overload id="function_FromJson_7A814D4F5941FE9E25A4AE5425820D5FD4FF9BE3">
                            <name>FromJson&lt;T>(JsonValue* container, const String&lt;uchar>&amp; fieldName, List&lt;T>&amp; field) where T is JsonValueType or T is JsonConstructible</name>
                            <syntax>public void FromJson&lt;T>(JsonValue* container, const String&lt;uchar>&amp; fieldName, List&lt;T>&amp; field);</syntax>
                            <templateParameters>
                                <templateParameter id="4616726">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.4616576"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.4607147"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.4618439"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="4616726"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonValueType_6519CA3F247A823EA53E9BBD4C42E505C0A78F5D"/>
                                <connector>or</connector>
                                <type ref="4616726"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonConstructible_FDF8EB5A6050ED39397E14EF89FACCA63F29DDF2"/>
                            </constraint>
                        </overload>
                        <overload id="function_FromJson_95041BE10F45478E45EE3508DCFE9BF440E370C6">
                            <name>FromJson&lt;T>(JsonValue* container, const String&lt;uchar>&amp; fieldName, T&amp; field) where T is JsonConstructible</name>
                            <syntax>public void FromJson&lt;T>(JsonValue* container, const String&lt;uchar>&amp; fieldName, T&amp; field);</syntax>
                            <templateParameters>
                                <templateParameter id="4616750">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.4616576"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.4607147"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.4618883"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="4616750"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonConstructible_FDF8EB5A6050ED39397E14EF89FACCA63F29DDF2"/>
                            </constraint>
                        </overload>
                        <overload id="function_FromJson_FF155A7B997D3D253B9080C12E91442E4B3EADD2">
                            <name>FromJson&lt;T>(JsonValue* container, const String&lt;wchar>&amp; fieldName, List&lt;T>&amp; field) where T is JsonValueType or T is JsonConstructible</name>
                            <syntax>public void FromJson&lt;T>(JsonValue* container, const String&lt;wchar>&amp; fieldName, List&lt;T>&amp; field);</syntax>
                            <templateParameters>
                                <templateParameter id="4616725">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.4616576"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.4607102"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.4618412"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="4616725"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonValueType_6519CA3F247A823EA53E9BBD4C42E505C0A78F5D"/>
                                <connector>or</connector>
                                <type ref="4616725"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonConstructible_FDF8EB5A6050ED39397E14EF89FACCA63F29DDF2"/>
                            </constraint>
                        </overload>
                        <overload id="function_FromJson_06EC9ABFB5085084F92AC14030C24A856303CCC9">
                            <name>FromJson&lt;T>(JsonValue* container, const String&lt;wchar>&amp; fieldName, T&amp; field) where T is JsonConstructible</name>
                            <syntax>public void FromJson&lt;T>(JsonValue* container, const String&lt;wchar>&amp; fieldName, T&amp; field);</syntax>
                            <templateParameters>
                                <templateParameter id="4616749">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>container</name>
                                    <type ref="type.4616576"/>
                                </parameter>
                                <parameter>
                                    <name>fieldName</name>
                                    <type ref="type.4607102"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.4618882"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="4616749"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonConstructible_FDF8EB5A6050ED39397E14EF89FACCA63F29DDF2"/>
                            </constraint>
                        </overload>
                        <overload id="function_FromJson_1220656BC9EA62B69E42434C079779589A12546B">
                            <name>FromJson&lt;T>(JsonValue* value, List&lt;T>&amp; field) where T is JsonConstructible</name>
                            <syntax>public void FromJson&lt;T>(JsonValue* value, List&lt;T>&amp; field);</syntax>
                            <templateParameters>
                                <templateParameter id="4616692">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.4616576"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.4617757"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="4616692"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonConstructible_FDF8EB5A6050ED39397E14EF89FACCA63F29DDF2"/>
                            </constraint>
                        </overload>
                        <overload id="function_FromJson_9ED7B774E057E767955AA4BFB6975EA22778FFBA">
                            <name>FromJson&lt;T>(JsonValue* value, List&lt;T>&amp; field) where T is JsonValueType</name>
                            <syntax>public void FromJson&lt;T>(JsonValue* value, List&lt;T>&amp; field);</syntax>
                            <templateParameters>
                                <templateParameter id="4616691">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.4616576"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.4617730"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="4616691"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonValueType_6519CA3F247A823EA53E9BBD4C42E505C0A78F5D"/>
                            </constraint>
                        </overload>
                        <overload id="function_FromJson_E078F94C43EA1E961A54E8B518B61B936C577B8C">
                            <name>FromJson&lt;T>(JsonValue* value, T&amp; field) where T is JsonConstructible</name>
                            <syntax>public void FromJson&lt;T>(JsonValue* value, T&amp; field);</syntax>
                            <templateParameters>
                                <templateParameter id="4616723">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.4616576"/>
                                </parameter>
                                <parameter>
                                    <name>field</name>
                                    <type ref="type.4618382"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="4616723"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonConstructible_FDF8EB5A6050ED39397E14EF89FACCA63F29DDF2"/>
                            </constraint>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_ParseJson_D0F1BA19044FC5C9F02861FE13E01F68658D55A5">
                    <name>ParseJson</name>
                    <overloads>
                        <overload id="function_ParseJson_DBF1730C39BEE47518DDF489C3C1CA7CC4D29DFF">
                            <name>ParseJson(const String&lt;char>&amp; jsonText)</name>
                            <syntax>public UniquePtr&lt;System.Json.JsonValue> ParseJson(const String&lt;char>&amp; jsonText);</syntax>
                            <parameters>
                                <parameter>
                                    <name>jsonText</name>
                                    <type ref="type.4607059"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.4617315"/>
                        </overload>
                        <overload id="function_ParseJson_AA1EB3D4CCCAA45FDB88817F137BB8925D3738A7">
                            <name>ParseJson(const String&lt;uchar>&amp; jsonText)</name>
                            <syntax>public UniquePtr&lt;System.Json.JsonValue> ParseJson(const String&lt;uchar>&amp; jsonText);</syntax>
                            <parameters>
                                <parameter>
                                    <name>jsonText</name>
                                    <type ref="type.4607147"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.4617315"/>
                        </overload>
                        <overload id="function_ParseJson_2F088677CC9179ED41188E987956FF77EB3BEDB4">
                            <name>ParseJson(const String&lt;wchar>&amp; jsonText)</name>
                            <syntax>public UniquePtr&lt;System.Json.JsonValue> ParseJson(const String&lt;wchar>&amp; jsonText);</syntax>
                            <parameters>
                                <parameter>
                                    <name>jsonText</name>
                                    <type ref="type.4607102"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.4617315"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_ToJson_80373CB69AD5A80A6592CC2418A5282FCB2D0F14">
                    <name>ToJson</name>
                    <overloads>
                        <overload id="function_ToJson_574858316A43DEC277D82C9372FC90DD066D0EAC">
                            <name>ToJson(bool value)</name>
                            <syntax>public nothrow UniquePtr&lt;System.Json.JsonValue> ToJson(bool value);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.4605930"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.4617315"/>
                        </overload>
                        <overload id="function_ToJson_B74042AE374BEB28C90779B6CA4C98DA72081002">
                            <name>ToJson(const String&lt;char>&amp; value)</name>
                            <syntax>public UniquePtr&lt;System.Json.JsonValue> ToJson(const String&lt;char>&amp; value);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.4607059"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.4617315"/>
                        </overload>
                        <overload id="function_ToJson_7F3B903221E5DAB4017615FC50EE5FBC968600F8">
                            <name>ToJson(const String&lt;uchar>&amp; value)</name>
                            <syntax>public nothrow UniquePtr&lt;System.Json.JsonValue> ToJson(const String&lt;uchar>&amp; value);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.4607147"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.4617315"/>
                        </overload>
                        <overload id="function_ToJson_53C005E9773AC76D691F59144E23E4AE81E6EB16">
                            <name>ToJson(const String&lt;wchar>&amp; value)</name>
                            <syntax>public UniquePtr&lt;System.Json.JsonValue> ToJson(const String&lt;wchar>&amp; value);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.4607102"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.4617315"/>
                        </overload>
                        <overload id="function_ToJson_67DBD75B6175FD816B5C6F7218DFE8FED2B4B7F7">
                            <name>ToJson(double value)</name>
                            <syntax>public nothrow UniquePtr&lt;System.Json.JsonValue> ToJson(double value);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.4605940"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.4617315"/>
                        </overload>
                        <overload id="function_ToJson_91FBDD8DFFF0BEB6D6C29EC753DF3D9249916F3C">
                            <name>ToJson&lt;K, T, H, C>(const HashMap&lt;K, T, H, C>&amp; value) where K is wstring or K is string</name>
                            <syntax>public UniquePtr&lt;System.Json.JsonValue> ToJson&lt;K, T, H, C>(const HashMap&lt;K, T, H, C>&amp; value);</syntax>
                            <templateParameters>
                                <templateParameter id="4616635">
                                    <name>K</name>
                                </templateParameter>
                                <templateParameter id="4616636">
                                    <name>T</name>
                                </templateParameter>
                                <templateParameter id="4616637">
                                    <name>H</name>
                                </templateParameter>
                                <templateParameter id="4616638">
                                    <name>C</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.4617649"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.4617315"/>
                            <constraint>
                                <type ref="4616635"/>
                                <connector>is</connector>
                                <type ref="type.4607097"/>
                                <connector>or</connector>
                                <type ref="4616635"/>
                                <connector>is</connector>
                                <type ref="type.4607054"/>
                            </constraint>
                        </overload>
                        <overload id="function_ToJson_D41D6D0DCA6C2F2E779486F47F8BFD91D47426EA">
                            <name>ToJson&lt;K, T, H, C>(const HashMap&lt;K, T, H, C>&amp; value) where K is ustring</name>
                            <syntax>public UniquePtr&lt;System.Json.JsonValue> ToJson&lt;K, T, H, C>(const HashMap&lt;K, T, H, C>&amp; value);</syntax>
                            <templateParameters>
                                <templateParameter id="4616631">
                                    <name>K</name>
                                </templateParameter>
                                <templateParameter id="4616632">
                                    <name>T</name>
                                </templateParameter>
                                <templateParameter id="4616633">
                                    <name>H</name>
                                </templateParameter>
                                <templateParameter id="4616634">
                                    <name>C</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.4617571"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.4617315"/>
                            <constraint>
                                <type ref="4616631"/>
                                <connector>is</connector>
                                <type ref="type.4607142"/>
                            </constraint>
                        </overload>
                        <overload id="function_ToJson_660ADE07D30699D123CC5F0BECA3E252DF64B33D">
                            <name>ToJson&lt;Key, Value, KeyCompare>(const Map&lt;Key, Value, KeyCompare>&amp; value) where Key is ustring</name>
                            <syntax>public UniquePtr&lt;System.Json.JsonValue> ToJson&lt;Key, Value, KeyCompare>(const Map&lt;Key, Value, KeyCompare>&amp; value);</syntax>
                            <templateParameters>
                                <templateParameter id="4616625">
                                    <name>Key</name>
                                </templateParameter>
                                <templateParameter id="4616626">
                                    <name>Value</name>
                                </templateParameter>
                                <templateParameter id="4616627">
                                    <name>KeyCompare</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.4617449"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.4617315"/>
                            <constraint>
                                <type ref="4616625"/>
                                <connector>is</connector>
                                <type ref="type.4607142"/>
                            </constraint>
                        </overload>
                        <overload id="function_ToJson_F05F6792D09977AF3EDA3344A6CAA5403D58AFD1">
                            <name>ToJson&lt;Key, Value, KeyCompare>(const Map&lt;Key, Value, KeyCompare>&amp; value) where Key is wstring or Key is string</name>
                            <syntax>public UniquePtr&lt;System.Json.JsonValue> ToJson&lt;Key, Value, KeyCompare>(const Map&lt;Key, Value, KeyCompare>&amp; value);</syntax>
                            <templateParameters>
                                <templateParameter id="4616628">
                                    <name>Key</name>
                                </templateParameter>
                                <templateParameter id="4616629">
                                    <name>Value</name>
                                </templateParameter>
                                <templateParameter id="4616630">
                                    <name>KeyCompare</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.4617510"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.4617315"/>
                            <constraint>
                                <type ref="4616628"/>
                                <connector>is</connector>
                                <type ref="type.4607097"/>
                                <connector>or</connector>
                                <type ref="4616628"/>
                                <connector>is</connector>
                                <type ref="type.4607054"/>
                            </constraint>
                        </overload>
                        <overload id="function_ToJson_8FF6AD1D7D1AF315BBE189E97243F7B20A759CCE">
                            <name>ToJson&lt;T>(const List&lt;T>&amp; value)</name>
                            <syntax>public UniquePtr&lt;System.Json.JsonValue> ToJson&lt;T>(const List&lt;T>&amp; value);</syntax>
                            <templateParameters>
                                <templateParameter id="4616624">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.4617422"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.4617315"/>
                        </overload>
                        <overload id="function_ToJson_D4341533DFEB06925268DB024A00F44A7044154D">
                            <name>ToJson&lt;T>(const T&amp; object) where T is JsonExportable</name>
                            <syntax>public UniquePtr&lt;System.Json.JsonValue> ToJson&lt;T>(const T&amp; object);</syntax>
                            <templateParameters>
                                <templateParameter id="4616623">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>object</name>
                                    <type ref="type.4617416"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.4617315"/>
                            <constraint>
                                <type ref="4616623"/>
                                <connector>is</connector>
                                <concept ref="concept_JsonExportable_380A04F1C16289D6FC8DB54C68F467C83E565340"/>
                            </constraint>
                        </overload>
                    </overloads>
                </function>
            </functions>
            <concepts>
                <concept id="concept_JsonConstructible_FDF8EB5A6050ED39397E14EF89FACCA63F29DDF2">
                    <name>JsonConstructible&lt;T></name>
                    <groupName>JsonConstructible</groupName>
                    <syntax>public concept JsonConstructible&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="4616688">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constraints>
                        <constraint>T(JsonValue*)</constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_JsonExportable_380A04F1C16289D6FC8DB54C68F467C83E565340">
                    <name>JsonExportable&lt;T></name>
                    <groupName>JsonExportable</groupName>
                    <syntax>public concept JsonExportable&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="4616622">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constraints>
                        <constraint>UniquePtr&lt;JsonValue> T.ToJson()</constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_JsonValueType_6519CA3F247A823EA53E9BBD4C42E505C0A78F5D">
                    <name>JsonValueType&lt;T></name>
                    <groupName>JsonValueType</groupName>
                    <syntax>public concept JsonValueType&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="4616690">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constraints>
                        <constraint>
                            System.Meta.IsBasicType&lt;T>()<connector>or</connector>
                            <type ref="4616690"/>
                            <connector>is</connector>
                            <type ref="type.4607054"/>
                            <connector>or</connector>
                            <type ref="4616690"/>
                            <connector>is</connector>
                            <type ref="type.4607097"/>
                            <connector>or</connector>
                            <type ref="4616690"/>
                            <connector>is</connector>
                            <type ref="type.4607142"/>
                        </constraint>
                    </constraints>
                    <axioms/>
                </concept>
            </concepts>
        </namespace>
    </namespaces>
    <types>
        <type derived="true" id="type.2354">
            <name>AddressOf&amp;&amp;</name>
            <content>
                <baseType ref="class_AddressOf_F9F594A9680E5BE9D427D963284931AEB8E52492"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_ArrayRule_97D9572F1E83FBA5D44A80D2E6F6F0F63D0E73D0">
            <name>ArrayRule</name>
        </type>
        <type derived="true" id="type.4616662">
            <name>ArrayRule&amp;</name>
            <content>
                <baseType ref="class_ArrayRule_97D9572F1E83FBA5D44A80D2E6F6F0F63D0E73D0"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616661">
            <name>ArrayRule*</name>
            <content>
                <baseType ref="class_ArrayRule_97D9572F1E83FBA5D44A80D2E6F6F0F63D0E73D0"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4619041">
            <name>ArrayRule*&amp;</name>
            <content>
                <baseType ref="class_ArrayRule_97D9572F1E83FBA5D44A80D2E6F6F0F63D0E73D0"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4619040">
            <name>ArrayRule**</name>
            <content>
                <baseType ref="class_ArrayRule_97D9572F1E83FBA5D44A80D2E6F6F0F63D0E73D0"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2426">
            <name>AssertStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_AssertStatement_D3CF5F3C391681B790B0E9E570953DA4FA666696"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4618259" specialization="true">
            <name>Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
            </content>
        </type>
        <type id="type.4617677" specialization="true">
            <name>Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
            </content>
        </type>
        <type id="type.4618836" specialization="true">
            <name>Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
            </content>
        </type>
        <type id="type.4618337" specialization="true">
            <name>Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
            </content>
        </type>
        <type id="type.4607818" specialization="true">
            <name>Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
            </content>
        </type>
        <type id="type.4618680" specialization="true">
            <name>Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
            </content>
        </type>
        <type id="type.4618758" specialization="true">
            <name>Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
            </content>
        </type>
        <type id="type.4617599" specialization="true">
            <name>Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
            </content>
        </type>
        <type id="type.4618181" specialization="true">
            <name>Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
            </content>
        </type>
        <type id="type.4618758" specialization="true">
            <name>Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
            </content>
        </type>
        <type derived="true" id="type.4618339">
            <name>Bucket&lt;Pair&lt;K, T>>&amp;</name>
            <content>
                <baseType ref="type.4618337"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617601">
            <name>Bucket&lt;Pair&lt;K, T>>&amp;</name>
            <content>
                <baseType ref="type.4617599"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618682">
            <name>Bucket&lt;Pair&lt;K, T>>&amp;</name>
            <content>
                <baseType ref="type.4618680"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618261">
            <name>Bucket&lt;Pair&lt;K, T>>&amp;</name>
            <content>
                <baseType ref="type.4618259"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618183">
            <name>Bucket&lt;Pair&lt;K, T>>&amp;</name>
            <content>
                <baseType ref="type.4618181"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618838">
            <name>Bucket&lt;Pair&lt;K, T>>&amp;</name>
            <content>
                <baseType ref="type.4618836"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617679">
            <name>Bucket&lt;Pair&lt;K, T>>&amp;</name>
            <content>
                <baseType ref="type.4617677"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618760">
            <name>Bucket&lt;Pair&lt;K, T>>&amp;</name>
            <content>
                <baseType ref="type.4618758"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618338">
            <name>Bucket&lt;Pair&lt;K, T>>*</name>
            <content>
                <baseType ref="type.4618337"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617600">
            <name>Bucket&lt;Pair&lt;K, T>>*</name>
            <content>
                <baseType ref="type.4617599"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618182">
            <name>Bucket&lt;Pair&lt;K, T>>*</name>
            <content>
                <baseType ref="type.4618181"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618759">
            <name>Bucket&lt;Pair&lt;K, T>>*</name>
            <content>
                <baseType ref="type.4618758"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618260">
            <name>Bucket&lt;Pair&lt;K, T>>*</name>
            <content>
                <baseType ref="type.4618259"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618837">
            <name>Bucket&lt;Pair&lt;K, T>>*</name>
            <content>
                <baseType ref="type.4618836"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617678">
            <name>Bucket&lt;Pair&lt;K, T>>*</name>
            <content>
                <baseType ref="type.4617677"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618681">
            <name>Bucket&lt;Pair&lt;K, T>>*</name>
            <content>
                <baseType ref="type.4618680"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618837">
            <name>Bucket&lt;Pair&lt;K, T>>*</name>
            <content>
                <baseType ref="type.4618836"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618292">
            <name>Bucket&lt;Pair&lt;K, T>>*&amp;</name>
            <content>
                <baseType ref="type.4618259"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618370">
            <name>Bucket&lt;Pair&lt;K, T>>*&amp;</name>
            <content>
                <baseType ref="type.4618337"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618791">
            <name>Bucket&lt;Pair&lt;K, T>>*&amp;</name>
            <content>
                <baseType ref="type.4618758"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617632">
            <name>Bucket&lt;Pair&lt;K, T>>*&amp;</name>
            <content>
                <baseType ref="type.4617599"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618869">
            <name>Bucket&lt;Pair&lt;K, T>>*&amp;</name>
            <content>
                <baseType ref="type.4618836"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618713">
            <name>Bucket&lt;Pair&lt;K, T>>*&amp;</name>
            <content>
                <baseType ref="type.4618680"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618869">
            <name>Bucket&lt;Pair&lt;K, T>>*&amp;</name>
            <content>
                <baseType ref="type.4618836"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617710">
            <name>Bucket&lt;Pair&lt;K, T>>*&amp;</name>
            <content>
                <baseType ref="type.4617677"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618214">
            <name>Bucket&lt;Pair&lt;K, T>>*&amp;</name>
            <content>
                <baseType ref="type.4618181"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618380">
            <name>Bucket&lt;Pair&lt;K, T>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.4618337"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618879">
            <name>Bucket&lt;Pair&lt;K, T>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.4618836"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617720">
            <name>Bucket&lt;Pair&lt;K, T>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.4617677"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618723">
            <name>Bucket&lt;Pair&lt;K, T>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.4618680"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618879">
            <name>Bucket&lt;Pair&lt;K, T>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.4618836"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618801">
            <name>Bucket&lt;Pair&lt;K, T>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.4618758"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618224">
            <name>Bucket&lt;Pair&lt;K, T>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.4618181"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617642">
            <name>Bucket&lt;Pair&lt;K, T>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.4617599"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618302">
            <name>Bucket&lt;Pair&lt;K, T>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.4618259"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1923">
            <name>Bucket&lt;Pair&lt;K, T>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.4607818"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618870">
            <name>Bucket&lt;Pair&lt;K, T>>**</name>
            <content>
                <baseType ref="type.4618836"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618293">
            <name>Bucket&lt;Pair&lt;K, T>>**</name>
            <content>
                <baseType ref="type.4618259"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618371">
            <name>Bucket&lt;Pair&lt;K, T>>**</name>
            <content>
                <baseType ref="type.4618337"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618870">
            <name>Bucket&lt;Pair&lt;K, T>>**</name>
            <content>
                <baseType ref="type.4618836"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617711">
            <name>Bucket&lt;Pair&lt;K, T>>**</name>
            <content>
                <baseType ref="type.4617677"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618792">
            <name>Bucket&lt;Pair&lt;K, T>>**</name>
            <content>
                <baseType ref="type.4618758"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618215">
            <name>Bucket&lt;Pair&lt;K, T>>**</name>
            <content>
                <baseType ref="type.4618181"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618714">
            <name>Bucket&lt;Pair&lt;K, T>>**</name>
            <content>
                <baseType ref="type.4618680"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617633">
            <name>Bucket&lt;Pair&lt;K, T>>**</name>
            <content>
                <baseType ref="type.4617599"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9" specialization="true">
            <name>Bucket&lt;T></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="4606566"/>
            </content>
        </type>
        <type derived="true" id="type.1931">
            <name>Bucket&lt;T>*&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_Bucket_ValueType_5A3E2F108F8CC061B9AC0A82F50CCDA26037ADCE" specialization="true">
            <name>Bucket&lt;ValueType></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="4606587"/>
            </content>
        </type>
        <type derived="true" id="type.1944">
            <name>Bucket&lt;ValueType>*&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Bucket_ValueType_5A3E2F108F8CC061B9AC0A82F50CCDA26037ADCE"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="4616743">
            <name>C</name>
        </type>
        <type derived="true" id="type.2450">
            <name>CharParser&amp;&amp;</name>
            <content>
                <baseType ref="class_CharParser_F30B4B7DDC9B8D3CD1476C03049B3C7189028FDA"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2433">
            <name>CodeExpandingVisitor&amp;&amp;</name>
            <content>
                <baseType ref="class_CodeExpandingVisitor_2D824580300CDC92F6A03DB335EE0BB590738E53"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2332">
            <name>CodeFormatter&amp;&amp;</name>
            <content>
                <baseType ref="class_CodeFormatter_38898A0914E7D27753F0D42E65A18EC272984F99"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2369">
            <name>Complement&amp;&amp;</name>
            <content>
                <baseType ref="class_Complement_E9C39B44C265CC4D19B0EFE97BE0DDAAF5B39DB5"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616535">
            <name>CompoundStatement&amp;</name>
            <content>
                <baseType ref="class_CompoundStatement_D64148F52F69E76B5603068E1B519F54CC99F8A9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1828">
            <name>CompoundStatement&amp;</name>
            <content>
                <baseType ref="class_CompoundStatement_D64148F52F69E76B5603068E1B519F54CC99F8A9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1827">
            <name>CompoundStatement*</name>
            <content>
                <baseType ref="class_CompoundStatement_D64148F52F69E76B5603068E1B519F54CC99F8A9"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616534">
            <name>CompoundStatement*</name>
            <content>
                <baseType ref="class_CompoundStatement_D64148F52F69E76B5603068E1B519F54CC99F8A9"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2427">
            <name>Const&amp;&amp;</name>
            <content>
                <baseType ref="class_Const_9F4AD8D639ADA7A3FA35707EF7047095B214626A"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2387">
            <name>Construct&amp;&amp;</name>
            <content>
                <baseType ref="class_Construct_9E0CFFBA332AF77070D82685BD0B3B21F6BBDAB8"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_Context_A9DFFCA47D4C031CE59C631968775B728DC27723">
            <name>Context</name>
        </type>
        <type id="class_Context_DC3014771158BE06916FB7B289746C6E33F2CB6B">
            <name>Context</name>
        </type>
        <type id="class_Context_BCC9FCB3E87A02D9FE9414B76F130D8B1771991A">
            <name>Context</name>
        </type>
        <type id="class_Context_AFEF333695DD586BEFCFA47EA307519802EF9BD3">
            <name>Context</name>
        </type>
        <type id="class_Context_29B31567A5E1B939D1D54BB81169ED882D01557F">
            <name>Context</name>
        </type>
        <type id="class_Context_CCB8DD1BC453001E743B1DAE18359E22470CB70C">
            <name>Context</name>
        </type>
        <type id="class_Context_C2EF2873965CE9318EBD0F1FE7D4908017FAAE75">
            <name>Context</name>
        </type>
        <type derived="true" id="type.4616683">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_DC3014771158BE06916FB7B289746C6E33F2CB6B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616665">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_AFEF333695DD586BEFCFA47EA307519802EF9BD3"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616683">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_DC3014771158BE06916FB7B289746C6E33F2CB6B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616653">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_CCB8DD1BC453001E743B1DAE18359E22470CB70C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616659">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_C2EF2873965CE9318EBD0F1FE7D4908017FAAE75"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616677">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_BCC9FCB3E87A02D9FE9414B76F130D8B1771991A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616671">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_A9DFFCA47D4C031CE59C631968775B728DC27723"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616647">
            <name>Context&amp;</name>
            <content>
                <baseType ref="class_Context_29B31567A5E1B939D1D54BB81169ED882D01557F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616658">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_C2EF2873965CE9318EBD0F1FE7D4908017FAAE75"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616676">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_BCC9FCB3E87A02D9FE9414B76F130D8B1771991A"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616664">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_AFEF333695DD586BEFCFA47EA307519802EF9BD3"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616652">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_CCB8DD1BC453001E743B1DAE18359E22470CB70C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616682">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_DC3014771158BE06916FB7B289746C6E33F2CB6B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616670">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_A9DFFCA47D4C031CE59C631968775B728DC27723"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616646">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_29B31567A5E1B939D1D54BB81169ED882D01557F"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616682">
            <name>Context*</name>
            <content>
                <baseType ref="class_Context_DC3014771158BE06916FB7B289746C6E33F2CB6B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4619038">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_AFEF333695DD586BEFCFA47EA307519802EF9BD3"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4619033">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_C2EF2873965CE9318EBD0F1FE7D4908017FAAE75"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4619038">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_AFEF333695DD586BEFCFA47EA307519802EF9BD3"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4619048">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_BCC9FCB3E87A02D9FE9414B76F130D8B1771991A"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4619053">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_DC3014771158BE06916FB7B289746C6E33F2CB6B"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4619028">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_CCB8DD1BC453001E743B1DAE18359E22470CB70C"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4619043">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_A9DFFCA47D4C031CE59C631968775B728DC27723"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618986">
            <name>Context*&amp;</name>
            <content>
                <baseType ref="class_Context_29B31567A5E1B939D1D54BB81169ED882D01557F"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4619052">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_DC3014771158BE06916FB7B289746C6E33F2CB6B"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4619037">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_AFEF333695DD586BEFCFA47EA307519802EF9BD3"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4619052">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_DC3014771158BE06916FB7B289746C6E33F2CB6B"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618985">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_29B31567A5E1B939D1D54BB81169ED882D01557F"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4619027">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_CCB8DD1BC453001E743B1DAE18359E22470CB70C"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4619032">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_C2EF2873965CE9318EBD0F1FE7D4908017FAAE75"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4619042">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_A9DFFCA47D4C031CE59C631968775B728DC27723"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4619047">
            <name>Context**</name>
            <content>
                <baseType ref="class_Context_BCC9FCB3E87A02D9FE9414B76F130D8B1771991A"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.4607028" specialization="true">
            <name>Counter&lt;System.IO.ByteStream></name>
            <content>
                <primaryType ref="class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <argumentType ref="class_ByteStream_3B7A2F3379612ADBD7E416487752A1935AA8B96F"/>
            </content>
        </type>
        <type id="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30" specialization="true">
            <name>Counter&lt;T></name>
            <content>
                <primaryType ref="class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <argumentType ref="4606718"/>
            </content>
        </type>
        <type derived="true" id="type.2057">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2050">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2035">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2028">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2019">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2016">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A" specialization="true">
            <name>Counter&lt;U></name>
            <content>
                <primaryType ref="class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <argumentType ref="4606717"/>
            </content>
        </type>
        <type derived="true" id="type.2405">
            <name>DeleteStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_DeleteStatement_CFF57A1EB43152DAED3E95873037A4F83E2AAF0A"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2351">
            <name>Deref&amp;&amp;</name>
            <content>
                <baseType ref="class_Deref_6825EB2BE00B35C10BF9F18A018CADC1F1F12594"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2408">
            <name>DestroyStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_DestroyStatement_E2AF4A1B38D4AE66FCF9EF639F0D8309CE050550"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616533">
            <name>DomObject&amp;</name>
            <content>
                <baseType ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1826">
            <name>DomObject&amp;</name>
            <content>
                <baseType ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616533">
            <name>DomObject&amp;</name>
            <content>
                <baseType ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2345">
            <name>DomObject&amp;&amp;</name>
            <content>
                <baseType ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1825">
            <name>DomObject*</name>
            <content>
                <baseType ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616532">
            <name>DomObject*</name>
            <content>
                <baseType ref="class_DomObject_A6EA469160F8FD3B17826E7729430E5F3D07C4DF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_EscapeRule_F6F8C5008CC9D44A04F0BB4D7CFA25EAF565A0A4">
            <name>EscapeRule</name>
        </type>
        <type derived="true" id="type.4616674">
            <name>EscapeRule&amp;</name>
            <content>
                <baseType ref="class_EscapeRule_F6F8C5008CC9D44A04F0BB4D7CFA25EAF565A0A4"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616673">
            <name>EscapeRule*</name>
            <content>
                <baseType ref="class_EscapeRule_F6F8C5008CC9D44A04F0BB4D7CFA25EAF565A0A4"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4619051">
            <name>EscapeRule*&amp;</name>
            <content>
                <baseType ref="class_EscapeRule_F6F8C5008CC9D44A04F0BB4D7CFA25EAF565A0A4"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4619050">
            <name>EscapeRule**</name>
            <content>
                <baseType ref="class_EscapeRule_F6F8C5008CC9D44A04F0BB4D7CFA25EAF565A0A4"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2445">
            <name>ExpectationParser&amp;&amp;</name>
            <content>
                <baseType ref="class_ExpectationParser_0DFEF78F7EA112E6F20DC00ECFD31592FD692CAB"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2411">
            <name>ExpressionStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_ExpressionStatement_F01731B3CB572136FE603DE87C8C465F5B79ED54"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_FieldRule_A2491AFE296C3CD848691B73370AC927B83536EC">
            <name>FieldRule</name>
        </type>
        <type derived="true" id="type.4616656">
            <name>FieldRule&amp;</name>
            <content>
                <baseType ref="class_FieldRule_A2491AFE296C3CD848691B73370AC927B83536EC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616655">
            <name>FieldRule*</name>
            <content>
                <baseType ref="class_FieldRule_A2491AFE296C3CD848691B73370AC927B83536EC"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4619036">
            <name>FieldRule*&amp;</name>
            <content>
                <baseType ref="class_FieldRule_A2491AFE296C3CD848691B73370AC927B83536EC"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4619035">
            <name>FieldRule**</name>
            <content>
                <baseType ref="class_FieldRule_A2491AFE296C3CD848691B73370AC927B83536EC"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_ForwardList_T_49B88E2B81E13ED03DA3835C7A074DB98CBE7051" specialization="true">
            <name>ForwardList&lt;T></name>
            <content>
                <primaryType ref="class_ForwardList_T_49B88E2B81E13ED03DA3835C7A074DB98CBE7051"/>
                <argumentType ref="4606475"/>
            </content>
        </type>
        <type derived="true" id="type.1881">
            <name>ForwardList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardList_T_49B88E2B81E13ED03DA3835C7A074DB98CBE7051"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA" specialization="true">
            <name>ForwardListNodeIterator&lt;T, R, P></name>
            <content>
                <primaryType ref="class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <argumentType ref="4606468"/>
                <argumentType ref="4606469"/>
                <argumentType ref="4606470"/>
            </content>
        </type>
        <type derived="true" id="type.1878">
            <name>ForwardListNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1877">
            <name>ForwardListNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84" specialization="true">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <argumentType ref="4606477"/>
                <argumentType ref="type.4607387"/>
                <argumentType ref="type.4607389"/>
            </content>
        </type>
        <type derived="true" id="type.1883">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1880">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1885">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3" specialization="true">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <argumentType ref="4606476"/>
                <argumentType ref="type.4607340"/>
                <argumentType ref="type.4607341"/>
            </content>
        </type>
        <type derived="true" id="type.1879">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1882">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1884">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2417">
            <name>GotoCaseStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_GotoCaseStatement_54B0F8581DE0382A086C8C1EC6A19E93889D566D"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2402">
            <name>GotoStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_GotoStatement_423A80C64905BCD7885A3433F9FE33D8BB37DF7E"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="4616746">
            <name>H</name>
        </type>
        <type id="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36" specialization="true">
            <name>HashMap&lt;K, T, H, C></name>
            <content>
                <primaryType ref="class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <argumentType ref="4616635"/>
                <argumentType ref="4616636"/>
                <argumentType ref="4616637"/>
                <argumentType ref="4616638"/>
            </content>
        </type>
        <type derived="true" id="type.4618649">
            <name>HashMap&lt;K, T, H, C>&amp;</name>
            <content>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618150">
            <name>HashMap&lt;K, T, H, C>&amp;</name>
            <content>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618727">
            <name>HashMap&lt;K, T, H, C>&amp;</name>
            <content>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618228">
            <name>HashMap&lt;K, T, H, C>&amp;</name>
            <content>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618805">
            <name>HashMap&lt;K, T, H, C>&amp;</name>
            <content>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617568">
            <name>HashMap&lt;K, T, H, C>&amp;</name>
            <content>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618727">
            <name>HashMap&lt;K, T, H, C>&amp;</name>
            <content>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617646">
            <name>HashMap&lt;K, T, H, C>&amp;</name>
            <content>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618306">
            <name>HashMap&lt;K, T, H, C>&amp;</name>
            <content>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618149">
            <name>HashMap&lt;K, T, H, C>*</name>
            <content>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617645">
            <name>HashMap&lt;K, T, H, C>*</name>
            <content>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618804">
            <name>HashMap&lt;K, T, H, C>*</name>
            <content>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618648">
            <name>HashMap&lt;K, T, H, C>*</name>
            <content>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617567">
            <name>HashMap&lt;K, T, H, C>*</name>
            <content>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618726">
            <name>HashMap&lt;K, T, H, C>*</name>
            <content>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618227">
            <name>HashMap&lt;K, T, H, C>*</name>
            <content>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618305">
            <name>HashMap&lt;K, T, H, C>*</name>
            <content>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618804">
            <name>HashMap&lt;K, T, H, C>*</name>
            <content>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B" specialization="true">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="4616740"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <argumentType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <argumentType ref="4616742"/>
                <argumentType ref="4616743"/>
            </content>
        </type>
        <type derived="true" id="type.4617667">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618249">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618171">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618748">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617589">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618327">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618670">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618826">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617613">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618772">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618850">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618694">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618195">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618273">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618351">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617691">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1919">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618669">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>*</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617666">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>*</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617588">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>*</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618747">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>*</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618326">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>*</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618248">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>*</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618747">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>*</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618170">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>*</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618825">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>*</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2" specialization="true">
            <name>Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="4606586"/>
                <argumentType ref="4606587"/>
                <argumentType ref="4606588"/>
                <argumentType ref="4606589"/>
                <argumentType ref="4606590"/>
            </content>
        </type>
        <type derived="true" id="type.1939">
            <name>Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4615383" specialization="true">
            <name>Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="type.4607142"/>
                <argumentType ref="type.4607142"/>
                <argumentType ref="type.4615374"/>
                <argumentType ref="type.4615069"/>
                <argumentType ref="type.4615075"/>
            </content>
        </type>
        <type id="type.class_Hashtable_T_T_Identity_T_H_C_73CFDACB21FE662CFE0879B3582A7D1FB223385C" specialization="true">
            <name>Hashtable&lt;T, T, Identity&lt;T>, H, C></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="4606566"/>
                <argumentType ref="4606566"/>
                <argumentType ref="type.class_Identity_T_9DD2E12D3D49B8316EA22259EDBD89C3FE6A1C09"/>
                <argumentType ref="4606567"/>
                <argumentType ref="4606568"/>
            </content>
        </type>
        <type derived="true" id="type.1927">
            <name>Hashtable&lt;T, T, Identity&lt;T>, H, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_T_T_Identity_T_H_C_73CFDACB21FE662CFE0879B3582A7D1FB223385C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4618253" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <argumentType ref="type.4618234"/>
                <argumentType ref="type.4618233"/>
                <argumentType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
            </content>
        </type>
        <type id="type.4618175" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <argumentType ref="type.4618156"/>
                <argumentType ref="type.4618155"/>
                <argumentType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
            </content>
        </type>
        <type id="type.4617671" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <argumentType ref="type.4617652"/>
                <argumentType ref="type.4617651"/>
                <argumentType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
            </content>
        </type>
        <type id="type.4617593" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <argumentType ref="type.4617574"/>
                <argumentType ref="type.4617573"/>
                <argumentType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
            </content>
        </type>
        <type id="type.4618830" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <argumentType ref="type.4618811"/>
                <argumentType ref="type.4618810"/>
                <argumentType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
            </content>
        </type>
        <type id="type.4618752" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <argumentType ref="type.4618733"/>
                <argumentType ref="type.4618732"/>
                <argumentType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
            </content>
        </type>
        <type id="type.4618674" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <argumentType ref="type.4618655"/>
                <argumentType ref="type.4618654"/>
                <argumentType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
            </content>
        </type>
        <type id="type.4618830" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <argumentType ref="type.4618811"/>
                <argumentType ref="type.4618810"/>
                <argumentType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
            </content>
        </type>
        <type id="type.4618331" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <argumentType ref="type.4618312"/>
                <argumentType ref="type.4618311"/>
                <argumentType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
            </content>
        </type>
        <type derived="true" id="type.4618832">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <baseType ref="type.4618830"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618676">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <baseType ref="type.4618674"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618754">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <baseType ref="type.4618752"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618333">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <baseType ref="type.4618331"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618255">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <baseType ref="type.4618253"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618177">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <baseType ref="type.4618175"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617595">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <baseType ref="type.4617593"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618676">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <baseType ref="type.4618674"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617673">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <baseType ref="type.4617671"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618753">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <baseType ref="type.4618752"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618332">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <baseType ref="type.4618331"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618254">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <baseType ref="type.4618253"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618831">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <baseType ref="type.4618830"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618675">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <baseType ref="type.4618674"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618831">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <baseType ref="type.4618830"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617672">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <baseType ref="type.4617671"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618176">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <baseType ref="type.4618175"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617594">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <baseType ref="type.4617593"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.4618345" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <argumentType ref="type.4618322"/>
                <argumentType ref="type.4618343"/>
                <argumentType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
            </content>
        </type>
        <type id="type.4618267" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <argumentType ref="type.4618244"/>
                <argumentType ref="type.4618265"/>
                <argumentType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
            </content>
        </type>
        <type id="type.4618766" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <argumentType ref="type.4618743"/>
                <argumentType ref="type.4618764"/>
                <argumentType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
            </content>
        </type>
        <type id="type.4618189" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <argumentType ref="type.4618166"/>
                <argumentType ref="type.4618187"/>
                <argumentType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
            </content>
        </type>
        <type id="type.4618688" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <argumentType ref="type.4618665"/>
                <argumentType ref="type.4618686"/>
                <argumentType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
            </content>
        </type>
        <type id="type.4618844" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <argumentType ref="type.4618821"/>
                <argumentType ref="type.4618842"/>
                <argumentType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
            </content>
        </type>
        <type id="type.4618766" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <argumentType ref="type.4618743"/>
                <argumentType ref="type.4618764"/>
                <argumentType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
            </content>
        </type>
        <type id="type.4617607" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <argumentType ref="type.4617584"/>
                <argumentType ref="type.4617605"/>
                <argumentType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
            </content>
        </type>
        <type id="type.4617685" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <argumentType ref="type.4617662"/>
                <argumentType ref="type.4617683"/>
                <argumentType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
            </content>
        </type>
        <type derived="true" id="type.4618768">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <baseType ref="type.4618766"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618846">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <baseType ref="type.4618844"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617687">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <baseType ref="type.4617685"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617609">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <baseType ref="type.4617607"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618191">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <baseType ref="type.4618189"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618846">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <baseType ref="type.4618844"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618690">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <baseType ref="type.4618688"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618269">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <baseType ref="type.4618267"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618347">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <baseType ref="type.4618345"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618346">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <baseType ref="type.4618345"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618767">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <baseType ref="type.4618766"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618190">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <baseType ref="type.4618189"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617608">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <baseType ref="type.4617607"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618767">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <baseType ref="type.4618766"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617686">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <baseType ref="type.4617685"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618845">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <baseType ref="type.4618844"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618689">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <baseType ref="type.4618688"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618268">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <baseType ref="type.4618267"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.4617114" specialization="true">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.4607142"/>
                <argumentType ref="type.4607144"/>
                <argumentType ref="type.4607143"/>
                <argumentType ref="type.4615383"/>
            </content>
        </type>
        <type id="type.2195" specialization="true">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.4607142"/>
                <argumentType ref="type.4607144"/>
                <argumentType ref="type.4607143"/>
                <argumentType ref="type.4615383"/>
            </content>
        </type>
        <type derived="true" id="type.2197">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.2195"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617116">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.4617114"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617115">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.4617114"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2196">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.2195"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617115">
            <name>HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.4617114"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.4617120" specialization="true">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.4607142"/>
                <argumentType ref="type.4607147"/>
                <argumentType ref="type.4607146"/>
                <argumentType ref="type.4615383"/>
            </content>
        </type>
        <type id="type.2201" specialization="true">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.4607142"/>
                <argumentType ref="type.4607147"/>
                <argumentType ref="type.4607146"/>
                <argumentType ref="type.4615383"/>
            </content>
        </type>
        <type id="type.4617120" specialization="true">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <primaryType ref="class_HashtableIterator_T_R_P_H_096790EBD70A9327536FC43A710AF00FB8221CA1"/>
                <argumentType ref="type.4607142"/>
                <argumentType ref="type.4607147"/>
                <argumentType ref="type.4607146"/>
                <argumentType ref="type.4615383"/>
            </content>
        </type>
        <type derived="true" id="type.4617122">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.4617120"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.2201"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617122">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <baseType ref="type.4617120"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2202">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.2201"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617121">
            <name>HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <baseType ref="type.4617120"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2391">
            <name>Identifier&amp;&amp;</name>
            <content>
                <baseType ref="class_Identifier_4DD63F2DF214C9DDE3105925C5DFD200FC4065A7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2372">
            <name>Invoke&amp;&amp;</name>
            <content>
                <baseType ref="class_Invoke_D6527871DA9EA1727DFAC637E9FF17EF73B2DAF5"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_JsonArray_595A35C98AB243A92CA1C39BB1B07E82AA246D18">
            <name>JsonArray</name>
        </type>
        <type derived="true" id="type.4616611">
            <name>JsonArray&amp;</name>
            <content>
                <baseType ref="class_JsonArray_595A35C98AB243A92CA1C39BB1B07E82AA246D18"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616610">
            <name>JsonArray*</name>
            <content>
                <baseType ref="class_JsonArray_595A35C98AB243A92CA1C39BB1B07E82AA246D18"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4619017">
            <name>JsonArray*&amp;</name>
            <content>
                <baseType ref="class_JsonArray_595A35C98AB243A92CA1C39BB1B07E82AA246D18"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4619016">
            <name>JsonArray**</name>
            <content>
                <baseType ref="class_JsonArray_595A35C98AB243A92CA1C39BB1B07E82AA246D18"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_JsonBool_DECA0A9F59CE58DA61371982ADCFCD31F1497F79">
            <name>JsonBool</name>
        </type>
        <type derived="true" id="type.4616593">
            <name>JsonBool&amp;</name>
            <content>
                <baseType ref="class_JsonBool_DECA0A9F59CE58DA61371982ADCFCD31F1497F79"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2455">
            <name>JsonBool&amp;&amp;</name>
            <content>
                <baseType ref="class_JsonBool_DECA0A9F59CE58DA61371982ADCFCD31F1497F79"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616592">
            <name>JsonBool*</name>
            <content>
                <baseType ref="class_JsonBool_DECA0A9F59CE58DA61371982ADCFCD31F1497F79"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4619067">
            <name>JsonBool*&amp;</name>
            <content>
                <baseType ref="class_JsonBool_DECA0A9F59CE58DA61371982ADCFCD31F1497F79"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4619066">
            <name>JsonBool**</name>
            <content>
                <baseType ref="class_JsonBool_DECA0A9F59CE58DA61371982ADCFCD31F1497F79"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_JsonGrammar_35AA9FF722AADCE4D0495A1DD9EF9B19479BF318">
            <name>JsonGrammar</name>
        </type>
        <type derived="true" id="type.4616641">
            <name>JsonGrammar&amp;</name>
            <content>
                <baseType ref="class_JsonGrammar_35AA9FF722AADCE4D0495A1DD9EF9B19479BF318"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2458">
            <name>JsonGrammar&amp;&amp;</name>
            <content>
                <baseType ref="class_JsonGrammar_35AA9FF722AADCE4D0495A1DD9EF9B19479BF318"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616640">
            <name>JsonGrammar*</name>
            <content>
                <baseType ref="class_JsonGrammar_35AA9FF722AADCE4D0495A1DD9EF9B19479BF318"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618971">
            <name>JsonGrammar*&amp;</name>
            <content>
                <baseType ref="class_JsonGrammar_35AA9FF722AADCE4D0495A1DD9EF9B19479BF318"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618970">
            <name>JsonGrammar**</name>
            <content>
                <baseType ref="class_JsonGrammar_35AA9FF722AADCE4D0495A1DD9EF9B19479BF318"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_JsonImportException_B2C659772CC55BEE3DF2ECEA8C50121E3DA06723">
            <name>JsonImportException</name>
        </type>
        <type derived="true" id="type.4616686">
            <name>JsonImportException&amp;</name>
            <content>
                <baseType ref="class_JsonImportException_B2C659772CC55BEE3DF2ECEA8C50121E3DA06723"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617727">
            <name>JsonImportException&amp;&amp;</name>
            <content>
                <baseType ref="class_JsonImportException_B2C659772CC55BEE3DF2ECEA8C50121E3DA06723"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616685">
            <name>JsonImportException*</name>
            <content>
                <baseType ref="class_JsonImportException_B2C659772CC55BEE3DF2ECEA8C50121E3DA06723"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_JsonNull_E0746AE6880508740D5FFC8AF4E0FB0A7AE20ED2">
            <name>JsonNull</name>
        </type>
        <type derived="true" id="type.4617311">
            <name>JsonNull&amp;</name>
            <content>
                <baseType ref="class_JsonNull_E0746AE6880508740D5FFC8AF4E0FB0A7AE20ED2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617310">
            <name>JsonNull*</name>
            <content>
                <baseType ref="class_JsonNull_E0746AE6880508740D5FFC8AF4E0FB0A7AE20ED2"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_JsonNumber_BA94887A1742701B420D069040E7953026161429">
            <name>JsonNumber</name>
        </type>
        <type derived="true" id="type.4616587">
            <name>JsonNumber&amp;</name>
            <content>
                <baseType ref="class_JsonNumber_BA94887A1742701B420D069040E7953026161429"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2454">
            <name>JsonNumber&amp;&amp;</name>
            <content>
                <baseType ref="class_JsonNumber_BA94887A1742701B420D069040E7953026161429"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616586">
            <name>JsonNumber*</name>
            <content>
                <baseType ref="class_JsonNumber_BA94887A1742701B420D069040E7953026161429"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618998">
            <name>JsonNumber*&amp;</name>
            <content>
                <baseType ref="class_JsonNumber_BA94887A1742701B420D069040E7953026161429"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618997">
            <name>JsonNumber**</name>
            <content>
                <baseType ref="class_JsonNumber_BA94887A1742701B420D069040E7953026161429"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_JsonObject_1ACA524ABF05C4E15B709275F66F3BF5C165B69D">
            <name>JsonObject</name>
        </type>
        <type derived="true" id="type.4616605">
            <name>JsonObject&amp;</name>
            <content>
                <baseType ref="class_JsonObject_1ACA524ABF05C4E15B709275F66F3BF5C165B69D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616604">
            <name>JsonObject*</name>
            <content>
                <baseType ref="class_JsonObject_1ACA524ABF05C4E15B709275F66F3BF5C165B69D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618953">
            <name>JsonObject*&amp;</name>
            <content>
                <baseType ref="class_JsonObject_1ACA524ABF05C4E15B709275F66F3BF5C165B69D"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618952">
            <name>JsonObject**</name>
            <content>
                <baseType ref="class_JsonObject_1ACA524ABF05C4E15B709275F66F3BF5C165B69D"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_JsonParser_821F84FEBAE4D09942A9E5D6B178B8C8CB1D24E9">
            <name>JsonParser</name>
        </type>
        <type derived="true" id="type.4616617">
            <name>JsonParser&amp;</name>
            <content>
                <baseType ref="class_JsonParser_821F84FEBAE4D09942A9E5D6B178B8C8CB1D24E9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616616">
            <name>JsonParser*</name>
            <content>
                <baseType ref="class_JsonParser_821F84FEBAE4D09942A9E5D6B178B8C8CB1D24E9"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618968">
            <name>JsonParser*&amp;</name>
            <content>
                <baseType ref="class_JsonParser_821F84FEBAE4D09942A9E5D6B178B8C8CB1D24E9"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618967">
            <name>JsonParser**</name>
            <content>
                <baseType ref="class_JsonParser_821F84FEBAE4D09942A9E5D6B178B8C8CB1D24E9"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_JsonString_5806452F49D8C71DEDC42FCEB48EC3A2163F7516">
            <name>JsonString</name>
        </type>
        <type derived="true" id="type.4616599">
            <name>JsonString&amp;</name>
            <content>
                <baseType ref="class_JsonString_5806452F49D8C71DEDC42FCEB48EC3A2163F7516"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617314">
            <name>JsonString&amp;&amp;</name>
            <content>
                <baseType ref="class_JsonString_5806452F49D8C71DEDC42FCEB48EC3A2163F7516"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616598">
            <name>JsonString*</name>
            <content>
                <baseType ref="class_JsonString_5806452F49D8C71DEDC42FCEB48EC3A2163F7516"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618957">
            <name>JsonString*&amp;</name>
            <content>
                <baseType ref="class_JsonString_5806452F49D8C71DEDC42FCEB48EC3A2163F7516"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618956">
            <name>JsonString**</name>
            <content>
                <baseType ref="class_JsonString_5806452F49D8C71DEDC42FCEB48EC3A2163F7516"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_JsonValue_B86942C2856CC5758E1FB19BBBE97E4002D4008A">
            <name>JsonValue</name>
        </type>
        <type derived="true" id="type.4616577">
            <name>JsonValue&amp;</name>
            <content>
                <baseType ref="class_JsonValue_B86942C2856CC5758E1FB19BBBE97E4002D4008A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618973">
            <name>JsonValue&amp;&amp;</name>
            <content>
                <baseType ref="class_JsonValue_B86942C2856CC5758E1FB19BBBE97E4002D4008A"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616576">
            <name>JsonValue*</name>
            <content>
                <baseType ref="class_JsonValue_B86942C2856CC5758E1FB19BBBE97E4002D4008A"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617387">
            <name>JsonValue*&amp;</name>
            <content>
                <baseType ref="class_JsonValue_B86942C2856CC5758E1FB19BBBE97E4002D4008A"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618902">
            <name>JsonValue*&amp;&amp;</name>
            <content>
                <baseType ref="class_JsonValue_B86942C2856CC5758E1FB19BBBE97E4002D4008A"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618901">
            <name>JsonValue**</name>
            <content>
                <baseType ref="class_JsonValue_B86942C2856CC5758E1FB19BBBE97E4002D4008A"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="4616744">
            <name>K</name>
        </type>
        <type id="4616733">
            <name>Key</name>
        </type>
        <type id="4616732">
            <name>KeyCompare</name>
        </type>
        <type derived="true" id="type.2442">
            <name>KleeneStarParser&amp;&amp;</name>
            <content>
                <baseType ref="class_KleeneStarParser_8B553023A6E0AA98D08C756A40F526859BF46D2D"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4617322" specialization="true">
            <name>Less&lt;String&lt;uchar>></name>
            <content>
                <primaryType ref="class_Less_T_F840BD6533DFD3706784C819E04FA4FE41C4F3D2"/>
                <argumentType ref="type.4607142"/>
            </content>
        </type>
        <type derived="true" id="type.4617327">
            <name>Less&lt;String&lt;uchar>>&amp;</name>
            <content>
                <baseType ref="type.4617322"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618910">
            <name>Less&lt;String&lt;uchar>>&amp;&amp;</name>
            <content>
                <baseType ref="type.4617322"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617326">
            <name>Less&lt;String&lt;uchar>>*</name>
            <content>
                <baseType ref="type.4617322"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20" specialization="true">
            <name>LinkedList&lt;T></name>
            <content>
                <primaryType ref="class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <argumentType ref="4606596"/>
            </content>
        </type>
        <type derived="true" id="type.1947">
            <name>LinkedList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1948">
            <name>LinkedList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4618854" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.4618837"/>
            </content>
        </type>
        <type id="type.4618199" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.4618182"/>
            </content>
        </type>
        <type id="type.4618854" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.4618837"/>
            </content>
        </type>
        <type id="type.4618698" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.4618681"/>
            </content>
        </type>
        <type id="type.4607837" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.4607819"/>
            </content>
        </type>
        <type id="type.4618776" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.4618759"/>
            </content>
        </type>
        <type id="type.4617695" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.4617678"/>
            </content>
        </type>
        <type id="type.4618355" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.4618338"/>
            </content>
        </type>
        <type id="type.4617617" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.4617600"/>
            </content>
        </type>
        <type id="type.4618277" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.4618260"/>
            </content>
        </type>
        <type derived="true" id="type.4618279">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;</name>
            <content>
                <baseType ref="type.4618277"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618357">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;</name>
            <content>
                <baseType ref="type.4618355"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617619">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;</name>
            <content>
                <baseType ref="type.4617617"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618778">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;</name>
            <content>
                <baseType ref="type.4618776"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617697">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;</name>
            <content>
                <baseType ref="type.4617695"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618201">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;</name>
            <content>
                <baseType ref="type.4618199"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618856">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;</name>
            <content>
                <baseType ref="type.4618854"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618700">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;</name>
            <content>
                <baseType ref="type.4618698"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617641">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4617617"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618301">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4618277"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618800">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4618776"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618722">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4618698"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617719">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4617695"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618878">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4618854"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618379">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4618355"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618878">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4618854"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618223">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4618199"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1922">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4607837"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618356">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>*</name>
            <content>
                <baseType ref="type.4618355"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618699">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>*</name>
            <content>
                <baseType ref="type.4618698"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618777">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>*</name>
            <content>
                <baseType ref="type.4618776"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618855">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>*</name>
            <content>
                <baseType ref="type.4618854"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618200">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>*</name>
            <content>
                <baseType ref="type.4618199"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617696">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>*</name>
            <content>
                <baseType ref="type.4617695"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618278">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>*</name>
            <content>
                <baseType ref="type.4618277"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617618">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>*</name>
            <content>
                <baseType ref="type.4617617"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618777">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>*</name>
            <content>
                <baseType ref="type.4618776"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.4607990" specialization="true">
            <name>List&lt;Bucket&lt;T>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.4607973"/>
            </content>
        </type>
        <type derived="true" id="type.1930">
            <name>List&lt;Bucket&lt;T>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4607990"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4608175" specialization="true">
            <name>List&lt;Bucket&lt;ValueType>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.4608156"/>
            </content>
        </type>
        <type derived="true" id="type.1943">
            <name>List&lt;Bucket&lt;ValueType>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4608175"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4609545" specialization="true">
            <name>List&lt;String&lt;CharT>></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
            </content>
        </type>
        <type derived="true" id="type.2075">
            <name>List&lt;String&lt;CharT>>&amp;&amp;</name>
            <content>
                <baseType ref="type.4609545"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C" specialization="true">
            <name>List&lt;T></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="4606653"/>
            </content>
        </type>
        <type id="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C" specialization="true">
            <name>List&lt;T></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="4616726"/>
            </content>
        </type>
        <type derived="true" id="type.4618385">
            <name>List&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618412">
            <name>List&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618439">
            <name>List&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617419">
            <name>List&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617730">
            <name>List&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617757">
            <name>List&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618439">
            <name>List&lt;T>&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618408">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618462">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618435">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617780">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1951">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617753">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1987">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2069">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618462">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617442">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617418">
            <name>List&lt;T>*</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617729">
            <name>List&lt;T>*</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618384">
            <name>List&lt;T>*</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618411">
            <name>List&lt;T>*</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618438">
            <name>List&lt;T>*</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617756">
            <name>List&lt;T>*</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618384">
            <name>List&lt;T>*</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.4617388" specialization="true">
            <name>List&lt;UniquePtr&lt;System.Json.JsonValue>></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.4617315"/>
            </content>
        </type>
        <type derived="true" id="type.4617390">
            <name>List&lt;UniquePtr&lt;System.Json.JsonValue>>&amp;</name>
            <content>
                <baseType ref="type.4617388"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617408">
            <name>List&lt;UniquePtr&lt;System.Json.JsonValue>>&amp;&amp;</name>
            <content>
                <baseType ref="type.4617388"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617389">
            <name>List&lt;UniquePtr&lt;System.Json.JsonValue>>*</name>
            <content>
                <baseType ref="type.4617388"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2395">
            <name>Literal&amp;&amp;</name>
            <content>
                <baseType ref="class_Literal_2996038F9E8CCAE363F6BF2855F68961FFF05F77"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1" specialization="true">
            <name>LockGuard&lt;Mtx></name>
            <content>
                <primaryType ref="class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
                <argumentType ref="4606632"/>
            </content>
        </type>
        <type derived="true" id="type.1975">
            <name>LockGuard&lt;Mtx>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4611883" specialization="true">
            <name>LockGuard&lt;System.Threading.Mutex></name>
            <content>
                <primaryType ref="class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
                <argumentType ref="class_Mutex_CAF802A5F8A71934B07EA6C23937F60D9AECD650"/>
            </content>
        </type>
        <type derived="true" id="type.2162">
            <name>LockGuard&lt;System.Threading.Mutex>&amp;&amp;</name>
            <content>
                <baseType ref="type.4611883"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2428">
            <name>LvalueRef&amp;&amp;</name>
            <content>
                <baseType ref="class_LvalueRef_564B7A22159B1EA0883821F35678B0406B055A05"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D" specialization="true">
            <name>Map&lt;Key, Value, KeyCompare></name>
            <content>
                <primaryType ref="class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <argumentType ref="4616693"/>
                <argumentType ref="4616694"/>
                <argumentType ref="4616695"/>
            </content>
        </type>
        <type id="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D" specialization="true">
            <name>Map&lt;Key, Value, KeyCompare></name>
            <content>
                <primaryType ref="class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <argumentType ref="4616699"/>
                <argumentType ref="4616700"/>
                <argumentType ref="4616701"/>
            </content>
        </type>
        <type derived="true" id="type.4617906">
            <name>Map&lt;Key, Value, KeyCompare>&amp;</name>
            <content>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618588">
            <name>Map&lt;Key, Value, KeyCompare>&amp;</name>
            <content>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618527">
            <name>Map&lt;Key, Value, KeyCompare>&amp;</name>
            <content>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617784">
            <name>Map&lt;Key, Value, KeyCompare>&amp;</name>
            <content>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618089">
            <name>Map&lt;Key, Value, KeyCompare>&amp;</name>
            <content>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617507">
            <name>Map&lt;Key, Value, KeyCompare>&amp;</name>
            <content>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617967">
            <name>Map&lt;Key, Value, KeyCompare>&amp;</name>
            <content>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618466">
            <name>Map&lt;Key, Value, KeyCompare>&amp;</name>
            <content>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618028">
            <name>Map&lt;Key, Value, KeyCompare>&amp;</name>
            <content>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617845">
            <name>Map&lt;Key, Value, KeyCompare>&amp;</name>
            <content>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618588">
            <name>Map&lt;Key, Value, KeyCompare>&amp;</name>
            <content>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617446">
            <name>Map&lt;Key, Value, KeyCompare>&amp;</name>
            <content>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617966">
            <name>Map&lt;Key, Value, KeyCompare>*</name>
            <content>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617844">
            <name>Map&lt;Key, Value, KeyCompare>*</name>
            <content>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617445">
            <name>Map&lt;Key, Value, KeyCompare>*</name>
            <content>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618587">
            <name>Map&lt;Key, Value, KeyCompare>*</name>
            <content>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618027">
            <name>Map&lt;Key, Value, KeyCompare>*</name>
            <content>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617506">
            <name>Map&lt;Key, Value, KeyCompare>*</name>
            <content>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617783">
            <name>Map&lt;Key, Value, KeyCompare>*</name>
            <content>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617905">
            <name>Map&lt;Key, Value, KeyCompare>*</name>
            <content>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618088">
            <name>Map&lt;Key, Value, KeyCompare>*</name>
            <content>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618526">
            <name>Map&lt;Key, Value, KeyCompare>*</name>
            <content>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618587">
            <name>Map&lt;Key, Value, KeyCompare>*</name>
            <content>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618465">
            <name>Map&lt;Key, Value, KeyCompare>*</name>
            <content>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.4617328" specialization="true">
            <name>Map&lt;String&lt;uchar>, JsonValue*, Less&lt;String&lt;uchar>>></name>
            <content>
                <primaryType ref="class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <argumentType ref="type.4607142"/>
                <argumentType ref="type.4616576"/>
                <argumentType ref="type.4617322"/>
            </content>
        </type>
        <type derived="true" id="type.4617330">
            <name>Map&lt;String&lt;uchar>, JsonValue*, Less&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <baseType ref="type.4617328"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617329">
            <name>Map&lt;String&lt;uchar>, JsonValue*, Less&lt;String&lt;uchar>>>*</name>
            <content>
                <baseType ref="type.4617328"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618945">
            <name>Map&lt;String&lt;uchar>, JsonValue*, Less&lt;String&lt;uchar>>>*&amp;</name>
            <content>
                <baseType ref="type.4617328"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618944">
            <name>Map&lt;String&lt;uchar>, JsonValue*, Less&lt;String&lt;uchar>>>**</name>
            <content>
                <baseType ref="type.4617328"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1972">
            <name>Mtx&amp;</name>
            <content>
                <baseType ref="4606632"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2390">
            <name>New&amp;&amp;</name>
            <content>
                <baseType ref="class_New_DC04D52C4D476FD919D770D43330D434B51E2D21"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2348">
            <name>Not&amp;&amp;</name>
            <content>
                <baseType ref="class_Not_5E324445E5A5F8057BEBD48898C26110CD402187"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_NumberRule_27C8EFF3C84114164EA6042FB8F167C6EB90366C">
            <name>NumberRule</name>
        </type>
        <type derived="true" id="type.4616680">
            <name>NumberRule&amp;</name>
            <content>
                <baseType ref="class_NumberRule_27C8EFF3C84114164EA6042FB8F167C6EB90366C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616679">
            <name>NumberRule*</name>
            <content>
                <baseType ref="class_NumberRule_27C8EFF3C84114164EA6042FB8F167C6EB90366C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4619056">
            <name>NumberRule*&amp;</name>
            <content>
                <baseType ref="class_NumberRule_27C8EFF3C84114164EA6042FB8F167C6EB90366C"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4619055">
            <name>NumberRule**</name>
            <content>
                <baseType ref="class_NumberRule_27C8EFF3C84114164EA6042FB8F167C6EB90366C"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_ObjectRule_5E2C4DD6D6F88EBF302BC3AE586ACFE38942C13D">
            <name>ObjectRule</name>
        </type>
        <type derived="true" id="type.4616650">
            <name>ObjectRule&amp;</name>
            <content>
                <baseType ref="class_ObjectRule_5E2C4DD6D6F88EBF302BC3AE586ACFE38942C13D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616649">
            <name>ObjectRule*</name>
            <content>
                <baseType ref="class_ObjectRule_5E2C4DD6D6F88EBF302BC3AE586ACFE38942C13D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4619031">
            <name>ObjectRule*&amp;</name>
            <content>
                <baseType ref="class_ObjectRule_5E2C4DD6D6F88EBF302BC3AE586ACFE38942C13D"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4619030">
            <name>ObjectRule**</name>
            <content>
                <baseType ref="class_ObjectRule_5E2C4DD6D6F88EBF302BC3AE586ACFE38942C13D"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2436">
            <name>OptionalParser&amp;&amp;</name>
            <content>
                <baseType ref="class_OptionalParser_F2758E0656F6FF0FCFAFB3BADC90975486CE943A"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4618773" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.4618752"/>
                <argumentType ref="type.4605930"/>
            </content>
        </type>
        <type id="type.4617692" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.4617671"/>
                <argumentType ref="type.4605930"/>
            </content>
        </type>
        <type id="type.4618851" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.4618830"/>
                <argumentType ref="type.4605930"/>
            </content>
        </type>
        <type id="type.4618352" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.4618331"/>
                <argumentType ref="type.4605930"/>
            </content>
        </type>
        <type id="type.4618274" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.4618253"/>
                <argumentType ref="type.4605930"/>
            </content>
        </type>
        <type id="type.4617614" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.4617593"/>
                <argumentType ref="type.4605930"/>
            </content>
        </type>
        <type id="type.4618695" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.4618674"/>
                <argumentType ref="type.4605930"/>
            </content>
        </type>
        <type id="type.4618196" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.4618175"/>
                <argumentType ref="type.4605930"/>
            </content>
        </type>
        <type derived="true" id="type.4618697">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool>&amp;</name>
            <content>
                <baseType ref="type.4618695"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617616">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool>&amp;</name>
            <content>
                <baseType ref="type.4617614"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618198">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool>&amp;</name>
            <content>
                <baseType ref="type.4618196"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618697">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool>&amp;</name>
            <content>
                <baseType ref="type.4618695"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617694">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool>&amp;</name>
            <content>
                <baseType ref="type.4617692"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618853">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool>&amp;</name>
            <content>
                <baseType ref="type.4618851"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618276">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool>&amp;</name>
            <content>
                <baseType ref="type.4618274"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618775">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool>&amp;</name>
            <content>
                <baseType ref="type.4618773"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618354">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool>&amp;</name>
            <content>
                <baseType ref="type.4618352"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618197">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool>*</name>
            <content>
                <baseType ref="type.4618196"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617615">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool>*</name>
            <content>
                <baseType ref="type.4617614"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618852">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool>*</name>
            <content>
                <baseType ref="type.4618851"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618275">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool>*</name>
            <content>
                <baseType ref="type.4618274"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618696">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool>*</name>
            <content>
                <baseType ref="type.4618695"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618852">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool>*</name>
            <content>
                <baseType ref="type.4618851"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618353">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool>*</name>
            <content>
                <baseType ref="type.4618352"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617693">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool>*</name>
            <content>
                <baseType ref="type.4617692"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618774">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool>*</name>
            <content>
                <baseType ref="type.4618773"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.4617126" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.4617114"/>
                <argumentType ref="type.4605930"/>
            </content>
        </type>
        <type id="type.2207" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.2195"/>
                <argumentType ref="type.4605930"/>
            </content>
        </type>
        <type derived="true" id="type.2209">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>&amp;</name>
            <content>
                <baseType ref="type.2207"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617128">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>&amp;</name>
            <content>
                <baseType ref="type.4617126"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2208">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>*</name>
            <content>
                <baseType ref="type.2207"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617127">
            <name>Pair&lt;HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>, bool>*</name>
            <content>
                <baseType ref="type.4617126"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980" specialization="true">
            <name>Pair&lt;K, T></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="4616631"/>
                <argumentType ref="4616632"/>
            </content>
        </type>
        <type derived="true" id="type.4618811">
            <name>Pair&lt;K, T>&amp;</name>
            <content>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618156">
            <name>Pair&lt;K, T>&amp;</name>
            <content>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618312">
            <name>Pair&lt;K, T>&amp;</name>
            <content>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617574">
            <name>Pair&lt;K, T>&amp;</name>
            <content>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617652">
            <name>Pair&lt;K, T>&amp;</name>
            <content>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618811">
            <name>Pair&lt;K, T>&amp;</name>
            <content>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618234">
            <name>Pair&lt;K, T>&amp;</name>
            <content>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618655">
            <name>Pair&lt;K, T>&amp;</name>
            <content>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618733">
            <name>Pair&lt;K, T>&amp;</name>
            <content>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618732">
            <name>Pair&lt;K, T>*</name>
            <content>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618155">
            <name>Pair&lt;K, T>*</name>
            <content>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618810">
            <name>Pair&lt;K, T>*</name>
            <content>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617651">
            <name>Pair&lt;K, T>*</name>
            <content>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618311">
            <name>Pair&lt;K, T>*</name>
            <content>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617573">
            <name>Pair&lt;K, T>*</name>
            <content>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618732">
            <name>Pair&lt;K, T>*</name>
            <content>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618654">
            <name>Pair&lt;K, T>*</name>
            <content>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618233">
            <name>Pair&lt;K, T>*</name>
            <content>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183" specialization="true">
            <name>Pair&lt;Key, Value></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="4616693"/>
                <argumentType ref="4616694"/>
            </content>
        </type>
        <type derived="true" id="type.4618095">
            <name>Pair&lt;Key, Value>&amp;</name>
            <content>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618472">
            <name>Pair&lt;Key, Value>&amp;</name>
            <content>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617973">
            <name>Pair&lt;Key, Value>&amp;</name>
            <content>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617452">
            <name>Pair&lt;Key, Value>&amp;</name>
            <content>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618533">
            <name>Pair&lt;Key, Value>&amp;</name>
            <content>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617790">
            <name>Pair&lt;Key, Value>&amp;</name>
            <content>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618533">
            <name>Pair&lt;Key, Value>&amp;</name>
            <content>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617912">
            <name>Pair&lt;Key, Value>&amp;</name>
            <content>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617851">
            <name>Pair&lt;Key, Value>&amp;</name>
            <content>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617513">
            <name>Pair&lt;Key, Value>&amp;</name>
            <content>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618034">
            <name>Pair&lt;Key, Value>&amp;</name>
            <content>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618594">
            <name>Pair&lt;Key, Value>&amp;</name>
            <content>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618593">
            <name>Pair&lt;Key, Value>*</name>
            <content>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617911">
            <name>Pair&lt;Key, Value>*</name>
            <content>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618593">
            <name>Pair&lt;Key, Value>*</name>
            <content>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617451">
            <name>Pair&lt;Key, Value>*</name>
            <content>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617850">
            <name>Pair&lt;Key, Value>*</name>
            <content>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618532">
            <name>Pair&lt;Key, Value>*</name>
            <content>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618033">
            <name>Pair&lt;Key, Value>*</name>
            <content>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618094">
            <name>Pair&lt;Key, Value>*</name>
            <content>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617972">
            <name>Pair&lt;Key, Value>*</name>
            <content>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617512">
            <name>Pair&lt;Key, Value>*</name>
            <content>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617789">
            <name>Pair&lt;Key, Value>*</name>
            <content>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618471">
            <name>Pair&lt;Key, Value>*</name>
            <content>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.4617832" specialization="true">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.4617824"/>
                <argumentType ref="type.4605930"/>
            </content>
        </type>
        <type id="type.4617954" specialization="true">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.4617946"/>
                <argumentType ref="type.4605930"/>
            </content>
        </type>
        <type id="type.4618015" specialization="true">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.4618007"/>
                <argumentType ref="type.4605930"/>
            </content>
        </type>
        <type id="type.4618636" specialization="true">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.4618628"/>
                <argumentType ref="type.4605930"/>
            </content>
        </type>
        <type id="type.4618514" specialization="true">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.4618506"/>
                <argumentType ref="type.4605930"/>
            </content>
        </type>
        <type id="type.4618575" specialization="true">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.4618567"/>
                <argumentType ref="type.4605930"/>
            </content>
        </type>
        <type id="type.4617555" specialization="true">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.4617547"/>
                <argumentType ref="type.4605930"/>
            </content>
        </type>
        <type id="type.4618076" specialization="true">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.4618068"/>
                <argumentType ref="type.4605930"/>
            </content>
        </type>
        <type id="type.4617494" specialization="true">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.4617486"/>
                <argumentType ref="type.4605930"/>
            </content>
        </type>
        <type id="type.4618575" specialization="true">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.4618567"/>
                <argumentType ref="type.4605930"/>
            </content>
        </type>
        <type id="type.4617893" specialization="true">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.4617885"/>
                <argumentType ref="type.4605930"/>
            </content>
        </type>
        <type id="type.4618137" specialization="true">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.4618129"/>
                <argumentType ref="type.4605930"/>
            </content>
        </type>
        <type derived="true" id="type.4617834">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool>&amp;</name>
            <content>
                <baseType ref="type.4617832"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618139">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool>&amp;</name>
            <content>
                <baseType ref="type.4618137"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617956">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool>&amp;</name>
            <content>
                <baseType ref="type.4617954"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618638">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool>&amp;</name>
            <content>
                <baseType ref="type.4618636"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617557">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool>&amp;</name>
            <content>
                <baseType ref="type.4617555"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617496">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool>&amp;</name>
            <content>
                <baseType ref="type.4617494"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618017">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool>&amp;</name>
            <content>
                <baseType ref="type.4618015"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618577">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool>&amp;</name>
            <content>
                <baseType ref="type.4618575"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617895">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool>&amp;</name>
            <content>
                <baseType ref="type.4617893"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618078">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool>&amp;</name>
            <content>
                <baseType ref="type.4618076"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618638">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool>&amp;</name>
            <content>
                <baseType ref="type.4618636"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618516">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool>&amp;</name>
            <content>
                <baseType ref="type.4618514"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617955">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool>*</name>
            <content>
                <baseType ref="type.4617954"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618637">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool>*</name>
            <content>
                <baseType ref="type.4618636"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618515">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool>*</name>
            <content>
                <baseType ref="type.4618514"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618016">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool>*</name>
            <content>
                <baseType ref="type.4618015"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618637">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool>*</name>
            <content>
                <baseType ref="type.4618636"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617833">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool>*</name>
            <content>
                <baseType ref="type.4617832"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618138">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool>*</name>
            <content>
                <baseType ref="type.4618137"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617894">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool>*</name>
            <content>
                <baseType ref="type.4617893"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618077">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool>*</name>
            <content>
                <baseType ref="type.4618076"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617556">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool>*</name>
            <content>
                <baseType ref="type.4617555"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617495">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool>*</name>
            <content>
                <baseType ref="type.4617494"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618576">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool>*</name>
            <content>
                <baseType ref="type.4618575"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.4617377" specialization="true">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, JsonValue*>, Pair&lt;String&lt;uchar>, JsonValue*>&amp;, Pair&lt;String&lt;uchar>, JsonValue*>*>, bool></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.4617369"/>
                <argumentType ref="type.4605930"/>
            </content>
        </type>
        <type derived="true" id="type.4617379">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, JsonValue*>, Pair&lt;String&lt;uchar>, JsonValue*>&amp;, Pair&lt;String&lt;uchar>, JsonValue*>*>, bool>&amp;</name>
            <content>
                <baseType ref="type.4617377"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618941">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, JsonValue*>, Pair&lt;String&lt;uchar>, JsonValue*>&amp;, Pair&lt;String&lt;uchar>, JsonValue*>*>, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.4617377"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617378">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, JsonValue*>, Pair&lt;String&lt;uchar>, JsonValue*>&amp;, Pair&lt;String&lt;uchar>, JsonValue*>*>, bool>*</name>
            <content>
                <baseType ref="type.4617377"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.4617334" specialization="true">
            <name>Pair&lt;String&lt;uchar>, JsonValue*></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="type.4607142"/>
                <argumentType ref="type.4616576"/>
            </content>
        </type>
        <type derived="true" id="type.4617336">
            <name>Pair&lt;String&lt;uchar>, JsonValue*>&amp;</name>
            <content>
                <baseType ref="type.4617334"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618900">
            <name>Pair&lt;String&lt;uchar>, JsonValue*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4617334"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617335">
            <name>Pair&lt;String&lt;uchar>, JsonValue*>*</name>
            <content>
                <baseType ref="type.4617334"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9" specialization="true">
            <name>Pair&lt;T, U></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="4606643"/>
                <argumentType ref="4606644"/>
            </content>
        </type>
        <type derived="true" id="type.1830">
            <name>Parser&amp;</name>
            <content>
                <baseType ref="class_Parser_59591398FA427ADC5EC015FB52651571177DB77D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616537">
            <name>Parser&amp;</name>
            <content>
                <baseType ref="class_Parser_59591398FA427ADC5EC015FB52651571177DB77D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1829">
            <name>Parser*</name>
            <content>
                <baseType ref="class_Parser_59591398FA427ADC5EC015FB52651571177DB77D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616536">
            <name>Parser*</name>
            <content>
                <baseType ref="class_Parser_59591398FA427ADC5EC015FB52651571177DB77D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2449">
            <name>ParsingData&amp;&amp;</name>
            <content>
                <baseType ref="class_ParsingData_9F05BA66DA13D9A55E1E7FF50B19E250484C3A7B"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616539">
            <name>ParsingDomain&amp;</name>
            <content>
                <baseType ref="class_ParsingDomain_DBADEDB24194482080D6E7112DE96AB5FCAD1A87"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1832">
            <name>ParsingDomain&amp;</name>
            <content>
                <baseType ref="class_ParsingDomain_DBADEDB24194482080D6E7112DE96AB5FCAD1A87"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1831">
            <name>ParsingDomain*</name>
            <content>
                <baseType ref="class_ParsingDomain_DBADEDB24194482080D6E7112DE96AB5FCAD1A87"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616538">
            <name>ParsingDomain*</name>
            <content>
                <baseType ref="class_ParsingDomain_DBADEDB24194482080D6E7112DE96AB5FCAD1A87"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4614139">
            <name>ParsingDomain*</name>
            <content>
                <baseType ref="class_ParsingDomain_DBADEDB24194482080D6E7112DE96AB5FCAD1A87"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2430">
            <name>Pointer&amp;&amp;</name>
            <content>
                <baseType ref="class_Pointer_37B1358240AF7AEA32F2A089E384F29AB860D4E6"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2439">
            <name>PositiveParser&amp;&amp;</name>
            <content>
                <baseType ref="class_PositiveParser_773062827D5C6002110C7D897D790DAEEE06A502"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2378">
            <name>PostfixDecrement&amp;&amp;</name>
            <content>
                <baseType ref="class_PostfixDecrement_D09AB7ACBA491B153051FDF9DE245E475C7F6392"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2375">
            <name>PostfixIncrement&amp;&amp;</name>
            <content>
                <baseType ref="class_PostfixIncrement_DDC6B0BA10308D23CE5F90EE4D6B95A60E196FE9"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2360">
            <name>PrefixDecrement&amp;&amp;</name>
            <content>
                <baseType ref="class_PrefixDecrement_999D7C38861B7D6CED24609E18ACD9197FF478F0"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2357">
            <name>PrefixIncrement&amp;&amp;</name>
            <content>
                <baseType ref="class_PrefixIncrement_8035645A064F2FF3F7808392B992A24FA56E9E9D"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4615802" specialization="true">
            <name>RandomAccessIter&lt;ActionParser*, const ActionParser*&amp;, const ActionParser**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4613996"/>
                <argumentType ref="type.4615800"/>
                <argumentType ref="type.4615801"/>
            </content>
        </type>
        <type derived="true" id="type.2227">
            <name>RandomAccessIter&lt;ActionParser*, const ActionParser*&amp;, const ActionParser**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4615802"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4610724" specialization="true">
            <name>RandomAccessIter&lt;Age*, const Age*&amp;, const Age**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4606836"/>
                <argumentType ref="type.4610567"/>
                <argumentType ref="type.4610723"/>
            </content>
        </type>
        <type derived="true" id="type.2119">
            <name>RandomAccessIter&lt;Age*, const Age*&amp;, const Age**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4610724"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4611764" specialization="true">
            <name>RandomAccessIter&lt;AliasType*, const AliasType*&amp;, const AliasType**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4606907"/>
                <argumentType ref="type.4611607"/>
                <argumentType ref="type.4611763"/>
            </content>
        </type>
        <type derived="true" id="type.2144">
            <name>RandomAccessIter&lt;AliasType*, const AliasType*&amp;, const AliasType**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4611764"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4611348" specialization="true">
            <name>RandomAccessIter&lt;BidiClass*, const BidiClass*&amp;, const BidiClass**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4606881"/>
                <argumentType ref="type.4611191"/>
                <argumentType ref="type.4611347"/>
            </content>
        </type>
        <type derived="true" id="type.2134">
            <name>RandomAccessIter&lt;BidiClass*, const BidiClass*&amp;, const BidiClass**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4611348"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4611556" specialization="true">
            <name>RandomAccessIter&lt;BidiPairedBracketType*, const BidiPairedBracketType*&amp;, const BidiPairedBracketType**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4606894"/>
                <argumentType ref="type.4611399"/>
                <argumentType ref="type.4611555"/>
            </content>
        </type>
        <type derived="true" id="type.2139">
            <name>RandomAccessIter&lt;BidiPairedBracketType*, const BidiPairedBracketType*&amp;, const BidiPairedBracketType**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4611556"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4610087" specialization="true">
            <name>RandomAccessIter&lt;BinaryProperty*, const BinaryProperty*&amp;, const BinaryProperty**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4606806"/>
                <argumentType ref="type.4609916"/>
                <argumentType ref="type.4610086"/>
            </content>
        </type>
        <type derived="true" id="type.2104">
            <name>RandomAccessIter&lt;BinaryProperty*, const BinaryProperty*&amp;, const BinaryProperty**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4610087"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4610305" specialization="true">
            <name>RandomAccessIter&lt;Block*, const Block*&amp;, const Block**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4606816"/>
                <argumentType ref="type.4610148"/>
                <argumentType ref="type.4610304"/>
            </content>
        </type>
        <type derived="true" id="type.2109">
            <name>RandomAccessIter&lt;Block*, const Block*&amp;, const Block**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4610305"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4615344" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Grammar*>*, Bucket&lt;Grammar*>*&amp;, Bucket&lt;Grammar*>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4615311"/>
                <argumentType ref="type.4615342"/>
                <argumentType ref="type.4615343"/>
            </content>
        </type>
        <type derived="true" id="type.2194">
            <name>RandomAccessIter&lt;Bucket&lt;Grammar*>*, Bucket&lt;Grammar*>*&amp;, Bucket&lt;Grammar*>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4615344"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4615335" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Grammar*>*, const Bucket&lt;Grammar*>*&amp;, const Bucket&lt;Grammar*>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4615311"/>
                <argumentType ref="type.4615333"/>
                <argumentType ref="type.4615334"/>
            </content>
        </type>
        <type derived="true" id="type.2193">
            <name>RandomAccessIter&lt;Bucket&lt;Grammar*>*, const Bucket&lt;Grammar*>*&amp;, const Bucket&lt;Grammar*>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4615335"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4618294" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4618260"/>
                <argumentType ref="type.4618292"/>
                <argumentType ref="type.4618293"/>
            </content>
        </type>
        <type id="type.4618372" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4618338"/>
                <argumentType ref="type.4618370"/>
                <argumentType ref="type.4618371"/>
            </content>
        </type>
        <type id="type.4607854" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4607819"/>
                <argumentType ref="type.4607852"/>
                <argumentType ref="type.4607853"/>
            </content>
        </type>
        <type id="type.4618871" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4618837"/>
                <argumentType ref="type.4618869"/>
                <argumentType ref="type.4618870"/>
            </content>
        </type>
        <type id="type.4618793" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4618759"/>
                <argumentType ref="type.4618791"/>
                <argumentType ref="type.4618792"/>
            </content>
        </type>
        <type id="type.4607932" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4607898"/>
                <argumentType ref="type.4607930"/>
                <argumentType ref="type.4607931"/>
            </content>
        </type>
        <type id="type.4617634" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4617600"/>
                <argumentType ref="type.4617632"/>
                <argumentType ref="type.4617633"/>
            </content>
        </type>
        <type id="type.4618216" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4618182"/>
                <argumentType ref="type.4618214"/>
                <argumentType ref="type.4618215"/>
            </content>
        </type>
        <type id="type.4618715" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4618681"/>
                <argumentType ref="type.4618713"/>
                <argumentType ref="type.4618714"/>
            </content>
        </type>
        <type id="type.4618372" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4618338"/>
                <argumentType ref="type.4618370"/>
                <argumentType ref="type.4618371"/>
            </content>
        </type>
        <type id="type.4617712" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4617678"/>
                <argumentType ref="type.4617710"/>
                <argumentType ref="type.4617711"/>
            </content>
        </type>
        <type derived="true" id="type.4618296">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <baseType ref="type.4618294"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618717">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <baseType ref="type.4618715"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617714">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <baseType ref="type.4617712"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617636">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <baseType ref="type.4617634"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618374">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <baseType ref="type.4618372"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618218">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <baseType ref="type.4618216"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618795">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <baseType ref="type.4618793"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618873">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <baseType ref="type.4618871"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618795">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <baseType ref="type.4618793"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2263">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4617634"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2303">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4618793"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2301">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4618715"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1921">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4607854"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1926">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4607932"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2287">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4618372"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2285">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4618294"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2305">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4618871"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2283">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4618216"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2265">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4617712"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618794">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <baseType ref="type.4618793"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618217">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <baseType ref="type.4618216"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618716">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <baseType ref="type.4618715"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618872">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <baseType ref="type.4618871"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618794">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <baseType ref="type.4618793"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618373">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <baseType ref="type.4618372"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617713">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <baseType ref="type.4617712"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617635">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <baseType ref="type.4617634"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618295">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <baseType ref="type.4618294"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.4618862" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4618837"/>
                <argumentType ref="type.4618860"/>
                <argumentType ref="type.4618861"/>
            </content>
        </type>
        <type id="type.4607845" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4607819"/>
                <argumentType ref="type.4607843"/>
                <argumentType ref="type.4607844"/>
            </content>
        </type>
        <type id="type.4618363" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4618338"/>
                <argumentType ref="type.4618361"/>
                <argumentType ref="type.4618362"/>
            </content>
        </type>
        <type id="type.4618207" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4618182"/>
                <argumentType ref="type.4618205"/>
                <argumentType ref="type.4618206"/>
            </content>
        </type>
        <type id="type.4618784" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4618759"/>
                <argumentType ref="type.4618782"/>
                <argumentType ref="type.4618783"/>
            </content>
        </type>
        <type id="type.4618706" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4618681"/>
                <argumentType ref="type.4618704"/>
                <argumentType ref="type.4618705"/>
            </content>
        </type>
        <type id="type.4617625" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4617600"/>
                <argumentType ref="type.4617623"/>
                <argumentType ref="type.4617624"/>
            </content>
        </type>
        <type id="type.4607923" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4607898"/>
                <argumentType ref="type.4607921"/>
                <argumentType ref="type.4607922"/>
            </content>
        </type>
        <type id="type.4617703" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4617678"/>
                <argumentType ref="type.4617701"/>
                <argumentType ref="type.4617702"/>
            </content>
        </type>
        <type id="type.4618285" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4618260"/>
                <argumentType ref="type.4618283"/>
                <argumentType ref="type.4618284"/>
            </content>
        </type>
        <type id="type.4618862" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4618837"/>
                <argumentType ref="type.4618860"/>
                <argumentType ref="type.4618861"/>
            </content>
        </type>
        <type derived="true" id="type.4618365">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <baseType ref="type.4618363"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618864">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <baseType ref="type.4618862"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617627">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <baseType ref="type.4617625"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618287">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <baseType ref="type.4618285"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618708">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <baseType ref="type.4618706"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618786">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <baseType ref="type.4618784"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617705">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <baseType ref="type.4617703"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618209">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <baseType ref="type.4618207"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2264">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4617703"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1925">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4607923"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2262">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4617625"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2304">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4618862"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2302">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4618784"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1920">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4607845"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2286">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4618363"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2284">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4618285"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2282">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4618207"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2300">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4618706"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617626">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <baseType ref="type.4617625"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618364">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <baseType ref="type.4618363"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618863">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <baseType ref="type.4618862"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618286">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <baseType ref="type.4618285"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618707">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <baseType ref="type.4618706"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618785">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <baseType ref="type.4618784"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618208">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <baseType ref="type.4618207"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617704">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <baseType ref="type.4617703"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618863">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <baseType ref="type.4618862"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.4610701" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Age*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4610667"/>
                <argumentType ref="type.4610699"/>
                <argumentType ref="type.4610700"/>
            </content>
        </type>
        <type derived="true" id="type.2118">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4610701"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4610692" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4610667"/>
                <argumentType ref="type.4610690"/>
                <argumentType ref="type.4610691"/>
            </content>
        </type>
        <type derived="true" id="type.2117">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4610692"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4611741" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4611707"/>
                <argumentType ref="type.4611739"/>
                <argumentType ref="type.4611740"/>
            </content>
        </type>
        <type derived="true" id="type.2143">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4611741"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4611732" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4611707"/>
                <argumentType ref="type.4611730"/>
                <argumentType ref="type.4611731"/>
            </content>
        </type>
        <type derived="true" id="type.2142">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4611732"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4611325" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4611291"/>
                <argumentType ref="type.4611323"/>
                <argumentType ref="type.4611324"/>
            </content>
        </type>
        <type derived="true" id="type.2133">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4611325"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4611316" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4611291"/>
                <argumentType ref="type.4611314"/>
                <argumentType ref="type.4611315"/>
            </content>
        </type>
        <type derived="true" id="type.2132">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4611316"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4611533" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4611499"/>
                <argumentType ref="type.4611531"/>
                <argumentType ref="type.4611532"/>
            </content>
        </type>
        <type derived="true" id="type.2138">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4611533"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4611524" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4611499"/>
                <argumentType ref="type.4611522"/>
                <argumentType ref="type.4611523"/>
            </content>
        </type>
        <type derived="true" id="type.2137">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4611524"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4610071" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4610037"/>
                <argumentType ref="type.4610069"/>
                <argumentType ref="type.4610070"/>
            </content>
        </type>
        <type derived="true" id="type.2103">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4610071"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4610062" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4610037"/>
                <argumentType ref="type.4610060"/>
                <argumentType ref="type.4610061"/>
            </content>
        </type>
        <type derived="true" id="type.2102">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4610062"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4610282" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Block*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4610248"/>
                <argumentType ref="type.4610280"/>
                <argumentType ref="type.4610281"/>
            </content>
        </type>
        <type derived="true" id="type.2108">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4610282"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4610273" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4610248"/>
                <argumentType ref="type.4610271"/>
                <argumentType ref="type.4610272"/>
            </content>
        </type>
        <type derived="true" id="type.2107">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4610273"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4610493" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4610459"/>
                <argumentType ref="type.4610491"/>
                <argumentType ref="type.4610492"/>
            </content>
        </type>
        <type derived="true" id="type.2113">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4610493"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4610484" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4610459"/>
                <argumentType ref="type.4610482"/>
                <argumentType ref="type.4610483"/>
            </content>
        </type>
        <type derived="true" id="type.2112">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4610484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4611117" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4611083"/>
                <argumentType ref="type.4611115"/>
                <argumentType ref="type.4611116"/>
            </content>
        </type>
        <type derived="true" id="type.2128">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4611117"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4611108" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4611083"/>
                <argumentType ref="type.4611106"/>
                <argumentType ref="type.4611107"/>
            </content>
        </type>
        <type derived="true" id="type.2127">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4611108"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4610909" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Script*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4610875"/>
                <argumentType ref="type.4610907"/>
                <argumentType ref="type.4610908"/>
            </content>
        </type>
        <type derived="true" id="type.2123">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4610909"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4610900" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4610875"/>
                <argumentType ref="type.4610898"/>
                <argumentType ref="type.4610899"/>
            </content>
        </type>
        <type derived="true" id="type.2122">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4610900"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4615590" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4615556"/>
                <argumentType ref="type.4615588"/>
                <argumentType ref="type.4615589"/>
            </content>
        </type>
        <type derived="true" id="type.2218">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4615590"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4615581" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4615556"/>
                <argumentType ref="type.4615579"/>
                <argumentType ref="type.4615580"/>
            </content>
        </type>
        <type derived="true" id="type.2217">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Grammar*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4615581"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4615666" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4615632"/>
                <argumentType ref="type.4615664"/>
                <argumentType ref="type.4615665"/>
            </content>
        </type>
        <type derived="true" id="type.2220">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4615666"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4615657" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4615632"/>
                <argumentType ref="type.4615655"/>
                <argumentType ref="type.4615656"/>
            </content>
        </type>
        <type derived="true" id="type.2219">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, Namespace*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4615657"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4615913" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4615879"/>
                <argumentType ref="type.4615911"/>
                <argumentType ref="type.4615912"/>
            </content>
        </type>
        <type derived="true" id="type.2230">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*, Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4615913"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4615904" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4615879"/>
                <argumentType ref="type.4615902"/>
                <argumentType ref="type.4615903"/>
            </content>
        </type>
        <type derived="true" id="type.2229">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, ParsingObject*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4615904"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4615156" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*, Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4615122"/>
                <argumentType ref="type.4615154"/>
                <argumentType ref="type.4615155"/>
            </content>
        </type>
        <type derived="true" id="type.2189">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*, Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;, Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4615156"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4615147" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4615122"/>
                <argumentType ref="type.4615145"/>
                <argumentType ref="type.4615146"/>
            </content>
        </type>
        <type derived="true" id="type.2188">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*, const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>*&amp;, const Bucket&lt;Pair&lt;String&lt;uchar>, String&lt;uchar>>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4615147"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4610625" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4610591"/>
                <argumentType ref="type.4610623"/>
                <argumentType ref="type.4610624"/>
            </content>
        </type>
        <type derived="true" id="type.2116">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4610625"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4610616" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4610591"/>
                <argumentType ref="type.4610614"/>
                <argumentType ref="type.4610615"/>
            </content>
        </type>
        <type derived="true" id="type.2115">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4610616"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4611665" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4611631"/>
                <argumentType ref="type.4611663"/>
                <argumentType ref="type.4611664"/>
            </content>
        </type>
        <type derived="true" id="type.2141">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4611665"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4611656" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4611631"/>
                <argumentType ref="type.4611654"/>
                <argumentType ref="type.4611655"/>
            </content>
        </type>
        <type derived="true" id="type.2140">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4611656"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4611249" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4611215"/>
                <argumentType ref="type.4611247"/>
                <argumentType ref="type.4611248"/>
            </content>
        </type>
        <type derived="true" id="type.2131">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4611249"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4611240" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4611215"/>
                <argumentType ref="type.4611238"/>
                <argumentType ref="type.4611239"/>
            </content>
        </type>
        <type derived="true" id="type.2130">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4611240"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4611457" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4611423"/>
                <argumentType ref="type.4611455"/>
                <argumentType ref="type.4611456"/>
            </content>
        </type>
        <type derived="true" id="type.2136">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4611457"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4611448" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4611423"/>
                <argumentType ref="type.4611446"/>
                <argumentType ref="type.4611447"/>
            </content>
        </type>
        <type derived="true" id="type.2135">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4611448"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4609974" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4609940"/>
                <argumentType ref="type.4609972"/>
                <argumentType ref="type.4609973"/>
            </content>
        </type>
        <type derived="true" id="type.2101">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4609974"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4609965" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4609940"/>
                <argumentType ref="type.4609963"/>
                <argumentType ref="type.4609964"/>
            </content>
        </type>
        <type derived="true" id="type.2100">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4609965"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4610206" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4610172"/>
                <argumentType ref="type.4610204"/>
                <argumentType ref="type.4610205"/>
            </content>
        </type>
        <type derived="true" id="type.2106">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4610206"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4610197" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4610172"/>
                <argumentType ref="type.4610195"/>
                <argumentType ref="type.4610196"/>
            </content>
        </type>
        <type derived="true" id="type.2105">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4610197"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4610417" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4610383"/>
                <argumentType ref="type.4610415"/>
                <argumentType ref="type.4610416"/>
            </content>
        </type>
        <type derived="true" id="type.2111">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4610417"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4610408" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4610383"/>
                <argumentType ref="type.4610406"/>
                <argumentType ref="type.4610407"/>
            </content>
        </type>
        <type derived="true" id="type.2110">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4610408"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4611041" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4611007"/>
                <argumentType ref="type.4611039"/>
                <argumentType ref="type.4611040"/>
            </content>
        </type>
        <type derived="true" id="type.2126">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4611041"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4611032" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4611007"/>
                <argumentType ref="type.4611030"/>
                <argumentType ref="type.4611031"/>
            </content>
        </type>
        <type derived="true" id="type.2125">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4611032"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4610833" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4610799"/>
                <argumentType ref="type.4610831"/>
                <argumentType ref="type.4610832"/>
            </content>
        </type>
        <type derived="true" id="type.2121">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4610833"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4610824" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4610799"/>
                <argumentType ref="type.4610822"/>
                <argumentType ref="type.4610823"/>
            </content>
        </type>
        <type derived="true" id="type.2120">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4610824"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4615428" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;String&lt;uchar>>*, Bucket&lt;String&lt;uchar>>*&amp;, Bucket&lt;String&lt;uchar>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4615396"/>
                <argumentType ref="type.4615426"/>
                <argumentType ref="type.4615427"/>
            </content>
        </type>
        <type derived="true" id="type.2211">
            <name>RandomAccessIter&lt;Bucket&lt;String&lt;uchar>>*, Bucket&lt;String&lt;uchar>>*&amp;, Bucket&lt;String&lt;uchar>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4615428"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4615419" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;String&lt;uchar>>*, const Bucket&lt;String&lt;uchar>>*&amp;, const Bucket&lt;String&lt;uchar>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4615396"/>
                <argumentType ref="type.4615417"/>
                <argumentType ref="type.4615418"/>
            </content>
        </type>
        <type derived="true" id="type.2210">
            <name>RandomAccessIter&lt;Bucket&lt;String&lt;uchar>>*, const Bucket&lt;String&lt;uchar>>*&amp;, const Bucket&lt;String&lt;uchar>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4615419"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4608081" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4608047"/>
                <argumentType ref="type.4608079"/>
                <argumentType ref="type.4608080"/>
            </content>
        </type>
        <type id="type.4608007" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4607973"/>
                <argumentType ref="type.4608005"/>
                <argumentType ref="type.4608006"/>
            </content>
        </type>
        <type derived="true" id="type.1929">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4608007"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1933">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4608081"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4607998" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4607973"/>
                <argumentType ref="type.4607996"/>
                <argumentType ref="type.4607997"/>
            </content>
        </type>
        <type id="type.4608072" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4608047"/>
                <argumentType ref="type.4608070"/>
                <argumentType ref="type.4608071"/>
            </content>
        </type>
        <type derived="true" id="type.1928">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4607998"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1932">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4608072"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4608192" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, Bucket&lt;ValueType>*&amp;, Bucket&lt;ValueType>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4608156"/>
                <argumentType ref="type.4608190"/>
                <argumentType ref="type.4608191"/>
            </content>
        </type>
        <type derived="true" id="type.1942">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, Bucket&lt;ValueType>*&amp;, Bucket&lt;ValueType>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4608192"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4608183" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, const Bucket&lt;ValueType>*&amp;, const Bucket&lt;ValueType>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4608156"/>
                <argumentType ref="type.4608181"/>
                <argumentType ref="type.4608182"/>
            </content>
        </type>
        <type derived="true" id="type.1941">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, const Bucket&lt;ValueType>*&amp;, const Bucket&lt;ValueType>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4608183"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF" specialization="true">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="4606762"/>
                <argumentType ref="type.4609770"/>
                <argumentType ref="type.4609771"/>
            </content>
        </type>
        <type derived="true" id="type.2097">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2081">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2085">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2077">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2093">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2089">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2071">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966" specialization="true">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="4606762"/>
                <argumentType ref="type.4609756"/>
                <argumentType ref="type.4609754"/>
            </content>
        </type>
        <type derived="true" id="type.2088">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2092">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2084">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2076">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2080">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2070">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2096">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4610516" specialization="true">
            <name>RandomAccessIter&lt;GeneralCategory*, const GeneralCategory*&amp;, const GeneralCategory**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4606826"/>
                <argumentType ref="type.4610359"/>
                <argumentType ref="type.4610515"/>
            </content>
        </type>
        <type derived="true" id="type.2114">
            <name>RandomAccessIter&lt;GeneralCategory*, const GeneralCategory*&amp;, const GeneralCategory**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4610516"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4615693" specialization="true">
            <name>RandomAccessIter&lt;Namespace*, const Namespace*&amp;, const Namespace**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4614101"/>
                <argumentType ref="type.4615608"/>
                <argumentType ref="type.4615689"/>
            </content>
        </type>
        <type derived="true" id="type.2221">
            <name>RandomAccessIter&lt;Namespace*, const Namespace*&amp;, const Namespace**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4615693"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4615828" specialization="true">
            <name>RandomAccessIter&lt;NonterminalParser*, const NonterminalParser*&amp;, const NonterminalParser**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4614109"/>
                <argumentType ref="type.4615826"/>
                <argumentType ref="type.4615827"/>
            </content>
        </type>
        <type derived="true" id="type.2228">
            <name>RandomAccessIter&lt;NonterminalParser*, const NonterminalParser*&amp;, const NonterminalParser**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4615828"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4611133" specialization="true">
            <name>RandomAccessIter&lt;NumericType*, const NumericType*&amp;, const NumericType**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4606868"/>
                <argumentType ref="type.4610983"/>
                <argumentType ref="type.4611132"/>
            </content>
        </type>
        <type derived="true" id="type.2129">
            <name>RandomAccessIter&lt;NumericType*, const NumericType*&amp;, const NumericType**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4611133"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4615241" specialization="true">
            <name>RandomAccessIter&lt;RuleLink*, const RuleLink*&amp;, const RuleLink**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4614340"/>
                <argumentType ref="type.4615239"/>
                <argumentType ref="type.4615240"/>
            </content>
        </type>
        <type derived="true" id="type.2192">
            <name>RandomAccessIter&lt;RuleLink*, const RuleLink*&amp;, const RuleLink**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4615241"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4610932" specialization="true">
            <name>RandomAccessIter&lt;Script*, const Script*&amp;, const Script**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4606849"/>
                <argumentType ref="type.4610775"/>
                <argumentType ref="type.4610931"/>
            </content>
        </type>
        <type derived="true" id="type.2124">
            <name>RandomAccessIter&lt;Script*, const Script*&amp;, const Script**>&amp;&amp;</name>
            <content>
                <baseType ref="type.4610932"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4609840" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.4609803"/>
                <argumentType ref="type.4609802"/>
            </content>
        </type>
        <type id="type.4609746" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.4609709"/>
                <argumentType ref="type.4609708"/>
            </content>
        </type>
        <type id="type.4609652" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.4609615"/>
                <argumentType ref="type.4609614"/>
            </content>
        </type>
        <type id="type.4609605" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.4609568"/>
                <argumentType ref="type.4609567"/>
            </content>
        </type>
        <type id="type.4609558" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.4609521"/>
                <argumentType ref="type.4609520"/>
            </content>
        </type>
        <type id="type.4609699" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.4609662"/>
                <argumentType ref="type.4609661"/>
            </content>
        </type>
        <type id="type.4609793" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.4609759"/>
                <argumentType ref="type.4609758"/>
            </content>
        </type>
        <type derived="true" id="type.2079">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4609605"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2099">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4609840"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2087">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4609699"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2091">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4609746"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2083">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4609652"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2095">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4609793"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2074">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4609558"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4609786" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.4609762"/>
                <argumentType ref="type.4609761"/>
            </content>
        </type>
        <type id="type.4609645" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.4609618"/>
                <argumentType ref="type.4609617"/>
            </content>
        </type>
        <type id="type.4609739" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.4609712"/>
                <argumentType ref="type.4609711"/>
            </content>
        </type>
        <type id="type.4609598" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.4609571"/>
                <argumentType ref="type.4609570"/>
            </content>
        </type>
        <type id="type.4609692" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.4609665"/>
                <argumentType ref="type.4609664"/>
            </content>
        </type>
        <type id="type.4609833" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.4609806"/>
                <argumentType ref="type.4609805"/>
            </content>
        </type>
        <type id="type.4609551" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.4609524"/>
                <argumentType ref="type.4609523"/>
            </content>
        </type>
        <type derived="true" id="type.2078">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4609598"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2073">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4609551"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2098">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4609833"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2094">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4609786"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2090">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4609739"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2086">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4609692"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2082">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4609645"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4607089" specialization="true">
            <name>RandomAccessIter&lt;String&lt;char>, String&lt;char>&amp;, String&lt;char>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4607054"/>
                <argumentType ref="type.4607056"/>
                <argumentType ref="type.4607055"/>
            </content>
        </type>
        <type derived="true" id="type.1843">
            <name>RandomAccessIter&lt;String&lt;char>, String&lt;char>&amp;, String&lt;char>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4607089"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4607082" specialization="true">
            <name>RandomAccessIter&lt;String&lt;char>, const String&lt;char>&amp;, const String&lt;char>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4607054"/>
                <argumentType ref="type.4607059"/>
                <argumentType ref="type.4607058"/>
            </content>
        </type>
        <type derived="true" id="type.1842">
            <name>RandomAccessIter&lt;String&lt;char>, const String&lt;char>&amp;, const String&lt;char>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4607082"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4607179" specialization="true">
            <name>RandomAccessIter&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4607142"/>
                <argumentType ref="type.4607144"/>
                <argumentType ref="type.4607143"/>
            </content>
        </type>
        <type derived="true" id="type.1862">
            <name>RandomAccessIter&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4607179"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4607172" specialization="true">
            <name>RandomAccessIter&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4607142"/>
                <argumentType ref="type.4607147"/>
                <argumentType ref="type.4607146"/>
            </content>
        </type>
        <type derived="true" id="type.1861">
            <name>RandomAccessIter&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4607172"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4607134" specialization="true">
            <name>RandomAccessIter&lt;String&lt;wchar>, String&lt;wchar>&amp;, String&lt;wchar>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4607097"/>
                <argumentType ref="type.4607099"/>
                <argumentType ref="type.4607098"/>
            </content>
        </type>
        <type derived="true" id="type.1852">
            <name>RandomAccessIter&lt;String&lt;wchar>, String&lt;wchar>&amp;, String&lt;wchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4607134"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4607127" specialization="true">
            <name>RandomAccessIter&lt;String&lt;wchar>, const String&lt;wchar>&amp;, const String&lt;wchar>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4607097"/>
                <argumentType ref="type.4607102"/>
                <argumentType ref="type.4607101"/>
            </content>
        </type>
        <type derived="true" id="type.1851">
            <name>RandomAccessIter&lt;String&lt;wchar>, const String&lt;wchar>&amp;, const String&lt;wchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4607127"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4615778" specialization="true">
            <name>RandomAccessIter&lt;System.Text.Parsing.AttrOrVar, const AttrOrVar&amp;, const AttrOrVar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_AttrOrVar_50B6EF23E232C2A406B7F5C94499D4CC0CC6D353"/>
                <argumentType ref="type.4614332"/>
                <argumentType ref="type.4614331"/>
            </content>
        </type>
        <type derived="true" id="type.2226">
            <name>RandomAccessIter&lt;System.Text.Parsing.AttrOrVar, const AttrOrVar&amp;, const AttrOrVar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4615778"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4615764" specialization="true">
            <name>RandomAccessIter&lt;System.Text.Parsing.CharRange, CharRange&amp;, CharRange*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_CharRange_59BCB010C02C8EB081B9C5DB566155FFE78B44CC"/>
                <argumentType ref="type.4614167"/>
                <argumentType ref="type.4614166"/>
            </content>
        </type>
        <type derived="true" id="type.2225">
            <name>RandomAccessIter&lt;System.Text.Parsing.CharRange, CharRange&amp;, CharRange*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4615764"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4615757" specialization="true">
            <name>RandomAccessIter&lt;System.Text.Parsing.CharRange, const CharRange&amp;, const CharRange*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_CharRange_59BCB010C02C8EB081B9C5DB566155FFE78B44CC"/>
                <argumentType ref="type.4614170"/>
                <argumentType ref="type.4614169"/>
            </content>
        </type>
        <type derived="true" id="type.2224">
            <name>RandomAccessIter&lt;System.Text.Parsing.CharRange, const CharRange&amp;, const CharRange*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4615757"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4615515" specialization="true">
            <name>RandomAccessIter&lt;System.Text.Parsing.RuleData, RuleData&amp;, RuleData*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_RuleData_8D0490A7E12ED026B00D026E032926DF8F5F526A"/>
                <argumentType ref="type.4615497"/>
                <argumentType ref="type.4615496"/>
            </content>
        </type>
        <type derived="true" id="type.2216">
            <name>RandomAccessIter&lt;System.Text.Parsing.RuleData, RuleData&amp;, RuleData*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4615515"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4615508" specialization="true">
            <name>RandomAccessIter&lt;System.Text.Parsing.RuleData, const RuleData&amp;, const RuleData*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_RuleData_8D0490A7E12ED026B00D026E032926DF8F5F526A"/>
                <argumentType ref="type.4615505"/>
                <argumentType ref="type.4615506"/>
            </content>
        </type>
        <type derived="true" id="type.2215">
            <name>RandomAccessIter&lt;System.Text.Parsing.RuleData, const RuleData&amp;, const RuleData*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4615508"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4611794" specialization="true">
            <name>RandomAccessIter&lt;System.Unicode.Alias, Alias&amp;, Alias*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_Alias_F5EF8FC9193282B25B9E84210775A55CF0A14DB2"/>
                <argumentType ref="type.4606920"/>
                <argumentType ref="type.4606919"/>
            </content>
        </type>
        <type derived="true" id="type.2146">
            <name>RandomAccessIter&lt;System.Unicode.Alias, Alias&amp;, Alias*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4611794"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4611787" specialization="true">
            <name>RandomAccessIter&lt;System.Unicode.Alias, const Alias&amp;, const Alias*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_Alias_F5EF8FC9193282B25B9E84210775A55CF0A14DB2"/>
                <argumentType ref="type.4606923"/>
                <argumentType ref="type.4606922"/>
            </content>
        </type>
        <type derived="true" id="type.2145">
            <name>RandomAccessIter&lt;System.Unicode.Alias, const Alias&amp;, const Alias*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4611787"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484" specialization="true">
            <name>RandomAccessIter&lt;T, R, P></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="4606661"/>
                <argumentType ref="4606662"/>
                <argumentType ref="4606663"/>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484" specialization="true">
            <name>RandomAccessIter&lt;T, R, P></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="4606667"/>
                <argumentType ref="4606668"/>
                <argumentType ref="4606669"/>
            </content>
        </type>
        <type derived="true" id="type.1988">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1989">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1990">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1991">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1992">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1993">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1994">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7" specialization="true">
            <name>RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="4606607"/>
                <argumentType ref="type.4608387"/>
                <argumentType ref="type.4608388"/>
            </content>
        </type>
        <type derived="true" id="type.4618430">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617437">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618430">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618457">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617748">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618403">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617775">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2289">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2257">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1950">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2293">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1986">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2291">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2267">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1956">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1954">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2269">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2068">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617747">
            <name>RandomAccessIter&lt;T, T&amp;, T*>*</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618429">
            <name>RandomAccessIter&lt;T, T&amp;, T*>*</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618456">
            <name>RandomAccessIter&lt;T, T&amp;, T*>*</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617774">
            <name>RandomAccessIter&lt;T, T&amp;, T*>*</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618402">
            <name>RandomAccessIter&lt;T, T&amp;, T*>*</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617436">
            <name>RandomAccessIter&lt;T, T&amp;, T*>*</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618456">
            <name>RandomAccessIter&lt;T, T&amp;, T*>*</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892" specialization="true">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="4606608"/>
                <argumentType ref="type.4608404"/>
                <argumentType ref="type.4608405"/>
            </content>
        </type>
        <type derived="true" id="type.4617766">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618448">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617428">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618394">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617739">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618421">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1953">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1955">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2268">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2067">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2292">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2290">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2266">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1985">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1949">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2256">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2288">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618420">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>*</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618447">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>*</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617427">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>*</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617765">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>*</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617738">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>*</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618393">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>*</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.4617401" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Json.JsonValue>, UniquePtr&lt;System.Json.JsonValue>&amp;, UniquePtr&lt;System.Json.JsonValue>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4617315"/>
                <argumentType ref="type.4617317"/>
                <argumentType ref="type.4617316"/>
            </content>
        </type>
        <type derived="true" id="type.4617403">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Json.JsonValue>, UniquePtr&lt;System.Json.JsonValue>&amp;, UniquePtr&lt;System.Json.JsonValue>*>&amp;</name>
            <content>
                <baseType ref="type.4617401"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617407">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Json.JsonValue>, UniquePtr&lt;System.Json.JsonValue>&amp;, UniquePtr&lt;System.Json.JsonValue>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4617401"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617402">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Json.JsonValue>, UniquePtr&lt;System.Json.JsonValue>&amp;, UniquePtr&lt;System.Json.JsonValue>*>*</name>
            <content>
                <baseType ref="type.4617401"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.4617394" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Json.JsonValue>, const UniquePtr&lt;System.Json.JsonValue>&amp;, const UniquePtr&lt;System.Json.JsonValue>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4617315"/>
                <argumentType ref="type.4617320"/>
                <argumentType ref="type.4617319"/>
            </content>
        </type>
        <type derived="true" id="type.4617396">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Json.JsonValue>, const UniquePtr&lt;System.Json.JsonValue>&amp;, const UniquePtr&lt;System.Json.JsonValue>*>&amp;</name>
            <content>
                <baseType ref="type.4617394"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2255">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Json.JsonValue>, const UniquePtr&lt;System.Json.JsonValue>&amp;, const UniquePtr&lt;System.Json.JsonValue>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4617394"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617395">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Json.JsonValue>, const UniquePtr&lt;System.Json.JsonValue>&amp;, const UniquePtr&lt;System.Json.JsonValue>*>*</name>
            <content>
                <baseType ref="type.4617394"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.4613811" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4613795"/>
                <argumentType ref="type.4613800"/>
                <argumentType ref="type.4613799"/>
            </content>
        </type>
        <type derived="true" id="type.2177">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4613811"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4613871" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4613855"/>
                <argumentType ref="type.4613860"/>
                <argumentType ref="type.4613859"/>
            </content>
        </type>
        <type derived="true" id="type.2178">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4613871"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4613710" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4613670"/>
                <argumentType ref="type.4613675"/>
                <argumentType ref="type.4613674"/>
            </content>
        </type>
        <type derived="true" id="type.2175">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4613710"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4613762" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4613749"/>
                <argumentType ref="type.4613754"/>
                <argumentType ref="type.4613753"/>
            </content>
        </type>
        <type derived="true" id="type.2176">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4613762"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4615481" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Context>, const UniquePtr&lt;System.Text.Parsing.Context>&amp;, const UniquePtr&lt;System.Text.Parsing.Context>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4615459"/>
                <argumentType ref="type.4615464"/>
                <argumentType ref="type.4615463"/>
            </content>
        </type>
        <type derived="true" id="type.2214">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Context>, const UniquePtr&lt;System.Text.Parsing.Context>&amp;, const UniquePtr&lt;System.Text.Parsing.Context>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4615481"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4615054" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Object>, const UniquePtr&lt;System.Text.Parsing.Object>&amp;, const UniquePtr&lt;System.Text.Parsing.Object>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4615032"/>
                <argumentType ref="type.4615037"/>
                <argumentType ref="type.4615036"/>
            </content>
        </type>
        <type derived="true" id="type.2187">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.Object>, const UniquePtr&lt;System.Text.Parsing.Object>&amp;, const UniquePtr&lt;System.Text.Parsing.Object>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4615054"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4615739" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>, UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;, UniquePtr&lt;System.Text.Parsing.ParsingDomain>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4615719"/>
                <argumentType ref="type.4615721"/>
                <argumentType ref="type.4615720"/>
            </content>
        </type>
        <type derived="true" id="type.2223">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>, UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;, UniquePtr&lt;System.Text.Parsing.ParsingDomain>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4615739"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4615732" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>, const UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;, const UniquePtr&lt;System.Text.Parsing.ParsingDomain>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4615719"/>
                <argumentType ref="type.4615724"/>
                <argumentType ref="type.4615723"/>
            </content>
        </type>
        <type derived="true" id="type.2222">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingDomain>, const UniquePtr&lt;System.Text.Parsing.ParsingDomain>&amp;, const UniquePtr&lt;System.Text.Parsing.ParsingDomain>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4615732"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4615024" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>, UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;, UniquePtr&lt;System.Text.Parsing.ParsingObject>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4615004"/>
                <argumentType ref="type.4615006"/>
                <argumentType ref="type.4615005"/>
            </content>
        </type>
        <type derived="true" id="type.2186">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>, UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;, UniquePtr&lt;System.Text.Parsing.ParsingObject>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4615024"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4615017" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>, const UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;, const UniquePtr&lt;System.Text.Parsing.ParsingObject>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4615004"/>
                <argumentType ref="type.4615009"/>
                <argumentType ref="type.4615008"/>
            </content>
        </type>
        <type derived="true" id="type.2185">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.ParsingObject>, const UniquePtr&lt;System.Text.Parsing.ParsingObject>&amp;, const UniquePtr&lt;System.Text.Parsing.ParsingObject>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4615017"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4611823" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, UniquePtr&lt;System.Unicode.CharacterInfo>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4611803"/>
                <argumentType ref="type.4611805"/>
                <argumentType ref="type.4611804"/>
            </content>
        </type>
        <type derived="true" id="type.2148">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, UniquePtr&lt;System.Unicode.CharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4611823"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4611816" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, const UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfo>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4611803"/>
                <argumentType ref="type.4611808"/>
                <argumentType ref="type.4611807"/>
            </content>
        </type>
        <type derived="true" id="type.2147">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, const UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4611816"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4611919" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.CharacterInfoPage>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4611899"/>
                <argumentType ref="type.4611901"/>
                <argumentType ref="type.4611900"/>
            </content>
        </type>
        <type derived="true" id="type.2164">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.CharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4611919"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4611912" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, const UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfoPage>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4611899"/>
                <argumentType ref="type.4611904"/>
                <argumentType ref="type.4611903"/>
            </content>
        </type>
        <type derived="true" id="type.2163">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, const UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4611912"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4611851" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4611831"/>
                <argumentType ref="type.4611833"/>
                <argumentType ref="type.4611832"/>
            </content>
        </type>
        <type derived="true" id="type.2150">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4611851"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4611844" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4611831"/>
                <argumentType ref="type.4611836"/>
                <argumentType ref="type.4611835"/>
            </content>
        </type>
        <type derived="true" id="type.2149">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4611844"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4611954" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4611934"/>
                <argumentType ref="type.4611936"/>
                <argumentType ref="type.4611935"/>
            </content>
        </type>
        <type derived="true" id="type.2166">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4611954"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4611947" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4611934"/>
                <argumentType ref="type.4611939"/>
                <argumentType ref="type.4611938"/>
            </content>
        </type>
        <type derived="true" id="type.2165">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4611947"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4616882" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4605932"/>
                <argumentType ref="type.4605953"/>
                <argumentType ref="type.4605952"/>
            </content>
        </type>
        <type id="type.4613429" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4605932"/>
                <argumentType ref="type.4605953"/>
                <argumentType ref="type.4605952"/>
            </content>
        </type>
        <type id="type.1964" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4605932"/>
                <argumentType ref="type.4605953"/>
                <argumentType ref="type.4605952"/>
            </content>
        </type>
        <type id="type.4614656" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4605932"/>
                <argumentType ref="type.4605953"/>
                <argumentType ref="type.4605952"/>
            </content>
        </type>
        <type id="type.4608541" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4605932"/>
                <argumentType ref="type.4605953"/>
                <argumentType ref="type.4605952"/>
            </content>
        </type>
        <type derived="true" id="type.1966">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <baseType ref="type.1964"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616884">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <baseType ref="type.4616882"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1970">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1964"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2183">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4614656"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2253">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4616882"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2173">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4613429"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1971">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4608541"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1965">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <baseType ref="type.1964"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616883">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <baseType ref="type.4616882"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.4613300" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4605941"/>
                <argumentType ref="type.4605980"/>
                <argumentType ref="type.4605979"/>
            </content>
        </type>
        <type id="type.4616753" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4605941"/>
                <argumentType ref="type.4605980"/>
                <argumentType ref="type.4605979"/>
            </content>
        </type>
        <type id="type.1835" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4605941"/>
                <argumentType ref="type.4605980"/>
                <argumentType ref="type.4605979"/>
            </content>
        </type>
        <type id="type.4616753" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4605941"/>
                <argumentType ref="type.4605980"/>
                <argumentType ref="type.4605979"/>
            </content>
        </type>
        <type id="type.4614527" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4605941"/>
                <argumentType ref="type.4605980"/>
                <argumentType ref="type.4605979"/>
            </content>
        </type>
        <type derived="true" id="type.1837">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <baseType ref="type.1835"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616755">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <baseType ref="type.4616753"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2169">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4613300"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2251">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4616753"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1841">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1835"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2179">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4614527"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1836">
            <name>RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <baseType ref="type.1835"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616754">
            <name>RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <baseType ref="type.4616753"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.4613319" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4605943"/>
                <argumentType ref="type.4605986"/>
                <argumentType ref="type.4605985"/>
            </content>
        </type>
        <type id="type.1854" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4605943"/>
                <argumentType ref="type.4605986"/>
                <argumentType ref="type.4605985"/>
            </content>
        </type>
        <type id="type.4616772" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4605943"/>
                <argumentType ref="type.4605986"/>
                <argumentType ref="type.4605985"/>
            </content>
        </type>
        <type id="type.4607158" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4605943"/>
                <argumentType ref="type.4605986"/>
                <argumentType ref="type.4605985"/>
            </content>
        </type>
        <type id="type.4614546" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4605943"/>
                <argumentType ref="type.4605986"/>
                <argumentType ref="type.4605985"/>
            </content>
        </type>
        <type id="type.4616772" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4605943"/>
                <argumentType ref="type.4605986"/>
                <argumentType ref="type.4605985"/>
            </content>
        </type>
        <type derived="true" id="type.4616774">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <baseType ref="type.4616772"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1856">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <baseType ref="type.1854"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616778">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4616772"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2171">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4613319"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1863">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4607158"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1860">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1854"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616778">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4616772"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2181">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4614546"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616773">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <baseType ref="type.4616772"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1855">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <baseType ref="type.1854"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616773">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <baseType ref="type.4616772"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.4611868" specialization="true">
            <name>RandomAccessIter&lt;uint, const uint&amp;, const uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4605936"/>
                <argumentType ref="type.4611865"/>
                <argumentType ref="type.4611866"/>
            </content>
        </type>
        <type derived="true" id="type.2151">
            <name>RandomAccessIter&lt;uint, const uint&amp;, const uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4611868"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4614845" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4605936"/>
                <argumentType ref="type.4605965"/>
                <argumentType ref="type.4605964"/>
            </content>
        </type>
        <type id="type.2152" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4605936"/>
                <argumentType ref="type.4605965"/>
                <argumentType ref="type.4605964"/>
            </content>
        </type>
        <type id="type.4617071" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4605936"/>
                <argumentType ref="type.4605965"/>
                <argumentType ref="type.4605964"/>
            </content>
        </type>
        <type id="type.4613618" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4605936"/>
                <argumentType ref="type.4605965"/>
                <argumentType ref="type.4605964"/>
            </content>
        </type>
        <type id="type.4617071" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4605936"/>
                <argumentType ref="type.4605965"/>
                <argumentType ref="type.4605964"/>
            </content>
        </type>
        <type id="type.4611875" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4605936"/>
                <argumentType ref="type.4605965"/>
                <argumentType ref="type.4605964"/>
            </content>
        </type>
        <type derived="true" id="type.4617073">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <baseType ref="type.4617071"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2154">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <baseType ref="type.2152"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617073">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <baseType ref="type.4617071"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2254">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4617071"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2184">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4614845"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2159">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4611875"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2158">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2152"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2174">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4613618"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2153">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <baseType ref="type.2152"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617072">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <baseType ref="type.4617071"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.4607201" specialization="true">
            <name>RandomAccessIter&lt;ulong, const ulong&amp;, const ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4605938"/>
                <argumentType ref="type.4607198"/>
                <argumentType ref="type.4607199"/>
            </content>
        </type>
        <type derived="true" id="type.1864">
            <name>RandomAccessIter&lt;ulong, const ulong&amp;, const ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4607201"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1865" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4605938"/>
                <argumentType ref="type.4605971"/>
                <argumentType ref="type.4605970"/>
            </content>
        </type>
        <type id="type.4614557" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4605938"/>
                <argumentType ref="type.4605971"/>
                <argumentType ref="type.4605970"/>
            </content>
        </type>
        <type id="type.4607208" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4605938"/>
                <argumentType ref="type.4605971"/>
                <argumentType ref="type.4605970"/>
            </content>
        </type>
        <type id="type.4614557" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4605938"/>
                <argumentType ref="type.4605971"/>
                <argumentType ref="type.4605970"/>
            </content>
        </type>
        <type id="type.4616783" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4605938"/>
                <argumentType ref="type.4605971"/>
                <argumentType ref="type.4605970"/>
            </content>
        </type>
        <type id="type.4613330" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4605938"/>
                <argumentType ref="type.4605971"/>
                <argumentType ref="type.4605970"/>
            </content>
        </type>
        <type derived="true" id="type.4616785">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <baseType ref="type.4616783"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1867">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <baseType ref="type.1865"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1871">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1865"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1872">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4607208"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2172">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4613330"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2252">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4616783"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2182">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4614557"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616784">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <baseType ref="type.4616783"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1866">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <baseType ref="type.1865"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616784">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <baseType ref="type.4616783"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.4607113" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4605942"/>
                <argumentType ref="type.4605983"/>
                <argumentType ref="type.4605982"/>
            </content>
        </type>
        <type id="type.4616762" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4605942"/>
                <argumentType ref="type.4605983"/>
                <argumentType ref="type.4605982"/>
            </content>
        </type>
        <type id="type.4614536" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4605942"/>
                <argumentType ref="type.4605983"/>
                <argumentType ref="type.4605982"/>
            </content>
        </type>
        <type id="type.1844" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4605942"/>
                <argumentType ref="type.4605983"/>
                <argumentType ref="type.4605982"/>
            </content>
        </type>
        <type id="type.4613309" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4605942"/>
                <argumentType ref="type.4605983"/>
                <argumentType ref="type.4605982"/>
            </content>
        </type>
        <type id="type.4616762" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.4605942"/>
                <argumentType ref="type.4605983"/>
                <argumentType ref="type.4605982"/>
            </content>
        </type>
        <type derived="true" id="type.4616764">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <baseType ref="type.4616762"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1846">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <baseType ref="type.1844"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616764">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <baseType ref="type.4616762"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616768">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4616762"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2170">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4613309"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2180">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4614536"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1850">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1844"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1853">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4607113"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616763">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <baseType ref="type.4616762"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1845">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <baseType ref="type.1844"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616763">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <baseType ref="type.4616762"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047" specialization="true">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare></name>
            <content>
                <primaryType ref="class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <argumentType ref="4616628"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <argumentType ref="4616630"/>
            </content>
        </type>
        <type derived="true" id="type.4618609">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618110">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618487">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618548">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617528">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617988">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618609">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617866">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617467">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617927">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618049">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617805">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1961">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618513">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617493">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617831">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618014">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617554">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618635">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617892">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618075">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618574">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617953">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618136">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617926">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>*</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618109">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>*</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618608">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>*</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618486">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>*</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618608">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>*</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618547">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>*</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617987">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>*</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617527">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>*</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617466">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>*</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617865">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>*</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617804">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>*</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618048">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>*</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2" specialization="true">
            <name>RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare></name>
            <content>
                <primaryType ref="class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <argumentType ref="4606693"/>
                <argumentType ref="4606694"/>
                <argumentType ref="4606695"/>
                <argumentType ref="4606696"/>
            </content>
        </type>
        <type derived="true" id="type.2003">
            <name>RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4617348" specialization="true">
            <name>RedBlackTree&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, JsonValue*>, SelectFirst&lt;String&lt;uchar>, JsonValue*>, Less&lt;String&lt;uchar>>></name>
            <content>
                <primaryType ref="class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <argumentType ref="type.4607142"/>
                <argumentType ref="type.4617334"/>
                <argumentType ref="type.4617338"/>
                <argumentType ref="type.4617322"/>
            </content>
        </type>
        <type derived="true" id="type.4617350">
            <name>RedBlackTree&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, JsonValue*>, SelectFirst&lt;String&lt;uchar>, JsonValue*>, Less&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <baseType ref="type.4617348"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617376">
            <name>RedBlackTree&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, JsonValue*>, SelectFirst&lt;String&lt;uchar>, JsonValue*>, Less&lt;String&lt;uchar>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.4617348"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617349">
            <name>RedBlackTree&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, JsonValue*>, SelectFirst&lt;String&lt;uchar>, JsonValue*>, Less&lt;String&lt;uchar>>>*</name>
            <content>
                <baseType ref="type.4617348"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTree_T_T_Identity_T_C_BC4C30A5A170B2B4B4BF9109198D17D5A1BD03D3" specialization="true">
            <name>RedBlackTree&lt;T, T, Identity&lt;T>, C></name>
            <content>
                <primaryType ref="class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <argumentType ref="4606699"/>
                <argumentType ref="4606699"/>
                <argumentType ref="type.class_Identity_T_9DD2E12D3D49B8316EA22259EDBD89C3FE6A1C09"/>
                <argumentType ref="4606700"/>
            </content>
        </type>
        <type derived="true" id="type.2008">
            <name>RedBlackTree&lt;T, T, Identity&lt;T>, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_T_T_Identity_T_C_BC4C30A5A170B2B4B4BF9109198D17D5A1BD03D3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4618122" specialization="true">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>></name>
            <content>
                <primaryType ref="class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
            </content>
        </type>
        <type id="type.4617540" specialization="true">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>></name>
            <content>
                <primaryType ref="class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
            </content>
        </type>
        <type id="type.4617939" specialization="true">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>></name>
            <content>
                <primaryType ref="class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
            </content>
        </type>
        <type id="type.4617817" specialization="true">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>></name>
            <content>
                <primaryType ref="class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
            </content>
        </type>
        <type id="type.4618560" specialization="true">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>></name>
            <content>
                <primaryType ref="class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
            </content>
        </type>
        <type id="type.4617878" specialization="true">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>></name>
            <content>
                <primaryType ref="class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
            </content>
        </type>
        <type id="type.4618499" specialization="true">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>></name>
            <content>
                <primaryType ref="class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
            </content>
        </type>
        <type id="type.4618061" specialization="true">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>></name>
            <content>
                <primaryType ref="class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
            </content>
        </type>
        <type id="type.4618560" specialization="true">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>></name>
            <content>
                <primaryType ref="class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
            </content>
        </type>
        <type id="type.4618000" specialization="true">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>></name>
            <content>
                <primaryType ref="class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
            </content>
        </type>
        <type id="type.4617479" specialization="true">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>></name>
            <content>
                <primaryType ref="class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
            </content>
        </type>
        <type id="type.4618621" specialization="true">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>></name>
            <content>
                <primaryType ref="class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
            </content>
        </type>
        <type derived="true" id="type.4618562">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>>&amp;</name>
            <content>
                <baseType ref="type.4618560"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617819">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>>&amp;</name>
            <content>
                <baseType ref="type.4617817"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618063">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>>&amp;</name>
            <content>
                <baseType ref="type.4618061"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618124">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>>&amp;</name>
            <content>
                <baseType ref="type.4618122"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618501">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>>&amp;</name>
            <content>
                <baseType ref="type.4618499"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618623">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>>&amp;</name>
            <content>
                <baseType ref="type.4618621"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617880">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>>&amp;</name>
            <content>
                <baseType ref="type.4617878"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618501">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>>&amp;</name>
            <content>
                <baseType ref="type.4618499"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617941">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>>&amp;</name>
            <content>
                <baseType ref="type.4617939"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618002">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>>&amp;</name>
            <content>
                <baseType ref="type.4618000"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617542">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>>&amp;</name>
            <content>
                <baseType ref="type.4617540"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617481">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>>&amp;</name>
            <content>
                <baseType ref="type.4617479"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617879">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>>*</name>
            <content>
                <baseType ref="type.4617878"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617940">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>>*</name>
            <content>
                <baseType ref="type.4617939"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617818">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>>*</name>
            <content>
                <baseType ref="type.4617817"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618062">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>>*</name>
            <content>
                <baseType ref="type.4618061"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618622">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>>*</name>
            <content>
                <baseType ref="type.4618621"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618561">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>>*</name>
            <content>
                <baseType ref="type.4618560"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618123">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>>*</name>
            <content>
                <baseType ref="type.4618122"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618622">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>>*</name>
            <content>
                <baseType ref="type.4618621"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617541">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>>*</name>
            <content>
                <baseType ref="type.4617540"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617480">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>>*</name>
            <content>
                <baseType ref="type.4617479"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618001">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>>*</name>
            <content>
                <baseType ref="type.4618000"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618500">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>>*</name>
            <content>
                <baseType ref="type.4618499"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.4617362" specialization="true">
            <name>RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, JsonValue*>></name>
            <content>
                <primaryType ref="class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
                <argumentType ref="type.4617334"/>
            </content>
        </type>
        <type derived="true" id="type.4617364">
            <name>RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, JsonValue*>>&amp;</name>
            <content>
                <baseType ref="type.4617362"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617363">
            <name>RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, JsonValue*>>*</name>
            <content>
                <baseType ref="type.4617362"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618915">
            <name>RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, JsonValue*>>*&amp;</name>
            <content>
                <baseType ref="type.4617362"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618916">
            <name>RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, JsonValue*>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.4617362"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618914">
            <name>RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, JsonValue*>>**</name>
            <content>
                <baseType ref="type.4617362"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616531">
            <name>RedBlackTreeNodeBase&amp;</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1824">
            <name>RedBlackTreeNodeBase&amp;</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2331">
            <name>RedBlackTreeNodeBase&amp;&amp;</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616530">
            <name>RedBlackTreeNodeBase*</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1823">
            <name>RedBlackTreeNodeBase*</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616530">
            <name>RedBlackTreeNodeBase*</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.4617547" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.4617513"/>
                <argumentType ref="type.4617512"/>
            </content>
        </type>
        <type id="type.4618068" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.4618034"/>
                <argumentType ref="type.4618033"/>
            </content>
        </type>
        <type id="type.4617824" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.4617790"/>
                <argumentType ref="type.4617789"/>
            </content>
        </type>
        <type id="type.4617486" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.4617452"/>
                <argumentType ref="type.4617451"/>
            </content>
        </type>
        <type id="type.4618007" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.4617973"/>
                <argumentType ref="type.4617972"/>
            </content>
        </type>
        <type id="type.4618628" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.4618594"/>
                <argumentType ref="type.4618593"/>
            </content>
        </type>
        <type id="type.4618567" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.4618533"/>
                <argumentType ref="type.4618532"/>
            </content>
        </type>
        <type id="type.4617946" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.4617912"/>
                <argumentType ref="type.4617911"/>
            </content>
        </type>
        <type id="type.4618506" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.4618472"/>
                <argumentType ref="type.4618471"/>
            </content>
        </type>
        <type id="type.4608505" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.4608466"/>
                <argumentType ref="type.4608465"/>
            </content>
        </type>
        <type id="type.4618129" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.4618095"/>
                <argumentType ref="type.4618094"/>
            </content>
        </type>
        <type id="type.4618628" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.4618594"/>
                <argumentType ref="type.4618593"/>
            </content>
        </type>
        <type id="type.4617885" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.4617851"/>
                <argumentType ref="type.4617850"/>
            </content>
        </type>
        <type derived="true" id="type.4617549">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <baseType ref="type.4617547"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617488">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <baseType ref="type.4617486"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618131">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <baseType ref="type.4618129"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618630">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <baseType ref="type.4618628"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618070">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <baseType ref="type.4618068"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618569">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <baseType ref="type.4618567"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618508">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <baseType ref="type.4618506"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617826">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <baseType ref="type.4617824"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618569">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <baseType ref="type.4618567"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617948">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <baseType ref="type.4617946"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618009">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <baseType ref="type.4618007"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617887">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <baseType ref="type.4617885"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2279">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4618068"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2275">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4617946"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2273">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4617885"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2271">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4617824"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2261">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4617547"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2297">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4618567"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2295">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4618506"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2281">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4618129"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2277">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4618007"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2299">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4618628"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2259">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4617486"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1960">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4608505"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618130">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>*</name>
            <content>
                <baseType ref="type.4618129"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618008">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>*</name>
            <content>
                <baseType ref="type.4618007"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617947">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>*</name>
            <content>
                <baseType ref="type.4617946"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618568">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>*</name>
            <content>
                <baseType ref="type.4618567"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617548">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>*</name>
            <content>
                <baseType ref="type.4617547"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617487">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>*</name>
            <content>
                <baseType ref="type.4617486"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618507">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>*</name>
            <content>
                <baseType ref="type.4618506"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618629">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>*</name>
            <content>
                <baseType ref="type.4618628"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617825">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>*</name>
            <content>
                <baseType ref="type.4617824"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618069">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>*</name>
            <content>
                <baseType ref="type.4618068"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617886">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>*</name>
            <content>
                <baseType ref="type.4617885"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618629">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>*</name>
            <content>
                <baseType ref="type.4618628"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.4617933" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.4617922"/>
                <argumentType ref="type.4617931"/>
            </content>
        </type>
        <type id="type.4618055" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.4618044"/>
                <argumentType ref="type.4618053"/>
            </content>
        </type>
        <type id="type.4617872" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.4617861"/>
                <argumentType ref="type.4617870"/>
            </content>
        </type>
        <type id="type.4618116" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.4618105"/>
                <argumentType ref="type.4618114"/>
            </content>
        </type>
        <type id="type.4618554" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.4618543"/>
                <argumentType ref="type.4618552"/>
            </content>
        </type>
        <type id="type.4618116" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.4618105"/>
                <argumentType ref="type.4618114"/>
            </content>
        </type>
        <type id="type.4618493" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.4618482"/>
                <argumentType ref="type.4618491"/>
            </content>
        </type>
        <type id="type.4617811" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.4617800"/>
                <argumentType ref="type.4617809"/>
            </content>
        </type>
        <type id="type.4618615" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.4618604"/>
                <argumentType ref="type.4618613"/>
            </content>
        </type>
        <type id="type.4617994" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.4617983"/>
                <argumentType ref="type.4617992"/>
            </content>
        </type>
        <type id="type.4617534" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.4617523"/>
                <argumentType ref="type.4617532"/>
            </content>
        </type>
        <type id="type.4608487" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.4608476"/>
                <argumentType ref="type.4608485"/>
            </content>
        </type>
        <type id="type.4617473" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.4617462"/>
                <argumentType ref="type.4617471"/>
            </content>
        </type>
        <type derived="true" id="type.4618556">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <baseType ref="type.4618554"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617813">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <baseType ref="type.4617811"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617996">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <baseType ref="type.4617994"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618495">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <baseType ref="type.4618493"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617536">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <baseType ref="type.4617534"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618617">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <baseType ref="type.4618615"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617935">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <baseType ref="type.4617933"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617874">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <baseType ref="type.4617872"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617475">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <baseType ref="type.4617473"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618057">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <baseType ref="type.4618055"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618118">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <baseType ref="type.4618116"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618617">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <baseType ref="type.4618615"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2270">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4617811"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2260">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4617534"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2258">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4617473"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2274">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4617933"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1959">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4608487"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2280">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4618116"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2296">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4618554"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2278">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4618055"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2298">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4618615"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2294">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4618493"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2272">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4617872"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2276">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4617994"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617995">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>*</name>
            <content>
                <baseType ref="type.4617994"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618117">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>*</name>
            <content>
                <baseType ref="type.4618116"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618555">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>*</name>
            <content>
                <baseType ref="type.4618554"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617873">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>*</name>
            <content>
                <baseType ref="type.4617872"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617934">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>*</name>
            <content>
                <baseType ref="type.4617933"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617474">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>*</name>
            <content>
                <baseType ref="type.4617473"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618494">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>*</name>
            <content>
                <baseType ref="type.4618493"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618555">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>*</name>
            <content>
                <baseType ref="type.4618554"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618056">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>*</name>
            <content>
                <baseType ref="type.4618055"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617812">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>*</name>
            <content>
                <baseType ref="type.4617811"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617535">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>*</name>
            <content>
                <baseType ref="type.4617534"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618616">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>*</name>
            <content>
                <baseType ref="type.4618615"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.4617369" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, JsonValue*>, Pair&lt;String&lt;uchar>, JsonValue*>&amp;, Pair&lt;String&lt;uchar>, JsonValue*>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.4617334"/>
                <argumentType ref="type.4617336"/>
                <argumentType ref="type.4617335"/>
            </content>
        </type>
        <type derived="true" id="type.4617371">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, JsonValue*>, Pair&lt;String&lt;uchar>, JsonValue*>&amp;, Pair&lt;String&lt;uchar>, JsonValue*>*>&amp;</name>
            <content>
                <baseType ref="type.4617369"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617375">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, JsonValue*>, Pair&lt;String&lt;uchar>, JsonValue*>&amp;, Pair&lt;String&lt;uchar>, JsonValue*>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4617369"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617370">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, JsonValue*>, Pair&lt;String&lt;uchar>, JsonValue*>&amp;, Pair&lt;String&lt;uchar>, JsonValue*>*>*</name>
            <content>
                <baseType ref="type.4617369"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.4617356" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, JsonValue*>, const Pair&lt;String&lt;uchar>, JsonValue*>&amp;, const Pair&lt;String&lt;uchar>, JsonValue*>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.4617334"/>
                <argumentType ref="type.4617345"/>
                <argumentType ref="type.4617354"/>
            </content>
        </type>
        <type derived="true" id="type.4617358">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, JsonValue*>, const Pair&lt;String&lt;uchar>, JsonValue*>&amp;, const Pair&lt;String&lt;uchar>, JsonValue*>*>&amp;</name>
            <content>
                <baseType ref="type.4617356"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617368">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, JsonValue*>, const Pair&lt;String&lt;uchar>, JsonValue*>&amp;, const Pair&lt;String&lt;uchar>, JsonValue*>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4617356"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617357">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, JsonValue*>, const Pair&lt;String&lt;uchar>, JsonValue*>&amp;, const Pair&lt;String&lt;uchar>, JsonValue*>*>*</name>
            <content>
                <baseType ref="type.4617356"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, R, P></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="4606686"/>
                <argumentType ref="4606687"/>
                <argumentType ref="4606688"/>
            </content>
        </type>
        <type derived="true" id="type.1999">
            <name>RedBlackTreeNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2000">
            <name>RedBlackTreeNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="4606703"/>
                <argumentType ref="type.4608931"/>
                <argumentType ref="type.4608933"/>
            </content>
        </type>
        <type derived="true" id="type.2007">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2013">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2011">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="4606701"/>
                <argumentType ref="type.4608851"/>
                <argumentType ref="type.4608860"/>
            </content>
        </type>
        <type derived="true" id="type.2010">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2012">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2006">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_R_ValueType_P_A72EE6DFD58F3068E8C768CB16BF71716048A80D" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="4606694"/>
                <argumentType ref="type.4608758"/>
                <argumentType ref="type.4608760"/>
            </content>
        </type>
        <type derived="true" id="type.2002">
            <name>RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_R_ValueType_P_A72EE6DFD58F3068E8C768CB16BF71716048A80D"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_C_R_ValueType_C_P_62C8FF5559EB06AAFEDF99196CE7BD850F471D11" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="4606694"/>
                <argumentType ref="type.4608743"/>
                <argumentType ref="type.4608744"/>
            </content>
        </type>
        <type derived="true" id="type.2001">
            <name>RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_C_R_ValueType_C_P_62C8FF5559EB06AAFEDF99196CE7BD850F471D11"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2399">
            <name>ReturnStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_ReturnStatement_FEC70A987D7361EC167E7C772D29550ABF5D7750"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2429">
            <name>RvalueRef&amp;&amp;</name>
            <content>
                <baseType ref="class_RvalueRef_5B7EBD5222D9942C4FCD5811F21EE1285E406229"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21" specialization="true">
            <name>SelectFirst&lt;K, T></name>
            <content>
                <primaryType ref="class_SelectFirst_T_U_5C7DFA11E2AE3BB651846960A70B00A231DD5282"/>
                <argumentType ref="4616711"/>
                <argumentType ref="4616712"/>
            </content>
        </type>
        <type derived="true" id="type.4617664">
            <name>SelectFirst&lt;K, T>&amp;</name>
            <content>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618324">
            <name>SelectFirst&lt;K, T>&amp;</name>
            <content>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618745">
            <name>SelectFirst&lt;K, T>&amp;</name>
            <content>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617586">
            <name>SelectFirst&lt;K, T>&amp;</name>
            <content>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618823">
            <name>SelectFirst&lt;K, T>&amp;</name>
            <content>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618246">
            <name>SelectFirst&lt;K, T>&amp;</name>
            <content>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618168">
            <name>SelectFirst&lt;K, T>&amp;</name>
            <content>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618823">
            <name>SelectFirst&lt;K, T>&amp;</name>
            <content>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618667">
            <name>SelectFirst&lt;K, T>&amp;</name>
            <content>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617585">
            <name>SelectFirst&lt;K, T>*</name>
            <content>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618822">
            <name>SelectFirst&lt;K, T>*</name>
            <content>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618744">
            <name>SelectFirst&lt;K, T>*</name>
            <content>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618666">
            <name>SelectFirst&lt;K, T>*</name>
            <content>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618245">
            <name>SelectFirst&lt;K, T>*</name>
            <content>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618323">
            <name>SelectFirst&lt;K, T>*</name>
            <content>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618822">
            <name>SelectFirst&lt;K, T>*</name>
            <content>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618167">
            <name>SelectFirst&lt;K, T>*</name>
            <content>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617663">
            <name>SelectFirst&lt;K, T>*</name>
            <content>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7" specialization="true">
            <name>SelectFirst&lt;Key, Value></name>
            <content>
                <primaryType ref="class_SelectFirst_T_U_5C7DFA11E2AE3BB651846960A70B00A231DD5282"/>
                <argumentType ref="4616705"/>
                <argumentType ref="4616706"/>
            </content>
        </type>
        <type derived="true" id="type.4617985">
            <name>SelectFirst&lt;Key, Value>&amp;</name>
            <content>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618606">
            <name>SelectFirst&lt;Key, Value>&amp;</name>
            <content>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618046">
            <name>SelectFirst&lt;Key, Value>&amp;</name>
            <content>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617924">
            <name>SelectFirst&lt;Key, Value>&amp;</name>
            <content>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618545">
            <name>SelectFirst&lt;Key, Value>&amp;</name>
            <content>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618606">
            <name>SelectFirst&lt;Key, Value>&amp;</name>
            <content>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617863">
            <name>SelectFirst&lt;Key, Value>&amp;</name>
            <content>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618107">
            <name>SelectFirst&lt;Key, Value>&amp;</name>
            <content>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617802">
            <name>SelectFirst&lt;Key, Value>&amp;</name>
            <content>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617464">
            <name>SelectFirst&lt;Key, Value>&amp;</name>
            <content>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617525">
            <name>SelectFirst&lt;Key, Value>&amp;</name>
            <content>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618484">
            <name>SelectFirst&lt;Key, Value>&amp;</name>
            <content>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617862">
            <name>SelectFirst&lt;Key, Value>*</name>
            <content>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617923">
            <name>SelectFirst&lt;Key, Value>*</name>
            <content>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618045">
            <name>SelectFirst&lt;Key, Value>*</name>
            <content>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617524">
            <name>SelectFirst&lt;Key, Value>*</name>
            <content>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617801">
            <name>SelectFirst&lt;Key, Value>*</name>
            <content>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618605">
            <name>SelectFirst&lt;Key, Value>*</name>
            <content>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618106">
            <name>SelectFirst&lt;Key, Value>*</name>
            <content>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617463">
            <name>SelectFirst&lt;Key, Value>*</name>
            <content>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617984">
            <name>SelectFirst&lt;Key, Value>*</name>
            <content>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618483">
            <name>SelectFirst&lt;Key, Value>*</name>
            <content>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618605">
            <name>SelectFirst&lt;Key, Value>*</name>
            <content>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618544">
            <name>SelectFirst&lt;Key, Value>*</name>
            <content>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.4617338" specialization="true">
            <name>SelectFirst&lt;String&lt;uchar>, JsonValue*></name>
            <content>
                <primaryType ref="class_SelectFirst_T_U_5C7DFA11E2AE3BB651846960A70B00A231DD5282"/>
                <argumentType ref="type.4607142"/>
                <argumentType ref="type.4616576"/>
            </content>
        </type>
        <type derived="true" id="type.4617347">
            <name>SelectFirst&lt;String&lt;uchar>, JsonValue*>&amp;</name>
            <content>
                <baseType ref="type.4617338"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618906">
            <name>SelectFirst&lt;String&lt;uchar>, JsonValue*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4617338"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617346">
            <name>SelectFirst&lt;String&lt;uchar>, JsonValue*>*</name>
            <content>
                <baseType ref="type.4617338"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618920">
            <name>SelectFirst&lt;String&lt;uchar>, JsonValue*>*&amp;</name>
            <content>
                <baseType ref="type.4617338"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618919">
            <name>SelectFirst&lt;String&lt;uchar>, JsonValue*>**</name>
            <content>
                <baseType ref="type.4617338"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076" specialization="true">
            <name>SharedCount&lt;T></name>
            <content>
                <primaryType ref="class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <argumentType ref="4606714"/>
            </content>
        </type>
        <type derived="true" id="type.2058">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2052">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2020">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2036">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2030">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F" specialization="true">
            <name>SharedPtr&lt;T></name>
            <content>
                <primaryType ref="class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <argumentType ref="4606724"/>
            </content>
        </type>
        <type derived="true" id="type.2053">
            <name>SharedPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2038">
            <name>SharedPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2060">
            <name>SharedPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2381">
            <name>SizeOf&amp;&amp;</name>
            <content>
                <baseType ref="class_SizeOf_7E82BCAA3BF507459413C346B576D53CFCE5288B"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2396">
            <name>Statement&amp;&amp;</name>
            <content>
                <baseType ref="class_Statement_4ACF6167B3C915EDAAFD3A91F4749E778C15A0C0"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2316">
            <name>StaticInitCriticalSection&amp;&amp;</name>
            <content>
                <baseType ref="class_StaticInitCriticalSection_39AB37625C7D8624475080E487A05114E48A9C6C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC" specialization="true">
            <name>String&lt;CharT></name>
            <content>
                <primaryType ref="class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="4606757"/>
            </content>
        </type>
        <type derived="true" id="type.2072">
            <name>String&lt;CharT>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4607054" specialization="true">
            <name>String&lt;char></name>
            <content>
                <primaryType ref="class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.4605941"/>
            </content>
        </type>
        <type derived="true" id="type.4607056">
            <name>String&lt;char>&amp;</name>
            <content>
                <baseType ref="type.4607054"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type id="type.4607142" specialization="true">
            <name>String&lt;uchar></name>
            <content>
                <primaryType ref="class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.4605943"/>
            </content>
        </type>
        <type derived="true" id="type.4607144">
            <name>String&lt;uchar>&amp;</name>
            <content>
                <baseType ref="type.4607142"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4607143">
            <name>String&lt;uchar>*</name>
            <content>
                <baseType ref="type.4607142"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.4607097" specialization="true">
            <name>String&lt;wchar></name>
            <content>
                <primaryType ref="class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.4605942"/>
            </content>
        </type>
        <type derived="true" id="type.4607099">
            <name>String&lt;wchar>&amp;</name>
            <content>
                <baseType ref="type.4607097"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type id="class_StringRule_6A3C489F690184D3F17D7916567A6918B614FF1C">
            <name>StringRule</name>
        </type>
        <type derived="true" id="type.4616668">
            <name>StringRule&amp;</name>
            <content>
                <baseType ref="class_StringRule_6A3C489F690184D3F17D7916567A6918B614FF1C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616667">
            <name>StringRule*</name>
            <content>
                <baseType ref="class_StringRule_6A3C489F690184D3F17D7916567A6918B614FF1C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4619046">
            <name>StringRule*&amp;</name>
            <content>
                <baseType ref="class_StringRule_6A3C489F690184D3F17D7916567A6918B614FF1C"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4619045">
            <name>StringRule**</name>
            <content>
                <baseType ref="class_StringRule_6A3C489F690184D3F17D7916567A6918B614FF1C"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2414">
            <name>SwitchStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_SwitchStatement_18D2C0BB3BA2134D050B02EA375A462847662B6E"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="4616750">
            <name>T</name>
        </type>
        <type derived="true" id="type.4618881">
            <name>T&amp;</name>
            <content>
                <baseType ref="4616748"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618883">
            <name>T&amp;</name>
            <content>
                <baseType ref="4616750"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1996">
            <name>T&amp;</name>
            <content>
                <baseType ref="4606684"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618426">
            <name>T&amp;</name>
            <content>
                <baseType ref="4616725"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1938">
            <name>T&amp;</name>
            <content>
                <baseType ref="4606577"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618225">
            <name>T&amp;</name>
            <content>
                <baseType ref="4616712"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618453">
            <name>T&amp;</name>
            <content>
                <baseType ref="4616726"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1936">
            <name>T&amp;</name>
            <content>
                <baseType ref="4606575"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618303">
            <name>T&amp;</name>
            <content>
                <baseType ref="4616716"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618802">
            <name>T&amp;</name>
            <content>
                <baseType ref="4616741"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618882">
            <name>T&amp;</name>
            <content>
                <baseType ref="4616749"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617744">
            <name>T&amp;</name>
            <content>
                <baseType ref="4616691"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618724">
            <name>T&amp;</name>
            <content>
                <baseType ref="4616737"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1874">
            <name>T&amp;</name>
            <content>
                <baseType ref="4606466"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618880">
            <name>T&amp;</name>
            <content>
                <baseType ref="4616745"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617771">
            <name>T&amp;</name>
            <content>
                <baseType ref="4616692"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617433">
            <name>T&amp;</name>
            <content>
                <baseType ref="4616624"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618382">
            <name>T&amp;</name>
            <content>
                <baseType ref="4616723"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618381">
            <name>T&amp;</name>
            <content>
                <baseType ref="4616720"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1998">
            <name>T&amp;</name>
            <content>
                <baseType ref="4606686"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617721">
            <name>T&amp;</name>
            <content>
                <baseType ref="4616636"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618399">
            <name>T&amp;</name>
            <content>
                <baseType ref="4616724"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1876">
            <name>T&amp;</name>
            <content>
                <baseType ref="4606468"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617643">
            <name>T&amp;</name>
            <content>
                <baseType ref="4616632"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1924">
            <name>T&amp;</name>
            <content>
                <baseType ref="4606558"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618883">
            <name>T&amp;</name>
            <content>
                <baseType ref="4616750"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1946">
            <name>T&amp;</name>
            <content>
                <baseType ref="4606594"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617781">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="4616692"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1952">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="4606607"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618463">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="4616726"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618409">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="4616724"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618463">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="4616726"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2066">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="4606737"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617754">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="4616691"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618436">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="4616725"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1984">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="4606653"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617443">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="4616624"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617745">
            <name>T*</name>
            <content>
                <baseType ref="4616691"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618454">
            <name>T*</name>
            <content>
                <baseType ref="4616726"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618400">
            <name>T*</name>
            <content>
                <baseType ref="4616724"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618427">
            <name>T*</name>
            <content>
                <baseType ref="4616725"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617434">
            <name>T*</name>
            <content>
                <baseType ref="4616624"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618400">
            <name>T*</name>
            <content>
                <baseType ref="4616724"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617772">
            <name>T*</name>
            <content>
                <baseType ref="4616692"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2392">
            <name>TemplateId&amp;&amp;</name>
            <content>
                <baseType ref="class_TemplateId_41C40DA2459C0E10492E8021082B1BF0421C15E5"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2420">
            <name>ThrowStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_ThrowStatement_6216EF486931E535CE6CDEE33F4D2E7A53BE76B7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2448">
            <name>TokenParser&amp;&amp;</name>
            <content>
                <baseType ref="class_TokenParser_319753BA62AEDA94D46A4D47AEE13AEC1B1F3B72"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2423">
            <name>TryStatement&amp;&amp;</name>
            <content>
                <baseType ref="class_TryStatement_1132D26D95ED5027A0CFA7B5E46039A7A645EE96"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2344">
            <name>Type&amp;&amp;</name>
            <content>
                <baseType ref="class_Type_8616C506F1B48B10568C6F4144C4A41FFB320CF3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2384">
            <name>TypeName&amp;&amp;</name>
            <content>
                <baseType ref="class_TypeName_BB4524B12FF73AADA611653B9DE399FFFCEC3BEB"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_UnaryFun_Pair_K_T_K_327B231FE743DBB2862CBDE0BAD45AC4472A2A9D" specialization="true">
            <name>UnaryFun&lt;Pair&lt;K, T>, K></name>
            <content>
                <primaryType ref="class_UnaryFun_Argument_Result_40A5782E1C44E354DC2704648D2CE25C6A226646"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <argumentType ref="4616711"/>
            </content>
        </type>
        <type derived="true" id="type.4617583">
            <name>UnaryFun&lt;Pair&lt;K, T>, K>&amp;</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_K_T_K_327B231FE743DBB2862CBDE0BAD45AC4472A2A9D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618165">
            <name>UnaryFun&lt;Pair&lt;K, T>, K>&amp;</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_K_T_K_327B231FE743DBB2862CBDE0BAD45AC4472A2A9D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618820">
            <name>UnaryFun&lt;Pair&lt;K, T>, K>&amp;</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_K_T_K_327B231FE743DBB2862CBDE0BAD45AC4472A2A9D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618742">
            <name>UnaryFun&lt;Pair&lt;K, T>, K>&amp;</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_K_T_K_327B231FE743DBB2862CBDE0BAD45AC4472A2A9D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618243">
            <name>UnaryFun&lt;Pair&lt;K, T>, K>&amp;</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_K_T_K_327B231FE743DBB2862CBDE0BAD45AC4472A2A9D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617661">
            <name>UnaryFun&lt;Pair&lt;K, T>, K>&amp;</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_K_T_K_327B231FE743DBB2862CBDE0BAD45AC4472A2A9D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618321">
            <name>UnaryFun&lt;Pair&lt;K, T>, K>&amp;</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_K_T_K_327B231FE743DBB2862CBDE0BAD45AC4472A2A9D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618664">
            <name>UnaryFun&lt;Pair&lt;K, T>, K>&amp;</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_K_T_K_327B231FE743DBB2862CBDE0BAD45AC4472A2A9D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617660">
            <name>UnaryFun&lt;Pair&lt;K, T>, K>*</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_K_T_K_327B231FE743DBB2862CBDE0BAD45AC4472A2A9D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618320">
            <name>UnaryFun&lt;Pair&lt;K, T>, K>*</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_K_T_K_327B231FE743DBB2862CBDE0BAD45AC4472A2A9D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618819">
            <name>UnaryFun&lt;Pair&lt;K, T>, K>*</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_K_T_K_327B231FE743DBB2862CBDE0BAD45AC4472A2A9D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617582">
            <name>UnaryFun&lt;Pair&lt;K, T>, K>*</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_K_T_K_327B231FE743DBB2862CBDE0BAD45AC4472A2A9D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618741">
            <name>UnaryFun&lt;Pair&lt;K, T>, K>*</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_K_T_K_327B231FE743DBB2862CBDE0BAD45AC4472A2A9D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618242">
            <name>UnaryFun&lt;Pair&lt;K, T>, K>*</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_K_T_K_327B231FE743DBB2862CBDE0BAD45AC4472A2A9D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618663">
            <name>UnaryFun&lt;Pair&lt;K, T>, K>*</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_K_T_K_327B231FE743DBB2862CBDE0BAD45AC4472A2A9D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618164">
            <name>UnaryFun&lt;Pair&lt;K, T>, K>*</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_K_T_K_327B231FE743DBB2862CBDE0BAD45AC4472A2A9D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_UnaryFun_Pair_Key_Value_Key_F63A5FACD7A5192AB4A9B7309BC2954AFA6B45BF" specialization="true">
            <name>UnaryFun&lt;Pair&lt;Key, Value>, Key></name>
            <content>
                <primaryType ref="class_UnaryFun_Argument_Result_40A5782E1C44E354DC2704648D2CE25C6A226646"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="4616730"/>
            </content>
        </type>
        <type derived="true" id="type.4618542">
            <name>UnaryFun&lt;Pair&lt;Key, Value>, Key>&amp;</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_Key_Value_Key_F63A5FACD7A5192AB4A9B7309BC2954AFA6B45BF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618043">
            <name>UnaryFun&lt;Pair&lt;Key, Value>, Key>&amp;</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_Key_Value_Key_F63A5FACD7A5192AB4A9B7309BC2954AFA6B45BF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617799">
            <name>UnaryFun&lt;Pair&lt;Key, Value>, Key>&amp;</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_Key_Value_Key_F63A5FACD7A5192AB4A9B7309BC2954AFA6B45BF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617921">
            <name>UnaryFun&lt;Pair&lt;Key, Value>, Key>&amp;</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_Key_Value_Key_F63A5FACD7A5192AB4A9B7309BC2954AFA6B45BF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617982">
            <name>UnaryFun&lt;Pair&lt;Key, Value>, Key>&amp;</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_Key_Value_Key_F63A5FACD7A5192AB4A9B7309BC2954AFA6B45BF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617522">
            <name>UnaryFun&lt;Pair&lt;Key, Value>, Key>&amp;</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_Key_Value_Key_F63A5FACD7A5192AB4A9B7309BC2954AFA6B45BF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618603">
            <name>UnaryFun&lt;Pair&lt;Key, Value>, Key>&amp;</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_Key_Value_Key_F63A5FACD7A5192AB4A9B7309BC2954AFA6B45BF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617461">
            <name>UnaryFun&lt;Pair&lt;Key, Value>, Key>&amp;</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_Key_Value_Key_F63A5FACD7A5192AB4A9B7309BC2954AFA6B45BF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617860">
            <name>UnaryFun&lt;Pair&lt;Key, Value>, Key>&amp;</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_Key_Value_Key_F63A5FACD7A5192AB4A9B7309BC2954AFA6B45BF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618481">
            <name>UnaryFun&lt;Pair&lt;Key, Value>, Key>&amp;</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_Key_Value_Key_F63A5FACD7A5192AB4A9B7309BC2954AFA6B45BF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618603">
            <name>UnaryFun&lt;Pair&lt;Key, Value>, Key>&amp;</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_Key_Value_Key_F63A5FACD7A5192AB4A9B7309BC2954AFA6B45BF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618104">
            <name>UnaryFun&lt;Pair&lt;Key, Value>, Key>&amp;</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_Key_Value_Key_F63A5FACD7A5192AB4A9B7309BC2954AFA6B45BF"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618480">
            <name>UnaryFun&lt;Pair&lt;Key, Value>, Key>*</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_Key_Value_Key_F63A5FACD7A5192AB4A9B7309BC2954AFA6B45BF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617521">
            <name>UnaryFun&lt;Pair&lt;Key, Value>, Key>*</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_Key_Value_Key_F63A5FACD7A5192AB4A9B7309BC2954AFA6B45BF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617460">
            <name>UnaryFun&lt;Pair&lt;Key, Value>, Key>*</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_Key_Value_Key_F63A5FACD7A5192AB4A9B7309BC2954AFA6B45BF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617859">
            <name>UnaryFun&lt;Pair&lt;Key, Value>, Key>*</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_Key_Value_Key_F63A5FACD7A5192AB4A9B7309BC2954AFA6B45BF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618541">
            <name>UnaryFun&lt;Pair&lt;Key, Value>, Key>*</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_Key_Value_Key_F63A5FACD7A5192AB4A9B7309BC2954AFA6B45BF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618602">
            <name>UnaryFun&lt;Pair&lt;Key, Value>, Key>*</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_Key_Value_Key_F63A5FACD7A5192AB4A9B7309BC2954AFA6B45BF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617798">
            <name>UnaryFun&lt;Pair&lt;Key, Value>, Key>*</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_Key_Value_Key_F63A5FACD7A5192AB4A9B7309BC2954AFA6B45BF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617920">
            <name>UnaryFun&lt;Pair&lt;Key, Value>, Key>*</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_Key_Value_Key_F63A5FACD7A5192AB4A9B7309BC2954AFA6B45BF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618602">
            <name>UnaryFun&lt;Pair&lt;Key, Value>, Key>*</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_Key_Value_Key_F63A5FACD7A5192AB4A9B7309BC2954AFA6B45BF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618103">
            <name>UnaryFun&lt;Pair&lt;Key, Value>, Key>*</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_Key_Value_Key_F63A5FACD7A5192AB4A9B7309BC2954AFA6B45BF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618042">
            <name>UnaryFun&lt;Pair&lt;Key, Value>, Key>*</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_Key_Value_Key_F63A5FACD7A5192AB4A9B7309BC2954AFA6B45BF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617981">
            <name>UnaryFun&lt;Pair&lt;Key, Value>, Key>*</name>
            <content>
                <baseType ref="type.class_UnaryFun_Pair_Key_Value_Key_F63A5FACD7A5192AB4A9B7309BC2954AFA6B45BF"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.4617342" specialization="true">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, JsonValue*>, String&lt;uchar>></name>
            <content>
                <primaryType ref="class_UnaryFun_Argument_Result_40A5782E1C44E354DC2704648D2CE25C6A226646"/>
                <argumentType ref="type.4617334"/>
                <argumentType ref="type.4607142"/>
            </content>
        </type>
        <type derived="true" id="type.4617344">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, JsonValue*>, String&lt;uchar>>&amp;</name>
            <content>
                <baseType ref="type.4617342"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618907">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, JsonValue*>, String&lt;uchar>>&amp;&amp;</name>
            <content>
                <baseType ref="type.4617342"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617343">
            <name>UnaryFun&lt;Pair&lt;String&lt;uchar>, JsonValue*>, String&lt;uchar>>*</name>
            <content>
                <baseType ref="type.4617342"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2366">
            <name>UnaryMinus&amp;&amp;</name>
            <content>
                <baseType ref="class_UnaryMinus_04009179AAFCB4DEE000972E675D4198E1AF838F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2363">
            <name>UnaryPlus&amp;&amp;</name>
            <content>
                <baseType ref="class_UnaryPlus_65EA8B4AEC38C5A830F0C46A73800A840EFCF9C2"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4617497" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.4617479"/>
            </content>
        </type>
        <type id="type.4618578" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.4618560"/>
            </content>
        </type>
        <type id="type.4618517" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.4618499"/>
            </content>
        </type>
        <type id="type.4618639" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.4618621"/>
            </content>
        </type>
        <type id="type.4617896" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.4617878"/>
            </content>
        </type>
        <type id="type.4618079" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.4618061"/>
            </content>
        </type>
        <type id="type.4608516" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.4608493"/>
            </content>
        </type>
        <type id="type.4618018" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.4618000"/>
            </content>
        </type>
        <type id="type.4617835" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.4617817"/>
            </content>
        </type>
        <type id="type.4618639" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.4618621"/>
            </content>
        </type>
        <type id="type.4617957" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.4617939"/>
            </content>
        </type>
        <type id="type.4617558" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.4617540"/>
            </content>
        </type>
        <type id="type.4618140" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.4618122"/>
            </content>
        </type>
        <type derived="true" id="type.4618519">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;</name>
            <content>
                <baseType ref="type.4618517"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618142">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;</name>
            <content>
                <baseType ref="type.4618140"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617837">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;</name>
            <content>
                <baseType ref="type.4617835"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617959">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;</name>
            <content>
                <baseType ref="type.4617957"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618020">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;</name>
            <content>
                <baseType ref="type.4618018"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617898">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;</name>
            <content>
                <baseType ref="type.4617896"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618641">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;</name>
            <content>
                <baseType ref="type.4618639"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618580">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;</name>
            <content>
                <baseType ref="type.4618578"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617560">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;</name>
            <content>
                <baseType ref="type.4617558"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618081">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;</name>
            <content>
                <baseType ref="type.4618079"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617499">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;</name>
            <content>
                <baseType ref="type.4617497"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618024">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.4618018"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618146">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.4618140"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618645">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.4618639"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1962">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.4608516"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617841">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.4617835"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618584">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.4618578"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618523">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.4618517"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617902">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.4617896"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617963">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.4617957"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618523">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.4618517"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618085">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.4618079"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617564">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.4617558"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617503">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.4617497"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618019">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>*</name>
            <content>
                <baseType ref="type.4618018"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617498">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>*</name>
            <content>
                <baseType ref="type.4617497"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618640">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>*</name>
            <content>
                <baseType ref="type.4618639"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617836">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>*</name>
            <content>
                <baseType ref="type.4617835"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617958">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>*</name>
            <content>
                <baseType ref="type.4617957"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618518">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>*</name>
            <content>
                <baseType ref="type.4618517"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618141">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>*</name>
            <content>
                <baseType ref="type.4618140"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618579">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>*</name>
            <content>
                <baseType ref="type.4618578"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617897">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>*</name>
            <content>
                <baseType ref="type.4617896"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618080">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>*</name>
            <content>
                <baseType ref="type.4618079"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618640">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>*</name>
            <content>
                <baseType ref="type.4618639"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617559">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>*</name>
            <content>
                <baseType ref="type.4617558"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.4617380" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, JsonValue*>>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.4617362"/>
            </content>
        </type>
        <type derived="true" id="type.4617382">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, JsonValue*>>>&amp;</name>
            <content>
                <baseType ref="type.4617380"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617386">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, JsonValue*>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.4617380"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617381">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, JsonValue*>>>*</name>
            <content>
                <baseType ref="type.4617380"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.4608831" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
            </content>
        </type>
        <type derived="true" id="type.2009">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>>&amp;&amp;</name>
            <content>
                <baseType ref="type.4608831"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4608773" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;ValueType>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.class_RedBlackTreeNode_ValueType_38B50DA62919A6E728F70DA36817024C5A9A8855"/>
            </content>
        </type>
        <type derived="true" id="type.2005">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;ValueType>>&amp;&amp;</name>
            <content>
                <baseType ref="type.4608773"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4612029" specialization="true">
            <name>UniquePtr&lt;System.Exception></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_Exception_02AEA5204AD1035A91C2D843597EACBE078C8989"/>
            </content>
        </type>
        <type derived="true" id="type.2168">
            <name>UniquePtr&lt;System.Exception>&amp;&amp;</name>
            <content>
                <baseType ref="type.4612029"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4617409" specialization="true">
            <name>UniquePtr&lt;System.Json.JsonParser></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_JsonParser_821F84FEBAE4D09942A9E5D6B178B8C8CB1D24E9"/>
            </content>
        </type>
        <type derived="true" id="type.4617411">
            <name>UniquePtr&lt;System.Json.JsonParser>&amp;</name>
            <content>
                <baseType ref="type.4617409"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617415">
            <name>UniquePtr&lt;System.Json.JsonParser>&amp;&amp;</name>
            <content>
                <baseType ref="type.4617409"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617410">
            <name>UniquePtr&lt;System.Json.JsonParser>*</name>
            <content>
                <baseType ref="type.4617409"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.4617315" specialization="true">
            <name>UniquePtr&lt;System.Json.JsonValue></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_JsonValue_B86942C2856CC5758E1FB19BBBE97E4002D4008A"/>
            </content>
        </type>
        <type derived="true" id="type.4617317">
            <name>UniquePtr&lt;System.Json.JsonValue>&amp;</name>
            <content>
                <baseType ref="type.4617315"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617321">
            <name>UniquePtr&lt;System.Json.JsonValue>&amp;&amp;</name>
            <content>
                <baseType ref="type.4617315"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617316">
            <name>UniquePtr&lt;System.Json.JsonValue>*</name>
            <content>
                <baseType ref="type.4617315"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618898">
            <name>UniquePtr&lt;System.Json.JsonValue>*&amp;</name>
            <content>
                <baseType ref="type.4617315"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618899">
            <name>UniquePtr&lt;System.Json.JsonValue>*&amp;&amp;</name>
            <content>
                <baseType ref="type.4617315"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618897">
            <name>UniquePtr&lt;System.Json.JsonValue>**</name>
            <content>
                <baseType ref="type.4617315"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.4615990" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.ExpectationFailure></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_ExpectationFailure_EBDBB0FC1DDED5BE7E15008622BB34AFCA7E9A8C"/>
            </content>
        </type>
        <type derived="true" id="type.2231">
            <name>UniquePtr&lt;System.Text.Parsing.ExpectationFailure>&amp;&amp;</name>
            <content>
                <baseType ref="type.4615990"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4615193" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingData></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_ParsingData_9F05BA66DA13D9A55E1E7FF50B19E250484C3A7B"/>
            </content>
        </type>
        <type derived="true" id="type.2190">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingData>&amp;&amp;</name>
            <content>
                <baseType ref="type.4615193"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4616117" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingException></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_ParsingException_71361E1F1BFEB5E7F55F5F6E472A696283973396"/>
            </content>
        </type>
        <type derived="true" id="type.2232">
            <name>UniquePtr&lt;System.Text.Parsing.ParsingException>&amp;&amp;</name>
            <content>
                <baseType ref="type.4616117"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4615200" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.XmlLog></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_XmlLog_8F1C6843100321A56502C0710D6A400B6E4C7704"/>
            </content>
        </type>
        <type derived="true" id="type.2191">
            <name>UniquePtr&lt;System.Text.Parsing.XmlLog>&amp;&amp;</name>
            <content>
                <baseType ref="type.4615200"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009" specialization="true">
            <name>UniquePtr&lt;T></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="4606952"/>
            </content>
        </type>
        <type derived="true" id="type.2167">
            <name>UniquePtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="4616734">
            <name>Value</name>
        </type>
        <type derived="true" id="type.4618646">
            <name>Value&amp;</name>
            <content>
                <baseType ref="4616734"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618025">
            <name>Value&amp;</name>
            <content>
                <baseType ref="4616703"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618585">
            <name>Value&amp;</name>
            <content>
                <baseType ref="4616731"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617964">
            <name>Value&amp;</name>
            <content>
                <baseType ref="4616700"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618585">
            <name>Value&amp;</name>
            <content>
                <baseType ref="4616731"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618147">
            <name>Value&amp;</name>
            <content>
                <baseType ref="4616709"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617565">
            <name>Value&amp;</name>
            <content>
                <baseType ref="4616629"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617504">
            <name>Value&amp;</name>
            <content>
                <baseType ref="4616626"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617903">
            <name>Value&amp;</name>
            <content>
                <baseType ref="4616697"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1963">
            <name>Value&amp;</name>
            <content>
                <baseType ref="4606615"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617842">
            <name>Value&amp;</name>
            <content>
                <baseType ref="4616694"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618086">
            <name>Value&amp;</name>
            <content>
                <baseType ref="4616706"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618524">
            <name>Value&amp;</name>
            <content>
                <baseType ref="4616728"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type id="type.4619018" specialization="true">
            <name>ValueObject&lt;JsonArray*></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.4616610"/>
            </content>
        </type>
        <type derived="true" id="type.4619020">
            <name>ValueObject&lt;JsonArray*>&amp;</name>
            <content>
                <baseType ref="type.4619018"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2313">
            <name>ValueObject&lt;JsonArray*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4619018"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4619019">
            <name>ValueObject&lt;JsonArray*>*</name>
            <content>
                <baseType ref="type.4619018"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.4618999" specialization="true">
            <name>ValueObject&lt;JsonNumber*></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.4616586"/>
            </content>
        </type>
        <type derived="true" id="type.4619001">
            <name>ValueObject&lt;JsonNumber*>&amp;</name>
            <content>
                <baseType ref="type.4618999"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2310">
            <name>ValueObject&lt;JsonNumber*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4618999"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4619000">
            <name>ValueObject&lt;JsonNumber*>*</name>
            <content>
                <baseType ref="type.4618999"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.4619008" specialization="true">
            <name>ValueObject&lt;JsonObject*></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.4616604"/>
            </content>
        </type>
        <type derived="true" id="type.4619010">
            <name>ValueObject&lt;JsonObject*>&amp;</name>
            <content>
                <baseType ref="type.4619008"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2311">
            <name>ValueObject&lt;JsonObject*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4619008"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4619009">
            <name>ValueObject&lt;JsonObject*>*</name>
            <content>
                <baseType ref="type.4619008"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.4618990" specialization="true">
            <name>ValueObject&lt;JsonString*></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.4616598"/>
            </content>
        </type>
        <type derived="true" id="type.4618992">
            <name>ValueObject&lt;JsonString*>&amp;</name>
            <content>
                <baseType ref="type.4618990"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2308">
            <name>ValueObject&lt;JsonString*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4618990"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618991">
            <name>ValueObject&lt;JsonString*>*</name>
            <content>
                <baseType ref="type.4618990"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.4618978" specialization="true">
            <name>ValueObject&lt;JsonValue*></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.4616576"/>
            </content>
        </type>
        <type derived="true" id="type.4618980">
            <name>ValueObject&lt;JsonValue*>&amp;</name>
            <content>
                <baseType ref="type.4618978"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2306">
            <name>ValueObject&lt;JsonValue*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4618978"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618979">
            <name>ValueObject&lt;JsonValue*>*</name>
            <content>
                <baseType ref="type.4618978"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.4616492" specialization="true">
            <name>ValueObject&lt;String&lt;uchar>></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.4607142"/>
            </content>
        </type>
        <type derived="true" id="type.2249">
            <name>ValueObject&lt;String&lt;uchar>>&amp;&amp;</name>
            <content>
                <baseType ref="type.4616492"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79" specialization="true">
            <name>ValueObject&lt;ValueType></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="4614118"/>
            </content>
        </type>
        <type derived="true" id="type.2213">
            <name>ValueObject&lt;ValueType>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4616480" specialization="true">
            <name>ValueObject&lt;bool></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.4605930"/>
            </content>
        </type>
        <type derived="true" id="type.2248">
            <name>ValueObject&lt;bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.4616480"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4616317" specialization="true">
            <name>ValueObject&lt;byte></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.4605932"/>
            </content>
        </type>
        <type derived="true" id="type.2235">
            <name>ValueObject&lt;byte>&amp;&amp;</name>
            <content>
                <baseType ref="type.4616317"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4616456" specialization="true">
            <name>ValueObject&lt;double></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.4605940"/>
            </content>
        </type>
        <type derived="true" id="type.2247">
            <name>ValueObject&lt;double>&amp;&amp;</name>
            <content>
                <baseType ref="type.4616456"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4616442" specialization="true">
            <name>ValueObject&lt;float></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.4605939"/>
            </content>
        </type>
        <type derived="true" id="type.2245">
            <name>ValueObject&lt;float>&amp;&amp;</name>
            <content>
                <baseType ref="type.4616442"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4616358" specialization="true">
            <name>ValueObject&lt;int></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.4605935"/>
            </content>
        </type>
        <type derived="true" id="type.2240">
            <name>ValueObject&lt;int>&amp;&amp;</name>
            <content>
                <baseType ref="type.4616358"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4616383" specialization="true">
            <name>ValueObject&lt;long></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.4605937"/>
            </content>
        </type>
        <type derived="true" id="type.2242">
            <name>ValueObject&lt;long>&amp;&amp;</name>
            <content>
                <baseType ref="type.4616383"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4616300" specialization="true">
            <name>ValueObject&lt;sbyte></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.4605931"/>
            </content>
        </type>
        <type derived="true" id="type.2234">
            <name>ValueObject&lt;sbyte>&amp;&amp;</name>
            <content>
                <baseType ref="type.4616300"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4616330" specialization="true">
            <name>ValueObject&lt;short></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.4605933"/>
            </content>
        </type>
        <type derived="true" id="type.2237">
            <name>ValueObject&lt;short>&amp;&amp;</name>
            <content>
                <baseType ref="type.4616330"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4616509" specialization="true">
            <name>ValueObject&lt;uchar></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.4605943"/>
            </content>
        </type>
        <type derived="true" id="type.2250">
            <name>ValueObject&lt;uchar>&amp;&amp;</name>
            <content>
                <baseType ref="type.4616509"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4616370" specialization="true">
            <name>ValueObject&lt;uint></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.4605936"/>
            </content>
        </type>
        <type derived="true" id="type.2241">
            <name>ValueObject&lt;uint>&amp;&amp;</name>
            <content>
                <baseType ref="type.4616370"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4616395" specialization="true">
            <name>ValueObject&lt;ulong></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.4605938"/>
            </content>
        </type>
        <type derived="true" id="type.2243">
            <name>ValueObject&lt;ulong>&amp;&amp;</name>
            <content>
                <baseType ref="type.4616395"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4616344" specialization="true">
            <name>ValueObject&lt;ushort></name>
            <content>
                <primaryType ref="class_ValueObject_ValueType_0BB8B7C549DA9C8B2D2419DC6E4B8ECAA2834E79"/>
                <argumentType ref="type.4605934"/>
            </content>
        </type>
        <type derived="true" id="type.2239">
            <name>ValueObject&lt;ushort>&amp;&amp;</name>
            <content>
                <baseType ref="type.4616344"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="class_ValueRule_B33645C537AF028FF2E642F30FE36D99549C75E4">
            <name>ValueRule</name>
        </type>
        <type derived="true" id="type.4616644">
            <name>ValueRule&amp;</name>
            <content>
                <baseType ref="class_ValueRule_B33645C537AF028FF2E642F30FE36D99549C75E4"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616643">
            <name>ValueRule*</name>
            <content>
                <baseType ref="class_ValueRule_B33645C537AF028FF2E642F30FE36D99549C75E4"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618989">
            <name>ValueRule*&amp;</name>
            <content>
                <baseType ref="class_ValueRule_B33645C537AF028FF2E642F30FE36D99549C75E4"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618988">
            <name>ValueRule**</name>
            <content>
                <baseType ref="class_ValueRule_B33645C537AF028FF2E642F30FE36D99549C75E4"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F" specialization="true">
            <name>WeakCount&lt;T></name>
            <content>
                <primaryType ref="class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <argumentType ref="4606724"/>
            </content>
        </type>
        <type derived="true" id="type.2021">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2029">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2051">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2037">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2059">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4607044" specialization="true">
            <name>WeakPtr&lt;System.IO.ByteStream></name>
            <content>
                <primaryType ref="class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <argumentType ref="class_ByteStream_3B7A2F3379612ADBD7E416487752A1935AA8B96F"/>
            </content>
        </type>
        <type derived="true" id="type.1834">
            <name>WeakPtr&lt;System.IO.ByteStream>&amp;&amp;</name>
            <content>
                <baseType ref="type.4607044"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC" specialization="true">
            <name>WeakPtr&lt;T></name>
            <content>
                <primaryType ref="class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <argumentType ref="4606732"/>
            </content>
        </type>
        <type derived="true" id="type.2054">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2061">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2045">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2064">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2039">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2041">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2043">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_WeakPtr_U_DC1FE0F847E4C954B399A783A0BC0307D485B021" specialization="true">
            <name>WeakPtr&lt;U></name>
            <content>
                <primaryType ref="class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <argumentType ref="4606727"/>
            </content>
        </type>
        <type derived="true" id="type.2047">
            <name>WeakPtr&lt;U>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_U_DC1FE0F847E4C954B399A783A0BC0307D485B021"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type basic="true" id="type.4605930">
            <name>bool</name>
        </type>
        <type derived="true" id="type.4605947">
            <name>bool&amp;</name>
            <content>
                <baseType ref="type.4605930"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type basic="true" id="type.4605932">
            <name>byte</name>
        </type>
        <type derived="true" id="type.4605953">
            <name>byte&amp;</name>
            <content>
                <baseType ref="type.4605932"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4605952">
            <name>byte*</name>
            <content>
                <baseType ref="type.4605932"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.4605941">
            <name>char</name>
        </type>
        <type derived="true" id="type.4605980">
            <name>char&amp;</name>
            <content>
                <baseType ref="type.4605941"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4605979">
            <name>char*</name>
            <content>
                <baseType ref="type.4605941"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2352">
            <name>const AddressOf</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_AddressOf_F9F594A9680E5BE9D427D963284931AEB8E52492"/>
            </content>
        </type>
        <type derived="true" id="type.2353">
            <name>const AddressOf&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_AddressOf_F9F594A9680E5BE9D427D963284931AEB8E52492"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2424">
            <name>const AssertStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_AssertStatement_D3CF5F3C391681B790B0E9E570953DA4FA666696"/>
            </content>
        </type>
        <type derived="true" id="type.2425">
            <name>const AssertStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_AssertStatement_D3CF5F3C391681B790B0E9E570953DA4FA666696"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2317">
            <name>const BinaryReader</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BinaryReader_7D0A41A9C666814155001B1AF5B066E926C8F3AC"/>
            </content>
        </type>
        <type derived="true" id="type.2318">
            <name>const BinaryReader&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BinaryReader_7D0A41A9C666814155001B1AF5B066E926C8F3AC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2319">
            <name>const BinaryWriter</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BinaryWriter_6D47712E9CF8C098A17FFF3729140EE727BD87E2"/>
            </content>
        </type>
        <type derived="true" id="type.2320">
            <name>const BinaryWriter&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BinaryWriter_6D47712E9CF8C098A17FFF3729140EE727BD87E2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618839">
            <name>const Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618836"/>
            </content>
        </type>
        <type derived="true" id="type.4617602">
            <name>const Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617599"/>
            </content>
        </type>
        <type derived="true" id="type.4617680">
            <name>const Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617677"/>
            </content>
        </type>
        <type derived="true" id="type.4618761">
            <name>const Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618758"/>
            </content>
        </type>
        <type derived="true" id="type.4618683">
            <name>const Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618680"/>
            </content>
        </type>
        <type derived="true" id="type.4618340">
            <name>const Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618337"/>
            </content>
        </type>
        <type derived="true" id="type.4618184">
            <name>const Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618181"/>
            </content>
        </type>
        <type derived="true" id="type.4618761">
            <name>const Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618758"/>
            </content>
        </type>
        <type derived="true" id="type.4618262">
            <name>const Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618259"/>
            </content>
        </type>
        <type derived="true" id="type.4618841">
            <name>const Bucket&lt;Pair&lt;K, T>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618836"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618763">
            <name>const Bucket&lt;Pair&lt;K, T>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618758"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618685">
            <name>const Bucket&lt;Pair&lt;K, T>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618680"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617682">
            <name>const Bucket&lt;Pair&lt;K, T>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617677"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617604">
            <name>const Bucket&lt;Pair&lt;K, T>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617599"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618763">
            <name>const Bucket&lt;Pair&lt;K, T>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618758"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618264">
            <name>const Bucket&lt;Pair&lt;K, T>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618259"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618342">
            <name>const Bucket&lt;Pair&lt;K, T>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618337"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618186">
            <name>const Bucket&lt;Pair&lt;K, T>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618181"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617603">
            <name>const Bucket&lt;Pair&lt;K, T>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617599"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618762">
            <name>const Bucket&lt;Pair&lt;K, T>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618758"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618341">
            <name>const Bucket&lt;Pair&lt;K, T>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618337"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618684">
            <name>const Bucket&lt;Pair&lt;K, T>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618680"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618840">
            <name>const Bucket&lt;Pair&lt;K, T>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618836"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618185">
            <name>const Bucket&lt;Pair&lt;K, T>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618181"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618263">
            <name>const Bucket&lt;Pair&lt;K, T>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618259"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617681">
            <name>const Bucket&lt;Pair&lt;K, T>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617677"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618762">
            <name>const Bucket&lt;Pair&lt;K, T>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618758"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618205">
            <name>const Bucket&lt;Pair&lt;K, T>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618181"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618361">
            <name>const Bucket&lt;Pair&lt;K, T>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618337"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618782">
            <name>const Bucket&lt;Pair&lt;K, T>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618758"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617623">
            <name>const Bucket&lt;Pair&lt;K, T>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617599"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618860">
            <name>const Bucket&lt;Pair&lt;K, T>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618836"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618283">
            <name>const Bucket&lt;Pair&lt;K, T>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618259"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617701">
            <name>const Bucket&lt;Pair&lt;K, T>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617677"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618860">
            <name>const Bucket&lt;Pair&lt;K, T>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618836"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618704">
            <name>const Bucket&lt;Pair&lt;K, T>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618680"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618206">
            <name>const Bucket&lt;Pair&lt;K, T>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618181"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618783">
            <name>const Bucket&lt;Pair&lt;K, T>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618758"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618861">
            <name>const Bucket&lt;Pair&lt;K, T>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618836"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617624">
            <name>const Bucket&lt;Pair&lt;K, T>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617599"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617702">
            <name>const Bucket&lt;Pair&lt;K, T>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617677"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618284">
            <name>const Bucket&lt;Pair&lt;K, T>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618259"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618705">
            <name>const Bucket&lt;Pair&lt;K, T>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618680"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618362">
            <name>const Bucket&lt;Pair&lt;K, T>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618337"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2321">
            <name>const BufferedByteStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BufferedByteStream_E74639F265FCFA3F7A3E61DE9D92C703A46FD573"/>
            </content>
        </type>
        <type derived="true" id="type.2322">
            <name>const ByteStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ByteStream_3B7A2F3379612ADBD7E416487752A1935AA8B96F"/>
            </content>
        </type>
        <type derived="true" id="type.2431">
            <name>const CodeExpandingVisitor</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_CodeExpandingVisitor_2D824580300CDC92F6A03DB335EE0BB590738E53"/>
            </content>
        </type>
        <type derived="true" id="type.2432">
            <name>const CodeExpandingVisitor&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_CodeExpandingVisitor_2D824580300CDC92F6A03DB335EE0BB590738E53"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2367">
            <name>const Complement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Complement_E9C39B44C265CC4D19B0EFE97BE0DDAAF5B39DB5"/>
            </content>
        </type>
        <type derived="true" id="type.2368">
            <name>const Complement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Complement_E9C39B44C265CC4D19B0EFE97BE0DDAAF5B39DB5"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2333">
            <name>const ConditionVariable</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ConditionVariable_019A80625043CF98EC88D8F55238C84CFD4A9C26"/>
            </content>
        </type>
        <type derived="true" id="type.2385">
            <name>const Construct</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Construct_9E0CFFBA332AF77070D82685BD0B3B21F6BBDAB8"/>
            </content>
        </type>
        <type derived="true" id="type.2386">
            <name>const Construct&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Construct_9E0CFFBA332AF77070D82685BD0B3B21F6BBDAB8"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2338">
            <name>const ConversionException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ConversionException_968EDA1D00534F82FF78F973855F91349977511B"/>
            </content>
        </type>
        <type derived="true" id="type.2339">
            <name>const ConversionException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ConversionException_968EDA1D00534F82FF78F973855F91349977511B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1833">
            <name>const Counter&lt;System.IO.ByteStream></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4607028"/>
            </content>
        </type>
        <type derived="true" id="type.2062">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.2026">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.2017">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.2022">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.2048">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.2023">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.2044">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.2042">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.2040">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.2032">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.2024">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.2063">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.2014">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.2033">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.2055">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.2031">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.2018">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2049">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2015">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2034">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2056">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2027">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2065">
            <name>const Counter&lt;U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A"/>
            </content>
        </type>
        <type derived="true" id="type.2025">
            <name>const Counter&lt;U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A"/>
            </content>
        </type>
        <type derived="true" id="type.2046">
            <name>const Counter&lt;U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A"/>
            </content>
        </type>
        <type derived="true" id="type.2403">
            <name>const DeleteStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DeleteStatement_CFF57A1EB43152DAED3E95873037A4F83E2AAF0A"/>
            </content>
        </type>
        <type derived="true" id="type.2404">
            <name>const DeleteStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DeleteStatement_CFF57A1EB43152DAED3E95873037A4F83E2AAF0A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2349">
            <name>const Deref</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Deref_6825EB2BE00B35C10BF9F18A018CADC1F1F12594"/>
            </content>
        </type>
        <type derived="true" id="type.2350">
            <name>const Deref&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Deref_6825EB2BE00B35C10BF9F18A018CADC1F1F12594"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2406">
            <name>const DestroyStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DestroyStatement_E2AF4A1B38D4AE66FCF9EF639F0D8309CE050550"/>
            </content>
        </type>
        <type derived="true" id="type.2407">
            <name>const DestroyStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_DestroyStatement_E2AF4A1B38D4AE66FCF9EF639F0D8309CE050550"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2443">
            <name>const ExpectationParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ExpectationParser_0DFEF78F7EA112E6F20DC00ECFD31592FD692CAB"/>
            </content>
        </type>
        <type derived="true" id="type.2444">
            <name>const ExpectationParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ExpectationParser_0DFEF78F7EA112E6F20DC00ECFD31592FD692CAB"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2409">
            <name>const ExpressionStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ExpressionStatement_F01731B3CB572136FE603DE87C8C465F5B79ED54"/>
            </content>
        </type>
        <type derived="true" id="type.2410">
            <name>const ExpressionStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ExpressionStatement_F01731B3CB572136FE603DE87C8C465F5B79ED54"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2323">
            <name>const FileSystemException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_FileSystemException_BB9552A6F8CD7166104BC90F55939797AA006B1A"/>
            </content>
        </type>
        <type derived="true" id="type.2324">
            <name>const FileSystemException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_FileSystemException_BB9552A6F8CD7166104BC90F55939797AA006B1A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2415">
            <name>const GotoCaseStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_GotoCaseStatement_54B0F8581DE0382A086C8C1EC6A19E93889D566D"/>
            </content>
        </type>
        <type derived="true" id="type.2416">
            <name>const GotoCaseStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_GotoCaseStatement_54B0F8581DE0382A086C8C1EC6A19E93889D566D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2400">
            <name>const GotoStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_GotoStatement_423A80C64905BCD7885A3433F9FE33D8BB37DF7E"/>
            </content>
        </type>
        <type derived="true" id="type.2401">
            <name>const GotoStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_GotoStatement_423A80C64905BCD7885A3433F9FE33D8BB37DF7E"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618806">
            <name>const HashMap&lt;K, T, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
            </content>
        </type>
        <type derived="true" id="type.4617647">
            <name>const HashMap&lt;K, T, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
            </content>
        </type>
        <type derived="true" id="type.4618151">
            <name>const HashMap&lt;K, T, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
            </content>
        </type>
        <type derived="true" id="type.4618650">
            <name>const HashMap&lt;K, T, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
            </content>
        </type>
        <type derived="true" id="type.4618728">
            <name>const HashMap&lt;K, T, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
            </content>
        </type>
        <type derived="true" id="type.4618307">
            <name>const HashMap&lt;K, T, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
            </content>
        </type>
        <type derived="true" id="type.4618806">
            <name>const HashMap&lt;K, T, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
            </content>
        </type>
        <type derived="true" id="type.4617569">
            <name>const HashMap&lt;K, T, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
            </content>
        </type>
        <type derived="true" id="type.4618229">
            <name>const HashMap&lt;K, T, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
            </content>
        </type>
        <type derived="true" id="type.4618652">
            <name>const HashMap&lt;K, T, H, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618309">
            <name>const HashMap&lt;K, T, H, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617571">
            <name>const HashMap&lt;K, T, H, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617649">
            <name>const HashMap&lt;K, T, H, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618730">
            <name>const HashMap&lt;K, T, H, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618231">
            <name>const HashMap&lt;K, T, H, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618808">
            <name>const HashMap&lt;K, T, H, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618153">
            <name>const HashMap&lt;K, T, H, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618152">
            <name>const HashMap&lt;K, T, H, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618729">
            <name>const HashMap&lt;K, T, H, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618651">
            <name>const HashMap&lt;K, T, H, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618807">
            <name>const HashMap&lt;K, T, H, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618230">
            <name>const HashMap&lt;K, T, H, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618729">
            <name>const HashMap&lt;K, T, H, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617648">
            <name>const HashMap&lt;K, T, H, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618308">
            <name>const HashMap&lt;K, T, H, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617570">
            <name>const HashMap&lt;K, T, H, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_HashMap_K_T_H_C_925D53DF947742545E7EC07D3487F3EA8C8D1D36"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618749">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
            </content>
        </type>
        <type derived="true" id="type.4618827">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
            </content>
        </type>
        <type derived="true" id="type.4617590">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
            </content>
        </type>
        <type derived="true" id="type.4617668">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
            </content>
        </type>
        <type derived="true" id="type.4618328">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
            </content>
        </type>
        <type derived="true" id="type.4618172">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
            </content>
        </type>
        <type derived="true" id="type.4618250">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
            </content>
        </type>
        <type derived="true" id="type.4618671">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
            </content>
        </type>
        <type derived="true" id="type.4618673">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617592">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618330">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618751">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618252">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618751">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618174">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617670">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618829">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617669">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618251">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618173">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618329">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617591">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618828">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618750">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618828">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618672">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618833">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618830"/>
            </content>
        </type>
        <type derived="true" id="type.4617596">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617593"/>
            </content>
        </type>
        <type derived="true" id="type.4618334">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618331"/>
            </content>
        </type>
        <type derived="true" id="type.4617674">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617671"/>
            </content>
        </type>
        <type derived="true" id="type.4618256">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618253"/>
            </content>
        </type>
        <type derived="true" id="type.4618677">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618674"/>
            </content>
        </type>
        <type derived="true" id="type.4618755">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618752"/>
            </content>
        </type>
        <type derived="true" id="type.4618833">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618830"/>
            </content>
        </type>
        <type derived="true" id="type.4618178">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618175"/>
            </content>
        </type>
        <type derived="true" id="type.4618336">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618331"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618258">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618253"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618180">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618175"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617598">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617593"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618679">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618674"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617676">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617671"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618835">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618830"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618757">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618752"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618257">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618253"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618335">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618331"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618678">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618674"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618756">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618752"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617675">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617671"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618179">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618175"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617597">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617593"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618834">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618830"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618847">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618844"/>
            </content>
        </type>
        <type derived="true" id="type.4617610">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617607"/>
            </content>
        </type>
        <type derived="true" id="type.4618192">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618189"/>
            </content>
        </type>
        <type derived="true" id="type.4618691">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618688"/>
            </content>
        </type>
        <type derived="true" id="type.4618348">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618345"/>
            </content>
        </type>
        <type derived="true" id="type.4618769">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618766"/>
            </content>
        </type>
        <type derived="true" id="type.4617688">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617685"/>
            </content>
        </type>
        <type derived="true" id="type.4618270">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618267"/>
            </content>
        </type>
        <type derived="true" id="type.4618693">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618688"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617690">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617685"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617612">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617607"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618194">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618189"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618771">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618766"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618272">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618267"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618350">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618345"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618849">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618844"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618771">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618766"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618848">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618844"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617689">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617685"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618193">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618189"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618692">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618688"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618271">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618267"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617611">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617607"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618848">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618844"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618349">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618345"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618770">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618766"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617117">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617114"/>
            </content>
        </type>
        <type derived="true" id="type.2198">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2195"/>
            </content>
        </type>
        <type derived="true" id="type.4617117">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617114"/>
            </content>
        </type>
        <type derived="true" id="type.4617119">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617114"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2200">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2195"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2199">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2195"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617118">
            <name>const HashtableIterator&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617114"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617123">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617120"/>
            </content>
        </type>
        <type derived="true" id="type.2204">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2201"/>
            </content>
        </type>
        <type derived="true" id="type.4617123">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617120"/>
            </content>
        </type>
        <type derived="true" id="type.4617125">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617120"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2206">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2201"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617124">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617120"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2205">
            <name>const HashtableIterator&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*, Hashtable&lt;String&lt;uchar>, String&lt;uchar>, Identity&lt;String&lt;uchar>>, Hasher&lt;String&lt;uchar>>, EqualTo&lt;String&lt;uchar>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2201"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2325">
            <name>const InvalidPathException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_InvalidPathException_B507BC7383A55580000E7A669FAAE1ABECF7FFBA"/>
            </content>
        </type>
        <type derived="true" id="type.2326">
            <name>const InvalidPathException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_InvalidPathException_B507BC7383A55580000E7A669FAAE1ABECF7FFBA"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2370">
            <name>const Invoke</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Invoke_D6527871DA9EA1727DFAC637E9FF17EF73B2DAF5"/>
            </content>
        </type>
        <type derived="true" id="type.2371">
            <name>const Invoke&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Invoke_D6527871DA9EA1727DFAC637E9FF17EF73B2DAF5"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616612">
            <name>const JsonArray</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonArray_595A35C98AB243A92CA1C39BB1B07E82AA246D18"/>
            </content>
        </type>
        <type derived="true" id="type.4616614">
            <name>const JsonArray&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonArray_595A35C98AB243A92CA1C39BB1B07E82AA246D18"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616613">
            <name>const JsonArray*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonArray_595A35C98AB243A92CA1C39BB1B07E82AA246D18"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2312">
            <name>const JsonArray*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonArray_595A35C98AB243A92CA1C39BB1B07E82AA246D18"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616594">
            <name>const JsonBool</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonBool_DECA0A9F59CE58DA61371982ADCFCD31F1497F79"/>
            </content>
        </type>
        <type derived="true" id="type.4616596">
            <name>const JsonBool&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonBool_DECA0A9F59CE58DA61371982ADCFCD31F1497F79"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616595">
            <name>const JsonBool*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonBool_DECA0A9F59CE58DA61371982ADCFCD31F1497F79"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2456">
            <name>const JsonGrammar</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonGrammar_35AA9FF722AADCE4D0495A1DD9EF9B19479BF318"/>
            </content>
        </type>
        <type derived="true" id="type.2457">
            <name>const JsonGrammar&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonGrammar_35AA9FF722AADCE4D0495A1DD9EF9B19479BF318"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2459">
            <name>const JsonImportException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonImportException_B2C659772CC55BEE3DF2ECEA8C50121E3DA06723"/>
            </content>
        </type>
        <type derived="true" id="type.2460">
            <name>const JsonImportException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonImportException_B2C659772CC55BEE3DF2ECEA8C50121E3DA06723"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616582">
            <name>const JsonNull</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonNull_E0746AE6880508740D5FFC8AF4E0FB0A7AE20ED2"/>
            </content>
        </type>
        <type derived="true" id="type.4616584">
            <name>const JsonNull&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonNull_E0746AE6880508740D5FFC8AF4E0FB0A7AE20ED2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616583">
            <name>const JsonNull*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonNull_E0746AE6880508740D5FFC8AF4E0FB0A7AE20ED2"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616588">
            <name>const JsonNumber</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonNumber_BA94887A1742701B420D069040E7953026161429"/>
            </content>
        </type>
        <type derived="true" id="type.4616590">
            <name>const JsonNumber&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonNumber_BA94887A1742701B420D069040E7953026161429"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616589">
            <name>const JsonNumber*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonNumber_BA94887A1742701B420D069040E7953026161429"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2309">
            <name>const JsonNumber*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonNumber_BA94887A1742701B420D069040E7953026161429"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616606">
            <name>const JsonObject</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonObject_1ACA524ABF05C4E15B709275F66F3BF5C165B69D"/>
            </content>
        </type>
        <type derived="true" id="type.4616608">
            <name>const JsonObject&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonObject_1ACA524ABF05C4E15B709275F66F3BF5C165B69D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616607">
            <name>const JsonObject*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonObject_1ACA524ABF05C4E15B709275F66F3BF5C165B69D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618951">
            <name>const JsonObject*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonObject_1ACA524ABF05C4E15B709275F66F3BF5C165B69D"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618950">
            <name>const JsonObject**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonObject_1ACA524ABF05C4E15B709275F66F3BF5C165B69D"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616618">
            <name>const JsonParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonParser_821F84FEBAE4D09942A9E5D6B178B8C8CB1D24E9"/>
            </content>
        </type>
        <type derived="true" id="type.4616620">
            <name>const JsonParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonParser_821F84FEBAE4D09942A9E5D6B178B8C8CB1D24E9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616619">
            <name>const JsonParser*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonParser_821F84FEBAE4D09942A9E5D6B178B8C8CB1D24E9"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616600">
            <name>const JsonString</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonString_5806452F49D8C71DEDC42FCEB48EC3A2163F7516"/>
            </content>
        </type>
        <type derived="true" id="type.4616602">
            <name>const JsonString&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonString_5806452F49D8C71DEDC42FCEB48EC3A2163F7516"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616601">
            <name>const JsonString*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonString_5806452F49D8C71DEDC42FCEB48EC3A2163F7516"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2307">
            <name>const JsonString*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonString_5806452F49D8C71DEDC42FCEB48EC3A2163F7516"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616578">
            <name>const JsonValue</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonValue_B86942C2856CC5758E1FB19BBBE97E4002D4008A"/>
            </content>
        </type>
        <type derived="true" id="type.4616580">
            <name>const JsonValue&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonValue_B86942C2856CC5758E1FB19BBBE97E4002D4008A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616579">
            <name>const JsonValue*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonValue_B86942C2856CC5758E1FB19BBBE97E4002D4008A"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617337">
            <name>const JsonValue*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonValue_B86942C2856CC5758E1FB19BBBE97E4002D4008A"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618965">
            <name>const JsonValue**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_JsonValue_B86942C2856CC5758E1FB19BBBE97E4002D4008A"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618734">
            <name>const K&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4616740"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617653">
            <name>const K&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4616635"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1917">
            <name>const K&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4606557"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617575">
            <name>const K&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4616631"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618157">
            <name>const K&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4616711"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618235">
            <name>const K&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4616715"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618812">
            <name>const K&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4616744"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618656">
            <name>const K&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4616736"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618812">
            <name>const K&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4616744"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618313">
            <name>const K&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4616719"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617974">
            <name>const Key&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4616702"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618096">
            <name>const Key&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4616708"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618035">
            <name>const Key&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4616705"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618595">
            <name>const Key&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4616733"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617913">
            <name>const Key&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4616699"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617453">
            <name>const Key&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4616625"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617514">
            <name>const Key&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4616628"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617852">
            <name>const Key&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4616696"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617791">
            <name>const Key&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4616693"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618473">
            <name>const Key&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4616727"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618534">
            <name>const Key&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4616730"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618595">
            <name>const Key&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4616733"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1957">
            <name>const Key&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4606614"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1940">
            <name>const KeyType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4606586"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2004">
            <name>const KeyType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4606693"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2440">
            <name>const KleeneStarParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_KleeneStarParser_8B553023A6E0AA98D08C756A40F526859BF46D2D"/>
            </content>
        </type>
        <type derived="true" id="type.2441">
            <name>const KleeneStarParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_KleeneStarParser_8B553023A6E0AA98D08C756A40F526859BF46D2D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617323">
            <name>const Less&lt;String&lt;uchar>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617322"/>
            </content>
        </type>
        <type derived="true" id="type.4617325">
            <name>const Less&lt;String&lt;uchar>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617322"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617324">
            <name>const Less&lt;String&lt;uchar>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617322"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618202">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618199"/>
            </content>
        </type>
        <type derived="true" id="type.4617620">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617617"/>
            </content>
        </type>
        <type derived="true" id="type.4617698">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617695"/>
            </content>
        </type>
        <type derived="true" id="type.4618779">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618776"/>
            </content>
        </type>
        <type derived="true" id="type.4618857">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618854"/>
            </content>
        </type>
        <type derived="true" id="type.4618701">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618698"/>
            </content>
        </type>
        <type derived="true" id="type.4618358">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618355"/>
            </content>
        </type>
        <type derived="true" id="type.4618280">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618277"/>
            </content>
        </type>
        <type derived="true" id="type.4618779">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618776"/>
            </content>
        </type>
        <type derived="true" id="type.4618360">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618355"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618859">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618854"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618703">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618698"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618204">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618199"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617622">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617617"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618282">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618277"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618859">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618854"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618781">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618776"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617700">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617695"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617699">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617695"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618203">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618199"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618858">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618854"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617621">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617617"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618281">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618277"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618780">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618776"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618702">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618698"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618359">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618355"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617758">
            <name>const List&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
            </content>
        </type>
        <type derived="true" id="type.4618413">
            <name>const List&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
            </content>
        </type>
        <type derived="true" id="type.4617420">
            <name>const List&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
            </content>
        </type>
        <type derived="true" id="type.4618440">
            <name>const List&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
            </content>
        </type>
        <type derived="true" id="type.4618386">
            <name>const List&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
            </content>
        </type>
        <type derived="true" id="type.4618440">
            <name>const List&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
            </content>
        </type>
        <type derived="true" id="type.4617731">
            <name>const List&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
            </content>
        </type>
        <type derived="true" id="type.4617760">
            <name>const List&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618388">
            <name>const List&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618415">
            <name>const List&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617422">
            <name>const List&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618415">
            <name>const List&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617733">
            <name>const List&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618442">
            <name>const List&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618387">
            <name>const List&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617421">
            <name>const List&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617759">
            <name>const List&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617732">
            <name>const List&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618414">
            <name>const List&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618441">
            <name>const List&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617391">
            <name>const List&lt;UniquePtr&lt;System.Json.JsonValue>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617388"/>
            </content>
        </type>
        <type derived="true" id="type.4617393">
            <name>const List&lt;UniquePtr&lt;System.Json.JsonValue>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617388"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617392">
            <name>const List&lt;UniquePtr&lt;System.Json.JsonValue>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617388"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2393">
            <name>const Literal</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Literal_2996038F9E8CCAE363F6BF2855F68961FFF05F77"/>
            </content>
        </type>
        <type derived="true" id="type.2394">
            <name>const Literal&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Literal_2996038F9E8CCAE363F6BF2855F68961FFF05F77"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1973">
            <name>const LockGuard&lt;Mtx></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
            </content>
        </type>
        <type derived="true" id="type.1974">
            <name>const LockGuard&lt;Mtx>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2160">
            <name>const LockGuard&lt;System.Threading.Mutex></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4611883"/>
            </content>
        </type>
        <type derived="true" id="type.2161">
            <name>const LockGuard&lt;System.Threading.Mutex>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4611883"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618090">
            <name>const Map&lt;Key, Value, KeyCompare></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
            </content>
        </type>
        <type derived="true" id="type.4618589">
            <name>const Map&lt;Key, Value, KeyCompare></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
            </content>
        </type>
        <type derived="true" id="type.4617447">
            <name>const Map&lt;Key, Value, KeyCompare></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
            </content>
        </type>
        <type derived="true" id="type.4617785">
            <name>const Map&lt;Key, Value, KeyCompare></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
            </content>
        </type>
        <type derived="true" id="type.4618589">
            <name>const Map&lt;Key, Value, KeyCompare></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
            </content>
        </type>
        <type derived="true" id="type.4617508">
            <name>const Map&lt;Key, Value, KeyCompare></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
            </content>
        </type>
        <type derived="true" id="type.4618467">
            <name>const Map&lt;Key, Value, KeyCompare></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
            </content>
        </type>
        <type derived="true" id="type.4617907">
            <name>const Map&lt;Key, Value, KeyCompare></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
            </content>
        </type>
        <type derived="true" id="type.4617968">
            <name>const Map&lt;Key, Value, KeyCompare></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
            </content>
        </type>
        <type derived="true" id="type.4617846">
            <name>const Map&lt;Key, Value, KeyCompare></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
            </content>
        </type>
        <type derived="true" id="type.4618528">
            <name>const Map&lt;Key, Value, KeyCompare></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
            </content>
        </type>
        <type derived="true" id="type.4618029">
            <name>const Map&lt;Key, Value, KeyCompare></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
            </content>
        </type>
        <type derived="true" id="type.4617510">
            <name>const Map&lt;Key, Value, KeyCompare>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617909">
            <name>const Map&lt;Key, Value, KeyCompare>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617970">
            <name>const Map&lt;Key, Value, KeyCompare>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617848">
            <name>const Map&lt;Key, Value, KeyCompare>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618591">
            <name>const Map&lt;Key, Value, KeyCompare>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618092">
            <name>const Map&lt;Key, Value, KeyCompare>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618469">
            <name>const Map&lt;Key, Value, KeyCompare>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618530">
            <name>const Map&lt;Key, Value, KeyCompare>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618591">
            <name>const Map&lt;Key, Value, KeyCompare>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618031">
            <name>const Map&lt;Key, Value, KeyCompare>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617787">
            <name>const Map&lt;Key, Value, KeyCompare>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617449">
            <name>const Map&lt;Key, Value, KeyCompare>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618468">
            <name>const Map&lt;Key, Value, KeyCompare>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618030">
            <name>const Map&lt;Key, Value, KeyCompare>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617969">
            <name>const Map&lt;Key, Value, KeyCompare>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618529">
            <name>const Map&lt;Key, Value, KeyCompare>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617908">
            <name>const Map&lt;Key, Value, KeyCompare>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618590">
            <name>const Map&lt;Key, Value, KeyCompare>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617786">
            <name>const Map&lt;Key, Value, KeyCompare>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617847">
            <name>const Map&lt;Key, Value, KeyCompare>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617448">
            <name>const Map&lt;Key, Value, KeyCompare>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617509">
            <name>const Map&lt;Key, Value, KeyCompare>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618590">
            <name>const Map&lt;Key, Value, KeyCompare>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618091">
            <name>const Map&lt;Key, Value, KeyCompare>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Map_Key_Value_KeyCompare_530B43B96CDA5DBA8045A4DA0691BBB50DE2DB3D"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617331">
            <name>const Map&lt;String&lt;uchar>, JsonValue*, Less&lt;String&lt;uchar>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617328"/>
            </content>
        </type>
        <type derived="true" id="type.4617333">
            <name>const Map&lt;String&lt;uchar>, JsonValue*, Less&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617328"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617332">
            <name>const Map&lt;String&lt;uchar>, JsonValue*, Less&lt;String&lt;uchar>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617328"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2334">
            <name>const Mutex</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Mutex_CAF802A5F8A71934B07EA6C23937F60D9AECD650"/>
            </content>
        </type>
        <type derived="true" id="type.2388">
            <name>const New</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_New_DC04D52C4D476FD919D770D43330D434B51E2D21"/>
            </content>
        </type>
        <type derived="true" id="type.2389">
            <name>const New&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_New_DC04D52C4D476FD919D770D43330D434B51E2D21"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2346">
            <name>const Not</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Not_5E324445E5A5F8057BEBD48898C26110CD402187"/>
            </content>
        </type>
        <type derived="true" id="type.2347">
            <name>const Not&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Not_5E324445E5A5F8057BEBD48898C26110CD402187"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2434">
            <name>const OptionalParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_OptionalParser_F2758E0656F6FF0FCFAFB3BADC90975486CE943A"/>
            </content>
        </type>
        <type derived="true" id="type.2435">
            <name>const OptionalParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_OptionalParser_F2758E0656F6FF0FCFAFB3BADC90975486CE943A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2327">
            <name>const OutputStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_OutputStream_D306768ED83C9FB00EA54CD61D604CE2BF727452"/>
            </content>
        </type>
        <type derived="true" id="type.4617684">
            <name>const Pair&lt;K, T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
            </content>
        </type>
        <type derived="true" id="type.4617606">
            <name>const Pair&lt;K, T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
            </content>
        </type>
        <type derived="true" id="type.4618687">
            <name>const Pair&lt;K, T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
            </content>
        </type>
        <type derived="true" id="type.4618344">
            <name>const Pair&lt;K, T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
            </content>
        </type>
        <type derived="true" id="type.4618266">
            <name>const Pair&lt;K, T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
            </content>
        </type>
        <type derived="true" id="type.4618765">
            <name>const Pair&lt;K, T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
            </content>
        </type>
        <type derived="true" id="type.4618687">
            <name>const Pair&lt;K, T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
            </content>
        </type>
        <type derived="true" id="type.4618843">
            <name>const Pair&lt;K, T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
            </content>
        </type>
        <type derived="true" id="type.4618188">
            <name>const Pair&lt;K, T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
            </content>
        </type>
        <type derived="true" id="type.4618665">
            <name>const Pair&lt;K, T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617584">
            <name>const Pair&lt;K, T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617662">
            <name>const Pair&lt;K, T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618821">
            <name>const Pair&lt;K, T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618244">
            <name>const Pair&lt;K, T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618322">
            <name>const Pair&lt;K, T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618821">
            <name>const Pair&lt;K, T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618743">
            <name>const Pair&lt;K, T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618166">
            <name>const Pair&lt;K, T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618764">
            <name>const Pair&lt;K, T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618343">
            <name>const Pair&lt;K, T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618265">
            <name>const Pair&lt;K, T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618764">
            <name>const Pair&lt;K, T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617605">
            <name>const Pair&lt;K, T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618842">
            <name>const Pair&lt;K, T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617683">
            <name>const Pair&lt;K, T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618187">
            <name>const Pair&lt;K, T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618686">
            <name>const Pair&lt;K, T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617810">
            <name>const Pair&lt;Key, Value></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
            </content>
        </type>
        <type derived="true" id="type.4617871">
            <name>const Pair&lt;Key, Value></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
            </content>
        </type>
        <type derived="true" id="type.4617533">
            <name>const Pair&lt;Key, Value></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
            </content>
        </type>
        <type derived="true" id="type.4617993">
            <name>const Pair&lt;Key, Value></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
            </content>
        </type>
        <type derived="true" id="type.4617472">
            <name>const Pair&lt;Key, Value></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
            </content>
        </type>
        <type derived="true" id="type.4618614">
            <name>const Pair&lt;Key, Value></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
            </content>
        </type>
        <type derived="true" id="type.4617932">
            <name>const Pair&lt;Key, Value></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
            </content>
        </type>
        <type derived="true" id="type.4618115">
            <name>const Pair&lt;Key, Value></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
            </content>
        </type>
        <type derived="true" id="type.4618492">
            <name>const Pair&lt;Key, Value></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
            </content>
        </type>
        <type derived="true" id="type.4618553">
            <name>const Pair&lt;Key, Value></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
            </content>
        </type>
        <type derived="true" id="type.4618614">
            <name>const Pair&lt;Key, Value></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
            </content>
        </type>
        <type derived="true" id="type.4618054">
            <name>const Pair&lt;Key, Value></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
            </content>
        </type>
        <type derived="true" id="type.4617983">
            <name>const Pair&lt;Key, Value>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618105">
            <name>const Pair&lt;Key, Value>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617523">
            <name>const Pair&lt;Key, Value>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617861">
            <name>const Pair&lt;Key, Value>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618604">
            <name>const Pair&lt;Key, Value>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618482">
            <name>const Pair&lt;Key, Value>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617462">
            <name>const Pair&lt;Key, Value>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618543">
            <name>const Pair&lt;Key, Value>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617800">
            <name>const Pair&lt;Key, Value>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618044">
            <name>const Pair&lt;Key, Value>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618604">
            <name>const Pair&lt;Key, Value>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617922">
            <name>const Pair&lt;Key, Value>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617809">
            <name>const Pair&lt;Key, Value>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617931">
            <name>const Pair&lt;Key, Value>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617992">
            <name>const Pair&lt;Key, Value>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617532">
            <name>const Pair&lt;Key, Value>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618613">
            <name>const Pair&lt;Key, Value>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618552">
            <name>const Pair&lt;Key, Value>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618491">
            <name>const Pair&lt;Key, Value>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618053">
            <name>const Pair&lt;Key, Value>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618613">
            <name>const Pair&lt;Key, Value>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618114">
            <name>const Pair&lt;Key, Value>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617471">
            <name>const Pair&lt;Key, Value>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617870">
            <name>const Pair&lt;Key, Value>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617355">
            <name>const Pair&lt;String&lt;uchar>, JsonValue*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617334"/>
            </content>
        </type>
        <type derived="true" id="type.4617345">
            <name>const Pair&lt;String&lt;uchar>, JsonValue*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617334"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617354">
            <name>const Pair&lt;String&lt;uchar>, JsonValue*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617334"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1980">
            <name>const Pair&lt;T, U>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1983">
            <name>const Pair&lt;T, U>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2437">
            <name>const PositiveParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PositiveParser_773062827D5C6002110C7D897D790DAEEE06A502"/>
            </content>
        </type>
        <type derived="true" id="type.2438">
            <name>const PositiveParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PositiveParser_773062827D5C6002110C7D897D790DAEEE06A502"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2376">
            <name>const PostfixDecrement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PostfixDecrement_D09AB7ACBA491B153051FDF9DE245E475C7F6392"/>
            </content>
        </type>
        <type derived="true" id="type.2377">
            <name>const PostfixDecrement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PostfixDecrement_D09AB7ACBA491B153051FDF9DE245E475C7F6392"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2373">
            <name>const PostfixIncrement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PostfixIncrement_DDC6B0BA10308D23CE5F90EE4D6B95A60E196FE9"/>
            </content>
        </type>
        <type derived="true" id="type.2374">
            <name>const PostfixIncrement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PostfixIncrement_DDC6B0BA10308D23CE5F90EE4D6B95A60E196FE9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2358">
            <name>const PrefixDecrement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PrefixDecrement_999D7C38861B7D6CED24609E18ACD9197FF478F0"/>
            </content>
        </type>
        <type derived="true" id="type.2359">
            <name>const PrefixDecrement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PrefixDecrement_999D7C38861B7D6CED24609E18ACD9197FF478F0"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2355">
            <name>const PrefixIncrement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PrefixIncrement_8035645A064F2FF3F7808392B992A24FA56E9E9D"/>
            </content>
        </type>
        <type derived="true" id="type.2356">
            <name>const PrefixIncrement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_PrefixIncrement_8035645A064F2FF3F7808392B992A24FA56E9E9D"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617715">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617712"/>
            </content>
        </type>
        <type derived="true" id="type.4618375">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618372"/>
            </content>
        </type>
        <type derived="true" id="type.4618874">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618871"/>
            </content>
        </type>
        <type derived="true" id="type.4618796">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618793"/>
            </content>
        </type>
        <type derived="true" id="type.4618718">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618715"/>
            </content>
        </type>
        <type derived="true" id="type.4618297">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618294"/>
            </content>
        </type>
        <type derived="true" id="type.4617637">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617634"/>
            </content>
        </type>
        <type derived="true" id="type.4618219">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618216"/>
            </content>
        </type>
        <type derived="true" id="type.4618718">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618715"/>
            </content>
        </type>
        <type derived="true" id="type.4618798">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618793"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618377">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618372"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618876">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618871"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618720">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618715"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617639">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617634"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618876">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618871"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617717">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617712"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618221">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618216"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618299">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618294"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618797">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618793"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618875">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618871"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618298">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618294"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618875">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618871"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618719">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618715"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617638">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617634"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617716">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617712"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618376">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618372"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618220">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618216"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618787">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618784"/>
            </content>
        </type>
        <type derived="true" id="type.4618865">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618862"/>
            </content>
        </type>
        <type derived="true" id="type.4617706">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617703"/>
            </content>
        </type>
        <type derived="true" id="type.4618709">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618706"/>
            </content>
        </type>
        <type derived="true" id="type.4618288">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618285"/>
            </content>
        </type>
        <type derived="true" id="type.4618210">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618207"/>
            </content>
        </type>
        <type derived="true" id="type.4618865">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618862"/>
            </content>
        </type>
        <type derived="true" id="type.4617628">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617625"/>
            </content>
        </type>
        <type derived="true" id="type.4618366">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618363"/>
            </content>
        </type>
        <type derived="true" id="type.4618789">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618784"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617630">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617625"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618711">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618706"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618290">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618285"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617708">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617703"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618212">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618207"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618867">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618862"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618368">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618363"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618867">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618862"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617707">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617703"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618788">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618784"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618211">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618207"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618289">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618285"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618367">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618363"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618289">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618285"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617629">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617625"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618866">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618862"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618710">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618706"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618404">
            <name>const RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
            </content>
        </type>
        <type derived="true" id="type.4617749">
            <name>const RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
            </content>
        </type>
        <type derived="true" id="type.4618431">
            <name>const RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
            </content>
        </type>
        <type derived="true" id="type.4617438">
            <name>const RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
            </content>
        </type>
        <type derived="true" id="type.4618458">
            <name>const RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
            </content>
        </type>
        <type derived="true" id="type.4617776">
            <name>const RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
            </content>
        </type>
        <type derived="true" id="type.4618406">
            <name>const RandomAccessIter&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617751">
            <name>const RandomAccessIter&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618460">
            <name>const RandomAccessIter&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617778">
            <name>const RandomAccessIter&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617440">
            <name>const RandomAccessIter&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618433">
            <name>const RandomAccessIter&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618406">
            <name>const RandomAccessIter&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618459">
            <name>const RandomAccessIter&lt;T, T&amp;, T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618432">
            <name>const RandomAccessIter&lt;T, T&amp;, T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618405">
            <name>const RandomAccessIter&lt;T, T&amp;, T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618432">
            <name>const RandomAccessIter&lt;T, T&amp;, T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617750">
            <name>const RandomAccessIter&lt;T, T&amp;, T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617439">
            <name>const RandomAccessIter&lt;T, T&amp;, T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617777">
            <name>const RandomAccessIter&lt;T, T&amp;, T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618395">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
            </content>
        </type>
        <type derived="true" id="type.4618422">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
            </content>
        </type>
        <type derived="true" id="type.4617767">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
            </content>
        </type>
        <type derived="true" id="type.4617740">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
            </content>
        </type>
        <type derived="true" id="type.4617429">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
            </content>
        </type>
        <type derived="true" id="type.4618449">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
            </content>
        </type>
        <type derived="true" id="type.4617431">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618397">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617742">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618451">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617769">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618424">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618451">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618450">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618396">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617430">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617741">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618450">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617768">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618423">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617404">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Json.JsonValue>, UniquePtr&lt;System.Json.JsonValue>&amp;, UniquePtr&lt;System.Json.JsonValue>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617401"/>
            </content>
        </type>
        <type derived="true" id="type.4617406">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Json.JsonValue>, UniquePtr&lt;System.Json.JsonValue>&amp;, UniquePtr&lt;System.Json.JsonValue>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617401"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617405">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Json.JsonValue>, UniquePtr&lt;System.Json.JsonValue>&amp;, UniquePtr&lt;System.Json.JsonValue>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617401"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617397">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Json.JsonValue>, const UniquePtr&lt;System.Json.JsonValue>&amp;, const UniquePtr&lt;System.Json.JsonValue>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617394"/>
            </content>
        </type>
        <type derived="true" id="type.4617399">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Json.JsonValue>, const UniquePtr&lt;System.Json.JsonValue>&amp;, const UniquePtr&lt;System.Json.JsonValue>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617394"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617398">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Json.JsonValue>, const UniquePtr&lt;System.Json.JsonValue>&amp;, const UniquePtr&lt;System.Json.JsonValue>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617394"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1967">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1964"/>
            </content>
        </type>
        <type derived="true" id="type.4616885">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4616882"/>
            </content>
        </type>
        <type derived="true" id="type.4616887">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4616882"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1969">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1964"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616887">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4616882"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1968">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1964"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616886">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4616882"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616756">
            <name>const RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4616753"/>
            </content>
        </type>
        <type derived="true" id="type.1838">
            <name>const RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1835"/>
            </content>
        </type>
        <type derived="true" id="type.4616756">
            <name>const RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4616753"/>
            </content>
        </type>
        <type derived="true" id="type.4616758">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4616753"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1840">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1835"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1839">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1835"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616757">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4616753"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616775">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4616772"/>
            </content>
        </type>
        <type derived="true" id="type.1857">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1854"/>
            </content>
        </type>
        <type derived="true" id="type.4616775">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4616772"/>
            </content>
        </type>
        <type derived="true" id="type.4616777">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4616772"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1859">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1854"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1858">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1854"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616776">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4616772"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2155">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2152"/>
            </content>
        </type>
        <type derived="true" id="type.4617074">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617071"/>
            </content>
        </type>
        <type derived="true" id="type.4617076">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617071"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2157">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2152"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617075">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617071"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2156">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2152"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617075">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617071"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616786">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4616783"/>
            </content>
        </type>
        <type derived="true" id="type.1868">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1865"/>
            </content>
        </type>
        <type derived="true" id="type.4616786">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4616783"/>
            </content>
        </type>
        <type derived="true" id="type.4616788">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4616783"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1870">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1865"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616787">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4616783"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1869">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1865"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616765">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4616762"/>
            </content>
        </type>
        <type derived="true" id="type.1847">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1844"/>
            </content>
        </type>
        <type derived="true" id="type.4616767">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4616762"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1849">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1844"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1848">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1844"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4616766">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4616762"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2335">
            <name>const RecursiveMutex</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_RecursiveMutex_B9ED5479754BBDDED6A4491348BBD2F20F701D82"/>
            </content>
        </type>
        <type derived="true" id="type.4617806">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
            </content>
        </type>
        <type derived="true" id="type.4617867">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
            </content>
        </type>
        <type derived="true" id="type.4618610">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
            </content>
        </type>
        <type derived="true" id="type.4618488">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
            </content>
        </type>
        <type derived="true" id="type.4618549">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
            </content>
        </type>
        <type derived="true" id="type.4618111">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
            </content>
        </type>
        <type derived="true" id="type.4617989">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
            </content>
        </type>
        <type derived="true" id="type.4618549">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
            </content>
        </type>
        <type derived="true" id="type.4618050">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
            </content>
        </type>
        <type derived="true" id="type.4617928">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
            </content>
        </type>
        <type derived="true" id="type.4617529">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
            </content>
        </type>
        <type derived="true" id="type.4617468">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
            </content>
        </type>
        <type derived="true" id="type.4618113">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617930">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617808">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618052">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617531">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617869">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617470">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618612">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617991">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618551">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618490">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617469">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617929">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618550">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618611">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618112">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617530">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618051">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617868">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617990">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618611">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618489">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617807">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617351">
            <name>const RedBlackTree&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, JsonValue*>, SelectFirst&lt;String&lt;uchar>, JsonValue*>, Less&lt;String&lt;uchar>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617348"/>
            </content>
        </type>
        <type derived="true" id="type.4617353">
            <name>const RedBlackTree&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, JsonValue*>, SelectFirst&lt;String&lt;uchar>, JsonValue*>, Less&lt;String&lt;uchar>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617348"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617352">
            <name>const RedBlackTree&lt;String&lt;uchar>, Pair&lt;String&lt;uchar>, JsonValue*>, SelectFirst&lt;String&lt;uchar>, JsonValue*>, Less&lt;String&lt;uchar>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617348"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617942">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617939"/>
            </content>
        </type>
        <type derived="true" id="type.4618125">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618122"/>
            </content>
        </type>
        <type derived="true" id="type.4618502">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618499"/>
            </content>
        </type>
        <type derived="true" id="type.4618563">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618560"/>
            </content>
        </type>
        <type derived="true" id="type.4618624">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618621"/>
            </content>
        </type>
        <type derived="true" id="type.4617881">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617878"/>
            </content>
        </type>
        <type derived="true" id="type.4617820">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617817"/>
            </content>
        </type>
        <type derived="true" id="type.4618064">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618061"/>
            </content>
        </type>
        <type derived="true" id="type.4618624">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618621"/>
            </content>
        </type>
        <type derived="true" id="type.4617482">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617479"/>
            </content>
        </type>
        <type derived="true" id="type.4617543">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617540"/>
            </content>
        </type>
        <type derived="true" id="type.4618003">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618000"/>
            </content>
        </type>
        <type derived="true" id="type.4618504">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618499"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618127">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618122"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618626">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618621"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617484">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617479"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617822">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617817"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617944">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617939"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617545">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617540"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617883">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617878"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618626">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618621"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618066">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618061"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618005">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618000"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618565">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618560"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618564">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618560"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617882">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617878"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617821">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617817"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617943">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617939"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617544">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617540"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618625">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618621"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618004">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618000"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618503">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618499"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618126">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618122"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618065">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618061"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617483">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617479"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618625">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618621"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617365">
            <name>const RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, JsonValue*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617362"/>
            </content>
        </type>
        <type derived="true" id="type.4617367">
            <name>const RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, JsonValue*>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617362"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617366">
            <name>const RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, JsonValue*>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617362"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617489">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617486"/>
            </content>
        </type>
        <type derived="true" id="type.4617888">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617885"/>
            </content>
        </type>
        <type derived="true" id="type.4618570">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618567"/>
            </content>
        </type>
        <type derived="true" id="type.4617949">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617946"/>
            </content>
        </type>
        <type derived="true" id="type.4618631">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618628"/>
            </content>
        </type>
        <type derived="true" id="type.4618071">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618068"/>
            </content>
        </type>
        <type derived="true" id="type.4618132">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618129"/>
            </content>
        </type>
        <type derived="true" id="type.4617827">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617824"/>
            </content>
        </type>
        <type derived="true" id="type.4618631">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618628"/>
            </content>
        </type>
        <type derived="true" id="type.4618509">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618506"/>
            </content>
        </type>
        <type derived="true" id="type.4617550">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617547"/>
            </content>
        </type>
        <type derived="true" id="type.4618010">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618007"/>
            </content>
        </type>
        <type derived="true" id="type.4617890">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617885"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617951">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617946"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618511">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618506"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617552">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617547"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618633">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618628"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618572">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618567"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618012">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618007"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618134">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618129"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617829">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617824"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618073">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618068"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617491">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617486"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618633">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618628"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618133">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618129"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617889">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617885"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617490">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617486"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618632">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618628"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617551">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617547"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618072">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618068"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618571">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618567"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618632">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618628"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617950">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617946"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618510">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618506"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618011">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618007"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617828">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617824"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618496">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618493"/>
            </content>
        </type>
        <type derived="true" id="type.4617936">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617933"/>
            </content>
        </type>
        <type derived="true" id="type.4617814">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617811"/>
            </content>
        </type>
        <type derived="true" id="type.4617997">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617994"/>
            </content>
        </type>
        <type derived="true" id="type.4617875">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617872"/>
            </content>
        </type>
        <type derived="true" id="type.4617476">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617473"/>
            </content>
        </type>
        <type derived="true" id="type.4618119">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618116"/>
            </content>
        </type>
        <type derived="true" id="type.4618557">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618554"/>
            </content>
        </type>
        <type derived="true" id="type.4618618">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618615"/>
            </content>
        </type>
        <type derived="true" id="type.4618058">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618055"/>
            </content>
        </type>
        <type derived="true" id="type.4617537">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617534"/>
            </content>
        </type>
        <type derived="true" id="type.4617478">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617473"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617999">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617994"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618620">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618615"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617816">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617811"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618620">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618615"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618498">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618493"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617938">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617933"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618559">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618554"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618060">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618055"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618121">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618116"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617539">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617534"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617877">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617872"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617815">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617811"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618059">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618055"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618120">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618116"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617538">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617534"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618497">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618493"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617876">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617872"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618619">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618615"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617477">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617473"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617937">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617933"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618619">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618615"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618558">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618554"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617998">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617994"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617372">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, JsonValue*>, Pair&lt;String&lt;uchar>, JsonValue*>&amp;, Pair&lt;String&lt;uchar>, JsonValue*>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617369"/>
            </content>
        </type>
        <type derived="true" id="type.4617374">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, JsonValue*>, Pair&lt;String&lt;uchar>, JsonValue*>&amp;, Pair&lt;String&lt;uchar>, JsonValue*>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617369"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617373">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, JsonValue*>, Pair&lt;String&lt;uchar>, JsonValue*>&amp;, Pair&lt;String&lt;uchar>, JsonValue*>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617369"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617359">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, JsonValue*>, const Pair&lt;String&lt;uchar>, JsonValue*>&amp;, const Pair&lt;String&lt;uchar>, JsonValue*>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617356"/>
            </content>
        </type>
        <type derived="true" id="type.4617361">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, JsonValue*>, const Pair&lt;String&lt;uchar>, JsonValue*>&amp;, const Pair&lt;String&lt;uchar>, JsonValue*>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617356"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617360">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;String&lt;uchar>, JsonValue*>, const Pair&lt;String&lt;uchar>, JsonValue*>&amp;, const Pair&lt;String&lt;uchar>, JsonValue*>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617356"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2397">
            <name>const ReturnStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ReturnStatement_FEC70A987D7361EC167E7C772D29550ABF5D7750"/>
            </content>
        </type>
        <type derived="true" id="type.2398">
            <name>const ReturnStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ReturnStatement_FEC70A987D7361EC167E7C772D29550ABF5D7750"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618815">
            <name>const SelectFirst&lt;K, T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
            </content>
        </type>
        <type derived="true" id="type.4617578">
            <name>const SelectFirst&lt;K, T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
            </content>
        </type>
        <type derived="true" id="type.4617656">
            <name>const SelectFirst&lt;K, T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
            </content>
        </type>
        <type derived="true" id="type.4618659">
            <name>const SelectFirst&lt;K, T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
            </content>
        </type>
        <type derived="true" id="type.4618737">
            <name>const SelectFirst&lt;K, T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
            </content>
        </type>
        <type derived="true" id="type.4618316">
            <name>const SelectFirst&lt;K, T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
            </content>
        </type>
        <type derived="true" id="type.4618238">
            <name>const SelectFirst&lt;K, T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
            </content>
        </type>
        <type derived="true" id="type.4618160">
            <name>const SelectFirst&lt;K, T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
            </content>
        </type>
        <type derived="true" id="type.4617580">
            <name>const SelectFirst&lt;K, T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617658">
            <name>const SelectFirst&lt;K, T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618240">
            <name>const SelectFirst&lt;K, T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618739">
            <name>const SelectFirst&lt;K, T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618817">
            <name>const SelectFirst&lt;K, T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618318">
            <name>const SelectFirst&lt;K, T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618162">
            <name>const SelectFirst&lt;K, T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618661">
            <name>const SelectFirst&lt;K, T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618817">
            <name>const SelectFirst&lt;K, T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618239">
            <name>const SelectFirst&lt;K, T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618317">
            <name>const SelectFirst&lt;K, T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617657">
            <name>const SelectFirst&lt;K, T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618738">
            <name>const SelectFirst&lt;K, T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618816">
            <name>const SelectFirst&lt;K, T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617579">
            <name>const SelectFirst&lt;K, T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618161">
            <name>const SelectFirst&lt;K, T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618660">
            <name>const SelectFirst&lt;K, T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617916">
            <name>const SelectFirst&lt;Key, Value></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
            </content>
        </type>
        <type derived="true" id="type.4618099">
            <name>const SelectFirst&lt;Key, Value></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
            </content>
        </type>
        <type derived="true" id="type.4617855">
            <name>const SelectFirst&lt;Key, Value></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
            </content>
        </type>
        <type derived="true" id="type.4617977">
            <name>const SelectFirst&lt;Key, Value></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
            </content>
        </type>
        <type derived="true" id="type.4618598">
            <name>const SelectFirst&lt;Key, Value></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
            </content>
        </type>
        <type derived="true" id="type.4618537">
            <name>const SelectFirst&lt;Key, Value></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
            </content>
        </type>
        <type derived="true" id="type.4617456">
            <name>const SelectFirst&lt;Key, Value></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
            </content>
        </type>
        <type derived="true" id="type.4617517">
            <name>const SelectFirst&lt;Key, Value></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
            </content>
        </type>
        <type derived="true" id="type.4618476">
            <name>const SelectFirst&lt;Key, Value></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
            </content>
        </type>
        <type derived="true" id="type.4618598">
            <name>const SelectFirst&lt;Key, Value></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
            </content>
        </type>
        <type derived="true" id="type.4618038">
            <name>const SelectFirst&lt;Key, Value></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
            </content>
        </type>
        <type derived="true" id="type.4617794">
            <name>const SelectFirst&lt;Key, Value></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
            </content>
        </type>
        <type derived="true" id="type.4617519">
            <name>const SelectFirst&lt;Key, Value>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617979">
            <name>const SelectFirst&lt;Key, Value>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618600">
            <name>const SelectFirst&lt;Key, Value>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618101">
            <name>const SelectFirst&lt;Key, Value>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617796">
            <name>const SelectFirst&lt;Key, Value>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618539">
            <name>const SelectFirst&lt;Key, Value>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618478">
            <name>const SelectFirst&lt;Key, Value>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617857">
            <name>const SelectFirst&lt;Key, Value>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618101">
            <name>const SelectFirst&lt;Key, Value>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617458">
            <name>const SelectFirst&lt;Key, Value>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618040">
            <name>const SelectFirst&lt;Key, Value>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617918">
            <name>const SelectFirst&lt;Key, Value>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617917">
            <name>const SelectFirst&lt;Key, Value>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617518">
            <name>const SelectFirst&lt;Key, Value>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617978">
            <name>const SelectFirst&lt;Key, Value>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618599">
            <name>const SelectFirst&lt;Key, Value>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618100">
            <name>const SelectFirst&lt;Key, Value>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618538">
            <name>const SelectFirst&lt;Key, Value>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617795">
            <name>const SelectFirst&lt;Key, Value>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618039">
            <name>const SelectFirst&lt;Key, Value>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617457">
            <name>const SelectFirst&lt;Key, Value>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618477">
            <name>const SelectFirst&lt;Key, Value>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617856">
            <name>const SelectFirst&lt;Key, Value>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618599">
            <name>const SelectFirst&lt;Key, Value>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617339">
            <name>const SelectFirst&lt;String&lt;uchar>, JsonValue*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617338"/>
            </content>
        </type>
        <type derived="true" id="type.4617341">
            <name>const SelectFirst&lt;String&lt;uchar>, JsonValue*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617338"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617340">
            <name>const SelectFirst&lt;String&lt;uchar>, JsonValue*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617338"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618918">
            <name>const SelectFirst&lt;String&lt;uchar>, JsonValue*>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617338"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618917">
            <name>const SelectFirst&lt;String&lt;uchar>, JsonValue*>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617338"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2379">
            <name>const SizeOf</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_SizeOf_7E82BCAA3BF507459413C346B576D53CFCE5288B"/>
            </content>
        </type>
        <type derived="true" id="type.2380">
            <name>const SizeOf&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_SizeOf_7E82BCAA3BF507459413C346B576D53CFCE5288B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2314">
            <name>const StaticInitCriticalSection</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_StaticInitCriticalSection_39AB37625C7D8624475080E487A05114E48A9C6C"/>
            </content>
        </type>
        <type derived="true" id="type.2315">
            <name>const StaticInitCriticalSection&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_StaticInitCriticalSection_39AB37625C7D8624475080E487A05114E48A9C6C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2328">
            <name>const StreamReader</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_StreamReader_8A8267CD81BA8B198AF295474A8CB0B2DFBB7B57"/>
            </content>
        </type>
        <type derived="true" id="type.2329">
            <name>const StreamReader&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_StreamReader_8A8267CD81BA8B198AF295474A8CB0B2DFBB7B57"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2330">
            <name>const StreamWriter</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_StreamWriter_40A39F418049D49DB679452BB514CDFE47500311"/>
            </content>
        </type>
        <type derived="true" id="type.4607059">
            <name>const String&lt;char>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4607054"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4607147">
            <name>const String&lt;uchar>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4607142"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4607146">
            <name>const String&lt;uchar>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4607142"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4607102">
            <name>const String&lt;wchar>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4607097"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2412">
            <name>const SwitchStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_SwitchStatement_18D2C0BB3BA2134D050B02EA375A462847662B6E"/>
            </content>
        </type>
        <type derived="true" id="type.2413">
            <name>const SwitchStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_SwitchStatement_18D2C0BB3BA2134D050B02EA375A462847662B6E"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617763">
            <name>const T</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4616692"/>
            </content>
        </type>
        <type derived="true" id="type.4618418">
            <name>const T</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4616725"/>
            </content>
        </type>
        <type derived="true" id="type.4618391">
            <name>const T</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4616724"/>
            </content>
        </type>
        <type derived="true" id="type.4617425">
            <name>const T</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4616624"/>
            </content>
        </type>
        <type derived="true" id="type.4618445">
            <name>const T</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4616726"/>
            </content>
        </type>
        <type derived="true" id="type.4617736">
            <name>const T</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4616691"/>
            </content>
        </type>
        <type derived="true" id="type.1875">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4606468"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1886">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4606486"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1887">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4606489"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617654">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4616636"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1888">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4606491"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1916">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4606555"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1981">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4606646"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1890">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4606496"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1891">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4606498"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1892">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4606507"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1893">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4606509"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1894">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4606511"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1896">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4606514"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1897">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4606516"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618389">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4616724"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1915">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4606553"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1914">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4606551"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1918">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4606558"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1934">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4606573"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1935">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4606575"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1937">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4606577"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618158">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4616712"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1997">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4606686"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1945">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4606594"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618813">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4616745"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1913">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4606549"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1912">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4606547"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1911">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4606545"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618657">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4616737"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618735">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4616741"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617761">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4616692"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1995">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4606684"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618813">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4616745"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617734">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4616691"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1909">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4606536"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1908">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4606534"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1976">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4606634"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618314">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4616720"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1978">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4606643"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617576">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4616632"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617423">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4616624"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1905">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4606529"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617416">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4616623"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1903">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4606526"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1902">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4606524"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618443">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4616726"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1906">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4606531"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618236">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4616716"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1900">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4606521"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1899">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4606519"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618416">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4616725"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1889">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4606493"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1873">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4606466"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618444">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4616726"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617735">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4616691"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618390">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4616724"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618417">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4616725"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617424">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4616624"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618417">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4616725"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617762">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4616692"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2336">
            <name>const ThreadingException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ThreadingException_4952259FBBDB6BDFCF1A52EABE2C1A61BF601670"/>
            </content>
        </type>
        <type derived="true" id="type.2337">
            <name>const ThreadingException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ThreadingException_4952259FBBDB6BDFCF1A52EABE2C1A61BF601670"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2418">
            <name>const ThrowStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ThrowStatement_6216EF486931E535CE6CDEE33F4D2E7A53BE76B7"/>
            </content>
        </type>
        <type derived="true" id="type.2419">
            <name>const ThrowStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ThrowStatement_6216EF486931E535CE6CDEE33F4D2E7A53BE76B7"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2446">
            <name>const TokenParser</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_TokenParser_319753BA62AEDA94D46A4D47AEE13AEC1B1F3B72"/>
            </content>
        </type>
        <type derived="true" id="type.2447">
            <name>const TokenParser&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_TokenParser_319753BA62AEDA94D46A4D47AEE13AEC1B1F3B72"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2421">
            <name>const TryStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_TryStatement_1132D26D95ED5027A0CFA7B5E46039A7A645EE96"/>
            </content>
        </type>
        <type derived="true" id="type.2422">
            <name>const TryStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_TryStatement_1132D26D95ED5027A0CFA7B5E46039A7A645EE96"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2342">
            <name>const Type</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Type_8616C506F1B48B10568C6F4144C4A41FFB320CF3"/>
            </content>
        </type>
        <type derived="true" id="type.2343">
            <name>const Type&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Type_8616C506F1B48B10568C6F4144C4A41FFB320CF3"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2382">
            <name>const TypeName</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_TypeName_BB4524B12FF73AADA611653B9DE399FFFCEC3BEB"/>
            </content>
        </type>
        <type derived="true" id="type.2383">
            <name>const TypeName&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_TypeName_BB4524B12FF73AADA611653B9DE399FFFCEC3BEB"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1979">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4606644"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1904">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4606527"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1901">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4606522"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1910">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4606537"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1977">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4606635"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1895">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4606512"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1898">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4606517"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1982">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4606647"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1907">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4606532"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618909">
            <name>const UnaryFun&lt;Pair&lt;String&lt;uchar>, JsonValue*>, String&lt;uchar>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617342"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2364">
            <name>const UnaryMinus</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnaryMinus_04009179AAFCB4DEE000972E675D4198E1AF838F"/>
            </content>
        </type>
        <type derived="true" id="type.2365">
            <name>const UnaryMinus&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnaryMinus_04009179AAFCB4DEE000972E675D4198E1AF838F"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2361">
            <name>const UnaryPlus</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnaryPlus_65EA8B4AEC38C5A830F0C46A73800A840EFCF9C2"/>
            </content>
        </type>
        <type derived="true" id="type.2362">
            <name>const UnaryPlus&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnaryPlus_65EA8B4AEC38C5A830F0C46A73800A840EFCF9C2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2340">
            <name>const UnicodeException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnicodeException_F535D36BB8009200467ACEA05819217182306079"/>
            </content>
        </type>
        <type derived="true" id="type.2341">
            <name>const UnicodeException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnicodeException_F535D36BB8009200467ACEA05819217182306079"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617899">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617896"/>
            </content>
        </type>
        <type derived="true" id="type.4618082">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618079"/>
            </content>
        </type>
        <type derived="true" id="type.4618143">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618140"/>
            </content>
        </type>
        <type derived="true" id="type.4617960">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617957"/>
            </content>
        </type>
        <type derived="true" id="type.4618642">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618639"/>
            </content>
        </type>
        <type derived="true" id="type.4617838">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617835"/>
            </content>
        </type>
        <type derived="true" id="type.4618520">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618517"/>
            </content>
        </type>
        <type derived="true" id="type.4618642">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618639"/>
            </content>
        </type>
        <type derived="true" id="type.4617500">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617497"/>
            </content>
        </type>
        <type derived="true" id="type.4618581">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618578"/>
            </content>
        </type>
        <type derived="true" id="type.4617561">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617558"/>
            </content>
        </type>
        <type derived="true" id="type.4618021">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618018"/>
            </content>
        </type>
        <type derived="true" id="type.4618145">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618140"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618522">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618517"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618084">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618079"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618644">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618639"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618583">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618578"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617901">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617896"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617840">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617835"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618023">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618018"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617563">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617558"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617502">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617497"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618644">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618639"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617962">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617957"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618643">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618639"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618144">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618140"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617562">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617558"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618022">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618018"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618582">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618578"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617961">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617957"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618083">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618079"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618643">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618639"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617501">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617497"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618521">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618517"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617839">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617835"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617900">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617896"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617383">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, JsonValue*>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617380"/>
            </content>
        </type>
        <type derived="true" id="type.4617385">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, JsonValue*>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617380"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617384">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;String&lt;uchar>, JsonValue*>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617380"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617412">
            <name>const UniquePtr&lt;System.Json.JsonParser></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617409"/>
            </content>
        </type>
        <type derived="true" id="type.4617414">
            <name>const UniquePtr&lt;System.Json.JsonParser>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617409"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617413">
            <name>const UniquePtr&lt;System.Json.JsonParser>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617409"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617318">
            <name>const UniquePtr&lt;System.Json.JsonValue></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617315"/>
            </content>
        </type>
        <type derived="true" id="type.4617320">
            <name>const UniquePtr&lt;System.Json.JsonValue>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617315"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617319">
            <name>const UniquePtr&lt;System.Json.JsonValue>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4617315"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617914">
            <name>const Value&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4616700"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617454">
            <name>const Value&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4616626"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618535">
            <name>const Value&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4616731"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618596">
            <name>const Value&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4616734"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618474">
            <name>const Value&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4616728"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618097">
            <name>const Value&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4616709"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618036">
            <name>const Value&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4616706"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618596">
            <name>const Value&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4616734"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617515">
            <name>const Value&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4616629"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617975">
            <name>const Value&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4616703"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1958">
            <name>const Value&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4606615"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617853">
            <name>const Value&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4616697"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4617792">
            <name>const Value&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4616694"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4619021">
            <name>const ValueObject&lt;JsonArray*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4619018"/>
            </content>
        </type>
        <type derived="true" id="type.4619023">
            <name>const ValueObject&lt;JsonArray*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4619018"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4619022">
            <name>const ValueObject&lt;JsonArray*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4619018"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4619002">
            <name>const ValueObject&lt;JsonNumber*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618999"/>
            </content>
        </type>
        <type derived="true" id="type.4619004">
            <name>const ValueObject&lt;JsonNumber*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618999"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4619003">
            <name>const ValueObject&lt;JsonNumber*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618999"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4619011">
            <name>const ValueObject&lt;JsonObject*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4619008"/>
            </content>
        </type>
        <type derived="true" id="type.4619013">
            <name>const ValueObject&lt;JsonObject*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4619008"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4619012">
            <name>const ValueObject&lt;JsonObject*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4619008"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618993">
            <name>const ValueObject&lt;JsonString*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618990"/>
            </content>
        </type>
        <type derived="true" id="type.4618995">
            <name>const ValueObject&lt;JsonString*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618990"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618994">
            <name>const ValueObject&lt;JsonString*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618990"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618981">
            <name>const ValueObject&lt;JsonValue*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618978"/>
            </content>
        </type>
        <type derived="true" id="type.4618983">
            <name>const ValueObject&lt;JsonValue*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618978"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618982">
            <name>const ValueObject&lt;JsonValue*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4618978"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2212">
            <name>const ValueType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="4614118"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2246">
            <name>const double&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4605940"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2244">
            <name>const float&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4605939"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2233">
            <name>const sbyte&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4605931"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2236">
            <name>const short&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4605933"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2451">
            <name>const stdlib</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_stdlib_C45D8720A0EE8749F9E55E6402CA85D0B654A981"/>
            </content>
        </type>
        <type derived="true" id="type.2452">
            <name>const stdlib&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_stdlib_C45D8720A0EE8749F9E55E6402CA85D0B654A981"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4607149">
            <name>const uchar*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4605943"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2238">
            <name>const ushort&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4605934"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type basic="true" id="type.4605940">
            <name>double</name>
        </type>
        <type derived="true" id="type.4605977">
            <name>double&amp;</name>
            <content>
                <baseType ref="type.4605940"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type basic="true" id="type.4605939">
            <name>float</name>
        </type>
        <type derived="true" id="type.4605962">
            <name>int&amp;</name>
            <content>
                <baseType ref="type.4605935"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type basic="true" id="type.4605937">
            <name>long</name>
        </type>
        <type basic="true" id="type.4605931">
            <name>sbyte</name>
        </type>
        <type basic="true" id="type.4605933">
            <name>short</name>
        </type>
        <type derived="true" id="type.2453">
            <name>stdlib&amp;&amp;</name>
            <content>
                <baseType ref="class_stdlib_C45D8720A0EE8749F9E55E6402CA85D0B654A981"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type basic="true" id="type.4605943">
            <name>uchar</name>
        </type>
        <type derived="true" id="type.4605986">
            <name>uchar&amp;</name>
            <content>
                <baseType ref="type.4605943"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4605985">
            <name>uchar*</name>
            <content>
                <baseType ref="type.4605943"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.4605936">
            <name>uint</name>
        </type>
        <type derived="true" id="type.4605965">
            <name>uint&amp;</name>
            <content>
                <baseType ref="type.4605936"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4605964">
            <name>uint*</name>
            <content>
                <baseType ref="type.4605936"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.4605938">
            <name>ulong</name>
        </type>
        <type derived="true" id="type.4605971">
            <name>ulong&amp;</name>
            <content>
                <baseType ref="type.4605938"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4605970">
            <name>ulong*</name>
            <content>
                <baseType ref="type.4605938"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.4605934">
            <name>ushort</name>
        </type>
        <type basic="true" id="type.4605942">
            <name>wchar</name>
        </type>
        <type derived="true" id="type.4605983">
            <name>wchar&amp;</name>
            <content>
                <baseType ref="type.4605942"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4605982">
            <name>wchar*</name>
            <content>
                <baseType ref="type.4605942"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4618886">
            <name>wchar*&amp;&amp;</name>
            <content>
                <baseType ref="type.4605942"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
    </types>
</library>
