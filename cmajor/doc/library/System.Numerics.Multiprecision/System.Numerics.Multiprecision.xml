<library>
    <name>System.Numerics.Multiprecision</name>
    <style>../../style/cmdoc.css</style>
    <namespaces>
        <namespace id="System.Numerics.Multiprecision">
            <name>System.Numerics.Multiprecision</name>
            <classes>
                <class id="class_BigFloat_BC19EFB82C8E666524B4436C56800B572EFBED53">
                    <name>BigFloat</name>
                    <groupName>BigFloat</groupName>
                    <syntax> public class BigFloat;</syntax>
                    <constructors>
                        <constructor id="default_constructor_BigFloat_93627EDCE150FB0E6A3C69E270EF5A3D78CD4E6F">
                            <name>BigFloat()</name>
                            <syntax>public nothrow BigFloat();</syntax>
                        </constructor>
                        <constructor id="move_constructor_BigFloat_6C11CE3B5E6C96920B4295869E868C328BB6D3B2">
                            <name>BigFloat(BigFloat&amp;&amp; that)</name>
                            <syntax>public nothrow BigFloat(BigFloat&amp;&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.9348718"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="copy_constructor_BigFloat_1F61E552E17087EA5A54972F8181244E0EC960CF">
                            <name>BigFloat(const BigFloat&amp; that)</name>
                            <syntax>public nothrow BigFloat(const BigFloat&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.9348341"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_BigFloat_20895834C351E98079E7C3115BA0027A051253EB">
                            <name>BigFloat(const BigInt&amp; that)</name>
                            <syntax>public nothrow BigFloat(const BigInt&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.9348347"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_BigFloat_8AA5B0FEA3020B51F51CAD27CD80369E60DE1D88">
                            <name>BigFloat(const BigRational&amp; that)</name>
                            <syntax>public nothrow BigFloat(const BigRational&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.9348353"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_BigFloat_5A7F5845E5B2EAEA0A1C2C67115107E0DABA1A8E">
                            <name>BigFloat(const Precision&amp; prec)</name>
                            <syntax>public nothrow explicit BigFloat(const Precision&amp; prec);</syntax>
                            <parameters>
                                <parameter>
                                    <name>prec</name>
                                    <type ref="type.9348335"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_BigFloat_4617CA97E98F7F68740CF339DAF91D915CFA2650">
                            <name>BigFloat(const String&lt;char>&amp; str)</name>
                            <syntax>public BigFloat(const String&lt;char>&amp; str);</syntax>
                            <parameters>
                                <parameter>
                                    <name>str</name>
                                    <type ref="type.9330323"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_BigFloat_3E12EF7782C96A5646F5EC50B60048654D688D9D">
                            <name>BigFloat(const String&lt;char>&amp; str, int base_)</name>
                            <syntax>public BigFloat(const String&lt;char>&amp; str, int base_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>str</name>
                                    <type ref="type.9330323"/>
                                </parameter>
                                <parameter>
                                    <name>base_</name>
                                    <type ref="type.9329182"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_BigFloat_BEC5259CEA939F27B59F690ADEDAFEBC9F1A4D0C">
                            <name>BigFloat(double that)</name>
                            <syntax>public nothrow BigFloat(double that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.9329187"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_BigFloat_B46E7D1133D4E6EC69CB7B5C4480C9D7E7D48468">
                            <name>BigFloat(int that)</name>
                            <syntax>public nothrow BigFloat(int that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.9329182"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_BigFloat_DE636A2776098C7E40417E72AE67777028E701F6">
                            <name>BigFloat(uint that)</name>
                            <syntax>public nothrow BigFloat(uint that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.9329183"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Handle_BigFloat_1417D6A5E5040218CC579E251EBA879B3ACEC024">
                            <name>Handle() const</name>
                            <syntax>public nothrow inline void* Handle() const;</syntax>
                            <returnType ref="type.9329329"/>
                        </function>
                        <function id="member_function_ToDouble_BigFloat_1C528A9567BA04A0264BEC604E7E9DD032674542">
                            <name>ToDouble() const</name>
                            <syntax>public nothrow double ToDouble() const;</syntax>
                            <returnType ref="type.9329187"/>
                        </function>
                        <function id="function_group_ToString_98B3EC27F057E3D2072BD8DC2D98473F5EB390FC">
                            <name>ToString</name>
                            <overloads>
                                <overload id="member_function_ToString_BigFloat_E30E31DC5EF5F17B9EDD35EC0A11B2469C3A9A0D">
                                    <name>ToString() const</name>
                                    <syntax>public nothrow String&lt;char> ToString() const;</syntax>
                                    <returnType ref="type.9330318"/>
                                </overload>
                                <overload id="member_function_ToString_BigFloat_1BFFE7FC67796F2BDA21FC70B9104876FD447ED6">
                                    <name>ToString(int base_) const</name>
                                    <syntax>public nothrow String&lt;char> ToString(int base_) const;</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>base_</name>
                                            <type ref="type.9329182"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.9330318"/>
                                </overload>
                                <overload id="member_function_ToString_BigFloat_2BC083E6A179B017E555D529F1DDCC3938B1C187">
                                    <name>ToString(int base_, uint numDigits) const</name>
                                    <syntax>public nothrow String&lt;char> ToString(int base_, uint numDigits) const;</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>base_</name>
                                            <type ref="type.9329182"/>
                                        </parameter>
                                        <parameter>
                                            <name>numDigits</name>
                                            <type ref="type.9329183"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.9330318"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_op_assign_B5A5FD837F72256AA73DDCB97ADD390F0292332C">
                            <name>operator=</name>
                            <overloads>
                                <overload id="move_assignment_op_assign_BigFloat_9E1BAB4E59CBA74BB30C7567FE9DB4179CE93CF2">
                                    <name>operator=(BigFloat&amp;&amp; @p0)</name>
                                    <syntax>public nothrow default void operator=(BigFloat&amp;&amp; @p0);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>@p0</name>
                                            <type ref="type.9348718"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="copy_assignment_op_assign_BigFloat_FAA70BA19A4265F69079DAC0E86B66977549000C">
                                    <name>operator=(const BigFloat&amp; that)</name>
                                    <syntax>public nothrow void operator=(const BigFloat&amp; that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.9348341"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_op_assign_BigFloat_53494148E45592ED0A47D64E9A68FCC15C31ACB5">
                                    <name>operator=(const BigInt&amp; that)</name>
                                    <syntax>public nothrow void operator=(const BigInt&amp; that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.9348347"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_op_assign_BigFloat_1F87ED7CF5B22797AE35DD8844B35540FF78BFCC">
                                    <name>operator=(const BigRational&amp; that)</name>
                                    <syntax>public nothrow void operator=(const BigRational&amp; that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.9348353"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_op_assign_BigFloat_072C568232242F7C22BEC668D93A3B33782D2F09">
                                    <name>operator=(double that)</name>
                                    <syntax>public nothrow void operator=(double that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.9329187"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_op_assign_BigFloat_4F1B356E056A725F9F8DD930B7D832036107EF1F">
                                    <name>operator=(int that)</name>
                                    <syntax>public nothrow void operator=(int that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.9329182"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_op_assign_BigFloat_59BCB3563F5BF847BFD4B3FE6D5D72F826C9294F">
                                    <name>operator=(uint that)</name>
                                    <syntax>public nothrow void operator=(uint that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.9329183"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                    </functions>
                </class>
                <class id="class_BigFloatDefaultPrecisionSetter_CB4ACD3C0708237EDA437E4EAEBD18268C65BDFB">
                    <name>BigFloatDefaultPrecisionSetter</name>
                    <groupName>BigFloatDefaultPrecisionSetter</groupName>
                    <syntax> public static class BigFloatDefaultPrecisionSetter;</syntax>
                    <staticMemberFunctions>
                        <function id="member_function_Init_BigFloatDefaultPrecisionSetter_466501FD7806CCA3447F4EAC73B22A8C51582068">
                            <name>Init()</name>
                            <syntax>public static nothrow void Init();</syntax>
                        </function>
                    </staticMemberFunctions>
                </class>
                <class id="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0">
                    <name>BigInt</name>
                    <groupName>BigInt</groupName>
                    <syntax> public class BigInt;</syntax>
                    <constructors>
                        <constructor id="default_constructor_BigInt_F0D8CC45932E09FAA2EB14A8B64247F39C1EFFB7">
                            <name>BigInt()</name>
                            <syntax>public nothrow BigInt();</syntax>
                        </constructor>
                        <constructor id="move_constructor_BigInt_D09987D7C430C2B3B3453A653FBAC4415D47F81A">
                            <name>BigInt(BigInt&amp;&amp; that)</name>
                            <syntax>public nothrow BigInt(BigInt&amp;&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.9348719"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="copy_constructor_BigInt_FEDC121C2BA0FAF385677CE5CDF2167A78328312">
                            <name>BigInt(const BigInt&amp; that)</name>
                            <syntax>public nothrow BigInt(const BigInt&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.9348347"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_BigInt_B88EFB5B832B57059DB131C18BB6F5EE8DF4483D">
                            <name>BigInt(const String&lt;char>&amp; str)</name>
                            <syntax>public BigInt(const String&lt;char>&amp; str);</syntax>
                            <parameters>
                                <parameter>
                                    <name>str</name>
                                    <type ref="type.9330323"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_BigInt_F81F5A54F2CD3D6F05A0021F721AB3FA30AAE086">
                            <name>BigInt(const String&lt;char>&amp; str, int base_)</name>
                            <syntax>public BigInt(const String&lt;char>&amp; str, int base_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>str</name>
                                    <type ref="type.9330323"/>
                                </parameter>
                                <parameter>
                                    <name>base_</name>
                                    <type ref="type.9329182"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_BigInt_47A90AE6B6DCC8EA1BFDBFD2D18FAB80E68E02CE">
                            <name>BigInt(int that)</name>
                            <syntax>public nothrow BigInt(int that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.9329182"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_BigInt_4F93C9E2AA2CF328A1038B63471043F3B6916D4F">
                            <name>BigInt(uint that)</name>
                            <syntax>public nothrow BigInt(uint that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.9329183"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Handle_BigInt_BBA7C4AD8C6B37F828A4EE438EAE4366E13D0BBA">
                            <name>Handle() const</name>
                            <syntax>public nothrow inline void* Handle() const;</syntax>
                            <returnType ref="type.9329329"/>
                        </function>
                        <function id="function_group_ToString_38A1AA35A0463572A5F37530342D49BF3F84209A">
                            <name>ToString</name>
                            <overloads>
                                <overload id="member_function_ToString_BigInt_81B193B60976E09DD78E3CF9D244111E98198646">
                                    <name>ToString() const</name>
                                    <syntax>public nothrow String&lt;char> ToString() const;</syntax>
                                    <returnType ref="type.9330318"/>
                                </overload>
                                <overload id="member_function_ToString_BigInt_EF2C39166B714AD2A345836EA019462E561BBFFE">
                                    <name>ToString(int base_) const</name>
                                    <syntax>public nothrow String&lt;char> ToString(int base_) const;</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>base_</name>
                                            <type ref="type.9329182"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.9330318"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_op_assign_70E1728FD2D77DE93BCD772643DC644EA2344232">
                            <name>operator=</name>
                            <overloads>
                                <overload id="move_assignment_op_assign_BigInt_DC3FCEAE0B510623A25F20290991267D0226D4B4">
                                    <name>operator=(BigInt&amp;&amp; that)</name>
                                    <syntax>public nothrow default void operator=(BigInt&amp;&amp; that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.9348719"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="copy_assignment_op_assign_BigInt_D8618CCF9748BC2CD1F5A48DDF578A1FEA88EBF2">
                                    <name>operator=(const BigInt&amp; that)</name>
                                    <syntax>public nothrow void operator=(const BigInt&amp; that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.9348347"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_op_assign_BigInt_4D6E717A2215A11ADBF322A17C7AD5877511C50E">
                                    <name>operator=(int that)</name>
                                    <syntax>public nothrow void operator=(int that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.9329182"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_op_assign_BigInt_BE9829921A6677F81143E1F1F4BDFE371F966ADD">
                                    <name>operator=(uint that)</name>
                                    <syntax>public nothrow void operator=(uint that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.9329183"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                    </functions>
                </class>
                <class id="class_BigRational_0F62DE7516E5ADB5CE79939E2167456710EF7B23">
                    <name>BigRational</name>
                    <groupName>BigRational</groupName>
                    <syntax> public class BigRational;</syntax>
                    <constructors>
                        <constructor id="default_constructor_BigRational_9DE79FAB17EB1D58E27ED82452FF005E17024137">
                            <name>BigRational()</name>
                            <syntax>public nothrow BigRational();</syntax>
                        </constructor>
                        <constructor id="move_constructor_BigRational_97DF5234EF8EC351D955461A3927AF0904CEDEED">
                            <name>BigRational(BigRational&amp;&amp; that)</name>
                            <syntax>public nothrow BigRational(BigRational&amp;&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.9348720"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_BigRational_E10112D5054C49BE989E0D6579FD11A918622AF4">
                            <name>BigRational(const BigInt&amp; that)</name>
                            <syntax>public nothrow BigRational(const BigInt&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.9348347"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="copy_constructor_BigRational_EAFD5EE0FD87C90EDECAF123753D4E73D6AAE6A9">
                            <name>BigRational(const BigRational&amp; that)</name>
                            <syntax>public nothrow BigRational(const BigRational&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.9348353"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_BigRational_0B966659253AAA93D4984CCD6043717020B06C7F">
                            <name>BigRational(const String&lt;char>&amp; str)</name>
                            <syntax>public BigRational(const String&lt;char>&amp; str);</syntax>
                            <parameters>
                                <parameter>
                                    <name>str</name>
                                    <type ref="type.9330323"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_BigRational_D417EECACBCE9AB213A03F148A45A2587D2C3EDC">
                            <name>BigRational(const String&lt;char>&amp; str, int base_)</name>
                            <syntax>public BigRational(const String&lt;char>&amp; str, int base_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>str</name>
                                    <type ref="type.9330323"/>
                                </parameter>
                                <parameter>
                                    <name>base_</name>
                                    <type ref="type.9329182"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_BigRational_27F63093542FAAB786B5194C678BA4BC3B10821F">
                            <name>BigRational(int that)</name>
                            <syntax>public nothrow BigRational(int that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.9329182"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_BigRational_E54905588F1D534D060391B3F51005BDAFE376B6">
                            <name>BigRational(uint that)</name>
                            <syntax>public nothrow BigRational(uint that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.9329183"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Denominator_BigRational_93F785422587940FDBD8744DDE8EDB3BEC34E9AE">
                            <name>Denominator() const</name>
                            <syntax>public nothrow BigInt Denominator() const;</syntax>
                            <returnType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
                        </function>
                        <function id="member_function_Handle_BigRational_4B4A4C010B5C73524D802A8358AF857B3C7E2041">
                            <name>Handle() const</name>
                            <syntax>public nothrow inline void* Handle() const;</syntax>
                            <returnType ref="type.9329329"/>
                        </function>
                        <function id="member_function_Numerator_BigRational_57AA95ECA704B7D02CAF2FAEC1107D71860712C0">
                            <name>Numerator() const</name>
                            <syntax>public nothrow BigInt Numerator() const;</syntax>
                            <returnType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
                        </function>
                        <function id="function_group_ToString_9081DE02019B34FDFB3C2AA6156C9E659D88201A">
                            <name>ToString</name>
                            <overloads>
                                <overload id="member_function_ToString_BigRational_C879483567FBA605CCF5B9D89C48D75497225E2B">
                                    <name>ToString() const</name>
                                    <syntax>public nothrow String&lt;char> ToString() const;</syntax>
                                    <returnType ref="type.9330318"/>
                                </overload>
                                <overload id="member_function_ToString_BigRational_52226403A912990BB98B1186A02D3B508FE205A8">
                                    <name>ToString(int base_) const</name>
                                    <syntax>public nothrow String&lt;char> ToString(int base_) const;</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>base_</name>
                                            <type ref="type.9329182"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.9330318"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_op_assign_75227836E1BEB739B20F4AF2446D905A62609D07">
                            <name>operator=</name>
                            <overloads>
                                <overload id="move_assignment_op_assign_BigRational_F40F9BE8C7C6FEF21E9226ADE79E7DFCB64FCDDF">
                                    <name>operator=(BigRational&amp;&amp; that)</name>
                                    <syntax>public nothrow default void operator=(BigRational&amp;&amp; that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.9348720"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="copy_assignment_op_assign_BigRational_A1C2A56E36337DD74601196A898C79636CEA6AB3">
                                    <name>operator=(const BigRational&amp; that)</name>
                                    <syntax>public nothrow void operator=(const BigRational&amp; that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.9348353"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                    </functions>
                </class>
                <class id="class_Precision_9DAFEB710FD18878097281A53A7F8764341F0B2A">
                    <name>Precision</name>
                    <groupName>Precision</groupName>
                    <syntax> public class Precision;</syntax>
                    <constructors>
                        <constructor id="default_constructor_Precision_A108FFE15EB702D0AD136DEC7FDAE68F99EA056A">
                            <name>Precision()</name>
                            <syntax>public nothrow Precision();</syntax>
                        </constructor>
                        <constructor id="constructor_Precision_84AC8A34F35EE7259416A6E9DB6CDF22FFE47A09">
                            <name>Precision(uint prec_)</name>
                            <syntax>public nothrow explicit Precision(uint prec_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>prec_</name>
                                    <type ref="type.9329183"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_ToUInt_Precision_A1E388CD72EA93FEF3914CFC6942F83536BFF323">
                            <name>ToUInt() const</name>
                            <syntax>public nothrow uint ToUInt() const;</syntax>
                            <returnType ref="type.9329183"/>
                        </function>
                    </functions>
                </class>
            </classes>
            <functions>
                <function id="function_group_Abs_E4CE68D81FB8D5B1A65D79ED0BA7D4358D27A208">
                    <name>Abs</name>
                    <overloads>
                        <overload id="function_Abs_7AF65AE95722C52CB1ADD3B39BA32D2C508E3BE3">
                            <name>Abs(const BigFloat&amp; x)</name>
                            <syntax>public nothrow BigFloat Abs(const BigFloat&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.9348341"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_BigFloat_BC19EFB82C8E666524B4436C56800B572EFBED53"/>
                        </overload>
                        <overload id="function_Abs_F9EBD9B5E297B955626D9D7627866DF6D574D01D">
                            <name>Abs(const BigInt&amp; x)</name>
                            <syntax>public nothrow BigInt Abs(const BigInt&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.9348347"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
                        </overload>
                        <overload id="function_Abs_75D9575092CEFB070B30DCC89DB9675A48C75450">
                            <name>Abs(const BigRational&amp; x)</name>
                            <syntax>public nothrow BigRational Abs(const BigRational&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.9348353"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_BigRational_0F62DE7516E5ADB5CE79939E2167456710EF7B23"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_Ceil_C817E559F2C738FBD22975B3D10B9290702092FA">
                    <name>Ceil(const BigFloat&amp; x)</name>
                    <syntax>public nothrow BigFloat Ceil(const BigFloat&amp; x);</syntax>
                    <parameters>
                        <parameter>
                            <name>x</name>
                            <type ref="type.9348341"/>
                        </parameter>
                    </parameters>
                    <returnType ref="class_BigFloat_BC19EFB82C8E666524B4436C56800B572EFBED53"/>
                </function>
                <function id="function_ClearBit_5D06E02EC012493FA5CF446EFCA8D186C858AD3C">
                    <name>ClearBit(BigInt&amp; x, uint bitIndex)</name>
                    <syntax>public nothrow void ClearBit(BigInt&amp; x, uint bitIndex);</syntax>
                    <parameters>
                        <parameter>
                            <name>x</name>
                            <type ref="type.9348344"/>
                        </parameter>
                        <parameter>
                            <name>bitIndex</name>
                            <type ref="type.9329183"/>
                        </parameter>
                    </parameters>
                </function>
                <function id="function_Floor_8415F06A552A52B7B001DF605E48DC8A5E763A0E">
                    <name>Floor(const BigFloat&amp; x)</name>
                    <syntax>public nothrow BigFloat Floor(const BigFloat&amp; x);</syntax>
                    <parameters>
                        <parameter>
                            <name>x</name>
                            <type ref="type.9348341"/>
                        </parameter>
                    </parameters>
                    <returnType ref="class_BigFloat_BC19EFB82C8E666524B4436C56800B572EFBED53"/>
                </function>
                <function id="function_GetBigFloatDefaultPrecision_483AC84D8899A5A9226693C3E387D31527352A29">
                    <name>GetBigFloatDefaultPrecision()</name>
                    <syntax>public nothrow uint GetBigFloatDefaultPrecision();</syntax>
                    <returnType ref="type.9329183"/>
                </function>
                <function id="function_SetBit_89FDAEFA3B0863EB2A94108DC13944EB3C66F06E">
                    <name>SetBit(BigInt&amp; x, uint bitIndex)</name>
                    <syntax>public nothrow void SetBit(BigInt&amp; x, uint bitIndex);</syntax>
                    <parameters>
                        <parameter>
                            <name>x</name>
                            <type ref="type.9348344"/>
                        </parameter>
                        <parameter>
                            <name>bitIndex</name>
                            <type ref="type.9329183"/>
                        </parameter>
                    </parameters>
                </function>
                <function id="function_Sqrt_1255F3C4594C8479BD9B55E746F127A4B215C584">
                    <name>Sqrt(const BigFloat&amp; x)</name>
                    <syntax>public nothrow BigFloat Sqrt(const BigFloat&amp; x);</syntax>
                    <parameters>
                        <parameter>
                            <name>x</name>
                            <type ref="type.9348341"/>
                        </parameter>
                    </parameters>
                    <returnType ref="class_BigFloat_BC19EFB82C8E666524B4436C56800B572EFBED53"/>
                </function>
                <function id="function_TestBit_38E54EA4251112CCB31E9E78644C86EEDBCF29C5">
                    <name>TestBit(BigInt&amp; x, uint bitIndex)</name>
                    <syntax>public nothrow bool TestBit(BigInt&amp; x, uint bitIndex);</syntax>
                    <parameters>
                        <parameter>
                            <name>x</name>
                            <type ref="type.9348344"/>
                        </parameter>
                        <parameter>
                            <name>bitIndex</name>
                            <type ref="type.9329183"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.9329177"/>
                </function>
                <function id="function_ToggleBit_2866B63CAB922D367955045744679F9D06F71EB7">
                    <name>ToggleBit(BigInt&amp; x, uint bitIndex)</name>
                    <syntax>public nothrow void ToggleBit(BigInt&amp; x, uint bitIndex);</syntax>
                    <parameters>
                        <parameter>
                            <name>x</name>
                            <type ref="type.9348344"/>
                        </parameter>
                        <parameter>
                            <name>bitIndex</name>
                            <type ref="type.9329183"/>
                        </parameter>
                    </parameters>
                </function>
                <function id="function_Trunc_8A007277928B2C2F16C0FA3DB750A307F2F61A88">
                    <name>Trunc(const BigFloat&amp; x)</name>
                    <syntax>public nothrow BigFloat Trunc(const BigFloat&amp; x);</syntax>
                    <parameters>
                        <parameter>
                            <name>x</name>
                            <type ref="type.9348341"/>
                        </parameter>
                    </parameters>
                    <returnType ref="class_BigFloat_BC19EFB82C8E666524B4436C56800B572EFBED53"/>
                </function>
                <function id="function_op_rem_2B0C09A64E292F4D12091D04EDC86AC780DDAB5D">
                    <name>operator%(const BigInt&amp; left, const BigInt&amp; right)</name>
                    <syntax>public nothrow BigInt operator%(const BigInt&amp; left, const BigInt&amp; right);</syntax>
                    <parameters>
                        <parameter>
                            <name>left</name>
                            <type ref="type.9348347"/>
                        </parameter>
                        <parameter>
                            <name>right</name>
                            <type ref="type.9348347"/>
                        </parameter>
                    </parameters>
                    <returnType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
                </function>
                <function id="function_op_and_EC306043569A570820AF0BD9C636E5A9BA3C6C57">
                    <name>operator&amp;(const BigInt&amp; left, const BigInt&amp; right)</name>
                    <syntax>public nothrow BigInt operator&amp;(const BigInt&amp; left, const BigInt&amp; right);</syntax>
                    <parameters>
                        <parameter>
                            <name>left</name>
                            <type ref="type.9348347"/>
                        </parameter>
                        <parameter>
                            <name>right</name>
                            <type ref="type.9348347"/>
                        </parameter>
                    </parameters>
                    <returnType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
                </function>
                <function id="function_group_op_star_33CA2CCCC406AC14ACB6EE8CAAD649263ABEB595">
                    <name>operator*</name>
                    <overloads>
                        <overload id="function_op_star_29C14CA47F9DE49F712F4A8398692392678764D4">
                            <name>operator*(const BigFloat&amp; left, const BigFloat&amp; right)</name>
                            <syntax>public nothrow BigFloat operator*(const BigFloat&amp; left, const BigFloat&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.9348341"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.9348341"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_BigFloat_BC19EFB82C8E666524B4436C56800B572EFBED53"/>
                        </overload>
                        <overload id="function_op_star_7DA2D996E7725DD3B92C7D39EC7BDA80ECDF1B20">
                            <name>operator*(const BigInt&amp; left, const BigInt&amp; right)</name>
                            <syntax>public nothrow BigInt operator*(const BigInt&amp; left, const BigInt&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.9348347"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.9348347"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
                        </overload>
                        <overload id="function_op_star_B61A03E02FC293D628B81BF2CFBCEA30521DBB65">
                            <name>operator*(const BigRational&amp; left, const BigRational&amp; right)</name>
                            <syntax>public nothrow BigRational operator*(const BigRational&amp; left, const BigRational&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.9348353"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.9348353"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_BigRational_0F62DE7516E5ADB5CE79939E2167456710EF7B23"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_op_plus_56A27315B56A578F0EF8630C0FF9385E5BE979DC">
                    <name>operator+</name>
                    <overloads>
                        <overload id="function_op_plus_D93C682747818BA5D9D7B791D111D1101439A5DB">
                            <name>operator+(const BigFloat&amp; left, const BigFloat&amp; right)</name>
                            <syntax>public nothrow BigFloat operator+(const BigFloat&amp; left, const BigFloat&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.9348341"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.9348341"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_BigFloat_BC19EFB82C8E666524B4436C56800B572EFBED53"/>
                        </overload>
                        <overload id="function_op_plus_EA427371E605518798A3E8A1CAEBF51E53B30955">
                            <name>operator+(const BigInt&amp; left, const BigInt&amp; right)</name>
                            <syntax>public nothrow BigInt operator+(const BigInt&amp; left, const BigInt&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.9348347"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.9348347"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
                        </overload>
                        <overload id="function_op_plus_A05F8F6C489F7EFA03E4A3417E50D280E85B48A0">
                            <name>operator+(const BigRational&amp; left, const BigRational&amp; right)</name>
                            <syntax>public nothrow BigRational operator+(const BigRational&amp; left, const BigRational&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.9348353"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.9348353"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_BigRational_0F62DE7516E5ADB5CE79939E2167456710EF7B23"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_op_minus_332A4C7FC57A2990CF94BAAD11CCFC1B616D7B46">
                    <name>operator-</name>
                    <overloads>
                        <overload id="function_op_minus_99C9221D98E252F2FCE33A60D0BDFC137C8C0FE9">
                            <name>operator-(const BigFloat&amp; left, const BigFloat&amp; right)</name>
                            <syntax>public nothrow BigFloat operator-(const BigFloat&amp; left, const BigFloat&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.9348341"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.9348341"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_BigFloat_BC19EFB82C8E666524B4436C56800B572EFBED53"/>
                        </overload>
                        <overload id="function_op_minus_CEEA9BCD92DBE119988EB64738734AE80E018FB5">
                            <name>operator-(const BigFloat&amp; x)</name>
                            <syntax>public nothrow BigFloat operator-(const BigFloat&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.9348341"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_BigFloat_BC19EFB82C8E666524B4436C56800B572EFBED53"/>
                        </overload>
                        <overload id="function_op_minus_2C757867007F6B36E4D047F5BE1D206AD00774C1">
                            <name>operator-(const BigInt&amp; left, const BigInt&amp; right)</name>
                            <syntax>public nothrow BigInt operator-(const BigInt&amp; left, const BigInt&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.9348347"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.9348347"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
                        </overload>
                        <overload id="function_op_minus_2D312A4E8EA0F7FCFAB262227D11E8CABEB9ED3D">
                            <name>operator-(const BigInt&amp; x)</name>
                            <syntax>public nothrow BigInt operator-(const BigInt&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.9348347"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
                        </overload>
                        <overload id="function_op_minus_C7AB9CC4A7F3B11D26791CE549EC58B79FAE4B39">
                            <name>operator-(const BigRational&amp; left, const BigRational&amp; right)</name>
                            <syntax>public nothrow BigRational operator-(const BigRational&amp; left, const BigRational&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.9348353"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.9348353"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_BigRational_0F62DE7516E5ADB5CE79939E2167456710EF7B23"/>
                        </overload>
                        <overload id="function_op_minus_966229DDAD79D88421205EABD24D495B8C62DEB2">
                            <name>operator-(const BigRational&amp; x)</name>
                            <syntax>public nothrow BigRational operator-(const BigRational&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.9348353"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_BigRational_0F62DE7516E5ADB5CE79939E2167456710EF7B23"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_op_div_4362D23971F70C9242138FDD0E5E82AAED15E5A4">
                    <name>operator/</name>
                    <overloads>
                        <overload id="function_op_div_50F27EF62AF5344792B487CCC0274A0D11DD77F9">
                            <name>operator/(const BigFloat&amp; left, const BigFloat&amp; right)</name>
                            <syntax>public nothrow BigFloat operator/(const BigFloat&amp; left, const BigFloat&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.9348341"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.9348341"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_BigFloat_BC19EFB82C8E666524B4436C56800B572EFBED53"/>
                        </overload>
                        <overload id="function_op_div_0181C3610D16D6998B08782D86642594FC778E36">
                            <name>operator/(const BigInt&amp; left, const BigInt&amp; right)</name>
                            <syntax>public nothrow BigInt operator/(const BigInt&amp; left, const BigInt&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.9348347"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.9348347"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
                        </overload>
                        <overload id="function_op_div_E24C6253EDE268977AB8DBF1085636DBCB4D26E8">
                            <name>operator/(const BigRational&amp; left, const BigRational&amp; right)</name>
                            <syntax>public nothrow BigRational operator/(const BigRational&amp; left, const BigRational&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.9348353"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.9348353"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_BigRational_0F62DE7516E5ADB5CE79939E2167456710EF7B23"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_op_less_01AD50632F343E948CAE58C5DED9091EFC0C8AFF">
                    <name>operator&lt;</name>
                    <overloads>
                        <overload id="function_op_less_778CB342C328F87381B0D038924CC6DCD7C1C65F">
                            <name>operator&lt;(const BigFloat&amp; left, const BigFloat&amp; right)</name>
                            <syntax>public nothrow bool operator&lt;(const BigFloat&amp; left, const BigFloat&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.9348341"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.9348341"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.9329177"/>
                        </overload>
                        <overload id="function_op_less_D4F7C5613F8286585A8FAE55078BF3A240CDCDF7">
                            <name>operator&lt;(const BigInt&amp; left, const BigInt&amp; right)</name>
                            <syntax>public nothrow bool operator&lt;(const BigInt&amp; left, const BigInt&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.9348347"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.9348347"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.9329177"/>
                        </overload>
                        <overload id="function_op_less_C3A452199911B0C014169BE00A05B55C2D11A932">
                            <name>operator&lt;(const BigRational&amp; left, const BigRational&amp; right)</name>
                            <syntax>public nothrow bool operator&lt;(const BigRational&amp; left, const BigRational&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.9348353"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.9348353"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.9329177"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_op_shl_2AE956980431DA753E03C4D98C544C64D5AACC77">
                    <name>operator&lt;&lt;</name>
                    <overloads>
                        <overload id="function_op_shl_51185FE91502A20F8199DAAD31F12942792BC6BC">
                            <name>operator&lt;&lt;(OutputStream&amp; s, const BigFloat&amp; x)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, const BigFloat&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.9329994"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.9348341"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.9329994"/>
                        </overload>
                        <overload id="function_op_shl_36B833FDDF2C3535DD58C4EEB2E2F244C32CD4FA">
                            <name>operator&lt;&lt;(OutputStream&amp; s, const BigInt&amp; x)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, const BigInt&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.9329994"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.9348347"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.9329994"/>
                        </overload>
                        <overload id="function_op_shl_265F8C16A6D2F9F29E0FAC407B092302F6995376">
                            <name>operator&lt;&lt;(OutputStream&amp; s, const BigRational&amp; x)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, const BigRational&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.9329994"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.9348353"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.9329994"/>
                        </overload>
                        <overload id="function_op_shl_5109EA5D117645C4982C3975B51A22B43196BDCD">
                            <name>operator&lt;&lt;(StreamWriter&amp; s, const BigInt&amp; x)</name>
                            <syntax>public StreamWriter&amp; operator&lt;&lt;(StreamWriter&amp; s, const BigInt&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.9330006"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.9348347"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.9330006"/>
                        </overload>
                        <overload id="function_op_shl_92BC67114039AB5A6F50E1330AB0576CE0DAFDE8">
                            <name>operator&lt;&lt;(StreamWriter&amp; writer, const BigFloat&amp; x)</name>
                            <syntax>public StreamWriter&amp; operator&lt;&lt;(StreamWriter&amp; writer, const BigFloat&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>writer</name>
                                    <type ref="type.9330006"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.9348341"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.9330006"/>
                        </overload>
                        <overload id="function_op_shl_4FE83EF354E708B1200569E34B607CEB52DA7483">
                            <name>operator&lt;&lt;(StreamWriter&amp; writer, const BigRational&amp; x)</name>
                            <syntax>public StreamWriter&amp; operator&lt;&lt;(StreamWriter&amp; writer, const BigRational&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>writer</name>
                                    <type ref="type.9330006"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.9348353"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.9330006"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_op_eq_E07C6E6EC42CC7A6F491A21ED683ACA7A96D3E15">
                    <name>operator==</name>
                    <overloads>
                        <overload id="function_op_eq_F89F98C7BCDAE1EA7E60CAAE44411BF33A6FF57E">
                            <name>operator==(const BigFloat&amp; left, const BigFloat&amp; right)</name>
                            <syntax>public nothrow bool operator==(const BigFloat&amp; left, const BigFloat&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.9348341"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.9348341"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.9329177"/>
                        </overload>
                        <overload id="function_op_eq_4DF70DC46BAE5102B7B93CAD67CCFAB1EFD41F12">
                            <name>operator==(const BigInt&amp; left, const BigInt&amp; right)</name>
                            <syntax>public nothrow bool operator==(const BigInt&amp; left, const BigInt&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.9348347"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.9348347"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.9329177"/>
                        </overload>
                        <overload id="function_op_eq_ABE9D40B4046D37E72F56D6EC21271BB78A479CF">
                            <name>operator==(const BigRational&amp; left, const BigRational&amp; right)</name>
                            <syntax>public nothrow bool operator==(const BigRational&amp; left, const BigRational&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.9348353"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.9348353"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.9329177"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_op_xor_4F7D875F1408C1AD642ED00AECEE4971D87DB691">
                    <name>operator^(const BigInt&amp; left, const BigInt&amp; right)</name>
                    <syntax>public nothrow BigInt operator^(const BigInt&amp; left, const BigInt&amp; right);</syntax>
                    <parameters>
                        <parameter>
                            <name>left</name>
                            <type ref="type.9348347"/>
                        </parameter>
                        <parameter>
                            <name>right</name>
                            <type ref="type.9348347"/>
                        </parameter>
                    </parameters>
                    <returnType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
                </function>
                <function id="function_op_or_C16146AC5235A380AA8754B8B163BC5B0C53A95F">
                    <name>operator|(const BigInt&amp; left, const BigInt&amp; right)</name>
                    <syntax>public nothrow BigInt operator|(const BigInt&amp; left, const BigInt&amp; right);</syntax>
                    <parameters>
                        <parameter>
                            <name>left</name>
                            <type ref="type.9348347"/>
                        </parameter>
                        <parameter>
                            <name>right</name>
                            <type ref="type.9348347"/>
                        </parameter>
                    </parameters>
                    <returnType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
                </function>
                <function id="function_op_cpl_F2C34039298906124AEC6058776E30FFA1826CCB">
                    <name>operator~(const BigInt&amp; x)</name>
                    <syntax>public nothrow BigInt operator~(const BigInt&amp; x);</syntax>
                    <parameters>
                        <parameter>
                            <name>x</name>
                            <type ref="type.9348347"/>
                        </parameter>
                    </parameters>
                    <returnType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
                </function>
            </functions>
        </namespace>
    </namespaces>
    <types>
        <type id="class_BigFloat_BC19EFB82C8E666524B4436C56800B572EFBED53">
            <name>BigFloat</name>
        </type>
        <type derived="true" id="type.9348338">
            <name>BigFloat&amp;</name>
            <content>
                <baseType ref="class_BigFloat_BC19EFB82C8E666524B4436C56800B572EFBED53"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348718">
            <name>BigFloat&amp;&amp;</name>
            <content>
                <baseType ref="class_BigFloat_BC19EFB82C8E666524B4436C56800B572EFBED53"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348337">
            <name>BigFloat*</name>
            <content>
                <baseType ref="class_BigFloat_BC19EFB82C8E666524B4436C56800B572EFBED53"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348727">
            <name>BigFloat*&amp;</name>
            <content>
                <baseType ref="class_BigFloat_BC19EFB82C8E666524B4436C56800B572EFBED53"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348726">
            <name>BigFloat**</name>
            <content>
                <baseType ref="class_BigFloat_BC19EFB82C8E666524B4436C56800B572EFBED53"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_BigFloatDefaultPrecisionSetter_CB4ACD3C0708237EDA437E4EAEBD18268C65BDFB">
            <name>BigFloatDefaultPrecisionSetter</name>
        </type>
        <type derived="true" id="type.9348722">
            <name>BigFloatDefaultPrecisionSetter&amp;</name>
            <content>
                <baseType ref="class_BigFloatDefaultPrecisionSetter_CB4ACD3C0708237EDA437E4EAEBD18268C65BDFB"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348721">
            <name>BigFloatDefaultPrecisionSetter*</name>
            <content>
                <baseType ref="class_BigFloatDefaultPrecisionSetter_CB4ACD3C0708237EDA437E4EAEBD18268C65BDFB"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0">
            <name>BigInt</name>
        </type>
        <type derived="true" id="type.9348344">
            <name>BigInt&amp;</name>
            <content>
                <baseType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348719">
            <name>BigInt&amp;&amp;</name>
            <content>
                <baseType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348343">
            <name>BigInt*</name>
            <content>
                <baseType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348736">
            <name>BigInt*&amp;</name>
            <content>
                <baseType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348735">
            <name>BigInt**</name>
            <content>
                <baseType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_BigRational_0F62DE7516E5ADB5CE79939E2167456710EF7B23">
            <name>BigRational</name>
        </type>
        <type derived="true" id="type.9348350">
            <name>BigRational&amp;</name>
            <content>
                <baseType ref="class_BigRational_0F62DE7516E5ADB5CE79939E2167456710EF7B23"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348720">
            <name>BigRational&amp;&amp;</name>
            <content>
                <baseType ref="class_BigRational_0F62DE7516E5ADB5CE79939E2167456710EF7B23"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348349">
            <name>BigRational*</name>
            <content>
                <baseType ref="class_BigRational_0F62DE7516E5ADB5CE79939E2167456710EF7B23"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348742">
            <name>BigRational*&amp;</name>
            <content>
                <baseType ref="class_BigRational_0F62DE7516E5ADB5CE79939E2167456710EF7B23"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348741">
            <name>BigRational**</name>
            <content>
                <baseType ref="class_BigRational_0F62DE7516E5ADB5CE79939E2167456710EF7B23"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9331085" specialization="true">
            <name>Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
            </content>
        </type>
        <type derived="true" id="type.5489">
            <name>Bucket&lt;Pair&lt;K, T>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.9331085"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9" specialization="true">
            <name>Bucket&lt;T></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="9329814"/>
            </content>
        </type>
        <type derived="true" id="type.5497">
            <name>Bucket&lt;T>*&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_Bucket_ValueType_5A3E2F108F8CC061B9AC0A82F50CCDA26037ADCE" specialization="true">
            <name>Bucket&lt;ValueType></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="9329835"/>
            </content>
        </type>
        <type derived="true" id="type.5510">
            <name>Bucket&lt;ValueType>*&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Bucket_ValueType_5A3E2F108F8CC061B9AC0A82F50CCDA26037ADCE"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5757">
            <name>CodeFormatter&amp;&amp;</name>
            <content>
                <baseType ref="class_CodeFormatter_38898A0914E7D27753F0D42E65A18EC272984F99"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9330292" specialization="true">
            <name>Counter&lt;System.IO.ByteStream></name>
            <content>
                <primaryType ref="class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <argumentType ref="class_ByteStream_3B7A2F3379612ADBD7E416487752A1935AA8B96F"/>
            </content>
        </type>
        <type id="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30" specialization="true">
            <name>Counter&lt;T></name>
            <content>
                <primaryType ref="class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <argumentType ref="9329982"/>
            </content>
        </type>
        <type derived="true" id="type.5623">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5582">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5585">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5594">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5601">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5616">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A" specialization="true">
            <name>Counter&lt;U></name>
            <content>
                <primaryType ref="class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <argumentType ref="9329975"/>
            </content>
        </type>
        <type id="type.class_ForwardList_T_49B88E2B81E13ED03DA3835C7A074DB98CBE7051" specialization="true">
            <name>ForwardList&lt;T></name>
            <content>
                <primaryType ref="class_ForwardList_T_49B88E2B81E13ED03DA3835C7A074DB98CBE7051"/>
                <argumentType ref="9329723"/>
            </content>
        </type>
        <type derived="true" id="type.5447">
            <name>ForwardList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardList_T_49B88E2B81E13ED03DA3835C7A074DB98CBE7051"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA" specialization="true">
            <name>ForwardListNodeIterator&lt;T, R, P></name>
            <content>
                <primaryType ref="class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <argumentType ref="9329719"/>
                <argumentType ref="9329720"/>
                <argumentType ref="9329721"/>
            </content>
        </type>
        <type derived="true" id="type.5443">
            <name>ForwardListNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5444">
            <name>ForwardListNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84" specialization="true">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <argumentType ref="9329725"/>
                <argumentType ref="type.9330654"/>
                <argumentType ref="type.9330656"/>
            </content>
        </type>
        <type derived="true" id="type.5449">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5451">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5446">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3" specialization="true">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <argumentType ref="9329725"/>
                <argumentType ref="type.9330639"/>
                <argumentType ref="type.9330640"/>
            </content>
        </type>
        <type derived="true" id="type.5448">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5445">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5450">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B" specialization="true">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="9329805"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <argumentType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <argumentType ref="9329807"/>
                <argumentType ref="9329808"/>
            </content>
        </type>
        <type derived="true" id="type.5485">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2" specialization="true">
            <name>Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="9329834"/>
                <argumentType ref="9329835"/>
                <argumentType ref="9329836"/>
                <argumentType ref="9329837"/>
                <argumentType ref="9329838"/>
            </content>
        </type>
        <type derived="true" id="type.5505">
            <name>Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_Hashtable_T_T_Identity_T_H_C_73CFDACB21FE662CFE0879B3582A7D1FB223385C" specialization="true">
            <name>Hashtable&lt;T, T, Identity&lt;T>, H, C></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="9329814"/>
                <argumentType ref="9329814"/>
                <argumentType ref="type.class_Identity_T_9DD2E12D3D49B8316EA22259EDBD89C3FE6A1C09"/>
                <argumentType ref="9329815"/>
                <argumentType ref="9329816"/>
            </content>
        </type>
        <type derived="true" id="type.5493">
            <name>Hashtable&lt;T, T, Identity&lt;T>, H, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_T_T_Identity_T_H_C_73CFDACB21FE662CFE0879B3582A7D1FB223385C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20" specialization="true">
            <name>LinkedList&lt;T></name>
            <content>
                <primaryType ref="class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <argumentType ref="9329851"/>
            </content>
        </type>
        <type derived="true" id="type.5513">
            <name>LinkedList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5514">
            <name>LinkedList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9331104" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.9331086"/>
            </content>
        </type>
        <type derived="true" id="type.5488">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9331104"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9331257" specialization="true">
            <name>List&lt;Bucket&lt;T>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.9331240"/>
            </content>
        </type>
        <type derived="true" id="type.5496">
            <name>List&lt;Bucket&lt;T>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9331257"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9331442" specialization="true">
            <name>List&lt;Bucket&lt;ValueType>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.9331423"/>
            </content>
        </type>
        <type derived="true" id="type.5509">
            <name>List&lt;Bucket&lt;ValueType>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9331442"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9332807" specialization="true">
            <name>List&lt;String&lt;CharT>></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
            </content>
        </type>
        <type derived="true" id="type.5641">
            <name>List&lt;String&lt;CharT>>&amp;&amp;</name>
            <content>
                <baseType ref="type.9332807"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C" specialization="true">
            <name>List&lt;T></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="9329855"/>
            </content>
        </type>
        <type derived="true" id="type.5553">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5517">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5635">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1" specialization="true">
            <name>LockGuard&lt;Mtx></name>
            <content>
                <primaryType ref="class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
                <argumentType ref="9329880"/>
            </content>
        </type>
        <type derived="true" id="type.5541">
            <name>LockGuard&lt;Mtx>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9335149" specialization="true">
            <name>LockGuard&lt;System.Threading.Mutex></name>
            <content>
                <primaryType ref="class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
                <argumentType ref="class_Mutex_CAF802A5F8A71934B07EA6C23937F60D9AECD650"/>
            </content>
        </type>
        <type derived="true" id="type.5728">
            <name>LockGuard&lt;System.Threading.Mutex>&amp;&amp;</name>
            <content>
                <baseType ref="type.9335149"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5538">
            <name>Mtx&amp;</name>
            <content>
                <baseType ref="9329880"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9329994">
            <name>OutputStream&amp;</name>
            <content>
                <baseType ref="class_OutputStream_D306768ED83C9FB00EA54CD61D604CE2BF727452"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9" specialization="true">
            <name>Pair&lt;T, U></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="9329894"/>
                <argumentType ref="9329895"/>
            </content>
        </type>
        <type id="class_Precision_9DAFEB710FD18878097281A53A7F8764341F0B2A">
            <name>Precision</name>
        </type>
        <type derived="true" id="type.9348332">
            <name>Precision&amp;</name>
            <content>
                <baseType ref="class_Precision_9DAFEB710FD18878097281A53A7F8764341F0B2A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5767">
            <name>Precision&amp;&amp;</name>
            <content>
                <baseType ref="class_Precision_9DAFEB710FD18878097281A53A7F8764341F0B2A"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348331">
            <name>Precision*</name>
            <content>
                <baseType ref="class_Precision_9DAFEB710FD18878097281A53A7F8764341F0B2A"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9333990" specialization="true">
            <name>RandomAccessIter&lt;Age*, const Age*&amp;, const Age**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9330100"/>
                <argumentType ref="type.9333833"/>
                <argumentType ref="type.9333989"/>
            </content>
        </type>
        <type derived="true" id="type.5685">
            <name>RandomAccessIter&lt;Age*, const Age*&amp;, const Age**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9333990"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9335030" specialization="true">
            <name>RandomAccessIter&lt;AliasType*, const AliasType*&amp;, const AliasType**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9330171"/>
                <argumentType ref="type.9334873"/>
                <argumentType ref="type.9335029"/>
            </content>
        </type>
        <type derived="true" id="type.5710">
            <name>RandomAccessIter&lt;AliasType*, const AliasType*&amp;, const AliasType**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9335030"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9334614" specialization="true">
            <name>RandomAccessIter&lt;BidiClass*, const BidiClass*&amp;, const BidiClass**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9330145"/>
                <argumentType ref="type.9334457"/>
                <argumentType ref="type.9334613"/>
            </content>
        </type>
        <type derived="true" id="type.5700">
            <name>RandomAccessIter&lt;BidiClass*, const BidiClass*&amp;, const BidiClass**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9334614"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9334822" specialization="true">
            <name>RandomAccessIter&lt;BidiPairedBracketType*, const BidiPairedBracketType*&amp;, const BidiPairedBracketType**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9330158"/>
                <argumentType ref="type.9334665"/>
                <argumentType ref="type.9334821"/>
            </content>
        </type>
        <type derived="true" id="type.5705">
            <name>RandomAccessIter&lt;BidiPairedBracketType*, const BidiPairedBracketType*&amp;, const BidiPairedBracketType**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9334822"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9333353" specialization="true">
            <name>RandomAccessIter&lt;BinaryProperty*, const BinaryProperty*&amp;, const BinaryProperty**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9330070"/>
                <argumentType ref="type.9333182"/>
                <argumentType ref="type.9333352"/>
            </content>
        </type>
        <type derived="true" id="type.5670">
            <name>RandomAccessIter&lt;BinaryProperty*, const BinaryProperty*&amp;, const BinaryProperty**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9333353"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9333571" specialization="true">
            <name>RandomAccessIter&lt;Block*, const Block*&amp;, const Block**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9330080"/>
                <argumentType ref="type.9333414"/>
                <argumentType ref="type.9333570"/>
            </content>
        </type>
        <type derived="true" id="type.5675">
            <name>RandomAccessIter&lt;Block*, const Block*&amp;, const Block**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9333571"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9331199" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9331165"/>
                <argumentType ref="type.9331197"/>
                <argumentType ref="type.9331198"/>
            </content>
        </type>
        <type id="type.9331121" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9331086"/>
                <argumentType ref="type.9331119"/>
                <argumentType ref="type.9331120"/>
            </content>
        </type>
        <type id="type.9331199" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9331165"/>
                <argumentType ref="type.9331197"/>
                <argumentType ref="type.9331198"/>
            </content>
        </type>
        <type derived="true" id="type.5487">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9331121"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5492">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9331199"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9331190" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9331165"/>
                <argumentType ref="type.9331188"/>
                <argumentType ref="type.9331189"/>
            </content>
        </type>
        <type id="type.9331112" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9331086"/>
                <argumentType ref="type.9331110"/>
                <argumentType ref="type.9331111"/>
            </content>
        </type>
        <type id="type.9331190" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9331165"/>
                <argumentType ref="type.9331188"/>
                <argumentType ref="type.9331189"/>
            </content>
        </type>
        <type derived="true" id="type.5486">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9331112"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5491">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9331190"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9333967" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Age*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9333933"/>
                <argumentType ref="type.9333965"/>
                <argumentType ref="type.9333966"/>
            </content>
        </type>
        <type derived="true" id="type.5684">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9333967"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9333958" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9333933"/>
                <argumentType ref="type.9333956"/>
                <argumentType ref="type.9333957"/>
            </content>
        </type>
        <type derived="true" id="type.5683">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9333958"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9335007" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9334973"/>
                <argumentType ref="type.9335005"/>
                <argumentType ref="type.9335006"/>
            </content>
        </type>
        <type derived="true" id="type.5709">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9335007"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9334998" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9334973"/>
                <argumentType ref="type.9334996"/>
                <argumentType ref="type.9334997"/>
            </content>
        </type>
        <type derived="true" id="type.5708">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9334998"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9334591" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9334557"/>
                <argumentType ref="type.9334589"/>
                <argumentType ref="type.9334590"/>
            </content>
        </type>
        <type derived="true" id="type.5699">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9334591"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9334582" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9334557"/>
                <argumentType ref="type.9334580"/>
                <argumentType ref="type.9334581"/>
            </content>
        </type>
        <type derived="true" id="type.5698">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9334582"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9334799" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9334765"/>
                <argumentType ref="type.9334797"/>
                <argumentType ref="type.9334798"/>
            </content>
        </type>
        <type derived="true" id="type.5704">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9334799"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9334790" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9334765"/>
                <argumentType ref="type.9334788"/>
                <argumentType ref="type.9334789"/>
            </content>
        </type>
        <type derived="true" id="type.5703">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9334790"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9333337" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9333303"/>
                <argumentType ref="type.9333335"/>
                <argumentType ref="type.9333336"/>
            </content>
        </type>
        <type derived="true" id="type.5669">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9333337"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9333328" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9333303"/>
                <argumentType ref="type.9333326"/>
                <argumentType ref="type.9333327"/>
            </content>
        </type>
        <type derived="true" id="type.5668">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9333328"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9333548" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Block*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9333514"/>
                <argumentType ref="type.9333546"/>
                <argumentType ref="type.9333547"/>
            </content>
        </type>
        <type derived="true" id="type.5674">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9333548"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9333539" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9333514"/>
                <argumentType ref="type.9333537"/>
                <argumentType ref="type.9333538"/>
            </content>
        </type>
        <type derived="true" id="type.5673">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9333539"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9333759" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9333725"/>
                <argumentType ref="type.9333757"/>
                <argumentType ref="type.9333758"/>
            </content>
        </type>
        <type derived="true" id="type.5679">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9333759"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9333750" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9333725"/>
                <argumentType ref="type.9333748"/>
                <argumentType ref="type.9333749"/>
            </content>
        </type>
        <type derived="true" id="type.5678">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9333750"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9334383" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9334349"/>
                <argumentType ref="type.9334381"/>
                <argumentType ref="type.9334382"/>
            </content>
        </type>
        <type derived="true" id="type.5694">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9334383"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9334374" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9334349"/>
                <argumentType ref="type.9334372"/>
                <argumentType ref="type.9334373"/>
            </content>
        </type>
        <type derived="true" id="type.5693">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9334374"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9334175" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Script*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9334141"/>
                <argumentType ref="type.9334173"/>
                <argumentType ref="type.9334174"/>
            </content>
        </type>
        <type derived="true" id="type.5689">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9334175"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9334166" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9334141"/>
                <argumentType ref="type.9334164"/>
                <argumentType ref="type.9334165"/>
            </content>
        </type>
        <type derived="true" id="type.5688">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9334166"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9333891" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9333857"/>
                <argumentType ref="type.9333889"/>
                <argumentType ref="type.9333890"/>
            </content>
        </type>
        <type derived="true" id="type.5682">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9333891"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9333882" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9333857"/>
                <argumentType ref="type.9333880"/>
                <argumentType ref="type.9333881"/>
            </content>
        </type>
        <type derived="true" id="type.5681">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9333882"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9334931" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9334897"/>
                <argumentType ref="type.9334929"/>
                <argumentType ref="type.9334930"/>
            </content>
        </type>
        <type derived="true" id="type.5707">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9334931"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9334922" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9334897"/>
                <argumentType ref="type.9334920"/>
                <argumentType ref="type.9334921"/>
            </content>
        </type>
        <type derived="true" id="type.5706">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9334922"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9334515" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9334481"/>
                <argumentType ref="type.9334513"/>
                <argumentType ref="type.9334514"/>
            </content>
        </type>
        <type derived="true" id="type.5697">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9334515"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9334506" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9334481"/>
                <argumentType ref="type.9334504"/>
                <argumentType ref="type.9334505"/>
            </content>
        </type>
        <type derived="true" id="type.5696">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9334506"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9334723" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9334689"/>
                <argumentType ref="type.9334721"/>
                <argumentType ref="type.9334722"/>
            </content>
        </type>
        <type derived="true" id="type.5702">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9334723"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9334714" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9334689"/>
                <argumentType ref="type.9334712"/>
                <argumentType ref="type.9334713"/>
            </content>
        </type>
        <type derived="true" id="type.5701">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9334714"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9333240" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9333206"/>
                <argumentType ref="type.9333238"/>
                <argumentType ref="type.9333239"/>
            </content>
        </type>
        <type derived="true" id="type.5667">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9333240"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9333231" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9333206"/>
                <argumentType ref="type.9333229"/>
                <argumentType ref="type.9333230"/>
            </content>
        </type>
        <type derived="true" id="type.5666">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9333231"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9333472" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9333438"/>
                <argumentType ref="type.9333470"/>
                <argumentType ref="type.9333471"/>
            </content>
        </type>
        <type derived="true" id="type.5672">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9333472"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9333463" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9333438"/>
                <argumentType ref="type.9333461"/>
                <argumentType ref="type.9333462"/>
            </content>
        </type>
        <type derived="true" id="type.5671">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9333463"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9333683" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9333649"/>
                <argumentType ref="type.9333681"/>
                <argumentType ref="type.9333682"/>
            </content>
        </type>
        <type derived="true" id="type.5677">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9333683"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9333674" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9333649"/>
                <argumentType ref="type.9333672"/>
                <argumentType ref="type.9333673"/>
            </content>
        </type>
        <type derived="true" id="type.5676">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9333674"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9334307" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9334273"/>
                <argumentType ref="type.9334305"/>
                <argumentType ref="type.9334306"/>
            </content>
        </type>
        <type derived="true" id="type.5692">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9334307"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9334298" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9334273"/>
                <argumentType ref="type.9334296"/>
                <argumentType ref="type.9334297"/>
            </content>
        </type>
        <type derived="true" id="type.5691">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9334298"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9334099" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9334065"/>
                <argumentType ref="type.9334097"/>
                <argumentType ref="type.9334098"/>
            </content>
        </type>
        <type derived="true" id="type.5687">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9334099"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9334090" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9334065"/>
                <argumentType ref="type.9334088"/>
                <argumentType ref="type.9334089"/>
            </content>
        </type>
        <type derived="true" id="type.5686">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9334090"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9331274" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9331240"/>
                <argumentType ref="type.9331272"/>
                <argumentType ref="type.9331273"/>
            </content>
        </type>
        <type id="type.9331348" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9331314"/>
                <argumentType ref="type.9331346"/>
                <argumentType ref="type.9331347"/>
            </content>
        </type>
        <type derived="true" id="type.5495">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9331274"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5499">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9331348"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9331265" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9331240"/>
                <argumentType ref="type.9331263"/>
                <argumentType ref="type.9331264"/>
            </content>
        </type>
        <type id="type.9331339" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9331314"/>
                <argumentType ref="type.9331337"/>
                <argumentType ref="type.9331338"/>
            </content>
        </type>
        <type derived="true" id="type.5494">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9331265"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5498">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9331339"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9331459" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, Bucket&lt;ValueType>*&amp;, Bucket&lt;ValueType>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9331423"/>
                <argumentType ref="type.9331457"/>
                <argumentType ref="type.9331458"/>
            </content>
        </type>
        <type derived="true" id="type.5508">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, Bucket&lt;ValueType>*&amp;, Bucket&lt;ValueType>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9331459"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9331450" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, const Bucket&lt;ValueType>*&amp;, const Bucket&lt;ValueType>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9331423"/>
                <argumentType ref="type.9331448"/>
                <argumentType ref="type.9331449"/>
            </content>
        </type>
        <type derived="true" id="type.5507">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, const Bucket&lt;ValueType>*&amp;, const Bucket&lt;ValueType>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9331450"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF" specialization="true">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="9330012"/>
                <argumentType ref="type.9332985"/>
                <argumentType ref="type.9332986"/>
            </content>
        </type>
        <type derived="true" id="type.5643">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5659">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5655">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5637">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5647">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5651">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5663">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966" specialization="true">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="9330010"/>
                <argumentType ref="type.9332881"/>
                <argumentType ref="type.9332882"/>
            </content>
        </type>
        <type derived="true" id="type.5646">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5658">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5650">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5642">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5636">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5662">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5654">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9333782" specialization="true">
            <name>RandomAccessIter&lt;GeneralCategory*, const GeneralCategory*&amp;, const GeneralCategory**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9330090"/>
                <argumentType ref="type.9333625"/>
                <argumentType ref="type.9333781"/>
            </content>
        </type>
        <type derived="true" id="type.5680">
            <name>RandomAccessIter&lt;GeneralCategory*, const GeneralCategory*&amp;, const GeneralCategory**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9333782"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9334399" specialization="true">
            <name>RandomAccessIter&lt;NumericType*, const NumericType*&amp;, const NumericType**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9330132"/>
                <argumentType ref="type.9334249"/>
                <argumentType ref="type.9334398"/>
            </content>
        </type>
        <type derived="true" id="type.5695">
            <name>RandomAccessIter&lt;NumericType*, const NumericType*&amp;, const NumericType**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9334399"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9334198" specialization="true">
            <name>RandomAccessIter&lt;Script*, const Script*&amp;, const Script**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9330113"/>
                <argumentType ref="type.9334041"/>
                <argumentType ref="type.9334197"/>
            </content>
        </type>
        <type derived="true" id="type.5690">
            <name>RandomAccessIter&lt;Script*, const Script*&amp;, const Script**>&amp;&amp;</name>
            <content>
                <baseType ref="type.9334198"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9333055" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.9333021"/>
                <argumentType ref="type.9333020"/>
            </content>
        </type>
        <type id="type.9333008" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.9332971"/>
                <argumentType ref="type.9332970"/>
            </content>
        </type>
        <type id="type.9333102" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.9333065"/>
                <argumentType ref="type.9333064"/>
            </content>
        </type>
        <type id="type.9332914" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.9332877"/>
                <argumentType ref="type.9332876"/>
            </content>
        </type>
        <type id="type.9332961" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.9332924"/>
                <argumentType ref="type.9332923"/>
            </content>
        </type>
        <type id="type.9332820" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.9332783"/>
                <argumentType ref="type.9332782"/>
            </content>
        </type>
        <type id="type.9332867" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.9332830"/>
                <argumentType ref="type.9332829"/>
            </content>
        </type>
        <type id="type.9332961" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.9332924"/>
                <argumentType ref="type.9332923"/>
            </content>
        </type>
        <type derived="true" id="type.5645">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9332867"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5665">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9333102"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5640">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9332820"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5657">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9333008"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5653">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9332961"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5661">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9333055"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5649">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9332914"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9332813" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.9332786"/>
                <argumentType ref="type.9332785"/>
            </content>
        </type>
        <type id="type.9333095" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.9333068"/>
                <argumentType ref="type.9333067"/>
            </content>
        </type>
        <type id="type.9333048" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.9333024"/>
                <argumentType ref="type.9333023"/>
            </content>
        </type>
        <type id="type.9333001" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.9332974"/>
                <argumentType ref="type.9332973"/>
            </content>
        </type>
        <type id="type.9332907" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.9332880"/>
                <argumentType ref="type.9332879"/>
            </content>
        </type>
        <type id="type.9332954" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.9332927"/>
                <argumentType ref="type.9332926"/>
            </content>
        </type>
        <type id="type.9332813" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.9332786"/>
                <argumentType ref="type.9332785"/>
            </content>
        </type>
        <type id="type.9332860" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.9332833"/>
                <argumentType ref="type.9332832"/>
            </content>
        </type>
        <type derived="true" id="type.5660">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9333048"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5664">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9333095"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5652">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9332954"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5639">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9332813"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5644">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9332860"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5656">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9333001"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5648">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9332907"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9330353" specialization="true">
            <name>RandomAccessIter&lt;String&lt;char>, String&lt;char>&amp;, String&lt;char>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9330318"/>
                <argumentType ref="type.9330320"/>
                <argumentType ref="type.9330319"/>
            </content>
        </type>
        <type derived="true" id="type.5409">
            <name>RandomAccessIter&lt;String&lt;char>, String&lt;char>&amp;, String&lt;char>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9330353"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9330346" specialization="true">
            <name>RandomAccessIter&lt;String&lt;char>, const String&lt;char>&amp;, const String&lt;char>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9330318"/>
                <argumentType ref="type.9330323"/>
                <argumentType ref="type.9330322"/>
            </content>
        </type>
        <type derived="true" id="type.5408">
            <name>RandomAccessIter&lt;String&lt;char>, const String&lt;char>&amp;, const String&lt;char>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9330346"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9330443" specialization="true">
            <name>RandomAccessIter&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9330406"/>
                <argumentType ref="type.9330408"/>
                <argumentType ref="type.9330407"/>
            </content>
        </type>
        <type derived="true" id="type.5428">
            <name>RandomAccessIter&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9330443"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9330436" specialization="true">
            <name>RandomAccessIter&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9330406"/>
                <argumentType ref="type.9330411"/>
                <argumentType ref="type.9330410"/>
            </content>
        </type>
        <type derived="true" id="type.5427">
            <name>RandomAccessIter&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9330436"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9330398" specialization="true">
            <name>RandomAccessIter&lt;String&lt;wchar>, String&lt;wchar>&amp;, String&lt;wchar>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9330361"/>
                <argumentType ref="type.9330363"/>
                <argumentType ref="type.9330362"/>
            </content>
        </type>
        <type derived="true" id="type.5418">
            <name>RandomAccessIter&lt;String&lt;wchar>, String&lt;wchar>&amp;, String&lt;wchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9330398"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9330391" specialization="true">
            <name>RandomAccessIter&lt;String&lt;wchar>, const String&lt;wchar>&amp;, const String&lt;wchar>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9330361"/>
                <argumentType ref="type.9330366"/>
                <argumentType ref="type.9330365"/>
            </content>
        </type>
        <type derived="true" id="type.5417">
            <name>RandomAccessIter&lt;String&lt;wchar>, const String&lt;wchar>&amp;, const String&lt;wchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9330391"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9335060" specialization="true">
            <name>RandomAccessIter&lt;System.Unicode.Alias, Alias&amp;, Alias*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_Alias_F5EF8FC9193282B25B9E84210775A55CF0A14DB2"/>
                <argumentType ref="type.9330184"/>
                <argumentType ref="type.9330183"/>
            </content>
        </type>
        <type derived="true" id="type.5712">
            <name>RandomAccessIter&lt;System.Unicode.Alias, Alias&amp;, Alias*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9335060"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9335053" specialization="true">
            <name>RandomAccessIter&lt;System.Unicode.Alias, const Alias&amp;, const Alias*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_Alias_F5EF8FC9193282B25B9E84210775A55CF0A14DB2"/>
                <argumentType ref="type.9330187"/>
                <argumentType ref="type.9330186"/>
            </content>
        </type>
        <type derived="true" id="type.5711">
            <name>RandomAccessIter&lt;System.Unicode.Alias, const Alias&amp;, const Alias*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9335053"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484" specialization="true">
            <name>RandomAccessIter&lt;T, R, P></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="9329915"/>
                <argumentType ref="9329916"/>
                <argumentType ref="9329917"/>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484" specialization="true">
            <name>RandomAccessIter&lt;T, R, P></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="9329903"/>
                <argumentType ref="9329904"/>
                <argumentType ref="9329905"/>
            </content>
        </type>
        <type derived="true" id="type.5557">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5556">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5555">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5554">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5558">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5559">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5560">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7" specialization="true">
            <name>RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="9329855"/>
                <argumentType ref="type.9331654"/>
                <argumentType ref="type.9331655"/>
            </content>
        </type>
        <type derived="true" id="type.5552">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5516">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5520">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5634">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5522">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892" specialization="true">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="9329857"/>
                <argumentType ref="type.9331698"/>
                <argumentType ref="type.9331699"/>
            </content>
        </type>
        <type derived="true" id="type.5633">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5521">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5519">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5515">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5551">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9335089" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, UniquePtr&lt;System.Unicode.CharacterInfo>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9335069"/>
                <argumentType ref="type.9335071"/>
                <argumentType ref="type.9335070"/>
            </content>
        </type>
        <type derived="true" id="type.5714">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, UniquePtr&lt;System.Unicode.CharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9335089"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9335082" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, const UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfo>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9335069"/>
                <argumentType ref="type.9335074"/>
                <argumentType ref="type.9335073"/>
            </content>
        </type>
        <type derived="true" id="type.5713">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, const UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9335082"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9335185" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.CharacterInfoPage>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9335165"/>
                <argumentType ref="type.9335167"/>
                <argumentType ref="type.9335166"/>
            </content>
        </type>
        <type derived="true" id="type.5730">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.CharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9335185"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9335178" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, const UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfoPage>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9335165"/>
                <argumentType ref="type.9335170"/>
                <argumentType ref="type.9335169"/>
            </content>
        </type>
        <type derived="true" id="type.5729">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, const UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9335178"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9335117" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9335097"/>
                <argumentType ref="type.9335099"/>
                <argumentType ref="type.9335098"/>
            </content>
        </type>
        <type derived="true" id="type.5716">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9335117"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9335110" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9335097"/>
                <argumentType ref="type.9335102"/>
                <argumentType ref="type.9335101"/>
            </content>
        </type>
        <type derived="true" id="type.5715">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9335110"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9335220" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9335200"/>
                <argumentType ref="type.9335202"/>
                <argumentType ref="type.9335201"/>
            </content>
        </type>
        <type derived="true" id="type.5732">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9335220"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9335213" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9335200"/>
                <argumentType ref="type.9335205"/>
                <argumentType ref="type.9335204"/>
            </content>
        </type>
        <type derived="true" id="type.5731">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9335213"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9348485" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9329179"/>
                <argumentType ref="type.9329200"/>
                <argumentType ref="type.9329199"/>
            </content>
        </type>
        <type id="type.5530" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9329179"/>
                <argumentType ref="type.9329200"/>
                <argumentType ref="type.9329199"/>
            </content>
        </type>
        <type id="type.9331808" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9329179"/>
                <argumentType ref="type.9329200"/>
                <argumentType ref="type.9329199"/>
            </content>
        </type>
        <type derived="true" id="type.5532">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <baseType ref="type.5530"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348487">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <baseType ref="type.9348485"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5536">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5530"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5537">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9331808"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5739">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9348485"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5531">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <baseType ref="type.5530"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348486">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <baseType ref="type.9348485"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9348356" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9329188"/>
                <argumentType ref="type.9329227"/>
                <argumentType ref="type.9329226"/>
            </content>
        </type>
        <type id="type.5401" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9329188"/>
                <argumentType ref="type.9329227"/>
                <argumentType ref="type.9329226"/>
            </content>
        </type>
        <type id="type.9348356" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9329188"/>
                <argumentType ref="type.9329227"/>
                <argumentType ref="type.9329226"/>
            </content>
        </type>
        <type derived="true" id="type.5403">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <baseType ref="type.5401"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348358">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <baseType ref="type.9348356"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5407">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5401"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5735">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9348356"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5402">
            <name>RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <baseType ref="type.5401"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348357">
            <name>RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <baseType ref="type.9348356"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9330422" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9329190"/>
                <argumentType ref="type.9329233"/>
                <argumentType ref="type.9329232"/>
            </content>
        </type>
        <type id="type.9348375" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9329190"/>
                <argumentType ref="type.9329233"/>
                <argumentType ref="type.9329232"/>
            </content>
        </type>
        <type id="type.5420" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9329190"/>
                <argumentType ref="type.9329233"/>
                <argumentType ref="type.9329232"/>
            </content>
        </type>
        <type id="type.9330422" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9329190"/>
                <argumentType ref="type.9329233"/>
                <argumentType ref="type.9329232"/>
            </content>
        </type>
        <type derived="true" id="type.5422">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <baseType ref="type.5420"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348377">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <baseType ref="type.9348375"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5429">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9330422"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5426">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5420"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5737">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9348375"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5421">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <baseType ref="type.5420"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348376">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <baseType ref="type.9348375"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9335134" specialization="true">
            <name>RandomAccessIter&lt;uint, const uint&amp;, const uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9329183"/>
                <argumentType ref="type.9335131"/>
                <argumentType ref="type.9335132"/>
            </content>
        </type>
        <type derived="true" id="type.5717">
            <name>RandomAccessIter&lt;uint, const uint&amp;, const uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9335134"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9348674" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9329183"/>
                <argumentType ref="type.9329212"/>
                <argumentType ref="type.9329211"/>
            </content>
        </type>
        <type id="type.5718" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9329183"/>
                <argumentType ref="type.9329212"/>
                <argumentType ref="type.9329211"/>
            </content>
        </type>
        <type id="type.9335141" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9329183"/>
                <argumentType ref="type.9329212"/>
                <argumentType ref="type.9329211"/>
            </content>
        </type>
        <type derived="true" id="type.9348676">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <baseType ref="type.9348674"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5720">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <baseType ref="type.5718"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5725">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9335141"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5724">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5718"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5740">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9348674"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348675">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <baseType ref="type.9348674"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5719">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <baseType ref="type.5718"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9330465" specialization="true">
            <name>RandomAccessIter&lt;ulong, const ulong&amp;, const ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9329185"/>
                <argumentType ref="type.9330462"/>
                <argumentType ref="type.9330463"/>
            </content>
        </type>
        <type derived="true" id="type.5430">
            <name>RandomAccessIter&lt;ulong, const ulong&amp;, const ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9330465"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9348386" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9329185"/>
                <argumentType ref="type.9329218"/>
                <argumentType ref="type.9329217"/>
            </content>
        </type>
        <type id="type.9330472" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9329185"/>
                <argumentType ref="type.9329218"/>
                <argumentType ref="type.9329217"/>
            </content>
        </type>
        <type id="type.5431" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9329185"/>
                <argumentType ref="type.9329218"/>
                <argumentType ref="type.9329217"/>
            </content>
        </type>
        <type id="type.9348386" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9329185"/>
                <argumentType ref="type.9329218"/>
                <argumentType ref="type.9329217"/>
            </content>
        </type>
        <type derived="true" id="type.9348388">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <baseType ref="type.9348386"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5433">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <baseType ref="type.5431"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5438">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9330472"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5437">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5431"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5738">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9348386"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348387">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <baseType ref="type.9348386"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5432">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <baseType ref="type.5431"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9348365" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9329189"/>
                <argumentType ref="type.9329230"/>
                <argumentType ref="type.9329229"/>
            </content>
        </type>
        <type id="type.5410" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9329189"/>
                <argumentType ref="type.9329230"/>
                <argumentType ref="type.9329229"/>
            </content>
        </type>
        <type id="type.9330377" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.9329189"/>
                <argumentType ref="type.9329230"/>
                <argumentType ref="type.9329229"/>
            </content>
        </type>
        <type derived="true" id="type.5412">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <baseType ref="type.5410"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348367">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <baseType ref="type.9348365"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5419">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9330377"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5416">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5410"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5736">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9348365"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348366">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <baseType ref="type.9348365"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5411">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <baseType ref="type.5410"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047" specialization="true">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare></name>
            <content>
                <primaryType ref="class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <argumentType ref="9329862"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <argumentType ref="9329864"/>
            </content>
        </type>
        <type derived="true" id="type.5527">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2" specialization="true">
            <name>RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare></name>
            <content>
                <primaryType ref="class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <argumentType ref="9329941"/>
                <argumentType ref="9329942"/>
                <argumentType ref="9329943"/>
                <argumentType ref="9329944"/>
            </content>
        </type>
        <type derived="true" id="type.5569">
            <name>RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTree_T_T_Identity_T_C_BC4C30A5A170B2B4B4BF9109198D17D5A1BD03D3" specialization="true">
            <name>RedBlackTree&lt;T, T, Identity&lt;T>, C></name>
            <content>
                <primaryType ref="class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <argumentType ref="9329947"/>
                <argumentType ref="9329947"/>
                <argumentType ref="type.class_Identity_T_9DD2E12D3D49B8316EA22259EDBD89C3FE6A1C09"/>
                <argumentType ref="9329948"/>
            </content>
        </type>
        <type derived="true" id="type.5574">
            <name>RedBlackTree&lt;T, T, Identity&lt;T>, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_T_T_Identity_T_C_BC4C30A5A170B2B4B4BF9109198D17D5A1BD03D3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348293">
            <name>RedBlackTreeNodeBase&amp;</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5398">
            <name>RedBlackTreeNodeBase&amp;</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348293">
            <name>RedBlackTreeNodeBase&amp;</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5756">
            <name>RedBlackTreeNodeBase&amp;&amp;</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348292">
            <name>RedBlackTreeNodeBase*</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5397">
            <name>RedBlackTreeNodeBase*</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348292">
            <name>RedBlackTreeNodeBase*</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.9331772" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.9331733"/>
                <argumentType ref="type.9331732"/>
            </content>
        </type>
        <type derived="true" id="type.5526">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9331772"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9331754" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.9331743"/>
                <argumentType ref="type.9331752"/>
            </content>
        </type>
        <type derived="true" id="type.5525">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.9331754"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, R, P></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="9329937"/>
                <argumentType ref="9329938"/>
                <argumentType ref="9329939"/>
            </content>
        </type>
        <type derived="true" id="type.5566">
            <name>RedBlackTreeNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5565">
            <name>RedBlackTreeNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="9329951"/>
                <argumentType ref="type.9332198"/>
                <argumentType ref="type.9332200"/>
            </content>
        </type>
        <type derived="true" id="type.5577">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5573">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5579">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="9329949"/>
                <argumentType ref="type.9332118"/>
                <argumentType ref="type.9332127"/>
            </content>
        </type>
        <type derived="true" id="type.5578">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5576">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5572">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_R_ValueType_P_A72EE6DFD58F3068E8C768CB16BF71716048A80D" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="9329942"/>
                <argumentType ref="type.9332025"/>
                <argumentType ref="type.9332027"/>
            </content>
        </type>
        <type derived="true" id="type.5568">
            <name>RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_R_ValueType_P_A72EE6DFD58F3068E8C768CB16BF71716048A80D"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_C_R_ValueType_C_P_62C8FF5559EB06AAFEDF99196CE7BD850F471D11" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="9329942"/>
                <argumentType ref="type.9332010"/>
                <argumentType ref="type.9332011"/>
            </content>
        </type>
        <type derived="true" id="type.5567">
            <name>RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_C_R_ValueType_C_P_62C8FF5559EB06AAFEDF99196CE7BD850F471D11"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076" specialization="true">
            <name>SharedCount&lt;T></name>
            <content>
                <primaryType ref="class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <argumentType ref="9329962"/>
            </content>
        </type>
        <type derived="true" id="type.5602">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5596">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5586">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5618">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5624">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F" specialization="true">
            <name>SharedPtr&lt;T></name>
            <content>
                <primaryType ref="class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <argumentType ref="9329978"/>
            </content>
        </type>
        <type derived="true" id="type.5626">
            <name>SharedPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5604">
            <name>SharedPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5619">
            <name>SharedPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5743">
            <name>StaticInitCriticalSection&amp;&amp;</name>
            <content>
                <baseType ref="class_StaticInitCriticalSection_39AB37625C7D8624475080E487A05114E48A9C6C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9330006">
            <name>StreamWriter&amp;</name>
            <content>
                <baseType ref="class_StreamWriter_40A39F418049D49DB679452BB514CDFE47500311"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC" specialization="true">
            <name>String&lt;CharT></name>
            <content>
                <primaryType ref="class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="9330008"/>
            </content>
        </type>
        <type derived="true" id="type.5638">
            <name>String&lt;CharT>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9330318" specialization="true">
            <name>String&lt;char></name>
            <content>
                <primaryType ref="class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.9329188"/>
            </content>
        </type>
        <type derived="true" id="type.5504">
            <name>T&amp;</name>
            <content>
                <baseType ref="9329825"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5564">
            <name>T&amp;</name>
            <content>
                <baseType ref="9329934"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5490">
            <name>T&amp;</name>
            <content>
                <baseType ref="9329806"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5502">
            <name>T&amp;</name>
            <content>
                <baseType ref="9329823"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5512">
            <name>T&amp;</name>
            <content>
                <baseType ref="9329842"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5440">
            <name>T&amp;</name>
            <content>
                <baseType ref="9329714"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5442">
            <name>T&amp;</name>
            <content>
                <baseType ref="9329716"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5562">
            <name>T&amp;</name>
            <content>
                <baseType ref="9329932"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5550">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="9329901"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5518">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="9329855"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5632">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="9329985"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9331783" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.9331760"/>
            </content>
        </type>
        <type derived="true" id="type.5528">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.9331783"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9332098" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
            </content>
        </type>
        <type derived="true" id="type.5575">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>>&amp;&amp;</name>
            <content>
                <baseType ref="type.9332098"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9332040" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;ValueType>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.class_RedBlackTreeNode_ValueType_38B50DA62919A6E728F70DA36817024C5A9A8855"/>
            </content>
        </type>
        <type derived="true" id="type.5571">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;ValueType>>&amp;&amp;</name>
            <content>
                <baseType ref="type.9332040"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9335294" specialization="true">
            <name>UniquePtr&lt;System.Exception></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_Exception_02AEA5204AD1035A91C2D843597EACBE078C8989"/>
            </content>
        </type>
        <type derived="true" id="type.5734">
            <name>UniquePtr&lt;System.Exception>&amp;&amp;</name>
            <content>
                <baseType ref="type.9335294"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009" specialization="true">
            <name>UniquePtr&lt;T></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="9330216"/>
            </content>
        </type>
        <type derived="true" id="type.5733">
            <name>UniquePtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5529">
            <name>Value&amp;</name>
            <content>
                <baseType ref="9329863"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F" specialization="true">
            <name>WeakCount&lt;T></name>
            <content>
                <primaryType ref="class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <argumentType ref="9329980"/>
            </content>
        </type>
        <type derived="true" id="type.5595">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5587">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5625">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5617">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5603">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.9330308" specialization="true">
            <name>WeakPtr&lt;System.IO.ByteStream></name>
            <content>
                <primaryType ref="class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <argumentType ref="class_ByteStream_3B7A2F3379612ADBD7E416487752A1935AA8B96F"/>
            </content>
        </type>
        <type derived="true" id="type.5400">
            <name>WeakPtr&lt;System.IO.ByteStream>&amp;&amp;</name>
            <content>
                <baseType ref="type.9330308"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC" specialization="true">
            <name>WeakPtr&lt;T></name>
            <content>
                <primaryType ref="class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <argumentType ref="9329972"/>
            </content>
        </type>
        <type derived="true" id="type.5630">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5627">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5620">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5611">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5609">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5607">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5605">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_WeakPtr_U_DC1FE0F847E4C954B399A783A0BC0307D485B021" specialization="true">
            <name>WeakPtr&lt;U></name>
            <content>
                <primaryType ref="class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <argumentType ref="9329975"/>
            </content>
        </type>
        <type derived="true" id="type.5613">
            <name>WeakPtr&lt;U>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_U_DC1FE0F847E4C954B399A783A0BC0307D485B021"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type basic="true" id="type.9329177">
            <name>bool</name>
        </type>
        <type basic="true" id="type.9329179">
            <name>byte</name>
        </type>
        <type derived="true" id="type.9329200">
            <name>byte&amp;</name>
            <content>
                <baseType ref="type.9329179"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9329199">
            <name>byte*</name>
            <content>
                <baseType ref="type.9329179"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.9329188">
            <name>char</name>
        </type>
        <type derived="true" id="type.9329227">
            <name>char&amp;</name>
            <content>
                <baseType ref="type.9329188"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9329226">
            <name>char*</name>
            <content>
                <baseType ref="type.9329188"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348339">
            <name>const BigFloat</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BigFloat_BC19EFB82C8E666524B4436C56800B572EFBED53"/>
            </content>
        </type>
        <type derived="true" id="type.9348341">
            <name>const BigFloat&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BigFloat_BC19EFB82C8E666524B4436C56800B572EFBED53"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348340">
            <name>const BigFloat*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BigFloat_BC19EFB82C8E666524B4436C56800B572EFBED53"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348725">
            <name>const BigFloat*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BigFloat_BC19EFB82C8E666524B4436C56800B572EFBED53"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348724">
            <name>const BigFloat**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BigFloat_BC19EFB82C8E666524B4436C56800B572EFBED53"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348345">
            <name>const BigInt</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
            </content>
        </type>
        <type derived="true" id="type.9348347">
            <name>const BigInt&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348346">
            <name>const BigInt*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348734">
            <name>const BigInt*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348733">
            <name>const BigInt**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348351">
            <name>const BigRational</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BigRational_0F62DE7516E5ADB5CE79939E2167456710EF7B23"/>
            </content>
        </type>
        <type derived="true" id="type.9348353">
            <name>const BigRational&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BigRational_0F62DE7516E5ADB5CE79939E2167456710EF7B23"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348352">
            <name>const BigRational*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BigRational_0F62DE7516E5ADB5CE79939E2167456710EF7B23"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348740">
            <name>const BigRational*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BigRational_0F62DE7516E5ADB5CE79939E2167456710EF7B23"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348739">
            <name>const BigRational**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BigRational_0F62DE7516E5ADB5CE79939E2167456710EF7B23"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5744">
            <name>const BinaryReader</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BinaryReader_7D0A41A9C666814155001B1AF5B066E926C8F3AC"/>
            </content>
        </type>
        <type derived="true" id="type.5745">
            <name>const BinaryReader&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BinaryReader_7D0A41A9C666814155001B1AF5B066E926C8F3AC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5746">
            <name>const BinaryWriter</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BinaryWriter_6D47712E9CF8C098A17FFF3729140EE727BD87E2"/>
            </content>
        </type>
        <type derived="true" id="type.5747">
            <name>const BinaryWriter&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BinaryWriter_6D47712E9CF8C098A17FFF3729140EE727BD87E2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5748">
            <name>const BufferedByteStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BufferedByteStream_E74639F265FCFA3F7A3E61DE9D92C703A46FD573"/>
            </content>
        </type>
        <type derived="true" id="type.5749">
            <name>const ByteStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ByteStream_3B7A2F3379612ADBD7E416487752A1935AA8B96F"/>
            </content>
        </type>
        <type derived="true" id="type.5758">
            <name>const ConditionVariable</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ConditionVariable_019A80625043CF98EC88D8F55238C84CFD4A9C26"/>
            </content>
        </type>
        <type derived="true" id="type.5763">
            <name>const ConversionException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ConversionException_968EDA1D00534F82FF78F973855F91349977511B"/>
            </content>
        </type>
        <type derived="true" id="type.5764">
            <name>const ConversionException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ConversionException_968EDA1D00534F82FF78F973855F91349977511B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5399">
            <name>const Counter&lt;System.IO.ByteStream></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9330292"/>
            </content>
        </type>
        <type derived="true" id="type.5628">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.5629">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.5590">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.5608">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.5592">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.5610">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.5597">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.5583">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.5614">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.5598">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.5599">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.5580">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.5621">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.5588">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.5589">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.5606">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.5615">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5581">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5584">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5593">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5600">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5622">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5591">
            <name>const Counter&lt;U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A"/>
            </content>
        </type>
        <type derived="true" id="type.5631">
            <name>const Counter&lt;U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A"/>
            </content>
        </type>
        <type derived="true" id="type.5612">
            <name>const Counter&lt;U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A"/>
            </content>
        </type>
        <type derived="true" id="type.5750">
            <name>const FileSystemException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_FileSystemException_BB9552A6F8CD7166104BC90F55939797AA006B1A"/>
            </content>
        </type>
        <type derived="true" id="type.5751">
            <name>const FileSystemException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_FileSystemException_BB9552A6F8CD7166104BC90F55939797AA006B1A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5752">
            <name>const InvalidPathException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_InvalidPathException_B507BC7383A55580000E7A669FAAE1ABECF7FFBA"/>
            </content>
        </type>
        <type derived="true" id="type.5753">
            <name>const InvalidPathException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_InvalidPathException_B507BC7383A55580000E7A669FAAE1ABECF7FFBA"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5483">
            <name>const K&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329805"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5523">
            <name>const Key&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329862"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5506">
            <name>const KeyType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329834"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5570">
            <name>const KeyType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329941"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5539">
            <name>const LockGuard&lt;Mtx></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
            </content>
        </type>
        <type derived="true" id="type.5540">
            <name>const LockGuard&lt;Mtx>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5726">
            <name>const LockGuard&lt;System.Threading.Mutex></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9335149"/>
            </content>
        </type>
        <type derived="true" id="type.5727">
            <name>const LockGuard&lt;System.Threading.Mutex>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9335149"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5759">
            <name>const Mutex</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Mutex_CAF802A5F8A71934B07EA6C23937F60D9AECD650"/>
            </content>
        </type>
        <type derived="true" id="type.5754">
            <name>const OutputStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_OutputStream_D306768ED83C9FB00EA54CD61D604CE2BF727452"/>
            </content>
        </type>
        <type derived="true" id="type.5549">
            <name>const Pair&lt;T, U>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5546">
            <name>const Pair&lt;T, U>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348333">
            <name>const Precision</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Precision_9DAFEB710FD18878097281A53A7F8764341F0B2A"/>
            </content>
        </type>
        <type derived="true" id="type.9348335">
            <name>const Precision&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Precision_9DAFEB710FD18878097281A53A7F8764341F0B2A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348334">
            <name>const Precision*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Precision_9DAFEB710FD18878097281A53A7F8764341F0B2A"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5533">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5530"/>
            </content>
        </type>
        <type derived="true" id="type.9348488">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9348485"/>
            </content>
        </type>
        <type derived="true" id="type.9348490">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9348485"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5535">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5530"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5534">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5530"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348489">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9348485"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348359">
            <name>const RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9348356"/>
            </content>
        </type>
        <type derived="true" id="type.5404">
            <name>const RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5401"/>
            </content>
        </type>
        <type derived="true" id="type.9348361">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9348356"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5406">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5401"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5405">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5401"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348360">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9348356"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348378">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9348375"/>
            </content>
        </type>
        <type derived="true" id="type.5423">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5420"/>
            </content>
        </type>
        <type derived="true" id="type.9348380">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9348375"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5425">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5420"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348380">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9348375"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5424">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5420"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348379">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9348375"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348677">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9348674"/>
            </content>
        </type>
        <type derived="true" id="type.5721">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5718"/>
            </content>
        </type>
        <type derived="true" id="type.9348679">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9348674"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5723">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5718"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348678">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9348674"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5722">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5718"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348678">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9348674"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348389">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9348386"/>
            </content>
        </type>
        <type derived="true" id="type.5434">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5431"/>
            </content>
        </type>
        <type derived="true" id="type.9348389">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9348386"/>
            </content>
        </type>
        <type derived="true" id="type.9348391">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9348386"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5436">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5431"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348390">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9348386"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5435">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5431"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348390">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9348386"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348368">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9348365"/>
            </content>
        </type>
        <type derived="true" id="type.5413">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5410"/>
            </content>
        </type>
        <type derived="true" id="type.9348370">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9348365"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5415">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5410"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348370">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9348365"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5414">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5410"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9348369">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9348365"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5760">
            <name>const RecursiveMutex</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_RecursiveMutex_B9ED5479754BBDDED6A4491348BBD2F20F701D82"/>
            </content>
        </type>
        <type derived="true" id="type.5741">
            <name>const StaticInitCriticalSection</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_StaticInitCriticalSection_39AB37625C7D8624475080E487A05114E48A9C6C"/>
            </content>
        </type>
        <type derived="true" id="type.5742">
            <name>const StaticInitCriticalSection&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_StaticInitCriticalSection_39AB37625C7D8624475080E487A05114E48A9C6C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5755">
            <name>const StreamWriter</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_StreamWriter_40A39F418049D49DB679452BB514CDFE47500311"/>
            </content>
        </type>
        <type derived="true" id="type.9330323">
            <name>const String&lt;char>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.9330318"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5472">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329779"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5542">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329882"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5439">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329714"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5544">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329891"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5547">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329894"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5511">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329842"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5503">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329825"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5501">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329823"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5561">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329932"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5466">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329769"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5471">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329777"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5563">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329934"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5500">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329821"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5484">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329806"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5465">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329767"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5482">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329803"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5481">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329801"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5469">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329774"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5468">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329772"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5480">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329799"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5479">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329797"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5478">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329795"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5477">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329793"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5463">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329764"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5462">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329762"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5460">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329759"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5459">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329757"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5475">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329784"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5458">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329755"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5457">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329746"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5456">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329744"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5455">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329741"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5454">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329739"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5453">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329737"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5452">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329734"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5474">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329782"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5441">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329716"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5761">
            <name>const ThreadingException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ThreadingException_4952259FBBDB6BDFCF1A52EABE2C1A61BF601670"/>
            </content>
        </type>
        <type derived="true" id="type.5762">
            <name>const ThreadingException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ThreadingException_4952259FBBDB6BDFCF1A52EABE2C1A61BF601670"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5461">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329760"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5464">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329765"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5545">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329892"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5476">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329785"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5467">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329770"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5548">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329895"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5543">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329883"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5473">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329780"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5470">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329775"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5765">
            <name>const UnicodeException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnicodeException_F535D36BB8009200467ACEA05819217182306079"/>
            </content>
        </type>
        <type derived="true" id="type.5766">
            <name>const UnicodeException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnicodeException_F535D36BB8009200467ACEA05819217182306079"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5524">
            <name>const Value&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="9329863"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type basic="true" id="type.9329187">
            <name>double</name>
        </type>
        <type basic="true" id="type.9329190">
            <name>uchar</name>
        </type>
        <type derived="true" id="type.9329233">
            <name>uchar&amp;</name>
            <content>
                <baseType ref="type.9329190"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9329232">
            <name>uchar*</name>
            <content>
                <baseType ref="type.9329190"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.9329183">
            <name>uint</name>
        </type>
        <type derived="true" id="type.9329212">
            <name>uint&amp;</name>
            <content>
                <baseType ref="type.9329183"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9329211">
            <name>uint*</name>
            <content>
                <baseType ref="type.9329183"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.9329185">
            <name>ulong</name>
        </type>
        <type derived="true" id="type.9329218">
            <name>ulong&amp;</name>
            <content>
                <baseType ref="type.9329185"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9329217">
            <name>ulong*</name>
            <content>
                <baseType ref="type.9329185"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9329329">
            <name>void*</name>
            <content>
                <baseType ref="type.9329191"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.9329189">
            <name>wchar</name>
        </type>
        <type derived="true" id="type.9329230">
            <name>wchar&amp;</name>
            <content>
                <baseType ref="type.9329189"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9329229">
            <name>wchar*</name>
            <content>
                <baseType ref="type.9329189"/>
                <qualifier>*</qualifier>
            </content>
        </type>
    </types>
</library>
