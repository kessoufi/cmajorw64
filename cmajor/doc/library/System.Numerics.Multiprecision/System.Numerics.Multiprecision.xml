<library>
    <name>System.Numerics.Multiprecision</name>
    <style>../../style/cmdoc.css</style>
    <namespaces>
        <namespace id="System.Numerics.Multiprecision">
            <name>System.Numerics.Multiprecision</name>
            <classes>
                <class id="class_BigFloat_BC19EFB82C8E666524B4436C56800B572EFBED53">
                    <name>BigFloat</name>
                    <groupName>BigFloat</groupName>
                    <syntax> public class BigFloat;</syntax>
                    <constructors>
                        <constructor id="default_constructor_BigFloat_93627EDCE150FB0E6A3C69E270EF5A3D78CD4E6F">
                            <name>BigFloat()</name>
                            <syntax>public nothrow BigFloat();</syntax>
                        </constructor>
                        <constructor id="move_constructor_BigFloat_6C11CE3B5E6C96920B4295869E868C328BB6D3B2">
                            <name>BigFloat(BigFloat&amp;&amp; that)</name>
                            <syntax>public nothrow BigFloat(BigFloat&amp;&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.5462724"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="copy_constructor_BigFloat_1F61E552E17087EA5A54972F8181244E0EC960CF">
                            <name>BigFloat(const BigFloat&amp; that)</name>
                            <syntax>public nothrow BigFloat(const BigFloat&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.5462345"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_BigFloat_20895834C351E98079E7C3115BA0027A051253EB">
                            <name>BigFloat(const BigInt&amp; that)</name>
                            <syntax>public nothrow BigFloat(const BigInt&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.5462351"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_BigFloat_8AA5B0FEA3020B51F51CAD27CD80369E60DE1D88">
                            <name>BigFloat(const BigRational&amp; that)</name>
                            <syntax>public nothrow BigFloat(const BigRational&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.5462357"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_BigFloat_5A7F5845E5B2EAEA0A1C2C67115107E0DABA1A8E">
                            <name>BigFloat(const Precision&amp; prec)</name>
                            <syntax>public nothrow explicit BigFloat(const Precision&amp; prec);</syntax>
                            <parameters>
                                <parameter>
                                    <name>prec</name>
                                    <type ref="type.5462339"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_BigFloat_4617CA97E98F7F68740CF339DAF91D915CFA2650">
                            <name>BigFloat(const String&lt;char>&amp; str)</name>
                            <syntax>public BigFloat(const String&lt;char>&amp; str);</syntax>
                            <parameters>
                                <parameter>
                                    <name>str</name>
                                    <type ref="type.5446818"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_BigFloat_3E12EF7782C96A5646F5EC50B60048654D688D9D">
                            <name>BigFloat(const String&lt;char>&amp; str, int base_)</name>
                            <syntax>public BigFloat(const String&lt;char>&amp; str, int base_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>str</name>
                                    <type ref="type.5446818"/>
                                </parameter>
                                <parameter>
                                    <name>base_</name>
                                    <type ref="type.5445693"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_BigFloat_BEC5259CEA939F27B59F690ADEDAFEBC9F1A4D0C">
                            <name>BigFloat(double that)</name>
                            <syntax>public nothrow BigFloat(double that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.5445698"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_BigFloat_B46E7D1133D4E6EC69CB7B5C4480C9D7E7D48468">
                            <name>BigFloat(int that)</name>
                            <syntax>public nothrow BigFloat(int that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.5445693"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_BigFloat_DE636A2776098C7E40417E72AE67777028E701F6">
                            <name>BigFloat(uint that)</name>
                            <syntax>public nothrow BigFloat(uint that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.5445694"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Handle_BigFloat_1417D6A5E5040218CC579E251EBA879B3ACEC024">
                            <name>Handle() const</name>
                            <syntax>public nothrow inline void* Handle() const;</syntax>
                            <returnType ref="type.5445840"/>
                        </function>
                        <function id="member_function_ToDouble_BigFloat_1C528A9567BA04A0264BEC604E7E9DD032674542">
                            <name>ToDouble() const</name>
                            <syntax>public nothrow double ToDouble() const;</syntax>
                            <returnType ref="type.5445698"/>
                        </function>
                        <function id="function_group_ToString_98B3EC27F057E3D2072BD8DC2D98473F5EB390FC">
                            <name>ToString</name>
                            <overloads>
                                <overload id="member_function_ToString_BigFloat_E30E31DC5EF5F17B9EDD35EC0A11B2469C3A9A0D">
                                    <name>ToString() const</name>
                                    <syntax>public nothrow String&lt;char> ToString() const;</syntax>
                                    <returnType ref="type.5446813"/>
                                </overload>
                                <overload id="member_function_ToString_BigFloat_1BFFE7FC67796F2BDA21FC70B9104876FD447ED6">
                                    <name>ToString(int base_) const</name>
                                    <syntax>public nothrow String&lt;char> ToString(int base_) const;</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>base_</name>
                                            <type ref="type.5445693"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.5446813"/>
                                </overload>
                                <overload id="member_function_ToString_BigFloat_2BC083E6A179B017E555D529F1DDCC3938B1C187">
                                    <name>ToString(int base_, uint numDigits) const</name>
                                    <syntax>public nothrow String&lt;char> ToString(int base_, uint numDigits) const;</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>base_</name>
                                            <type ref="type.5445693"/>
                                        </parameter>
                                        <parameter>
                                            <name>numDigits</name>
                                            <type ref="type.5445694"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.5446813"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_op_assign_B5A5FD837F72256AA73DDCB97ADD390F0292332C">
                            <name>operator=</name>
                            <overloads>
                                <overload id="move_assignment_op_assign_BigFloat_9E1BAB4E59CBA74BB30C7567FE9DB4179CE93CF2">
                                    <name>operator=(BigFloat&amp;&amp; @p0)</name>
                                    <syntax>public nothrow default void operator=(BigFloat&amp;&amp; @p0);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>@p0</name>
                                            <type ref="type.5462724"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="copy_assignment_op_assign_BigFloat_FAA70BA19A4265F69079DAC0E86B66977549000C">
                                    <name>operator=(const BigFloat&amp; that)</name>
                                    <syntax>public nothrow void operator=(const BigFloat&amp; that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.5462345"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_op_assign_BigFloat_53494148E45592ED0A47D64E9A68FCC15C31ACB5">
                                    <name>operator=(const BigInt&amp; that)</name>
                                    <syntax>public nothrow void operator=(const BigInt&amp; that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.5462351"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_op_assign_BigFloat_1F87ED7CF5B22797AE35DD8844B35540FF78BFCC">
                                    <name>operator=(const BigRational&amp; that)</name>
                                    <syntax>public nothrow void operator=(const BigRational&amp; that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.5462357"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_op_assign_BigFloat_072C568232242F7C22BEC668D93A3B33782D2F09">
                                    <name>operator=(double that)</name>
                                    <syntax>public nothrow void operator=(double that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.5445698"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_op_assign_BigFloat_4F1B356E056A725F9F8DD930B7D832036107EF1F">
                                    <name>operator=(int that)</name>
                                    <syntax>public nothrow void operator=(int that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.5445693"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_op_assign_BigFloat_59BCB3563F5BF847BFD4B3FE6D5D72F826C9294F">
                                    <name>operator=(uint that)</name>
                                    <syntax>public nothrow void operator=(uint that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.5445694"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                    </functions>
                </class>
                <class id="class_BigFloatDefaultPrecisionSetter_CB4ACD3C0708237EDA437E4EAEBD18268C65BDFB">
                    <name>BigFloatDefaultPrecisionSetter</name>
                    <groupName>BigFloatDefaultPrecisionSetter</groupName>
                    <syntax> public static class BigFloatDefaultPrecisionSetter;</syntax>
                    <staticMemberFunctions>
                        <function id="member_function_Init_BigFloatDefaultPrecisionSetter_466501FD7806CCA3447F4EAC73B22A8C51582068">
                            <name>Init()</name>
                            <syntax>public static nothrow void Init();</syntax>
                        </function>
                    </staticMemberFunctions>
                </class>
                <class id="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0">
                    <name>BigInt</name>
                    <groupName>BigInt</groupName>
                    <syntax> public class BigInt;</syntax>
                    <constructors>
                        <constructor id="default_constructor_BigInt_F0D8CC45932E09FAA2EB14A8B64247F39C1EFFB7">
                            <name>BigInt()</name>
                            <syntax>public nothrow BigInt();</syntax>
                        </constructor>
                        <constructor id="move_constructor_BigInt_D09987D7C430C2B3B3453A653FBAC4415D47F81A">
                            <name>BigInt(BigInt&amp;&amp; that)</name>
                            <syntax>public nothrow BigInt(BigInt&amp;&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.5462725"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="copy_constructor_BigInt_FEDC121C2BA0FAF385677CE5CDF2167A78328312">
                            <name>BigInt(const BigInt&amp; that)</name>
                            <syntax>public nothrow BigInt(const BigInt&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.5462351"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_BigInt_B88EFB5B832B57059DB131C18BB6F5EE8DF4483D">
                            <name>BigInt(const String&lt;char>&amp; str)</name>
                            <syntax>public BigInt(const String&lt;char>&amp; str);</syntax>
                            <parameters>
                                <parameter>
                                    <name>str</name>
                                    <type ref="type.5446818"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_BigInt_F81F5A54F2CD3D6F05A0021F721AB3FA30AAE086">
                            <name>BigInt(const String&lt;char>&amp; str, int base_)</name>
                            <syntax>public BigInt(const String&lt;char>&amp; str, int base_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>str</name>
                                    <type ref="type.5446818"/>
                                </parameter>
                                <parameter>
                                    <name>base_</name>
                                    <type ref="type.5445693"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_BigInt_47A90AE6B6DCC8EA1BFDBFD2D18FAB80E68E02CE">
                            <name>BigInt(int that)</name>
                            <syntax>public nothrow BigInt(int that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.5445693"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_BigInt_4F93C9E2AA2CF328A1038B63471043F3B6916D4F">
                            <name>BigInt(uint that)</name>
                            <syntax>public nothrow BigInt(uint that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.5445694"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Handle_BigInt_BBA7C4AD8C6B37F828A4EE438EAE4366E13D0BBA">
                            <name>Handle() const</name>
                            <syntax>public nothrow inline void* Handle() const;</syntax>
                            <returnType ref="type.5445840"/>
                        </function>
                        <function id="function_group_ToString_38A1AA35A0463572A5F37530342D49BF3F84209A">
                            <name>ToString</name>
                            <overloads>
                                <overload id="member_function_ToString_BigInt_81B193B60976E09DD78E3CF9D244111E98198646">
                                    <name>ToString() const</name>
                                    <syntax>public nothrow String&lt;char> ToString() const;</syntax>
                                    <returnType ref="type.5446813"/>
                                </overload>
                                <overload id="member_function_ToString_BigInt_EF2C39166B714AD2A345836EA019462E561BBFFE">
                                    <name>ToString(int base_) const</name>
                                    <syntax>public nothrow String&lt;char> ToString(int base_) const;</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>base_</name>
                                            <type ref="type.5445693"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.5446813"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_op_assign_70E1728FD2D77DE93BCD772643DC644EA2344232">
                            <name>operator=</name>
                            <overloads>
                                <overload id="move_assignment_op_assign_BigInt_DC3FCEAE0B510623A25F20290991267D0226D4B4">
                                    <name>operator=(BigInt&amp;&amp; that)</name>
                                    <syntax>public nothrow default void operator=(BigInt&amp;&amp; that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.5462725"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="copy_assignment_op_assign_BigInt_D8618CCF9748BC2CD1F5A48DDF578A1FEA88EBF2">
                                    <name>operator=(const BigInt&amp; that)</name>
                                    <syntax>public nothrow void operator=(const BigInt&amp; that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.5462351"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_op_assign_BigInt_4D6E717A2215A11ADBF322A17C7AD5877511C50E">
                                    <name>operator=(int that)</name>
                                    <syntax>public nothrow void operator=(int that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.5445693"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_op_assign_BigInt_BE9829921A6677F81143E1F1F4BDFE371F966ADD">
                                    <name>operator=(uint that)</name>
                                    <syntax>public nothrow void operator=(uint that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.5445694"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                    </functions>
                </class>
                <class id="class_BigRational_0F62DE7516E5ADB5CE79939E2167456710EF7B23">
                    <name>BigRational</name>
                    <groupName>BigRational</groupName>
                    <syntax> public class BigRational;</syntax>
                    <constructors>
                        <constructor id="default_constructor_BigRational_9DE79FAB17EB1D58E27ED82452FF005E17024137">
                            <name>BigRational()</name>
                            <syntax>public nothrow BigRational();</syntax>
                        </constructor>
                        <constructor id="move_constructor_BigRational_97DF5234EF8EC351D955461A3927AF0904CEDEED">
                            <name>BigRational(BigRational&amp;&amp; that)</name>
                            <syntax>public nothrow BigRational(BigRational&amp;&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.5462726"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_BigRational_E10112D5054C49BE989E0D6579FD11A918622AF4">
                            <name>BigRational(const BigInt&amp; that)</name>
                            <syntax>public nothrow BigRational(const BigInt&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.5462351"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="copy_constructor_BigRational_EAFD5EE0FD87C90EDECAF123753D4E73D6AAE6A9">
                            <name>BigRational(const BigRational&amp; that)</name>
                            <syntax>public nothrow BigRational(const BigRational&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.5462357"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_BigRational_0B966659253AAA93D4984CCD6043717020B06C7F">
                            <name>BigRational(const String&lt;char>&amp; str)</name>
                            <syntax>public BigRational(const String&lt;char>&amp; str);</syntax>
                            <parameters>
                                <parameter>
                                    <name>str</name>
                                    <type ref="type.5446818"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_BigRational_D417EECACBCE9AB213A03F148A45A2587D2C3EDC">
                            <name>BigRational(const String&lt;char>&amp; str, int base_)</name>
                            <syntax>public BigRational(const String&lt;char>&amp; str, int base_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>str</name>
                                    <type ref="type.5446818"/>
                                </parameter>
                                <parameter>
                                    <name>base_</name>
                                    <type ref="type.5445693"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_BigRational_27F63093542FAAB786B5194C678BA4BC3B10821F">
                            <name>BigRational(int that)</name>
                            <syntax>public nothrow BigRational(int that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.5445693"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_BigRational_E54905588F1D534D060391B3F51005BDAFE376B6">
                            <name>BigRational(uint that)</name>
                            <syntax>public nothrow BigRational(uint that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.5445694"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Denominator_BigRational_93F785422587940FDBD8744DDE8EDB3BEC34E9AE">
                            <name>Denominator() const</name>
                            <syntax>public nothrow BigInt Denominator() const;</syntax>
                            <returnType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
                        </function>
                        <function id="member_function_Handle_BigRational_4B4A4C010B5C73524D802A8358AF857B3C7E2041">
                            <name>Handle() const</name>
                            <syntax>public nothrow inline void* Handle() const;</syntax>
                            <returnType ref="type.5445840"/>
                        </function>
                        <function id="member_function_Numerator_BigRational_57AA95ECA704B7D02CAF2FAEC1107D71860712C0">
                            <name>Numerator() const</name>
                            <syntax>public nothrow BigInt Numerator() const;</syntax>
                            <returnType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
                        </function>
                        <function id="function_group_ToString_9081DE02019B34FDFB3C2AA6156C9E659D88201A">
                            <name>ToString</name>
                            <overloads>
                                <overload id="member_function_ToString_BigRational_C879483567FBA605CCF5B9D89C48D75497225E2B">
                                    <name>ToString() const</name>
                                    <syntax>public nothrow String&lt;char> ToString() const;</syntax>
                                    <returnType ref="type.5446813"/>
                                </overload>
                                <overload id="member_function_ToString_BigRational_52226403A912990BB98B1186A02D3B508FE205A8">
                                    <name>ToString(int base_) const</name>
                                    <syntax>public nothrow String&lt;char> ToString(int base_) const;</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>base_</name>
                                            <type ref="type.5445693"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.5446813"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_op_assign_75227836E1BEB739B20F4AF2446D905A62609D07">
                            <name>operator=</name>
                            <overloads>
                                <overload id="move_assignment_op_assign_BigRational_F40F9BE8C7C6FEF21E9226ADE79E7DFCB64FCDDF">
                                    <name>operator=(BigRational&amp;&amp; that)</name>
                                    <syntax>public nothrow default void operator=(BigRational&amp;&amp; that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.5462726"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="copy_assignment_op_assign_BigRational_A1C2A56E36337DD74601196A898C79636CEA6AB3">
                                    <name>operator=(const BigRational&amp; that)</name>
                                    <syntax>public nothrow void operator=(const BigRational&amp; that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.5462357"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                    </functions>
                </class>
                <class id="class_Precision_9DAFEB710FD18878097281A53A7F8764341F0B2A">
                    <name>Precision</name>
                    <groupName>Precision</groupName>
                    <syntax> public class Precision;</syntax>
                    <constructors>
                        <constructor id="default_constructor_Precision_A108FFE15EB702D0AD136DEC7FDAE68F99EA056A">
                            <name>Precision()</name>
                            <syntax>public nothrow Precision();</syntax>
                        </constructor>
                        <constructor id="constructor_Precision_84AC8A34F35EE7259416A6E9DB6CDF22FFE47A09">
                            <name>Precision(uint prec_)</name>
                            <syntax>public nothrow explicit Precision(uint prec_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>prec_</name>
                                    <type ref="type.5445694"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_ToUInt_Precision_A1E388CD72EA93FEF3914CFC6942F83536BFF323">
                            <name>ToUInt() const</name>
                            <syntax>public nothrow uint ToUInt() const;</syntax>
                            <returnType ref="type.5445694"/>
                        </function>
                    </functions>
                </class>
            </classes>
            <functions>
                <function id="function_group_Abs_E4CE68D81FB8D5B1A65D79ED0BA7D4358D27A208">
                    <name>Abs</name>
                    <overloads>
                        <overload id="function_Abs_7AF65AE95722C52CB1ADD3B39BA32D2C508E3BE3">
                            <name>Abs(const BigFloat&amp; x)</name>
                            <syntax>public nothrow BigFloat Abs(const BigFloat&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.5462345"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_BigFloat_BC19EFB82C8E666524B4436C56800B572EFBED53"/>
                        </overload>
                        <overload id="function_Abs_F9EBD9B5E297B955626D9D7627866DF6D574D01D">
                            <name>Abs(const BigInt&amp; x)</name>
                            <syntax>public nothrow BigInt Abs(const BigInt&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.5462351"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
                        </overload>
                        <overload id="function_Abs_75D9575092CEFB070B30DCC89DB9675A48C75450">
                            <name>Abs(const BigRational&amp; x)</name>
                            <syntax>public nothrow BigRational Abs(const BigRational&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.5462357"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_BigRational_0F62DE7516E5ADB5CE79939E2167456710EF7B23"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_Ceil_C817E559F2C738FBD22975B3D10B9290702092FA">
                    <name>Ceil(const BigFloat&amp; x)</name>
                    <syntax>public nothrow BigFloat Ceil(const BigFloat&amp; x);</syntax>
                    <parameters>
                        <parameter>
                            <name>x</name>
                            <type ref="type.5462345"/>
                        </parameter>
                    </parameters>
                    <returnType ref="class_BigFloat_BC19EFB82C8E666524B4436C56800B572EFBED53"/>
                </function>
                <function id="function_ClearBit_5D06E02EC012493FA5CF446EFCA8D186C858AD3C">
                    <name>ClearBit(BigInt&amp; x, uint bitIndex)</name>
                    <syntax>public nothrow void ClearBit(BigInt&amp; x, uint bitIndex);</syntax>
                    <parameters>
                        <parameter>
                            <name>x</name>
                            <type ref="type.5462348"/>
                        </parameter>
                        <parameter>
                            <name>bitIndex</name>
                            <type ref="type.5445694"/>
                        </parameter>
                    </parameters>
                </function>
                <function id="function_Floor_8415F06A552A52B7B001DF605E48DC8A5E763A0E">
                    <name>Floor(const BigFloat&amp; x)</name>
                    <syntax>public nothrow BigFloat Floor(const BigFloat&amp; x);</syntax>
                    <parameters>
                        <parameter>
                            <name>x</name>
                            <type ref="type.5462345"/>
                        </parameter>
                    </parameters>
                    <returnType ref="class_BigFloat_BC19EFB82C8E666524B4436C56800B572EFBED53"/>
                </function>
                <function id="function_GetBigFloatDefaultPrecision_483AC84D8899A5A9226693C3E387D31527352A29">
                    <name>GetBigFloatDefaultPrecision()</name>
                    <syntax>public nothrow uint GetBigFloatDefaultPrecision();</syntax>
                    <returnType ref="type.5445694"/>
                </function>
                <function id="function_SetBit_89FDAEFA3B0863EB2A94108DC13944EB3C66F06E">
                    <name>SetBit(BigInt&amp; x, uint bitIndex)</name>
                    <syntax>public nothrow void SetBit(BigInt&amp; x, uint bitIndex);</syntax>
                    <parameters>
                        <parameter>
                            <name>x</name>
                            <type ref="type.5462348"/>
                        </parameter>
                        <parameter>
                            <name>bitIndex</name>
                            <type ref="type.5445694"/>
                        </parameter>
                    </parameters>
                </function>
                <function id="function_Sqrt_1255F3C4594C8479BD9B55E746F127A4B215C584">
                    <name>Sqrt(const BigFloat&amp; x)</name>
                    <syntax>public nothrow BigFloat Sqrt(const BigFloat&amp; x);</syntax>
                    <parameters>
                        <parameter>
                            <name>x</name>
                            <type ref="type.5462345"/>
                        </parameter>
                    </parameters>
                    <returnType ref="class_BigFloat_BC19EFB82C8E666524B4436C56800B572EFBED53"/>
                </function>
                <function id="function_TestBit_38E54EA4251112CCB31E9E78644C86EEDBCF29C5">
                    <name>TestBit(BigInt&amp; x, uint bitIndex)</name>
                    <syntax>public nothrow bool TestBit(BigInt&amp; x, uint bitIndex);</syntax>
                    <parameters>
                        <parameter>
                            <name>x</name>
                            <type ref="type.5462348"/>
                        </parameter>
                        <parameter>
                            <name>bitIndex</name>
                            <type ref="type.5445694"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.5445688"/>
                </function>
                <function id="function_ToggleBit_2866B63CAB922D367955045744679F9D06F71EB7">
                    <name>ToggleBit(BigInt&amp; x, uint bitIndex)</name>
                    <syntax>public nothrow void ToggleBit(BigInt&amp; x, uint bitIndex);</syntax>
                    <parameters>
                        <parameter>
                            <name>x</name>
                            <type ref="type.5462348"/>
                        </parameter>
                        <parameter>
                            <name>bitIndex</name>
                            <type ref="type.5445694"/>
                        </parameter>
                    </parameters>
                </function>
                <function id="function_Trunc_8A007277928B2C2F16C0FA3DB750A307F2F61A88">
                    <name>Trunc(const BigFloat&amp; x)</name>
                    <syntax>public nothrow BigFloat Trunc(const BigFloat&amp; x);</syntax>
                    <parameters>
                        <parameter>
                            <name>x</name>
                            <type ref="type.5462345"/>
                        </parameter>
                    </parameters>
                    <returnType ref="class_BigFloat_BC19EFB82C8E666524B4436C56800B572EFBED53"/>
                </function>
                <function id="function_op_rem_2B0C09A64E292F4D12091D04EDC86AC780DDAB5D">
                    <name>operator%(const BigInt&amp; left, const BigInt&amp; right)</name>
                    <syntax>public nothrow BigInt operator%(const BigInt&amp; left, const BigInt&amp; right);</syntax>
                    <parameters>
                        <parameter>
                            <name>left</name>
                            <type ref="type.5462351"/>
                        </parameter>
                        <parameter>
                            <name>right</name>
                            <type ref="type.5462351"/>
                        </parameter>
                    </parameters>
                    <returnType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
                </function>
                <function id="function_op_and_EC306043569A570820AF0BD9C636E5A9BA3C6C57">
                    <name>operator&amp;(const BigInt&amp; left, const BigInt&amp; right)</name>
                    <syntax>public nothrow BigInt operator&amp;(const BigInt&amp; left, const BigInt&amp; right);</syntax>
                    <parameters>
                        <parameter>
                            <name>left</name>
                            <type ref="type.5462351"/>
                        </parameter>
                        <parameter>
                            <name>right</name>
                            <type ref="type.5462351"/>
                        </parameter>
                    </parameters>
                    <returnType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
                </function>
                <function id="function_group_op_star_33CA2CCCC406AC14ACB6EE8CAAD649263ABEB595">
                    <name>operator*</name>
                    <overloads>
                        <overload id="function_op_star_29C14CA47F9DE49F712F4A8398692392678764D4">
                            <name>operator*(const BigFloat&amp; left, const BigFloat&amp; right)</name>
                            <syntax>public nothrow BigFloat operator*(const BigFloat&amp; left, const BigFloat&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.5462345"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.5462345"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_BigFloat_BC19EFB82C8E666524B4436C56800B572EFBED53"/>
                        </overload>
                        <overload id="function_op_star_7DA2D996E7725DD3B92C7D39EC7BDA80ECDF1B20">
                            <name>operator*(const BigInt&amp; left, const BigInt&amp; right)</name>
                            <syntax>public nothrow BigInt operator*(const BigInt&amp; left, const BigInt&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.5462351"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.5462351"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
                        </overload>
                        <overload id="function_op_star_B61A03E02FC293D628B81BF2CFBCEA30521DBB65">
                            <name>operator*(const BigRational&amp; left, const BigRational&amp; right)</name>
                            <syntax>public nothrow BigRational operator*(const BigRational&amp; left, const BigRational&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.5462357"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.5462357"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_BigRational_0F62DE7516E5ADB5CE79939E2167456710EF7B23"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_op_plus_56A27315B56A578F0EF8630C0FF9385E5BE979DC">
                    <name>operator+</name>
                    <overloads>
                        <overload id="function_op_plus_D93C682747818BA5D9D7B791D111D1101439A5DB">
                            <name>operator+(const BigFloat&amp; left, const BigFloat&amp; right)</name>
                            <syntax>public nothrow BigFloat operator+(const BigFloat&amp; left, const BigFloat&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.5462345"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.5462345"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_BigFloat_BC19EFB82C8E666524B4436C56800B572EFBED53"/>
                        </overload>
                        <overload id="function_op_plus_EA427371E605518798A3E8A1CAEBF51E53B30955">
                            <name>operator+(const BigInt&amp; left, const BigInt&amp; right)</name>
                            <syntax>public nothrow BigInt operator+(const BigInt&amp; left, const BigInt&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.5462351"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.5462351"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
                        </overload>
                        <overload id="function_op_plus_A05F8F6C489F7EFA03E4A3417E50D280E85B48A0">
                            <name>operator+(const BigRational&amp; left, const BigRational&amp; right)</name>
                            <syntax>public nothrow BigRational operator+(const BigRational&amp; left, const BigRational&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.5462357"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.5462357"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_BigRational_0F62DE7516E5ADB5CE79939E2167456710EF7B23"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_op_minus_332A4C7FC57A2990CF94BAAD11CCFC1B616D7B46">
                    <name>operator-</name>
                    <overloads>
                        <overload id="function_op_minus_99C9221D98E252F2FCE33A60D0BDFC137C8C0FE9">
                            <name>operator-(const BigFloat&amp; left, const BigFloat&amp; right)</name>
                            <syntax>public nothrow BigFloat operator-(const BigFloat&amp; left, const BigFloat&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.5462345"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.5462345"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_BigFloat_BC19EFB82C8E666524B4436C56800B572EFBED53"/>
                        </overload>
                        <overload id="function_op_minus_CEEA9BCD92DBE119988EB64738734AE80E018FB5">
                            <name>operator-(const BigFloat&amp; x)</name>
                            <syntax>public nothrow BigFloat operator-(const BigFloat&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.5462345"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_BigFloat_BC19EFB82C8E666524B4436C56800B572EFBED53"/>
                        </overload>
                        <overload id="function_op_minus_2C757867007F6B36E4D047F5BE1D206AD00774C1">
                            <name>operator-(const BigInt&amp; left, const BigInt&amp; right)</name>
                            <syntax>public nothrow BigInt operator-(const BigInt&amp; left, const BigInt&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.5462351"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.5462351"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
                        </overload>
                        <overload id="function_op_minus_2D312A4E8EA0F7FCFAB262227D11E8CABEB9ED3D">
                            <name>operator-(const BigInt&amp; x)</name>
                            <syntax>public nothrow BigInt operator-(const BigInt&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.5462351"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
                        </overload>
                        <overload id="function_op_minus_C7AB9CC4A7F3B11D26791CE549EC58B79FAE4B39">
                            <name>operator-(const BigRational&amp; left, const BigRational&amp; right)</name>
                            <syntax>public nothrow BigRational operator-(const BigRational&amp; left, const BigRational&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.5462357"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.5462357"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_BigRational_0F62DE7516E5ADB5CE79939E2167456710EF7B23"/>
                        </overload>
                        <overload id="function_op_minus_966229DDAD79D88421205EABD24D495B8C62DEB2">
                            <name>operator-(const BigRational&amp; x)</name>
                            <syntax>public nothrow BigRational operator-(const BigRational&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.5462357"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_BigRational_0F62DE7516E5ADB5CE79939E2167456710EF7B23"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_op_div_4362D23971F70C9242138FDD0E5E82AAED15E5A4">
                    <name>operator/</name>
                    <overloads>
                        <overload id="function_op_div_50F27EF62AF5344792B487CCC0274A0D11DD77F9">
                            <name>operator/(const BigFloat&amp; left, const BigFloat&amp; right)</name>
                            <syntax>public nothrow BigFloat operator/(const BigFloat&amp; left, const BigFloat&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.5462345"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.5462345"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_BigFloat_BC19EFB82C8E666524B4436C56800B572EFBED53"/>
                        </overload>
                        <overload id="function_op_div_0181C3610D16D6998B08782D86642594FC778E36">
                            <name>operator/(const BigInt&amp; left, const BigInt&amp; right)</name>
                            <syntax>public nothrow BigInt operator/(const BigInt&amp; left, const BigInt&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.5462351"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.5462351"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
                        </overload>
                        <overload id="function_op_div_E24C6253EDE268977AB8DBF1085636DBCB4D26E8">
                            <name>operator/(const BigRational&amp; left, const BigRational&amp; right)</name>
                            <syntax>public nothrow BigRational operator/(const BigRational&amp; left, const BigRational&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.5462357"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.5462357"/>
                                </parameter>
                            </parameters>
                            <returnType ref="class_BigRational_0F62DE7516E5ADB5CE79939E2167456710EF7B23"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_op_less_01AD50632F343E948CAE58C5DED9091EFC0C8AFF">
                    <name>operator&lt;</name>
                    <overloads>
                        <overload id="function_op_less_778CB342C328F87381B0D038924CC6DCD7C1C65F">
                            <name>operator&lt;(const BigFloat&amp; left, const BigFloat&amp; right)</name>
                            <syntax>public nothrow bool operator&lt;(const BigFloat&amp; left, const BigFloat&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.5462345"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.5462345"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.5445688"/>
                        </overload>
                        <overload id="function_op_less_D4F7C5613F8286585A8FAE55078BF3A240CDCDF7">
                            <name>operator&lt;(const BigInt&amp; left, const BigInt&amp; right)</name>
                            <syntax>public nothrow bool operator&lt;(const BigInt&amp; left, const BigInt&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.5462351"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.5462351"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.5445688"/>
                        </overload>
                        <overload id="function_op_less_C3A452199911B0C014169BE00A05B55C2D11A932">
                            <name>operator&lt;(const BigRational&amp; left, const BigRational&amp; right)</name>
                            <syntax>public nothrow bool operator&lt;(const BigRational&amp; left, const BigRational&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.5462357"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.5462357"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.5445688"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_op_shl_2AE956980431DA753E03C4D98C544C64D5AACC77">
                    <name>operator&lt;&lt;</name>
                    <overloads>
                        <overload id="function_op_shl_51185FE91502A20F8199DAAD31F12942792BC6BC">
                            <name>operator&lt;&lt;(OutputStream&amp; s, const BigFloat&amp; x)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, const BigFloat&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.5446505"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.5462345"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.5446505"/>
                        </overload>
                        <overload id="function_op_shl_36B833FDDF2C3535DD58C4EEB2E2F244C32CD4FA">
                            <name>operator&lt;&lt;(OutputStream&amp; s, const BigInt&amp; x)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, const BigInt&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.5446505"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.5462351"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.5446505"/>
                        </overload>
                        <overload id="function_op_shl_265F8C16A6D2F9F29E0FAC407B092302F6995376">
                            <name>operator&lt;&lt;(OutputStream&amp; s, const BigRational&amp; x)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, const BigRational&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.5446505"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.5462357"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.5446505"/>
                        </overload>
                        <overload id="function_op_shl_5109EA5D117645C4982C3975B51A22B43196BDCD">
                            <name>operator&lt;&lt;(StreamWriter&amp; s, const BigInt&amp; x)</name>
                            <syntax>public StreamWriter&amp; operator&lt;&lt;(StreamWriter&amp; s, const BigInt&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.5446514"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.5462351"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.5446514"/>
                        </overload>
                        <overload id="function_op_shl_92BC67114039AB5A6F50E1330AB0576CE0DAFDE8">
                            <name>operator&lt;&lt;(StreamWriter&amp; writer, const BigFloat&amp; x)</name>
                            <syntax>public StreamWriter&amp; operator&lt;&lt;(StreamWriter&amp; writer, const BigFloat&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>writer</name>
                                    <type ref="type.5446514"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.5462345"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.5446514"/>
                        </overload>
                        <overload id="function_op_shl_4FE83EF354E708B1200569E34B607CEB52DA7483">
                            <name>operator&lt;&lt;(StreamWriter&amp; writer, const BigRational&amp; x)</name>
                            <syntax>public StreamWriter&amp; operator&lt;&lt;(StreamWriter&amp; writer, const BigRational&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>writer</name>
                                    <type ref="type.5446514"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.5462357"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.5446514"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_op_eq_E07C6E6EC42CC7A6F491A21ED683ACA7A96D3E15">
                    <name>operator==</name>
                    <overloads>
                        <overload id="function_op_eq_F89F98C7BCDAE1EA7E60CAAE44411BF33A6FF57E">
                            <name>operator==(const BigFloat&amp; left, const BigFloat&amp; right)</name>
                            <syntax>public nothrow bool operator==(const BigFloat&amp; left, const BigFloat&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.5462345"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.5462345"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.5445688"/>
                        </overload>
                        <overload id="function_op_eq_4DF70DC46BAE5102B7B93CAD67CCFAB1EFD41F12">
                            <name>operator==(const BigInt&amp; left, const BigInt&amp; right)</name>
                            <syntax>public nothrow bool operator==(const BigInt&amp; left, const BigInt&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.5462351"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.5462351"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.5445688"/>
                        </overload>
                        <overload id="function_op_eq_ABE9D40B4046D37E72F56D6EC21271BB78A479CF">
                            <name>operator==(const BigRational&amp; left, const BigRational&amp; right)</name>
                            <syntax>public nothrow bool operator==(const BigRational&amp; left, const BigRational&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.5462357"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.5462357"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.5445688"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_op_xor_4F7D875F1408C1AD642ED00AECEE4971D87DB691">
                    <name>operator^(const BigInt&amp; left, const BigInt&amp; right)</name>
                    <syntax>public nothrow BigInt operator^(const BigInt&amp; left, const BigInt&amp; right);</syntax>
                    <parameters>
                        <parameter>
                            <name>left</name>
                            <type ref="type.5462351"/>
                        </parameter>
                        <parameter>
                            <name>right</name>
                            <type ref="type.5462351"/>
                        </parameter>
                    </parameters>
                    <returnType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
                </function>
                <function id="function_op_or_C16146AC5235A380AA8754B8B163BC5B0C53A95F">
                    <name>operator|(const BigInt&amp; left, const BigInt&amp; right)</name>
                    <syntax>public nothrow BigInt operator|(const BigInt&amp; left, const BigInt&amp; right);</syntax>
                    <parameters>
                        <parameter>
                            <name>left</name>
                            <type ref="type.5462351"/>
                        </parameter>
                        <parameter>
                            <name>right</name>
                            <type ref="type.5462351"/>
                        </parameter>
                    </parameters>
                    <returnType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
                </function>
                <function id="function_op_cpl_F2C34039298906124AEC6058776E30FFA1826CCB">
                    <name>operator~(const BigInt&amp; x)</name>
                    <syntax>public nothrow BigInt operator~(const BigInt&amp; x);</syntax>
                    <parameters>
                        <parameter>
                            <name>x</name>
                            <type ref="type.5462351"/>
                        </parameter>
                    </parameters>
                    <returnType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
                </function>
            </functions>
        </namespace>
    </namespaces>
    <types>
        <type id="class_BigFloat_BC19EFB82C8E666524B4436C56800B572EFBED53">
            <name>BigFloat</name>
        </type>
        <type derived="true" id="type.5462342">
            <name>BigFloat&amp;</name>
            <content>
                <baseType ref="class_BigFloat_BC19EFB82C8E666524B4436C56800B572EFBED53"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5462724">
            <name>BigFloat&amp;&amp;</name>
            <content>
                <baseType ref="class_BigFloat_BC19EFB82C8E666524B4436C56800B572EFBED53"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5462341">
            <name>BigFloat*</name>
            <content>
                <baseType ref="class_BigFloat_BC19EFB82C8E666524B4436C56800B572EFBED53"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5462733">
            <name>BigFloat*&amp;</name>
            <content>
                <baseType ref="class_BigFloat_BC19EFB82C8E666524B4436C56800B572EFBED53"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5462732">
            <name>BigFloat**</name>
            <content>
                <baseType ref="class_BigFloat_BC19EFB82C8E666524B4436C56800B572EFBED53"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_BigFloatDefaultPrecisionSetter_CB4ACD3C0708237EDA437E4EAEBD18268C65BDFB">
            <name>BigFloatDefaultPrecisionSetter</name>
        </type>
        <type derived="true" id="type.5462728">
            <name>BigFloatDefaultPrecisionSetter&amp;</name>
            <content>
                <baseType ref="class_BigFloatDefaultPrecisionSetter_CB4ACD3C0708237EDA437E4EAEBD18268C65BDFB"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5462727">
            <name>BigFloatDefaultPrecisionSetter*</name>
            <content>
                <baseType ref="class_BigFloatDefaultPrecisionSetter_CB4ACD3C0708237EDA437E4EAEBD18268C65BDFB"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0">
            <name>BigInt</name>
        </type>
        <type derived="true" id="type.5462348">
            <name>BigInt&amp;</name>
            <content>
                <baseType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5462725">
            <name>BigInt&amp;&amp;</name>
            <content>
                <baseType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5462347">
            <name>BigInt*</name>
            <content>
                <baseType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5462742">
            <name>BigInt*&amp;</name>
            <content>
                <baseType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5462741">
            <name>BigInt**</name>
            <content>
                <baseType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="class_BigRational_0F62DE7516E5ADB5CE79939E2167456710EF7B23">
            <name>BigRational</name>
        </type>
        <type derived="true" id="type.5462354">
            <name>BigRational&amp;</name>
            <content>
                <baseType ref="class_BigRational_0F62DE7516E5ADB5CE79939E2167456710EF7B23"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5462726">
            <name>BigRational&amp;&amp;</name>
            <content>
                <baseType ref="class_BigRational_0F62DE7516E5ADB5CE79939E2167456710EF7B23"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5462353">
            <name>BigRational*</name>
            <content>
                <baseType ref="class_BigRational_0F62DE7516E5ADB5CE79939E2167456710EF7B23"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5462748">
            <name>BigRational*&amp;</name>
            <content>
                <baseType ref="class_BigRational_0F62DE7516E5ADB5CE79939E2167456710EF7B23"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5462747">
            <name>BigRational**</name>
            <content>
                <baseType ref="class_BigRational_0F62DE7516E5ADB5CE79939E2167456710EF7B23"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.5447577" specialization="true">
            <name>Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
            </content>
        </type>
        <type derived="true" id="type.4158">
            <name>Bucket&lt;Pair&lt;K, T>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.5447577"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9" specialization="true">
            <name>Bucket&lt;T></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="5446325"/>
            </content>
        </type>
        <type derived="true" id="type.4166">
            <name>Bucket&lt;T>*&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_Bucket_ValueType_5A3E2F108F8CC061B9AC0A82F50CCDA26037ADCE" specialization="true">
            <name>Bucket&lt;ValueType></name>
            <content>
                <primaryType ref="class_Bucket_T_433E38F4F4F8B8CAD8F9E1BEEE83A583734647E9"/>
                <argumentType ref="5446346"/>
            </content>
        </type>
        <type derived="true" id="type.4179">
            <name>Bucket&lt;ValueType>*&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Bucket_ValueType_5A3E2F108F8CC061B9AC0A82F50CCDA26037ADCE"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4428">
            <name>CodeFormatter&amp;&amp;</name>
            <content>
                <baseType ref="class_CodeFormatter_38898A0914E7D27753F0D42E65A18EC272984F99"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5446787" specialization="true">
            <name>Counter&lt;System.IO.ByteStream></name>
            <content>
                <primaryType ref="class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <argumentType ref="class_ByteStream_3B7A2F3379612ADBD7E416487752A1935AA8B96F"/>
            </content>
        </type>
        <type id="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30" specialization="true">
            <name>Counter&lt;T></name>
            <content>
                <primaryType ref="class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <argumentType ref="5446493"/>
            </content>
        </type>
        <type derived="true" id="type.4251">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4292">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4285">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4263">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4270">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4254">
            <name>Counter&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A" specialization="true">
            <name>Counter&lt;U></name>
            <content>
                <primaryType ref="class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <argumentType ref="5446494"/>
            </content>
        </type>
        <type id="type.class_ForwardList_T_49B88E2B81E13ED03DA3835C7A074DB98CBE7051" specialization="true">
            <name>ForwardList&lt;T></name>
            <content>
                <primaryType ref="class_ForwardList_T_49B88E2B81E13ED03DA3835C7A074DB98CBE7051"/>
                <argumentType ref="5446234"/>
            </content>
        </type>
        <type derived="true" id="type.4116">
            <name>ForwardList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardList_T_49B88E2B81E13ED03DA3835C7A074DB98CBE7051"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA" specialization="true">
            <name>ForwardListNodeIterator&lt;T, R, P></name>
            <content>
                <primaryType ref="class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <argumentType ref="5446230"/>
                <argumentType ref="5446231"/>
                <argumentType ref="5446232"/>
            </content>
        </type>
        <type derived="true" id="type.4112">
            <name>ForwardListNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4113">
            <name>ForwardListNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84" specialization="true">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <argumentType ref="5446236"/>
                <argumentType ref="type.5447146"/>
                <argumentType ref="type.5447148"/>
            </content>
        </type>
        <type derived="true" id="type.4118">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4120">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4115">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_R_T_P_61A6CB12925BCC1B0FE068240087DCBFA0F6EF84"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3" specialization="true">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="class_ForwardListNodeIterator_T_R_P_F664F07C33DBAABDB2487D2FBE1538C3E6F42EBA"/>
                <argumentType ref="5446235"/>
                <argumentType ref="type.5447099"/>
                <argumentType ref="type.5447100"/>
            </content>
        </type>
        <type derived="true" id="type.4117">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4114">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4119">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_ForwardListNodeIterator_T_T_C_R_T_C_P_9A954CA19F40C664A03180CFC9EED709B3C4B0D3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B" specialization="true">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="5446316"/>
                <argumentType ref="type.class_Pair_K_T_4F7B9E9D2CC63EB29C02900F65865A4DE329E980"/>
                <argumentType ref="type.class_SelectFirst_K_T_6517CD3D344AC6593B068C4034F6235FDD661F21"/>
                <argumentType ref="5446318"/>
                <argumentType ref="5446319"/>
            </content>
        </type>
        <type derived="true" id="type.4154">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_K_Pair_K_T_SelectFirst_K_T_H_C_E80C21FB917653DE3CC462FC5CADEEA03F979E2B"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2" specialization="true">
            <name>Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="5446345"/>
                <argumentType ref="5446346"/>
                <argumentType ref="5446347"/>
                <argumentType ref="5446348"/>
                <argumentType ref="5446349"/>
            </content>
        </type>
        <type derived="true" id="type.4174">
            <name>Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_Hashtable_T_T_Identity_T_H_C_73CFDACB21FE662CFE0879B3582A7D1FB223385C" specialization="true">
            <name>Hashtable&lt;T, T, Identity&lt;T>, H, C></name>
            <content>
                <primaryType ref="class_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B254B0B4EA63FC06733945C26C411D4DEE90B7D2"/>
                <argumentType ref="5446325"/>
                <argumentType ref="5446325"/>
                <argumentType ref="type.class_Identity_T_9DD2E12D3D49B8316EA22259EDBD89C3FE6A1C09"/>
                <argumentType ref="5446326"/>
                <argumentType ref="5446327"/>
            </content>
        </type>
        <type derived="true" id="type.4162">
            <name>Hashtable&lt;T, T, Identity&lt;T>, H, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_Hashtable_T_T_Identity_T_H_C_73CFDACB21FE662CFE0879B3582A7D1FB223385C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20" specialization="true">
            <name>LinkedList&lt;T></name>
            <content>
                <primaryType ref="class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <argumentType ref="5446355"/>
            </content>
        </type>
        <type derived="true" id="type.4183">
            <name>LinkedList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4182">
            <name>LinkedList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_LinkedList_T_1596EFE994FFA67F5471B17D62A2A8C45B9A2B20"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5447596" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.5447578"/>
            </content>
        </type>
        <type derived="true" id="type.4157">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5447596"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5447749" specialization="true">
            <name>List&lt;Bucket&lt;T>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.5447732"/>
            </content>
        </type>
        <type derived="true" id="type.4165">
            <name>List&lt;Bucket&lt;T>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5447749"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5447934" specialization="true">
            <name>List&lt;Bucket&lt;ValueType>*></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.5447915"/>
            </content>
        </type>
        <type derived="true" id="type.4178">
            <name>List&lt;Bucket&lt;ValueType>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5447934"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5449304" specialization="true">
            <name>List&lt;String&lt;CharT>></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
            </content>
        </type>
        <type derived="true" id="type.4310">
            <name>List&lt;String&lt;CharT>>&amp;&amp;</name>
            <content>
                <baseType ref="type.5449304"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C" specialization="true">
            <name>List&lt;T></name>
            <content>
                <primaryType ref="class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <argumentType ref="5446496"/>
            </content>
        </type>
        <type derived="true" id="type.4304">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4186">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4222">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_List_T_579A89BF19B54042190CDE2A7E54E1DFAAFDB31C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1" specialization="true">
            <name>LockGuard&lt;Mtx></name>
            <content>
                <primaryType ref="class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
                <argumentType ref="5446391"/>
            </content>
        </type>
        <type derived="true" id="type.4210">
            <name>LockGuard&lt;Mtx>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5451642" specialization="true">
            <name>LockGuard&lt;System.Threading.Mutex></name>
            <content>
                <primaryType ref="class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
                <argumentType ref="class_Mutex_CAF802A5F8A71934B07EA6C23937F60D9AECD650"/>
            </content>
        </type>
        <type derived="true" id="type.4397">
            <name>LockGuard&lt;System.Threading.Mutex>&amp;&amp;</name>
            <content>
                <baseType ref="type.5451642"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4207">
            <name>Mtx&amp;</name>
            <content>
                <baseType ref="5446391"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5446505">
            <name>OutputStream&amp;</name>
            <content>
                <baseType ref="class_OutputStream_D306768ED83C9FB00EA54CD61D604CE2BF727452"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9" specialization="true">
            <name>Pair&lt;T, U></name>
            <content>
                <primaryType ref="class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <argumentType ref="5446405"/>
                <argumentType ref="5446406"/>
            </content>
        </type>
        <type id="class_Precision_9DAFEB710FD18878097281A53A7F8764341F0B2A">
            <name>Precision</name>
        </type>
        <type derived="true" id="type.5462336">
            <name>Precision&amp;</name>
            <content>
                <baseType ref="class_Precision_9DAFEB710FD18878097281A53A7F8764341F0B2A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4438">
            <name>Precision&amp;&amp;</name>
            <content>
                <baseType ref="class_Precision_9DAFEB710FD18878097281A53A7F8764341F0B2A"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5462335">
            <name>Precision*</name>
            <content>
                <baseType ref="class_Precision_9DAFEB710FD18878097281A53A7F8764341F0B2A"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.5450483" specialization="true">
            <name>RandomAccessIter&lt;Age*, const Age*&amp;, const Age**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5446595"/>
                <argumentType ref="type.5450326"/>
                <argumentType ref="type.5450482"/>
            </content>
        </type>
        <type derived="true" id="type.4354">
            <name>RandomAccessIter&lt;Age*, const Age*&amp;, const Age**>&amp;&amp;</name>
            <content>
                <baseType ref="type.5450483"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5451523" specialization="true">
            <name>RandomAccessIter&lt;AliasType*, const AliasType*&amp;, const AliasType**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5446666"/>
                <argumentType ref="type.5451366"/>
                <argumentType ref="type.5451522"/>
            </content>
        </type>
        <type derived="true" id="type.4379">
            <name>RandomAccessIter&lt;AliasType*, const AliasType*&amp;, const AliasType**>&amp;&amp;</name>
            <content>
                <baseType ref="type.5451523"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5451107" specialization="true">
            <name>RandomAccessIter&lt;BidiClass*, const BidiClass*&amp;, const BidiClass**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5446640"/>
                <argumentType ref="type.5450950"/>
                <argumentType ref="type.5451106"/>
            </content>
        </type>
        <type derived="true" id="type.4369">
            <name>RandomAccessIter&lt;BidiClass*, const BidiClass*&amp;, const BidiClass**>&amp;&amp;</name>
            <content>
                <baseType ref="type.5451107"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5451315" specialization="true">
            <name>RandomAccessIter&lt;BidiPairedBracketType*, const BidiPairedBracketType*&amp;, const BidiPairedBracketType**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5446653"/>
                <argumentType ref="type.5451158"/>
                <argumentType ref="type.5451314"/>
            </content>
        </type>
        <type derived="true" id="type.4374">
            <name>RandomAccessIter&lt;BidiPairedBracketType*, const BidiPairedBracketType*&amp;, const BidiPairedBracketType**>&amp;&amp;</name>
            <content>
                <baseType ref="type.5451315"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5449846" specialization="true">
            <name>RandomAccessIter&lt;BinaryProperty*, const BinaryProperty*&amp;, const BinaryProperty**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5446565"/>
                <argumentType ref="type.5449675"/>
                <argumentType ref="type.5449845"/>
            </content>
        </type>
        <type derived="true" id="type.4339">
            <name>RandomAccessIter&lt;BinaryProperty*, const BinaryProperty*&amp;, const BinaryProperty**>&amp;&amp;</name>
            <content>
                <baseType ref="type.5449846"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5450064" specialization="true">
            <name>RandomAccessIter&lt;Block*, const Block*&amp;, const Block**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5446575"/>
                <argumentType ref="type.5449907"/>
                <argumentType ref="type.5450063"/>
            </content>
        </type>
        <type derived="true" id="type.4344">
            <name>RandomAccessIter&lt;Block*, const Block*&amp;, const Block**>&amp;&amp;</name>
            <content>
                <baseType ref="type.5450064"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5447613" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5447578"/>
                <argumentType ref="type.5447611"/>
                <argumentType ref="type.5447612"/>
            </content>
        </type>
        <type id="type.5447691" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5447657"/>
                <argumentType ref="type.5447689"/>
                <argumentType ref="type.5447690"/>
            </content>
        </type>
        <type id="type.5447613" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5447578"/>
                <argumentType ref="type.5447611"/>
                <argumentType ref="type.5447612"/>
            </content>
        </type>
        <type derived="true" id="type.4161">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.5447691"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4156">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.5447613"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5447604" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5447578"/>
                <argumentType ref="type.5447602"/>
                <argumentType ref="type.5447603"/>
            </content>
        </type>
        <type id="type.5447682" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5447657"/>
                <argumentType ref="type.5447680"/>
                <argumentType ref="type.5447681"/>
            </content>
        </type>
        <type derived="true" id="type.4155">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.5447604"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4160">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.5447682"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5450460" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Age*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5450426"/>
                <argumentType ref="type.5450458"/>
                <argumentType ref="type.5450459"/>
            </content>
        </type>
        <type derived="true" id="type.4353">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.5450460"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5450451" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5450426"/>
                <argumentType ref="type.5450449"/>
                <argumentType ref="type.5450450"/>
            </content>
        </type>
        <type derived="true" id="type.4352">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.5450451"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5451500" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5451466"/>
                <argumentType ref="type.5451498"/>
                <argumentType ref="type.5451499"/>
            </content>
        </type>
        <type derived="true" id="type.4378">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.5451500"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5451491" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5451466"/>
                <argumentType ref="type.5451489"/>
                <argumentType ref="type.5451490"/>
            </content>
        </type>
        <type derived="true" id="type.4377">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.5451491"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5451084" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5451050"/>
                <argumentType ref="type.5451082"/>
                <argumentType ref="type.5451083"/>
            </content>
        </type>
        <type derived="true" id="type.4368">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.5451084"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5451075" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5451050"/>
                <argumentType ref="type.5451073"/>
                <argumentType ref="type.5451074"/>
            </content>
        </type>
        <type derived="true" id="type.4367">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.5451075"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5451292" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5451258"/>
                <argumentType ref="type.5451290"/>
                <argumentType ref="type.5451291"/>
            </content>
        </type>
        <type derived="true" id="type.4373">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.5451292"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5451283" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5451258"/>
                <argumentType ref="type.5451281"/>
                <argumentType ref="type.5451282"/>
            </content>
        </type>
        <type derived="true" id="type.4372">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.5451283"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5449830" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5449796"/>
                <argumentType ref="type.5449828"/>
                <argumentType ref="type.5449829"/>
            </content>
        </type>
        <type derived="true" id="type.4338">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.5449830"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5449821" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5449796"/>
                <argumentType ref="type.5449819"/>
                <argumentType ref="type.5449820"/>
            </content>
        </type>
        <type derived="true" id="type.4337">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.5449821"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5450041" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Block*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5450007"/>
                <argumentType ref="type.5450039"/>
                <argumentType ref="type.5450040"/>
            </content>
        </type>
        <type derived="true" id="type.4343">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.5450041"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5450032" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5450007"/>
                <argumentType ref="type.5450030"/>
                <argumentType ref="type.5450031"/>
            </content>
        </type>
        <type derived="true" id="type.4342">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.5450032"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5450252" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5450218"/>
                <argumentType ref="type.5450250"/>
                <argumentType ref="type.5450251"/>
            </content>
        </type>
        <type derived="true" id="type.4348">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.5450252"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5450243" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5450218"/>
                <argumentType ref="type.5450241"/>
                <argumentType ref="type.5450242"/>
            </content>
        </type>
        <type derived="true" id="type.4347">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.5450243"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5450876" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5450842"/>
                <argumentType ref="type.5450874"/>
                <argumentType ref="type.5450875"/>
            </content>
        </type>
        <type derived="true" id="type.4363">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.5450876"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5450867" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5450842"/>
                <argumentType ref="type.5450865"/>
                <argumentType ref="type.5450866"/>
            </content>
        </type>
        <type derived="true" id="type.4362">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.5450867"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5450668" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Script*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5450634"/>
                <argumentType ref="type.5450666"/>
                <argumentType ref="type.5450667"/>
            </content>
        </type>
        <type derived="true" id="type.4358">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.5450668"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5450659" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5450634"/>
                <argumentType ref="type.5450657"/>
                <argumentType ref="type.5450658"/>
            </content>
        </type>
        <type derived="true" id="type.4357">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.5450659"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5450384" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5450350"/>
                <argumentType ref="type.5450382"/>
                <argumentType ref="type.5450383"/>
            </content>
        </type>
        <type derived="true" id="type.4351">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.5450384"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5450375" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5450350"/>
                <argumentType ref="type.5450373"/>
                <argumentType ref="type.5450374"/>
            </content>
        </type>
        <type derived="true" id="type.4350">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.5450375"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5451424" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5451390"/>
                <argumentType ref="type.5451422"/>
                <argumentType ref="type.5451423"/>
            </content>
        </type>
        <type derived="true" id="type.4376">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.5451424"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5451415" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5451390"/>
                <argumentType ref="type.5451413"/>
                <argumentType ref="type.5451414"/>
            </content>
        </type>
        <type derived="true" id="type.4375">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.5451415"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5451008" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5450974"/>
                <argumentType ref="type.5451006"/>
                <argumentType ref="type.5451007"/>
            </content>
        </type>
        <type derived="true" id="type.4366">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.5451008"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5450999" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5450974"/>
                <argumentType ref="type.5450997"/>
                <argumentType ref="type.5450998"/>
            </content>
        </type>
        <type derived="true" id="type.4365">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.5450999"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5451216" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5451182"/>
                <argumentType ref="type.5451214"/>
                <argumentType ref="type.5451215"/>
            </content>
        </type>
        <type derived="true" id="type.4371">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.5451216"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5451207" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5451182"/>
                <argumentType ref="type.5451205"/>
                <argumentType ref="type.5451206"/>
            </content>
        </type>
        <type derived="true" id="type.4370">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.5451207"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5449733" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5449699"/>
                <argumentType ref="type.5449731"/>
                <argumentType ref="type.5449732"/>
            </content>
        </type>
        <type derived="true" id="type.4336">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.5449733"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5449724" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5449699"/>
                <argumentType ref="type.5449722"/>
                <argumentType ref="type.5449723"/>
            </content>
        </type>
        <type derived="true" id="type.4335">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.5449724"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5449965" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5449931"/>
                <argumentType ref="type.5449963"/>
                <argumentType ref="type.5449964"/>
            </content>
        </type>
        <type derived="true" id="type.4341">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.5449965"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5449956" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5449931"/>
                <argumentType ref="type.5449954"/>
                <argumentType ref="type.5449955"/>
            </content>
        </type>
        <type derived="true" id="type.4340">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.5449956"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5450176" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5450142"/>
                <argumentType ref="type.5450174"/>
                <argumentType ref="type.5450175"/>
            </content>
        </type>
        <type derived="true" id="type.4346">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.5450176"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5450167" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5450142"/>
                <argumentType ref="type.5450165"/>
                <argumentType ref="type.5450166"/>
            </content>
        </type>
        <type derived="true" id="type.4345">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.5450167"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5450800" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5450766"/>
                <argumentType ref="type.5450798"/>
                <argumentType ref="type.5450799"/>
            </content>
        </type>
        <type derived="true" id="type.4361">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.5450800"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5450791" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5450766"/>
                <argumentType ref="type.5450789"/>
                <argumentType ref="type.5450790"/>
            </content>
        </type>
        <type derived="true" id="type.4360">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.5450791"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5450592" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5450558"/>
                <argumentType ref="type.5450590"/>
                <argumentType ref="type.5450591"/>
            </content>
        </type>
        <type derived="true" id="type.4356">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.5450592"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5450583" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5450558"/>
                <argumentType ref="type.5450581"/>
                <argumentType ref="type.5450582"/>
            </content>
        </type>
        <type derived="true" id="type.4355">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.5450583"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5447766" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5447732"/>
                <argumentType ref="type.5447764"/>
                <argumentType ref="type.5447765"/>
            </content>
        </type>
        <type id="type.5447840" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5447806"/>
                <argumentType ref="type.5447838"/>
                <argumentType ref="type.5447839"/>
            </content>
        </type>
        <type derived="true" id="type.4168">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.5447840"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4164">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.5447766"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5447831" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5447806"/>
                <argumentType ref="type.5447829"/>
                <argumentType ref="type.5447830"/>
            </content>
        </type>
        <type id="type.5447757" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5447732"/>
                <argumentType ref="type.5447755"/>
                <argumentType ref="type.5447756"/>
            </content>
        </type>
        <type derived="true" id="type.4167">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.5447831"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4163">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.5447757"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5447951" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, Bucket&lt;ValueType>*&amp;, Bucket&lt;ValueType>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5447915"/>
                <argumentType ref="type.5447949"/>
                <argumentType ref="type.5447950"/>
            </content>
        </type>
        <type derived="true" id="type.4177">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, Bucket&lt;ValueType>*&amp;, Bucket&lt;ValueType>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.5447951"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5447942" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, const Bucket&lt;ValueType>*&amp;, const Bucket&lt;ValueType>**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5447915"/>
                <argumentType ref="type.5447940"/>
                <argumentType ref="type.5447941"/>
            </content>
        </type>
        <type derived="true" id="type.4176">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, const Bucket&lt;ValueType>*&amp;, const Bucket&lt;ValueType>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.5447942"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF" specialization="true">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="5446520"/>
                <argumentType ref="type.5449482"/>
                <argumentType ref="type.5449483"/>
            </content>
        </type>
        <type derived="true" id="type.4320">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4328">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4312">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4332">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4316">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4306">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4324">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_R_CharT_P_63BB87CDD92CFF56314A0A2EAC74B418ED0A20CF"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966" specialization="true">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="5446519"/>
                <argumentType ref="type.5449425"/>
                <argumentType ref="type.5449426"/>
            </content>
        </type>
        <type derived="true" id="type.4331">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4319">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4315">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4305">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4311">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4323">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4327">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_CharT_CharT_C_R_CharT_C_P_1961C3ADDE0BFA58BCD8EBBFF7E32D09B47B0966"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5450275" specialization="true">
            <name>RandomAccessIter&lt;GeneralCategory*, const GeneralCategory*&amp;, const GeneralCategory**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5446585"/>
                <argumentType ref="type.5450118"/>
                <argumentType ref="type.5450274"/>
            </content>
        </type>
        <type derived="true" id="type.4349">
            <name>RandomAccessIter&lt;GeneralCategory*, const GeneralCategory*&amp;, const GeneralCategory**>&amp;&amp;</name>
            <content>
                <baseType ref="type.5450275"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5450892" specialization="true">
            <name>RandomAccessIter&lt;NumericType*, const NumericType*&amp;, const NumericType**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5446627"/>
                <argumentType ref="type.5450742"/>
                <argumentType ref="type.5450891"/>
            </content>
        </type>
        <type derived="true" id="type.4364">
            <name>RandomAccessIter&lt;NumericType*, const NumericType*&amp;, const NumericType**>&amp;&amp;</name>
            <content>
                <baseType ref="type.5450892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5450691" specialization="true">
            <name>RandomAccessIter&lt;Script*, const Script*&amp;, const Script**></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5446608"/>
                <argumentType ref="type.5450534"/>
                <argumentType ref="type.5450690"/>
            </content>
        </type>
        <type derived="true" id="type.4359">
            <name>RandomAccessIter&lt;Script*, const Script*&amp;, const Script**>&amp;&amp;</name>
            <content>
                <baseType ref="type.5450691"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5449599" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.5449562"/>
                <argumentType ref="type.5449561"/>
            </content>
        </type>
        <type id="type.5449552" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.5449518"/>
                <argumentType ref="type.5449517"/>
            </content>
        </type>
        <type id="type.5449505" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.5449468"/>
                <argumentType ref="type.5449467"/>
            </content>
        </type>
        <type id="type.5449364" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.5449327"/>
                <argumentType ref="type.5449326"/>
            </content>
        </type>
        <type id="type.5449317" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.5449280"/>
                <argumentType ref="type.5449279"/>
            </content>
        </type>
        <type id="type.5449458" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.5449421"/>
                <argumentType ref="type.5449420"/>
            </content>
        </type>
        <type id="type.5449599" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.5449562"/>
                <argumentType ref="type.5449561"/>
            </content>
        </type>
        <type id="type.5449411" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.5449374"/>
                <argumentType ref="type.5449373"/>
            </content>
        </type>
        <type derived="true" id="type.4314">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5449364"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4334">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5449599"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4318">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5449411"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4309">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5449317"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4330">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5449552"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4326">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5449505"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4322">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5449458"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5449592" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.5449565"/>
                <argumentType ref="type.5449564"/>
            </content>
        </type>
        <type id="type.5449451" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.5449424"/>
                <argumentType ref="type.5449423"/>
            </content>
        </type>
        <type id="type.5449404" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.5449377"/>
                <argumentType ref="type.5449376"/>
            </content>
        </type>
        <type id="type.5449545" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.5449521"/>
                <argumentType ref="type.5449520"/>
            </content>
        </type>
        <type id="type.5449357" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.5449330"/>
                <argumentType ref="type.5449329"/>
            </content>
        </type>
        <type id="type.5449310" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.5449283"/>
                <argumentType ref="type.5449282"/>
            </content>
        </type>
        <type id="type.5449498" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.5449471"/>
                <argumentType ref="type.5449470"/>
            </content>
        </type>
        <type derived="true" id="type.4329">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5449545"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4313">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5449357"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4308">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5449310"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4317">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5449404"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4333">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5449592"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4325">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5449498"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4321">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5449451"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5446848" specialization="true">
            <name>RandomAccessIter&lt;String&lt;char>, String&lt;char>&amp;, String&lt;char>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5446813"/>
                <argumentType ref="type.5446815"/>
                <argumentType ref="type.5446814"/>
            </content>
        </type>
        <type derived="true" id="type.4078">
            <name>RandomAccessIter&lt;String&lt;char>, String&lt;char>&amp;, String&lt;char>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5446848"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5446841" specialization="true">
            <name>RandomAccessIter&lt;String&lt;char>, const String&lt;char>&amp;, const String&lt;char>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5446813"/>
                <argumentType ref="type.5446818"/>
                <argumentType ref="type.5446817"/>
            </content>
        </type>
        <type derived="true" id="type.4077">
            <name>RandomAccessIter&lt;String&lt;char>, const String&lt;char>&amp;, const String&lt;char>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5446841"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5446938" specialization="true">
            <name>RandomAccessIter&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5446901"/>
                <argumentType ref="type.5446903"/>
                <argumentType ref="type.5446902"/>
            </content>
        </type>
        <type derived="true" id="type.4097">
            <name>RandomAccessIter&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5446938"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5446931" specialization="true">
            <name>RandomAccessIter&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5446901"/>
                <argumentType ref="type.5446906"/>
                <argumentType ref="type.5446905"/>
            </content>
        </type>
        <type derived="true" id="type.4096">
            <name>RandomAccessIter&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5446931"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5446893" specialization="true">
            <name>RandomAccessIter&lt;String&lt;wchar>, String&lt;wchar>&amp;, String&lt;wchar>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5446856"/>
                <argumentType ref="type.5446858"/>
                <argumentType ref="type.5446857"/>
            </content>
        </type>
        <type derived="true" id="type.4087">
            <name>RandomAccessIter&lt;String&lt;wchar>, String&lt;wchar>&amp;, String&lt;wchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5446893"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5446886" specialization="true">
            <name>RandomAccessIter&lt;String&lt;wchar>, const String&lt;wchar>&amp;, const String&lt;wchar>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5446856"/>
                <argumentType ref="type.5446861"/>
                <argumentType ref="type.5446860"/>
            </content>
        </type>
        <type derived="true" id="type.4086">
            <name>RandomAccessIter&lt;String&lt;wchar>, const String&lt;wchar>&amp;, const String&lt;wchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5446886"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5451553" specialization="true">
            <name>RandomAccessIter&lt;System.Unicode.Alias, Alias&amp;, Alias*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_Alias_F5EF8FC9193282B25B9E84210775A55CF0A14DB2"/>
                <argumentType ref="type.5446679"/>
                <argumentType ref="type.5446678"/>
            </content>
        </type>
        <type derived="true" id="type.4381">
            <name>RandomAccessIter&lt;System.Unicode.Alias, Alias&amp;, Alias*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5451553"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5451546" specialization="true">
            <name>RandomAccessIter&lt;System.Unicode.Alias, const Alias&amp;, const Alias*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="class_Alias_F5EF8FC9193282B25B9E84210775A55CF0A14DB2"/>
                <argumentType ref="type.5446682"/>
                <argumentType ref="type.5446681"/>
            </content>
        </type>
        <type derived="true" id="type.4380">
            <name>RandomAccessIter&lt;System.Unicode.Alias, const Alias&amp;, const Alias*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5451546"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484" specialization="true">
            <name>RandomAccessIter&lt;T, R, P></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="5446414"/>
                <argumentType ref="5446415"/>
                <argumentType ref="5446416"/>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484" specialization="true">
            <name>RandomAccessIter&lt;T, R, P></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="5446426"/>
                <argumentType ref="5446427"/>
                <argumentType ref="5446428"/>
            </content>
        </type>
        <type derived="true" id="type.4229">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4227">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4224">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4223">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4228">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4226">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4225">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7" specialization="true">
            <name>RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="5446366"/>
                <argumentType ref="type.5448146"/>
                <argumentType ref="type.5448147"/>
            </content>
        </type>
        <type derived="true" id="type.4191">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4189">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4185">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4303">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4221">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_R_T_P_43C14701A8FE9992ACA08D3E43EA4149D07C25C7"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892" specialization="true">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="5446366"/>
                <argumentType ref="type.5448136"/>
                <argumentType ref="type.5448137"/>
            </content>
        </type>
        <type derived="true" id="type.4190">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4184">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4220">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4302">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4188">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RandomAccessIter_T_T_C_R_T_C_P_AB1D26FEF8DAA99828EA69283FE1CAA01979C892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5451582" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, UniquePtr&lt;System.Unicode.CharacterInfo>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5451562"/>
                <argumentType ref="type.5451564"/>
                <argumentType ref="type.5451563"/>
            </content>
        </type>
        <type derived="true" id="type.4383">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, UniquePtr&lt;System.Unicode.CharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5451582"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5451575" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, const UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfo>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5451562"/>
                <argumentType ref="type.5451567"/>
                <argumentType ref="type.5451566"/>
            </content>
        </type>
        <type derived="true" id="type.4382">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, const UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5451575"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5451678" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.CharacterInfoPage>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5451658"/>
                <argumentType ref="type.5451660"/>
                <argumentType ref="type.5451659"/>
            </content>
        </type>
        <type derived="true" id="type.4399">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.CharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5451678"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5451671" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, const UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfoPage>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5451658"/>
                <argumentType ref="type.5451663"/>
                <argumentType ref="type.5451662"/>
            </content>
        </type>
        <type derived="true" id="type.4398">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, const UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5451671"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5451610" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5451590"/>
                <argumentType ref="type.5451592"/>
                <argumentType ref="type.5451591"/>
            </content>
        </type>
        <type derived="true" id="type.4385">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5451610"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5451603" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5451590"/>
                <argumentType ref="type.5451595"/>
                <argumentType ref="type.5451594"/>
            </content>
        </type>
        <type derived="true" id="type.4384">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5451603"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5451713" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5451693"/>
                <argumentType ref="type.5451695"/>
                <argumentType ref="type.5451694"/>
            </content>
        </type>
        <type derived="true" id="type.4401">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5451713"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5451706" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5451693"/>
                <argumentType ref="type.5451698"/>
                <argumentType ref="type.5451697"/>
            </content>
        </type>
        <type derived="true" id="type.4400">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5451706"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4199" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5445690"/>
                <argumentType ref="type.5445711"/>
                <argumentType ref="type.5445710"/>
            </content>
        </type>
        <type id="type.5462489" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5445690"/>
                <argumentType ref="type.5445711"/>
                <argumentType ref="type.5445710"/>
            </content>
        </type>
        <type id="type.5448300" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5445690"/>
                <argumentType ref="type.5445711"/>
                <argumentType ref="type.5445710"/>
            </content>
        </type>
        <type derived="true" id="type.5462491">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <baseType ref="type.5462489"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4201">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <baseType ref="type.4199"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5462491">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <baseType ref="type.5462489"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4206">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5448300"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4205">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4199"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4408">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5462489"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5462490">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <baseType ref="type.5462489"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4200">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <baseType ref="type.4199"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5462490">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <baseType ref="type.5462489"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.5462360" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5445699"/>
                <argumentType ref="type.5445738"/>
                <argumentType ref="type.5445737"/>
            </content>
        </type>
        <type id="type.4070" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5445699"/>
                <argumentType ref="type.5445738"/>
                <argumentType ref="type.5445737"/>
            </content>
        </type>
        <type id="type.5462360" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5445699"/>
                <argumentType ref="type.5445738"/>
                <argumentType ref="type.5445737"/>
            </content>
        </type>
        <type derived="true" id="type.5462362">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <baseType ref="type.5462360"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4072">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <baseType ref="type.4070"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5462362">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <baseType ref="type.5462360"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4404">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5462360"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4076">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4070"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5462361">
            <name>RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <baseType ref="type.5462360"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4071">
            <name>RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <baseType ref="type.4070"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5462361">
            <name>RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <baseType ref="type.5462360"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.5446917" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5445701"/>
                <argumentType ref="type.5445744"/>
                <argumentType ref="type.5445743"/>
            </content>
        </type>
        <type id="type.5462379" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5445701"/>
                <argumentType ref="type.5445744"/>
                <argumentType ref="type.5445743"/>
            </content>
        </type>
        <type id="type.4089" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5445701"/>
                <argumentType ref="type.5445744"/>
                <argumentType ref="type.5445743"/>
            </content>
        </type>
        <type derived="true" id="type.4091">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <baseType ref="type.4089"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5462381">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <baseType ref="type.5462379"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4095">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4089"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4098">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5446917"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4406">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5462379"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4090">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <baseType ref="type.4089"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5462380">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <baseType ref="type.5462379"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.5451627" specialization="true">
            <name>RandomAccessIter&lt;uint, const uint&amp;, const uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5445694"/>
                <argumentType ref="type.5451624"/>
                <argumentType ref="type.5451625"/>
            </content>
        </type>
        <type derived="true" id="type.4386">
            <name>RandomAccessIter&lt;uint, const uint&amp;, const uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5451627"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.4387" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5445694"/>
                <argumentType ref="type.5445723"/>
                <argumentType ref="type.5445722"/>
            </content>
        </type>
        <type id="type.5462678" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5445694"/>
                <argumentType ref="type.5445723"/>
                <argumentType ref="type.5445722"/>
            </content>
        </type>
        <type id="type.5451634" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5445694"/>
                <argumentType ref="type.5445723"/>
                <argumentType ref="type.5445722"/>
            </content>
        </type>
        <type derived="true" id="type.5462680">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <baseType ref="type.5462678"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4389">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <baseType ref="type.4387"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5462680">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <baseType ref="type.5462678"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4393">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4387"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4394">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5451634"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4409">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5462678"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4388">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <baseType ref="type.4387"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5462679">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <baseType ref="type.5462678"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.5446960" specialization="true">
            <name>RandomAccessIter&lt;ulong, const ulong&amp;, const ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5445696"/>
                <argumentType ref="type.5446957"/>
                <argumentType ref="type.5446958"/>
            </content>
        </type>
        <type derived="true" id="type.4099">
            <name>RandomAccessIter&lt;ulong, const ulong&amp;, const ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5446960"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5446967" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5445696"/>
                <argumentType ref="type.5445729"/>
                <argumentType ref="type.5445728"/>
            </content>
        </type>
        <type id="type.5462390" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5445696"/>
                <argumentType ref="type.5445729"/>
                <argumentType ref="type.5445728"/>
            </content>
        </type>
        <type id="type.4100" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5445696"/>
                <argumentType ref="type.5445729"/>
                <argumentType ref="type.5445728"/>
            </content>
        </type>
        <type derived="true" id="type.5462392">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <baseType ref="type.5462390"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4102">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <baseType ref="type.4100"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4106">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4100"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4407">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5462390"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4107">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5446967"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4101">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <baseType ref="type.4100"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5462391">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <baseType ref="type.5462390"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.5446872" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5445700"/>
                <argumentType ref="type.5445741"/>
                <argumentType ref="type.5445740"/>
            </content>
        </type>
        <type id="type.5462369" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5445700"/>
                <argumentType ref="type.5445741"/>
                <argumentType ref="type.5445740"/>
            </content>
        </type>
        <type id="type.4079" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="class_RandomAccessIter_T_R_P_E5BB3CAC7F9DBE190F290EC17E5DCE3406706484"/>
                <argumentType ref="type.5445700"/>
                <argumentType ref="type.5445741"/>
                <argumentType ref="type.5445740"/>
            </content>
        </type>
        <type derived="true" id="type.5462371">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <baseType ref="type.5462369"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4081">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <baseType ref="type.4079"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4085">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.4079"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4405">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5462369"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4088">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5446872"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4080">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <baseType ref="type.4079"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5462370">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <baseType ref="type.5462369"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047" specialization="true">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare></name>
            <content>
                <primaryType ref="class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <argumentType ref="5446373"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.class_SelectFirst_Key_Value_5B4B4F4395127EACE930C6095E956250FEB8E2B7"/>
                <argumentType ref="5446375"/>
            </content>
        </type>
        <type derived="true" id="type.4196">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_Key_Pair_Key_Value_SelectFirst_Key_Value_KeyCompare_0CD92BEDBC8318D391FF5E2EA2F015B6477DA047"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2" specialization="true">
            <name>RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare></name>
            <content>
                <primaryType ref="class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <argumentType ref="5446452"/>
                <argumentType ref="5446453"/>
                <argumentType ref="5446454"/>
                <argumentType ref="5446455"/>
            </content>
        </type>
        <type derived="true" id="type.4238">
            <name>RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTree_T_T_Identity_T_C_BC4C30A5A170B2B4B4BF9109198D17D5A1BD03D3" specialization="true">
            <name>RedBlackTree&lt;T, T, Identity&lt;T>, C></name>
            <content>
                <primaryType ref="class_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_DB6FC4C558699B41560FB59DF0566AE96A15B9A2"/>
                <argumentType ref="5446458"/>
                <argumentType ref="5446458"/>
                <argumentType ref="type.class_Identity_T_9DD2E12D3D49B8316EA22259EDBD89C3FE6A1C09"/>
                <argumentType ref="5446459"/>
            </content>
        </type>
        <type derived="true" id="type.4243">
            <name>RedBlackTree&lt;T, T, Identity&lt;T>, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTree_T_T_Identity_T_C_BC4C30A5A170B2B4B4BF9109198D17D5A1BD03D3"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5462297">
            <name>RedBlackTreeNodeBase&amp;</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4067">
            <name>RedBlackTreeNodeBase&amp;</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4427">
            <name>RedBlackTreeNodeBase&amp;&amp;</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5462296">
            <name>RedBlackTreeNodeBase*</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4066">
            <name>RedBlackTreeNodeBase*</name>
            <content>
                <baseType ref="class_RedBlackTreeNodeBase_A9FEDD14E304295EC76EF56880DD6AAFCB6EC948"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.5448264" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.5448225"/>
                <argumentType ref="type.5448224"/>
            </content>
        </type>
        <type derived="true" id="type.4195">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5448264"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5448246" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="type.class_Pair_Key_Value_0B3780B2DBD20159FC18E9CD2405842E7C4C2183"/>
                <argumentType ref="type.5448235"/>
                <argumentType ref="type.5448244"/>
            </content>
        </type>
        <type derived="true" id="type.4194">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.5448246"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, R, P></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="5446448"/>
                <argumentType ref="5446449"/>
                <argumentType ref="5446450"/>
            </content>
        </type>
        <type derived="true" id="type.4234">
            <name>RedBlackTreeNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4235">
            <name>RedBlackTreeNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="5446462"/>
                <argumentType ref="type.5448690"/>
                <argumentType ref="type.5448692"/>
            </content>
        </type>
        <type derived="true" id="type.4248">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4246">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4242">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_R_T_P_728FC4CF206D7C209E9587642D7C4800A8A0E358"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="5446460"/>
                <argumentType ref="type.5448610"/>
                <argumentType ref="type.5448619"/>
            </content>
        </type>
        <type derived="true" id="type.4241">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4245">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4247">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_T_T_C_R_T_C_P_A78787AB6B268B3C9F3B105203C2C0B1914EA603"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_R_ValueType_P_A72EE6DFD58F3068E8C768CB16BF71716048A80D" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="5446453"/>
                <argumentType ref="type.5448517"/>
                <argumentType ref="type.5448519"/>
            </content>
        </type>
        <type derived="true" id="type.4237">
            <name>RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_R_ValueType_P_A72EE6DFD58F3068E8C768CB16BF71716048A80D"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_C_R_ValueType_C_P_62C8FF5559EB06AAFEDF99196CE7BD850F471D11" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*></name>
            <content>
                <primaryType ref="class_RedBlackTreeNodeIterator_T_R_P_6B55278500271829D7E5F7BCD5A22DABD182EF92"/>
                <argumentType ref="5446453"/>
                <argumentType ref="type.5448502"/>
                <argumentType ref="type.5448503"/>
            </content>
        </type>
        <type derived="true" id="type.4236">
            <name>RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_RedBlackTreeNodeIterator_ValueType_ValueType_C_R_ValueType_C_P_62C8FF5559EB06AAFEDF99196CE7BD850F471D11"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076" specialization="true">
            <name>SharedCount&lt;T></name>
            <content>
                <primaryType ref="class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <argumentType ref="5446479"/>
            </content>
        </type>
        <type derived="true" id="type.4287">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4293">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4255">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4265">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4271">
            <name>SharedCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedCount_T_9CD10E14AE3ED976890448663511E7CD78824076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F" specialization="true">
            <name>SharedPtr&lt;T></name>
            <content>
                <primaryType ref="class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <argumentType ref="5446483"/>
            </content>
        </type>
        <type derived="true" id="type.4288">
            <name>SharedPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4295">
            <name>SharedPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4273">
            <name>SharedPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_SharedPtr_T_E2198BEF58335A9A782FD48D7E8DFFD1A2D8865F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4412">
            <name>StaticInitCriticalSection&amp;&amp;</name>
            <content>
                <baseType ref="class_StaticInitCriticalSection_39AB37625C7D8624475080E487A05114E48A9C6C"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5446514">
            <name>StreamWriter&amp;</name>
            <content>
                <baseType ref="class_StreamWriter_40A39F418049D49DB679452BB514CDFE47500311"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC" specialization="true">
            <name>String&lt;CharT></name>
            <content>
                <primaryType ref="class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="5446516"/>
            </content>
        </type>
        <type derived="true" id="type.4307">
            <name>String&lt;CharT>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5446813" specialization="true">
            <name>String&lt;char></name>
            <content>
                <primaryType ref="class_String_CharT_CF8CFC76E94ACA12B05A3C1C384DFA2026CAADAC"/>
                <argumentType ref="type.5445699"/>
            </content>
        </type>
        <type derived="true" id="type.4171">
            <name>T&amp;</name>
            <content>
                <baseType ref="5446334"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4109">
            <name>T&amp;</name>
            <content>
                <baseType ref="5446225"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4173">
            <name>T&amp;</name>
            <content>
                <baseType ref="5446336"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4111">
            <name>T&amp;</name>
            <content>
                <baseType ref="5446227"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4231">
            <name>T&amp;</name>
            <content>
                <baseType ref="5446443"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4233">
            <name>T&amp;</name>
            <content>
                <baseType ref="5446445"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4181">
            <name>T&amp;</name>
            <content>
                <baseType ref="5446353"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4159">
            <name>T&amp;</name>
            <content>
                <baseType ref="5446317"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4301">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="5446496"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4219">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="5446412"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4187">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="5446366"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5448275" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.5448252"/>
            </content>
        </type>
        <type derived="true" id="type.4197">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.5448275"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5448590" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.class_RedBlackTreeNode_T_BD43000C158FD97CD38A6569462D590033079629"/>
            </content>
        </type>
        <type derived="true" id="type.4244">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>>&amp;&amp;</name>
            <content>
                <baseType ref="type.5448590"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5448532" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;ValueType>></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="type.class_RedBlackTreeNode_ValueType_38B50DA62919A6E728F70DA36817024C5A9A8855"/>
            </content>
        </type>
        <type derived="true" id="type.4240">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;ValueType>>&amp;&amp;</name>
            <content>
                <baseType ref="type.5448532"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5451787" specialization="true">
            <name>UniquePtr&lt;System.Exception></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="class_Exception_02AEA5204AD1035A91C2D843597EACBE078C8989"/>
            </content>
        </type>
        <type derived="true" id="type.4403">
            <name>UniquePtr&lt;System.Exception>&amp;&amp;</name>
            <content>
                <baseType ref="type.5451787"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009" specialization="true">
            <name>UniquePtr&lt;T></name>
            <content>
                <primaryType ref="class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <argumentType ref="5446711"/>
            </content>
        </type>
        <type derived="true" id="type.4402">
            <name>UniquePtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_UniquePtr_T_793F841C13E9DD3A6869243C74F1D948C0E04009"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4198">
            <name>Value&amp;</name>
            <content>
                <baseType ref="5446374"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F" specialization="true">
            <name>WeakCount&lt;T></name>
            <content>
                <primaryType ref="class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <argumentType ref="5446479"/>
            </content>
        </type>
        <type derived="true" id="type.4294">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4286">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4272">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4264">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4256">
            <name>WeakCount&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakCount_T_0D8387F035C5F8D80B30EA717671A4B77393C51F"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.5446803" specialization="true">
            <name>WeakPtr&lt;System.IO.ByteStream></name>
            <content>
                <primaryType ref="class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <argumentType ref="class_ByteStream_3B7A2F3379612ADBD7E416487752A1935AA8B96F"/>
            </content>
        </type>
        <type derived="true" id="type.4069">
            <name>WeakPtr&lt;System.IO.ByteStream>&amp;&amp;</name>
            <content>
                <baseType ref="type.5446803"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC" specialization="true">
            <name>WeakPtr&lt;T></name>
            <content>
                <primaryType ref="class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <argumentType ref="5446483"/>
            </content>
        </type>
        <type derived="true" id="type.4289">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4278">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4280">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4296">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4299">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4274">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4276">
            <name>WeakPtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.class_WeakPtr_U_DC1FE0F847E4C954B399A783A0BC0307D485B021" specialization="true">
            <name>WeakPtr&lt;U></name>
            <content>
                <primaryType ref="class_WeakPtr_T_D49C63E2DEDE836F0176506DCCB026745EADD5CC"/>
                <argumentType ref="5446486"/>
            </content>
        </type>
        <type derived="true" id="type.4282">
            <name>WeakPtr&lt;U>&amp;&amp;</name>
            <content>
                <baseType ref="type.class_WeakPtr_U_DC1FE0F847E4C954B399A783A0BC0307D485B021"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type basic="true" id="type.5445688">
            <name>bool</name>
        </type>
        <type basic="true" id="type.5445690">
            <name>byte</name>
        </type>
        <type derived="true" id="type.5445711">
            <name>byte&amp;</name>
            <content>
                <baseType ref="type.5445690"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5445710">
            <name>byte*</name>
            <content>
                <baseType ref="type.5445690"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.5445699">
            <name>char</name>
        </type>
        <type derived="true" id="type.5445738">
            <name>char&amp;</name>
            <content>
                <baseType ref="type.5445699"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5445737">
            <name>char*</name>
            <content>
                <baseType ref="type.5445699"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5462343">
            <name>const BigFloat</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BigFloat_BC19EFB82C8E666524B4436C56800B572EFBED53"/>
            </content>
        </type>
        <type derived="true" id="type.5462345">
            <name>const BigFloat&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BigFloat_BC19EFB82C8E666524B4436C56800B572EFBED53"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5462344">
            <name>const BigFloat*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BigFloat_BC19EFB82C8E666524B4436C56800B572EFBED53"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5462731">
            <name>const BigFloat*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BigFloat_BC19EFB82C8E666524B4436C56800B572EFBED53"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5462730">
            <name>const BigFloat**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BigFloat_BC19EFB82C8E666524B4436C56800B572EFBED53"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5462349">
            <name>const BigInt</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
            </content>
        </type>
        <type derived="true" id="type.5462351">
            <name>const BigInt&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5462350">
            <name>const BigInt*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5462740">
            <name>const BigInt*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5462739">
            <name>const BigInt**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BigInt_9326EADB23C0E0FE1858A97CCC64FF60DD2A22D0"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5462355">
            <name>const BigRational</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BigRational_0F62DE7516E5ADB5CE79939E2167456710EF7B23"/>
            </content>
        </type>
        <type derived="true" id="type.5462357">
            <name>const BigRational&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BigRational_0F62DE7516E5ADB5CE79939E2167456710EF7B23"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5462356">
            <name>const BigRational*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BigRational_0F62DE7516E5ADB5CE79939E2167456710EF7B23"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5462746">
            <name>const BigRational*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BigRational_0F62DE7516E5ADB5CE79939E2167456710EF7B23"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5462745">
            <name>const BigRational**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BigRational_0F62DE7516E5ADB5CE79939E2167456710EF7B23"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4413">
            <name>const BinaryReader</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BinaryReader_7D0A41A9C666814155001B1AF5B066E926C8F3AC"/>
            </content>
        </type>
        <type derived="true" id="type.4414">
            <name>const BinaryReader&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BinaryReader_7D0A41A9C666814155001B1AF5B066E926C8F3AC"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4415">
            <name>const BinaryWriter</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BinaryWriter_6D47712E9CF8C098A17FFF3729140EE727BD87E2"/>
            </content>
        </type>
        <type derived="true" id="type.4416">
            <name>const BinaryWriter&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BinaryWriter_6D47712E9CF8C098A17FFF3729140EE727BD87E2"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4417">
            <name>const BufferedByteStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_BufferedByteStream_E74639F265FCFA3F7A3E61DE9D92C703A46FD573"/>
            </content>
        </type>
        <type derived="true" id="type.4418">
            <name>const ByteStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ByteStream_3B7A2F3379612ADBD7E416487752A1935AA8B96F"/>
            </content>
        </type>
        <type derived="true" id="type.4429">
            <name>const ConditionVariable</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ConditionVariable_019A80625043CF98EC88D8F55238C84CFD4A9C26"/>
            </content>
        </type>
        <type derived="true" id="type.4434">
            <name>const ConversionException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ConversionException_968EDA1D00534F82FF78F973855F91349977511B"/>
            </content>
        </type>
        <type derived="true" id="type.4435">
            <name>const ConversionException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ConversionException_968EDA1D00534F82FF78F973855F91349977511B"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4068">
            <name>const Counter&lt;System.IO.ByteStream></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5446787"/>
            </content>
        </type>
        <type derived="true" id="type.4298">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.4257">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.4258">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.4259">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.4261">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.4266">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.4267">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.4268">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.4275">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.4297">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.4290">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.4277">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.4249">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.4279">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.4283">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.4252">
            <name>const Counter&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
            </content>
        </type>
        <type derived="true" id="type.4250">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4291">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4284">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4253">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4262">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4269">
            <name>const Counter&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_T_38A7F42D0E20389A22B581B3FAAD0E018811DD30"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4260">
            <name>const Counter&lt;U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A"/>
            </content>
        </type>
        <type derived="true" id="type.4300">
            <name>const Counter&lt;U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A"/>
            </content>
        </type>
        <type derived="true" id="type.4281">
            <name>const Counter&lt;U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Counter_U_1A33EEC8E50A71590577FF01DE575F6124D3F73A"/>
            </content>
        </type>
        <type derived="true" id="type.4419">
            <name>const FileSystemException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_FileSystemException_BB9552A6F8CD7166104BC90F55939797AA006B1A"/>
            </content>
        </type>
        <type derived="true" id="type.4420">
            <name>const FileSystemException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_FileSystemException_BB9552A6F8CD7166104BC90F55939797AA006B1A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4421">
            <name>const InvalidPathException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_InvalidPathException_B507BC7383A55580000E7A669FAAE1ABECF7FFBA"/>
            </content>
        </type>
        <type derived="true" id="type.4422">
            <name>const InvalidPathException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_InvalidPathException_B507BC7383A55580000E7A669FAAE1ABECF7FFBA"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4152">
            <name>const K&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="5446316"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4192">
            <name>const Key&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="5446373"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4239">
            <name>const KeyType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="5446452"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4175">
            <name>const KeyType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="5446345"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4208">
            <name>const LockGuard&lt;Mtx></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
            </content>
        </type>
        <type derived="true" id="type.4209">
            <name>const LockGuard&lt;Mtx>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_LockGuard_Mtx_F810C02E34A5A6A123C64A7E3F138A4D6473C5A1"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4395">
            <name>const LockGuard&lt;System.Threading.Mutex></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5451642"/>
            </content>
        </type>
        <type derived="true" id="type.4396">
            <name>const LockGuard&lt;System.Threading.Mutex>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5451642"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4430">
            <name>const Mutex</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Mutex_CAF802A5F8A71934B07EA6C23937F60D9AECD650"/>
            </content>
        </type>
        <type derived="true" id="type.4423">
            <name>const OutputStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_OutputStream_D306768ED83C9FB00EA54CD61D604CE2BF727452"/>
            </content>
        </type>
        <type derived="true" id="type.4218">
            <name>const Pair&lt;T, U>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4215">
            <name>const Pair&lt;T, U>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.class_Pair_T_U_449CEB7418A695807AFB84D22FA06A7C052670F9"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5462337">
            <name>const Precision</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Precision_9DAFEB710FD18878097281A53A7F8764341F0B2A"/>
            </content>
        </type>
        <type derived="true" id="type.5462339">
            <name>const Precision&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Precision_9DAFEB710FD18878097281A53A7F8764341F0B2A"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5462338">
            <name>const Precision*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_Precision_9DAFEB710FD18878097281A53A7F8764341F0B2A"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5462492">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5462489"/>
            </content>
        </type>
        <type derived="true" id="type.4202">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4199"/>
            </content>
        </type>
        <type derived="true" id="type.4204">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4199"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5462494">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5462489"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4203">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4199"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5462493">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5462489"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5462363">
            <name>const RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5462360"/>
            </content>
        </type>
        <type derived="true" id="type.4073">
            <name>const RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4070"/>
            </content>
        </type>
        <type derived="true" id="type.5462363">
            <name>const RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5462360"/>
            </content>
        </type>
        <type derived="true" id="type.5462365">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5462360"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4075">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4070"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5462364">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5462360"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4074">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4070"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4092">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4089"/>
            </content>
        </type>
        <type derived="true" id="type.5462382">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5462379"/>
            </content>
        </type>
        <type derived="true" id="type.4094">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4089"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5462384">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5462379"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4093">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4089"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5462383">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5462379"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5462681">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5462678"/>
            </content>
        </type>
        <type derived="true" id="type.4390">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4387"/>
            </content>
        </type>
        <type derived="true" id="type.5462681">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5462678"/>
            </content>
        </type>
        <type derived="true" id="type.4392">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4387"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5462683">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5462678"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5462682">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5462678"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4391">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4387"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5462682">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5462678"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4103">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4100"/>
            </content>
        </type>
        <type derived="true" id="type.5462393">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5462390"/>
            </content>
        </type>
        <type derived="true" id="type.5462395">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5462390"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4105">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4100"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5462395">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5462390"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5462394">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5462390"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4104">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4100"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4082">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4079"/>
            </content>
        </type>
        <type derived="true" id="type.5462372">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5462369"/>
            </content>
        </type>
        <type derived="true" id="type.4084">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4079"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5462374">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5462369"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4083">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.4079"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5462373">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5462369"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4431">
            <name>const RecursiveMutex</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_RecursiveMutex_B9ED5479754BBDDED6A4491348BBD2F20F701D82"/>
            </content>
        </type>
        <type derived="true" id="type.4410">
            <name>const StaticInitCriticalSection</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_StaticInitCriticalSection_39AB37625C7D8624475080E487A05114E48A9C6C"/>
            </content>
        </type>
        <type derived="true" id="type.4411">
            <name>const StaticInitCriticalSection&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_StaticInitCriticalSection_39AB37625C7D8624475080E487A05114E48A9C6C"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4424">
            <name>const StreamReader</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_StreamReader_8A8267CD81BA8B198AF295474A8CB0B2DFBB7B57"/>
            </content>
        </type>
        <type derived="true" id="type.4425">
            <name>const StreamReader&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_StreamReader_8A8267CD81BA8B198AF295474A8CB0B2DFBB7B57"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4426">
            <name>const StreamWriter</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_StreamWriter_40A39F418049D49DB679452BB514CDFE47500311"/>
            </content>
        </type>
        <type derived="true" id="type.5446818">
            <name>const String&lt;char>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.5446813"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4146">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="5446304"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4147">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="5446306"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4148">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="5446308"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4149">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="5446310"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4124">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="5446252"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4150">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="5446312"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4151">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="5446314"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4126">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="5446257"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4153">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="5446317"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4121">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="5446245"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4110">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="5446227"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4170">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="5446334"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4108">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="5446225"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4127">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="5446266"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4211">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="5446393"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4169">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="5446332"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4213">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="5446402"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4125">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="5446255"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4216">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="5446405"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4128">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="5446268"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4129">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="5446270"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4131">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="5446273"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4132">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="5446275"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4180">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="5446353"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4134">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="5446278"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4172">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="5446336"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4230">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="5446443"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4135">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="5446280"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4232">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="5446445"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4123">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="5446250"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4137">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="5446283"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4138">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="5446285"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4140">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="5446288"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4122">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="5446248"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4141">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="5446290"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4143">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="5446293"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4144">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="5446295"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4432">
            <name>const ThreadingException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ThreadingException_4952259FBBDB6BDFCF1A52EABE2C1A61BF601670"/>
            </content>
        </type>
        <type derived="true" id="type.4433">
            <name>const ThreadingException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_ThreadingException_4952259FBBDB6BDFCF1A52EABE2C1A61BF601670"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4133">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="5446276"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4130">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="5446271"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4217">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="5446406"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4212">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="5446394"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4139">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="5446286"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4142">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="5446291"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4214">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="5446403"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4136">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="5446281"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4145">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="5446296"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4436">
            <name>const UnicodeException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnicodeException_F535D36BB8009200467ACEA05819217182306079"/>
            </content>
        </type>
        <type derived="true" id="type.4437">
            <name>const UnicodeException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="class_UnicodeException_F535D36BB8009200467ACEA05819217182306079"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4193">
            <name>const Value&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="5446374"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type basic="true" id="type.5445698">
            <name>double</name>
        </type>
        <type basic="true" id="type.5445701">
            <name>uchar</name>
        </type>
        <type derived="true" id="type.5445744">
            <name>uchar&amp;</name>
            <content>
                <baseType ref="type.5445701"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5445743">
            <name>uchar*</name>
            <content>
                <baseType ref="type.5445701"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.5445694">
            <name>uint</name>
        </type>
        <type derived="true" id="type.5445723">
            <name>uint&amp;</name>
            <content>
                <baseType ref="type.5445694"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5445722">
            <name>uint*</name>
            <content>
                <baseType ref="type.5445694"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.5445696">
            <name>ulong</name>
        </type>
        <type derived="true" id="type.5445729">
            <name>ulong&amp;</name>
            <content>
                <baseType ref="type.5445696"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5445728">
            <name>ulong*</name>
            <content>
                <baseType ref="type.5445696"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5445840">
            <name>void*</name>
            <content>
                <baseType ref="type.5445702"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.5445700">
            <name>wchar</name>
        </type>
        <type derived="true" id="type.5445741">
            <name>wchar&amp;</name>
            <content>
                <baseType ref="type.5445700"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5445740">
            <name>wchar*</name>
            <content>
                <baseType ref="type.5445700"/>
                <qualifier>*</qualifier>
            </content>
        </type>
    </types>
</library>
