<library>
    <name>System.Text.Parsing.CodeDom</name>
    <style>../../style/cmdoc.css</style>
    <namespaces>
        <namespace id="System.Text.Parsing.CodeDom">
            <name>System.Text.Parsing.CodeDom</name>
            <classes>
                <class id="1383496">
                    <name>Add</name>
                    <groupName>Add</groupName>
                    <syntax> public class Add;</syntax>
                    <baseClass ref="1383468"/>
                    <constructors>
                        <constructor id="constructor_Add_FB6264E275DB7FAA75A8DEECA05C3D7403373A46">
                            <name>Add(DomObject* left_, DomObject* right_)</name>
                            <syntax>public Add(DomObject* left_, DomObject* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Add_2D13C056B5BA8CB3E35493F4D5573674782B9661">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383452">
                    <name>AddressOf</name>
                    <groupName>AddressOf</groupName>
                    <syntax> public class AddressOf;</syntax>
                    <baseClass ref="1383446"/>
                    <constructors>
                        <constructor id="constructor_AddressOf_106A3FBE271BDC73BFE07A3BC966D08FC4BB4E62">
                            <name>AddressOf(DomObject* subject_)</name>
                            <syntax>public AddressOf(DomObject* subject_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_AddressOf_1B8A59E3B79039952FA31FBE6693C655C7FBF600">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383606">
                    <name>Array</name>
                    <groupName>Array</groupName>
                    <syntax> public class Array;</syntax>
                    <baseClass ref="1383437"/>
                    <constructors>
                        <constructor id="constructor_Array_4AC1FF82D6CB446F66567B8C8037440967CA386D">
                            <name>Array(DomObject* subject_, DomObject* size_)</name>
                            <syntax>public nothrow Array(DomObject* subject_, DomObject* size_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                                <parameter>
                                    <name>size_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Array_CEDE9455D14D4C230B753D3647F78B91D1A93F97">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_Array_8B4C206DEDC2348B5A6A366681FBA0BB785184A6">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.1385088"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383466">
                    <name>Arrow</name>
                    <groupName>Arrow</groupName>
                    <syntax> public class Arrow;</syntax>
                    <baseClass ref="1383442"/>
                    <constructors>
                        <constructor id="constructor_Arrow_DAE8AA001897DBB081656F17CC7E872B386C5D86">
                            <name>Arrow(DomObject* subject_, const String&lt;uchar>&amp; memberId_)</name>
                            <syntax>public nothrow Arrow(DomObject* subject_, const String&lt;uchar>&amp; memberId_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                                <parameter>
                                    <name>memberId_</name>
                                    <type ref="type.1378718"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Arrow_7506B42946B4C4C9499B64E0FE48276FA65FC12E">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_Arrow_ABF575422FE75204BD6DA7B387CA009E100D8A57">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.1385088"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383508">
                    <name>As</name>
                    <groupName>As</groupName>
                    <syntax> public class As;</syntax>
                    <baseClass ref="1383468"/>
                    <constructors>
                        <constructor id="constructor_As_5AAF0640A29ADE3AB28C8180BB6FD29186EF76A4">
                            <name>As(DomObject* expr_, DomObject* targetTypeExpr_)</name>
                            <syntax>public As(DomObject* expr_, DomObject* targetTypeExpr_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>expr_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                                <parameter>
                                    <name>targetTypeExpr_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_As_1AA3F9C096B93BEE62C077FF71BC177622A9D4D3">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383596">
                    <name>AssertStatement</name>
                    <groupName>AssertStatement</groupName>
                    <syntax> public class AssertStatement;</syntax>
                    <baseClass ref="1383544"/>
                    <constructors>
                        <constructor id="constructor_AssertStatement_C362F17195DD7FE6CFCD0940CD90E7B36A295AE1">
                            <name>AssertStatement(DomObject* assertExpr_)</name>
                            <syntax>public AssertStatement(DomObject* assertExpr_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>assertExpr_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_AssertStatement_2536451EA08D034B02C8D72B8EA89F54299673C8">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_AssertStatement_07D9867C4438DA3198F57A99127AEEA143E0B6FD">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.1385088"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383572">
                    <name>AssignmentStatement</name>
                    <groupName>AssignmentStatement</groupName>
                    <syntax> public class AssignmentStatement;</syntax>
                    <baseClass ref="1383544"/>
                    <constructors>
                        <constructor id="constructor_AssignmentStatement_E8EE9FFB12C0CFFAB328A860640333FA66453791">
                            <name>AssignmentStatement(DomObject* targetExpr_, DomObject* sourceExpr_)</name>
                            <syntax>public AssignmentStatement(DomObject* targetExpr_, DomObject* sourceExpr_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>targetExpr_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                                <parameter>
                                    <name>sourceExpr_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_AssignmentStatement_8EF79AEF23226DD42DD33229515C09C154848233">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_AssignmentStatement_A6ACA99E7DAC6430FE64F671EACA2B8D7AEC4541">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.1385088"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383532">
                    <name>Base</name>
                    <groupName>Base</groupName>
                    <syntax> public class Base;</syntax>
                    <baseClass ref="1383442"/>
                    <constructors>
                        <constructor id="default_constructor_Base_DE88F544D7160BB0FD2947D66889A36A2D9DE160">
                            <name>Base()</name>
                            <syntax>public Base();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Base_21C2E74AB8182B277D6BA8CD00484B34096141D9">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383468">
                    <name>BinaryExpression</name>
                    <groupName>BinaryExpression</groupName>
                    <syntax>abstract public class BinaryExpression;</syntax>
                    <baseClass ref="1383442"/>
                    <constructors>
                        <constructor id="constructor_BinaryExpression_4F625B4717FE668ACF5D4334BB0989210DC8EF36">
                            <name>BinaryExpression(Operator op_, DomObject* left_, DomObject* right_)</name>
                            <syntax>public BinaryExpression(Operator op_, DomObject* left_, DomObject* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>op_</name>
                                    <type ref="1383441"/>
                                </parameter>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_BinaryExpression_9E40F1D4B944D025D86F3E3D79604DE9F3E55B6B">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_BinaryExpression_3B36FE3D8BA26BA885CD9B3DC9CAA9760D82FD29">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.1385088"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383478">
                    <name>BitAnd</name>
                    <groupName>BitAnd</groupName>
                    <syntax> public class BitAnd;</syntax>
                    <baseClass ref="1383468"/>
                    <constructors>
                        <constructor id="constructor_BitAnd_AEA4947DC5EBF8C888BDCE349AE3034BA5C4D62E">
                            <name>BitAnd(DomObject* left_, DomObject* right_)</name>
                            <syntax>public BitAnd(DomObject* left_, DomObject* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_BitAnd_1EF91C9C8DBECD7438A3DA17C9023535E60EF14D">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383474">
                    <name>BitOr</name>
                    <groupName>BitOr</groupName>
                    <syntax> public class BitOr;</syntax>
                    <baseClass ref="1383468"/>
                    <constructors>
                        <constructor id="constructor_BitOr_9C775B941A03BDC339528929369C4F81C7A1C6C9">
                            <name>BitOr(DomObject* left_, DomObject* right_)</name>
                            <syntax>public BitOr(DomObject* left_, DomObject* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_BitOr_9D75CBEFF73717A9009153AFCD45C5B19E7551A5">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383476">
                    <name>BitXor</name>
                    <groupName>BitXor</groupName>
                    <syntax> public class BitXor;</syntax>
                    <baseClass ref="1383468"/>
                    <constructors>
                        <constructor id="constructor_BitXor_77A2A8CB11E834056FDD0BCD840A413567F57BBC">
                            <name>BitXor(DomObject* left_, DomObject* right_)</name>
                            <syntax>public BitXor(DomObject* left_, DomObject* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_BitXor_18866FC5A019D039EE0BA64F6CA4C6BE8A6C4645">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383407">
                    <name>BoolType</name>
                    <groupName>BoolType</groupName>
                    <syntax> public class BoolType;</syntax>
                    <baseClass ref="1383405"/>
                    <constructors>
                        <constructor id="default_constructor_BoolType_792AB2CC5CC32731C2FF3238D18586DD35D74ED2">
                            <name>BoolType()</name>
                            <syntax>public nothrow BoolType();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_BoolType_7B91C970F300714F894F70BE558AB667BD254819">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383560">
                    <name>BreakStatement</name>
                    <groupName>BreakStatement</groupName>
                    <syntax> public class BreakStatement;</syntax>
                    <baseClass ref="1383544"/>
                    <constructors>
                        <constructor id="default_constructor_BreakStatement_3FD764BB2173314CE967D7ABB7CC80AEDF014CCA">
                            <name>BreakStatement()</name>
                            <syntax>public BreakStatement();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_BreakStatement_6A49393BE27AB8B0A9674B09102302C12D58CBA3">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_BreakStatement_EB526300E7ADDD88D17D7EB380AF0815B29CED46">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.1385088"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383417">
                    <name>ByteType</name>
                    <groupName>ByteType</groupName>
                    <syntax> public class ByteType;</syntax>
                    <baseClass ref="1383405"/>
                    <constructors>
                        <constructor id="default_constructor_ByteType_99FC6A7D77D465DDBE8BB7FFD9EE0F109121F52B">
                            <name>ByteType()</name>
                            <syntax>public nothrow ByteType();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_ByteType_6EBB20F251612E6BE6BC06564E07E298C0F7DA08">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383580">
                    <name>CaseStatement</name>
                    <groupName>CaseStatement</groupName>
                    <syntax> public class CaseStatement;</syntax>
                    <baseClass ref="1383544"/>
                    <constructors>
                        <constructor id="default_constructor_CaseStatement_7D895A97573B6ABF00749F321D3BCBD6B7BDC674">
                            <name>CaseStatement()</name>
                            <syntax>public CaseStatement();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_CaseStatement_3ED38BF29C4137EA0F55E89E2CC7ED735BEA7B3F">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_AddCaseExpr_CaseStatement_F3489157DC1C30AE97C79D5ADC80E17E7DB0E525">
                            <name>AddCaseExpr(DomObject* caseExpr)</name>
                            <syntax>public void AddCaseExpr(DomObject* caseExpr);</syntax>
                            <parameters>
                                <parameter>
                                    <name>caseExpr</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_AddStatement_CaseStatement_6F1DC9BB34C8C90CA8F31148DD539877B1597DAD">
                            <name>AddStatement(Statement* statement)</name>
                            <syntax>public void AddStatement(Statement* statement);</syntax>
                            <parameters>
                                <parameter>
                                    <name>statement</name>
                                    <type ref="type.1383545"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_CaseStatement_770204373D050CAAB07D7482753E2A92CFF5FBEC">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.1385088"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383524">
                    <name>Cast</name>
                    <groupName>Cast</groupName>
                    <syntax> public class Cast;</syntax>
                    <baseClass ref="1383442"/>
                    <constructors>
                        <constructor id="constructor_Cast_29308124D20BDBA0E7392E83F495EBB90856BFFE">
                            <name>Cast(DomObject* targetTypeExpr_, DomObject* sourceExpr_)</name>
                            <syntax>public Cast(DomObject* targetTypeExpr_, DomObject* sourceExpr_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>targetTypeExpr_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                                <parameter>
                                    <name>sourceExpr_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Cast_A4E54F9592C4E2A153CAC3B251D978671A90CDCD">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_Cast_D1E4A5170E18662C0109A6F3A85265C8E980A62C">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.1385088"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383592">
                    <name>Catch</name>
                    <groupName>Catch</groupName>
                    <syntax> public class Catch;</syntax>
                    <baseClass ref="1383437"/>
                    <constructors>
                        <constructor id="constructor_Catch_8FA04C9C68E8230406061986187DFC621C8C02C2">
                            <name>Catch(DomObject* typeExpr_, DomObject* id_, CompoundStatement* catchBlock_)</name>
                            <syntax>public Catch(DomObject* typeExpr_, DomObject* id_, CompoundStatement* catchBlock_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>typeExpr_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                                <parameter>
                                    <name>id_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                                <parameter>
                                    <name>catchBlock_</name>
                                    <type ref="type.1383549"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Catch_1572006C4D0B812C7A3A535D6E99ABE0A11800AE">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_Catch_F9485E88285C81A73047AB394FB394EFBC83BBFC">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.1385088"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383409">
                    <name>CharType</name>
                    <groupName>CharType</groupName>
                    <syntax> public class CharType;</syntax>
                    <baseClass ref="1383405"/>
                    <constructors>
                        <constructor id="default_constructor_CharType_E1B7A1E44A259B89E2E6097CC72D0E814AED0904">
                            <name>CharType()</name>
                            <syntax>public nothrow CharType();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_CharType_CDCAD88D6976C04C9DD661DCDA7254865EE31A0C">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383462">
                    <name>Complement</name>
                    <groupName>Complement</groupName>
                    <syntax> public class Complement;</syntax>
                    <baseClass ref="1383446"/>
                    <constructors>
                        <constructor id="constructor_Complement_651BB4CB810D97C5BC7406A830DDA1C5343F7DFA">
                            <name>Complement(DomObject* subject_)</name>
                            <syntax>public Complement(DomObject* subject_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Complement_6A7106D46D68F50FED6EC9A7EEAD5EBBC3880568">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383548">
                    <name>CompoundStatement</name>
                    <groupName>CompoundStatement</groupName>
                    <syntax> public class CompoundStatement;</syntax>
                    <baseClass ref="1383544"/>
                    <constructors>
                        <constructor id="default_constructor_CompoundStatement_35FB9F27ED1250559E3297CA012112EFF2F0EE32">
                            <name>CompoundStatement()</name>
                            <syntax>public CompoundStatement();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_CompoundStatement_0D71EBB712C6FCE2948772BFC7E17C7625C7923E">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_AddStatement_CompoundStatement_6F389D25143A65C1ECD5D2752F54D206560443DA">
                            <name>AddStatement(Statement* statement)</name>
                            <syntax>public void AddStatement(Statement* statement);</syntax>
                            <parameters>
                                <parameter>
                                    <name>statement</name>
                                    <type ref="type.1383545"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_CompoundStatement_FCC85205CD991E1ED9600E7DB9F88E6763D6F448">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.1385088"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383472">
                    <name>Conjunction</name>
                    <groupName>Conjunction</groupName>
                    <syntax> public class Conjunction;</syntax>
                    <baseClass ref="1383468"/>
                    <constructors>
                        <constructor id="constructor_Conjunction_B180AB2ED6DE790A39F6075AE7D9EC71E0821B37">
                            <name>Conjunction(DomObject* left_, DomObject* right_)</name>
                            <syntax>public Conjunction(DomObject* left_, DomObject* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Conjunction_07E7C98DC6C6219B169982C0FF255808DB98B5B2">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383598">
                    <name>Const</name>
                    <groupName>Const</groupName>
                    <syntax> public class Const;</syntax>
                    <baseClass ref="1383437"/>
                    <constructors>
                        <constructor id="constructor_Const_A36B9AC5AC815B85CBDD049E38905A8245727ECD">
                            <name>Const(DomObject* subject_)</name>
                            <syntax>public nothrow Const(DomObject* subject_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Const_B23F75E42AA8D53ABE7D4213D909DA494DE8BEF9">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_Const_72279CD6C965F9E586D3EBDF39128EBCE1B03848">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.1385088"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383526">
                    <name>Construct</name>
                    <groupName>Construct</groupName>
                    <syntax> public class Construct;</syntax>
                    <baseClass ref="1383442"/>
                    <constructors>
                        <constructor id="constructor_Construct_0D34FA7963949A42BB3FA6946B89F8CF090ED4C9">
                            <name>Construct(DomObject* typeExpr_)</name>
                            <syntax>public Construct(DomObject* typeExpr_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>typeExpr_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Construct_97D335DCC83CEAAB93666256F7CE2D724C9EB653">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_AddArgument_Construct_E46ADD53FB8ACFFF654CF7F5681C691DC41CB7A6">
                            <name>AddArgument(DomObject* argument)</name>
                            <syntax>public override void AddArgument(DomObject* argument);</syntax>
                            <parameters>
                                <parameter>
                                    <name>argument</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_Construct_DC05CDF4E7292AFC426F54CCE1ABA1053AD13624">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.1385088"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383566">
                    <name>ConstructionStatement</name>
                    <groupName>ConstructionStatement</groupName>
                    <syntax> public class ConstructionStatement;</syntax>
                    <baseClass ref="1383544"/>
                    <constructors>
                        <constructor id="constructor_ConstructionStatement_A3706F0577B21E5D71EF0A20AF1E8BD155CB5ABF">
                            <name>ConstructionStatement(DomObject* typeExpr_, DomObject* id_)</name>
                            <syntax>public ConstructionStatement(DomObject* typeExpr_, DomObject* id_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>typeExpr_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                                <parameter>
                                    <name>id_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_ConstructionStatement_5FB3CE625510F056D2FD2A567C6B14DCE5C92F37">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_AddArgument_ConstructionStatement_A6BB930B4F5AC87F7F78DF11836312464196EBBE">
                            <name>AddArgument(DomObject* argument)</name>
                            <syntax>public override void AddArgument(DomObject* argument);</syntax>
                            <parameters>
                                <parameter>
                                    <name>argument</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_ConstructionStatement_138A4E32294704D1C23C48CE6D73862A01E125C6">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.1385088"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetParens_ConstructionStatement_E07BC32EC1EEEAACF01D7CFCDBF3CDD998A209F5">
                            <name>SetParens()</name>
                            <syntax>public nothrow void SetParens();</syntax>
                        </function>
                    </functions>
                </class>
                <class id="1383562">
                    <name>ContinueStatement</name>
                    <groupName>ContinueStatement</groupName>
                    <syntax> public class ContinueStatement;</syntax>
                    <baseClass ref="1383544"/>
                    <constructors>
                        <constructor id="default_constructor_ContinueStatement_9F7D50B0337CF0CCC235B31AE9DE89119E885233">
                            <name>ContinueStatement()</name>
                            <syntax>public ContinueStatement();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_ContinueStatement_9B6818853C7F45C850C62180181707D7EA8E0663">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_ContinueStatement_9E9B1D4720C003FA34157E18AE2D391FE9516165">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.1385088"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383582">
                    <name>DefaultStatement</name>
                    <groupName>DefaultStatement</groupName>
                    <syntax> public class DefaultStatement;</syntax>
                    <baseClass ref="1383544"/>
                    <constructors>
                        <constructor id="default_constructor_DefaultStatement_5C2BD34156F53E58A73DF84B2D65A396C5F13892">
                            <name>DefaultStatement()</name>
                            <syntax>public DefaultStatement();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_DefaultStatement_33E13FFDF81A52D5988D2253BDF89D356F7E8C7F">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_AddStatement_DefaultStatement_AE9DBBDA956204A9665A6075B40860E0406989B7">
                            <name>AddStatement(Statement* statement)</name>
                            <syntax>public void AddStatement(Statement* statement);</syntax>
                            <parameters>
                                <parameter>
                                    <name>statement</name>
                                    <type ref="type.1383545"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_DefaultStatement_B5CA6ACB809DE4B499DE1C6C9FBA0D926E4C9DC2">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.1385088"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383568">
                    <name>DeleteStatement</name>
                    <groupName>DeleteStatement</groupName>
                    <syntax> public class DeleteStatement;</syntax>
                    <baseClass ref="1383544"/>
                    <constructors>
                        <constructor id="constructor_DeleteStatement_25B7ADB6431D2A504EA2C15134C0E9681F438218">
                            <name>DeleteStatement(DomObject* expression_)</name>
                            <syntax>public DeleteStatement(DomObject* expression_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>expression_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_DeleteStatement_DEB0A761C3FDFF0F297800C8367E17384B347EA8">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_DeleteStatement_C25506CD8D6C409801F827F7E7EEBF79A4528589">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.1385088"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383450">
                    <name>Deref</name>
                    <groupName>Deref</groupName>
                    <syntax> public class Deref;</syntax>
                    <baseClass ref="1383446"/>
                    <constructors>
                        <constructor id="constructor_Deref_FF28839199F4E2C2DEC28AAD4F495CF556BA8480">
                            <name>Deref(DomObject* subject_)</name>
                            <syntax>public Deref(DomObject* subject_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Deref_99FFA7F4F973D7840CDD7BB09A8E27C7DB31F505">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383570">
                    <name>DestroyStatement</name>
                    <groupName>DestroyStatement</groupName>
                    <syntax> public class DestroyStatement;</syntax>
                    <baseClass ref="1383544"/>
                    <constructors>
                        <constructor id="constructor_DestroyStatement_9F2CFF93B4AF1C0F1A21E92D90ADA807A3E1702D">
                            <name>DestroyStatement(DomObject* expression_)</name>
                            <syntax>public DestroyStatement(DomObject* expression_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>expression_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_DestroyStatement_E90F18047AA6DB785DCCA25296610B2207CC1600">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_DestroyStatement_B006144A691DBAF3E7E4F827B440C588E5F528B5">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.1385088"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383470">
                    <name>Disjunction</name>
                    <groupName>Disjunction</groupName>
                    <syntax> public class Disjunction;</syntax>
                    <baseClass ref="1383468"/>
                    <constructors>
                        <constructor id="constructor_Disjunction_1B5EE0E4EA6770F90BBA7757083AD3AE44208277">
                            <name>Disjunction(DomObject* left_, DomObject* right_)</name>
                            <syntax>public Disjunction(DomObject* left_, DomObject* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Disjunction_AA1155E2C1F466D85041177BE18E605556F5F773">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383502">
                    <name>Div</name>
                    <groupName>Div</groupName>
                    <syntax> public class Div;</syntax>
                    <baseClass ref="1383468"/>
                    <constructors>
                        <constructor id="constructor_Div_53B798EAF23879F742A8CD086C250067649F056C">
                            <name>Div(DomObject* left_, DomObject* right_)</name>
                            <syntax>public Div(DomObject* left_, DomObject* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Div_9BF48920D9B109813CB790FA1E2C9E1C928282DF">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383556">
                    <name>DoStatement</name>
                    <groupName>DoStatement</groupName>
                    <syntax> public class DoStatement;</syntax>
                    <baseClass ref="1383544"/>
                    <constructors>
                        <constructor id="constructor_DoStatement_5EF42A6681B009E37BE9405448BCEA8EFA04F7E8">
                            <name>DoStatement(DomObject* condition_, Statement* statement_)</name>
                            <syntax>public DoStatement(DomObject* condition_, Statement* statement_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>condition_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                                <parameter>
                                    <name>statement_</name>
                                    <type ref="type.1383545"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_DoStatement_8FFAF0D96F83556BDE9A3BD083E669AC57ED95DD">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_DoStatement_FFA320A5A8D61175626A25E560105289CD07BCCE">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.1385088"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383437">
                    <name>DomObject</name>
                    <groupName>DomObject</groupName>
                    <syntax>abstract public class DomObject;</syntax>
                    <constructors>
                        <constructor id="constructor_DomObject_BB42E44FB17A2C144C36E5C531EB57955DB9B6ED">
                            <name>DomObject(const String&lt;uchar>&amp; name_)</name>
                            <syntax>public nothrow DomObject(const String&lt;uchar>&amp; name_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.1378718"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_DomObject_4CA8814E15131A836452A9E7C1283F75EB49AA78">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public abstract void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_AddArgument_DomObject_4002324F52B1814870A359D13BF3F41033690D39">
                            <name>AddArgument(DomObject* argument)</name>
                            <syntax>public virtual void AddArgument(DomObject* argument);</syntax>
                            <parameters>
                                <parameter>
                                    <name>argument</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Name_DomObject_CA9065A71FF05D194F82A3E27465C5B8A8D1B739">
                            <name>Name() const</name>
                            <syntax>public nothrow inline const String&lt;uchar>&amp; Name() const;</syntax>
                            <returnType ref="type.1378718"/>
                        </function>
                        <function id="member_function_Parens_DomObject_5762B876F810623A5AA19DB8D3E8E9A546F2EE32">
                            <name>Parens() const</name>
                            <syntax>public nothrow inline bool Parens() const;</syntax>
                            <returnType ref="type.1377785"/>
                        </function>
                        <function id="member_function_Print_DomObject_1246D42C75EE05BDA21694F1AA36881375183A9B">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public virtual void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.1385088"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Rank_DomObject_2686A5B4BCE675013EC2424D0603072B2A15D2EE">
                            <name>Rank() const</name>
                            <syntax>public nothrow virtual int Rank() const;</syntax>
                            <returnType ref="type.1377790"/>
                        </function>
                        <function id="member_function_SetName_DomObject_2F016D62E3F95490A58FCD802C70C53E5379D659">
                            <name>SetName(const String&lt;uchar>&amp; name_)</name>
                            <syntax>public nothrow void SetName(const String&lt;uchar>&amp; name_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.1378718"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetParens_DomObject_E242CDA6377C17AB88F8975E04006D60BFA6B353">
                            <name>SetParens()</name>
                            <syntax>public nothrow inline void SetParens();</syntax>
                        </function>
                    </functions>
                </class>
                <class id="1383464">
                    <name>Dot</name>
                    <groupName>Dot</groupName>
                    <syntax> public class Dot;</syntax>
                    <baseClass ref="1383442"/>
                    <constructors>
                        <constructor id="constructor_Dot_C2692D1EB06D2B442F0D9855769E507DB30D03EE">
                            <name>Dot(DomObject* subject_, const String&lt;uchar>&amp; memberId_)</name>
                            <syntax>public nothrow Dot(DomObject* subject_, const String&lt;uchar>&amp; memberId_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                                <parameter>
                                    <name>memberId_</name>
                                    <type ref="type.1378718"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Dot_FA64586D4849A65088EECCF457C7B54458FDBCF9">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_Dot_4C64FBE740DD174226181C1C295B38741FA93CFE">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.1385088"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383433">
                    <name>DoubleType</name>
                    <groupName>DoubleType</groupName>
                    <syntax> public class DoubleType;</syntax>
                    <baseClass ref="1383405"/>
                    <constructors>
                        <constructor id="default_constructor_DoubleType_7B9BFB3336061617206E6A35728A51C5C9D4E55A">
                            <name>DoubleType()</name>
                            <syntax>public nothrow DoubleType();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_DoubleType_245B71EA11A749DD434979D14D1DBEC84783CAE5">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383576">
                    <name>EmptyStatement</name>
                    <groupName>EmptyStatement</groupName>
                    <syntax> public class EmptyStatement;</syntax>
                    <baseClass ref="1383544"/>
                    <constructors>
                        <constructor id="default_constructor_EmptyStatement_D3FA4A5E7EA5A75A679D4A1F755F0D8F01AB2E74">
                            <name>EmptyStatement()</name>
                            <syntax>public EmptyStatement();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_EmptyStatement_AA42B316DA65EA1A6595E2057BAD0A41AFD3DF60">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_EmptyStatement_FC2B1B707E0D475DB7B9315C050D309C5F02025B">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.1385088"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383480">
                    <name>Equal</name>
                    <groupName>Equal</groupName>
                    <syntax> public class Equal;</syntax>
                    <baseClass ref="1383468"/>
                    <constructors>
                        <constructor id="constructor_Equal_85A86E2AE844984246B05A7ED2EC4DFB5F1DF85F">
                            <name>Equal(DomObject* left_, DomObject* right_)</name>
                            <syntax>public Equal(DomObject* left_, DomObject* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Equal_EF179A960A81918528869543603655C0038043EE">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383442">
                    <name>Expression</name>
                    <groupName>Expression</groupName>
                    <syntax>abstract public class Expression;</syntax>
                    <baseClass ref="1383437"/>
                    <constructors>
                        <constructor id="constructor_Expression_F3EC2994CDFCE8518383F792F79C6BFC4DF3D6AF">
                            <name>Expression(const String&lt;uchar>&amp; name_, int rank_)</name>
                            <syntax>public nothrow Expression(const String&lt;uchar>&amp; name_, int rank_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.1378718"/>
                                </parameter>
                                <parameter>
                                    <name>rank_</name>
                                    <type ref="type.1377790"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Rank_Expression_73E7C240E1CE1146B2CDDFA7FC21373807437118">
                            <name>Rank() const</name>
                            <syntax>public nothrow override int Rank() const;</syntax>
                            <returnType ref="type.1377790"/>
                        </function>
                    </functions>
                </class>
                <class id="1383574">
                    <name>ExpressionStatement</name>
                    <groupName>ExpressionStatement</groupName>
                    <syntax> public class ExpressionStatement;</syntax>
                    <baseClass ref="1383544"/>
                    <constructors>
                        <constructor id="constructor_ExpressionStatement_A0E12EC88A1ECCCBAE1E320F273D742E42296764">
                            <name>ExpressionStatement(DomObject* expression_)</name>
                            <syntax>public ExpressionStatement(DomObject* expression_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>expression_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_ExpressionStatement_77A835CCC88201B3C5B2E539F41619FE743E3CDC">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_ExpressionStatement_73C53117C30BD50EFBCF054B2949D8B7FD7CDD27">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.1385088"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383431">
                    <name>FloatType</name>
                    <groupName>FloatType</groupName>
                    <syntax> public class FloatType;</syntax>
                    <baseClass ref="1383405"/>
                    <constructors>
                        <constructor id="default_constructor_FloatType_72515A0BE0D1F56C8F44B939479584C8D0D6A8E7">
                            <name>FloatType()</name>
                            <syntax>public nothrow FloatType();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_FloatType_A2FD85ABBAEEC2CA6A59D0BDC55622D4946AFB7F">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383558">
                    <name>ForStatement</name>
                    <groupName>ForStatement</groupName>
                    <syntax> public class ForStatement;</syntax>
                    <baseClass ref="1383544"/>
                    <constructors>
                        <constructor id="constructor_ForStatement_F302E1B3B9EB52C899DE40C159DD5066BD5A463C">
                            <name>ForStatement(Statement* initS_, DomObject* condition_, Statement* loopS_, Statement* actionS_)</name>
                            <syntax>public ForStatement(Statement* initS_, DomObject* condition_, Statement* loopS_, Statement* actionS_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>initS_</name>
                                    <type ref="type.1383545"/>
                                </parameter>
                                <parameter>
                                    <name>condition_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                                <parameter>
                                    <name>loopS_</name>
                                    <type ref="type.1383545"/>
                                </parameter>
                                <parameter>
                                    <name>actionS_</name>
                                    <type ref="type.1383545"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_ForStatement_12CB382271601C3DA47D1984BBF825FF498AEA66">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_ForStatement_356ED241B53FCA2587B8123C5F55690718D2C52C">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.1385088"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383586">
                    <name>GotoCaseStatement</name>
                    <groupName>GotoCaseStatement</groupName>
                    <syntax> public class GotoCaseStatement;</syntax>
                    <baseClass ref="1383544"/>
                    <constructors>
                        <constructor id="constructor_GotoCaseStatement_E3DF862620B8A365411F81E72C1B362C0DDAB4D2">
                            <name>GotoCaseStatement(DomObject* targetCase_)</name>
                            <syntax>public GotoCaseStatement(DomObject* targetCase_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>targetCase_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_GotoCaseStatement_965BDBC033F3602B8F35D11B89DB256C302C2EC3">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_GotoCaseStatement_34B2C09F51D8FB8AB8F4BB985E9A447E2BB0635C">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.1385088"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383588">
                    <name>GotoDefaultStatement</name>
                    <groupName>GotoDefaultStatement</groupName>
                    <syntax> public class GotoDefaultStatement;</syntax>
                    <baseClass ref="1383544"/>
                    <constructors>
                        <constructor id="default_constructor_GotoDefaultStatement_239546857706AB0793095FDCFC352ABE0EC39465">
                            <name>GotoDefaultStatement()</name>
                            <syntax>public GotoDefaultStatement();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_GotoDefaultStatement_47F65BA43864B18B67C3D6C46B73EAF31FAB4A45">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_GotoDefaultStatement_C47EB42FF7C8BED74EFC5DDFA2B38FB56401AFCC">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.1385088"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383564">
                    <name>GotoStatement</name>
                    <groupName>GotoStatement</groupName>
                    <syntax> public class GotoStatement;</syntax>
                    <baseClass ref="1383544"/>
                    <constructors>
                        <constructor id="constructor_GotoStatement_AC111BA558E2D63E81821C990B9FE1B129BEE2D0">
                            <name>GotoStatement(const String&lt;uchar>&amp; target_)</name>
                            <syntax>public GotoStatement(const String&lt;uchar>&amp; target_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>target_</name>
                                    <type ref="type.1378718"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_GotoStatement_56A12340897DBB13D73A72BC1EA125E8718ED92C">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_GotoStatement_B6D5606A0FA9BC236AB3DE717B0C508A9B95C5C9">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.1385088"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383486">
                    <name>Greater</name>
                    <groupName>Greater</groupName>
                    <syntax> public class Greater;</syntax>
                    <baseClass ref="1383468"/>
                    <constructors>
                        <constructor id="constructor_Greater_CB9A0699459A3B33E06350B1D1821176C456ABDD">
                            <name>Greater(DomObject* left_, DomObject* right_)</name>
                            <syntax>public Greater(DomObject* left_, DomObject* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Greater_EE70BF855E54AB427D41A7ABF66FDB31DEF742DE">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383490">
                    <name>GreaterOrEqual</name>
                    <groupName>GreaterOrEqual</groupName>
                    <syntax> public class GreaterOrEqual;</syntax>
                    <baseClass ref="1383468"/>
                    <constructors>
                        <constructor id="constructor_GreaterOrEqual_1DFC83CB62EEB8DB53E7895737F8E974C343631D">
                            <name>GreaterOrEqual(DomObject* left_, DomObject* right_)</name>
                            <syntax>public GreaterOrEqual(DomObject* left_, DomObject* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_GreaterOrEqual_C80615229A0C0E9F9D9BC3BB5DA86A4F12E1C833">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383534">
                    <name>Identifier</name>
                    <groupName>Identifier</groupName>
                    <syntax> public class Identifier;</syntax>
                    <baseClass ref="1383437"/>
                    <constructors>
                        <constructor id="constructor_Identifier_06EA8057993C062B3EF81A9500303464A3F0FFAD">
                            <name>Identifier(const String&lt;uchar>&amp; name_)</name>
                            <syntax>public nothrow Identifier(const String&lt;uchar>&amp; name_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.1378718"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Identifier_8B2EE033F2E7DD641EA5FC1659DE772FD876C998">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Rank_Identifier_DD14320B57C2C28BD9E7EE654A1D6650A33F433B">
                            <name>Rank() const</name>
                            <syntax>public nothrow override int Rank() const;</syntax>
                            <returnType ref="type.1377790"/>
                        </function>
                    </functions>
                </class>
                <class id="1383552">
                    <name>IfStatement</name>
                    <groupName>IfStatement</groupName>
                    <syntax> public class IfStatement;</syntax>
                    <baseClass ref="1383544"/>
                    <constructors>
                        <constructor id="constructor_IfStatement_2F5F523924C37FEC1EEE677D441DAF48AE1D1E6D">
                            <name>IfStatement(DomObject* condition_, Statement* thenS_, Statement* elseS_)</name>
                            <syntax>public IfStatement(DomObject* condition_, Statement* thenS_, Statement* elseS_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>condition_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                                <parameter>
                                    <name>thenS_</name>
                                    <type ref="type.1383545"/>
                                </parameter>
                                <parameter>
                                    <name>elseS_</name>
                                    <type ref="type.1383545"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_IfStatement_7CDCB83B87B6DDB0BA9BA03B13F1295B1572CE2F">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_IfStatement_60BC87DAC2FB3CB2DFEB3428719EC2EE5F549A96">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.1385088"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383510">
                    <name>Indexing</name>
                    <groupName>Indexing</groupName>
                    <syntax> public class Indexing;</syntax>
                    <baseClass ref="1383442"/>
                    <constructors>
                        <constructor id="constructor_Indexing_234AD633DABEC36EFC3E84A553611FF6B16DCE1B">
                            <name>Indexing(DomObject* subject_, DomObject* index_)</name>
                            <syntax>public Indexing(DomObject* subject_, DomObject* index_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                                <parameter>
                                    <name>index_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Indexing_1F4CD2105D19BE5EFA2D58AB374588433A2DDF71">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_Indexing_0A36B0A85C4CB87F78ABA0AE30F90D3D6006D24F">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.1385088"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383423">
                    <name>IntType</name>
                    <groupName>IntType</groupName>
                    <syntax> public class IntType;</syntax>
                    <baseClass ref="1383405"/>
                    <constructors>
                        <constructor id="default_constructor_IntType_65CE78B0FC0B4F39E48BB85ED17DE93500572E2F">
                            <name>IntType()</name>
                            <syntax>public nothrow IntType();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_IntType_A0BEB0435086A9FB6D1238A32DA6E60C24355168">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383512">
                    <name>Invoke</name>
                    <groupName>Invoke</groupName>
                    <syntax> public class Invoke;</syntax>
                    <baseClass ref="1383442"/>
                    <constructors>
                        <constructor id="constructor_Invoke_92B72739DB687F71DA4EF207BFF0F32F2C4FCC46">
                            <name>Invoke(DomObject* subject_)</name>
                            <syntax>public Invoke(DomObject* subject_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Invoke_67603DECCFDB8F8885DEAD1F07BD40922EE08CFE">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_AddArgument_Invoke_22164B46D53BD15F327B0CC593BEDBD713B8FB5E">
                            <name>AddArgument(DomObject* argument)</name>
                            <syntax>public override void AddArgument(DomObject* argument);</syntax>
                            <parameters>
                                <parameter>
                                    <name>argument</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_Invoke_8C51DD2578441380A2934C5B2F3849BD32B02AFC">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.1385088"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383506">
                    <name>Is</name>
                    <groupName>Is</groupName>
                    <syntax> public class Is;</syntax>
                    <baseClass ref="1383468"/>
                    <constructors>
                        <constructor id="constructor_Is_B4956514C353D3F636675280CB953A1AFA712187">
                            <name>Is(DomObject* expr_, DomObject* targetTypeExpr_)</name>
                            <syntax>public Is(DomObject* expr_, DomObject* targetTypeExpr_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>expr_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                                <parameter>
                                    <name>targetTypeExpr_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Is_A6ACA04F445E754031A14D7F5AA5DCEA459DABC3">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383484">
                    <name>Less</name>
                    <groupName>Less</groupName>
                    <syntax> public class Less;</syntax>
                    <baseClass ref="1383468"/>
                    <constructors>
                        <constructor id="constructor_Less_4778D13997E4BD55ACE54DB44560F58157FFBFBE">
                            <name>Less(DomObject* left_, DomObject* right_)</name>
                            <syntax>public Less(DomObject* left_, DomObject* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Less_111DA2A52F16CDEC383AD77BADE1925B191A5B3A">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383488">
                    <name>LessOrEqual</name>
                    <groupName>LessOrEqual</groupName>
                    <syntax> public class LessOrEqual;</syntax>
                    <baseClass ref="1383468"/>
                    <constructors>
                        <constructor id="constructor_LessOrEqual_1B5F718D3785EB324F9109519DB1B017DDDDE4C2">
                            <name>LessOrEqual(DomObject* left_, DomObject* right_)</name>
                            <syntax>public LessOrEqual(DomObject* left_, DomObject* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_LessOrEqual_D5A25F3B0E6B498F802EBA943BB181C4A87DBEB4">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383542">
                    <name>Literal</name>
                    <groupName>Literal</groupName>
                    <syntax> public class Literal;</syntax>
                    <baseClass ref="1383437"/>
                    <constructors>
                        <constructor id="constructor_Literal_C02938AFB06C9B321096C8EEECD38495C005318E">
                            <name>Literal(const String&lt;uchar>&amp; text)</name>
                            <syntax>public nothrow Literal(const String&lt;uchar>&amp; text);</syntax>
                            <parameters>
                                <parameter>
                                    <name>text</name>
                                    <type ref="type.1378718"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Literal_14339607FA8681E34F2FB6F8BC7C45BAF78FDB7E">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383427">
                    <name>LongType</name>
                    <groupName>LongType</groupName>
                    <syntax> public class LongType;</syntax>
                    <baseClass ref="1383405"/>
                    <constructors>
                        <constructor id="default_constructor_LongType_85E88EFF30C2511112CC4C29F3B4B008C5500C9C">
                            <name>LongType()</name>
                            <syntax>public nothrow LongType();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_LongType_C2C43539F32B952471DADDA66190DFEFF664B560">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383600">
                    <name>LvalueRef</name>
                    <groupName>LvalueRef</groupName>
                    <syntax> public class LvalueRef;</syntax>
                    <baseClass ref="1383437"/>
                    <constructors>
                        <constructor id="constructor_LvalueRef_33268CEFAE38C6A1C99C84C80C5FA7C195201347">
                            <name>LvalueRef(DomObject* subject_)</name>
                            <syntax>public nothrow LvalueRef(DomObject* subject_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_LvalueRef_9113257276B3B5EC54A97BD6A9F433B5B97DCADC">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_LvalueRef_F6FD9A9334444797F38356301D1D325AD17EA49B">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.1385088"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383500">
                    <name>Mul</name>
                    <groupName>Mul</groupName>
                    <syntax> public class Mul;</syntax>
                    <baseClass ref="1383468"/>
                    <constructors>
                        <constructor id="constructor_Mul_49633C50D9434A3D47265BD0E483210C35DAAF3E">
                            <name>Mul(DomObject* left_, DomObject* right_)</name>
                            <syntax>public Mul(DomObject* left_, DomObject* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Mul_8824CBD274EA8FB4FF9BEE22CB073277D46EE709">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383528">
                    <name>New</name>
                    <groupName>New</groupName>
                    <syntax> public class New;</syntax>
                    <baseClass ref="1383442"/>
                    <constructors>
                        <constructor id="constructor_New_21CBB6331DCA5324034437D42FFD77E43CA3977C">
                            <name>New(DomObject* typeExpr_)</name>
                            <syntax>public New(DomObject* typeExpr_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>typeExpr_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_New_563D3F417AC64BF2787B487CC34D285156FC8791">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_AddArgument_New_E48425D2132CCF6DCC7570381290B98D8299591A">
                            <name>AddArgument(DomObject* argument)</name>
                            <syntax>public override void AddArgument(DomObject* argument);</syntax>
                            <parameters>
                                <parameter>
                                    <name>argument</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_New_28A2BAC49C1E769BE6A4903626E913A481E2C429">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.1385088"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383448">
                    <name>Not</name>
                    <groupName>Not</groupName>
                    <syntax> public class Not;</syntax>
                    <baseClass ref="1383446"/>
                    <constructors>
                        <constructor id="constructor_Not_E09D73F3998C8D1BE4FCB7F3CBD9D508E3D4A39A">
                            <name>Not(DomObject* subject_)</name>
                            <syntax>public Not(DomObject* subject_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Not_938BB9975D21A33622CC79FA41C9EF7708620A1B">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383482">
                    <name>NotEqual</name>
                    <groupName>NotEqual</groupName>
                    <syntax> public class NotEqual;</syntax>
                    <baseClass ref="1383468"/>
                    <constructors>
                        <constructor id="constructor_NotEqual_66053AB87D8351FCFD9F0A420310301B830C5FDC">
                            <name>NotEqual(DomObject* left_, DomObject* right_)</name>
                            <syntax>public NotEqual(DomObject* left_, DomObject* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_NotEqual_4319FDDE20899513DCF292A96A975A1E64E98558">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383604">
                    <name>Pointer</name>
                    <groupName>Pointer</groupName>
                    <syntax> public class Pointer;</syntax>
                    <baseClass ref="1383437"/>
                    <constructors>
                        <constructor id="constructor_Pointer_F5C199343647D691F54D1FF572745C55D1F0667D">
                            <name>Pointer(DomObject* subject_)</name>
                            <syntax>public nothrow Pointer(DomObject* subject_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Pointer_EF9550CE6336357EF9FFACA7FA5E8715BFA0356A">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_Pointer_F25245A4547E9820AAB2D2BB5E704C0EEB2FC2BD">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.1385088"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383518">
                    <name>PostfixDecrement</name>
                    <groupName>PostfixDecrement</groupName>
                    <syntax> public class PostfixDecrement;</syntax>
                    <baseClass ref="1383514"/>
                    <constructors>
                        <constructor id="constructor_PostfixDecrement_DC7474395CF5CDAE9DAD1E2FD86BFC05F0B51A00">
                            <name>PostfixDecrement(DomObject* subject_)</name>
                            <syntax>public PostfixDecrement(DomObject* subject_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_PostfixDecrement_90E778C7672B1E09D16EAAF23A7E7C1AD5B642AB">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383514">
                    <name>PostfixExpression</name>
                    <groupName>PostfixExpression</groupName>
                    <syntax>abstract public class PostfixExpression;</syntax>
                    <baseClass ref="1383442"/>
                    <constructors>
                        <constructor id="constructor_PostfixExpression_CB4FDDC5858E6036F8A9CBB1607BA2F5D39BDD01">
                            <name>PostfixExpression(DomObject* subject_, Operator op_)</name>
                            <syntax>public PostfixExpression(DomObject* subject_, Operator op_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                                <parameter>
                                    <name>op_</name>
                                    <type ref="1383441"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_PostfixExpression_33A0537C68AE78FE90382A2860C2C83E388FA6A8">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_PostfixExpression_F643C3E8F731E55A6EB9CEF8C9F5A13636E5F177">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.1385088"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383516">
                    <name>PostfixIncrement</name>
                    <groupName>PostfixIncrement</groupName>
                    <syntax> public class PostfixIncrement;</syntax>
                    <baseClass ref="1383514"/>
                    <constructors>
                        <constructor id="constructor_PostfixIncrement_90C8FBA27B48C0C99938F23A1AFB1D2C590CBB18">
                            <name>PostfixIncrement(DomObject* subject_)</name>
                            <syntax>public PostfixIncrement(DomObject* subject_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_PostfixIncrement_3FD1090D67FC659751C6828D84B0B2D4627288BE">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383456">
                    <name>PrefixDecrement</name>
                    <groupName>PrefixDecrement</groupName>
                    <syntax> public class PrefixDecrement;</syntax>
                    <baseClass ref="1383446"/>
                    <constructors>
                        <constructor id="constructor_PrefixDecrement_9BA86A49C7BF0B604DEE1BAA953CD14D29FD4269">
                            <name>PrefixDecrement(DomObject* subject_)</name>
                            <syntax>public PrefixDecrement(DomObject* subject_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_PrefixDecrement_7C3753C3450F67663628EDDC528087D36A5228F8">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383446">
                    <name>PrefixExpression</name>
                    <groupName>PrefixExpression</groupName>
                    <syntax>abstract public class PrefixExpression;</syntax>
                    <baseClass ref="1383442"/>
                    <constructors>
                        <constructor id="constructor_PrefixExpression_55BB390293B66B433E77F50FE7CCBAC01799D294">
                            <name>PrefixExpression(Operator op_, DomObject* subject_)</name>
                            <syntax>public PrefixExpression(Operator op_, DomObject* subject_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>op_</name>
                                    <type ref="1383441"/>
                                </parameter>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_PrefixExpression_ABBE3DF62BBFA881B067C644CBAA563667E3EDC5">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_PrefixExpression_7C3C5C5B839C2ACE36E4562CC9A51AFD905501C3">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.1385088"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383454">
                    <name>PrefixIncrement</name>
                    <groupName>PrefixIncrement</groupName>
                    <syntax> public class PrefixIncrement;</syntax>
                    <baseClass ref="1383446"/>
                    <constructors>
                        <constructor id="constructor_PrefixIncrement_9ED02493F3284F1C7E14159E1FB486E44EFACBE7">
                            <name>PrefixIncrement(DomObject* subject_)</name>
                            <syntax>public PrefixIncrement(DomObject* subject_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_PrefixIncrement_3B4D1A0B64F9DB0F100DDB3962DA6AC432359CF0">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383578">
                    <name>RangeForStatement</name>
                    <groupName>RangeForStatement</groupName>
                    <syntax> public class RangeForStatement;</syntax>
                    <baseClass ref="1383544"/>
                    <constructors>
                        <constructor id="constructor_RangeForStatement_57E7A7535F9C92CF526AFDD1F0D4670794795222">
                            <name>RangeForStatement(DomObject* typeExpr_, DomObject* id_, DomObject* container_, Statement* action_)</name>
                            <syntax>public RangeForStatement(DomObject* typeExpr_, DomObject* id_, DomObject* container_, Statement* action_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>typeExpr_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                                <parameter>
                                    <name>id_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                                <parameter>
                                    <name>container_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                                <parameter>
                                    <name>action_</name>
                                    <type ref="type.1383545"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_RangeForStatement_41B21DC84F65DD51A9063B80B77ED127BF914D2B">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_RangeForStatement_F60E0AC3DBCC0201404F903E827606D56EEFCA0D">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.1385088"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383504">
                    <name>Rem</name>
                    <groupName>Rem</groupName>
                    <syntax> public class Rem;</syntax>
                    <baseClass ref="1383468"/>
                    <constructors>
                        <constructor id="constructor_Rem_E096A4C2C1D4E88D581CC75CCF03F8314CA201FE">
                            <name>Rem(DomObject* left_, DomObject* right_)</name>
                            <syntax>public Rem(DomObject* left_, DomObject* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Rem_DACEF65994A3EFD7A4FB48A7DA77C7BB98344705">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383550">
                    <name>ReturnStatement</name>
                    <groupName>ReturnStatement</groupName>
                    <syntax> public class ReturnStatement;</syntax>
                    <baseClass ref="1383544"/>
                    <constructors>
                        <constructor id="constructor_ReturnStatement_732BE4EA9A3E5E17B44648C08B1BE691079F903D">
                            <name>ReturnStatement(DomObject* expression_)</name>
                            <syntax>public ReturnStatement(DomObject* expression_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>expression_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_ReturnStatement_D9D1C2B0CDC1733E47DEBE4C05F21B62F5AE3A5F">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_ReturnStatement_1CEF02004856480C0E37E0A7BBB8A180F32306F9">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.1385088"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383602">
                    <name>RvalueRef</name>
                    <groupName>RvalueRef</groupName>
                    <syntax> public class RvalueRef;</syntax>
                    <baseClass ref="1383437"/>
                    <constructors>
                        <constructor id="constructor_RvalueRef_C850BD48D7191DB271CC8B042F31F85D91E83A0D">
                            <name>RvalueRef(DomObject* subject_)</name>
                            <syntax>public nothrow RvalueRef(DomObject* subject_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_RvalueRef_BCDBFBB4C211A5BF48F8469AE783D803BAFEDC26">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_RvalueRef_AB27ED472E64C64FE0013A2D27DC47D2F9ECA5F0">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.1385088"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383415">
                    <name>SByteType</name>
                    <groupName>SByteType</groupName>
                    <syntax> public class SByteType;</syntax>
                    <baseClass ref="1383405"/>
                    <constructors>
                        <constructor id="default_constructor_SByteType_E1FFD26EF6FB7EA54C3262FD8683FAED7FE2A7E2">
                            <name>SByteType()</name>
                            <syntax>public nothrow SByteType();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_SByteType_1EB5449A7EA6370A590CB85DD21E7E4655F03227">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383492">
                    <name>ShiftLeft</name>
                    <groupName>ShiftLeft</groupName>
                    <syntax> public class ShiftLeft;</syntax>
                    <baseClass ref="1383468"/>
                    <constructors>
                        <constructor id="constructor_ShiftLeft_AAAB5549C228798366C5B43A7FCD7A4D26FEAEFE">
                            <name>ShiftLeft(DomObject* left_, DomObject* right_)</name>
                            <syntax>public ShiftLeft(DomObject* left_, DomObject* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_ShiftLeft_EB4CC737C0B0C2AC9C16B24B604539A7FB19D9D1">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383494">
                    <name>ShiftRight</name>
                    <groupName>ShiftRight</groupName>
                    <syntax> public class ShiftRight;</syntax>
                    <baseClass ref="1383468"/>
                    <constructors>
                        <constructor id="constructor_ShiftRight_EB0F780EDEEFEB894514EEFE24F8A208DB24E751">
                            <name>ShiftRight(DomObject* left_, DomObject* right_)</name>
                            <syntax>public ShiftRight(DomObject* left_, DomObject* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_ShiftRight_1D90E3CCF113308E0F4289CB8C5A44C79160A1B7">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383419">
                    <name>ShortType</name>
                    <groupName>ShortType</groupName>
                    <syntax> public class ShortType;</syntax>
                    <baseClass ref="1383405"/>
                    <constructors>
                        <constructor id="default_constructor_ShortType_CBAD1184637ECF108C83860332EBCAAC270AD420">
                            <name>ShortType()</name>
                            <syntax>public nothrow ShortType();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_ShortType_60A135E86AC0A13E8ADBDE4384AE51F3802BEF56">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383520">
                    <name>SizeOf</name>
                    <groupName>SizeOf</groupName>
                    <syntax> public class SizeOf;</syntax>
                    <baseClass ref="1383442"/>
                    <constructors>
                        <constructor id="constructor_SizeOf_80EA00B08359A555AF76FF76C2F0C1A44F9C11A6">
                            <name>SizeOf(DomObject* subject_)</name>
                            <syntax>public SizeOf(DomObject* subject_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_SizeOf_3B8A538C207F525B50CA40A9B1A7C83DAFFE5704">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_SizeOf_1CCAA2FBEAE9694C8F8F3F5EC34444159527E7EF">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.1385088"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383544">
                    <name>Statement</name>
                    <groupName>Statement</groupName>
                    <syntax>abstract public class Statement;</syntax>
                    <baseClass ref="1383437"/>
                    <constructors>
                        <constructor id="constructor_Statement_74B13AFABA362F759545E017C915BB60B0EBCDB2">
                            <name>Statement(const String&lt;uchar>&amp; name_)</name>
                            <syntax>public Statement(const String&lt;uchar>&amp; name_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.1378718"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Label_Statement_D7E8D4477CF7D94F2C23541FCC40F45BB6AE38C5">
                            <name>Label() const</name>
                            <syntax>public const String&lt;uchar>&amp; Label() const;</syntax>
                            <returnType ref="type.1378718"/>
                        </function>
                        <function id="member_function_NoNewLine_Statement_C83E8D12172AD188ACD5C9EC1E66230C25656986">
                            <name>NoNewLine() const</name>
                            <syntax>public bool NoNewLine() const;</syntax>
                            <returnType ref="type.1377785"/>
                        </function>
                        <function id="member_function_SetLabel_Statement_AA2A73F102EFB3EBA16C5396EBC58C1BEF9A84FF">
                            <name>SetLabel(const String&lt;uchar>&amp; label_)</name>
                            <syntax>public void SetLabel(const String&lt;uchar>&amp; label_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>label_</name>
                                    <type ref="type.1378718"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetNoNewLine_Statement_DAF1937FBD23C9FC3C00C0F6879ECD17763639B8">
                            <name>SetNoNewLine()</name>
                            <syntax>public void SetNoNewLine();</syntax>
                        </function>
                    </functions>
                </class>
                <class id="1383498">
                    <name>Sub</name>
                    <groupName>Sub</groupName>
                    <syntax> public class Sub;</syntax>
                    <baseClass ref="1383468"/>
                    <constructors>
                        <constructor id="constructor_Sub_6E8C0D86F99A34B82B35757DE1B27D3E662887B3">
                            <name>Sub(DomObject* left_, DomObject* right_)</name>
                            <syntax>public Sub(DomObject* left_, DomObject* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_Sub_D08EC79D2D95A13E6CC5F672A43B5C3A910CBD94">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383584">
                    <name>SwitchStatement</name>
                    <groupName>SwitchStatement</groupName>
                    <syntax> public class SwitchStatement;</syntax>
                    <baseClass ref="1383544"/>
                    <constructors>
                        <constructor id="constructor_SwitchStatement_5B5983EA00EC2FF44A1EB734B584D9FD8D3BE7E9">
                            <name>SwitchStatement(DomObject* condition_)</name>
                            <syntax>public SwitchStatement(DomObject* condition_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>condition_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_SwitchStatement_7680211634D2C2A46D292370497409DFE3B35DFD">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_AddCase_SwitchStatement_145079D1FFDE578D8EEE71258ABAA0C81236AD41">
                            <name>AddCase(CaseStatement* caseS)</name>
                            <syntax>public void AddCase(CaseStatement* caseS);</syntax>
                            <parameters>
                                <parameter>
                                    <name>caseS</name>
                                    <type ref="type.1383581"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_SwitchStatement_33408582BE269AF5EFF205B07F476D187284C1CA">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.1385088"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetDefault_SwitchStatement_DCC7A782721DDBF0594739B6617BDBDD9BBCEF28">
                            <name>SetDefault(DefaultStatement* defaultS_)</name>
                            <syntax>public void SetDefault(DefaultStatement* defaultS_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>defaultS_</name>
                                    <type ref="type.1383583"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383538">
                    <name>TemplateId</name>
                    <groupName>TemplateId</groupName>
                    <syntax> public class TemplateId;</syntax>
                    <baseClass ref="1383437"/>
                    <constructors>
                        <constructor id="constructor_TemplateId_ED4A4C2FC2654243E0B2E689B5F1AC7AD019904C">
                            <name>TemplateId(const String&lt;uchar>&amp; name_)</name>
                            <syntax>public nothrow TemplateId(const String&lt;uchar>&amp; name_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.1378718"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_TemplateId_A3C3493BCD2D26A0518B9AB047186E9D48037B9B">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_AddTemplateArg_TemplateId_E13EA04BD4F2173FBE332CB288362C7457CE81E7">
                            <name>AddTemplateArg(DomObject* templateArg)</name>
                            <syntax>public void AddTemplateArg(DomObject* templateArg);</syntax>
                            <parameters>
                                <parameter>
                                    <name>templateArg</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_TemplateId_8249820E981760EF40A9186A229550FCEA9AF594">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.1385088"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Rank_TemplateId_A44A4F1B8285173E28F32247805DD64F60B354B5">
                            <name>Rank() const</name>
                            <syntax>public nothrow override int Rank() const;</syntax>
                            <returnType ref="type.1377790"/>
                        </function>
                    </functions>
                </class>
                <class id="1383530">
                    <name>This</name>
                    <groupName>This</groupName>
                    <syntax> public class This;</syntax>
                    <baseClass ref="1383442"/>
                    <constructors>
                        <constructor id="default_constructor_This_457D8657BA6727CEBBA3B226B5C5AE221FC6567F">
                            <name>This()</name>
                            <syntax>public This();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_This_4F1E23E7F738953B666A27C03250150B3F1059DA">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383590">
                    <name>ThrowStatement</name>
                    <groupName>ThrowStatement</groupName>
                    <syntax> public class ThrowStatement;</syntax>
                    <baseClass ref="1383544"/>
                    <constructors>
                        <constructor id="constructor_ThrowStatement_B47DBD2021DF645DB40647E4176E808A0230F26D">
                            <name>ThrowStatement(DomObject* expression_)</name>
                            <syntax>public ThrowStatement(DomObject* expression_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>expression_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_ThrowStatement_7392CE8B6D0F0FA6FAEC28E761FD393C39A03B8E">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_ThrowStatement_9A9B82A1A71E0BCCFCD9754567D23A4056861CE2">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.1385088"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383594">
                    <name>TryStatement</name>
                    <groupName>TryStatement</groupName>
                    <syntax> public class TryStatement;</syntax>
                    <baseClass ref="1383544"/>
                    <constructors>
                        <constructor id="constructor_TryStatement_EBC83DE64EB4CB6FD6F926871AA1EECA21192F75">
                            <name>TryStatement(CompoundStatement* tryBlock_)</name>
                            <syntax>public TryStatement(CompoundStatement* tryBlock_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>tryBlock_</name>
                                    <type ref="type.1383549"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_TryStatement_A89A3AA77E19E797C37720414B366D80A3C70BFF">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_AddCatch_TryStatement_7458A53970C51B0D699A7D988408F238B37BBD42">
                            <name>AddCatch(Catch* catch_)</name>
                            <syntax>public void AddCatch(Catch* catch_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>catch_</name>
                                    <type ref="type.1383593"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_TryStatement_641AA7A6822F4B0ABC7A80ACE7F355C9E84D0030">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.1385088"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383405">
                    <name>Type</name>
                    <groupName>Type</groupName>
                    <syntax>abstract public class Type;</syntax>
                    <baseClass ref="1383437"/>
                    <constructors>
                        <constructor id="constructor_Type_B303B86671D6CB6D5EEA32107CD9DDD13764D47B">
                            <name>Type(const String&lt;uchar>&amp; name_)</name>
                            <syntax>public nothrow Type(const String&lt;uchar>&amp; name_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.1378718"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                </class>
                <class id="1383522">
                    <name>TypeName</name>
                    <groupName>TypeName</groupName>
                    <syntax> public class TypeName;</syntax>
                    <baseClass ref="1383442"/>
                    <constructors>
                        <constructor id="constructor_TypeName_F996002831E5187DA6B02FCF91E526AF5A62A894">
                            <name>TypeName(DomObject* subject_)</name>
                            <syntax>public TypeName(DomObject* subject_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_TypeName_3199B1BBF3CB383BCD71810C515EFC584362301B">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_TypeName_0B8E9CE526EE6810D2F4F902AF4089BB0B48EFAE">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.1385088"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383413">
                    <name>UCharType</name>
                    <groupName>UCharType</groupName>
                    <syntax> public class UCharType;</syntax>
                    <baseClass ref="1383405"/>
                    <constructors>
                        <constructor id="default_constructor_UCharType_55927AEB46DDBBB9673D48E0C4E528510BC0F76B">
                            <name>UCharType()</name>
                            <syntax>public nothrow UCharType();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_UCharType_19F6A00A1A7684639AC6C6CFF7CD4AA547C69AEA">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383425">
                    <name>UIntType</name>
                    <groupName>UIntType</groupName>
                    <syntax> public class UIntType;</syntax>
                    <baseClass ref="1383405"/>
                    <constructors>
                        <constructor id="default_constructor_UIntType_B7BFDBCEC6C8C967FC69F81DBA2CB8719639F76A">
                            <name>UIntType()</name>
                            <syntax>public nothrow UIntType();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_UIntType_4B2B5CF5613FE5AAEAC382E5405839777352740B">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383429">
                    <name>ULongType</name>
                    <groupName>ULongType</groupName>
                    <syntax> public class ULongType;</syntax>
                    <baseClass ref="1383405"/>
                    <constructors>
                        <constructor id="default_constructor_ULongType_AF725CA8E9D472301292BCC031B9FBD6F950CC55">
                            <name>ULongType()</name>
                            <syntax>public nothrow ULongType();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_ULongType_3AE24932A279F74188F31E1C9432715CB35E2DD6">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383421">
                    <name>UShortType</name>
                    <groupName>UShortType</groupName>
                    <syntax> public class UShortType;</syntax>
                    <baseClass ref="1383405"/>
                    <constructors>
                        <constructor id="default_constructor_UShortType_71010419314BCE47091A9FCA172BC70F1EC65AE7">
                            <name>UShortType()</name>
                            <syntax>public nothrow UShortType();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_UShortType_6E436A39550867DD6AB5E0E86FD13FE955CD5F34">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383460">
                    <name>UnaryMinus</name>
                    <groupName>UnaryMinus</groupName>
                    <syntax> public class UnaryMinus;</syntax>
                    <baseClass ref="1383446"/>
                    <constructors>
                        <constructor id="constructor_UnaryMinus_2222612418F7A159AD9199788EA89A170B0B2D74">
                            <name>UnaryMinus(DomObject* subject_)</name>
                            <syntax>public UnaryMinus(DomObject* subject_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_UnaryMinus_A3B80D54A36F6C9082B9A7227D400D24AE731A3C">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383458">
                    <name>UnaryPlus</name>
                    <groupName>UnaryPlus</groupName>
                    <syntax> public class UnaryPlus;</syntax>
                    <baseClass ref="1383446"/>
                    <constructors>
                        <constructor id="constructor_UnaryPlus_2B326BA9D6196DC0CA0D3A0219F961C5B92B7500">
                            <name>UnaryPlus(DomObject* subject_)</name>
                            <syntax>public UnaryPlus(DomObject* subject_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>subject_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_UnaryPlus_A2A49AB332F20D114CA806DEF99AA71AF43A3B70">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383608">
                    <name>Visitor</name>
                    <groupName>Visitor</groupName>
                    <syntax> public class Visitor;</syntax>
                    <functions>
                        <function id="function_group_Visit_C70DAD81AEA92968DDC755106A5EA0CE350437F1">
                            <name>Visit</name>
                            <overloads>
                                <overload id="member_function_Visit_Visitor_0789948E9F966221696C405170523CBD9D8FB7FE">
                                    <name>Visit(Add&amp; add)</name>
                                    <syntax>public virtual void Visit(Add&amp; add);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>add</name>
                                            <type ref="type.1385373"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_B7FC29A95DB6FC426BB8F56BC1F3D0019AAD0009">
                                    <name>Visit(AddressOf&amp; addressOf)</name>
                                    <syntax>public virtual void Visit(AddressOf&amp; addressOf);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>addressOf</name>
                                            <type ref="type.1385354"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_6790D02F10CB74718DCEA50BDC12AD124518A0E3">
                                    <name>Visit(Array&amp; array)</name>
                                    <syntax>public virtual void Visit(Array&amp; array);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>array</name>
                                            <type ref="type.1385349"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_41D1286C7468DD1834015190F77FD85AC277296E">
                                    <name>Visit(Arrow&amp; arrow)</name>
                                    <syntax>public virtual void Visit(Arrow&amp; arrow);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>arrow</name>
                                            <type ref="type.1385351"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_A7D43685851CD2D781FBF4BFBAE233C22F62F317">
                                    <name>Visit(As&amp; as_)</name>
                                    <syntax>public virtual void Visit(As&amp; as_);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>as_</name>
                                            <type ref="type.1385379"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_BB462344D9057BD5B402132DE8B40CDA457C4B0B">
                                    <name>Visit(AssertStatement&amp; assertStatement)</name>
                                    <syntax>public virtual void Visit(AssertStatement&amp; assertStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>assertStatement</name>
                                            <type ref="type.1385411"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_0942547ABC6D83EC5E6E1357B2C0DEC1154E124C">
                                    <name>Visit(AssignmentStatement&amp; assignmentStatement)</name>
                                    <syntax>public virtual void Visit(AssignmentStatement&amp; assignmentStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>assignmentStatement</name>
                                            <type ref="type.1385402"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_28FD0EEDE7BEA0B60246063A5A870A61BAE9C3C1">
                                    <name>Visit(Base&amp; base_)</name>
                                    <syntax>public virtual void Visit(Base&amp; base_);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>base_</name>
                                            <type ref="type.1385390"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_FF190CDC2B8BABD2EA2D03F221CA912E52221AF7">
                                    <name>Visit(BitAnd&amp; bitAnd)</name>
                                    <syntax>public virtual void Visit(BitAnd&amp; bitAnd);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>bitAnd</name>
                                            <type ref="type.1385364"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_CF12672ACCBC04C669111FA2050B290BDAF6D3F5">
                                    <name>Visit(BitOr&amp; bitOr)</name>
                                    <syntax>public virtual void Visit(BitOr&amp; bitOr);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>bitOr</name>
                                            <type ref="type.1385362"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_6357C2E9393348094047A2F1F1B79BD0C69E2EA9">
                                    <name>Visit(BitXor&amp; bitXor)</name>
                                    <syntax>public virtual void Visit(BitXor&amp; bitXor);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>bitXor</name>
                                            <type ref="type.1385363"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_7B9481A99AF6A82796DAE60FA810FBBBFCD78D15">
                                    <name>Visit(BoolType&amp; boolType)</name>
                                    <syntax>public virtual void Visit(BoolType&amp; boolType);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>boolType</name>
                                            <type ref="type.1385327"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_340CF7CF2AD5F18E8A21ED63D47D2699A0CC867A">
                                    <name>Visit(BreakStatement&amp; breakStatement)</name>
                                    <syntax>public virtual void Visit(BreakStatement&amp; breakStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>breakStatement</name>
                                            <type ref="type.1385396"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_CEB478500603DD8B7BA7555807104710BCB1FAB5">
                                    <name>Visit(ByteType&amp; byteType)</name>
                                    <syntax>public virtual void Visit(ByteType&amp; byteType);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>byteType</name>
                                            <type ref="type.1385332"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_DA46B59F81DC227014BE970630F322653229F511">
                                    <name>Visit(CaseStatement&amp; caseStatement)</name>
                                    <syntax>public virtual void Visit(CaseStatement&amp; caseStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>caseStatement</name>
                                            <type ref="type.1385230"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_7B00DB5C66D1D6768BC33EEA51D05E71D6E4821C">
                                    <name>Visit(Cast&amp; cast_)</name>
                                    <syntax>public virtual void Visit(Cast&amp; cast_);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>cast_</name>
                                            <type ref="type.1385386"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_B16EFB072A13B89C76B9C2295F1F3F0D865105BE">
                                    <name>Visit(Catch&amp; catch_)</name>
                                    <syntax>public virtual void Visit(Catch&amp; catch_);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>catch_</name>
                                            <type ref="type.1385289"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_68142FC5BE67DDC4F9E18C83D07B419B4A525769">
                                    <name>Visit(CharType&amp; charType)</name>
                                    <syntax>public virtual void Visit(CharType&amp; charType);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>charType</name>
                                            <type ref="type.1385328"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_A64912B10DAD6052727DBD1734646CA5C10EB926">
                                    <name>Visit(Complement&amp; complement)</name>
                                    <syntax>public virtual void Visit(Complement&amp; complement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>complement</name>
                                            <type ref="type.1385359"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_CD32C031A3BFE406065C0EB275CFE1297952E7EC">
                                    <name>Visit(CompoundStatement&amp; compoundStatement)</name>
                                    <syntax>public virtual void Visit(CompoundStatement&amp; compoundStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>compoundStatement</name>
                                            <type ref="type.1385276"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_B41616607C59BC152935C07B7940B0F9810D3E66">
                                    <name>Visit(Conjunction&amp; conjunction)</name>
                                    <syntax>public virtual void Visit(Conjunction&amp; conjunction);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>conjunction</name>
                                            <type ref="type.1385361"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_2607F2E2D5292BB10ECBD838EC7281E921B39E4F">
                                    <name>Visit(Const&amp; const_)</name>
                                    <syntax>public virtual void Visit(Const&amp; const_);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>const_</name>
                                            <type ref="type.1385345"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_50FED16EC5D9D1A2096DE87C271380BAADBD5D08">
                                    <name>Visit(Construct&amp; construct_)</name>
                                    <syntax>public virtual void Visit(Construct&amp; construct_);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>construct_</name>
                                            <type ref="type.1385387"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_88B39263F414C14FE79B8B038B258905DCE4F5E0">
                                    <name>Visit(ConstructionStatement&amp; constructionStatement)</name>
                                    <syntax>public virtual void Visit(ConstructionStatement&amp; constructionStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>constructionStatement</name>
                                            <type ref="type.1385399"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_0BB172B597CB17C3BF8C85431A247B95B81241B6">
                                    <name>Visit(ContinueStatement&amp; continueStatement)</name>
                                    <syntax>public virtual void Visit(ContinueStatement&amp; continueStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>continueStatement</name>
                                            <type ref="type.1385397"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_03A4710A1C39ED239A767F3AA291FB000CD680D6">
                                    <name>Visit(DefaultStatement&amp; defaultStatement)</name>
                                    <syntax>public virtual void Visit(DefaultStatement&amp; defaultStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>defaultStatement</name>
                                            <type ref="type.1385260"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_D37042BF2C3DD0756855A3B557B3058902D983EC">
                                    <name>Visit(DeleteStatement&amp; deleteStatement)</name>
                                    <syntax>public virtual void Visit(DeleteStatement&amp; deleteStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>deleteStatement</name>
                                            <type ref="type.1385400"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_280382812463BCAE665FEA8AB2E11C7661B82202">
                                    <name>Visit(Deref&amp; deref)</name>
                                    <syntax>public virtual void Visit(Deref&amp; deref);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>deref</name>
                                            <type ref="type.1385353"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_CAB491A63162CBFC893C3DC7A71A90A20F3D6126">
                                    <name>Visit(DestroyStatement&amp; destroyStatement)</name>
                                    <syntax>public virtual void Visit(DestroyStatement&amp; destroyStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>destroyStatement</name>
                                            <type ref="type.1385401"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_D241765948E494F31661F9D086C8484B37093056">
                                    <name>Visit(Disjunction&amp; disjunction)</name>
                                    <syntax>public virtual void Visit(Disjunction&amp; disjunction);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>disjunction</name>
                                            <type ref="type.1385360"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_219C0CA351D8AB2210A0775409DBC05DB244635E">
                                    <name>Visit(Div&amp; div)</name>
                                    <syntax>public virtual void Visit(Div&amp; div);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>div</name>
                                            <type ref="type.1385376"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_DE75BE2E5DCA79E57D3A95C0D9CD5024C3744FA8">
                                    <name>Visit(DoStatement&amp; doStatement)</name>
                                    <syntax>public virtual void Visit(DoStatement&amp; doStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>doStatement</name>
                                            <type ref="type.1385394"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_91ED66CADEF340BBCD3088D943821A79698EF509">
                                    <name>Visit(Dot&amp; dot)</name>
                                    <syntax>public virtual void Visit(Dot&amp; dot);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>dot</name>
                                            <type ref="type.1385350"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_1DC966AA1A2C3ABD5E1BF1CA8B0C886981B6BD8B">
                                    <name>Visit(DoubleType&amp; doubleType)</name>
                                    <syntax>public virtual void Visit(DoubleType&amp; doubleType);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>doubleType</name>
                                            <type ref="type.1385340"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_8FD55B7DC51BB803C49A652985306788516ED133">
                                    <name>Visit(EmptyStatement&amp; emptyStatement)</name>
                                    <syntax>public virtual void Visit(EmptyStatement&amp; emptyStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>emptyStatement</name>
                                            <type ref="type.1385404"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_E8002EA1632204B8ABBB920FD571F561B04A1FB2">
                                    <name>Visit(Equal&amp; equal)</name>
                                    <syntax>public virtual void Visit(Equal&amp; equal);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>equal</name>
                                            <type ref="type.1385365"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_8D7E58DA70FAC989C8A1EF654B03BA5FD0879588">
                                    <name>Visit(ExpressionStatement&amp; expressionStatement)</name>
                                    <syntax>public virtual void Visit(ExpressionStatement&amp; expressionStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>expressionStatement</name>
                                            <type ref="type.1385403"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_B21129F5AFD85D32927D89AFC8148C2AC1073CF1">
                                    <name>Visit(FloatType&amp; floatType)</name>
                                    <syntax>public virtual void Visit(FloatType&amp; floatType);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>floatType</name>
                                            <type ref="type.1385339"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_6CBC3B42FA2FE2CE6F52933429CB696240B71015">
                                    <name>Visit(ForStatement&amp; forStatement)</name>
                                    <syntax>public virtual void Visit(ForStatement&amp; forStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>forStatement</name>
                                            <type ref="type.1385395"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_97D12C3A68DF35D6D2F0B8601334A3BB67D44F7F">
                                    <name>Visit(GotoCaseStatement&amp; gotoCaseStatement)</name>
                                    <syntax>public virtual void Visit(GotoCaseStatement&amp; gotoCaseStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>gotoCaseStatement</name>
                                            <type ref="type.1385407"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_B5EF70FF27DE9081BA03A98701E9EFF6FC89C2F1">
                                    <name>Visit(GotoDefaultStatement&amp; gotoDefaultStatement)</name>
                                    <syntax>public virtual void Visit(GotoDefaultStatement&amp; gotoDefaultStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>gotoDefaultStatement</name>
                                            <type ref="type.1385408"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_0701E2DC68AFFA096276B3B8836FB4C40FD84D60">
                                    <name>Visit(GotoStatement&amp; gotoStatement)</name>
                                    <syntax>public virtual void Visit(GotoStatement&amp; gotoStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>gotoStatement</name>
                                            <type ref="type.1385398"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_BDCB831141529F121755E5E8400EB43264D368B6">
                                    <name>Visit(Greater&amp; greater)</name>
                                    <syntax>public virtual void Visit(Greater&amp; greater);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>greater</name>
                                            <type ref="type.1385368"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_48EB4C9C696CA0D9239EFCB0654A0CA0A99C1705">
                                    <name>Visit(GreaterOrEqual&amp; greaterOrEqual)</name>
                                    <syntax>public virtual void Visit(GreaterOrEqual&amp; greaterOrEqual);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>greaterOrEqual</name>
                                            <type ref="type.1385370"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_E0769B3932F3EB98F43008BAAE46F34297C364D8">
                                    <name>Visit(Identifier&amp; identifier)</name>
                                    <syntax>public virtual void Visit(Identifier&amp; identifier);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>identifier</name>
                                            <type ref="type.1385342"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_7D88F1D45BD30EF66543B910BA537741C5A19012">
                                    <name>Visit(IfStatement&amp; ifStatement)</name>
                                    <syntax>public virtual void Visit(IfStatement&amp; ifStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>ifStatement</name>
                                            <type ref="type.1385392"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_5CB8643757D700752CD9D5EB41CEDF0A2D11D8C6">
                                    <name>Visit(Indexing&amp; indexing)</name>
                                    <syntax>public virtual void Visit(Indexing&amp; indexing);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>indexing</name>
                                            <type ref="type.1385380"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_A2C783612A56E83BC0FE75009029220D1B6F0B97">
                                    <name>Visit(IntType&amp; intType)</name>
                                    <syntax>public virtual void Visit(IntType&amp; intType);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>intType</name>
                                            <type ref="type.1385335"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_967D0A92822BEDDB877FB771FB4B930354CC4851">
                                    <name>Visit(Invoke&amp; invoke)</name>
                                    <syntax>public virtual void Visit(Invoke&amp; invoke);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>invoke</name>
                                            <type ref="type.1385381"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_CF54F1ABDFD1D883A5EB26F11992FA6EDE3F5769">
                                    <name>Visit(Is&amp; is_)</name>
                                    <syntax>public virtual void Visit(Is&amp; is_);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>is_</name>
                                            <type ref="type.1385378"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_BCBDF8A932AC3ACAC8B2F13D4249690C7EDADE9B">
                                    <name>Visit(Less&amp; less)</name>
                                    <syntax>public virtual void Visit(Less&amp; less);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>less</name>
                                            <type ref="type.1385367"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_AFDF0C6CD98664ADE9EC7B2A47D8DDEF4C73149C">
                                    <name>Visit(LessOrEqual&amp; lessOrEqual)</name>
                                    <syntax>public virtual void Visit(LessOrEqual&amp; lessOrEqual);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>lessOrEqual</name>
                                            <type ref="type.1385369"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_CE16541429EE3ADA4F6F7CB29B42807BF3C7900A">
                                    <name>Visit(Literal&amp; literal)</name>
                                    <syntax>public virtual void Visit(Literal&amp; literal);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>literal</name>
                                            <type ref="type.1385344"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_24E049654FA4850CC5920E9D919C9165C6C2C334">
                                    <name>Visit(LongType&amp; longType)</name>
                                    <syntax>public virtual void Visit(LongType&amp; longType);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>longType</name>
                                            <type ref="type.1385337"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_8D7DC3C0459344F0B1C69B655D48B70061B0E37B">
                                    <name>Visit(LvalueRef&amp; lvalueRef)</name>
                                    <syntax>public virtual void Visit(LvalueRef&amp; lvalueRef);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>lvalueRef</name>
                                            <type ref="type.1385346"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_3A90620F108D9068E9F8EC4DE928F62004CE074F">
                                    <name>Visit(Mul&amp; mul)</name>
                                    <syntax>public virtual void Visit(Mul&amp; mul);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>mul</name>
                                            <type ref="type.1385375"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_319541A4B279C09FF0A083970339A6C516B007F2">
                                    <name>Visit(New&amp; new_)</name>
                                    <syntax>public virtual void Visit(New&amp; new_);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>new_</name>
                                            <type ref="type.1385388"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_F8BD2118606D1E6BE7F5BC4E0CBD6D475519BA04">
                                    <name>Visit(Not&amp; not_)</name>
                                    <syntax>public virtual void Visit(Not&amp; not_);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>not_</name>
                                            <type ref="type.1385352"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_C1BF57DDE1351085C0208B72ED3A45B18382AF49">
                                    <name>Visit(NotEqual&amp; notEqual)</name>
                                    <syntax>public virtual void Visit(NotEqual&amp; notEqual);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>notEqual</name>
                                            <type ref="type.1385366"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_CC914D02BF74C000FAB3E92007E660C3C34350C2">
                                    <name>Visit(Pointer&amp; pointer)</name>
                                    <syntax>public virtual void Visit(Pointer&amp; pointer);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>pointer</name>
                                            <type ref="type.1385348"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_CA9CC61841F4D3070F4044760118D8AC9D10D468">
                                    <name>Visit(PostfixDecrement&amp; postfixDecrement)</name>
                                    <syntax>public virtual void Visit(PostfixDecrement&amp; postfixDecrement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>postfixDecrement</name>
                                            <type ref="type.1385383"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_E5DC808B60F46AAD97FF40F07EC3315FA1EC95E2">
                                    <name>Visit(PostfixIncrement&amp; postfixIncrement)</name>
                                    <syntax>public virtual void Visit(PostfixIncrement&amp; postfixIncrement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>postfixIncrement</name>
                                            <type ref="type.1385382"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_E356A607D1E00821F4C223AB6AEDB8F3AE34D24D">
                                    <name>Visit(PrefixDecrement&amp; prefixDecrement)</name>
                                    <syntax>public virtual void Visit(PrefixDecrement&amp; prefixDecrement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>prefixDecrement</name>
                                            <type ref="type.1385356"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_7BF2D82E33C18E26BB92077FFE1DC12000C2B616">
                                    <name>Visit(PrefixIncrement&amp; prefixIncrement)</name>
                                    <syntax>public virtual void Visit(PrefixIncrement&amp; prefixIncrement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>prefixIncrement</name>
                                            <type ref="type.1385355"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_9AA520081FF6F746884A3FA221A1AA6515048CEF">
                                    <name>Visit(RangeForStatement&amp; rangeForStatement)</name>
                                    <syntax>public virtual void Visit(RangeForStatement&amp; rangeForStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>rangeForStatement</name>
                                            <type ref="type.1385405"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_EED4C734205C9BA3DE800A56D6CABFA6F704A9DA">
                                    <name>Visit(Rem&amp; rem)</name>
                                    <syntax>public virtual void Visit(Rem&amp; rem);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>rem</name>
                                            <type ref="type.1385377"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_A55020B5383EA9D46EA1D284637498256019BBB1">
                                    <name>Visit(ReturnStatement&amp; returnStatement)</name>
                                    <syntax>public virtual void Visit(ReturnStatement&amp; returnStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>returnStatement</name>
                                            <type ref="type.1385391"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_19CD26E83F19DF1389FDFF4B063CA82EAC7B34D9">
                                    <name>Visit(RvalueRef&amp; rvalueRef)</name>
                                    <syntax>public virtual void Visit(RvalueRef&amp; rvalueRef);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>rvalueRef</name>
                                            <type ref="type.1385347"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_3B8937371654B5334421B5811EE92AAB09C12F35">
                                    <name>Visit(SByteType&amp; sbyteType)</name>
                                    <syntax>public virtual void Visit(SByteType&amp; sbyteType);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>sbyteType</name>
                                            <type ref="type.1385331"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_ECB50C7731E255C02E6A983C68A2F2C772F76D29">
                                    <name>Visit(ShiftLeft&amp; shiftLeft)</name>
                                    <syntax>public virtual void Visit(ShiftLeft&amp; shiftLeft);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>shiftLeft</name>
                                            <type ref="type.1385371"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_AC20D5262DBCB8A077E9DC7BFF22F5E5DCB496E8">
                                    <name>Visit(ShiftRight&amp; shiftRight)</name>
                                    <syntax>public virtual void Visit(ShiftRight&amp; shiftRight);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>shiftRight</name>
                                            <type ref="type.1385372"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_9C1B883CE273D6A8287E5A1DD0320B851B803796">
                                    <name>Visit(ShortType&amp; shortType)</name>
                                    <syntax>public virtual void Visit(ShortType&amp; shortType);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>shortType</name>
                                            <type ref="type.1385333"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_1D11CD37D9E3C054585364E3F146C70A8A2CFD53">
                                    <name>Visit(SizeOf&amp; sizeOf)</name>
                                    <syntax>public virtual void Visit(SizeOf&amp; sizeOf);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>sizeOf</name>
                                            <type ref="type.1385384"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_075400A45DC5C1534DCBCF2382E11ADA1D15AA6E">
                                    <name>Visit(Sub&amp; sub)</name>
                                    <syntax>public virtual void Visit(Sub&amp; sub);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>sub</name>
                                            <type ref="type.1385374"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_C35482BE7A44D7BC07AD6314B5DBA83C79E98E75">
                                    <name>Visit(SwitchStatement&amp; switchStatement)</name>
                                    <syntax>public virtual void Visit(SwitchStatement&amp; switchStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>switchStatement</name>
                                            <type ref="type.1385406"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_CE6AEA08FEDB45DBDC2EBBC60F33EBC0086E18A7">
                                    <name>Visit(TemplateId&amp; templateId)</name>
                                    <syntax>public virtual void Visit(TemplateId&amp; templateId);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>templateId</name>
                                            <type ref="type.1385343"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_B22620481E19E5DF0AC49B9DA76C8098A8642C19">
                                    <name>Visit(This&amp; this_)</name>
                                    <syntax>public virtual void Visit(This&amp; this_);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>this_</name>
                                            <type ref="type.1385389"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_E47BC201FE16901F71609542EE03226428CFCF00">
                                    <name>Visit(ThrowStatement&amp; throwStatement)</name>
                                    <syntax>public virtual void Visit(ThrowStatement&amp; throwStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>throwStatement</name>
                                            <type ref="type.1385409"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_1951CFAEB61C83AF7A78ABA6468CF8B13B37C438">
                                    <name>Visit(TryStatement&amp; tryStatement)</name>
                                    <syntax>public virtual void Visit(TryStatement&amp; tryStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>tryStatement</name>
                                            <type ref="type.1385410"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_E4762E1F0B8D6BC1B131E3247AA55873AAFA1B01">
                                    <name>Visit(TypeName&amp; typeName)</name>
                                    <syntax>public virtual void Visit(TypeName&amp; typeName);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>typeName</name>
                                            <type ref="type.1385385"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_18D081EB3D72FB1E970F1FB84537C1988DB70E4E">
                                    <name>Visit(UCharType&amp; ucharType)</name>
                                    <syntax>public virtual void Visit(UCharType&amp; ucharType);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>ucharType</name>
                                            <type ref="type.1385330"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_C51190D1D5AB7CF8250E4867961649FEC0A2CB57">
                                    <name>Visit(UIntType&amp; uintType)</name>
                                    <syntax>public virtual void Visit(UIntType&amp; uintType);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>uintType</name>
                                            <type ref="type.1385336"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_FBF14EB9917578F9705C98DF7563B78F1816E5A5">
                                    <name>Visit(ULongType&amp; ulongType)</name>
                                    <syntax>public virtual void Visit(ULongType&amp; ulongType);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>ulongType</name>
                                            <type ref="type.1385338"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_1DFED039450AED76833BB98F61404A434CF55B50">
                                    <name>Visit(UShortType&amp; ushortType)</name>
                                    <syntax>public virtual void Visit(UShortType&amp; ushortType);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>ushortType</name>
                                            <type ref="type.1385334"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_469A13B8811792D7388816F01766EA0C559BE941">
                                    <name>Visit(UnaryMinus&amp; unaryMinus)</name>
                                    <syntax>public virtual void Visit(UnaryMinus&amp; unaryMinus);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>unaryMinus</name>
                                            <type ref="type.1385358"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_8AC89CD7B8B94961FC77DA51C152384BA205F1D6">
                                    <name>Visit(UnaryPlus&amp; unaryPlus)</name>
                                    <syntax>public virtual void Visit(UnaryPlus&amp; unaryPlus);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>unaryPlus</name>
                                            <type ref="type.1385357"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_C2A9BEC66BA42E6CE859781327EFA651C556105C">
                                    <name>Visit(VoidType&amp; voidType)</name>
                                    <syntax>public virtual void Visit(VoidType&amp; voidType);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>voidType</name>
                                            <type ref="type.1385341"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_B75FAB11477E12DD5D6F09B5C0C7D1FA5D38FC0C">
                                    <name>Visit(WCharType&amp; wcharType)</name>
                                    <syntax>public virtual void Visit(WCharType&amp; wcharType);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>wcharType</name>
                                            <type ref="type.1385329"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Visit_Visitor_32F344C982BD5DB73A8E9DEA06A52C52016D2866">
                                    <name>Visit(WhileStatement&amp; whileStatement)</name>
                                    <syntax>public virtual void Visit(WhileStatement&amp; whileStatement);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>whileStatement</name>
                                            <type ref="type.1385393"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                    </functions>
                </class>
                <class id="1383435">
                    <name>VoidType</name>
                    <groupName>VoidType</groupName>
                    <syntax> public class VoidType;</syntax>
                    <baseClass ref="1383405"/>
                    <constructors>
                        <constructor id="default_constructor_VoidType_C39A19C686824E5CFA431F1CD2606B709CB0B187">
                            <name>VoidType()</name>
                            <syntax>public nothrow VoidType();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_VoidType_6075A55A783CD2850F7E92E14CCA3BC8DEB4BB76">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383411">
                    <name>WCharType</name>
                    <groupName>WCharType</groupName>
                    <syntax> public class WCharType;</syntax>
                    <baseClass ref="1383405"/>
                    <constructors>
                        <constructor id="default_constructor_WCharType_566EC0706401885DADD0AFFAB38275BEF7A6440A">
                            <name>WCharType()</name>
                            <syntax>public nothrow WCharType();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_WCharType_4FFA2F9556CE4E37E83680CEBDBBBD1838B4AE30">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1383554">
                    <name>WhileStatement</name>
                    <groupName>WhileStatement</groupName>
                    <syntax> public class WhileStatement;</syntax>
                    <baseClass ref="1383544"/>
                    <constructors>
                        <constructor id="constructor_WhileStatement_E0EAB2EED2F6A4A12324621B9BAEADC3B92829A7">
                            <name>WhileStatement(DomObject* condition_, Statement* statement_)</name>
                            <syntax>public WhileStatement(DomObject* condition_, Statement* statement_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>condition_</name>
                                    <type ref="type.1383438"/>
                                </parameter>
                                <parameter>
                                    <name>statement_</name>
                                    <type ref="type.1383545"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Accept_WhileStatement_5B9D2F6C9907076FAA595EE6CA228E7181CF1D0F">
                            <name>Accept(Visitor&amp; visitor)</name>
                            <syntax>public override void Accept(Visitor&amp; visitor);</syntax>
                            <parameters>
                                <parameter>
                                    <name>visitor</name>
                                    <type ref="type.1385089"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Print_WhileStatement_B54C9BDD7F57D7367ACDB8B677F47423254BFD71">
                            <name>Print(CodeFormatter&amp; formatter)</name>
                            <syntax>public override void Print(CodeFormatter&amp; formatter);</syntax>
                            <parameters>
                                <parameter>
                                    <name>formatter</name>
                                    <type ref="type.1385088"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
            </classes>
            <functions>
                <function id="function_GetBinOpRank_1C24D42F4A9DC2C2883C43076F0E2683AC00C593">
                    <name>GetBinOpRank(Operator op)</name>
                    <syntax>public nothrow int GetBinOpRank(Operator op);</syntax>
                    <parameters>
                        <parameter>
                            <name>op</name>
                            <type ref="1383441"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1377790"/>
                </function>
                <function id="function_MakeBinOpName_7116D8612E30043694F7E2D7E0F09C829642681B">
                    <name>MakeBinOpName(Operator op)</name>
                    <syntax>public nothrow String&lt;char> MakeBinOpName(Operator op);</syntax>
                    <parameters>
                        <parameter>
                            <name>op</name>
                            <type ref="1383441"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1378573"/>
                </function>
                <function id="function_MakePostfixOpName_C35EAB3DFB07FEA5D4A0FBF1924F51852EE04E25">
                    <name>MakePostfixOpName(Operator op)</name>
                    <syntax>public nothrow String&lt;char> MakePostfixOpName(Operator op);</syntax>
                    <parameters>
                        <parameter>
                            <name>op</name>
                            <type ref="1383441"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1378573"/>
                </function>
                <function id="function_MakePrefixOpName_9C5BA91466A36EBDE9324B32691A9107D010E2BA">
                    <name>MakePrefixOpName(Operator op)</name>
                    <syntax>public nothrow String&lt;char> MakePrefixOpName(Operator op);</syntax>
                    <parameters>
                        <parameter>
                            <name>op</name>
                            <type ref="1383441"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1378573"/>
                </function>
                <function id="function_op_eq_563965FE6E3299477616A93C6AA10F266ED8038F">
                    <name>operator==(Operator left, Operator right)</name>
                    <syntax>public bool operator==(Operator left, Operator right);</syntax>
                    <parameters>
                        <parameter>
                            <name>left</name>
                            <type ref="1383441"/>
                        </parameter>
                        <parameter>
                            <name>right</name>
                            <type ref="1383441"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1377785"/>
                </function>
            </functions>
            <enumerations>
                <enumeration id="1383441">
                    <name>Operator</name>
                    <syntax>public enum Operator;</syntax>
                    <underlyingType ref="type.1377790"/>
                    <enumConstant>
                        <name>disjunction</name>
                        <value>0</value>
                    </enumConstant>
                    <enumConstant>
                        <name>conjunction</name>
                        <value>1</value>
                    </enumConstant>
                    <enumConstant>
                        <name>bitOr</name>
                        <value>2</value>
                    </enumConstant>
                    <enumConstant>
                        <name>bitXor</name>
                        <value>3</value>
                    </enumConstant>
                    <enumConstant>
                        <name>bitAnd</name>
                        <value>4</value>
                    </enumConstant>
                    <enumConstant>
                        <name>equal</name>
                        <value>5</value>
                    </enumConstant>
                    <enumConstant>
                        <name>notEqual</name>
                        <value>6</value>
                    </enumConstant>
                    <enumConstant>
                        <name>less</name>
                        <value>7</value>
                    </enumConstant>
                    <enumConstant>
                        <name>greater</name>
                        <value>8</value>
                    </enumConstant>
                    <enumConstant>
                        <name>lessOrEqual</name>
                        <value>9</value>
                    </enumConstant>
                    <enumConstant>
                        <name>greaterOrEqual</name>
                        <value>10</value>
                    </enumConstant>
                    <enumConstant>
                        <name>shiftLeft</name>
                        <value>11</value>
                    </enumConstant>
                    <enumConstant>
                        <name>shiftRight</name>
                        <value>12</value>
                    </enumConstant>
                    <enumConstant>
                        <name>add</name>
                        <value>13</value>
                    </enumConstant>
                    <enumConstant>
                        <name>sub</name>
                        <value>14</value>
                    </enumConstant>
                    <enumConstant>
                        <name>mul</name>
                        <value>15</value>
                    </enumConstant>
                    <enumConstant>
                        <name>div</name>
                        <value>16</value>
                    </enumConstant>
                    <enumConstant>
                        <name>rem</name>
                        <value>17</value>
                    </enumConstant>
                    <enumConstant>
                        <name>not_</name>
                        <value>18</value>
                    </enumConstant>
                    <enumConstant>
                        <name>deref</name>
                        <value>19</value>
                    </enumConstant>
                    <enumConstant>
                        <name>addressOf</name>
                        <value>20</value>
                    </enumConstant>
                    <enumConstant>
                        <name>increment</name>
                        <value>21</value>
                    </enumConstant>
                    <enumConstant>
                        <name>decrement</name>
                        <value>22</value>
                    </enumConstant>
                    <enumConstant>
                        <name>unaryPlus</name>
                        <value>23</value>
                    </enumConstant>
                    <enumConstant>
                        <name>unaryMinus</name>
                        <value>24</value>
                    </enumConstant>
                    <enumConstant>
                        <name>complement</name>
                        <value>25</value>
                    </enumConstant>
                    <enumConstant>
                        <name>is_</name>
                        <value>26</value>
                    </enumConstant>
                    <enumConstant>
                        <name>as_</name>
                        <value>27</value>
                    </enumConstant>
                </enumeration>
            </enumerations>
        </namespace>
    </namespaces>
    <types>
        <type id="1383496">
            <name>Add</name>
        </type>
        <type derived="true" id="type.1385373">
            <name>Add&amp;</name>
            <content>
                <baseType ref="1383496"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383497">
            <name>Add*</name>
            <content>
                <baseType ref="1383496"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383452">
            <name>AddressOf</name>
        </type>
        <type derived="true" id="type.1385354">
            <name>AddressOf&amp;</name>
            <content>
                <baseType ref="1383452"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2956">
            <name>AddressOf&amp;&amp;</name>
            <content>
                <baseType ref="1383452"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383453">
            <name>AddressOf*</name>
            <content>
                <baseType ref="1383452"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383606">
            <name>Array</name>
        </type>
        <type derived="true" id="type.1385349">
            <name>Array&amp;</name>
            <content>
                <baseType ref="1383606"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383607">
            <name>Array*</name>
            <content>
                <baseType ref="1383606"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383466">
            <name>Arrow</name>
        </type>
        <type derived="true" id="type.1385351">
            <name>Arrow&amp;</name>
            <content>
                <baseType ref="1383466"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383467">
            <name>Arrow*</name>
            <content>
                <baseType ref="1383466"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383508">
            <name>As</name>
        </type>
        <type derived="true" id="type.1385379">
            <name>As&amp;</name>
            <content>
                <baseType ref="1383508"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383509">
            <name>As*</name>
            <content>
                <baseType ref="1383508"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383596">
            <name>AssertStatement</name>
        </type>
        <type derived="true" id="type.1385411">
            <name>AssertStatement&amp;</name>
            <content>
                <baseType ref="1383596"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3033">
            <name>AssertStatement&amp;&amp;</name>
            <content>
                <baseType ref="1383596"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383597">
            <name>AssertStatement*</name>
            <content>
                <baseType ref="1383596"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383572">
            <name>AssignmentStatement</name>
        </type>
        <type derived="true" id="type.1385402">
            <name>AssignmentStatement&amp;</name>
            <content>
                <baseType ref="1383572"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383573">
            <name>AssignmentStatement*</name>
            <content>
                <baseType ref="1383572"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383532">
            <name>Base</name>
        </type>
        <type derived="true" id="type.1385390">
            <name>Base&amp;</name>
            <content>
                <baseType ref="1383532"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383533">
            <name>Base*</name>
            <content>
                <baseType ref="1383532"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383468">
            <name>BinaryExpression</name>
        </type>
        <type derived="true" id="type.1383469">
            <name>BinaryExpression*</name>
            <content>
                <baseType ref="1383468"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1612" specialization="true">
            <name>BinaryFun&lt;Argument, Argument, bool></name>
            <content>
                <primaryType ref="1378950"/>
                <argumentType ref="1378201"/>
                <argumentType ref="1378201"/>
                <argumentType ref="type.1377785"/>
            </content>
        </type>
        <type derived="true" id="type.1613">
            <name>BinaryFun&lt;Argument, Argument, bool>*</name>
            <content>
                <baseType ref="type.1612"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1609" specialization="true">
            <name>BinaryFun&lt;Argument1, Argument2, bool></name>
            <content>
                <primaryType ref="1378950"/>
                <argumentType ref="1378198"/>
                <argumentType ref="1378199"/>
                <argumentType ref="type.1377785"/>
            </content>
        </type>
        <type derived="true" id="type.1610">
            <name>BinaryFun&lt;Argument1, Argument2, bool>*</name>
            <content>
                <baseType ref="type.1609"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1763" specialization="true">
            <name>BinaryFun&lt;T, T, T></name>
            <content>
                <primaryType ref="1378950"/>
                <argumentType ref="1378251"/>
                <argumentType ref="1378251"/>
                <argumentType ref="1378251"/>
            </content>
        </type>
        <type id="type.1748" specialization="true">
            <name>BinaryFun&lt;T, T, T></name>
            <content>
                <primaryType ref="1378950"/>
                <argumentType ref="1378245"/>
                <argumentType ref="1378245"/>
                <argumentType ref="1378245"/>
            </content>
        </type>
        <type id="type.1593" specialization="true">
            <name>BinaryFun&lt;T, T, T></name>
            <content>
                <primaryType ref="1378950"/>
                <argumentType ref="1378189"/>
                <argumentType ref="1378189"/>
                <argumentType ref="1378189"/>
            </content>
        </type>
        <type id="type.1738" specialization="true">
            <name>BinaryFun&lt;T, T, T></name>
            <content>
                <primaryType ref="1378950"/>
                <argumentType ref="1378241"/>
                <argumentType ref="1378241"/>
                <argumentType ref="1378241"/>
            </content>
        </type>
        <type id="type.1743" specialization="true">
            <name>BinaryFun&lt;T, T, T></name>
            <content>
                <primaryType ref="1378950"/>
                <argumentType ref="1378243"/>
                <argumentType ref="1378243"/>
                <argumentType ref="1378243"/>
            </content>
        </type>
        <type id="type.1758" specialization="true">
            <name>BinaryFun&lt;T, T, T></name>
            <content>
                <primaryType ref="1378950"/>
                <argumentType ref="1378249"/>
                <argumentType ref="1378249"/>
                <argumentType ref="1378249"/>
            </content>
        </type>
        <type id="type.1577" specialization="true">
            <name>BinaryFun&lt;T, T, T></name>
            <content>
                <primaryType ref="1378950"/>
                <argumentType ref="1378182"/>
                <argumentType ref="1378182"/>
                <argumentType ref="1378182"/>
            </content>
        </type>
        <type id="type.1588" specialization="true">
            <name>BinaryFun&lt;T, T, T></name>
            <content>
                <primaryType ref="1378950"/>
                <argumentType ref="1378187"/>
                <argumentType ref="1378187"/>
                <argumentType ref="1378187"/>
            </content>
        </type>
        <type id="type.1604" specialization="true">
            <name>BinaryFun&lt;T, T, T></name>
            <content>
                <primaryType ref="1378950"/>
                <argumentType ref="1378194"/>
                <argumentType ref="1378194"/>
                <argumentType ref="1378194"/>
            </content>
        </type>
        <type id="type.1599" specialization="true">
            <name>BinaryFun&lt;T, T, T></name>
            <content>
                <primaryType ref="1378950"/>
                <argumentType ref="1378192"/>
                <argumentType ref="1378192"/>
                <argumentType ref="1378192"/>
            </content>
        </type>
        <type derived="true" id="type.1605">
            <name>BinaryFun&lt;T, T, T>*</name>
            <content>
                <baseType ref="type.1604"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1594">
            <name>BinaryFun&lt;T, T, T>*</name>
            <content>
                <baseType ref="type.1593"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1600">
            <name>BinaryFun&lt;T, T, T>*</name>
            <content>
                <baseType ref="type.1599"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1739">
            <name>BinaryFun&lt;T, T, T>*</name>
            <content>
                <baseType ref="type.1738"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1749">
            <name>BinaryFun&lt;T, T, T>*</name>
            <content>
                <baseType ref="type.1748"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1578">
            <name>BinaryFun&lt;T, T, T>*</name>
            <content>
                <baseType ref="type.1577"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1744">
            <name>BinaryFun&lt;T, T, T>*</name>
            <content>
                <baseType ref="type.1743"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1589">
            <name>BinaryFun&lt;T, T, T>*</name>
            <content>
                <baseType ref="type.1588"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1759">
            <name>BinaryFun&lt;T, T, T>*</name>
            <content>
                <baseType ref="type.1758"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1764">
            <name>BinaryFun&lt;T, T, T>*</name>
            <content>
                <baseType ref="type.1763"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1675" specialization="true">
            <name>BinaryFun&lt;T, T, bool></name>
            <content>
                <primaryType ref="1378950"/>
                <argumentType ref="1378220"/>
                <argumentType ref="1378220"/>
                <argumentType ref="type.1377785"/>
            </content>
        </type>
        <type id="type.1692" specialization="true">
            <name>BinaryFun&lt;T, T, bool></name>
            <content>
                <primaryType ref="1378950"/>
                <argumentType ref="1378225"/>
                <argumentType ref="1378225"/>
                <argumentType ref="type.1377785"/>
            </content>
        </type>
        <type id="type.1624" specialization="true">
            <name>BinaryFun&lt;T, T, bool></name>
            <content>
                <primaryType ref="1378950"/>
                <argumentType ref="1378205"/>
                <argumentType ref="1378205"/>
                <argumentType ref="type.1377785"/>
            </content>
        </type>
        <type id="type.1641" specialization="true">
            <name>BinaryFun&lt;T, T, bool></name>
            <content>
                <primaryType ref="1378950"/>
                <argumentType ref="1378210"/>
                <argumentType ref="1378210"/>
                <argumentType ref="type.1377785"/>
            </content>
        </type>
        <type id="type.1709" specialization="true">
            <name>BinaryFun&lt;T, T, bool></name>
            <content>
                <primaryType ref="1378950"/>
                <argumentType ref="1378230"/>
                <argumentType ref="1378230"/>
                <argumentType ref="type.1377785"/>
            </content>
        </type>
        <type id="type.1658" specialization="true">
            <name>BinaryFun&lt;T, T, bool></name>
            <content>
                <primaryType ref="1378950"/>
                <argumentType ref="1378215"/>
                <argumentType ref="1378215"/>
                <argumentType ref="type.1377785"/>
            </content>
        </type>
        <type derived="true" id="type.1710">
            <name>BinaryFun&lt;T, T, bool>*</name>
            <content>
                <baseType ref="type.1709"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1676">
            <name>BinaryFun&lt;T, T, bool>*</name>
            <content>
                <baseType ref="type.1675"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1693">
            <name>BinaryFun&lt;T, T, bool>*</name>
            <content>
                <baseType ref="type.1692"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1659">
            <name>BinaryFun&lt;T, T, bool>*</name>
            <content>
                <baseType ref="type.1658"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1642">
            <name>BinaryFun&lt;T, T, bool>*</name>
            <content>
                <baseType ref="type.1641"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1625">
            <name>BinaryFun&lt;T, T, bool>*</name>
            <content>
                <baseType ref="type.1624"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1683" specialization="true">
            <name>BinaryFun&lt;T, U, bool></name>
            <content>
                <primaryType ref="1378950"/>
                <argumentType ref="1378222"/>
                <argumentType ref="1378223"/>
                <argumentType ref="type.1377785"/>
            </content>
        </type>
        <type id="type.1632" specialization="true">
            <name>BinaryFun&lt;T, U, bool></name>
            <content>
                <primaryType ref="1378950"/>
                <argumentType ref="1378207"/>
                <argumentType ref="1378208"/>
                <argumentType ref="type.1377785"/>
            </content>
        </type>
        <type id="type.1717" specialization="true">
            <name>BinaryFun&lt;T, U, bool></name>
            <content>
                <primaryType ref="1378950"/>
                <argumentType ref="1378232"/>
                <argumentType ref="1378233"/>
                <argumentType ref="type.1377785"/>
            </content>
        </type>
        <type id="type.1649" specialization="true">
            <name>BinaryFun&lt;T, U, bool></name>
            <content>
                <primaryType ref="1378950"/>
                <argumentType ref="1378212"/>
                <argumentType ref="1378213"/>
                <argumentType ref="type.1377785"/>
            </content>
        </type>
        <type id="type.1666" specialization="true">
            <name>BinaryFun&lt;T, U, bool></name>
            <content>
                <primaryType ref="1378950"/>
                <argumentType ref="1378217"/>
                <argumentType ref="1378218"/>
                <argumentType ref="type.1377785"/>
            </content>
        </type>
        <type id="type.1700" specialization="true">
            <name>BinaryFun&lt;T, U, bool></name>
            <content>
                <primaryType ref="1378950"/>
                <argumentType ref="1378227"/>
                <argumentType ref="1378228"/>
                <argumentType ref="type.1377785"/>
            </content>
        </type>
        <type derived="true" id="type.1667">
            <name>BinaryFun&lt;T, U, bool>*</name>
            <content>
                <baseType ref="type.1666"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1650">
            <name>BinaryFun&lt;T, U, bool>*</name>
            <content>
                <baseType ref="type.1649"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1718">
            <name>BinaryFun&lt;T, U, bool>*</name>
            <content>
                <baseType ref="type.1717"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1684">
            <name>BinaryFun&lt;T, U, bool>*</name>
            <content>
                <baseType ref="type.1683"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1701">
            <name>BinaryFun&lt;T, U, bool>*</name>
            <content>
                <baseType ref="type.1700"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1633">
            <name>BinaryFun&lt;T, U, bool>*</name>
            <content>
                <baseType ref="type.1632"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1725" specialization="true">
            <name>BinaryFun&lt;bool, bool, bool></name>
            <content>
                <primaryType ref="1378950"/>
                <argumentType ref="type.1377785"/>
                <argumentType ref="type.1377785"/>
                <argumentType ref="type.1377785"/>
            </content>
        </type>
        <type derived="true" id="type.1726">
            <name>BinaryFun&lt;bool, bool, bool>*</name>
            <content>
                <baseType ref="type.1725"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1611" specialization="true">
            <name>BinaryPred&lt;Argument, Argument></name>
            <content>
                <primaryType ref="1379012"/>
                <argumentType ref="1378201"/>
                <argumentType ref="1378201"/>
            </content>
        </type>
        <type derived="true" id="type.1614">
            <name>BinaryPred&lt;Argument, Argument>*</name>
            <content>
                <baseType ref="type.1611"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1623" specialization="true">
            <name>BinaryPred&lt;T, T></name>
            <content>
                <primaryType ref="1379012"/>
                <argumentType ref="1378205"/>
                <argumentType ref="1378205"/>
            </content>
        </type>
        <type id="type.1708" specialization="true">
            <name>BinaryPred&lt;T, T></name>
            <content>
                <primaryType ref="1379012"/>
                <argumentType ref="1378230"/>
                <argumentType ref="1378230"/>
            </content>
        </type>
        <type id="type.1691" specialization="true">
            <name>BinaryPred&lt;T, T></name>
            <content>
                <primaryType ref="1379012"/>
                <argumentType ref="1378225"/>
                <argumentType ref="1378225"/>
            </content>
        </type>
        <type id="type.1674" specialization="true">
            <name>BinaryPred&lt;T, T></name>
            <content>
                <primaryType ref="1379012"/>
                <argumentType ref="1378220"/>
                <argumentType ref="1378220"/>
            </content>
        </type>
        <type id="type.1657" specialization="true">
            <name>BinaryPred&lt;T, T></name>
            <content>
                <primaryType ref="1379012"/>
                <argumentType ref="1378215"/>
                <argumentType ref="1378215"/>
            </content>
        </type>
        <type id="type.1640" specialization="true">
            <name>BinaryPred&lt;T, T></name>
            <content>
                <primaryType ref="1379012"/>
                <argumentType ref="1378210"/>
                <argumentType ref="1378210"/>
            </content>
        </type>
        <type derived="true" id="type.1677">
            <name>BinaryPred&lt;T, T>*</name>
            <content>
                <baseType ref="type.1674"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1643">
            <name>BinaryPred&lt;T, T>*</name>
            <content>
                <baseType ref="type.1640"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1626">
            <name>BinaryPred&lt;T, T>*</name>
            <content>
                <baseType ref="type.1623"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1694">
            <name>BinaryPred&lt;T, T>*</name>
            <content>
                <baseType ref="type.1691"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1711">
            <name>BinaryPred&lt;T, T>*</name>
            <content>
                <baseType ref="type.1708"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1660">
            <name>BinaryPred&lt;T, T>*</name>
            <content>
                <baseType ref="type.1657"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1665" specialization="true">
            <name>BinaryPred&lt;T, U></name>
            <content>
                <primaryType ref="1379012"/>
                <argumentType ref="1378217"/>
                <argumentType ref="1378218"/>
            </content>
        </type>
        <type id="type.1699" specialization="true">
            <name>BinaryPred&lt;T, U></name>
            <content>
                <primaryType ref="1379012"/>
                <argumentType ref="1378227"/>
                <argumentType ref="1378228"/>
            </content>
        </type>
        <type id="type.1648" specialization="true">
            <name>BinaryPred&lt;T, U></name>
            <content>
                <primaryType ref="1379012"/>
                <argumentType ref="1378212"/>
                <argumentType ref="1378213"/>
            </content>
        </type>
        <type id="type.1631" specialization="true">
            <name>BinaryPred&lt;T, U></name>
            <content>
                <primaryType ref="1379012"/>
                <argumentType ref="1378207"/>
                <argumentType ref="1378208"/>
            </content>
        </type>
        <type id="type.1716" specialization="true">
            <name>BinaryPred&lt;T, U></name>
            <content>
                <primaryType ref="1379012"/>
                <argumentType ref="1378232"/>
                <argumentType ref="1378233"/>
            </content>
        </type>
        <type id="type.1682" specialization="true">
            <name>BinaryPred&lt;T, U></name>
            <content>
                <primaryType ref="1379012"/>
                <argumentType ref="1378222"/>
                <argumentType ref="1378223"/>
            </content>
        </type>
        <type derived="true" id="type.1651">
            <name>BinaryPred&lt;T, U>*</name>
            <content>
                <baseType ref="type.1648"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1668">
            <name>BinaryPred&lt;T, U>*</name>
            <content>
                <baseType ref="type.1665"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1685">
            <name>BinaryPred&lt;T, U>*</name>
            <content>
                <baseType ref="type.1682"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1719">
            <name>BinaryPred&lt;T, U>*</name>
            <content>
                <baseType ref="type.1716"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1702">
            <name>BinaryPred&lt;T, U>*</name>
            <content>
                <baseType ref="type.1699"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1634">
            <name>BinaryPred&lt;T, U>*</name>
            <content>
                <baseType ref="type.1631"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1724" specialization="true">
            <name>BinaryPred&lt;bool, bool></name>
            <content>
                <primaryType ref="1379012"/>
                <argumentType ref="type.1377785"/>
                <argumentType ref="type.1377785"/>
            </content>
        </type>
        <type derived="true" id="type.1727">
            <name>BinaryPred&lt;bool, bool>*</name>
            <content>
                <baseType ref="type.1724"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383478">
            <name>BitAnd</name>
        </type>
        <type derived="true" id="type.1385364">
            <name>BitAnd&amp;</name>
            <content>
                <baseType ref="1383478"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383479">
            <name>BitAnd*</name>
            <content>
                <baseType ref="1383478"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1379175" specialization="true">
            <name>BitAnd&lt;T></name>
            <content>
                <primaryType ref="1379175"/>
                <argumentType ref="1378241"/>
            </content>
        </type>
        <type id="type.1379196" specialization="true">
            <name>BitNot&lt;T></name>
            <content>
                <primaryType ref="1379196"/>
                <argumentType ref="1378247"/>
            </content>
        </type>
        <type id="1383474">
            <name>BitOr</name>
        </type>
        <type derived="true" id="type.1385362">
            <name>BitOr&amp;</name>
            <content>
                <baseType ref="1383474"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383475">
            <name>BitOr*</name>
            <content>
                <baseType ref="1383474"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1379182" specialization="true">
            <name>BitOr&lt;T></name>
            <content>
                <primaryType ref="1379182"/>
                <argumentType ref="1378243"/>
            </content>
        </type>
        <type id="1383476">
            <name>BitXor</name>
        </type>
        <type derived="true" id="type.1385363">
            <name>BitXor&amp;</name>
            <content>
                <baseType ref="1383476"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383477">
            <name>BitXor*</name>
            <content>
                <baseType ref="1383476"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1379189" specialization="true">
            <name>BitXor&lt;T></name>
            <content>
                <primaryType ref="1379189"/>
                <argumentType ref="1378245"/>
            </content>
        </type>
        <type id="1383407">
            <name>BoolType</name>
        </type>
        <type derived="true" id="type.1385327">
            <name>BoolType&amp;</name>
            <content>
                <baseType ref="1383407"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383408">
            <name>BoolType*</name>
            <content>
                <baseType ref="1383407"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383560">
            <name>BreakStatement</name>
        </type>
        <type derived="true" id="type.1385396">
            <name>BreakStatement&amp;</name>
            <content>
                <baseType ref="1383560"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383561">
            <name>BreakStatement*</name>
            <content>
                <baseType ref="1383560"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1379313" specialization="true">
            <name>Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <primaryType ref="1379511"/>
                <argumentType ref="type.1379291"/>
            </content>
        </type>
        <type id="type.1791" specialization="true">
            <name>Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <primaryType ref="1379511"/>
                <argumentType ref="type.1769"/>
            </content>
        </type>
        <type derived="true" id="type.1792">
            <name>Bucket&lt;Pair&lt;K, T>>*</name>
            <content>
                <baseType ref="type.1791"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1821">
            <name>Bucket&lt;Pair&lt;K, T>>*&amp;</name>
            <content>
                <baseType ref="type.1791"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1832">
            <name>Bucket&lt;Pair&lt;K, T>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.1791"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1822">
            <name>Bucket&lt;Pair&lt;K, T>>**</name>
            <content>
                <baseType ref="type.1791"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1381276" specialization="true">
            <name>Bucket&lt;Pair&lt;String&lt;char>, Age*>></name>
            <content>
                <primaryType ref="1379511"/>
                <argumentType ref="type.1381258"/>
            </content>
        </type>
        <type id="type.1382172" specialization="true">
            <name>Bucket&lt;Pair&lt;String&lt;char>, AliasType*>></name>
            <content>
                <primaryType ref="1379511"/>
                <argumentType ref="type.1382154"/>
            </content>
        </type>
        <type id="type.1381814" specialization="true">
            <name>Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>></name>
            <content>
                <primaryType ref="1379511"/>
                <argumentType ref="type.1381796"/>
            </content>
        </type>
        <type id="type.1381993" specialization="true">
            <name>Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>></name>
            <content>
                <primaryType ref="1379511"/>
                <argumentType ref="type.1381975"/>
            </content>
        </type>
        <type id="type.1380736" specialization="true">
            <name>Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>></name>
            <content>
                <primaryType ref="1379511"/>
                <argumentType ref="type.1380718"/>
            </content>
        </type>
        <type id="type.1380916" specialization="true">
            <name>Bucket&lt;Pair&lt;String&lt;char>, Block*>></name>
            <content>
                <primaryType ref="1379511"/>
                <argumentType ref="type.1380898"/>
            </content>
        </type>
        <type id="type.1381097" specialization="true">
            <name>Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>></name>
            <content>
                <primaryType ref="1379511"/>
                <argumentType ref="type.1381079"/>
            </content>
        </type>
        <type id="type.1381635" specialization="true">
            <name>Bucket&lt;Pair&lt;String&lt;char>, NumericType*>></name>
            <content>
                <primaryType ref="1379511"/>
                <argumentType ref="type.1381617"/>
            </content>
        </type>
        <type id="type.1381455" specialization="true">
            <name>Bucket&lt;Pair&lt;String&lt;char>, Script*>></name>
            <content>
                <primaryType ref="1379511"/>
                <argumentType ref="type.1381437"/>
            </content>
        </type>
        <type id="type.1381211" specialization="true">
            <name>Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>></name>
            <content>
                <primaryType ref="1379511"/>
                <argumentType ref="type.1381191"/>
            </content>
        </type>
        <type id="type.1382107" specialization="true">
            <name>Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>></name>
            <content>
                <primaryType ref="1379511"/>
                <argumentType ref="type.1382087"/>
            </content>
        </type>
        <type id="type.1381749" specialization="true">
            <name>Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>></name>
            <content>
                <primaryType ref="1379511"/>
                <argumentType ref="type.1381729"/>
            </content>
        </type>
        <type id="type.1381928" specialization="true">
            <name>Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>></name>
            <content>
                <primaryType ref="1379511"/>
                <argumentType ref="type.1381908"/>
            </content>
        </type>
        <type id="type.1380657" specialization="true">
            <name>Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>></name>
            <content>
                <primaryType ref="1379511"/>
                <argumentType ref="type.1380637"/>
            </content>
        </type>
        <type id="type.1380851" specialization="true">
            <name>Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>></name>
            <content>
                <primaryType ref="1379511"/>
                <argumentType ref="type.1380831"/>
            </content>
        </type>
        <type id="type.1381032" specialization="true">
            <name>Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>></name>
            <content>
                <primaryType ref="1379511"/>
                <argumentType ref="type.1381012"/>
            </content>
        </type>
        <type id="type.1381570" specialization="true">
            <name>Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>></name>
            <content>
                <primaryType ref="1379511"/>
                <argumentType ref="type.1381550"/>
            </content>
        </type>
        <type id="type.1381390" specialization="true">
            <name>Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>></name>
            <content>
                <primaryType ref="1379511"/>
                <argumentType ref="type.1381370"/>
            </content>
        </type>
        <type id="type.1379441" specialization="true">
            <name>Bucket&lt;T></name>
            <content>
                <primaryType ref="1379511"/>
                <argumentType ref="1378265"/>
            </content>
        </type>
        <type id="type.1379511" specialization="true">
            <name>Bucket&lt;T></name>
            <content>
                <primaryType ref="1379511"/>
                <argumentType ref="1378272"/>
            </content>
        </type>
        <type id="type.1379441" specialization="true">
            <name>Bucket&lt;T></name>
            <content>
                <primaryType ref="1379511"/>
                <argumentType ref="1378265"/>
            </content>
        </type>
        <type id="type.1867" specialization="true">
            <name>Bucket&lt;T></name>
            <content>
                <primaryType ref="1379511"/>
                <argumentType ref="1378262"/>
            </content>
        </type>
        <type id="type.1938" specialization="true">
            <name>Bucket&lt;T></name>
            <content>
                <primaryType ref="1379511"/>
                <argumentType ref="1378274"/>
            </content>
        </type>
        <type id="type.1379534" specialization="true">
            <name>Bucket&lt;T></name>
            <content>
                <primaryType ref="1379511"/>
                <argumentType ref="1378278"/>
            </content>
        </type>
        <type derived="true" id="type.1939">
            <name>Bucket&lt;T>*</name>
            <content>
                <baseType ref="type.1938"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1929">
            <name>Bucket&lt;T>*</name>
            <content>
                <baseType ref="type.1379511"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1868">
            <name>Bucket&lt;T>*</name>
            <content>
                <baseType ref="type.1867"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1897">
            <name>Bucket&lt;T>*&amp;</name>
            <content>
                <baseType ref="type.1867"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1908">
            <name>Bucket&lt;T>*&amp;&amp;</name>
            <content>
                <baseType ref="type.1867"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1898">
            <name>Bucket&lt;T>**</name>
            <content>
                <baseType ref="type.1867"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1956" specialization="true">
            <name>Bucket&lt;ValueType></name>
            <content>
                <primaryType ref="1379511"/>
                <argumentType ref="1378284"/>
            </content>
        </type>
        <type derived="true" id="type.1957">
            <name>Bucket&lt;ValueType>*</name>
            <content>
                <baseType ref="type.1956"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1988">
            <name>Bucket&lt;ValueType>*&amp;</name>
            <content>
                <baseType ref="type.1956"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1999">
            <name>Bucket&lt;ValueType>*&amp;&amp;</name>
            <content>
                <baseType ref="type.1956"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1989">
            <name>Bucket&lt;ValueType>**</name>
            <content>
                <baseType ref="type.1956"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383417">
            <name>ByteType</name>
        </type>
        <type derived="true" id="type.1385332">
            <name>ByteType&amp;</name>
            <content>
                <baseType ref="1383417"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383418">
            <name>ByteType*</name>
            <content>
                <baseType ref="1383417"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383580">
            <name>CaseStatement</name>
        </type>
        <type derived="true" id="type.1385230">
            <name>CaseStatement&amp;</name>
            <content>
                <baseType ref="1383580"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383581">
            <name>CaseStatement*</name>
            <content>
                <baseType ref="1383580"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385443">
            <name>CaseStatement*&amp;</name>
            <content>
                <baseType ref="1383580"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385445">
            <name>CaseStatement*&amp;&amp;</name>
            <content>
                <baseType ref="1383580"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="1383524">
            <name>Cast</name>
        </type>
        <type derived="true" id="type.1385386">
            <name>Cast&amp;</name>
            <content>
                <baseType ref="1383524"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383525">
            <name>Cast*</name>
            <content>
                <baseType ref="1383524"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383592">
            <name>Catch</name>
        </type>
        <type derived="true" id="type.1385289">
            <name>Catch&amp;</name>
            <content>
                <baseType ref="1383592"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383593">
            <name>Catch*</name>
            <content>
                <baseType ref="1383592"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385459">
            <name>Catch*&amp;</name>
            <content>
                <baseType ref="1383592"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385461">
            <name>Catch*&amp;&amp;</name>
            <content>
                <baseType ref="1383592"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2405">
            <name>CharT&amp;</name>
            <content>
                <baseType ref="1378404"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2406">
            <name>CharT*</name>
            <content>
                <baseType ref="1378404"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383409">
            <name>CharType</name>
        </type>
        <type derived="true" id="type.1385328">
            <name>CharType&amp;</name>
            <content>
                <baseType ref="1383409"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383410">
            <name>CharType*</name>
            <content>
                <baseType ref="1383409"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385088">
            <name>CodeFormatter&amp;</name>
            <content>
                <baseType ref="1377997"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2935">
            <name>CodeFormatter&amp;&amp;</name>
            <content>
                <baseType ref="1377997"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="1383462">
            <name>Complement</name>
        </type>
        <type derived="true" id="type.1385359">
            <name>Complement&amp;</name>
            <content>
                <baseType ref="1383462"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2971">
            <name>Complement&amp;&amp;</name>
            <content>
                <baseType ref="1383462"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383463">
            <name>Complement*</name>
            <content>
                <baseType ref="1383462"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383548">
            <name>CompoundStatement</name>
        </type>
        <type derived="true" id="type.1385276">
            <name>CompoundStatement&amp;</name>
            <content>
                <baseType ref="1383548"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1460">
            <name>CompoundStatement*</name>
            <content>
                <baseType ref="1383548"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383549">
            <name>CompoundStatement*</name>
            <content>
                <baseType ref="1383548"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383472">
            <name>Conjunction</name>
        </type>
        <type derived="true" id="type.1385361">
            <name>Conjunction&amp;</name>
            <content>
                <baseType ref="1383472"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383473">
            <name>Conjunction*</name>
            <content>
                <baseType ref="1383472"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383598">
            <name>Const</name>
        </type>
        <type derived="true" id="type.1385345">
            <name>Const&amp;</name>
            <content>
                <baseType ref="1383598"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3036">
            <name>Const&amp;&amp;</name>
            <content>
                <baseType ref="1383598"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383599">
            <name>Const*</name>
            <content>
                <baseType ref="1383598"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383526">
            <name>Construct</name>
        </type>
        <type derived="true" id="type.1385387">
            <name>Construct&amp;</name>
            <content>
                <baseType ref="1383526"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2989">
            <name>Construct&amp;&amp;</name>
            <content>
                <baseType ref="1383526"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383527">
            <name>Construct*</name>
            <content>
                <baseType ref="1383526"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383566">
            <name>ConstructionStatement</name>
        </type>
        <type derived="true" id="type.1385399">
            <name>ConstructionStatement&amp;</name>
            <content>
                <baseType ref="1383566"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383567">
            <name>ConstructionStatement*</name>
            <content>
                <baseType ref="1383566"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383562">
            <name>ContinueStatement</name>
        </type>
        <type derived="true" id="type.1385397">
            <name>ContinueStatement&amp;</name>
            <content>
                <baseType ref="1383562"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383563">
            <name>ContinueStatement*</name>
            <content>
                <baseType ref="1383562"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383582">
            <name>DefaultStatement</name>
        </type>
        <type derived="true" id="type.1385260">
            <name>DefaultStatement&amp;</name>
            <content>
                <baseType ref="1383582"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383583">
            <name>DefaultStatement*</name>
            <content>
                <baseType ref="1383582"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383568">
            <name>DeleteStatement</name>
        </type>
        <type derived="true" id="type.1385400">
            <name>DeleteStatement&amp;</name>
            <content>
                <baseType ref="1383568"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3012">
            <name>DeleteStatement&amp;&amp;</name>
            <content>
                <baseType ref="1383568"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383569">
            <name>DeleteStatement*</name>
            <content>
                <baseType ref="1383568"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383450">
            <name>Deref</name>
        </type>
        <type derived="true" id="type.1385353">
            <name>Deref&amp;</name>
            <content>
                <baseType ref="1383450"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2953">
            <name>Deref&amp;&amp;</name>
            <content>
                <baseType ref="1383450"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383451">
            <name>Deref*</name>
            <content>
                <baseType ref="1383450"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383570">
            <name>DestroyStatement</name>
        </type>
        <type derived="true" id="type.1385401">
            <name>DestroyStatement&amp;</name>
            <content>
                <baseType ref="1383570"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3015">
            <name>DestroyStatement&amp;&amp;</name>
            <content>
                <baseType ref="1383570"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383571">
            <name>DestroyStatement*</name>
            <content>
                <baseType ref="1383570"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383470">
            <name>Disjunction</name>
        </type>
        <type derived="true" id="type.1385360">
            <name>Disjunction&amp;</name>
            <content>
                <baseType ref="1383470"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383471">
            <name>Disjunction*</name>
            <content>
                <baseType ref="1383470"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383502">
            <name>Div</name>
        </type>
        <type derived="true" id="type.1385376">
            <name>Div&amp;</name>
            <content>
                <baseType ref="1383502"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383503">
            <name>Div*</name>
            <content>
                <baseType ref="1383502"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1378994" specialization="true">
            <name>Divides&lt;T></name>
            <content>
                <primaryType ref="1378994"/>
                <argumentType ref="1378192"/>
            </content>
        </type>
        <type id="1383556">
            <name>DoStatement</name>
        </type>
        <type derived="true" id="type.1385394">
            <name>DoStatement&amp;</name>
            <content>
                <baseType ref="1383556"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383557">
            <name>DoStatement*</name>
            <content>
                <baseType ref="1383556"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383437">
            <name>DomObject</name>
        </type>
        <type derived="true" id="type.1385101">
            <name>DomObject&amp;</name>
            <content>
                <baseType ref="1383437"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2947">
            <name>DomObject&amp;&amp;</name>
            <content>
                <baseType ref="1383437"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1459">
            <name>DomObject*</name>
            <content>
                <baseType ref="1383437"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383438">
            <name>DomObject*</name>
            <content>
                <baseType ref="1383437"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385420">
            <name>DomObject*&amp;</name>
            <content>
                <baseType ref="1383437"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385416">
            <name>DomObject*&amp;&amp;</name>
            <content>
                <baseType ref="1383437"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="1383464">
            <name>Dot</name>
        </type>
        <type derived="true" id="type.1385350">
            <name>Dot&amp;</name>
            <content>
                <baseType ref="1383464"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383465">
            <name>Dot*</name>
            <content>
                <baseType ref="1383464"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383433">
            <name>DoubleType</name>
        </type>
        <type derived="true" id="type.1385340">
            <name>DoubleType&amp;</name>
            <content>
                <baseType ref="1383433"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383434">
            <name>DoubleType*</name>
            <content>
                <baseType ref="1383433"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383576">
            <name>EmptyStatement</name>
        </type>
        <type derived="true" id="type.1385404">
            <name>EmptyStatement&amp;</name>
            <content>
                <baseType ref="1383576"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383577">
            <name>EmptyStatement*</name>
            <content>
                <baseType ref="1383576"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383480">
            <name>Equal</name>
        </type>
        <type derived="true" id="type.1385365">
            <name>Equal&amp;</name>
            <content>
                <baseType ref="1383480"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383481">
            <name>Equal*</name>
            <content>
                <baseType ref="1383480"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1380704" specialization="true">
            <name>EqualTo&lt;String&lt;char>></name>
            <content>
                <primaryType ref="1379029"/>
                <argumentType ref="type.1378573"/>
            </content>
        </type>
        <type id="type.1381177" specialization="true">
            <name>EqualTo&lt;System.Unicode.AgeId></name>
            <content>
                <primaryType ref="1379029"/>
                <argumentType ref="1378442"/>
            </content>
        </type>
        <type id="type.1382073" specialization="true">
            <name>EqualTo&lt;System.Unicode.AliasTypeId></name>
            <content>
                <primaryType ref="1379029"/>
                <argumentType ref="1378491"/>
            </content>
        </type>
        <type id="type.1381715" specialization="true">
            <name>EqualTo&lt;System.Unicode.BidiClassId></name>
            <content>
                <primaryType ref="1379029"/>
                <argumentType ref="1378473"/>
            </content>
        </type>
        <type id="type.1381894" specialization="true">
            <name>EqualTo&lt;System.Unicode.BidiPairedBracketTypeId></name>
            <content>
                <primaryType ref="1379029"/>
                <argumentType ref="1378482"/>
            </content>
        </type>
        <type id="type.1380623" specialization="true">
            <name>EqualTo&lt;System.Unicode.BinaryPropertyId></name>
            <content>
                <primaryType ref="1379029"/>
                <argumentType ref="1378421"/>
            </content>
        </type>
        <type id="type.1380817" specialization="true">
            <name>EqualTo&lt;System.Unicode.BlockId></name>
            <content>
                <primaryType ref="1379029"/>
                <argumentType ref="1378428"/>
            </content>
        </type>
        <type id="type.1380998" specialization="true">
            <name>EqualTo&lt;System.Unicode.GeneralCategoryId></name>
            <content>
                <primaryType ref="1379029"/>
                <argumentType ref="1378435"/>
            </content>
        </type>
        <type id="type.1381536" specialization="true">
            <name>EqualTo&lt;System.Unicode.NumericTypeId></name>
            <content>
                <primaryType ref="1379029"/>
                <argumentType ref="1378464"/>
            </content>
        </type>
        <type id="type.1381356" specialization="true">
            <name>EqualTo&lt;System.Unicode.ScriptId></name>
            <content>
                <primaryType ref="1379029"/>
                <argumentType ref="1378451"/>
            </content>
        </type>
        <type id="type.1379040" specialization="true">
            <name>EqualTo&lt;T, U></name>
            <content>
                <primaryType ref="1379040"/>
                <argumentType ref="1378207"/>
                <argumentType ref="1378208"/>
            </content>
        </type>
        <type id="type.1379029" specialization="true">
            <name>EqualTo&lt;T></name>
            <content>
                <primaryType ref="1379029"/>
                <argumentType ref="1378205"/>
            </content>
        </type>
        <type id="1383442">
            <name>Expression</name>
        </type>
        <type derived="true" id="type.1383443">
            <name>Expression*</name>
            <content>
                <baseType ref="1383442"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383574">
            <name>ExpressionStatement</name>
        </type>
        <type derived="true" id="type.1385403">
            <name>ExpressionStatement&amp;</name>
            <content>
                <baseType ref="1383574"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3018">
            <name>ExpressionStatement&amp;&amp;</name>
            <content>
                <baseType ref="1383574"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383575">
            <name>ExpressionStatement*</name>
            <content>
                <baseType ref="1383574"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383431">
            <name>FloatType</name>
        </type>
        <type derived="true" id="type.1385339">
            <name>FloatType&amp;</name>
            <content>
                <baseType ref="1383431"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383432">
            <name>FloatType*</name>
            <content>
                <baseType ref="1383431"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383558">
            <name>ForStatement</name>
        </type>
        <type derived="true" id="type.1385395">
            <name>ForStatement&amp;</name>
            <content>
                <baseType ref="1383558"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383559">
            <name>ForStatement*</name>
            <content>
                <baseType ref="1383558"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1378864" specialization="true">
            <name>ForwardList&lt;T></name>
            <content>
                <primaryType ref="1378864"/>
                <argumentType ref="1378171"/>
            </content>
        </type>
        <type id="type.1378892" specialization="true">
            <name>ForwardList&lt;T></name>
            <content>
                <primaryType ref="1378864"/>
                <argumentType ref="1378172"/>
            </content>
        </type>
        <type id="type.1378864" specialization="true">
            <name>ForwardList&lt;T></name>
            <content>
                <primaryType ref="1378864"/>
                <argumentType ref="1378171"/>
            </content>
        </type>
        <type id="type.1378920" specialization="true">
            <name>ForwardList&lt;T></name>
            <content>
                <primaryType ref="1378864"/>
                <argumentType ref="1378173"/>
            </content>
        </type>
        <type derived="true" id="type.1558">
            <name>ForwardList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.1378864"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1532">
            <name>ForwardList&lt;T>*</name>
            <content>
                <baseType ref="type.1378864"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1378832" specialization="true">
            <name>ForwardListNode&lt;T></name>
            <content>
                <primaryType ref="1378832"/>
                <argumentType ref="1378162"/>
            </content>
        </type>
        <type id="type.1378902" specialization="true">
            <name>ForwardListNode&lt;T></name>
            <content>
                <primaryType ref="1378832"/>
                <argumentType ref="1378172"/>
            </content>
        </type>
        <type id="type.1378855" specialization="true">
            <name>ForwardListNode&lt;T></name>
            <content>
                <primaryType ref="1378832"/>
                <argumentType ref="1378167"/>
            </content>
        </type>
        <type id="type.1520" specialization="true">
            <name>ForwardListNode&lt;T></name>
            <content>
                <primaryType ref="1378832"/>
                <argumentType ref="1378164"/>
            </content>
        </type>
        <type id="type.1378930" specialization="true">
            <name>ForwardListNode&lt;T></name>
            <content>
                <primaryType ref="1378832"/>
                <argumentType ref="1378173"/>
            </content>
        </type>
        <type id="type.1541" specialization="true">
            <name>ForwardListNode&lt;T></name>
            <content>
                <primaryType ref="1378832"/>
                <argumentType ref="1378171"/>
            </content>
        </type>
        <type derived="true" id="type.1521">
            <name>ForwardListNode&lt;T>*</name>
            <content>
                <baseType ref="type.1520"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1542">
            <name>ForwardListNode&lt;T>*</name>
            <content>
                <baseType ref="type.1541"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1512">
            <name>ForwardListNode&lt;T>*</name>
            <content>
                <baseType ref="type.1378832"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1378838" specialization="true">
            <name>ForwardListNodeIterator&lt;T, R, P></name>
            <content>
                <primaryType ref="1378838"/>
                <argumentType ref="1378164"/>
                <argumentType ref="1378165"/>
                <argumentType ref="1378166"/>
            </content>
        </type>
        <type id="type.1378851" specialization="true">
            <name>ForwardListNodeIterator&lt;T, R, P></name>
            <content>
                <primaryType ref="1378838"/>
                <argumentType ref="1378167"/>
                <argumentType ref="1378168"/>
                <argumentType ref="1378169"/>
            </content>
        </type>
        <type derived="true" id="type.1528">
            <name>ForwardListNodeIterator&lt;T, R, P>&amp;</name>
            <content>
                <baseType ref="type.1378838"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1531">
            <name>ForwardListNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.1378851"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1527">
            <name>ForwardListNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.1378838"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1517">
            <name>ForwardListNodeIterator&lt;T, R, P>*</name>
            <content>
                <baseType ref="type.1378838"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1550" specialization="true">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="1378838"/>
                <argumentType ref="1378171"/>
                <argumentType ref="type.1545"/>
                <argumentType ref="type.1549"/>
            </content>
        </type>
        <type id="type.1378939" specialization="true">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="1378838"/>
                <argumentType ref="1378173"/>
                <argumentType ref="type.1378934"/>
                <argumentType ref="type.1378938"/>
            </content>
        </type>
        <type id="type.1378911" specialization="true">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="1378838"/>
                <argumentType ref="1378172"/>
                <argumentType ref="type.1378906"/>
                <argumentType ref="type.1378910"/>
            </content>
        </type>
        <type id="type.1378939" specialization="true">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="1378838"/>
                <argumentType ref="1378173"/>
                <argumentType ref="type.1378934"/>
                <argumentType ref="type.1378938"/>
            </content>
        </type>
        <type derived="true" id="type.1556">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <baseType ref="type.1550"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1566">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1378911"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1555">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1550"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1574">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1378939"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1551">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>*</name>
            <content>
                <baseType ref="type.1550"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1378898" specialization="true">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="1378838"/>
                <argumentType ref="1378172"/>
                <argumentType ref="type.1378896"/>
                <argumentType ref="type.1378897"/>
            </content>
        </type>
        <type id="type.1537" specialization="true">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="1378838"/>
                <argumentType ref="1378171"/>
                <argumentType ref="type.1535"/>
                <argumentType ref="type.1536"/>
            </content>
        </type>
        <type id="type.1378926" specialization="true">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="1378838"/>
                <argumentType ref="1378173"/>
                <argumentType ref="type.1378924"/>
                <argumentType ref="type.1378925"/>
            </content>
        </type>
        <type derived="true" id="type.1548">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <baseType ref="type.1537"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1547">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1537"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1563">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1378898"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1571">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1378926"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1538">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>*</name>
            <content>
                <baseType ref="type.1537"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383586">
            <name>GotoCaseStatement</name>
        </type>
        <type derived="true" id="type.1385407">
            <name>GotoCaseStatement&amp;</name>
            <content>
                <baseType ref="1383586"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3024">
            <name>GotoCaseStatement&amp;&amp;</name>
            <content>
                <baseType ref="1383586"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383587">
            <name>GotoCaseStatement*</name>
            <content>
                <baseType ref="1383586"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383588">
            <name>GotoDefaultStatement</name>
        </type>
        <type derived="true" id="type.1385408">
            <name>GotoDefaultStatement&amp;</name>
            <content>
                <baseType ref="1383588"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383589">
            <name>GotoDefaultStatement*</name>
            <content>
                <baseType ref="1383588"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383564">
            <name>GotoStatement</name>
        </type>
        <type derived="true" id="type.1385398">
            <name>GotoStatement&amp;</name>
            <content>
                <baseType ref="1383564"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3009">
            <name>GotoStatement&amp;&amp;</name>
            <content>
                <baseType ref="1383564"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383565">
            <name>GotoStatement*</name>
            <content>
                <baseType ref="1383564"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383486">
            <name>Greater</name>
        </type>
        <type derived="true" id="type.1385368">
            <name>Greater&amp;</name>
            <content>
                <baseType ref="1383486"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383487">
            <name>Greater*</name>
            <content>
                <baseType ref="1383486"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1379103" specialization="true">
            <name>Greater&lt;T, U></name>
            <content>
                <primaryType ref="1379103"/>
                <argumentType ref="1378222"/>
                <argumentType ref="1378223"/>
            </content>
        </type>
        <type id="type.1379092" specialization="true">
            <name>Greater&lt;T></name>
            <content>
                <primaryType ref="1379092"/>
                <argumentType ref="1378220"/>
            </content>
        </type>
        <type id="1383490">
            <name>GreaterOrEqual</name>
        </type>
        <type derived="true" id="type.1385370">
            <name>GreaterOrEqual&amp;</name>
            <content>
                <baseType ref="1383490"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383491">
            <name>GreaterOrEqual*</name>
            <content>
                <baseType ref="1383490"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1379145" specialization="true">
            <name>GreaterOrEqualTo&lt;T, U></name>
            <content>
                <primaryType ref="1379145"/>
                <argumentType ref="1378232"/>
                <argumentType ref="1378233"/>
            </content>
        </type>
        <type id="type.1379134" specialization="true">
            <name>GreaterOrEqualTo&lt;T></name>
            <content>
                <primaryType ref="1379134"/>
                <argumentType ref="1378230"/>
            </content>
        </type>
        <type derived="true" id="type.1937">
            <name>H*</name>
            <content>
                <baseType ref="1378277"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1379287" specialization="true">
            <name>HashMap&lt;K, T, H, C></name>
            <content>
                <primaryType ref="1379217"/>
                <argumentType ref="1378257"/>
                <argumentType ref="1378258"/>
                <argumentType ref="1378259"/>
                <argumentType ref="1378260"/>
            </content>
        </type>
        <type id="type.1379217" specialization="true">
            <name>HashMap&lt;K, T, H, C></name>
            <content>
                <primaryType ref="1379217"/>
                <argumentType ref="1378253"/>
                <argumentType ref="1378254"/>
                <argumentType ref="1378255"/>
                <argumentType ref="1378256"/>
            </content>
        </type>
        <type derived="true" id="type.1766">
            <name>HashMap&lt;K, T, H, C>*</name>
            <content>
                <baseType ref="type.1379217"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1381254" specialization="true">
            <name>HashMap&lt;String&lt;char>, Age*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="1379217"/>
                <argumentType ref="type.1378573"/>
                <argumentType ref="type.1378444"/>
                <argumentType ref="type.1380700"/>
                <argumentType ref="type.1380704"/>
            </content>
        </type>
        <type id="type.1382150" specialization="true">
            <name>HashMap&lt;String&lt;char>, AliasType*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="1379217"/>
                <argumentType ref="type.1378573"/>
                <argumentType ref="type.1378493"/>
                <argumentType ref="type.1380700"/>
                <argumentType ref="type.1380704"/>
            </content>
        </type>
        <type id="type.1381792" specialization="true">
            <name>HashMap&lt;String&lt;char>, BidiClass*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="1379217"/>
                <argumentType ref="type.1378573"/>
                <argumentType ref="type.1378475"/>
                <argumentType ref="type.1380700"/>
                <argumentType ref="type.1380704"/>
            </content>
        </type>
        <type id="type.1381971" specialization="true">
            <name>HashMap&lt;String&lt;char>, BidiPairedBracketType*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="1379217"/>
                <argumentType ref="type.1378573"/>
                <argumentType ref="type.1378484"/>
                <argumentType ref="type.1380700"/>
                <argumentType ref="type.1380704"/>
            </content>
        </type>
        <type id="type.1380714" specialization="true">
            <name>HashMap&lt;String&lt;char>, BinaryProperty*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="1379217"/>
                <argumentType ref="type.1378573"/>
                <argumentType ref="type.1378423"/>
                <argumentType ref="type.1380700"/>
                <argumentType ref="type.1380704"/>
            </content>
        </type>
        <type id="type.1380894" specialization="true">
            <name>HashMap&lt;String&lt;char>, Block*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="1379217"/>
                <argumentType ref="type.1378573"/>
                <argumentType ref="type.1378430"/>
                <argumentType ref="type.1380700"/>
                <argumentType ref="type.1380704"/>
            </content>
        </type>
        <type id="type.1381075" specialization="true">
            <name>HashMap&lt;String&lt;char>, GeneralCategory*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="1379217"/>
                <argumentType ref="type.1378573"/>
                <argumentType ref="type.1378437"/>
                <argumentType ref="type.1380700"/>
                <argumentType ref="type.1380704"/>
            </content>
        </type>
        <type id="type.1381613" specialization="true">
            <name>HashMap&lt;String&lt;char>, NumericType*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="1379217"/>
                <argumentType ref="type.1378573"/>
                <argumentType ref="type.1378466"/>
                <argumentType ref="type.1380700"/>
                <argumentType ref="type.1380704"/>
            </content>
        </type>
        <type id="type.1381433" specialization="true">
            <name>HashMap&lt;String&lt;char>, Script*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="1379217"/>
                <argumentType ref="type.1378573"/>
                <argumentType ref="type.1378453"/>
                <argumentType ref="type.1380700"/>
                <argumentType ref="type.1380704"/>
            </content>
        </type>
        <type id="type.1381187" specialization="true">
            <name>HashMap&lt;System.Unicode.AgeId, Age*, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>></name>
            <content>
                <primaryType ref="1379217"/>
                <argumentType ref="1378442"/>
                <argumentType ref="type.1378444"/>
                <argumentType ref="type.1381172"/>
                <argumentType ref="type.1381177"/>
            </content>
        </type>
        <type id="type.1382083" specialization="true">
            <name>HashMap&lt;System.Unicode.AliasTypeId, AliasType*, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>></name>
            <content>
                <primaryType ref="1379217"/>
                <argumentType ref="1378491"/>
                <argumentType ref="type.1378493"/>
                <argumentType ref="type.1382068"/>
                <argumentType ref="type.1382073"/>
            </content>
        </type>
        <type id="type.1381725" specialization="true">
            <name>HashMap&lt;System.Unicode.BidiClassId, BidiClass*, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>></name>
            <content>
                <primaryType ref="1379217"/>
                <argumentType ref="1378473"/>
                <argumentType ref="type.1378475"/>
                <argumentType ref="type.1381710"/>
                <argumentType ref="type.1381715"/>
            </content>
        </type>
        <type id="type.1381904" specialization="true">
            <name>HashMap&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>></name>
            <content>
                <primaryType ref="1379217"/>
                <argumentType ref="1378482"/>
                <argumentType ref="type.1378484"/>
                <argumentType ref="type.1381889"/>
                <argumentType ref="type.1381894"/>
            </content>
        </type>
        <type id="type.1380633" specialization="true">
            <name>HashMap&lt;System.Unicode.BinaryPropertyId, BinaryProperty*, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>></name>
            <content>
                <primaryType ref="1379217"/>
                <argumentType ref="1378421"/>
                <argumentType ref="type.1378423"/>
                <argumentType ref="type.1380618"/>
                <argumentType ref="type.1380623"/>
            </content>
        </type>
        <type id="type.1380827" specialization="true">
            <name>HashMap&lt;System.Unicode.BlockId, Block*, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>></name>
            <content>
                <primaryType ref="1379217"/>
                <argumentType ref="1378428"/>
                <argumentType ref="type.1378430"/>
                <argumentType ref="type.1380812"/>
                <argumentType ref="type.1380817"/>
            </content>
        </type>
        <type id="type.1381008" specialization="true">
            <name>HashMap&lt;System.Unicode.GeneralCategoryId, GeneralCategory*, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>></name>
            <content>
                <primaryType ref="1379217"/>
                <argumentType ref="1378435"/>
                <argumentType ref="type.1378437"/>
                <argumentType ref="type.1380993"/>
                <argumentType ref="type.1380998"/>
            </content>
        </type>
        <type id="type.1381546" specialization="true">
            <name>HashMap&lt;System.Unicode.NumericTypeId, NumericType*, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>></name>
            <content>
                <primaryType ref="1379217"/>
                <argumentType ref="1378464"/>
                <argumentType ref="type.1378466"/>
                <argumentType ref="type.1381531"/>
                <argumentType ref="type.1381536"/>
            </content>
        </type>
        <type id="type.1381366" specialization="true">
            <name>HashMap&lt;System.Unicode.ScriptId, Script*, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>></name>
            <content>
                <primaryType ref="1379217"/>
                <argumentType ref="1378451"/>
                <argumentType ref="type.1378453"/>
                <argumentType ref="type.1381351"/>
                <argumentType ref="type.1381356"/>
            </content>
        </type>
        <type id="type.1379357" specialization="true">
            <name>HashSet&lt;T, H, C></name>
            <content>
                <primaryType ref="1379357"/>
                <argumentType ref="1378262"/>
                <argumentType ref="1378263"/>
                <argumentType ref="1378264"/>
            </content>
        </type>
        <type id="type.1379420" specialization="true">
            <name>HashSet&lt;T, H, C></name>
            <content>
                <primaryType ref="1379357"/>
                <argumentType ref="1378265"/>
                <argumentType ref="1378266"/>
                <argumentType ref="1378267"/>
            </content>
        </type>
        <type id="type.1379357" specialization="true">
            <name>HashSet&lt;T, H, C></name>
            <content>
                <primaryType ref="1379357"/>
                <argumentType ref="1378262"/>
                <argumentType ref="1378263"/>
                <argumentType ref="1378264"/>
            </content>
        </type>
        <type derived="true" id="type.1847">
            <name>HashSet&lt;T, H, C>*</name>
            <content>
                <baseType ref="type.1379357"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1379506" specialization="true">
            <name>Hasher&lt;T></name>
            <content>
                <primaryType ref="1379506"/>
                <argumentType ref="1378270"/>
            </content>
        </type>
        <type derived="true" id="type.1925">
            <name>Hasher&lt;T>*</name>
            <content>
                <baseType ref="type.1379506"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1379304" specialization="true">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C></name>
            <content>
                <primaryType ref="1379542"/>
                <argumentType ref="1378257"/>
                <argumentType ref="type.1379291"/>
                <argumentType ref="type.1379297"/>
                <argumentType ref="1378259"/>
                <argumentType ref="1378260"/>
            </content>
        </type>
        <type id="type.1782" specialization="true">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C></name>
            <content>
                <primaryType ref="1379542"/>
                <argumentType ref="1378253"/>
                <argumentType ref="type.1769"/>
                <argumentType ref="type.1775"/>
                <argumentType ref="1378255"/>
                <argumentType ref="1378256"/>
            </content>
        </type>
        <type id="type.1379304" specialization="true">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C></name>
            <content>
                <primaryType ref="1379542"/>
                <argumentType ref="1378257"/>
                <argumentType ref="type.1379291"/>
                <argumentType ref="type.1379297"/>
                <argumentType ref="1378259"/>
                <argumentType ref="1378260"/>
            </content>
        </type>
        <type derived="true" id="type.1803">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.1782"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1783">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>*</name>
            <content>
                <baseType ref="type.1782"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1379542" specialization="true">
            <name>Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare></name>
            <content>
                <primaryType ref="1379542"/>
                <argumentType ref="1378283"/>
                <argumentType ref="1378284"/>
                <argumentType ref="1378285"/>
                <argumentType ref="1378286"/>
                <argumentType ref="1378287"/>
            </content>
        </type>
        <type derived="true" id="type.1969">
            <name>Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>&amp;&amp;</name>
            <content>
                <baseType ref="type.1379542"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1947">
            <name>Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>*</name>
            <content>
                <baseType ref="type.1379542"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1381267" specialization="true">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Age*>, SelectFirst&lt;String&lt;char>, Age*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="1379542"/>
                <argumentType ref="type.1378573"/>
                <argumentType ref="type.1381258"/>
                <argumentType ref="type.1381260"/>
                <argumentType ref="type.1380700"/>
                <argumentType ref="type.1380704"/>
            </content>
        </type>
        <type id="type.1382163" specialization="true">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, AliasType*>, SelectFirst&lt;String&lt;char>, AliasType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="1379542"/>
                <argumentType ref="type.1378573"/>
                <argumentType ref="type.1382154"/>
                <argumentType ref="type.1382156"/>
                <argumentType ref="type.1380700"/>
                <argumentType ref="type.1380704"/>
            </content>
        </type>
        <type id="type.1381805" specialization="true">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiClass*>, SelectFirst&lt;String&lt;char>, BidiClass*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="1379542"/>
                <argumentType ref="type.1378573"/>
                <argumentType ref="type.1381796"/>
                <argumentType ref="type.1381798"/>
                <argumentType ref="type.1380700"/>
                <argumentType ref="type.1380704"/>
            </content>
        </type>
        <type id="type.1381984" specialization="true">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiPairedBracketType*>, SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="1379542"/>
                <argumentType ref="type.1378573"/>
                <argumentType ref="type.1381975"/>
                <argumentType ref="type.1381977"/>
                <argumentType ref="type.1380700"/>
                <argumentType ref="type.1380704"/>
            </content>
        </type>
        <type id="type.1380727" specialization="true">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BinaryProperty*>, SelectFirst&lt;String&lt;char>, BinaryProperty*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="1379542"/>
                <argumentType ref="type.1378573"/>
                <argumentType ref="type.1380718"/>
                <argumentType ref="type.1380720"/>
                <argumentType ref="type.1380700"/>
                <argumentType ref="type.1380704"/>
            </content>
        </type>
        <type id="type.1380907" specialization="true">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Block*>, SelectFirst&lt;String&lt;char>, Block*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="1379542"/>
                <argumentType ref="type.1378573"/>
                <argumentType ref="type.1380898"/>
                <argumentType ref="type.1380900"/>
                <argumentType ref="type.1380700"/>
                <argumentType ref="type.1380704"/>
            </content>
        </type>
        <type id="type.1381088" specialization="true">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, GeneralCategory*>, SelectFirst&lt;String&lt;char>, GeneralCategory*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="1379542"/>
                <argumentType ref="type.1378573"/>
                <argumentType ref="type.1381079"/>
                <argumentType ref="type.1381081"/>
                <argumentType ref="type.1380700"/>
                <argumentType ref="type.1380704"/>
            </content>
        </type>
        <type id="type.1381626" specialization="true">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, NumericType*>, SelectFirst&lt;String&lt;char>, NumericType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="1379542"/>
                <argumentType ref="type.1378573"/>
                <argumentType ref="type.1381617"/>
                <argumentType ref="type.1381619"/>
                <argumentType ref="type.1380700"/>
                <argumentType ref="type.1380704"/>
            </content>
        </type>
        <type id="type.1381446" specialization="true">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Script*>, SelectFirst&lt;String&lt;char>, Script*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="1379542"/>
                <argumentType ref="type.1378573"/>
                <argumentType ref="type.1381437"/>
                <argumentType ref="type.1381439"/>
                <argumentType ref="type.1380700"/>
                <argumentType ref="type.1380704"/>
            </content>
        </type>
        <type id="type.1381202" specialization="true">
            <name>Hashtable&lt;System.Unicode.AgeId, Pair&lt;System.Unicode.AgeId, Age*>, SelectFirst&lt;System.Unicode.AgeId, Age*>, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>></name>
            <content>
                <primaryType ref="1379542"/>
                <argumentType ref="1378442"/>
                <argumentType ref="type.1381191"/>
                <argumentType ref="type.1381195"/>
                <argumentType ref="type.1381172"/>
                <argumentType ref="type.1381177"/>
            </content>
        </type>
        <type id="type.1382098" specialization="true">
            <name>Hashtable&lt;System.Unicode.AliasTypeId, Pair&lt;System.Unicode.AliasTypeId, AliasType*>, SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>></name>
            <content>
                <primaryType ref="1379542"/>
                <argumentType ref="1378491"/>
                <argumentType ref="type.1382087"/>
                <argumentType ref="type.1382091"/>
                <argumentType ref="type.1382068"/>
                <argumentType ref="type.1382073"/>
            </content>
        </type>
        <type id="type.1381740" specialization="true">
            <name>Hashtable&lt;System.Unicode.BidiClassId, Pair&lt;System.Unicode.BidiClassId, BidiClass*>, SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>></name>
            <content>
                <primaryType ref="1379542"/>
                <argumentType ref="1378473"/>
                <argumentType ref="type.1381729"/>
                <argumentType ref="type.1381733"/>
                <argumentType ref="type.1381710"/>
                <argumentType ref="type.1381715"/>
            </content>
        </type>
        <type id="type.1381919" specialization="true">
            <name>Hashtable&lt;System.Unicode.BidiPairedBracketTypeId, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>></name>
            <content>
                <primaryType ref="1379542"/>
                <argumentType ref="1378482"/>
                <argumentType ref="type.1381908"/>
                <argumentType ref="type.1381912"/>
                <argumentType ref="type.1381889"/>
                <argumentType ref="type.1381894"/>
            </content>
        </type>
        <type id="type.1380648" specialization="true">
            <name>Hashtable&lt;System.Unicode.BinaryPropertyId, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>></name>
            <content>
                <primaryType ref="1379542"/>
                <argumentType ref="1378421"/>
                <argumentType ref="type.1380637"/>
                <argumentType ref="type.1380641"/>
                <argumentType ref="type.1380618"/>
                <argumentType ref="type.1380623"/>
            </content>
        </type>
        <type id="type.1380842" specialization="true">
            <name>Hashtable&lt;System.Unicode.BlockId, Pair&lt;System.Unicode.BlockId, Block*>, SelectFirst&lt;System.Unicode.BlockId, Block*>, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>></name>
            <content>
                <primaryType ref="1379542"/>
                <argumentType ref="1378428"/>
                <argumentType ref="type.1380831"/>
                <argumentType ref="type.1380835"/>
                <argumentType ref="type.1380812"/>
                <argumentType ref="type.1380817"/>
            </content>
        </type>
        <type id="type.1381023" specialization="true">
            <name>Hashtable&lt;System.Unicode.GeneralCategoryId, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>></name>
            <content>
                <primaryType ref="1379542"/>
                <argumentType ref="1378435"/>
                <argumentType ref="type.1381012"/>
                <argumentType ref="type.1381016"/>
                <argumentType ref="type.1380993"/>
                <argumentType ref="type.1380998"/>
            </content>
        </type>
        <type id="type.1381561" specialization="true">
            <name>Hashtable&lt;System.Unicode.NumericTypeId, Pair&lt;System.Unicode.NumericTypeId, NumericType*>, SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>></name>
            <content>
                <primaryType ref="1379542"/>
                <argumentType ref="1378464"/>
                <argumentType ref="type.1381550"/>
                <argumentType ref="type.1381554"/>
                <argumentType ref="type.1381531"/>
                <argumentType ref="type.1381536"/>
            </content>
        </type>
        <type id="type.1381381" specialization="true">
            <name>Hashtable&lt;System.Unicode.ScriptId, Pair&lt;System.Unicode.ScriptId, Script*>, SelectFirst&lt;System.Unicode.ScriptId, Script*>, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>></name>
            <content>
                <primaryType ref="1379542"/>
                <argumentType ref="1378451"/>
                <argumentType ref="type.1381370"/>
                <argumentType ref="type.1381374"/>
                <argumentType ref="type.1381351"/>
                <argumentType ref="type.1381356"/>
            </content>
        </type>
        <type id="type.1379431" specialization="true">
            <name>Hashtable&lt;T, T, Identity&lt;T>, H, C></name>
            <content>
                <primaryType ref="1379542"/>
                <argumentType ref="1378265"/>
                <argumentType ref="1378265"/>
                <argumentType ref="type.1379424"/>
                <argumentType ref="1378266"/>
                <argumentType ref="1378267"/>
            </content>
        </type>
        <type id="type.1857" specialization="true">
            <name>Hashtable&lt;T, T, Identity&lt;T>, H, C></name>
            <content>
                <primaryType ref="1379542"/>
                <argumentType ref="1378262"/>
                <argumentType ref="1378262"/>
                <argumentType ref="type.1850"/>
                <argumentType ref="1378263"/>
                <argumentType ref="1378264"/>
            </content>
        </type>
        <type id="type.1379431" specialization="true">
            <name>Hashtable&lt;T, T, Identity&lt;T>, H, C></name>
            <content>
                <primaryType ref="1379542"/>
                <argumentType ref="1378265"/>
                <argumentType ref="1378265"/>
                <argumentType ref="type.1379424"/>
                <argumentType ref="1378266"/>
                <argumentType ref="1378267"/>
            </content>
        </type>
        <type derived="true" id="type.1879">
            <name>Hashtable&lt;T, T, Identity&lt;T>, H, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.1857"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1858">
            <name>Hashtable&lt;T, T, Identity&lt;T>, H, C>*</name>
            <content>
                <baseType ref="type.1857"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1787" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1769"/>
                <argumentType ref="type.1786"/>
                <argumentType ref="type.1770"/>
                <argumentType ref="type.1782"/>
            </content>
        </type>
        <type id="type.1379309" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1379291"/>
                <argumentType ref="type.1379308"/>
                <argumentType ref="type.1379292"/>
                <argumentType ref="type.1379304"/>
            </content>
        </type>
        <type derived="true" id="type.1795">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <baseType ref="type.1787"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1807">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1787"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1788">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <baseType ref="type.1787"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1797" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1769"/>
                <argumentType ref="type.1780"/>
                <argumentType ref="type.1796"/>
                <argumentType ref="type.1782"/>
            </content>
        </type>
        <type id="type.1379319" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1379291"/>
                <argumentType ref="type.1379302"/>
                <argumentType ref="type.1379318"/>
                <argumentType ref="type.1379304"/>
            </content>
        </type>
        <type derived="true" id="type.1801">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <baseType ref="type.1797"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1798">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <baseType ref="type.1797"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1381272" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, Age*>, Pair&lt;String&lt;char>, Age*>&amp;, Pair&lt;String&lt;char>, Age*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Age*>, SelectFirst&lt;String&lt;char>, Age*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1381258"/>
                <argumentType ref="type.1381271"/>
                <argumentType ref="type.1381259"/>
                <argumentType ref="type.1381267"/>
            </content>
        </type>
        <type id="type.1381282" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, Age*>, const Pair&lt;String&lt;char>, Age*>&amp;, const Pair&lt;String&lt;char>, Age*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Age*>, SelectFirst&lt;String&lt;char>, Age*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1381258"/>
                <argumentType ref="type.1381265"/>
                <argumentType ref="type.1381281"/>
                <argumentType ref="type.1381267"/>
            </content>
        </type>
        <type id="type.1382168" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, AliasType*>, Pair&lt;String&lt;char>, AliasType*>&amp;, Pair&lt;String&lt;char>, AliasType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, AliasType*>, SelectFirst&lt;String&lt;char>, AliasType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1382154"/>
                <argumentType ref="type.1382167"/>
                <argumentType ref="type.1382155"/>
                <argumentType ref="type.1382163"/>
            </content>
        </type>
        <type id="type.1382178" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, AliasType*>, const Pair&lt;String&lt;char>, AliasType*>&amp;, const Pair&lt;String&lt;char>, AliasType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, AliasType*>, SelectFirst&lt;String&lt;char>, AliasType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1382154"/>
                <argumentType ref="type.1382161"/>
                <argumentType ref="type.1382177"/>
                <argumentType ref="type.1382163"/>
            </content>
        </type>
        <type id="type.1381810" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, BidiClass*>, Pair&lt;String&lt;char>, BidiClass*>&amp;, Pair&lt;String&lt;char>, BidiClass*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiClass*>, SelectFirst&lt;String&lt;char>, BidiClass*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1381796"/>
                <argumentType ref="type.1381809"/>
                <argumentType ref="type.1381797"/>
                <argumentType ref="type.1381805"/>
            </content>
        </type>
        <type id="type.1381820" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, BidiClass*>, const Pair&lt;String&lt;char>, BidiClass*>&amp;, const Pair&lt;String&lt;char>, BidiClass*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiClass*>, SelectFirst&lt;String&lt;char>, BidiClass*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1381796"/>
                <argumentType ref="type.1381803"/>
                <argumentType ref="type.1381819"/>
                <argumentType ref="type.1381805"/>
            </content>
        </type>
        <type id="type.1381989" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>, Pair&lt;String&lt;char>, BidiPairedBracketType*>&amp;, Pair&lt;String&lt;char>, BidiPairedBracketType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiPairedBracketType*>, SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1381975"/>
                <argumentType ref="type.1381988"/>
                <argumentType ref="type.1381976"/>
                <argumentType ref="type.1381984"/>
            </content>
        </type>
        <type id="type.1381999" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>, const Pair&lt;String&lt;char>, BidiPairedBracketType*>&amp;, const Pair&lt;String&lt;char>, BidiPairedBracketType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiPairedBracketType*>, SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1381975"/>
                <argumentType ref="type.1381982"/>
                <argumentType ref="type.1381998"/>
                <argumentType ref="type.1381984"/>
            </content>
        </type>
        <type id="type.1380732" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, BinaryProperty*>, Pair&lt;String&lt;char>, BinaryProperty*>&amp;, Pair&lt;String&lt;char>, BinaryProperty*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BinaryProperty*>, SelectFirst&lt;String&lt;char>, BinaryProperty*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1380718"/>
                <argumentType ref="type.1380731"/>
                <argumentType ref="type.1380719"/>
                <argumentType ref="type.1380727"/>
            </content>
        </type>
        <type id="type.1380742" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, BinaryProperty*>, const Pair&lt;String&lt;char>, BinaryProperty*>&amp;, const Pair&lt;String&lt;char>, BinaryProperty*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BinaryProperty*>, SelectFirst&lt;String&lt;char>, BinaryProperty*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1380718"/>
                <argumentType ref="type.1380725"/>
                <argumentType ref="type.1380741"/>
                <argumentType ref="type.1380727"/>
            </content>
        </type>
        <type id="type.1380912" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, Block*>, Pair&lt;String&lt;char>, Block*>&amp;, Pair&lt;String&lt;char>, Block*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Block*>, SelectFirst&lt;String&lt;char>, Block*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1380898"/>
                <argumentType ref="type.1380911"/>
                <argumentType ref="type.1380899"/>
                <argumentType ref="type.1380907"/>
            </content>
        </type>
        <type id="type.1380922" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, Block*>, const Pair&lt;String&lt;char>, Block*>&amp;, const Pair&lt;String&lt;char>, Block*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Block*>, SelectFirst&lt;String&lt;char>, Block*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1380898"/>
                <argumentType ref="type.1380905"/>
                <argumentType ref="type.1380921"/>
                <argumentType ref="type.1380907"/>
            </content>
        </type>
        <type id="type.1381093" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, GeneralCategory*>, Pair&lt;String&lt;char>, GeneralCategory*>&amp;, Pair&lt;String&lt;char>, GeneralCategory*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, GeneralCategory*>, SelectFirst&lt;String&lt;char>, GeneralCategory*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1381079"/>
                <argumentType ref="type.1381092"/>
                <argumentType ref="type.1381080"/>
                <argumentType ref="type.1381088"/>
            </content>
        </type>
        <type id="type.1381103" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, GeneralCategory*>, const Pair&lt;String&lt;char>, GeneralCategory*>&amp;, const Pair&lt;String&lt;char>, GeneralCategory*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, GeneralCategory*>, SelectFirst&lt;String&lt;char>, GeneralCategory*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1381079"/>
                <argumentType ref="type.1381086"/>
                <argumentType ref="type.1381102"/>
                <argumentType ref="type.1381088"/>
            </content>
        </type>
        <type id="type.1381631" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, NumericType*>, Pair&lt;String&lt;char>, NumericType*>&amp;, Pair&lt;String&lt;char>, NumericType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, NumericType*>, SelectFirst&lt;String&lt;char>, NumericType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1381617"/>
                <argumentType ref="type.1381630"/>
                <argumentType ref="type.1381618"/>
                <argumentType ref="type.1381626"/>
            </content>
        </type>
        <type id="type.1381641" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, NumericType*>, const Pair&lt;String&lt;char>, NumericType*>&amp;, const Pair&lt;String&lt;char>, NumericType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, NumericType*>, SelectFirst&lt;String&lt;char>, NumericType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1381617"/>
                <argumentType ref="type.1381624"/>
                <argumentType ref="type.1381640"/>
                <argumentType ref="type.1381626"/>
            </content>
        </type>
        <type id="type.1381451" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, Script*>, Pair&lt;String&lt;char>, Script*>&amp;, Pair&lt;String&lt;char>, Script*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Script*>, SelectFirst&lt;String&lt;char>, Script*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1381437"/>
                <argumentType ref="type.1381450"/>
                <argumentType ref="type.1381438"/>
                <argumentType ref="type.1381446"/>
            </content>
        </type>
        <type id="type.1381461" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, Script*>, const Pair&lt;String&lt;char>, Script*>&amp;, const Pair&lt;String&lt;char>, Script*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Script*>, SelectFirst&lt;String&lt;char>, Script*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1381437"/>
                <argumentType ref="type.1381444"/>
                <argumentType ref="type.1381460"/>
                <argumentType ref="type.1381446"/>
            </content>
        </type>
        <type id="type.1381207" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.AgeId, Age*>, Pair&lt;System.Unicode.AgeId, Age*>&amp;, Pair&lt;System.Unicode.AgeId, Age*>*, Hashtable&lt;System.Unicode.AgeId, Pair&lt;System.Unicode.AgeId, Age*>, SelectFirst&lt;System.Unicode.AgeId, Age*>, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1381191"/>
                <argumentType ref="type.1381206"/>
                <argumentType ref="type.1381192"/>
                <argumentType ref="type.1381202"/>
            </content>
        </type>
        <type id="type.1381217" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.AgeId, Age*>, const Pair&lt;System.Unicode.AgeId, Age*>&amp;, const Pair&lt;System.Unicode.AgeId, Age*>*, Hashtable&lt;System.Unicode.AgeId, Pair&lt;System.Unicode.AgeId, Age*>, SelectFirst&lt;System.Unicode.AgeId, Age*>, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1381191"/>
                <argumentType ref="type.1381200"/>
                <argumentType ref="type.1381216"/>
                <argumentType ref="type.1381202"/>
            </content>
        </type>
        <type id="type.1382103" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>, Pair&lt;System.Unicode.AliasTypeId, AliasType*>&amp;, Pair&lt;System.Unicode.AliasTypeId, AliasType*>*, Hashtable&lt;System.Unicode.AliasTypeId, Pair&lt;System.Unicode.AliasTypeId, AliasType*>, SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1382087"/>
                <argumentType ref="type.1382102"/>
                <argumentType ref="type.1382088"/>
                <argumentType ref="type.1382098"/>
            </content>
        </type>
        <type id="type.1382113" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>, const Pair&lt;System.Unicode.AliasTypeId, AliasType*>&amp;, const Pair&lt;System.Unicode.AliasTypeId, AliasType*>*, Hashtable&lt;System.Unicode.AliasTypeId, Pair&lt;System.Unicode.AliasTypeId, AliasType*>, SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1382087"/>
                <argumentType ref="type.1382096"/>
                <argumentType ref="type.1382112"/>
                <argumentType ref="type.1382098"/>
            </content>
        </type>
        <type id="type.1381745" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>, Pair&lt;System.Unicode.BidiClassId, BidiClass*>&amp;, Pair&lt;System.Unicode.BidiClassId, BidiClass*>*, Hashtable&lt;System.Unicode.BidiClassId, Pair&lt;System.Unicode.BidiClassId, BidiClass*>, SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1381729"/>
                <argumentType ref="type.1381744"/>
                <argumentType ref="type.1381730"/>
                <argumentType ref="type.1381740"/>
            </content>
        </type>
        <type id="type.1381755" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>, const Pair&lt;System.Unicode.BidiClassId, BidiClass*>&amp;, const Pair&lt;System.Unicode.BidiClassId, BidiClass*>*, Hashtable&lt;System.Unicode.BidiClassId, Pair&lt;System.Unicode.BidiClassId, BidiClass*>, SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1381729"/>
                <argumentType ref="type.1381738"/>
                <argumentType ref="type.1381754"/>
                <argumentType ref="type.1381740"/>
            </content>
        </type>
        <type id="type.1381924" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>&amp;, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>*, Hashtable&lt;System.Unicode.BidiPairedBracketTypeId, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1381908"/>
                <argumentType ref="type.1381923"/>
                <argumentType ref="type.1381909"/>
                <argumentType ref="type.1381919"/>
            </content>
        </type>
        <type id="type.1381934" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, const Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>&amp;, const Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>*, Hashtable&lt;System.Unicode.BidiPairedBracketTypeId, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1381908"/>
                <argumentType ref="type.1381917"/>
                <argumentType ref="type.1381933"/>
                <argumentType ref="type.1381919"/>
            </content>
        </type>
        <type id="type.1380653" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>&amp;, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>*, Hashtable&lt;System.Unicode.BinaryPropertyId, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1380637"/>
                <argumentType ref="type.1380652"/>
                <argumentType ref="type.1380638"/>
                <argumentType ref="type.1380648"/>
            </content>
        </type>
        <type id="type.1380663" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, const Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>&amp;, const Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>*, Hashtable&lt;System.Unicode.BinaryPropertyId, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1380637"/>
                <argumentType ref="type.1380646"/>
                <argumentType ref="type.1380662"/>
                <argumentType ref="type.1380648"/>
            </content>
        </type>
        <type id="type.1380847" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BlockId, Block*>, Pair&lt;System.Unicode.BlockId, Block*>&amp;, Pair&lt;System.Unicode.BlockId, Block*>*, Hashtable&lt;System.Unicode.BlockId, Pair&lt;System.Unicode.BlockId, Block*>, SelectFirst&lt;System.Unicode.BlockId, Block*>, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1380831"/>
                <argumentType ref="type.1380846"/>
                <argumentType ref="type.1380832"/>
                <argumentType ref="type.1380842"/>
            </content>
        </type>
        <type id="type.1380857" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BlockId, Block*>, const Pair&lt;System.Unicode.BlockId, Block*>&amp;, const Pair&lt;System.Unicode.BlockId, Block*>*, Hashtable&lt;System.Unicode.BlockId, Pair&lt;System.Unicode.BlockId, Block*>, SelectFirst&lt;System.Unicode.BlockId, Block*>, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1380831"/>
                <argumentType ref="type.1380840"/>
                <argumentType ref="type.1380856"/>
                <argumentType ref="type.1380842"/>
            </content>
        </type>
        <type id="type.1381028" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>&amp;, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>*, Hashtable&lt;System.Unicode.GeneralCategoryId, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1381012"/>
                <argumentType ref="type.1381027"/>
                <argumentType ref="type.1381013"/>
                <argumentType ref="type.1381023"/>
            </content>
        </type>
        <type id="type.1381038" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, const Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>&amp;, const Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>*, Hashtable&lt;System.Unicode.GeneralCategoryId, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1381012"/>
                <argumentType ref="type.1381021"/>
                <argumentType ref="type.1381037"/>
                <argumentType ref="type.1381023"/>
            </content>
        </type>
        <type id="type.1381566" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>, Pair&lt;System.Unicode.NumericTypeId, NumericType*>&amp;, Pair&lt;System.Unicode.NumericTypeId, NumericType*>*, Hashtable&lt;System.Unicode.NumericTypeId, Pair&lt;System.Unicode.NumericTypeId, NumericType*>, SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1381550"/>
                <argumentType ref="type.1381565"/>
                <argumentType ref="type.1381551"/>
                <argumentType ref="type.1381561"/>
            </content>
        </type>
        <type id="type.1381576" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>, const Pair&lt;System.Unicode.NumericTypeId, NumericType*>&amp;, const Pair&lt;System.Unicode.NumericTypeId, NumericType*>*, Hashtable&lt;System.Unicode.NumericTypeId, Pair&lt;System.Unicode.NumericTypeId, NumericType*>, SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1381550"/>
                <argumentType ref="type.1381559"/>
                <argumentType ref="type.1381575"/>
                <argumentType ref="type.1381561"/>
            </content>
        </type>
        <type id="type.1381386" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.ScriptId, Script*>, Pair&lt;System.Unicode.ScriptId, Script*>&amp;, Pair&lt;System.Unicode.ScriptId, Script*>*, Hashtable&lt;System.Unicode.ScriptId, Pair&lt;System.Unicode.ScriptId, Script*>, SelectFirst&lt;System.Unicode.ScriptId, Script*>, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1381370"/>
                <argumentType ref="type.1381385"/>
                <argumentType ref="type.1381371"/>
                <argumentType ref="type.1381381"/>
            </content>
        </type>
        <type id="type.1381396" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.ScriptId, Script*>, const Pair&lt;System.Unicode.ScriptId, Script*>&amp;, const Pair&lt;System.Unicode.ScriptId, Script*>*, Hashtable&lt;System.Unicode.ScriptId, Pair&lt;System.Unicode.ScriptId, Script*>, SelectFirst&lt;System.Unicode.ScriptId, Script*>, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="type.1381370"/>
                <argumentType ref="type.1381379"/>
                <argumentType ref="type.1381395"/>
                <argumentType ref="type.1381381"/>
            </content>
        </type>
        <type id="type.1379517" specialization="true">
            <name>HashtableIterator&lt;T, R, P, H></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="1378274"/>
                <argumentType ref="1378275"/>
                <argumentType ref="1378276"/>
                <argumentType ref="1378277"/>
            </content>
        </type>
        <type id="type.1379529" specialization="true">
            <name>HashtableIterator&lt;T, R, P, H></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="1378278"/>
                <argumentType ref="1378279"/>
                <argumentType ref="1378280"/>
                <argumentType ref="1378281"/>
            </content>
        </type>
        <type id="type.1379517" specialization="true">
            <name>HashtableIterator&lt;T, R, P, H></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="1378274"/>
                <argumentType ref="1378275"/>
                <argumentType ref="1378276"/>
                <argumentType ref="1378277"/>
            </content>
        </type>
        <type derived="true" id="type.1944">
            <name>HashtableIterator&lt;T, R, P, H>&amp;</name>
            <content>
                <baseType ref="type.1379517"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1934">
            <name>HashtableIterator&lt;T, R, P, H>*</name>
            <content>
                <baseType ref="type.1379517"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1863" specialization="true">
            <name>HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="1378262"/>
                <argumentType ref="type.1861"/>
                <argumentType ref="type.1862"/>
                <argumentType ref="type.1857"/>
            </content>
        </type>
        <type id="type.1379437" specialization="true">
            <name>HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="1378265"/>
                <argumentType ref="type.1379435"/>
                <argumentType ref="type.1379436"/>
                <argumentType ref="type.1379431"/>
            </content>
        </type>
        <type derived="true" id="type.1871">
            <name>HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>&amp;</name>
            <content>
                <baseType ref="type.1863"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1883">
            <name>HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1863"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1864">
            <name>HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>*</name>
            <content>
                <baseType ref="type.1863"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1873" specialization="true">
            <name>HashtableIterator&lt;T, const T&amp;, const T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="1378262"/>
                <argumentType ref="type.1855"/>
                <argumentType ref="type.1872"/>
                <argumentType ref="type.1857"/>
            </content>
        </type>
        <type id="type.1379447" specialization="true">
            <name>HashtableIterator&lt;T, const T&amp;, const T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="1378265"/>
                <argumentType ref="type.1379429"/>
                <argumentType ref="type.1379446"/>
                <argumentType ref="type.1379431"/>
            </content>
        </type>
        <type derived="true" id="type.1877">
            <name>HashtableIterator&lt;T, const T&amp;, const T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>&amp;</name>
            <content>
                <baseType ref="type.1873"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1874">
            <name>HashtableIterator&lt;T, const T&amp;, const T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>*</name>
            <content>
                <baseType ref="type.1873"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1952" specialization="true">
            <name>HashtableIterator&lt;ValueType, ValueType&amp;, ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="1378284"/>
                <argumentType ref="type.1950"/>
                <argumentType ref="type.1951"/>
                <argumentType ref="type.1379542"/>
            </content>
        </type>
        <type derived="true" id="type.1961">
            <name>HashtableIterator&lt;ValueType, ValueType&amp;, ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>>&amp;</name>
            <content>
                <baseType ref="type.1952"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1973">
            <name>HashtableIterator&lt;ValueType, ValueType&amp;, ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1952"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1953">
            <name>HashtableIterator&lt;ValueType, ValueType&amp;, ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>>*</name>
            <content>
                <baseType ref="type.1952"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1963" specialization="true">
            <name>HashtableIterator&lt;ValueType, const ValueType&amp;, const ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>></name>
            <content>
                <primaryType ref="1379517"/>
                <argumentType ref="1378284"/>
                <argumentType ref="type.1960"/>
                <argumentType ref="type.1962"/>
                <argumentType ref="type.1379542"/>
            </content>
        </type>
        <type derived="true" id="type.1967">
            <name>HashtableIterator&lt;ValueType, const ValueType&amp;, const ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>>&amp;</name>
            <content>
                <baseType ref="type.1963"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1964">
            <name>HashtableIterator&lt;ValueType, const ValueType&amp;, const ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>>*</name>
            <content>
                <baseType ref="type.1963"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383534">
            <name>Identifier</name>
        </type>
        <type derived="true" id="type.1385342">
            <name>Identifier&amp;</name>
            <content>
                <baseType ref="1383534"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2995">
            <name>Identifier&amp;&amp;</name>
            <content>
                <baseType ref="1383534"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383535">
            <name>Identifier*</name>
            <content>
                <baseType ref="1383534"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1380211" specialization="true">
            <name>Identity&lt;T></name>
            <content>
                <primaryType ref="1379022"/>
                <argumentType ref="1378387"/>
            </content>
        </type>
        <type id="type.1380161" specialization="true">
            <name>Identity&lt;T></name>
            <content>
                <primaryType ref="1379022"/>
                <argumentType ref="1378385"/>
            </content>
        </type>
        <type id="type.1379424" specialization="true">
            <name>Identity&lt;T></name>
            <content>
                <primaryType ref="1379022"/>
                <argumentType ref="1378265"/>
            </content>
        </type>
        <type id="type.1850" specialization="true">
            <name>Identity&lt;T></name>
            <content>
                <primaryType ref="1379022"/>
                <argumentType ref="1378262"/>
            </content>
        </type>
        <type id="type.1380161" specialization="true">
            <name>Identity&lt;T></name>
            <content>
                <primaryType ref="1379022"/>
                <argumentType ref="1378385"/>
            </content>
        </type>
        <type id="type.1379022" specialization="true">
            <name>Identity&lt;T></name>
            <content>
                <primaryType ref="1379022"/>
                <argumentType ref="1378203"/>
            </content>
        </type>
        <type id="type.2302" specialization="true">
            <name>Identity&lt;T></name>
            <content>
                <primaryType ref="1379022"/>
                <argumentType ref="1378383"/>
            </content>
        </type>
        <type derived="true" id="type.2308">
            <name>Identity&lt;T>*</name>
            <content>
                <baseType ref="type.2302"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1856">
            <name>Identity&lt;T>*</name>
            <content>
                <baseType ref="type.1850"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383552">
            <name>IfStatement</name>
        </type>
        <type derived="true" id="type.1385392">
            <name>IfStatement&amp;</name>
            <content>
                <baseType ref="1383552"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383553">
            <name>IfStatement*</name>
            <content>
                <baseType ref="1383552"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383510">
            <name>Indexing</name>
        </type>
        <type derived="true" id="type.1385380">
            <name>Indexing&amp;</name>
            <content>
                <baseType ref="1383510"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383511">
            <name>Indexing*</name>
            <content>
                <baseType ref="1383510"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383423">
            <name>IntType</name>
        </type>
        <type derived="true" id="type.1385335">
            <name>IntType&amp;</name>
            <content>
                <baseType ref="1383423"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383424">
            <name>IntType*</name>
            <content>
                <baseType ref="1383423"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383512">
            <name>Invoke</name>
        </type>
        <type derived="true" id="type.1385381">
            <name>Invoke&amp;</name>
            <content>
                <baseType ref="1383512"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2974">
            <name>Invoke&amp;&amp;</name>
            <content>
                <baseType ref="1383512"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383513">
            <name>Invoke*</name>
            <content>
                <baseType ref="1383512"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383506">
            <name>Is</name>
        </type>
        <type derived="true" id="type.1385378">
            <name>Is&amp;</name>
            <content>
                <baseType ref="1383506"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383507">
            <name>Is*</name>
            <content>
                <baseType ref="1383506"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1773">
            <name>K&amp;&amp;</name>
            <content>
                <baseType ref="1378253"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2114">
            <name>Key&amp;&amp;</name>
            <content>
                <baseType ref="1378309"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="1383484">
            <name>Less</name>
        </type>
        <type derived="true" id="type.1385367">
            <name>Less&amp;</name>
            <content>
                <baseType ref="1383484"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383485">
            <name>Less*</name>
            <content>
                <baseType ref="1383484"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1379082" specialization="true">
            <name>Less&lt;T, U></name>
            <content>
                <primaryType ref="1379082"/>
                <argumentType ref="1378217"/>
                <argumentType ref="1378218"/>
            </content>
        </type>
        <type id="type.1379071" specialization="true">
            <name>Less&lt;T></name>
            <content>
                <primaryType ref="1379071"/>
                <argumentType ref="1378215"/>
            </content>
        </type>
        <type id="1383488">
            <name>LessOrEqual</name>
        </type>
        <type derived="true" id="type.1385369">
            <name>LessOrEqual&amp;</name>
            <content>
                <baseType ref="1383488"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383489">
            <name>LessOrEqual*</name>
            <content>
                <baseType ref="1383488"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1379124" specialization="true">
            <name>LessOrEqualTo&lt;T, U></name>
            <content>
                <primaryType ref="1379124"/>
                <argumentType ref="1378227"/>
                <argumentType ref="1378228"/>
            </content>
        </type>
        <type id="type.1379113" specialization="true">
            <name>LessOrEqualTo&lt;T></name>
            <content>
                <primaryType ref="1379113"/>
                <argumentType ref="1378225"/>
            </content>
        </type>
        <type id="type.1379709" specialization="true">
            <name>LinkedList&lt;T></name>
            <content>
                <primaryType ref="1379661"/>
                <argumentType ref="1378300"/>
            </content>
        </type>
        <type id="type.1379661" specialization="true">
            <name>LinkedList&lt;T></name>
            <content>
                <primaryType ref="1379661"/>
                <argumentType ref="1378298"/>
            </content>
        </type>
        <type id="type.2008" specialization="true">
            <name>LinkedList&lt;T></name>
            <content>
                <primaryType ref="1379661"/>
                <argumentType ref="1378291"/>
            </content>
        </type>
        <type id="type.1379635" specialization="true">
            <name>LinkedList&lt;T></name>
            <content>
                <primaryType ref="1379661"/>
                <argumentType ref="1378294"/>
            </content>
        </type>
        <type id="type.1379709" specialization="true">
            <name>LinkedList&lt;T></name>
            <content>
                <primaryType ref="1379661"/>
                <argumentType ref="1378300"/>
            </content>
        </type>
        <type id="type.1379685" specialization="true">
            <name>LinkedList&lt;T></name>
            <content>
                <primaryType ref="1379661"/>
                <argumentType ref="1378299"/>
            </content>
        </type>
        <type derived="true" id="type.2060">
            <name>LinkedList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.1379661"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2031">
            <name>LinkedList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.2008"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2009">
            <name>LinkedList&lt;T>*</name>
            <content>
                <baseType ref="type.2008"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2038">
            <name>LinkedList&lt;T>*</name>
            <content>
                <baseType ref="type.1379661"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.2047" specialization="true">
            <name>LinkedListNode&lt;T></name>
            <content>
                <primaryType ref="1379596"/>
                <argumentType ref="1378298"/>
            </content>
        </type>
        <type id="type.2018" specialization="true">
            <name>LinkedListNode&lt;T></name>
            <content>
                <primaryType ref="1379596"/>
                <argumentType ref="1378291"/>
            </content>
        </type>
        <type id="type.1379695" specialization="true">
            <name>LinkedListNode&lt;T></name>
            <content>
                <primaryType ref="1379596"/>
                <argumentType ref="1378299"/>
            </content>
        </type>
        <type id="type.1379719" specialization="true">
            <name>LinkedListNode&lt;T></name>
            <content>
                <primaryType ref="1379596"/>
                <argumentType ref="1378300"/>
            </content>
        </type>
        <type id="type.1379645" specialization="true">
            <name>LinkedListNode&lt;T></name>
            <content>
                <primaryType ref="1379596"/>
                <argumentType ref="1378294"/>
            </content>
        </type>
        <type id="type.1379596" specialization="true">
            <name>LinkedListNode&lt;T></name>
            <content>
                <primaryType ref="1379596"/>
                <argumentType ref="1378289"/>
            </content>
        </type>
        <type id="type.1379695" specialization="true">
            <name>LinkedListNode&lt;T></name>
            <content>
                <primaryType ref="1379596"/>
                <argumentType ref="1378299"/>
            </content>
        </type>
        <type derived="true" id="type.2048">
            <name>LinkedListNode&lt;T>*</name>
            <content>
                <baseType ref="type.2047"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2019">
            <name>LinkedListNode&lt;T>*</name>
            <content>
                <baseType ref="type.2018"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2000">
            <name>LinkedListNode&lt;T>*</name>
            <content>
                <baseType ref="type.1379596"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1379631" specialization="true">
            <name>LinkedListNodeIterator&lt;T, R, P></name>
            <content>
                <primaryType ref="1379602"/>
                <argumentType ref="1378294"/>
                <argumentType ref="1378295"/>
                <argumentType ref="1378296"/>
            </content>
        </type>
        <type id="type.1379602" specialization="true">
            <name>LinkedListNodeIterator&lt;T, R, P></name>
            <content>
                <primaryType ref="1379602"/>
                <argumentType ref="1378291"/>
                <argumentType ref="1378292"/>
                <argumentType ref="1378293"/>
            </content>
        </type>
        <type derived="true" id="type.2032">
            <name>LinkedListNodeIterator&lt;T, R, P>&amp;</name>
            <content>
                <baseType ref="type.1379602"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2005">
            <name>LinkedListNodeIterator&lt;T, R, P>*</name>
            <content>
                <baseType ref="type.1379602"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1379641" specialization="true">
            <name>LinkedListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="1379602"/>
                <argumentType ref="1378294"/>
                <argumentType ref="type.1379639"/>
                <argumentType ref="type.1379640"/>
            </content>
        </type>
        <type id="type.1379715" specialization="true">
            <name>LinkedListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="1379602"/>
                <argumentType ref="1378300"/>
                <argumentType ref="type.1379713"/>
                <argumentType ref="type.1379714"/>
            </content>
        </type>
        <type id="type.2043" specialization="true">
            <name>LinkedListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="1379602"/>
                <argumentType ref="1378298"/>
                <argumentType ref="type.2041"/>
                <argumentType ref="type.2042"/>
            </content>
        </type>
        <type id="type.2014" specialization="true">
            <name>LinkedListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="1379602"/>
                <argumentType ref="1378291"/>
                <argumentType ref="type.2012"/>
                <argumentType ref="type.2013"/>
            </content>
        </type>
        <type id="type.1379715" specialization="true">
            <name>LinkedListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="1379602"/>
                <argumentType ref="1378300"/>
                <argumentType ref="type.1379713"/>
                <argumentType ref="type.1379714"/>
            </content>
        </type>
        <type id="type.1379691" specialization="true">
            <name>LinkedListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="1379602"/>
                <argumentType ref="1378299"/>
                <argumentType ref="type.1379689"/>
                <argumentType ref="type.1379690"/>
            </content>
        </type>
        <type derived="true" id="type.2052">
            <name>LinkedListNodeIterator&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <baseType ref="type.2043"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2023">
            <name>LinkedListNodeIterator&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <baseType ref="type.2014"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2015">
            <name>LinkedListNodeIterator&lt;T, T&amp;, T*>*</name>
            <content>
                <baseType ref="type.2014"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2044">
            <name>LinkedListNodeIterator&lt;T, T&amp;, T*>*</name>
            <content>
                <baseType ref="type.2043"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1379726" specialization="true">
            <name>LinkedListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="1379602"/>
                <argumentType ref="1378300"/>
                <argumentType ref="type.1379723"/>
                <argumentType ref="type.1379725"/>
            </content>
        </type>
        <type id="type.1379702" specialization="true">
            <name>LinkedListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="1379602"/>
                <argumentType ref="1378299"/>
                <argumentType ref="type.1379699"/>
                <argumentType ref="type.1379701"/>
            </content>
        </type>
        <type id="type.1379652" specialization="true">
            <name>LinkedListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="1379602"/>
                <argumentType ref="1378294"/>
                <argumentType ref="type.1379649"/>
                <argumentType ref="type.1379651"/>
            </content>
        </type>
        <type id="type.2025" specialization="true">
            <name>LinkedListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="1379602"/>
                <argumentType ref="1378291"/>
                <argumentType ref="type.2022"/>
                <argumentType ref="type.2024"/>
            </content>
        </type>
        <type id="type.2054" specialization="true">
            <name>LinkedListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="1379602"/>
                <argumentType ref="1378298"/>
                <argumentType ref="type.2051"/>
                <argumentType ref="type.2053"/>
            </content>
        </type>
        <type derived="true" id="type.2029">
            <name>LinkedListNodeIterator&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <baseType ref="type.2025"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2058">
            <name>LinkedListNodeIterator&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <baseType ref="type.2054"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2055">
            <name>LinkedListNodeIterator&lt;T, const T&amp;, const T*>*</name>
            <content>
                <baseType ref="type.2054"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2026">
            <name>LinkedListNodeIterator&lt;T, const T&amp;, const T*>*</name>
            <content>
                <baseType ref="type.2025"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1381326" specialization="true">
            <name>List&lt;Age*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1378444"/>
            </content>
        </type>
        <type id="type.1382222" specialization="true">
            <name>List&lt;AliasType*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1378493"/>
            </content>
        </type>
        <type id="type.1381864" specialization="true">
            <name>List&lt;BidiClass*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1378475"/>
            </content>
        </type>
        <type id="type.1382043" specialization="true">
            <name>List&lt;BidiPairedBracketType*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1378484"/>
            </content>
        </type>
        <type id="type.1380778" specialization="true">
            <name>List&lt;BinaryProperty*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1378423"/>
            </content>
        </type>
        <type id="type.1380966" specialization="true">
            <name>List&lt;Block*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1378430"/>
            </content>
        </type>
        <type id="type.1379330" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1379314"/>
            </content>
        </type>
        <type id="type.1808" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1792"/>
            </content>
        </type>
        <type derived="true" id="type.1831">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1808"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1809">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>*</name>
            <content>
                <baseType ref="type.1808"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1381293" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1381277"/>
            </content>
        </type>
        <type id="type.1382189" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1382173"/>
            </content>
        </type>
        <type id="type.1381831" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1381815"/>
            </content>
        </type>
        <type id="type.1382010" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1381994"/>
            </content>
        </type>
        <type id="type.1380753" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1380737"/>
            </content>
        </type>
        <type id="type.1380933" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1380917"/>
            </content>
        </type>
        <type id="type.1381114" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1381098"/>
            </content>
        </type>
        <type id="type.1381652" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1381636"/>
            </content>
        </type>
        <type id="type.1381472" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1381456"/>
            </content>
        </type>
        <type id="type.1381228" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1381212"/>
            </content>
        </type>
        <type id="type.1382124" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1382108"/>
            </content>
        </type>
        <type id="type.1381766" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1381750"/>
            </content>
        </type>
        <type id="type.1381945" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1381929"/>
            </content>
        </type>
        <type id="type.1380674" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1380658"/>
            </content>
        </type>
        <type id="type.1380868" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1380852"/>
            </content>
        </type>
        <type id="type.1381049" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1381033"/>
            </content>
        </type>
        <type id="type.1381587" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1381571"/>
            </content>
        </type>
        <type id="type.1381407" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1381391"/>
            </content>
        </type>
        <type id="type.1884" specialization="true">
            <name>List&lt;Bucket&lt;T>*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1868"/>
            </content>
        </type>
        <type id="type.1379458" specialization="true">
            <name>List&lt;Bucket&lt;T>*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1379442"/>
            </content>
        </type>
        <type derived="true" id="type.1907">
            <name>List&lt;Bucket&lt;T>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1884"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1885">
            <name>List&lt;Bucket&lt;T>*>*</name>
            <content>
                <baseType ref="type.1884"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1975" specialization="true">
            <name>List&lt;Bucket&lt;ValueType>*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1957"/>
            </content>
        </type>
        <type derived="true" id="type.1998">
            <name>List&lt;Bucket&lt;ValueType>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1975"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1976">
            <name>List&lt;Bucket&lt;ValueType>*>*</name>
            <content>
                <baseType ref="type.1975"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1381147" specialization="true">
            <name>List&lt;GeneralCategory*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1378437"/>
            </content>
        </type>
        <type id="type.1381677" specialization="true">
            <name>List&lt;NumericType*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1378466"/>
            </content>
        </type>
        <type id="type.1381505" specialization="true">
            <name>List&lt;Script*></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1378453"/>
            </content>
        </type>
        <type id="type.1380587" specialization="true">
            <name>List&lt;String&lt;CharT>></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1380562"/>
            </content>
        </type>
        <type id="type.1380542" specialization="true">
            <name>List&lt;String&lt;CharT>></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1380518"/>
            </content>
        </type>
        <type id="type.1380452" specialization="true">
            <name>List&lt;String&lt;CharT>></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1380427"/>
            </content>
        </type>
        <type id="type.1380497" specialization="true">
            <name>List&lt;String&lt;CharT>></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1380472"/>
            </content>
        </type>
        <type id="type.2417" specialization="true">
            <name>List&lt;String&lt;CharT>></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1380292"/>
            </content>
        </type>
        <type id="type.1380407" specialization="true">
            <name>List&lt;String&lt;CharT>></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1380382"/>
            </content>
        </type>
        <type id="type.1380362" specialization="true">
            <name>List&lt;String&lt;CharT>></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1380337"/>
            </content>
        </type>
        <type id="type.1380587" specialization="true">
            <name>List&lt;String&lt;CharT>></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1380562"/>
            </content>
        </type>
        <type derived="true" id="type.2436">
            <name>List&lt;String&lt;CharT>>&amp;&amp;</name>
            <content>
                <baseType ref="type.2417"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2418">
            <name>List&lt;String&lt;CharT>>*</name>
            <content>
                <baseType ref="type.2417"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1378596" specialization="true">
            <name>List&lt;String&lt;char>></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1378573"/>
            </content>
        </type>
        <type id="type.1378721" specialization="true">
            <name>List&lt;String&lt;uchar>></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1378697"/>
            </content>
        </type>
        <type id="type.1378677" specialization="true">
            <name>List&lt;String&lt;wchar>></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1378653"/>
            </content>
        </type>
        <type id="type.1378617" specialization="true">
            <name>List&lt;System.Ascii.CharClass></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="1377982"/>
            </content>
        </type>
        <type id="type.1382244" specialization="true">
            <name>List&lt;System.Unicode.Alias></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="1378500"/>
            </content>
        </type>
        <type id="type.2199" specialization="true">
            <name>List&lt;T></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="1378339"/>
            </content>
        </type>
        <type id="type.1379733" specialization="true">
            <name>List&lt;T></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="1378302"/>
            </content>
        </type>
        <type id="type.2371" specialization="true">
            <name>List&lt;T></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="1378390"/>
            </content>
        </type>
        <type id="type.1379783" specialization="true">
            <name>List&lt;T></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="1378304"/>
            </content>
        </type>
        <type id="type.1379758" specialization="true">
            <name>List&lt;T></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="1378303"/>
            </content>
        </type>
        <type id="type.1379733" specialization="true">
            <name>List&lt;T></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="1378302"/>
            </content>
        </type>
        <type derived="true" id="type.2221">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.2199"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2392">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.2371"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2091">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.1379733"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2200">
            <name>List&lt;T>*</name>
            <content>
                <baseType ref="type.2199"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2372">
            <name>List&lt;T>*</name>
            <content>
                <baseType ref="type.2371"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2069">
            <name>List&lt;T>*</name>
            <content>
                <baseType ref="type.1379733"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1385233" specialization="true">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1385223"/>
            </content>
        </type>
        <type derived="true" id="type.1385252">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1385233"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385234">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>>*</name>
            <content>
                <baseType ref="type.1385233"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1385292" specialization="true">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1385282"/>
            </content>
        </type>
        <type derived="true" id="type.1385311">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1385292"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385293">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>>*</name>
            <content>
                <baseType ref="type.1385292"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1385130" specialization="true">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1385095"/>
            </content>
        </type>
        <type derived="true" id="type.1385149">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1385130"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385131">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>>*</name>
            <content>
                <baseType ref="type.1385130"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1385185" specialization="true">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1385177"/>
            </content>
        </type>
        <type derived="true" id="type.1385204">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1385185"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385186">
            <name>List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>>*</name>
            <content>
                <baseType ref="type.1385185"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1382276" specialization="true">
            <name>List&lt;UniquePtr&lt;System.Unicode.CharacterInfo>></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1382268"/>
            </content>
        </type>
        <type id="type.1382366" specialization="true">
            <name>List&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1382357"/>
            </content>
        </type>
        <type id="type.1382305" specialization="true">
            <name>List&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1382297"/>
            </content>
        </type>
        <type id="type.1382404" specialization="true">
            <name>List&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1382395"/>
            </content>
        </type>
        <type id="type.1379874" specialization="true">
            <name>List&lt;byte></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1377787"/>
            </content>
        </type>
        <type id="type.1379484" specialization="true">
            <name>List&lt;long></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1377792"/>
            </content>
        </type>
        <type id="type.1382325" specialization="true">
            <name>List&lt;uint></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1377791"/>
            </content>
        </type>
        <type id="type.1378747" specialization="true">
            <name>List&lt;ulong></name>
            <content>
                <primaryType ref="1379733"/>
                <argumentType ref="type.1377793"/>
            </content>
        </type>
        <type id="1383542">
            <name>Literal</name>
        </type>
        <type derived="true" id="type.1385344">
            <name>Literal&amp;</name>
            <content>
                <baseType ref="1383542"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3001">
            <name>Literal&amp;&amp;</name>
            <content>
                <baseType ref="1383542"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383543">
            <name>Literal*</name>
            <content>
                <baseType ref="1383542"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1379155" specialization="true">
            <name>LogicalAnd&lt;T></name>
            <content>
                <primaryType ref="1379155"/>
                <argumentType ref="1378235"/>
            </content>
        </type>
        <type id="type.1379167" specialization="true">
            <name>LogicalNot&lt;T></name>
            <content>
                <primaryType ref="1379167"/>
                <argumentType ref="1378239"/>
            </content>
        </type>
        <type id="type.1379163" specialization="true">
            <name>LogicalOr&lt;T></name>
            <content>
                <primaryType ref="1379163"/>
                <argumentType ref="1378237"/>
            </content>
        </type>
        <type id="1383427">
            <name>LongType</name>
        </type>
        <type derived="true" id="type.1385337">
            <name>LongType&amp;</name>
            <content>
                <baseType ref="1383427"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383428">
            <name>LongType*</name>
            <content>
                <baseType ref="1383427"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383600">
            <name>LvalueRef</name>
        </type>
        <type derived="true" id="type.1385346">
            <name>LvalueRef&amp;</name>
            <content>
                <baseType ref="1383600"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3039">
            <name>LvalueRef&amp;&amp;</name>
            <content>
                <baseType ref="1383600"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383601">
            <name>LvalueRef*</name>
            <content>
                <baseType ref="1383600"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1379811" specialization="true">
            <name>Map&lt;Key, Value, KeyCompare></name>
            <content>
                <primaryType ref="1379811"/>
                <argumentType ref="1378309"/>
                <argumentType ref="1378310"/>
                <argumentType ref="1378311"/>
            </content>
        </type>
        <type derived="true" id="type.2107">
            <name>Map&lt;Key, Value, KeyCompare>*</name>
            <content>
                <baseType ref="type.1379811"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1378973" specialization="true">
            <name>Minus&lt;T></name>
            <content>
                <primaryType ref="1378973"/>
                <argumentType ref="1378187"/>
            </content>
        </type>
        <type id="1383500">
            <name>Mul</name>
        </type>
        <type derived="true" id="type.1385375">
            <name>Mul&amp;</name>
            <content>
                <baseType ref="1383500"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383501">
            <name>Mul*</name>
            <content>
                <baseType ref="1383500"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1378987" specialization="true">
            <name>Multiplies&lt;T></name>
            <content>
                <primaryType ref="1378980"/>
                <argumentType ref="1378190"/>
            </content>
        </type>
        <type id="type.1378980" specialization="true">
            <name>Multiplies&lt;T></name>
            <content>
                <primaryType ref="1378980"/>
                <argumentType ref="1378189"/>
            </content>
        </type>
        <type id="type.1378987" specialization="true">
            <name>Multiplies&lt;T></name>
            <content>
                <primaryType ref="1378980"/>
                <argumentType ref="1378190"/>
            </content>
        </type>
        <type id="type.1378966" specialization="true">
            <name>Negate&lt;T></name>
            <content>
                <primaryType ref="1378966"/>
                <argumentType ref="1378185"/>
            </content>
        </type>
        <type id="1383528">
            <name>New</name>
        </type>
        <type derived="true" id="type.1385388">
            <name>New&amp;</name>
            <content>
                <baseType ref="1383528"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2992">
            <name>New&amp;&amp;</name>
            <content>
                <baseType ref="1383528"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383529">
            <name>New*</name>
            <content>
                <baseType ref="1383528"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383448">
            <name>Not</name>
        </type>
        <type derived="true" id="type.1385352">
            <name>Not&amp;</name>
            <content>
                <baseType ref="1383448"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2950">
            <name>Not&amp;&amp;</name>
            <content>
                <baseType ref="1383448"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383449">
            <name>Not*</name>
            <content>
                <baseType ref="1383448"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383482">
            <name>NotEqual</name>
        </type>
        <type derived="true" id="type.1385366">
            <name>NotEqual&amp;</name>
            <content>
                <baseType ref="1383482"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383483">
            <name>NotEqual*</name>
            <content>
                <baseType ref="1383482"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1379061" specialization="true">
            <name>NotEqualTo&lt;T, U></name>
            <content>
                <primaryType ref="1379061"/>
                <argumentType ref="1378212"/>
                <argumentType ref="1378213"/>
            </content>
        </type>
        <type id="type.1379050" specialization="true">
            <name>NotEqualTo&lt;T></name>
            <content>
                <primaryType ref="1379050"/>
                <argumentType ref="1378210"/>
            </content>
        </type>
        <type id="1383441">
            <name>Operator</name>
        </type>
        <type derived="true" id="type.1385094">
            <name>Operator&amp;&amp;</name>
            <content>
                <baseType ref="1383441"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385093">
            <name>Operator*</name>
            <content>
                <baseType ref="1383441"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1804" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool></name>
            <content>
                <primaryType ref="1379902"/>
                <argumentType ref="type.1787"/>
                <argumentType ref="type.1377785"/>
            </content>
        </type>
        <type derived="true" id="type.1805">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool>*</name>
            <content>
                <baseType ref="type.1804"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1880" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>, bool></name>
            <content>
                <primaryType ref="1379902"/>
                <argumentType ref="type.1863"/>
                <argumentType ref="type.1377785"/>
            </content>
        </type>
        <type derived="true" id="type.1881">
            <name>Pair&lt;HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>, bool>*</name>
            <content>
                <baseType ref="type.1880"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1970" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;ValueType, ValueType&amp;, ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>>, bool></name>
            <content>
                <primaryType ref="1379902"/>
                <argumentType ref="type.1952"/>
                <argumentType ref="type.1377785"/>
            </content>
        </type>
        <type derived="true" id="type.1971">
            <name>Pair&lt;HashtableIterator&lt;ValueType, ValueType&amp;, ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>>, bool>*</name>
            <content>
                <baseType ref="type.1970"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1769" specialization="true">
            <name>Pair&lt;K, T></name>
            <content>
                <primaryType ref="1379902"/>
                <argumentType ref="1378253"/>
                <argumentType ref="1378254"/>
            </content>
        </type>
        <type derived="true" id="type.1786">
            <name>Pair&lt;K, T>&amp;</name>
            <content>
                <baseType ref="type.1769"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1770">
            <name>Pair&lt;K, T>*</name>
            <content>
                <baseType ref="type.1769"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.2110" specialization="true">
            <name>Pair&lt;Key, Value></name>
            <content>
                <primaryType ref="1379902"/>
                <argumentType ref="1378309"/>
                <argumentType ref="1378310"/>
            </content>
        </type>
        <type derived="true" id="type.2136">
            <name>Pair&lt;Key, Value>&amp;</name>
            <content>
                <baseType ref="type.2110"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2111">
            <name>Pair&lt;Key, Value>*</name>
            <content>
                <baseType ref="type.2110"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.2149" specialization="true">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool></name>
            <content>
                <primaryType ref="1379902"/>
                <argumentType ref="type.2140"/>
                <argumentType ref="type.1377785"/>
            </content>
        </type>
        <type derived="true" id="type.2150">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool>*</name>
            <content>
                <baseType ref="type.2149"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.2336" specialization="true">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;T, T&amp;, T*>, bool></name>
            <content>
                <primaryType ref="1379902"/>
                <argumentType ref="type.2327"/>
                <argumentType ref="type.1377785"/>
            </content>
        </type>
        <type derived="true" id="type.2337">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;T, T&amp;, T*>, bool>*</name>
            <content>
                <baseType ref="type.2336"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.2288" specialization="true">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*>, bool></name>
            <content>
                <primaryType ref="1379902"/>
                <argumentType ref="type.2278"/>
                <argumentType ref="type.1377785"/>
            </content>
        </type>
        <type derived="true" id="type.2289">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*>, bool>*</name>
            <content>
                <baseType ref="type.2288"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.2174" specialization="true">
            <name>Pair&lt;T, U></name>
            <content>
                <primaryType ref="1379902"/>
                <argumentType ref="1378330"/>
                <argumentType ref="1378331"/>
            </content>
        </type>
        <type id="type.2185" specialization="true">
            <name>Pair&lt;T, U></name>
            <content>
                <primaryType ref="1379902"/>
                <argumentType ref="1378333"/>
                <argumentType ref="1378334"/>
            </content>
        </type>
        <type id="type.1379902" specialization="true">
            <name>Pair&lt;T, U></name>
            <content>
                <primaryType ref="1379902"/>
                <argumentType ref="1378321"/>
                <argumentType ref="1378322"/>
            </content>
        </type>
        <type derived="true" id="type.2186">
            <name>Pair&lt;T, U>*</name>
            <content>
                <baseType ref="type.2185"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2167">
            <name>Pair&lt;T, U>*</name>
            <content>
                <baseType ref="type.1379902"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2175">
            <name>Pair&lt;T, U>*</name>
            <content>
                <baseType ref="type.2174"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1378952" specialization="true">
            <name>Plus&lt;T></name>
            <content>
                <primaryType ref="1378952"/>
                <argumentType ref="1378182"/>
            </content>
        </type>
        <type id="type.1378959" specialization="true">
            <name>Plus&lt;T></name>
            <content>
                <primaryType ref="1378952"/>
                <argumentType ref="1378183"/>
            </content>
        </type>
        <type id="1383604">
            <name>Pointer</name>
        </type>
        <type derived="true" id="type.1385348">
            <name>Pointer&amp;</name>
            <content>
                <baseType ref="1383604"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3045">
            <name>Pointer&amp;&amp;</name>
            <content>
                <baseType ref="1383604"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383605">
            <name>Pointer*</name>
            <content>
                <baseType ref="1383604"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383518">
            <name>PostfixDecrement</name>
        </type>
        <type derived="true" id="type.1385383">
            <name>PostfixDecrement&amp;</name>
            <content>
                <baseType ref="1383518"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2980">
            <name>PostfixDecrement&amp;&amp;</name>
            <content>
                <baseType ref="1383518"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383519">
            <name>PostfixDecrement*</name>
            <content>
                <baseType ref="1383518"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383514">
            <name>PostfixExpression</name>
        </type>
        <type derived="true" id="type.1383515">
            <name>PostfixExpression*</name>
            <content>
                <baseType ref="1383514"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383516">
            <name>PostfixIncrement</name>
        </type>
        <type derived="true" id="type.1385382">
            <name>PostfixIncrement&amp;</name>
            <content>
                <baseType ref="1383516"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2977">
            <name>PostfixIncrement&amp;&amp;</name>
            <content>
                <baseType ref="1383516"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383517">
            <name>PostfixIncrement*</name>
            <content>
                <baseType ref="1383516"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383456">
            <name>PrefixDecrement</name>
        </type>
        <type derived="true" id="type.1385356">
            <name>PrefixDecrement&amp;</name>
            <content>
                <baseType ref="1383456"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2962">
            <name>PrefixDecrement&amp;&amp;</name>
            <content>
                <baseType ref="1383456"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383457">
            <name>PrefixDecrement*</name>
            <content>
                <baseType ref="1383456"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383446">
            <name>PrefixExpression</name>
        </type>
        <type derived="true" id="type.1383447">
            <name>PrefixExpression*</name>
            <content>
                <baseType ref="1383446"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383454">
            <name>PrefixIncrement</name>
        </type>
        <type derived="true" id="type.1385355">
            <name>PrefixIncrement&amp;</name>
            <content>
                <baseType ref="1383454"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2959">
            <name>PrefixIncrement&amp;&amp;</name>
            <content>
                <baseType ref="1383454"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383455">
            <name>PrefixIncrement*</name>
            <content>
                <baseType ref="1383454"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1379957" specialization="true">
            <name>Queue&lt;T></name>
            <content>
                <primaryType ref="1379957"/>
                <argumentType ref="1378339"/>
            </content>
        </type>
        <type derived="true" id="type.2196">
            <name>Queue&lt;T>*</name>
            <content>
                <baseType ref="type.1379957"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1381339" specialization="true">
            <name>RandomAccessIter&lt;Age*, Age*&amp;, Age**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1378444"/>
                <argumentType ref="type.1381253"/>
                <argumentType ref="type.1381338"/>
            </content>
        </type>
        <type id="type.1381331" specialization="true">
            <name>RandomAccessIter&lt;Age*, const Age*&amp;, const Age**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1378444"/>
                <argumentType ref="type.1381193"/>
                <argumentType ref="type.1381330"/>
            </content>
        </type>
        <type derived="true" id="type.2652">
            <name>RandomAccessIter&lt;Age*, const Age*&amp;, const Age**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1381331"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1382235" specialization="true">
            <name>RandomAccessIter&lt;AliasType*, AliasType*&amp;, AliasType**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1378493"/>
                <argumentType ref="type.1382149"/>
                <argumentType ref="type.1382234"/>
            </content>
        </type>
        <type id="type.1382227" specialization="true">
            <name>RandomAccessIter&lt;AliasType*, const AliasType*&amp;, const AliasType**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1378493"/>
                <argumentType ref="type.1382089"/>
                <argumentType ref="type.1382226"/>
            </content>
        </type>
        <type derived="true" id="type.2817">
            <name>RandomAccessIter&lt;AliasType*, const AliasType*&amp;, const AliasType**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1382227"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1381877" specialization="true">
            <name>RandomAccessIter&lt;BidiClass*, BidiClass*&amp;, BidiClass**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1378475"/>
                <argumentType ref="type.1381791"/>
                <argumentType ref="type.1381876"/>
            </content>
        </type>
        <type id="type.1381869" specialization="true">
            <name>RandomAccessIter&lt;BidiClass*, const BidiClass*&amp;, const BidiClass**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1378475"/>
                <argumentType ref="type.1381731"/>
                <argumentType ref="type.1381868"/>
            </content>
        </type>
        <type derived="true" id="type.2751">
            <name>RandomAccessIter&lt;BidiClass*, const BidiClass*&amp;, const BidiClass**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1381869"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1382056" specialization="true">
            <name>RandomAccessIter&lt;BidiPairedBracketType*, BidiPairedBracketType*&amp;, BidiPairedBracketType**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1378484"/>
                <argumentType ref="type.1381970"/>
                <argumentType ref="type.1382055"/>
            </content>
        </type>
        <type id="type.1382048" specialization="true">
            <name>RandomAccessIter&lt;BidiPairedBracketType*, const BidiPairedBracketType*&amp;, const BidiPairedBracketType**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1378484"/>
                <argumentType ref="type.1381910"/>
                <argumentType ref="type.1382047"/>
            </content>
        </type>
        <type derived="true" id="type.2784">
            <name>RandomAccessIter&lt;BidiPairedBracketType*, const BidiPairedBracketType*&amp;, const BidiPairedBracketType**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1382048"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1380791" specialization="true">
            <name>RandomAccessIter&lt;BinaryProperty*, BinaryProperty*&amp;, BinaryProperty**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1378423"/>
                <argumentType ref="type.1380699"/>
                <argumentType ref="type.1380790"/>
            </content>
        </type>
        <type id="type.1380783" specialization="true">
            <name>RandomAccessIter&lt;BinaryProperty*, const BinaryProperty*&amp;, const BinaryProperty**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1378423"/>
                <argumentType ref="type.1380639"/>
                <argumentType ref="type.1380782"/>
            </content>
        </type>
        <type derived="true" id="type.2552">
            <name>RandomAccessIter&lt;BinaryProperty*, const BinaryProperty*&amp;, const BinaryProperty**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380783"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1380979" specialization="true">
            <name>RandomAccessIter&lt;Block*, Block*&amp;, Block**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1378430"/>
                <argumentType ref="type.1380893"/>
                <argumentType ref="type.1380978"/>
            </content>
        </type>
        <type id="type.1380971" specialization="true">
            <name>RandomAccessIter&lt;Block*, const Block*&amp;, const Block**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1378430"/>
                <argumentType ref="type.1380833"/>
                <argumentType ref="type.1380970"/>
            </content>
        </type>
        <type derived="true" id="type.2586">
            <name>RandomAccessIter&lt;Block*, const Block*&amp;, const Block**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380971"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1379345" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1379314"/>
                <argumentType ref="type.1379343"/>
                <argumentType ref="type.1379344"/>
            </content>
        </type>
        <type id="type.1823" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1792"/>
                <argumentType ref="type.1821"/>
                <argumentType ref="type.1822"/>
            </content>
        </type>
        <type id="type.1379345" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1379314"/>
                <argumentType ref="type.1379343"/>
                <argumentType ref="type.1379344"/>
            </content>
        </type>
        <type derived="true" id="type.1829">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <baseType ref="type.1823"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1828">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1823"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1846">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1379345"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1824">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <baseType ref="type.1823"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1814" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1792"/>
                <argumentType ref="type.1812"/>
                <argumentType ref="type.1813"/>
            </content>
        </type>
        <type id="type.1379336" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1379314"/>
                <argumentType ref="type.1379334"/>
                <argumentType ref="type.1379335"/>
            </content>
        </type>
        <type derived="true" id="type.1820">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <baseType ref="type.1814"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1819">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1814"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1843">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1379336"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1815">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <baseType ref="type.1814"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1381308" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Age*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1381277"/>
                <argumentType ref="type.1381306"/>
                <argumentType ref="type.1381307"/>
            </content>
        </type>
        <type derived="true" id="type.2647">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1381308"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1381299" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1381277"/>
                <argumentType ref="type.1381297"/>
                <argumentType ref="type.1381298"/>
            </content>
        </type>
        <type derived="true" id="type.2644">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1381299"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1382204" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1382173"/>
                <argumentType ref="type.1382202"/>
                <argumentType ref="type.1382203"/>
            </content>
        </type>
        <type derived="true" id="type.2812">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1382204"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1382195" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1382173"/>
                <argumentType ref="type.1382193"/>
                <argumentType ref="type.1382194"/>
            </content>
        </type>
        <type derived="true" id="type.2809">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1382195"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1381846" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1381815"/>
                <argumentType ref="type.1381844"/>
                <argumentType ref="type.1381845"/>
            </content>
        </type>
        <type derived="true" id="type.2746">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1381846"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1381837" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1381815"/>
                <argumentType ref="type.1381835"/>
                <argumentType ref="type.1381836"/>
            </content>
        </type>
        <type derived="true" id="type.2743">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1381837"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1382025" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1381994"/>
                <argumentType ref="type.1382023"/>
                <argumentType ref="type.1382024"/>
            </content>
        </type>
        <type derived="true" id="type.2779">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1382025"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1382016" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1381994"/>
                <argumentType ref="type.1382014"/>
                <argumentType ref="type.1382015"/>
            </content>
        </type>
        <type derived="true" id="type.2776">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1382016"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1380768" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1380737"/>
                <argumentType ref="type.1380766"/>
                <argumentType ref="type.1380767"/>
            </content>
        </type>
        <type derived="true" id="type.2548">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380768"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1380759" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1380737"/>
                <argumentType ref="type.1380757"/>
                <argumentType ref="type.1380758"/>
            </content>
        </type>
        <type derived="true" id="type.2545">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380759"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1380948" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Block*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1380917"/>
                <argumentType ref="type.1380946"/>
                <argumentType ref="type.1380947"/>
            </content>
        </type>
        <type derived="true" id="type.2581">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380948"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1380939" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1380917"/>
                <argumentType ref="type.1380937"/>
                <argumentType ref="type.1380938"/>
            </content>
        </type>
        <type derived="true" id="type.2578">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380939"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1381129" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1381098"/>
                <argumentType ref="type.1381127"/>
                <argumentType ref="type.1381128"/>
            </content>
        </type>
        <type derived="true" id="type.2614">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1381129"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1381120" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1381098"/>
                <argumentType ref="type.1381118"/>
                <argumentType ref="type.1381119"/>
            </content>
        </type>
        <type derived="true" id="type.2611">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1381120"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1381667" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1381636"/>
                <argumentType ref="type.1381665"/>
                <argumentType ref="type.1381666"/>
            </content>
        </type>
        <type derived="true" id="type.2713">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1381667"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1381658" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1381636"/>
                <argumentType ref="type.1381656"/>
                <argumentType ref="type.1381657"/>
            </content>
        </type>
        <type derived="true" id="type.2710">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1381658"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1381487" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Script*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1381456"/>
                <argumentType ref="type.1381485"/>
                <argumentType ref="type.1381486"/>
            </content>
        </type>
        <type derived="true" id="type.2680">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1381487"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1381478" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1381456"/>
                <argumentType ref="type.1381476"/>
                <argumentType ref="type.1381477"/>
            </content>
        </type>
        <type derived="true" id="type.2677">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1381478"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1381243" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1381212"/>
                <argumentType ref="type.1381241"/>
                <argumentType ref="type.1381242"/>
            </content>
        </type>
        <type derived="true" id="type.2634">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1381243"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1381234" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1381212"/>
                <argumentType ref="type.1381232"/>
                <argumentType ref="type.1381233"/>
            </content>
        </type>
        <type derived="true" id="type.2631">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1381234"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1382139" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1382108"/>
                <argumentType ref="type.1382137"/>
                <argumentType ref="type.1382138"/>
            </content>
        </type>
        <type derived="true" id="type.2799">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1382139"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1382130" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1382108"/>
                <argumentType ref="type.1382128"/>
                <argumentType ref="type.1382129"/>
            </content>
        </type>
        <type derived="true" id="type.2796">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1382130"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1381781" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1381750"/>
                <argumentType ref="type.1381779"/>
                <argumentType ref="type.1381780"/>
            </content>
        </type>
        <type derived="true" id="type.2733">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1381781"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1381772" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1381750"/>
                <argumentType ref="type.1381770"/>
                <argumentType ref="type.1381771"/>
            </content>
        </type>
        <type derived="true" id="type.2730">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1381772"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1381960" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1381929"/>
                <argumentType ref="type.1381958"/>
                <argumentType ref="type.1381959"/>
            </content>
        </type>
        <type derived="true" id="type.2766">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1381960"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1381951" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1381929"/>
                <argumentType ref="type.1381949"/>
                <argumentType ref="type.1381950"/>
            </content>
        </type>
        <type derived="true" id="type.2763">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1381951"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1380689" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1380658"/>
                <argumentType ref="type.1380687"/>
                <argumentType ref="type.1380688"/>
            </content>
        </type>
        <type derived="true" id="type.2534">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380689"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1380680" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1380658"/>
                <argumentType ref="type.1380678"/>
                <argumentType ref="type.1380679"/>
            </content>
        </type>
        <type derived="true" id="type.2531">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380680"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1380883" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1380852"/>
                <argumentType ref="type.1380881"/>
                <argumentType ref="type.1380882"/>
            </content>
        </type>
        <type derived="true" id="type.2568">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380883"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1380874" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1380852"/>
                <argumentType ref="type.1380872"/>
                <argumentType ref="type.1380873"/>
            </content>
        </type>
        <type derived="true" id="type.2565">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380874"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1381064" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1381033"/>
                <argumentType ref="type.1381062"/>
                <argumentType ref="type.1381063"/>
            </content>
        </type>
        <type derived="true" id="type.2601">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1381064"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1381055" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1381033"/>
                <argumentType ref="type.1381053"/>
                <argumentType ref="type.1381054"/>
            </content>
        </type>
        <type derived="true" id="type.2598">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1381055"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1381602" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1381571"/>
                <argumentType ref="type.1381600"/>
                <argumentType ref="type.1381601"/>
            </content>
        </type>
        <type derived="true" id="type.2700">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1381602"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1381593" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1381571"/>
                <argumentType ref="type.1381591"/>
                <argumentType ref="type.1381592"/>
            </content>
        </type>
        <type derived="true" id="type.2697">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1381593"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1381422" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1381391"/>
                <argumentType ref="type.1381420"/>
                <argumentType ref="type.1381421"/>
            </content>
        </type>
        <type derived="true" id="type.2667">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1381422"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1381413" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1381391"/>
                <argumentType ref="type.1381411"/>
                <argumentType ref="type.1381412"/>
            </content>
        </type>
        <type derived="true" id="type.2664">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1381413"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1899" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1868"/>
                <argumentType ref="type.1897"/>
                <argumentType ref="type.1898"/>
            </content>
        </type>
        <type id="type.1379473" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1379442"/>
                <argumentType ref="type.1379471"/>
                <argumentType ref="type.1379472"/>
            </content>
        </type>
        <type derived="true" id="type.1905">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**>&amp;</name>
            <content>
                <baseType ref="type.1899"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1921">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1379473"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1904">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1899"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1900">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**>*</name>
            <content>
                <baseType ref="type.1899"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1379464" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1379442"/>
                <argumentType ref="type.1379462"/>
                <argumentType ref="type.1379463"/>
            </content>
        </type>
        <type id="type.1890" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1868"/>
                <argumentType ref="type.1888"/>
                <argumentType ref="type.1889"/>
            </content>
        </type>
        <type derived="true" id="type.1896">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>&amp;</name>
            <content>
                <baseType ref="type.1890"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1918">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1379464"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1895">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1890"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1891">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>*</name>
            <content>
                <baseType ref="type.1890"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1990" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, Bucket&lt;ValueType>*&amp;, Bucket&lt;ValueType>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1957"/>
                <argumentType ref="type.1988"/>
                <argumentType ref="type.1989"/>
            </content>
        </type>
        <type derived="true" id="type.1996">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, Bucket&lt;ValueType>*&amp;, Bucket&lt;ValueType>**>&amp;</name>
            <content>
                <baseType ref="type.1990"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1995">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, Bucket&lt;ValueType>*&amp;, Bucket&lt;ValueType>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1990"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1991">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, Bucket&lt;ValueType>*&amp;, Bucket&lt;ValueType>**>*</name>
            <content>
                <baseType ref="type.1990"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1981" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, const Bucket&lt;ValueType>*&amp;, const Bucket&lt;ValueType>**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1957"/>
                <argumentType ref="type.1979"/>
                <argumentType ref="type.1980"/>
            </content>
        </type>
        <type derived="true" id="type.1987">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, const Bucket&lt;ValueType>*&amp;, const Bucket&lt;ValueType>**>&amp;</name>
            <content>
                <baseType ref="type.1981"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1986">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, const Bucket&lt;ValueType>*&amp;, const Bucket&lt;ValueType>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1981"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1982">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, const Bucket&lt;ValueType>*&amp;, const Bucket&lt;ValueType>**>*</name>
            <content>
                <baseType ref="type.1981"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1380487" specialization="true">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378408"/>
                <argumentType ref="type.1380485"/>
                <argumentType ref="type.1380486"/>
            </content>
        </type>
        <type id="type.2407" specialization="true">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378404"/>
                <argumentType ref="type.2405"/>
                <argumentType ref="type.2406"/>
            </content>
        </type>
        <type id="type.1380532" specialization="true">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378409"/>
                <argumentType ref="type.1380530"/>
                <argumentType ref="type.1380531"/>
            </content>
        </type>
        <type id="type.1380442" specialization="true">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378407"/>
                <argumentType ref="type.1380440"/>
                <argumentType ref="type.1380441"/>
            </content>
        </type>
        <type id="type.1380577" specialization="true">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378410"/>
                <argumentType ref="type.1380575"/>
                <argumentType ref="type.1380576"/>
            </content>
        </type>
        <type id="type.1380397" specialization="true">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378406"/>
                <argumentType ref="type.1380395"/>
                <argumentType ref="type.1380396"/>
            </content>
        </type>
        <type id="type.1380352" specialization="true">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378405"/>
                <argumentType ref="type.1380350"/>
                <argumentType ref="type.1380351"/>
            </content>
        </type>
        <type derived="true" id="type.2413">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;</name>
            <content>
                <baseType ref="type.2407"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2412">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2407"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2443">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380352"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2485">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380487"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2499">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380532"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2471">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380442"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2513">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380577"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2457">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380397"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2408">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>*</name>
            <content>
                <baseType ref="type.2407"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1380343" specialization="true">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378405"/>
                <argumentType ref="type.1380341"/>
                <argumentType ref="type.1380342"/>
            </content>
        </type>
        <type id="type.1380388" specialization="true">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378406"/>
                <argumentType ref="type.1380386"/>
                <argumentType ref="type.1380387"/>
            </content>
        </type>
        <type id="type.1380523" specialization="true">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378409"/>
                <argumentType ref="type.1380522"/>
                <argumentType ref="type.1380517"/>
            </content>
        </type>
        <type id="type.2398" specialization="true">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378404"/>
                <argumentType ref="type.2396"/>
                <argumentType ref="type.2397"/>
            </content>
        </type>
        <type id="type.1380388" specialization="true">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378406"/>
                <argumentType ref="type.1380386"/>
                <argumentType ref="type.1380387"/>
            </content>
        </type>
        <type id="type.1380478" specialization="true">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378408"/>
                <argumentType ref="type.1380476"/>
                <argumentType ref="type.1380477"/>
            </content>
        </type>
        <type id="type.1380433" specialization="true">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378407"/>
                <argumentType ref="type.1380431"/>
                <argumentType ref="type.1380432"/>
            </content>
        </type>
        <type id="type.1380568" specialization="true">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378410"/>
                <argumentType ref="type.1380566"/>
                <argumentType ref="type.1380567"/>
            </content>
        </type>
        <type derived="true" id="type.2404">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;</name>
            <content>
                <baseType ref="type.2398"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2454">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380388"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2440">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380343"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2403">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2398"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2482">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380478"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2510">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380568"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2496">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380523"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2468">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380433"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2399">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>*</name>
            <content>
                <baseType ref="type.2398"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1381160" specialization="true">
            <name>RandomAccessIter&lt;GeneralCategory*, GeneralCategory*&amp;, GeneralCategory**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1378437"/>
                <argumentType ref="type.1381074"/>
                <argumentType ref="type.1381159"/>
            </content>
        </type>
        <type id="type.1381152" specialization="true">
            <name>RandomAccessIter&lt;GeneralCategory*, const GeneralCategory*&amp;, const GeneralCategory**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1378437"/>
                <argumentType ref="type.1381014"/>
                <argumentType ref="type.1381151"/>
            </content>
        </type>
        <type derived="true" id="type.2619">
            <name>RandomAccessIter&lt;GeneralCategory*, const GeneralCategory*&amp;, const GeneralCategory**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1381152"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1381690" specialization="true">
            <name>RandomAccessIter&lt;NumericType*, NumericType*&amp;, NumericType**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1378466"/>
                <argumentType ref="type.1381612"/>
                <argumentType ref="type.1381689"/>
            </content>
        </type>
        <type id="type.1381682" specialization="true">
            <name>RandomAccessIter&lt;NumericType*, const NumericType*&amp;, const NumericType**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1378466"/>
                <argumentType ref="type.1381552"/>
                <argumentType ref="type.1381681"/>
            </content>
        </type>
        <type derived="true" id="type.2717">
            <name>RandomAccessIter&lt;NumericType*, const NumericType*&amp;, const NumericType**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1381682"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1381518" specialization="true">
            <name>RandomAccessIter&lt;Script*, Script*&amp;, Script**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1378453"/>
                <argumentType ref="type.1381432"/>
                <argumentType ref="type.1381517"/>
            </content>
        </type>
        <type id="type.1381510" specialization="true">
            <name>RandomAccessIter&lt;Script*, const Script*&amp;, const Script**></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1378453"/>
                <argumentType ref="type.1381372"/>
                <argumentType ref="type.1381509"/>
            </content>
        </type>
        <type derived="true" id="type.2685">
            <name>RandomAccessIter&lt;Script*, const Script*&amp;, const Script**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1381510"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1380418" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1380382"/>
                <argumentType ref="type.1380406"/>
                <argumentType ref="type.1380383"/>
            </content>
        </type>
        <type id="type.1380463" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1380427"/>
                <argumentType ref="type.1380451"/>
                <argumentType ref="type.1380428"/>
            </content>
        </type>
        <type id="type.1380598" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1380562"/>
                <argumentType ref="type.1380586"/>
                <argumentType ref="type.1380563"/>
            </content>
        </type>
        <type id="type.1380553" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1380518"/>
                <argumentType ref="type.1380541"/>
                <argumentType ref="type.1380519"/>
            </content>
        </type>
        <type id="type.1380508" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1380472"/>
                <argumentType ref="type.1380496"/>
                <argumentType ref="type.1380473"/>
            </content>
        </type>
        <type id="type.2428" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1380292"/>
                <argumentType ref="type.2416"/>
                <argumentType ref="type.2393"/>
            </content>
        </type>
        <type id="type.1380373" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1380337"/>
                <argumentType ref="type.1380361"/>
                <argumentType ref="type.1380338"/>
            </content>
        </type>
        <type derived="true" id="type.2434">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;</name>
            <content>
                <baseType ref="type.2428"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2492">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380508"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2520">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380598"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2506">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380553"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2478">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380463"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2450">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380373"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2464">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380418"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2433">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2428"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2429">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>*</name>
            <content>
                <baseType ref="type.2428"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1380591" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1380562"/>
                <argumentType ref="type.1380584"/>
                <argumentType ref="type.1380565"/>
            </content>
        </type>
        <type id="type.1380546" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1380518"/>
                <argumentType ref="type.1380539"/>
                <argumentType ref="type.1380521"/>
            </content>
        </type>
        <type id="type.1380366" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1380337"/>
                <argumentType ref="type.1380359"/>
                <argumentType ref="type.1380340"/>
            </content>
        </type>
        <type id="type.1380501" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1380472"/>
                <argumentType ref="type.1380494"/>
                <argumentType ref="type.1380475"/>
            </content>
        </type>
        <type id="type.2421" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1380292"/>
                <argumentType ref="type.2414"/>
                <argumentType ref="type.2395"/>
            </content>
        </type>
        <type id="type.1380546" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1380518"/>
                <argumentType ref="type.1380539"/>
                <argumentType ref="type.1380521"/>
            </content>
        </type>
        <type id="type.1380456" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1380427"/>
                <argumentType ref="type.1380449"/>
                <argumentType ref="type.1380430"/>
            </content>
        </type>
        <type id="type.1380411" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1380382"/>
                <argumentType ref="type.1380404"/>
                <argumentType ref="type.1380385"/>
            </content>
        </type>
        <type derived="true" id="type.2427">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;</name>
            <content>
                <baseType ref="type.2421"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2426">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2421"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2489">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380501"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2475">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380456"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2517">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380591"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2461">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380411"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2503">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380546"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2447">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380366"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2422">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>*</name>
            <content>
                <baseType ref="type.2421"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1378607" specialization="true">
            <name>RandomAccessIter&lt;String&lt;char>, String&lt;char>&amp;, String&lt;char>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1378573"/>
                <argumentType ref="type.1378595"/>
                <argumentType ref="type.1378574"/>
            </content>
        </type>
        <type derived="true" id="type.1470">
            <name>RandomAccessIter&lt;String&lt;char>, String&lt;char>&amp;, String&lt;char>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1378607"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1378600" specialization="true">
            <name>RandomAccessIter&lt;String&lt;char>, const String&lt;char>&amp;, const String&lt;char>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1378573"/>
                <argumentType ref="type.1378593"/>
                <argumentType ref="type.1378576"/>
            </content>
        </type>
        <type derived="true" id="type.1467">
            <name>RandomAccessIter&lt;String&lt;char>, const String&lt;char>&amp;, const String&lt;char>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1378600"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1378732" specialization="true">
            <name>RandomAccessIter&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1378697"/>
                <argumentType ref="type.1378720"/>
                <argumentType ref="type.1378698"/>
            </content>
        </type>
        <type derived="true" id="type.1502">
            <name>RandomAccessIter&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1378732"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1378725" specialization="true">
            <name>RandomAccessIter&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1378697"/>
                <argumentType ref="type.1378718"/>
                <argumentType ref="type.1378700"/>
            </content>
        </type>
        <type derived="true" id="type.1499">
            <name>RandomAccessIter&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1378725"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1378688" specialization="true">
            <name>RandomAccessIter&lt;String&lt;wchar>, String&lt;wchar>&amp;, String&lt;wchar>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1378653"/>
                <argumentType ref="type.1378676"/>
                <argumentType ref="type.1378654"/>
            </content>
        </type>
        <type derived="true" id="type.1490">
            <name>RandomAccessIter&lt;String&lt;wchar>, String&lt;wchar>&amp;, String&lt;wchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1378688"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1378681" specialization="true">
            <name>RandomAccessIter&lt;String&lt;wchar>, const String&lt;wchar>&amp;, const String&lt;wchar>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1378653"/>
                <argumentType ref="type.1378674"/>
                <argumentType ref="type.1378656"/>
            </content>
        </type>
        <type derived="true" id="type.1487">
            <name>RandomAccessIter&lt;String&lt;wchar>, const String&lt;wchar>&amp;, const String&lt;wchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1378681"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1378631" specialization="true">
            <name>RandomAccessIter&lt;System.Ascii.CharClass, CharClass&amp;, CharClass*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1377982"/>
                <argumentType ref="type.1378630"/>
                <argumentType ref="type.1378570"/>
            </content>
        </type>
        <type derived="true" id="type.1477">
            <name>RandomAccessIter&lt;System.Ascii.CharClass, CharClass&amp;, CharClass*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1378631"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1378623" specialization="true">
            <name>RandomAccessIter&lt;System.Ascii.CharClass, const CharClass&amp;, const CharClass*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1377982"/>
                <argumentType ref="type.1378621"/>
                <argumentType ref="type.1378622"/>
            </content>
        </type>
        <type derived="true" id="type.1474">
            <name>RandomAccessIter&lt;System.Ascii.CharClass, const CharClass&amp;, const CharClass*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1378623"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1382257" specialization="true">
            <name>RandomAccessIter&lt;System.Unicode.Alias, Alias&amp;, Alias*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378500"/>
                <argumentType ref="type.1382256"/>
                <argumentType ref="type.1378501"/>
            </content>
        </type>
        <type derived="true" id="type.2825">
            <name>RandomAccessIter&lt;System.Unicode.Alias, Alias&amp;, Alias*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1382257"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1382249" specialization="true">
            <name>RandomAccessIter&lt;System.Unicode.Alias, const Alias&amp;, const Alias*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378500"/>
                <argumentType ref="type.1382248"/>
                <argumentType ref="type.1378503"/>
            </content>
        </type>
        <type derived="true" id="type.2822">
            <name>RandomAccessIter&lt;System.Unicode.Alias, const Alias&amp;, const Alias*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1382249"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1379986" specialization="true">
            <name>RandomAccessIter&lt;T, R, P></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378341"/>
                <argumentType ref="1378342"/>
                <argumentType ref="1378343"/>
            </content>
        </type>
        <type id="type.1380014" specialization="true">
            <name>RandomAccessIter&lt;T, R, P></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378353"/>
                <argumentType ref="1378354"/>
                <argumentType ref="1378355"/>
            </content>
        </type>
        <type id="type.1380021" specialization="true">
            <name>RandomAccessIter&lt;T, R, P></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378356"/>
                <argumentType ref="1378357"/>
                <argumentType ref="1378358"/>
            </content>
        </type>
        <type id="type.1380028" specialization="true">
            <name>RandomAccessIter&lt;T, R, P></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378359"/>
                <argumentType ref="1378360"/>
                <argumentType ref="1378361"/>
            </content>
        </type>
        <type id="type.1380000" specialization="true">
            <name>RandomAccessIter&lt;T, R, P></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378347"/>
                <argumentType ref="1378348"/>
                <argumentType ref="1378349"/>
            </content>
        </type>
        <type id="type.1380007" specialization="true">
            <name>RandomAccessIter&lt;T, R, P></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378350"/>
                <argumentType ref="1378351"/>
                <argumentType ref="1378352"/>
            </content>
        </type>
        <type id="type.1380028" specialization="true">
            <name>RandomAccessIter&lt;T, R, P></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378359"/>
                <argumentType ref="1378360"/>
                <argumentType ref="1378361"/>
            </content>
        </type>
        <type id="type.1379993" specialization="true">
            <name>RandomAccessIter&lt;T, R, P></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378344"/>
                <argumentType ref="1378345"/>
                <argumentType ref="1378346"/>
            </content>
        </type>
        <type derived="true" id="type.2227">
            <name>RandomAccessIter&lt;T, R, P>&amp;</name>
            <content>
                <baseType ref="type.1379986"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2233">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380007"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2237">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380021"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2226">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.1379986"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2239">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380028"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2231">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380000"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2229">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.1379993"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2235">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380014"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2222">
            <name>RandomAccessIter&lt;T, R, P>*</name>
            <content>
                <baseType ref="type.1379986"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.2213" specialization="true">
            <name>RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378339"/>
                <argumentType ref="type.2211"/>
                <argumentType ref="type.2212"/>
            </content>
        </type>
        <type id="type.2384" specialization="true">
            <name>RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378390"/>
                <argumentType ref="type.2370"/>
                <argumentType ref="type.2383"/>
            </content>
        </type>
        <type id="type.1379773" specialization="true">
            <name>RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378303"/>
                <argumentType ref="type.1379771"/>
                <argumentType ref="type.1379772"/>
            </content>
        </type>
        <type id="type.1379798" specialization="true">
            <name>RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378304"/>
                <argumentType ref="type.1379796"/>
                <argumentType ref="type.1379797"/>
            </content>
        </type>
        <type id="type.1379773" specialization="true">
            <name>RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378303"/>
                <argumentType ref="type.1379771"/>
                <argumentType ref="type.1379772"/>
            </content>
        </type>
        <type id="type.2083" specialization="true">
            <name>RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378302"/>
                <argumentType ref="type.2081"/>
                <argumentType ref="type.2082"/>
            </content>
        </type>
        <type derived="true" id="type.2219">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <baseType ref="type.2213"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2089">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <baseType ref="type.2083"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2390">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <baseType ref="type.2384"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2389">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2384"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2088">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2083"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2099">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1379773"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2106">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1379798"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2218">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2213"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2385">
            <name>RandomAccessIter&lt;T, T&amp;, T*>*</name>
            <content>
                <baseType ref="type.2384"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2084">
            <name>RandomAccessIter&lt;T, T&amp;, T*>*</name>
            <content>
                <baseType ref="type.2083"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2214">
            <name>RandomAccessIter&lt;T, T&amp;, T*>*</name>
            <content>
                <baseType ref="type.2213"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1379789" specialization="true">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378304"/>
                <argumentType ref="type.1379787"/>
                <argumentType ref="type.1379788"/>
            </content>
        </type>
        <type id="type.2376" specialization="true">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378390"/>
                <argumentType ref="type.2368"/>
                <argumentType ref="type.2375"/>
            </content>
        </type>
        <type id="type.2204" specialization="true">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378339"/>
                <argumentType ref="type.2197"/>
                <argumentType ref="type.2203"/>
            </content>
        </type>
        <type id="type.1379764" specialization="true">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378303"/>
                <argumentType ref="type.1379762"/>
                <argumentType ref="type.1379763"/>
            </content>
        </type>
        <type id="type.2074" specialization="true">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378302"/>
                <argumentType ref="type.2072"/>
                <argumentType ref="type.2073"/>
            </content>
        </type>
        <type id="type.1379764" specialization="true">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="1378303"/>
                <argumentType ref="type.1379762"/>
                <argumentType ref="type.1379763"/>
            </content>
        </type>
        <type derived="true" id="type.2382">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <baseType ref="type.2376"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2210">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <baseType ref="type.2204"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2080">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <baseType ref="type.2074"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2209">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2204"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2096">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1379764"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2079">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2074"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2103">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1379789"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2381">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2376"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2075">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>*</name>
            <content>
                <baseType ref="type.2074"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2377">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>*</name>
            <content>
                <baseType ref="type.2376"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2205">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>*</name>
            <content>
                <baseType ref="type.2204"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1385244" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1385223"/>
                <argumentType ref="type.1385232"/>
                <argumentType ref="type.1385224"/>
            </content>
        </type>
        <type derived="true" id="type.1385250">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*>&amp;</name>
            <content>
                <baseType ref="type.1385244"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385249">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1385244"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385245">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*>*</name>
            <content>
                <baseType ref="type.1385244"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1385237" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1385223"/>
                <argumentType ref="type.1385227"/>
                <argumentType ref="type.1385226"/>
            </content>
        </type>
        <type derived="true" id="type.1385243">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*>&amp;</name>
            <content>
                <baseType ref="type.1385237"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2895">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1385237"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385238">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*>*</name>
            <content>
                <baseType ref="type.1385237"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1385303" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1385282"/>
                <argumentType ref="type.1385291"/>
                <argumentType ref="type.1385283"/>
            </content>
        </type>
        <type derived="true" id="type.1385309">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*>&amp;</name>
            <content>
                <baseType ref="type.1385303"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385308">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1385303"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385304">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*>*</name>
            <content>
                <baseType ref="type.1385303"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1385296" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1385282"/>
                <argumentType ref="type.1385286"/>
                <argumentType ref="type.1385285"/>
            </content>
        </type>
        <type derived="true" id="type.1385302">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*>&amp;</name>
            <content>
                <baseType ref="type.1385296"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2903">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1385296"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385297">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*>*</name>
            <content>
                <baseType ref="type.1385296"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1385141" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1385095"/>
                <argumentType ref="type.1385102"/>
                <argumentType ref="type.1385096"/>
            </content>
        </type>
        <type derived="true" id="type.1385147">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*>&amp;</name>
            <content>
                <baseType ref="type.1385141"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385146">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1385141"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385142">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*>*</name>
            <content>
                <baseType ref="type.1385141"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1385134" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1385095"/>
                <argumentType ref="type.1385099"/>
                <argumentType ref="type.1385098"/>
            </content>
        </type>
        <type derived="true" id="type.1385140">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*>&amp;</name>
            <content>
                <baseType ref="type.1385134"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2883">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1385134"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385135">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*>*</name>
            <content>
                <baseType ref="type.1385134"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1385196" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1385177"/>
                <argumentType ref="type.1385184"/>
                <argumentType ref="type.1385178"/>
            </content>
        </type>
        <type derived="true" id="type.1385202">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*>&amp;</name>
            <content>
                <baseType ref="type.1385196"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385201">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1385196"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385197">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*>*</name>
            <content>
                <baseType ref="type.1385196"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1385189" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1385177"/>
                <argumentType ref="type.1385181"/>
                <argumentType ref="type.1385180"/>
            </content>
        </type>
        <type derived="true" id="type.1385195">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*>&amp;</name>
            <content>
                <baseType ref="type.1385189"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2889">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1385189"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385190">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*>*</name>
            <content>
                <baseType ref="type.1385189"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1382287" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, UniquePtr&lt;System.Unicode.CharacterInfo>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1382268"/>
                <argumentType ref="type.1382275"/>
                <argumentType ref="type.1382269"/>
            </content>
        </type>
        <type derived="true" id="type.2833">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, UniquePtr&lt;System.Unicode.CharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1382287"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1382280" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, const UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfo>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1382268"/>
                <argumentType ref="type.1382272"/>
                <argumentType ref="type.1382271"/>
            </content>
        </type>
        <type derived="true" id="type.2830">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, const UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1382280"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1382377" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.CharacterInfoPage>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1382357"/>
                <argumentType ref="type.1382365"/>
                <argumentType ref="type.1382358"/>
            </content>
        </type>
        <type derived="true" id="type.2857">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.CharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1382377"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1382370" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, const UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfoPage>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1382357"/>
                <argumentType ref="type.1382361"/>
                <argumentType ref="type.1382360"/>
            </content>
        </type>
        <type derived="true" id="type.2854">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, const UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1382370"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1382316" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1382297"/>
                <argumentType ref="type.1382304"/>
                <argumentType ref="type.1382298"/>
            </content>
        </type>
        <type derived="true" id="type.2841">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1382316"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1382309" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1382297"/>
                <argumentType ref="type.1382301"/>
                <argumentType ref="type.1382300"/>
            </content>
        </type>
        <type derived="true" id="type.2838">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1382309"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1382415" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1382395"/>
                <argumentType ref="type.1382403"/>
                <argumentType ref="type.1382396"/>
            </content>
        </type>
        <type derived="true" id="type.2866">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1382415"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1382408" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1382395"/>
                <argumentType ref="type.1382399"/>
                <argumentType ref="type.1382398"/>
            </content>
        </type>
        <type derived="true" id="type.2863">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1382408"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1379886" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1377787"/>
                <argumentType ref="type.1378807"/>
                <argumentType ref="type.1377805"/>
            </content>
        </type>
        <type derived="true" id="type.2166">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1379886"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1379879" specialization="true">
            <name>RandomAccessIter&lt;byte, const byte&amp;, const byte*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1377787"/>
                <argumentType ref="type.1379878"/>
                <argumentType ref="type.1379873"/>
            </content>
        </type>
        <type id="type.1378586" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1377796"/>
                <argumentType ref="type.1378585"/>
                <argumentType ref="type.1377823"/>
            </content>
        </type>
        <type id="type.1378578" specialization="true">
            <name>RandomAccessIter&lt;char, const char&amp;, const char*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1377796"/>
                <argumentType ref="type.1378577"/>
                <argumentType ref="type.1377849"/>
            </content>
        </type>
        <type id="type.1379490" specialization="true">
            <name>RandomAccessIter&lt;long, const long&amp;, const long*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1377792"/>
                <argumentType ref="type.1379488"/>
                <argumentType ref="type.1379489"/>
            </content>
        </type>
        <type id="type.1379497" specialization="true">
            <name>RandomAccessIter&lt;long, long&amp;, long*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1377792"/>
                <argumentType ref="type.1378812"/>
                <argumentType ref="type.1377815"/>
            </content>
        </type>
        <type id="type.1378703" specialization="true">
            <name>RandomAccessIter&lt;uchar, const uchar&amp;, const uchar*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1377798"/>
                <argumentType ref="type.1378701"/>
                <argumentType ref="type.1378702"/>
            </content>
        </type>
        <type id="type.1378711" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1377798"/>
                <argumentType ref="type.1378710"/>
                <argumentType ref="type.1377827"/>
            </content>
        </type>
        <type derived="true" id="type.1495">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1378711"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1382331" specialization="true">
            <name>RandomAccessIter&lt;uint, const uint&amp;, const uint*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1377791"/>
                <argumentType ref="type.1382329"/>
                <argumentType ref="type.1382330"/>
            </content>
        </type>
        <type derived="true" id="type.2845">
            <name>RandomAccessIter&lt;uint, const uint&amp;, const uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1382331"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1382338" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1377791"/>
                <argumentType ref="type.1378811"/>
                <argumentType ref="type.1377813"/>
            </content>
        </type>
        <type derived="true" id="type.2848">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1382338"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1378753" specialization="true">
            <name>RandomAccessIter&lt;ulong, const ulong&amp;, const ulong*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1377793"/>
                <argumentType ref="type.1378751"/>
                <argumentType ref="type.1378752"/>
            </content>
        </type>
        <type derived="true" id="type.1506">
            <name>RandomAccessIter&lt;ulong, const ulong&amp;, const ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1378753"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1378760" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1377793"/>
                <argumentType ref="type.1378746"/>
                <argumentType ref="type.1377817"/>
            </content>
        </type>
        <type derived="true" id="type.1509">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1378760"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1378659" specialization="true">
            <name>RandomAccessIter&lt;wchar, const wchar&amp;, const wchar*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1377797"/>
                <argumentType ref="type.1378657"/>
                <argumentType ref="type.1378658"/>
            </content>
        </type>
        <type id="type.1378667" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="1379986"/>
                <argumentType ref="type.1377797"/>
                <argumentType ref="type.1378666"/>
                <argumentType ref="type.1377825"/>
            </content>
        </type>
        <type derived="true" id="type.1483">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1378667"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="1383578">
            <name>RangeForStatement</name>
        </type>
        <type derived="true" id="type.1385405">
            <name>RangeForStatement&amp;</name>
            <content>
                <baseType ref="1383578"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383579">
            <name>RangeForStatement*</name>
            <content>
                <baseType ref="1383578"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.2123" specialization="true">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare></name>
            <content>
                <primaryType ref="1380067"/>
                <argumentType ref="1378309"/>
                <argumentType ref="type.2110"/>
                <argumentType ref="type.2116"/>
                <argumentType ref="1378311"/>
            </content>
        </type>
        <type derived="true" id="type.2148">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;&amp;</name>
            <content>
                <baseType ref="type.2123"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2124">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>*</name>
            <content>
                <baseType ref="type.2123"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1380067" specialization="true">
            <name>RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare></name>
            <content>
                <primaryType ref="1380067"/>
                <argumentType ref="1378377"/>
                <argumentType ref="1378378"/>
                <argumentType ref="1378379"/>
                <argumentType ref="1378380"/>
            </content>
        </type>
        <type derived="true" id="type.2286">
            <name>RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380067"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2260">
            <name>RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare>*</name>
            <content>
                <baseType ref="type.1380067"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1380218" specialization="true">
            <name>RedBlackTree&lt;T, T, Identity&lt;T>, C></name>
            <content>
                <primaryType ref="1380067"/>
                <argumentType ref="1378387"/>
                <argumentType ref="1378387"/>
                <argumentType ref="type.1380211"/>
                <argumentType ref="1378388"/>
            </content>
        </type>
        <type id="type.1380168" specialization="true">
            <name>RedBlackTree&lt;T, T, Identity&lt;T>, C></name>
            <content>
                <primaryType ref="1380067"/>
                <argumentType ref="1378385"/>
                <argumentType ref="1378385"/>
                <argumentType ref="type.1380161"/>
                <argumentType ref="1378386"/>
            </content>
        </type>
        <type id="type.2309" specialization="true">
            <name>RedBlackTree&lt;T, T, Identity&lt;T>, C></name>
            <content>
                <primaryType ref="1380067"/>
                <argumentType ref="1378383"/>
                <argumentType ref="1378383"/>
                <argumentType ref="type.2302"/>
                <argumentType ref="1378384"/>
            </content>
        </type>
        <type derived="true" id="type.2335">
            <name>RedBlackTree&lt;T, T, Identity&lt;T>, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.2309"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2310">
            <name>RedBlackTree&lt;T, T, Identity&lt;T>, C>*</name>
            <content>
                <baseType ref="type.2309"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.2132" specialization="true">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>></name>
            <content>
                <primaryType ref="1380035"/>
                <argumentType ref="type.2110"/>
            </content>
        </type>
        <type derived="true" id="type.2157">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>>&amp;</name>
            <content>
                <baseType ref="type.2132"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2133">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>>*</name>
            <content>
                <baseType ref="type.2132"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1380227" specialization="true">
            <name>RedBlackTreeNode&lt;T></name>
            <content>
                <primaryType ref="1380035"/>
                <argumentType ref="1378387"/>
            </content>
        </type>
        <type id="type.1380035" specialization="true">
            <name>RedBlackTreeNode&lt;T></name>
            <content>
                <primaryType ref="1380035"/>
                <argumentType ref="1378368"/>
            </content>
        </type>
        <type id="type.1380177" specialization="true">
            <name>RedBlackTreeNode&lt;T></name>
            <content>
                <primaryType ref="1380035"/>
                <argumentType ref="1378385"/>
            </content>
        </type>
        <type id="type.1380058" specialization="true">
            <name>RedBlackTreeNode&lt;T></name>
            <content>
                <primaryType ref="1380035"/>
                <argumentType ref="1378373"/>
            </content>
        </type>
        <type id="type.2248" specialization="true">
            <name>RedBlackTreeNode&lt;T></name>
            <content>
                <primaryType ref="1380035"/>
                <argumentType ref="1378370"/>
            </content>
        </type>
        <type id="type.2318" specialization="true">
            <name>RedBlackTreeNode&lt;T></name>
            <content>
                <primaryType ref="1380035"/>
                <argumentType ref="1378383"/>
            </content>
        </type>
        <type id="type.1380227" specialization="true">
            <name>RedBlackTreeNode&lt;T></name>
            <content>
                <primaryType ref="1380035"/>
                <argumentType ref="1378387"/>
            </content>
        </type>
        <type derived="true" id="type.2344">
            <name>RedBlackTreeNode&lt;T>&amp;</name>
            <content>
                <baseType ref="type.2318"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2319">
            <name>RedBlackTreeNode&lt;T>*</name>
            <content>
                <baseType ref="type.2318"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2240">
            <name>RedBlackTreeNode&lt;T>*</name>
            <content>
                <baseType ref="type.1380035"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2249">
            <name>RedBlackTreeNode&lt;T>*</name>
            <content>
                <baseType ref="type.2248"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.2269" specialization="true">
            <name>RedBlackTreeNode&lt;ValueType></name>
            <content>
                <primaryType ref="1380035"/>
                <argumentType ref="1378378"/>
            </content>
        </type>
        <type derived="true" id="type.2296">
            <name>RedBlackTreeNode&lt;ValueType>&amp;</name>
            <content>
                <baseType ref="type.2269"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2270">
            <name>RedBlackTreeNode&lt;ValueType>*</name>
            <content>
                <baseType ref="type.2269"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2932">
            <name>RedBlackTreeNodeBase&amp;&amp;</name>
            <content>
                <baseType ref="1378362"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1458">
            <name>RedBlackTreeNodeBase*</name>
            <content>
                <baseType ref="1378362"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.2140" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="1380041"/>
                <argumentType ref="type.2110"/>
                <argumentType ref="type.2136"/>
                <argumentType ref="type.2111"/>
            </content>
        </type>
        <type derived="true" id="type.2146">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <baseType ref="type.2140"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2145">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2140"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2141">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>*</name>
            <content>
                <baseType ref="type.2140"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.2128" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="1380041"/>
                <argumentType ref="type.2110"/>
                <argumentType ref="type.2121"/>
                <argumentType ref="type.2127"/>
            </content>
        </type>
        <type derived="true" id="type.2139">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <baseType ref="type.2128"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2138">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2128"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2129">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>*</name>
            <content>
                <baseType ref="type.2128"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1380054" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, R, P></name>
            <content>
                <primaryType ref="1380041"/>
                <argumentType ref="1378373"/>
                <argumentType ref="1378374"/>
                <argumentType ref="1378375"/>
            </content>
        </type>
        <type id="type.1380041" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, R, P></name>
            <content>
                <primaryType ref="1380041"/>
                <argumentType ref="1378370"/>
                <argumentType ref="1378371"/>
                <argumentType ref="1378372"/>
            </content>
        </type>
        <type derived="true" id="type.2256">
            <name>RedBlackTreeNodeIterator&lt;T, R, P>&amp;</name>
            <content>
                <baseType ref="type.1380041"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2255">
            <name>RedBlackTreeNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380041"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2259">
            <name>RedBlackTreeNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380054"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2245">
            <name>RedBlackTreeNodeIterator&lt;T, R, P>*</name>
            <content>
                <baseType ref="type.1380041"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1380186" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="1380041"/>
                <argumentType ref="1378385"/>
                <argumentType ref="type.1380181"/>
                <argumentType ref="type.1380185"/>
            </content>
        </type>
        <type id="type.1380236" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="1380041"/>
                <argumentType ref="1378387"/>
                <argumentType ref="type.1380231"/>
                <argumentType ref="type.1380235"/>
            </content>
        </type>
        <type id="type.2327" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="1380041"/>
                <argumentType ref="1378383"/>
                <argumentType ref="type.2322"/>
                <argumentType ref="type.2326"/>
            </content>
        </type>
        <type id="type.1380236" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="1380041"/>
                <argumentType ref="1378387"/>
                <argumentType ref="type.1380231"/>
                <argumentType ref="type.1380235"/>
            </content>
        </type>
        <type derived="true" id="type.2333">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <baseType ref="type.2327"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2332">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2327"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2328">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*>*</name>
            <content>
                <baseType ref="type.2327"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1380223" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="1380041"/>
                <argumentType ref="1378387"/>
                <argumentType ref="type.1380216"/>
                <argumentType ref="type.1380222"/>
            </content>
        </type>
        <type id="type.1380173" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="1380041"/>
                <argumentType ref="1378385"/>
                <argumentType ref="type.1380166"/>
                <argumentType ref="type.1380172"/>
            </content>
        </type>
        <type id="type.2314" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="1380041"/>
                <argumentType ref="1378383"/>
                <argumentType ref="type.2307"/>
                <argumentType ref="type.2313"/>
            </content>
        </type>
        <type id="type.1380173" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="1380041"/>
                <argumentType ref="1378385"/>
                <argumentType ref="type.1380166"/>
                <argumentType ref="type.1380172"/>
            </content>
        </type>
        <type derived="true" id="type.2325">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <baseType ref="type.2314"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2353">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380173"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2324">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2314"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2362">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380223"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2315">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>*</name>
            <content>
                <baseType ref="type.2314"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.2278" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*></name>
            <content>
                <primaryType ref="1380041"/>
                <argumentType ref="1378378"/>
                <argumentType ref="type.2273"/>
                <argumentType ref="type.2277"/>
            </content>
        </type>
        <type derived="true" id="type.2284">
            <name>RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*>&amp;</name>
            <content>
                <baseType ref="type.2278"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2283">
            <name>RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2278"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2279">
            <name>RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*>*</name>
            <content>
                <baseType ref="type.2278"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.2265" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*></name>
            <content>
                <primaryType ref="1380041"/>
                <argumentType ref="1378378"/>
                <argumentType ref="type.2263"/>
                <argumentType ref="type.2264"/>
            </content>
        </type>
        <type derived="true" id="type.2276">
            <name>RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*>&amp;</name>
            <content>
                <baseType ref="type.2265"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2275">
            <name>RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.2265"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2266">
            <name>RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*>*</name>
            <content>
                <baseType ref="type.2265"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1690" specialization="true">
            <name>Rel&lt;T></name>
            <content>
                <primaryType ref="1379016"/>
                <argumentType ref="1378225"/>
            </content>
        </type>
        <type id="type.1639" specialization="true">
            <name>Rel&lt;T></name>
            <content>
                <primaryType ref="1379016"/>
                <argumentType ref="1378210"/>
            </content>
        </type>
        <type id="type.1707" specialization="true">
            <name>Rel&lt;T></name>
            <content>
                <primaryType ref="1379016"/>
                <argumentType ref="1378230"/>
            </content>
        </type>
        <type id="type.1622" specialization="true">
            <name>Rel&lt;T></name>
            <content>
                <primaryType ref="1379016"/>
                <argumentType ref="1378205"/>
            </content>
        </type>
        <type id="type.1673" specialization="true">
            <name>Rel&lt;T></name>
            <content>
                <primaryType ref="1379016"/>
                <argumentType ref="1378220"/>
            </content>
        </type>
        <type id="type.1656" specialization="true">
            <name>Rel&lt;T></name>
            <content>
                <primaryType ref="1379016"/>
                <argumentType ref="1378215"/>
            </content>
        </type>
        <type derived="true" id="type.1627">
            <name>Rel&lt;T>*</name>
            <content>
                <baseType ref="type.1622"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1695">
            <name>Rel&lt;T>*</name>
            <content>
                <baseType ref="type.1690"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1678">
            <name>Rel&lt;T>*</name>
            <content>
                <baseType ref="type.1673"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1712">
            <name>Rel&lt;T>*</name>
            <content>
                <baseType ref="type.1707"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1661">
            <name>Rel&lt;T>*</name>
            <content>
                <baseType ref="type.1656"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1644">
            <name>Rel&lt;T>*</name>
            <content>
                <baseType ref="type.1639"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383504">
            <name>Rem</name>
        </type>
        <type derived="true" id="type.1385377">
            <name>Rem&amp;</name>
            <content>
                <baseType ref="1383504"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383505">
            <name>Rem*</name>
            <content>
                <baseType ref="1383504"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1379001" specialization="true">
            <name>Remainder&lt;T></name>
            <content>
                <primaryType ref="1379001"/>
                <argumentType ref="1378194"/>
            </content>
        </type>
        <type id="1383550">
            <name>ReturnStatement</name>
        </type>
        <type derived="true" id="type.1385391">
            <name>ReturnStatement&amp;</name>
            <content>
                <baseType ref="1383550"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3006">
            <name>ReturnStatement&amp;&amp;</name>
            <content>
                <baseType ref="1383550"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383551">
            <name>ReturnStatement*</name>
            <content>
                <baseType ref="1383550"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383602">
            <name>RvalueRef</name>
        </type>
        <type derived="true" id="type.1385347">
            <name>RvalueRef&amp;</name>
            <content>
                <baseType ref="1383602"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3042">
            <name>RvalueRef&amp;&amp;</name>
            <content>
                <baseType ref="1383602"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383603">
            <name>RvalueRef*</name>
            <content>
                <baseType ref="1383602"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383415">
            <name>SByteType</name>
        </type>
        <type derived="true" id="type.1385331">
            <name>SByteType&amp;</name>
            <content>
                <baseType ref="1383415"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383416">
            <name>SByteType*</name>
            <content>
                <baseType ref="1383415"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1379297" specialization="true">
            <name>SelectFirst&lt;K, T></name>
            <content>
                <primaryType ref="1379928"/>
                <argumentType ref="1378257"/>
                <argumentType ref="1378258"/>
            </content>
        </type>
        <type id="type.1775" specialization="true">
            <name>SelectFirst&lt;K, T></name>
            <content>
                <primaryType ref="1379928"/>
                <argumentType ref="1378253"/>
                <argumentType ref="1378254"/>
            </content>
        </type>
        <type derived="true" id="type.1781">
            <name>SelectFirst&lt;K, T>*</name>
            <content>
                <baseType ref="type.1775"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.2116" specialization="true">
            <name>SelectFirst&lt;Key, Value></name>
            <content>
                <primaryType ref="1379928"/>
                <argumentType ref="1378309"/>
                <argumentType ref="1378310"/>
            </content>
        </type>
        <type derived="true" id="type.2122">
            <name>SelectFirst&lt;Key, Value>*</name>
            <content>
                <baseType ref="type.2116"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1381260" specialization="true">
            <name>SelectFirst&lt;String&lt;char>, Age*></name>
            <content>
                <primaryType ref="1379928"/>
                <argumentType ref="type.1378573"/>
                <argumentType ref="type.1378444"/>
            </content>
        </type>
        <type id="type.1382156" specialization="true">
            <name>SelectFirst&lt;String&lt;char>, AliasType*></name>
            <content>
                <primaryType ref="1379928"/>
                <argumentType ref="type.1378573"/>
                <argumentType ref="type.1378493"/>
            </content>
        </type>
        <type id="type.1381798" specialization="true">
            <name>SelectFirst&lt;String&lt;char>, BidiClass*></name>
            <content>
                <primaryType ref="1379928"/>
                <argumentType ref="type.1378573"/>
                <argumentType ref="type.1378475"/>
            </content>
        </type>
        <type id="type.1381977" specialization="true">
            <name>SelectFirst&lt;String&lt;char>, BidiPairedBracketType*></name>
            <content>
                <primaryType ref="1379928"/>
                <argumentType ref="type.1378573"/>
                <argumentType ref="type.1378484"/>
            </content>
        </type>
        <type id="type.1380720" specialization="true">
            <name>SelectFirst&lt;String&lt;char>, BinaryProperty*></name>
            <content>
                <primaryType ref="1379928"/>
                <argumentType ref="type.1378573"/>
                <argumentType ref="type.1378423"/>
            </content>
        </type>
        <type id="type.1380900" specialization="true">
            <name>SelectFirst&lt;String&lt;char>, Block*></name>
            <content>
                <primaryType ref="1379928"/>
                <argumentType ref="type.1378573"/>
                <argumentType ref="type.1378430"/>
            </content>
        </type>
        <type id="type.1381081" specialization="true">
            <name>SelectFirst&lt;String&lt;char>, GeneralCategory*></name>
            <content>
                <primaryType ref="1379928"/>
                <argumentType ref="type.1378573"/>
                <argumentType ref="type.1378437"/>
            </content>
        </type>
        <type id="type.1381619" specialization="true">
            <name>SelectFirst&lt;String&lt;char>, NumericType*></name>
            <content>
                <primaryType ref="1379928"/>
                <argumentType ref="type.1378573"/>
                <argumentType ref="type.1378466"/>
            </content>
        </type>
        <type id="type.1381439" specialization="true">
            <name>SelectFirst&lt;String&lt;char>, Script*></name>
            <content>
                <primaryType ref="1379928"/>
                <argumentType ref="type.1378573"/>
                <argumentType ref="type.1378453"/>
            </content>
        </type>
        <type id="type.1381195" specialization="true">
            <name>SelectFirst&lt;System.Unicode.AgeId, Age*></name>
            <content>
                <primaryType ref="1379928"/>
                <argumentType ref="1378442"/>
                <argumentType ref="type.1378444"/>
            </content>
        </type>
        <type id="type.1382091" specialization="true">
            <name>SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*></name>
            <content>
                <primaryType ref="1379928"/>
                <argumentType ref="1378491"/>
                <argumentType ref="type.1378493"/>
            </content>
        </type>
        <type id="type.1381733" specialization="true">
            <name>SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*></name>
            <content>
                <primaryType ref="1379928"/>
                <argumentType ref="1378473"/>
                <argumentType ref="type.1378475"/>
            </content>
        </type>
        <type id="type.1381912" specialization="true">
            <name>SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*></name>
            <content>
                <primaryType ref="1379928"/>
                <argumentType ref="1378482"/>
                <argumentType ref="type.1378484"/>
            </content>
        </type>
        <type id="type.1380641" specialization="true">
            <name>SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*></name>
            <content>
                <primaryType ref="1379928"/>
                <argumentType ref="1378421"/>
                <argumentType ref="type.1378423"/>
            </content>
        </type>
        <type id="type.1380835" specialization="true">
            <name>SelectFirst&lt;System.Unicode.BlockId, Block*></name>
            <content>
                <primaryType ref="1379928"/>
                <argumentType ref="1378428"/>
                <argumentType ref="type.1378430"/>
            </content>
        </type>
        <type id="type.1381016" specialization="true">
            <name>SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*></name>
            <content>
                <primaryType ref="1379928"/>
                <argumentType ref="1378435"/>
                <argumentType ref="type.1378437"/>
            </content>
        </type>
        <type id="type.1381554" specialization="true">
            <name>SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*></name>
            <content>
                <primaryType ref="1379928"/>
                <argumentType ref="1378464"/>
                <argumentType ref="type.1378466"/>
            </content>
        </type>
        <type id="type.1381374" specialization="true">
            <name>SelectFirst&lt;System.Unicode.ScriptId, Script*></name>
            <content>
                <primaryType ref="1379928"/>
                <argumentType ref="1378451"/>
                <argumentType ref="type.1378453"/>
            </content>
        </type>
        <type id="type.1379928" specialization="true">
            <name>SelectFirst&lt;T, U></name>
            <content>
                <primaryType ref="1379928"/>
                <argumentType ref="1378330"/>
                <argumentType ref="1378331"/>
            </content>
        </type>
        <type id="type.1379928" specialization="true">
            <name>SelectFirst&lt;T, U></name>
            <content>
                <primaryType ref="1379928"/>
                <argumentType ref="1378330"/>
                <argumentType ref="1378331"/>
            </content>
        </type>
        <type id="type.1379941" specialization="true">
            <name>SelectSecond&lt;T, U></name>
            <content>
                <primaryType ref="1379941"/>
                <argumentType ref="1378333"/>
                <argumentType ref="1378334"/>
            </content>
        </type>
        <type id="type.1380157" specialization="true">
            <name>Set&lt;T, C></name>
            <content>
                <primaryType ref="1380108"/>
                <argumentType ref="1378385"/>
                <argumentType ref="1378386"/>
            </content>
        </type>
        <type id="type.1380207" specialization="true">
            <name>Set&lt;T, C></name>
            <content>
                <primaryType ref="1380108"/>
                <argumentType ref="1378387"/>
                <argumentType ref="1378388"/>
            </content>
        </type>
        <type id="type.1380108" specialization="true">
            <name>Set&lt;T, C></name>
            <content>
                <primaryType ref="1380108"/>
                <argumentType ref="1378383"/>
                <argumentType ref="1378384"/>
            </content>
        </type>
        <type derived="true" id="type.2299">
            <name>Set&lt;T, C>*</name>
            <content>
                <baseType ref="type.1380108"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383492">
            <name>ShiftLeft</name>
        </type>
        <type derived="true" id="type.1385371">
            <name>ShiftLeft&amp;</name>
            <content>
                <baseType ref="1383492"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383493">
            <name>ShiftLeft*</name>
            <content>
                <baseType ref="1383492"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1379203" specialization="true">
            <name>ShiftLeft&lt;T></name>
            <content>
                <primaryType ref="1379203"/>
                <argumentType ref="1378249"/>
            </content>
        </type>
        <type id="1383494">
            <name>ShiftRight</name>
        </type>
        <type derived="true" id="type.1385372">
            <name>ShiftRight&amp;</name>
            <content>
                <baseType ref="1383494"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383495">
            <name>ShiftRight*</name>
            <content>
                <baseType ref="1383494"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1379210" specialization="true">
            <name>ShiftRight&lt;T></name>
            <content>
                <primaryType ref="1379210"/>
                <argumentType ref="1378251"/>
            </content>
        </type>
        <type id="1383419">
            <name>ShortType</name>
        </type>
        <type derived="true" id="type.1385333">
            <name>ShortType&amp;</name>
            <content>
                <baseType ref="1383419"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383420">
            <name>ShortType*</name>
            <content>
                <baseType ref="1383419"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383520">
            <name>SizeOf</name>
        </type>
        <type derived="true" id="type.1385384">
            <name>SizeOf&amp;</name>
            <content>
                <baseType ref="1383520"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2983">
            <name>SizeOf&amp;&amp;</name>
            <content>
                <baseType ref="1383520"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383521">
            <name>SizeOf*</name>
            <content>
                <baseType ref="1383520"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1380257" specialization="true">
            <name>Stack&lt;T></name>
            <content>
                <primaryType ref="1380257"/>
                <argumentType ref="1378390"/>
            </content>
        </type>
        <type derived="true" id="type.2367">
            <name>Stack&lt;T>*</name>
            <content>
                <baseType ref="type.1380257"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383544">
            <name>Statement</name>
        </type>
        <type derived="true" id="type.1385183">
            <name>Statement&amp;</name>
            <content>
                <baseType ref="1383544"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3003">
            <name>Statement&amp;&amp;</name>
            <content>
                <baseType ref="1383544"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383545">
            <name>Statement*</name>
            <content>
                <baseType ref="1383544"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385431">
            <name>Statement*&amp;</name>
            <content>
                <baseType ref="1383544"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385433">
            <name>Statement*&amp;&amp;</name>
            <content>
                <baseType ref="1383544"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2907">
            <name>StaticInitCriticalSection&amp;&amp;</name>
            <content>
                <baseType ref="1377846"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1380472" specialization="true">
            <name>String&lt;CharT></name>
            <content>
                <primaryType ref="1380292"/>
                <argumentType ref="1378408"/>
            </content>
        </type>
        <type id="type.1380427" specialization="true">
            <name>String&lt;CharT></name>
            <content>
                <primaryType ref="1380292"/>
                <argumentType ref="1378407"/>
            </content>
        </type>
        <type id="type.1380382" specialization="true">
            <name>String&lt;CharT></name>
            <content>
                <primaryType ref="1380292"/>
                <argumentType ref="1378406"/>
            </content>
        </type>
        <type id="type.1380337" specialization="true">
            <name>String&lt;CharT></name>
            <content>
                <primaryType ref="1380292"/>
                <argumentType ref="1378405"/>
            </content>
        </type>
        <type id="type.1380292" specialization="true">
            <name>String&lt;CharT></name>
            <content>
                <primaryType ref="1380292"/>
                <argumentType ref="1378404"/>
            </content>
        </type>
        <type id="type.1380562" specialization="true">
            <name>String&lt;CharT></name>
            <content>
                <primaryType ref="1380292"/>
                <argumentType ref="1378410"/>
            </content>
        </type>
        <type id="type.1380518" specialization="true">
            <name>String&lt;CharT></name>
            <content>
                <primaryType ref="1380292"/>
                <argumentType ref="1378409"/>
            </content>
        </type>
        <type derived="true" id="type.2416">
            <name>String&lt;CharT>&amp;</name>
            <content>
                <baseType ref="type.1380292"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2415">
            <name>String&lt;CharT>&amp;&amp;</name>
            <content>
                <baseType ref="type.1380292"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2393">
            <name>String&lt;CharT>*</name>
            <content>
                <baseType ref="type.1380292"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1378573" specialization="true">
            <name>String&lt;char></name>
            <content>
                <primaryType ref="1380292"/>
                <argumentType ref="type.1377796"/>
            </content>
        </type>
        <type id="type.1378697" specialization="true">
            <name>String&lt;uchar></name>
            <content>
                <primaryType ref="1380292"/>
                <argumentType ref="type.1377798"/>
            </content>
        </type>
        <type id="type.1378653" specialization="true">
            <name>String&lt;wchar></name>
            <content>
                <primaryType ref="1380292"/>
                <argumentType ref="type.1377797"/>
            </content>
        </type>
        <type id="1383498">
            <name>Sub</name>
        </type>
        <type derived="true" id="type.1385374">
            <name>Sub&amp;</name>
            <content>
                <baseType ref="1383498"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383499">
            <name>Sub*</name>
            <content>
                <baseType ref="1383498"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383584">
            <name>SwitchStatement</name>
        </type>
        <type derived="true" id="type.1385406">
            <name>SwitchStatement&amp;</name>
            <content>
                <baseType ref="1383584"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3021">
            <name>SwitchStatement&amp;&amp;</name>
            <content>
                <baseType ref="1383584"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383585">
            <name>SwitchStatement*</name>
            <content>
                <baseType ref="1383584"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2211">
            <name>T&amp;</name>
            <content>
                <baseType ref="1378339"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2370">
            <name>T&amp;</name>
            <content>
                <baseType ref="1378390"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1516">
            <name>T&amp;</name>
            <content>
                <baseType ref="1378162"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1861">
            <name>T&amp;</name>
            <content>
                <baseType ref="1378262"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2012">
            <name>T&amp;</name>
            <content>
                <baseType ref="1378291"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1545">
            <name>T&amp;</name>
            <content>
                <baseType ref="1378171"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1943">
            <name>T&amp;</name>
            <content>
                <baseType ref="1378274"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2004">
            <name>T&amp;</name>
            <content>
                <baseType ref="1378289"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2081">
            <name>T&amp;</name>
            <content>
                <baseType ref="1378302"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1933">
            <name>T&amp;</name>
            <content>
                <baseType ref="1378272"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2322">
            <name>T&amp;</name>
            <content>
                <baseType ref="1378383"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2041">
            <name>T&amp;</name>
            <content>
                <baseType ref="1378298"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2244">
            <name>T&amp;</name>
            <content>
                <baseType ref="1378368"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1525">
            <name>T&amp;</name>
            <content>
                <baseType ref="1378164"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2253">
            <name>T&amp;</name>
            <content>
                <baseType ref="1378370"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2874">
            <name>T&amp;</name>
            <content>
                <baseType ref="1378523"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1833">
            <name>T&amp;</name>
            <content>
                <baseType ref="1378254"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2170">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="1378321"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2092">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="1378302"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2369">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="1378390"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2178">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="1378330"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2198">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="1378339"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2189">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="1378333"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1774">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="1378254"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2042">
            <name>T*</name>
            <content>
                <baseType ref="1378298"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2383">
            <name>T*</name>
            <content>
                <baseType ref="1378390"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2870">
            <name>T*</name>
            <content>
                <baseType ref="1378523"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2013">
            <name>T*</name>
            <content>
                <baseType ref="1378291"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2326">
            <name>T*</name>
            <content>
                <baseType ref="1378383"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2082">
            <name>T*</name>
            <content>
                <baseType ref="1378302"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2212">
            <name>T*</name>
            <content>
                <baseType ref="1378339"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1862">
            <name>T*</name>
            <content>
                <baseType ref="1378262"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1549">
            <name>T*</name>
            <content>
                <baseType ref="1378171"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383538">
            <name>TemplateId</name>
        </type>
        <type derived="true" id="type.1385343">
            <name>TemplateId&amp;</name>
            <content>
                <baseType ref="1383538"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2998">
            <name>TemplateId&amp;&amp;</name>
            <content>
                <baseType ref="1383538"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383539">
            <name>TemplateId*</name>
            <content>
                <baseType ref="1383538"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383530">
            <name>This</name>
        </type>
        <type derived="true" id="type.1385389">
            <name>This&amp;</name>
            <content>
                <baseType ref="1383530"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383531">
            <name>This*</name>
            <content>
                <baseType ref="1383530"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383590">
            <name>ThrowStatement</name>
        </type>
        <type derived="true" id="type.1385409">
            <name>ThrowStatement&amp;</name>
            <content>
                <baseType ref="1383590"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3027">
            <name>ThrowStatement&amp;&amp;</name>
            <content>
                <baseType ref="1383590"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383591">
            <name>ThrowStatement*</name>
            <content>
                <baseType ref="1383590"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383594">
            <name>TryStatement</name>
        </type>
        <type derived="true" id="type.1385410">
            <name>TryStatement&amp;</name>
            <content>
                <baseType ref="1383594"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3030">
            <name>TryStatement&amp;&amp;</name>
            <content>
                <baseType ref="1383594"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383595">
            <name>TryStatement*</name>
            <content>
                <baseType ref="1383594"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383405">
            <name>Type</name>
        </type>
        <type derived="true" id="type.2945">
            <name>Type&amp;&amp;</name>
            <content>
                <baseType ref="1383405"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383406">
            <name>Type*</name>
            <content>
                <baseType ref="1383405"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383522">
            <name>TypeName</name>
        </type>
        <type derived="true" id="type.1385385">
            <name>TypeName&amp;</name>
            <content>
                <baseType ref="1383522"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2986">
            <name>TypeName&amp;&amp;</name>
            <content>
                <baseType ref="1383522"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383523">
            <name>TypeName*</name>
            <content>
                <baseType ref="1383522"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2190">
            <name>U&amp;&amp;</name>
            <content>
                <baseType ref="1378334"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2171">
            <name>U&amp;&amp;</name>
            <content>
                <baseType ref="1378322"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2179">
            <name>U&amp;&amp;</name>
            <content>
                <baseType ref="1378331"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="1383413">
            <name>UCharType</name>
        </type>
        <type derived="true" id="type.1385330">
            <name>UCharType&amp;</name>
            <content>
                <baseType ref="1383413"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383414">
            <name>UCharType*</name>
            <content>
                <baseType ref="1383413"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383425">
            <name>UIntType</name>
        </type>
        <type derived="true" id="type.1385336">
            <name>UIntType&amp;</name>
            <content>
                <baseType ref="1383425"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383426">
            <name>UIntType*</name>
            <content>
                <baseType ref="1383425"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383429">
            <name>ULongType</name>
        </type>
        <type derived="true" id="type.1385338">
            <name>ULongType&amp;</name>
            <content>
                <baseType ref="1383429"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383430">
            <name>ULongType*</name>
            <content>
                <baseType ref="1383429"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383421">
            <name>UShortType</name>
        </type>
        <type derived="true" id="type.1385334">
            <name>UShortType&amp;</name>
            <content>
                <baseType ref="1383421"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383422">
            <name>UShortType*</name>
            <content>
                <baseType ref="1383421"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1607" specialization="true">
            <name>UnaryFun&lt;Argument, bool></name>
            <content>
                <primaryType ref="1378948"/>
                <argumentType ref="1378196"/>
                <argumentType ref="type.1377785"/>
            </content>
        </type>
        <type derived="true" id="type.1608">
            <name>UnaryFun&lt;Argument, bool>*</name>
            <content>
                <baseType ref="type.1607"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1778" specialization="true">
            <name>UnaryFun&lt;Pair&lt;K, T>, K></name>
            <content>
                <primaryType ref="1378948"/>
                <argumentType ref="type.1769"/>
                <argumentType ref="1378253"/>
            </content>
        </type>
        <type derived="true" id="type.1779">
            <name>UnaryFun&lt;Pair&lt;K, T>, K>*</name>
            <content>
                <baseType ref="type.1778"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.2119" specialization="true">
            <name>UnaryFun&lt;Pair&lt;Key, Value>, Key></name>
            <content>
                <primaryType ref="1378948"/>
                <argumentType ref="type.2110"/>
                <argumentType ref="1378309"/>
            </content>
        </type>
        <type derived="true" id="type.2120">
            <name>UnaryFun&lt;Pair&lt;Key, Value>, Key>*</name>
            <content>
                <baseType ref="type.2119"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.2180" specialization="true">
            <name>UnaryFun&lt;Pair&lt;T, U>, T></name>
            <content>
                <primaryType ref="1378948"/>
                <argumentType ref="type.2174"/>
                <argumentType ref="1378330"/>
            </content>
        </type>
        <type derived="true" id="type.2181">
            <name>UnaryFun&lt;Pair&lt;T, U>, T>*</name>
            <content>
                <baseType ref="type.2180"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.2191" specialization="true">
            <name>UnaryFun&lt;Pair&lt;T, U>, U></name>
            <content>
                <primaryType ref="1378948"/>
                <argumentType ref="type.2185"/>
                <argumentType ref="1378334"/>
            </content>
        </type>
        <type derived="true" id="type.2192">
            <name>UnaryFun&lt;Pair&lt;T, U>, U>*</name>
            <content>
                <baseType ref="type.2191"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583" specialization="true">
            <name>UnaryFun&lt;T, T></name>
            <content>
                <primaryType ref="1378948"/>
                <argumentType ref="1378185"/>
                <argumentType ref="1378185"/>
            </content>
        </type>
        <type id="type.1617" specialization="true">
            <name>UnaryFun&lt;T, T></name>
            <content>
                <primaryType ref="1378948"/>
                <argumentType ref="1378203"/>
                <argumentType ref="1378203"/>
            </content>
        </type>
        <type id="type.1753" specialization="true">
            <name>UnaryFun&lt;T, T></name>
            <content>
                <primaryType ref="1378948"/>
                <argumentType ref="1378247"/>
                <argumentType ref="1378247"/>
            </content>
        </type>
        <type id="type.1853" specialization="true">
            <name>UnaryFun&lt;T, T></name>
            <content>
                <primaryType ref="1378948"/>
                <argumentType ref="1378262"/>
                <argumentType ref="1378262"/>
            </content>
        </type>
        <type id="type.2305" specialization="true">
            <name>UnaryFun&lt;T, T></name>
            <content>
                <primaryType ref="1378948"/>
                <argumentType ref="1378383"/>
                <argumentType ref="1378383"/>
            </content>
        </type>
        <type derived="true" id="type.1754">
            <name>UnaryFun&lt;T, T>*</name>
            <content>
                <baseType ref="type.1753"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1854">
            <name>UnaryFun&lt;T, T>*</name>
            <content>
                <baseType ref="type.1853"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1618">
            <name>UnaryFun&lt;T, T>*</name>
            <content>
                <baseType ref="type.1617"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2306">
            <name>UnaryFun&lt;T, T>*</name>
            <content>
                <baseType ref="type.2305"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584">
            <name>UnaryFun&lt;T, T>*</name>
            <content>
                <baseType ref="type.1583"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1926" specialization="true">
            <name>UnaryFun&lt;T, ulong></name>
            <content>
                <primaryType ref="1378948"/>
                <argumentType ref="1378270"/>
                <argumentType ref="type.1377793"/>
            </content>
        </type>
        <type derived="true" id="type.1927">
            <name>UnaryFun&lt;T, ulong>*</name>
            <content>
                <baseType ref="type.1926"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1733" specialization="true">
            <name>UnaryFun&lt;bool, bool></name>
            <content>
                <primaryType ref="1378948"/>
                <argumentType ref="type.1377785"/>
                <argumentType ref="type.1377785"/>
            </content>
        </type>
        <type derived="true" id="type.1734">
            <name>UnaryFun&lt;bool, bool>*</name>
            <content>
                <baseType ref="type.1733"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383460">
            <name>UnaryMinus</name>
        </type>
        <type derived="true" id="type.1385358">
            <name>UnaryMinus&amp;</name>
            <content>
                <baseType ref="1383460"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2968">
            <name>UnaryMinus&amp;&amp;</name>
            <content>
                <baseType ref="1383460"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383461">
            <name>UnaryMinus*</name>
            <content>
                <baseType ref="1383460"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383458">
            <name>UnaryPlus</name>
        </type>
        <type derived="true" id="type.1385357">
            <name>UnaryPlus&amp;</name>
            <content>
                <baseType ref="1383458"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2965">
            <name>UnaryPlus&amp;&amp;</name>
            <content>
                <baseType ref="1383458"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383459">
            <name>UnaryPlus*</name>
            <content>
                <baseType ref="1383458"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1732" specialization="true">
            <name>UnaryPred&lt;bool></name>
            <content>
                <primaryType ref="1379008"/>
                <argumentType ref="type.1377785"/>
            </content>
        </type>
        <type derived="true" id="type.1735">
            <name>UnaryPred&lt;bool>*</name>
            <content>
                <baseType ref="type.1732"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.2151" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="type.2132"/>
            </content>
        </type>
        <type derived="true" id="type.2159">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;</name>
            <content>
                <baseType ref="type.2151"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2156">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.2151"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2152">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>*</name>
            <content>
                <baseType ref="type.2151"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.2338" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="type.2318"/>
            </content>
        </type>
        <type id="type.1380247" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="type.1380227"/>
            </content>
        </type>
        <type id="type.1380197" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="type.1380177"/>
            </content>
        </type>
        <type id="type.1380247" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="type.1380227"/>
            </content>
        </type>
        <type derived="true" id="type.2346">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>>&amp;</name>
            <content>
                <baseType ref="type.2338"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2343">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>>&amp;&amp;</name>
            <content>
                <baseType ref="type.2338"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2339">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>>*</name>
            <content>
                <baseType ref="type.2338"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.2290" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;ValueType>></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="type.2269"/>
            </content>
        </type>
        <type derived="true" id="type.2298">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;ValueType>>&amp;</name>
            <content>
                <baseType ref="type.2290"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2295">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;ValueType>>&amp;&amp;</name>
            <content>
                <baseType ref="type.2290"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2291">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;ValueType>>*</name>
            <content>
                <baseType ref="type.2290"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1378640" specialization="true">
            <name>UniquePtr&lt;System.IO.ByteStream></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="1377995"/>
            </content>
        </type>
        <type id="type.1378790" specialization="true">
            <name>UniquePtr&lt;System.IO.InputStream></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="1378391"/>
            </content>
        </type>
        <type id="type.1378780" specialization="true">
            <name>UniquePtr&lt;System.IO.OutputStream></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="1378395"/>
            </content>
        </type>
        <type id="type.1385223" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="1383580"/>
            </content>
        </type>
        <type derived="true" id="type.1385232">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;</name>
            <content>
                <baseType ref="type.1385223"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385228">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;&amp;</name>
            <content>
                <baseType ref="type.1385223"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385224">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*</name>
            <content>
                <baseType ref="type.1385223"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385448">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*&amp;&amp;</name>
            <content>
                <baseType ref="type.1385223"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1385282" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.Catch></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="1383592"/>
            </content>
        </type>
        <type derived="true" id="type.1385291">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;</name>
            <content>
                <baseType ref="type.1385282"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385287">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;&amp;</name>
            <content>
                <baseType ref="type.1385282"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385283">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*</name>
            <content>
                <baseType ref="type.1385282"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385464">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*&amp;&amp;</name>
            <content>
                <baseType ref="type.1385282"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1385269" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.CompoundStatement></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="1383548"/>
            </content>
        </type>
        <type derived="true" id="type.1385278">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.CompoundStatement>&amp;</name>
            <content>
                <baseType ref="type.1385269"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385274">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.CompoundStatement>&amp;&amp;</name>
            <content>
                <baseType ref="type.1385269"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385270">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.CompoundStatement>*</name>
            <content>
                <baseType ref="type.1385269"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1385253" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.DefaultStatement></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="1383582"/>
            </content>
        </type>
        <type derived="true" id="type.1385262">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.DefaultStatement>&amp;</name>
            <content>
                <baseType ref="type.1385253"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385258">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.DefaultStatement>&amp;&amp;</name>
            <content>
                <baseType ref="type.1385253"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385254">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.DefaultStatement>*</name>
            <content>
                <baseType ref="type.1385253"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1385095" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="1383437"/>
            </content>
        </type>
        <type derived="true" id="type.1385102">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;</name>
            <content>
                <baseType ref="type.1385095"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385100">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;&amp;</name>
            <content>
                <baseType ref="type.1385095"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385096">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*</name>
            <content>
                <baseType ref="type.1385095"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385423">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*&amp;&amp;</name>
            <content>
                <baseType ref="type.1385095"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1385177" specialization="true">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.Statement></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="1383544"/>
            </content>
        </type>
        <type derived="true" id="type.1385184">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;</name>
            <content>
                <baseType ref="type.1385177"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385182">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;&amp;</name>
            <content>
                <baseType ref="type.1385177"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385178">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*</name>
            <content>
                <baseType ref="type.1385177"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385436">
            <name>UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*&amp;&amp;</name>
            <content>
                <baseType ref="type.1385177"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1381318" specialization="true">
            <name>UniquePtr&lt;System.Unicode.AgeTable></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="1378447"/>
            </content>
        </type>
        <type id="type.1382214" specialization="true">
            <name>UniquePtr&lt;System.Unicode.AliasTypeTable></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="1378496"/>
            </content>
        </type>
        <type id="type.1381856" specialization="true">
            <name>UniquePtr&lt;System.Unicode.BidiClassTable></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="1378478"/>
            </content>
        </type>
        <type id="type.1382035" specialization="true">
            <name>UniquePtr&lt;System.Unicode.BidiPairedBracketTypeTable></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="1378487"/>
            </content>
        </type>
        <type id="type.1380800" specialization="true">
            <name>UniquePtr&lt;System.Unicode.BinaryPropertyTable></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="1378424"/>
            </content>
        </type>
        <type id="type.1380958" specialization="true">
            <name>UniquePtr&lt;System.Unicode.BlockTable></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="1378431"/>
            </content>
        </type>
        <type id="type.1382268" specialization="true">
            <name>UniquePtr&lt;System.Unicode.CharacterInfo></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="1378460"/>
            </content>
        </type>
        <type id="type.1382357" specialization="true">
            <name>UniquePtr&lt;System.Unicode.CharacterInfoPage></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="1378508"/>
            </content>
        </type>
        <type id="type.1382348" specialization="true">
            <name>UniquePtr&lt;System.Unicode.CharacterTable></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="1378520"/>
            </content>
        </type>
        <type id="type.1382297" specialization="true">
            <name>UniquePtr&lt;System.Unicode.ExtendedCharacterInfo></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="1378504"/>
            </content>
        </type>
        <type id="type.1382386" specialization="true">
            <name>UniquePtr&lt;System.Unicode.ExtendedCharacterInfoHeader></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="1378516"/>
            </content>
        </type>
        <type id="type.1382395" specialization="true">
            <name>UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="1378512"/>
            </content>
        </type>
        <type id="type.1381139" specialization="true">
            <name>UniquePtr&lt;System.Unicode.GeneralCategoryTable></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="1378438"/>
            </content>
        </type>
        <type id="type.1381699" specialization="true">
            <name>UniquePtr&lt;System.Unicode.NumericTypeTable></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="1378469"/>
            </content>
        </type>
        <type id="type.1381497" specialization="true">
            <name>UniquePtr&lt;System.Unicode.ScriptTable></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="1378456"/>
            </content>
        </type>
        <type id="type.1382446" specialization="true">
            <name>UniquePtr&lt;T></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="1378525"/>
            </content>
        </type>
        <type id="type.1382435" specialization="true">
            <name>UniquePtr&lt;T></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="1378524"/>
            </content>
        </type>
        <type id="type.1382424" specialization="true">
            <name>UniquePtr&lt;T></name>
            <content>
                <primaryType ref="1382424"/>
                <argumentType ref="1378523"/>
            </content>
        </type>
        <type derived="true" id="type.2876">
            <name>UniquePtr&lt;T>&amp;</name>
            <content>
                <baseType ref="type.1382424"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2872">
            <name>UniquePtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.1382424"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2867">
            <name>UniquePtr&lt;T>*</name>
            <content>
                <baseType ref="type.1382424"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2160">
            <name>Value&amp;</name>
            <content>
                <baseType ref="1378310"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2115">
            <name>Value&amp;&amp;</name>
            <content>
                <baseType ref="1378310"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1950">
            <name>ValueType&amp;</name>
            <content>
                <baseType ref="1378284"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2273">
            <name>ValueType&amp;</name>
            <content>
                <baseType ref="1378378"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2277">
            <name>ValueType*</name>
            <content>
                <baseType ref="1378378"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1951">
            <name>ValueType*</name>
            <content>
                <baseType ref="1378284"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383608">
            <name>Visitor</name>
        </type>
        <type derived="true" id="type.1385089">
            <name>Visitor&amp;</name>
            <content>
                <baseType ref="1383608"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383609">
            <name>Visitor*</name>
            <content>
                <baseType ref="1383608"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383435">
            <name>VoidType</name>
        </type>
        <type derived="true" id="type.1385341">
            <name>VoidType&amp;</name>
            <content>
                <baseType ref="1383435"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383436">
            <name>VoidType*</name>
            <content>
                <baseType ref="1383435"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383411">
            <name>WCharType</name>
        </type>
        <type derived="true" id="type.1385329">
            <name>WCharType&amp;</name>
            <content>
                <baseType ref="1383411"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383412">
            <name>WCharType*</name>
            <content>
                <baseType ref="1383411"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1383554">
            <name>WhileStatement</name>
        </type>
        <type derived="true" id="type.1385393">
            <name>WhileStatement&amp;</name>
            <content>
                <baseType ref="1383554"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383555">
            <name>WhileStatement*</name>
            <content>
                <baseType ref="1383554"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.1377785">
            <name>bool</name>
        </type>
        <type derived="true" id="type.2954">
            <name>const AddressOf</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383452"/>
            </content>
        </type>
        <type derived="true" id="type.2955">
            <name>const AddressOf&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383452"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3031">
            <name>const AssertStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383596"/>
            </content>
        </type>
        <type derived="true" id="type.3032">
            <name>const AssertStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383596"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2908">
            <name>const BinaryReader</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1377984"/>
            </content>
        </type>
        <type derived="true" id="type.2909">
            <name>const BinaryReader&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1377984"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2910">
            <name>const BinaryWriter</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1377986"/>
            </content>
        </type>
        <type derived="true" id="type.2911">
            <name>const BinaryWriter&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1377986"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1736">
            <name>const BitAnd&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379175"/>
            </content>
        </type>
        <type derived="true" id="type.1737">
            <name>const BitAnd&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379175"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1751">
            <name>const BitNot&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379196"/>
            </content>
        </type>
        <type derived="true" id="type.1752">
            <name>const BitNot&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379196"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1741">
            <name>const BitOr&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379182"/>
            </content>
        </type>
        <type derived="true" id="type.1742">
            <name>const BitOr&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379182"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1746">
            <name>const BitXor&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379189"/>
            </content>
        </type>
        <type derived="true" id="type.1747">
            <name>const BitXor&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379189"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2929">
            <name>const Bitset</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1377988"/>
            </content>
        </type>
        <type derived="true" id="type.1838">
            <name>const Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379313"/>
            </content>
        </type>
        <type derived="true" id="type.1793">
            <name>const Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1791"/>
            </content>
        </type>
        <type derived="true" id="type.1794">
            <name>const Bucket&lt;Pair&lt;K, T>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1791"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1812">
            <name>const Bucket&lt;Pair&lt;K, T>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1791"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1813">
            <name>const Bucket&lt;Pair&lt;K, T>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1791"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2639">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, Age*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381276"/>
            </content>
        </type>
        <type derived="true" id="type.2804">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382172"/>
            </content>
        </type>
        <type derived="true" id="type.2738">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381814"/>
            </content>
        </type>
        <type derived="true" id="type.2771">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381993"/>
            </content>
        </type>
        <type derived="true" id="type.2540">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380736"/>
            </content>
        </type>
        <type derived="true" id="type.2573">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, Block*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380916"/>
            </content>
        </type>
        <type derived="true" id="type.2606">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381097"/>
            </content>
        </type>
        <type derived="true" id="type.2705">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381635"/>
            </content>
        </type>
        <type derived="true" id="type.2672">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, Script*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381455"/>
            </content>
        </type>
        <type derived="true" id="type.2626">
            <name>const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381211"/>
            </content>
        </type>
        <type derived="true" id="type.2791">
            <name>const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382107"/>
            </content>
        </type>
        <type derived="true" id="type.2725">
            <name>const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381749"/>
            </content>
        </type>
        <type derived="true" id="type.2758">
            <name>const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381928"/>
            </content>
        </type>
        <type derived="true" id="type.2526">
            <name>const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380657"/>
            </content>
        </type>
        <type derived="true" id="type.2560">
            <name>const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380851"/>
            </content>
        </type>
        <type derived="true" id="type.2593">
            <name>const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381032"/>
            </content>
        </type>
        <type derived="true" id="type.2692">
            <name>const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381570"/>
            </content>
        </type>
        <type derived="true" id="type.2659">
            <name>const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381390"/>
            </content>
        </type>
        <type derived="true" id="type.1930">
            <name>const Bucket&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379511"/>
            </content>
        </type>
        <type derived="true" id="type.1940">
            <name>const Bucket&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1938"/>
            </content>
        </type>
        <type derived="true" id="type.1913">
            <name>const Bucket&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379441"/>
            </content>
        </type>
        <type derived="true" id="type.1946">
            <name>const Bucket&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379534"/>
            </content>
        </type>
        <type derived="true" id="type.1869">
            <name>const Bucket&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1867"/>
            </content>
        </type>
        <type derived="true" id="type.1931">
            <name>const Bucket&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379511"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1941">
            <name>const Bucket&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1938"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1870">
            <name>const Bucket&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1867"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1888">
            <name>const Bucket&lt;T>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1867"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1889">
            <name>const Bucket&lt;T>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1867"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1958">
            <name>const Bucket&lt;ValueType></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1956"/>
            </content>
        </type>
        <type derived="true" id="type.1959">
            <name>const Bucket&lt;ValueType>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1956"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1979">
            <name>const Bucket&lt;ValueType>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1956"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1980">
            <name>const Bucket&lt;ValueType>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1956"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2912">
            <name>const BufferedByteStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1377992"/>
            </content>
        </type>
        <type derived="true" id="type.2913">
            <name>const ByteStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1377995"/>
            </content>
        </type>
        <type derived="true" id="type.1385231">
            <name>const CaseStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383580"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385229">
            <name>const CaseStatement*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383580"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385290">
            <name>const Catch&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383592"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385288">
            <name>const Catch*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383592"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2396">
            <name>const CharT&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378404"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2397">
            <name>const CharT*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378404"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2933">
            <name>const CodeFormatter</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1377997"/>
            </content>
        </type>
        <type derived="true" id="type.2934">
            <name>const CodeFormatter&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1377997"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2969">
            <name>const Complement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383462"/>
            </content>
        </type>
        <type derived="true" id="type.2970">
            <name>const Complement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383462"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385277">
            <name>const CompoundStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383548"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385275">
            <name>const CompoundStatement*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383548"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3034">
            <name>const Const</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383598"/>
            </content>
        </type>
        <type derived="true" id="type.3035">
            <name>const Const&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383598"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2987">
            <name>const Construct</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383526"/>
            </content>
        </type>
        <type derived="true" id="type.2988">
            <name>const Construct&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383526"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2936">
            <name>const ConversionException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378127"/>
            </content>
        </type>
        <type derived="true" id="type.2937">
            <name>const ConversionException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378127"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385261">
            <name>const DefaultStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383582"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385259">
            <name>const DefaultStatement*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383582"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3010">
            <name>const DeleteStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383568"/>
            </content>
        </type>
        <type derived="true" id="type.3011">
            <name>const DeleteStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383568"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2951">
            <name>const Deref</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383450"/>
            </content>
        </type>
        <type derived="true" id="type.2952">
            <name>const Deref&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383450"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3013">
            <name>const DestroyStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383570"/>
            </content>
        </type>
        <type derived="true" id="type.3014">
            <name>const DestroyStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383570"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1597">
            <name>const Divides&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378994"/>
            </content>
        </type>
        <type derived="true" id="type.1598">
            <name>const Divides&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378994"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2946">
            <name>const DomObject</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383437"/>
            </content>
        </type>
        <type derived="true" id="type.1385086">
            <name>const DomObject&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383437"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383440">
            <name>const DomObject*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383437"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2535">
            <name>const EqualTo&lt;String&lt;char>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380704"/>
            </content>
        </type>
        <type derived="true" id="type.2621">
            <name>const EqualTo&lt;System.Unicode.AgeId></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381177"/>
            </content>
        </type>
        <type derived="true" id="type.2786">
            <name>const EqualTo&lt;System.Unicode.AliasTypeId></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382073"/>
            </content>
        </type>
        <type derived="true" id="type.2720">
            <name>const EqualTo&lt;System.Unicode.BidiClassId></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381715"/>
            </content>
        </type>
        <type derived="true" id="type.2753">
            <name>const EqualTo&lt;System.Unicode.BidiPairedBracketTypeId></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381894"/>
            </content>
        </type>
        <type derived="true" id="type.2521">
            <name>const EqualTo&lt;System.Unicode.BinaryPropertyId></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380623"/>
            </content>
        </type>
        <type derived="true" id="type.2555">
            <name>const EqualTo&lt;System.Unicode.BlockId></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380817"/>
            </content>
        </type>
        <type derived="true" id="type.2588">
            <name>const EqualTo&lt;System.Unicode.GeneralCategoryId></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380998"/>
            </content>
        </type>
        <type derived="true" id="type.2687">
            <name>const EqualTo&lt;System.Unicode.NumericTypeId></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381536"/>
            </content>
        </type>
        <type derived="true" id="type.2654">
            <name>const EqualTo&lt;System.Unicode.ScriptId></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381356"/>
            </content>
        </type>
        <type derived="true" id="type.1629">
            <name>const EqualTo&lt;T, U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379040"/>
            </content>
        </type>
        <type derived="true" id="type.1630">
            <name>const EqualTo&lt;T, U>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379040"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1620">
            <name>const EqualTo&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379029"/>
            </content>
        </type>
        <type derived="true" id="type.1621">
            <name>const EqualTo&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379029"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2938">
            <name>const Exception</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378137"/>
            </content>
        </type>
        <type derived="true" id="type.1383445">
            <name>const Expression*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383442"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3016">
            <name>const ExpressionStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383574"/>
            </content>
        </type>
        <type derived="true" id="type.3017">
            <name>const ExpressionStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383574"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2914">
            <name>const FileByteStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378142"/>
            </content>
        </type>
        <type derived="true" id="type.2915">
            <name>const FileSystemException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378147"/>
            </content>
        </type>
        <type derived="true" id="type.2916">
            <name>const FileSystemException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378147"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1559">
            <name>const ForwardList&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378892"/>
            </content>
        </type>
        <type derived="true" id="type.1567">
            <name>const ForwardList&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378920"/>
            </content>
        </type>
        <type derived="true" id="type.1533">
            <name>const ForwardList&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378864"/>
            </content>
        </type>
        <type derived="true" id="type.1557">
            <name>const ForwardList&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378864"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1534">
            <name>const ForwardList&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378864"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1561">
            <name>const ForwardListNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378902"/>
            </content>
        </type>
        <type derived="true" id="type.1513">
            <name>const ForwardListNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378832"/>
            </content>
        </type>
        <type derived="true" id="type.1543">
            <name>const ForwardListNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1541"/>
            </content>
        </type>
        <type derived="true" id="type.1569">
            <name>const ForwardListNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378930"/>
            </content>
        </type>
        <type derived="true" id="type.1522">
            <name>const ForwardListNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1520"/>
            </content>
        </type>
        <type derived="true" id="type.1530">
            <name>const ForwardListNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378855"/>
            </content>
        </type>
        <type derived="true" id="type.1544">
            <name>const ForwardListNode&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1541"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1523">
            <name>const ForwardListNode&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1520"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1514">
            <name>const ForwardListNode&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378832"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1529">
            <name>const ForwardListNodeIterator&lt;T, R, P></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378851"/>
            </content>
        </type>
        <type derived="true" id="type.1518">
            <name>const ForwardListNodeIterator&lt;T, R, P></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378838"/>
            </content>
        </type>
        <type derived="true" id="type.1526">
            <name>const ForwardListNodeIterator&lt;T, R, P>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378838"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1519">
            <name>const ForwardListNodeIterator&lt;T, R, P>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378838"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1572">
            <name>const ForwardListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378939"/>
            </content>
        </type>
        <type derived="true" id="type.1564">
            <name>const ForwardListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378911"/>
            </content>
        </type>
        <type derived="true" id="type.1552">
            <name>const ForwardListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1550"/>
            </content>
        </type>
        <type derived="true" id="type.1565">
            <name>const ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378911"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1554">
            <name>const ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1550"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1573">
            <name>const ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378939"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1553">
            <name>const ForwardListNodeIterator&lt;T, T&amp;, T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1550"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1539">
            <name>const ForwardListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1537"/>
            </content>
        </type>
        <type derived="true" id="type.1560">
            <name>const ForwardListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378898"/>
            </content>
        </type>
        <type derived="true" id="type.1568">
            <name>const ForwardListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378926"/>
            </content>
        </type>
        <type derived="true" id="type.1546">
            <name>const ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1537"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1562">
            <name>const ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378898"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1570">
            <name>const ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378926"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1540">
            <name>const ForwardListNodeIterator&lt;T, const T&amp;, const T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1537"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3022">
            <name>const GotoCaseStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383586"/>
            </content>
        </type>
        <type derived="true" id="type.3023">
            <name>const GotoCaseStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383586"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3007">
            <name>const GotoStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383564"/>
            </content>
        </type>
        <type derived="true" id="type.3008">
            <name>const GotoStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383564"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1680">
            <name>const Greater&lt;T, U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379103"/>
            </content>
        </type>
        <type derived="true" id="type.1681">
            <name>const Greater&lt;T, U>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379103"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1671">
            <name>const Greater&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379092"/>
            </content>
        </type>
        <type derived="true" id="type.1672">
            <name>const Greater&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379092"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1714">
            <name>const GreaterOrEqualTo&lt;T, U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379145"/>
            </content>
        </type>
        <type derived="true" id="type.1715">
            <name>const GreaterOrEqualTo&lt;T, U>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379145"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1705">
            <name>const GreaterOrEqualTo&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379134"/>
            </content>
        </type>
        <type derived="true" id="type.1706">
            <name>const GreaterOrEqualTo&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379134"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1767">
            <name>const HashMap&lt;K, T, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379217"/>
            </content>
        </type>
        <type derived="true" id="type.1834">
            <name>const HashMap&lt;K, T, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379287"/>
            </content>
        </type>
        <type derived="true" id="type.1768">
            <name>const HashMap&lt;K, T, H, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379217"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2635">
            <name>const HashMap&lt;String&lt;char>, Age*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381254"/>
            </content>
        </type>
        <type derived="true" id="type.2800">
            <name>const HashMap&lt;String&lt;char>, AliasType*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382150"/>
            </content>
        </type>
        <type derived="true" id="type.2734">
            <name>const HashMap&lt;String&lt;char>, BidiClass*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381792"/>
            </content>
        </type>
        <type derived="true" id="type.2767">
            <name>const HashMap&lt;String&lt;char>, BidiPairedBracketType*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381971"/>
            </content>
        </type>
        <type derived="true" id="type.2536">
            <name>const HashMap&lt;String&lt;char>, BinaryProperty*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380714"/>
            </content>
        </type>
        <type derived="true" id="type.2569">
            <name>const HashMap&lt;String&lt;char>, Block*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380894"/>
            </content>
        </type>
        <type derived="true" id="type.2602">
            <name>const HashMap&lt;String&lt;char>, GeneralCategory*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381075"/>
            </content>
        </type>
        <type derived="true" id="type.2701">
            <name>const HashMap&lt;String&lt;char>, NumericType*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381613"/>
            </content>
        </type>
        <type derived="true" id="type.2668">
            <name>const HashMap&lt;String&lt;char>, Script*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381433"/>
            </content>
        </type>
        <type derived="true" id="type.2622">
            <name>const HashMap&lt;System.Unicode.AgeId, Age*, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381187"/>
            </content>
        </type>
        <type derived="true" id="type.2787">
            <name>const HashMap&lt;System.Unicode.AliasTypeId, AliasType*, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382083"/>
            </content>
        </type>
        <type derived="true" id="type.2721">
            <name>const HashMap&lt;System.Unicode.BidiClassId, BidiClass*, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381725"/>
            </content>
        </type>
        <type derived="true" id="type.2754">
            <name>const HashMap&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381904"/>
            </content>
        </type>
        <type derived="true" id="type.2522">
            <name>const HashMap&lt;System.Unicode.BinaryPropertyId, BinaryProperty*, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380633"/>
            </content>
        </type>
        <type derived="true" id="type.2556">
            <name>const HashMap&lt;System.Unicode.BlockId, Block*, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380827"/>
            </content>
        </type>
        <type derived="true" id="type.2589">
            <name>const HashMap&lt;System.Unicode.GeneralCategoryId, GeneralCategory*, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381008"/>
            </content>
        </type>
        <type derived="true" id="type.2688">
            <name>const HashMap&lt;System.Unicode.NumericTypeId, NumericType*, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381546"/>
            </content>
        </type>
        <type derived="true" id="type.2655">
            <name>const HashMap&lt;System.Unicode.ScriptId, Script*, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381366"/>
            </content>
        </type>
        <type derived="true" id="type.1909">
            <name>const HashSet&lt;T, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379420"/>
            </content>
        </type>
        <type derived="true" id="type.1848">
            <name>const HashSet&lt;T, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379357"/>
            </content>
        </type>
        <type derived="true" id="type.1849">
            <name>const HashSet&lt;T, H, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379357"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1784">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1782"/>
            </content>
        </type>
        <type derived="true" id="type.1836">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379304"/>
            </content>
        </type>
        <type derived="true" id="type.1802">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1782"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1785">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1782"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1948">
            <name>const Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379542"/>
            </content>
        </type>
        <type derived="true" id="type.1968">
            <name>const Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379542"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1949">
            <name>const Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379542"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2637">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Age*>, SelectFirst&lt;String&lt;char>, Age*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381267"/>
            </content>
        </type>
        <type derived="true" id="type.2802">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, AliasType*>, SelectFirst&lt;String&lt;char>, AliasType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382163"/>
            </content>
        </type>
        <type derived="true" id="type.2736">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiClass*>, SelectFirst&lt;String&lt;char>, BidiClass*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381805"/>
            </content>
        </type>
        <type derived="true" id="type.2769">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiPairedBracketType*>, SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381984"/>
            </content>
        </type>
        <type derived="true" id="type.2538">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BinaryProperty*>, SelectFirst&lt;String&lt;char>, BinaryProperty*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380727"/>
            </content>
        </type>
        <type derived="true" id="type.2571">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Block*>, SelectFirst&lt;String&lt;char>, Block*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380907"/>
            </content>
        </type>
        <type derived="true" id="type.2604">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, GeneralCategory*>, SelectFirst&lt;String&lt;char>, GeneralCategory*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381088"/>
            </content>
        </type>
        <type derived="true" id="type.2703">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, NumericType*>, SelectFirst&lt;String&lt;char>, NumericType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381626"/>
            </content>
        </type>
        <type derived="true" id="type.2670">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Script*>, SelectFirst&lt;String&lt;char>, Script*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381446"/>
            </content>
        </type>
        <type derived="true" id="type.2624">
            <name>const Hashtable&lt;System.Unicode.AgeId, Pair&lt;System.Unicode.AgeId, Age*>, SelectFirst&lt;System.Unicode.AgeId, Age*>, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381202"/>
            </content>
        </type>
        <type derived="true" id="type.2789">
            <name>const Hashtable&lt;System.Unicode.AliasTypeId, Pair&lt;System.Unicode.AliasTypeId, AliasType*>, SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382098"/>
            </content>
        </type>
        <type derived="true" id="type.2723">
            <name>const Hashtable&lt;System.Unicode.BidiClassId, Pair&lt;System.Unicode.BidiClassId, BidiClass*>, SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381740"/>
            </content>
        </type>
        <type derived="true" id="type.2756">
            <name>const Hashtable&lt;System.Unicode.BidiPairedBracketTypeId, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381919"/>
            </content>
        </type>
        <type derived="true" id="type.2524">
            <name>const Hashtable&lt;System.Unicode.BinaryPropertyId, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380648"/>
            </content>
        </type>
        <type derived="true" id="type.2558">
            <name>const Hashtable&lt;System.Unicode.BlockId, Pair&lt;System.Unicode.BlockId, Block*>, SelectFirst&lt;System.Unicode.BlockId, Block*>, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380842"/>
            </content>
        </type>
        <type derived="true" id="type.2591">
            <name>const Hashtable&lt;System.Unicode.GeneralCategoryId, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381023"/>
            </content>
        </type>
        <type derived="true" id="type.2690">
            <name>const Hashtable&lt;System.Unicode.NumericTypeId, Pair&lt;System.Unicode.NumericTypeId, NumericType*>, SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381561"/>
            </content>
        </type>
        <type derived="true" id="type.2657">
            <name>const Hashtable&lt;System.Unicode.ScriptId, Pair&lt;System.Unicode.ScriptId, Script*>, SelectFirst&lt;System.Unicode.ScriptId, Script*>, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381381"/>
            </content>
        </type>
        <type derived="true" id="type.1859">
            <name>const Hashtable&lt;T, T, Identity&lt;T>, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1857"/>
            </content>
        </type>
        <type derived="true" id="type.1911">
            <name>const Hashtable&lt;T, T, Identity&lt;T>, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379431"/>
            </content>
        </type>
        <type derived="true" id="type.1878">
            <name>const Hashtable&lt;T, T, Identity&lt;T>, H, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1857"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1860">
            <name>const Hashtable&lt;T, T, Identity&lt;T>, H, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1857"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1789">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1787"/>
            </content>
        </type>
        <type derived="true" id="type.1837">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379309"/>
            </content>
        </type>
        <type derived="true" id="type.1806">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1787"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1790">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1787"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1799">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1797"/>
            </content>
        </type>
        <type derived="true" id="type.1839">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379319"/>
            </content>
        </type>
        <type derived="true" id="type.1800">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1797"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2638">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, Age*>, Pair&lt;String&lt;char>, Age*>&amp;, Pair&lt;String&lt;char>, Age*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Age*>, SelectFirst&lt;String&lt;char>, Age*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381272"/>
            </content>
        </type>
        <type derived="true" id="type.2640">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, Age*>, const Pair&lt;String&lt;char>, Age*>&amp;, const Pair&lt;String&lt;char>, Age*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Age*>, SelectFirst&lt;String&lt;char>, Age*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381282"/>
            </content>
        </type>
        <type derived="true" id="type.2803">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, AliasType*>, Pair&lt;String&lt;char>, AliasType*>&amp;, Pair&lt;String&lt;char>, AliasType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, AliasType*>, SelectFirst&lt;String&lt;char>, AliasType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382168"/>
            </content>
        </type>
        <type derived="true" id="type.2805">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, AliasType*>, const Pair&lt;String&lt;char>, AliasType*>&amp;, const Pair&lt;String&lt;char>, AliasType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, AliasType*>, SelectFirst&lt;String&lt;char>, AliasType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382178"/>
            </content>
        </type>
        <type derived="true" id="type.2737">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, BidiClass*>, Pair&lt;String&lt;char>, BidiClass*>&amp;, Pair&lt;String&lt;char>, BidiClass*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiClass*>, SelectFirst&lt;String&lt;char>, BidiClass*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381810"/>
            </content>
        </type>
        <type derived="true" id="type.2739">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, BidiClass*>, const Pair&lt;String&lt;char>, BidiClass*>&amp;, const Pair&lt;String&lt;char>, BidiClass*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiClass*>, SelectFirst&lt;String&lt;char>, BidiClass*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381820"/>
            </content>
        </type>
        <type derived="true" id="type.2770">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>, Pair&lt;String&lt;char>, BidiPairedBracketType*>&amp;, Pair&lt;String&lt;char>, BidiPairedBracketType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiPairedBracketType*>, SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381989"/>
            </content>
        </type>
        <type derived="true" id="type.2772">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>, const Pair&lt;String&lt;char>, BidiPairedBracketType*>&amp;, const Pair&lt;String&lt;char>, BidiPairedBracketType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiPairedBracketType*>, SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381999"/>
            </content>
        </type>
        <type derived="true" id="type.2539">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, BinaryProperty*>, Pair&lt;String&lt;char>, BinaryProperty*>&amp;, Pair&lt;String&lt;char>, BinaryProperty*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BinaryProperty*>, SelectFirst&lt;String&lt;char>, BinaryProperty*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380732"/>
            </content>
        </type>
        <type derived="true" id="type.2541">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, BinaryProperty*>, const Pair&lt;String&lt;char>, BinaryProperty*>&amp;, const Pair&lt;String&lt;char>, BinaryProperty*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BinaryProperty*>, SelectFirst&lt;String&lt;char>, BinaryProperty*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380742"/>
            </content>
        </type>
        <type derived="true" id="type.2572">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, Block*>, Pair&lt;String&lt;char>, Block*>&amp;, Pair&lt;String&lt;char>, Block*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Block*>, SelectFirst&lt;String&lt;char>, Block*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380912"/>
            </content>
        </type>
        <type derived="true" id="type.2574">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, Block*>, const Pair&lt;String&lt;char>, Block*>&amp;, const Pair&lt;String&lt;char>, Block*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Block*>, SelectFirst&lt;String&lt;char>, Block*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380922"/>
            </content>
        </type>
        <type derived="true" id="type.2605">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, GeneralCategory*>, Pair&lt;String&lt;char>, GeneralCategory*>&amp;, Pair&lt;String&lt;char>, GeneralCategory*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, GeneralCategory*>, SelectFirst&lt;String&lt;char>, GeneralCategory*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381093"/>
            </content>
        </type>
        <type derived="true" id="type.2607">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, GeneralCategory*>, const Pair&lt;String&lt;char>, GeneralCategory*>&amp;, const Pair&lt;String&lt;char>, GeneralCategory*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, GeneralCategory*>, SelectFirst&lt;String&lt;char>, GeneralCategory*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381103"/>
            </content>
        </type>
        <type derived="true" id="type.2704">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, NumericType*>, Pair&lt;String&lt;char>, NumericType*>&amp;, Pair&lt;String&lt;char>, NumericType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, NumericType*>, SelectFirst&lt;String&lt;char>, NumericType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381631"/>
            </content>
        </type>
        <type derived="true" id="type.2706">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, NumericType*>, const Pair&lt;String&lt;char>, NumericType*>&amp;, const Pair&lt;String&lt;char>, NumericType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, NumericType*>, SelectFirst&lt;String&lt;char>, NumericType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381641"/>
            </content>
        </type>
        <type derived="true" id="type.2671">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, Script*>, Pair&lt;String&lt;char>, Script*>&amp;, Pair&lt;String&lt;char>, Script*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Script*>, SelectFirst&lt;String&lt;char>, Script*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381451"/>
            </content>
        </type>
        <type derived="true" id="type.2673">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, Script*>, const Pair&lt;String&lt;char>, Script*>&amp;, const Pair&lt;String&lt;char>, Script*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Script*>, SelectFirst&lt;String&lt;char>, Script*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381461"/>
            </content>
        </type>
        <type derived="true" id="type.2625">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.AgeId, Age*>, Pair&lt;System.Unicode.AgeId, Age*>&amp;, Pair&lt;System.Unicode.AgeId, Age*>*, Hashtable&lt;System.Unicode.AgeId, Pair&lt;System.Unicode.AgeId, Age*>, SelectFirst&lt;System.Unicode.AgeId, Age*>, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381207"/>
            </content>
        </type>
        <type derived="true" id="type.2627">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.AgeId, Age*>, const Pair&lt;System.Unicode.AgeId, Age*>&amp;, const Pair&lt;System.Unicode.AgeId, Age*>*, Hashtable&lt;System.Unicode.AgeId, Pair&lt;System.Unicode.AgeId, Age*>, SelectFirst&lt;System.Unicode.AgeId, Age*>, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381217"/>
            </content>
        </type>
        <type derived="true" id="type.2790">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>, Pair&lt;System.Unicode.AliasTypeId, AliasType*>&amp;, Pair&lt;System.Unicode.AliasTypeId, AliasType*>*, Hashtable&lt;System.Unicode.AliasTypeId, Pair&lt;System.Unicode.AliasTypeId, AliasType*>, SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382103"/>
            </content>
        </type>
        <type derived="true" id="type.2792">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>, const Pair&lt;System.Unicode.AliasTypeId, AliasType*>&amp;, const Pair&lt;System.Unicode.AliasTypeId, AliasType*>*, Hashtable&lt;System.Unicode.AliasTypeId, Pair&lt;System.Unicode.AliasTypeId, AliasType*>, SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382113"/>
            </content>
        </type>
        <type derived="true" id="type.2724">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>, Pair&lt;System.Unicode.BidiClassId, BidiClass*>&amp;, Pair&lt;System.Unicode.BidiClassId, BidiClass*>*, Hashtable&lt;System.Unicode.BidiClassId, Pair&lt;System.Unicode.BidiClassId, BidiClass*>, SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381745"/>
            </content>
        </type>
        <type derived="true" id="type.2726">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>, const Pair&lt;System.Unicode.BidiClassId, BidiClass*>&amp;, const Pair&lt;System.Unicode.BidiClassId, BidiClass*>*, Hashtable&lt;System.Unicode.BidiClassId, Pair&lt;System.Unicode.BidiClassId, BidiClass*>, SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381755"/>
            </content>
        </type>
        <type derived="true" id="type.2757">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>&amp;, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>*, Hashtable&lt;System.Unicode.BidiPairedBracketTypeId, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381924"/>
            </content>
        </type>
        <type derived="true" id="type.2759">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, const Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>&amp;, const Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>*, Hashtable&lt;System.Unicode.BidiPairedBracketTypeId, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381934"/>
            </content>
        </type>
        <type derived="true" id="type.2525">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>&amp;, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>*, Hashtable&lt;System.Unicode.BinaryPropertyId, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380653"/>
            </content>
        </type>
        <type derived="true" id="type.2527">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, const Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>&amp;, const Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>*, Hashtable&lt;System.Unicode.BinaryPropertyId, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380663"/>
            </content>
        </type>
        <type derived="true" id="type.2559">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.BlockId, Block*>, Pair&lt;System.Unicode.BlockId, Block*>&amp;, Pair&lt;System.Unicode.BlockId, Block*>*, Hashtable&lt;System.Unicode.BlockId, Pair&lt;System.Unicode.BlockId, Block*>, SelectFirst&lt;System.Unicode.BlockId, Block*>, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380847"/>
            </content>
        </type>
        <type derived="true" id="type.2561">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.BlockId, Block*>, const Pair&lt;System.Unicode.BlockId, Block*>&amp;, const Pair&lt;System.Unicode.BlockId, Block*>*, Hashtable&lt;System.Unicode.BlockId, Pair&lt;System.Unicode.BlockId, Block*>, SelectFirst&lt;System.Unicode.BlockId, Block*>, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380857"/>
            </content>
        </type>
        <type derived="true" id="type.2592">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>&amp;, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>*, Hashtable&lt;System.Unicode.GeneralCategoryId, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381028"/>
            </content>
        </type>
        <type derived="true" id="type.2594">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, const Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>&amp;, const Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>*, Hashtable&lt;System.Unicode.GeneralCategoryId, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381038"/>
            </content>
        </type>
        <type derived="true" id="type.2691">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>, Pair&lt;System.Unicode.NumericTypeId, NumericType*>&amp;, Pair&lt;System.Unicode.NumericTypeId, NumericType*>*, Hashtable&lt;System.Unicode.NumericTypeId, Pair&lt;System.Unicode.NumericTypeId, NumericType*>, SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381566"/>
            </content>
        </type>
        <type derived="true" id="type.2693">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>, const Pair&lt;System.Unicode.NumericTypeId, NumericType*>&amp;, const Pair&lt;System.Unicode.NumericTypeId, NumericType*>*, Hashtable&lt;System.Unicode.NumericTypeId, Pair&lt;System.Unicode.NumericTypeId, NumericType*>, SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381576"/>
            </content>
        </type>
        <type derived="true" id="type.2658">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.ScriptId, Script*>, Pair&lt;System.Unicode.ScriptId, Script*>&amp;, Pair&lt;System.Unicode.ScriptId, Script*>*, Hashtable&lt;System.Unicode.ScriptId, Pair&lt;System.Unicode.ScriptId, Script*>, SelectFirst&lt;System.Unicode.ScriptId, Script*>, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381386"/>
            </content>
        </type>
        <type derived="true" id="type.2660">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.ScriptId, Script*>, const Pair&lt;System.Unicode.ScriptId, Script*>&amp;, const Pair&lt;System.Unicode.ScriptId, Script*>*, Hashtable&lt;System.Unicode.ScriptId, Pair&lt;System.Unicode.ScriptId, Script*>, SelectFirst&lt;System.Unicode.ScriptId, Script*>, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381396"/>
            </content>
        </type>
        <type derived="true" id="type.1935">
            <name>const HashtableIterator&lt;T, R, P, H></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379517"/>
            </content>
        </type>
        <type derived="true" id="type.1945">
            <name>const HashtableIterator&lt;T, R, P, H></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379529"/>
            </content>
        </type>
        <type derived="true" id="type.1936">
            <name>const HashtableIterator&lt;T, R, P, H>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379517"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1912">
            <name>const HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379437"/>
            </content>
        </type>
        <type derived="true" id="type.1865">
            <name>const HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1863"/>
            </content>
        </type>
        <type derived="true" id="type.1882">
            <name>const HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1863"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1866">
            <name>const HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1863"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1875">
            <name>const HashtableIterator&lt;T, const T&amp;, const T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1873"/>
            </content>
        </type>
        <type derived="true" id="type.1914">
            <name>const HashtableIterator&lt;T, const T&amp;, const T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379447"/>
            </content>
        </type>
        <type derived="true" id="type.1876">
            <name>const HashtableIterator&lt;T, const T&amp;, const T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1873"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1954">
            <name>const HashtableIterator&lt;ValueType, ValueType&amp;, ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1952"/>
            </content>
        </type>
        <type derived="true" id="type.1972">
            <name>const HashtableIterator&lt;ValueType, ValueType&amp;, ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1952"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1955">
            <name>const HashtableIterator&lt;ValueType, ValueType&amp;, ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1952"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1965">
            <name>const HashtableIterator&lt;ValueType, const ValueType&amp;, const ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1963"/>
            </content>
        </type>
        <type derived="true" id="type.1966">
            <name>const HashtableIterator&lt;ValueType, const ValueType&amp;, const ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1963"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2917">
            <name>const IOBuffer</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378149"/>
            </content>
        </type>
        <type derived="true" id="type.2993">
            <name>const Identifier</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383534"/>
            </content>
        </type>
        <type derived="true" id="type.2994">
            <name>const Identifier&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383534"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383537">
            <name>const Identifier*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383534"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2348">
            <name>const Identity&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380161"/>
            </content>
        </type>
        <type derived="true" id="type.1851">
            <name>const Identity&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1850"/>
            </content>
        </type>
        <type derived="true" id="type.2303">
            <name>const Identity&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2302"/>
            </content>
        </type>
        <type derived="true" id="type.1615">
            <name>const Identity&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379022"/>
            </content>
        </type>
        <type derived="true" id="type.1910">
            <name>const Identity&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379424"/>
            </content>
        </type>
        <type derived="true" id="type.2357">
            <name>const Identity&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380211"/>
            </content>
        </type>
        <type derived="true" id="type.2304">
            <name>const Identity&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2302"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1616">
            <name>const Identity&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379022"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1852">
            <name>const Identity&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1850"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2918">
            <name>const InputFileStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378153"/>
            </content>
        </type>
        <type derived="true" id="type.2923">
            <name>const InputStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378391"/>
            </content>
        </type>
        <type derived="true" id="type.2927">
            <name>const InputStringStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378411"/>
            </content>
        </type>
        <type derived="true" id="type.2921">
            <name>const InvalidPathException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378335"/>
            </content>
        </type>
        <type derived="true" id="type.2922">
            <name>const InvalidPathException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378335"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2972">
            <name>const Invoke</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383512"/>
            </content>
        </type>
        <type derived="true" id="type.2973">
            <name>const Invoke&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383512"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1771">
            <name>const K&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378253"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2112">
            <name>const Key&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378309"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2287">
            <name>const KeyType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378377"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1974">
            <name>const KeyType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378283"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1663">
            <name>const Less&lt;T, U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379082"/>
            </content>
        </type>
        <type derived="true" id="type.1664">
            <name>const Less&lt;T, U>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379082"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1654">
            <name>const Less&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379071"/>
            </content>
        </type>
        <type derived="true" id="type.1655">
            <name>const Less&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379071"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1697">
            <name>const LessOrEqualTo&lt;T, U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379124"/>
            </content>
        </type>
        <type derived="true" id="type.1698">
            <name>const LessOrEqualTo&lt;T, U>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379124"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1688">
            <name>const LessOrEqualTo&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379113"/>
            </content>
        </type>
        <type derived="true" id="type.1689">
            <name>const LessOrEqualTo&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379113"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2010">
            <name>const LinkedList&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2008"/>
            </content>
        </type>
        <type derived="true" id="type.2039">
            <name>const LinkedList&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379661"/>
            </content>
        </type>
        <type derived="true" id="type.2065">
            <name>const LinkedList&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379709"/>
            </content>
        </type>
        <type derived="true" id="type.2034">
            <name>const LinkedList&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379635"/>
            </content>
        </type>
        <type derived="true" id="type.2061">
            <name>const LinkedList&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379685"/>
            </content>
        </type>
        <type derived="true" id="type.2030">
            <name>const LinkedList&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2008"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2059">
            <name>const LinkedList&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379661"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2040">
            <name>const LinkedList&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379661"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2011">
            <name>const LinkedList&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2008"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2049">
            <name>const LinkedListNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2047"/>
            </content>
        </type>
        <type derived="true" id="type.2036">
            <name>const LinkedListNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379645"/>
            </content>
        </type>
        <type derived="true" id="type.2020">
            <name>const LinkedListNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2018"/>
            </content>
        </type>
        <type derived="true" id="type.2001">
            <name>const LinkedListNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379596"/>
            </content>
        </type>
        <type derived="true" id="type.2063">
            <name>const LinkedListNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379695"/>
            </content>
        </type>
        <type derived="true" id="type.2067">
            <name>const LinkedListNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379719"/>
            </content>
        </type>
        <type derived="true" id="type.2050">
            <name>const LinkedListNode&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2047"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2021">
            <name>const LinkedListNode&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2018"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2002">
            <name>const LinkedListNode&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379596"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2006">
            <name>const LinkedListNodeIterator&lt;T, R, P></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379602"/>
            </content>
        </type>
        <type derived="true" id="type.2033">
            <name>const LinkedListNodeIterator&lt;T, R, P></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379631"/>
            </content>
        </type>
        <type derived="true" id="type.2007">
            <name>const LinkedListNodeIterator&lt;T, R, P>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379602"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2066">
            <name>const LinkedListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379715"/>
            </content>
        </type>
        <type derived="true" id="type.2035">
            <name>const LinkedListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379641"/>
            </content>
        </type>
        <type derived="true" id="type.2045">
            <name>const LinkedListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2043"/>
            </content>
        </type>
        <type derived="true" id="type.2062">
            <name>const LinkedListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379691"/>
            </content>
        </type>
        <type derived="true" id="type.2016">
            <name>const LinkedListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2014"/>
            </content>
        </type>
        <type derived="true" id="type.2046">
            <name>const LinkedListNodeIterator&lt;T, T&amp;, T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2043"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2017">
            <name>const LinkedListNodeIterator&lt;T, T&amp;, T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2014"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2068">
            <name>const LinkedListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379726"/>
            </content>
        </type>
        <type derived="true" id="type.2037">
            <name>const LinkedListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379652"/>
            </content>
        </type>
        <type derived="true" id="type.2027">
            <name>const LinkedListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2025"/>
            </content>
        </type>
        <type derived="true" id="type.2064">
            <name>const LinkedListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379702"/>
            </content>
        </type>
        <type derived="true" id="type.2056">
            <name>const LinkedListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2054"/>
            </content>
        </type>
        <type derived="true" id="type.2057">
            <name>const LinkedListNodeIterator&lt;T, const T&amp;, const T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2054"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2028">
            <name>const LinkedListNodeIterator&lt;T, const T&amp;, const T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2025"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2649">
            <name>const List&lt;Age*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381326"/>
            </content>
        </type>
        <type derived="true" id="type.2814">
            <name>const List&lt;AliasType*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382222"/>
            </content>
        </type>
        <type derived="true" id="type.2748">
            <name>const List&lt;BidiClass*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381864"/>
            </content>
        </type>
        <type derived="true" id="type.2781">
            <name>const List&lt;BidiPairedBracketType*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382043"/>
            </content>
        </type>
        <type derived="true" id="type.2549">
            <name>const List&lt;BinaryProperty*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380778"/>
            </content>
        </type>
        <type derived="true" id="type.2583">
            <name>const List&lt;Block*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380966"/>
            </content>
        </type>
        <type derived="true" id="type.1840">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379330"/>
            </content>
        </type>
        <type derived="true" id="type.1810">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1808"/>
            </content>
        </type>
        <type derived="true" id="type.1830">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1808"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1811">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1808"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2641">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381293"/>
            </content>
        </type>
        <type derived="true" id="type.2806">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382189"/>
            </content>
        </type>
        <type derived="true" id="type.2740">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381831"/>
            </content>
        </type>
        <type derived="true" id="type.2773">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382010"/>
            </content>
        </type>
        <type derived="true" id="type.2542">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380753"/>
            </content>
        </type>
        <type derived="true" id="type.2575">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380933"/>
            </content>
        </type>
        <type derived="true" id="type.2608">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381114"/>
            </content>
        </type>
        <type derived="true" id="type.2707">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381652"/>
            </content>
        </type>
        <type derived="true" id="type.2674">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381472"/>
            </content>
        </type>
        <type derived="true" id="type.2628">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381228"/>
            </content>
        </type>
        <type derived="true" id="type.2793">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382124"/>
            </content>
        </type>
        <type derived="true" id="type.2727">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381766"/>
            </content>
        </type>
        <type derived="true" id="type.2760">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381945"/>
            </content>
        </type>
        <type derived="true" id="type.2528">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380674"/>
            </content>
        </type>
        <type derived="true" id="type.2562">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380868"/>
            </content>
        </type>
        <type derived="true" id="type.2595">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381049"/>
            </content>
        </type>
        <type derived="true" id="type.2694">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381587"/>
            </content>
        </type>
        <type derived="true" id="type.2661">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381407"/>
            </content>
        </type>
        <type derived="true" id="type.1886">
            <name>const List&lt;Bucket&lt;T>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1884"/>
            </content>
        </type>
        <type derived="true" id="type.1915">
            <name>const List&lt;Bucket&lt;T>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379458"/>
            </content>
        </type>
        <type derived="true" id="type.1906">
            <name>const List&lt;Bucket&lt;T>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1884"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1887">
            <name>const List&lt;Bucket&lt;T>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1884"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1977">
            <name>const List&lt;Bucket&lt;ValueType>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1975"/>
            </content>
        </type>
        <type derived="true" id="type.1997">
            <name>const List&lt;Bucket&lt;ValueType>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1975"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1978">
            <name>const List&lt;Bucket&lt;ValueType>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1975"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2616">
            <name>const List&lt;GeneralCategory*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381147"/>
            </content>
        </type>
        <type derived="true" id="type.2714">
            <name>const List&lt;NumericType*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381677"/>
            </content>
        </type>
        <type derived="true" id="type.2682">
            <name>const List&lt;Script*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381505"/>
            </content>
        </type>
        <type derived="true" id="type.2486">
            <name>const List&lt;String&lt;CharT>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380497"/>
            </content>
        </type>
        <type derived="true" id="type.2514">
            <name>const List&lt;String&lt;CharT>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380587"/>
            </content>
        </type>
        <type derived="true" id="type.2472">
            <name>const List&lt;String&lt;CharT>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380452"/>
            </content>
        </type>
        <type derived="true" id="type.2419">
            <name>const List&lt;String&lt;CharT>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2417"/>
            </content>
        </type>
        <type derived="true" id="type.2500">
            <name>const List&lt;String&lt;CharT>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380542"/>
            </content>
        </type>
        <type derived="true" id="type.2458">
            <name>const List&lt;String&lt;CharT>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380407"/>
            </content>
        </type>
        <type derived="true" id="type.2444">
            <name>const List&lt;String&lt;CharT>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380362"/>
            </content>
        </type>
        <type derived="true" id="type.2435">
            <name>const List&lt;String&lt;CharT>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2417"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2420">
            <name>const List&lt;String&lt;CharT>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2417"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1464">
            <name>const List&lt;String&lt;char>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378596"/>
            </content>
        </type>
        <type derived="true" id="type.1496">
            <name>const List&lt;String&lt;uchar>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378721"/>
            </content>
        </type>
        <type derived="true" id="type.1484">
            <name>const List&lt;String&lt;wchar>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378677"/>
            </content>
        </type>
        <type derived="true" id="type.1471">
            <name>const List&lt;System.Ascii.CharClass></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378617"/>
            </content>
        </type>
        <type derived="true" id="type.2819">
            <name>const List&lt;System.Unicode.Alias></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382244"/>
            </content>
        </type>
        <type derived="true" id="type.2070">
            <name>const List&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379733"/>
            </content>
        </type>
        <type derived="true" id="type.2373">
            <name>const List&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2371"/>
            </content>
        </type>
        <type derived="true" id="type.2093">
            <name>const List&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379758"/>
            </content>
        </type>
        <type derived="true" id="type.2201">
            <name>const List&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2199"/>
            </content>
        </type>
        <type derived="true" id="type.2100">
            <name>const List&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379783"/>
            </content>
        </type>
        <type derived="true" id="type.2391">
            <name>const List&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2371"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2090">
            <name>const List&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379733"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2220">
            <name>const List&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2199"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2374">
            <name>const List&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2371"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2071">
            <name>const List&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379733"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2202">
            <name>const List&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2199"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2892">
            <name>const List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385233"/>
            </content>
        </type>
        <type derived="true" id="type.1385251">
            <name>const List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385233"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385236">
            <name>const List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385233"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2900">
            <name>const List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385292"/>
            </content>
        </type>
        <type derived="true" id="type.1385310">
            <name>const List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385292"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385295">
            <name>const List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385292"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2880">
            <name>const List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385130"/>
            </content>
        </type>
        <type derived="true" id="type.1385148">
            <name>const List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385130"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385133">
            <name>const List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385130"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2886">
            <name>const List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385185"/>
            </content>
        </type>
        <type derived="true" id="type.1385203">
            <name>const List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385185"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385188">
            <name>const List&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385185"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2827">
            <name>const List&lt;UniquePtr&lt;System.Unicode.CharacterInfo>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382276"/>
            </content>
        </type>
        <type derived="true" id="type.2851">
            <name>const List&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382366"/>
            </content>
        </type>
        <type derived="true" id="type.2835">
            <name>const List&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382305"/>
            </content>
        </type>
        <type derived="true" id="type.2860">
            <name>const List&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382404"/>
            </content>
        </type>
        <type derived="true" id="type.2161">
            <name>const List&lt;byte></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379874"/>
            </content>
        </type>
        <type derived="true" id="type.1922">
            <name>const List&lt;long></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379484"/>
            </content>
        </type>
        <type derived="true" id="type.2842">
            <name>const List&lt;uint></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382325"/>
            </content>
        </type>
        <type derived="true" id="type.1503">
            <name>const List&lt;ulong></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378747"/>
            </content>
        </type>
        <type derived="true" id="type.2999">
            <name>const Literal</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383542"/>
            </content>
        </type>
        <type derived="true" id="type.3000">
            <name>const Literal&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383542"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2940">
            <name>const LockGuard</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378318"/>
            </content>
        </type>
        <type derived="true" id="type.1722">
            <name>const LogicalAnd&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379155"/>
            </content>
        </type>
        <type derived="true" id="type.1723">
            <name>const LogicalAnd&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379155"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1730">
            <name>const LogicalNot&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379167"/>
            </content>
        </type>
        <type derived="true" id="type.1731">
            <name>const LogicalNot&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379167"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1728">
            <name>const LogicalOr&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379163"/>
            </content>
        </type>
        <type derived="true" id="type.1729">
            <name>const LogicalOr&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379163"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3037">
            <name>const LvalueRef</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383600"/>
            </content>
        </type>
        <type derived="true" id="type.3038">
            <name>const LvalueRef&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383600"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2108">
            <name>const Map&lt;Key, Value, KeyCompare></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379811"/>
            </content>
        </type>
        <type derived="true" id="type.2109">
            <name>const Map&lt;Key, Value, KeyCompare>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379811"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2920">
            <name>const MemoryByteStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378312"/>
            </content>
        </type>
        <type derived="true" id="type.1586">
            <name>const Minus&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378973"/>
            </content>
        </type>
        <type derived="true" id="type.1587">
            <name>const Minus&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378973"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1591">
            <name>const Multiplies&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378980"/>
            </content>
        </type>
        <type derived="true" id="type.1596">
            <name>const Multiplies&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378987"/>
            </content>
        </type>
        <type derived="true" id="type.1592">
            <name>const Multiplies&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378980"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2939">
            <name>const Mutex</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378316"/>
            </content>
        </type>
        <type derived="true" id="type.1581">
            <name>const Negate&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378966"/>
            </content>
        </type>
        <type derived="true" id="type.1582">
            <name>const Negate&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378966"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2990">
            <name>const New</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383528"/>
            </content>
        </type>
        <type derived="true" id="type.2991">
            <name>const New&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383528"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2948">
            <name>const Not</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383448"/>
            </content>
        </type>
        <type derived="true" id="type.2949">
            <name>const Not&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383448"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1646">
            <name>const NotEqualTo&lt;T, U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379061"/>
            </content>
        </type>
        <type derived="true" id="type.1647">
            <name>const NotEqualTo&lt;T, U>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379061"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1637">
            <name>const NotEqualTo&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379050"/>
            </content>
        </type>
        <type derived="true" id="type.1638">
            <name>const NotEqualTo&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379050"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2919">
            <name>const OutputFileStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378157"/>
            </content>
        </type>
        <type derived="true" id="type.2924">
            <name>const OutputStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378395"/>
            </content>
        </type>
        <type derived="true" id="type.2928">
            <name>const OutputStringStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378415"/>
            </content>
        </type>
        <type derived="true" id="type.1780">
            <name>const Pair&lt;K, T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1769"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1796">
            <name>const Pair&lt;K, T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1769"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2121">
            <name>const Pair&lt;Key, Value>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2110"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2127">
            <name>const Pair&lt;Key, Value>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2110"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2182">
            <name>const Pair&lt;T, U>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2174"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2193">
            <name>const Pair&lt;T, U>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2185"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1575">
            <name>const Plus&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378952"/>
            </content>
        </type>
        <type derived="true" id="type.1580">
            <name>const Plus&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378959"/>
            </content>
        </type>
        <type derived="true" id="type.1576">
            <name>const Plus&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378952"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3043">
            <name>const Pointer</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383604"/>
            </content>
        </type>
        <type derived="true" id="type.3044">
            <name>const Pointer&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383604"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2978">
            <name>const PostfixDecrement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383518"/>
            </content>
        </type>
        <type derived="true" id="type.2979">
            <name>const PostfixDecrement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383518"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2975">
            <name>const PostfixIncrement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383516"/>
            </content>
        </type>
        <type derived="true" id="type.2976">
            <name>const PostfixIncrement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383516"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2960">
            <name>const PrefixDecrement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383456"/>
            </content>
        </type>
        <type derived="true" id="type.2961">
            <name>const PrefixDecrement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383456"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2957">
            <name>const PrefixIncrement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383454"/>
            </content>
        </type>
        <type derived="true" id="type.2958">
            <name>const PrefixIncrement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383454"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2194">
            <name>const Queue&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379957"/>
            </content>
        </type>
        <type derived="true" id="type.2195">
            <name>const Queue&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379957"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2653">
            <name>const RandomAccessIter&lt;Age*, Age*&amp;, Age**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381339"/>
            </content>
        </type>
        <type derived="true" id="type.2650">
            <name>const RandomAccessIter&lt;Age*, const Age*&amp;, const Age**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381331"/>
            </content>
        </type>
        <type derived="true" id="type.2651">
            <name>const RandomAccessIter&lt;Age*, const Age*&amp;, const Age**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381331"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2818">
            <name>const RandomAccessIter&lt;AliasType*, AliasType*&amp;, AliasType**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382235"/>
            </content>
        </type>
        <type derived="true" id="type.2815">
            <name>const RandomAccessIter&lt;AliasType*, const AliasType*&amp;, const AliasType**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382227"/>
            </content>
        </type>
        <type derived="true" id="type.2816">
            <name>const RandomAccessIter&lt;AliasType*, const AliasType*&amp;, const AliasType**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382227"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2752">
            <name>const RandomAccessIter&lt;BidiClass*, BidiClass*&amp;, BidiClass**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381877"/>
            </content>
        </type>
        <type derived="true" id="type.2749">
            <name>const RandomAccessIter&lt;BidiClass*, const BidiClass*&amp;, const BidiClass**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381869"/>
            </content>
        </type>
        <type derived="true" id="type.2750">
            <name>const RandomAccessIter&lt;BidiClass*, const BidiClass*&amp;, const BidiClass**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381869"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2785">
            <name>const RandomAccessIter&lt;BidiPairedBracketType*, BidiPairedBracketType*&amp;, BidiPairedBracketType**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382056"/>
            </content>
        </type>
        <type derived="true" id="type.2782">
            <name>const RandomAccessIter&lt;BidiPairedBracketType*, const BidiPairedBracketType*&amp;, const BidiPairedBracketType**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382048"/>
            </content>
        </type>
        <type derived="true" id="type.2783">
            <name>const RandomAccessIter&lt;BidiPairedBracketType*, const BidiPairedBracketType*&amp;, const BidiPairedBracketType**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382048"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2553">
            <name>const RandomAccessIter&lt;BinaryProperty*, BinaryProperty*&amp;, BinaryProperty**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380791"/>
            </content>
        </type>
        <type derived="true" id="type.2550">
            <name>const RandomAccessIter&lt;BinaryProperty*, const BinaryProperty*&amp;, const BinaryProperty**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380783"/>
            </content>
        </type>
        <type derived="true" id="type.2551">
            <name>const RandomAccessIter&lt;BinaryProperty*, const BinaryProperty*&amp;, const BinaryProperty**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380783"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2587">
            <name>const RandomAccessIter&lt;Block*, Block*&amp;, Block**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380979"/>
            </content>
        </type>
        <type derived="true" id="type.2584">
            <name>const RandomAccessIter&lt;Block*, const Block*&amp;, const Block**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380971"/>
            </content>
        </type>
        <type derived="true" id="type.2585">
            <name>const RandomAccessIter&lt;Block*, const Block*&amp;, const Block**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380971"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1844">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379345"/>
            </content>
        </type>
        <type derived="true" id="type.1825">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1823"/>
            </content>
        </type>
        <type derived="true" id="type.1845">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379345"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1827">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1823"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1826">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1823"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1841">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379336"/>
            </content>
        </type>
        <type derived="true" id="type.1816">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1814"/>
            </content>
        </type>
        <type derived="true" id="type.1818">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1814"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1842">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379336"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1817">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1814"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2645">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Age*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381308"/>
            </content>
        </type>
        <type derived="true" id="type.2646">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Age*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381308"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2642">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381299"/>
            </content>
        </type>
        <type derived="true" id="type.2643">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381299"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2810">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382204"/>
            </content>
        </type>
        <type derived="true" id="type.2811">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382204"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2807">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382195"/>
            </content>
        </type>
        <type derived="true" id="type.2808">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382195"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2744">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381846"/>
            </content>
        </type>
        <type derived="true" id="type.2745">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381846"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2741">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381837"/>
            </content>
        </type>
        <type derived="true" id="type.2742">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381837"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2777">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382025"/>
            </content>
        </type>
        <type derived="true" id="type.2778">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382025"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2774">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382016"/>
            </content>
        </type>
        <type derived="true" id="type.2775">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382016"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2546">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380768"/>
            </content>
        </type>
        <type derived="true" id="type.2547">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380768"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2543">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380759"/>
            </content>
        </type>
        <type derived="true" id="type.2544">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380759"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2579">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Block*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380948"/>
            </content>
        </type>
        <type derived="true" id="type.2580">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Block*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380948"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2576">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380939"/>
            </content>
        </type>
        <type derived="true" id="type.2577">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380939"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2612">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381129"/>
            </content>
        </type>
        <type derived="true" id="type.2613">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381129"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2609">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381120"/>
            </content>
        </type>
        <type derived="true" id="type.2610">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381120"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2711">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381667"/>
            </content>
        </type>
        <type derived="true" id="type.2712">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381667"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2708">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381658"/>
            </content>
        </type>
        <type derived="true" id="type.2709">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381658"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2678">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Script*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381487"/>
            </content>
        </type>
        <type derived="true" id="type.2679">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Script*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381487"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2675">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381478"/>
            </content>
        </type>
        <type derived="true" id="type.2676">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381478"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2632">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381243"/>
            </content>
        </type>
        <type derived="true" id="type.2633">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381243"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2629">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381234"/>
            </content>
        </type>
        <type derived="true" id="type.2630">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381234"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2797">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382139"/>
            </content>
        </type>
        <type derived="true" id="type.2798">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382139"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2794">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382130"/>
            </content>
        </type>
        <type derived="true" id="type.2795">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382130"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2731">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381781"/>
            </content>
        </type>
        <type derived="true" id="type.2732">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381781"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2728">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381772"/>
            </content>
        </type>
        <type derived="true" id="type.2729">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381772"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2764">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381960"/>
            </content>
        </type>
        <type derived="true" id="type.2765">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381960"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2761">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381951"/>
            </content>
        </type>
        <type derived="true" id="type.2762">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381951"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2532">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380689"/>
            </content>
        </type>
        <type derived="true" id="type.2533">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380689"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2529">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380680"/>
            </content>
        </type>
        <type derived="true" id="type.2530">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380680"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2566">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380883"/>
            </content>
        </type>
        <type derived="true" id="type.2567">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380883"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2563">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380874"/>
            </content>
        </type>
        <type derived="true" id="type.2564">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380874"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2599">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381064"/>
            </content>
        </type>
        <type derived="true" id="type.2600">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381064"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2596">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381055"/>
            </content>
        </type>
        <type derived="true" id="type.2597">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381055"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2698">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381602"/>
            </content>
        </type>
        <type derived="true" id="type.2699">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381602"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2695">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381593"/>
            </content>
        </type>
        <type derived="true" id="type.2696">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381593"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2665">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381422"/>
            </content>
        </type>
        <type derived="true" id="type.2666">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381422"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2662">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381413"/>
            </content>
        </type>
        <type derived="true" id="type.2663">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381413"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1901">
            <name>const RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1899"/>
            </content>
        </type>
        <type derived="true" id="type.1919">
            <name>const RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379473"/>
            </content>
        </type>
        <type derived="true" id="type.1903">
            <name>const RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1899"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1920">
            <name>const RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379473"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1902">
            <name>const RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1899"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1916">
            <name>const RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379464"/>
            </content>
        </type>
        <type derived="true" id="type.1892">
            <name>const RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1890"/>
            </content>
        </type>
        <type derived="true" id="type.1917">
            <name>const RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379464"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1894">
            <name>const RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1890"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1893">
            <name>const RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1890"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1992">
            <name>const RandomAccessIter&lt;Bucket&lt;ValueType>*, Bucket&lt;ValueType>*&amp;, Bucket&lt;ValueType>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1990"/>
            </content>
        </type>
        <type derived="true" id="type.1994">
            <name>const RandomAccessIter&lt;Bucket&lt;ValueType>*, Bucket&lt;ValueType>*&amp;, Bucket&lt;ValueType>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1990"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1993">
            <name>const RandomAccessIter&lt;Bucket&lt;ValueType>*, Bucket&lt;ValueType>*&amp;, Bucket&lt;ValueType>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1990"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1983">
            <name>const RandomAccessIter&lt;Bucket&lt;ValueType>*, const Bucket&lt;ValueType>*&amp;, const Bucket&lt;ValueType>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1981"/>
            </content>
        </type>
        <type derived="true" id="type.1985">
            <name>const RandomAccessIter&lt;Bucket&lt;ValueType>*, const Bucket&lt;ValueType>*&amp;, const Bucket&lt;ValueType>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1981"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1984">
            <name>const RandomAccessIter&lt;Bucket&lt;ValueType>*, const Bucket&lt;ValueType>*&amp;, const Bucket&lt;ValueType>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1981"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2441">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380352"/>
            </content>
        </type>
        <type derived="true" id="type.2497">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380532"/>
            </content>
        </type>
        <type derived="true" id="type.2455">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380397"/>
            </content>
        </type>
        <type derived="true" id="type.2511">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380577"/>
            </content>
        </type>
        <type derived="true" id="type.2469">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380442"/>
            </content>
        </type>
        <type derived="true" id="type.2409">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2407"/>
            </content>
        </type>
        <type derived="true" id="type.2483">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380487"/>
            </content>
        </type>
        <type derived="true" id="type.2512">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380577"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2442">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380352"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2470">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380442"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2456">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380397"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2411">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2407"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2484">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380487"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2498">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380532"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2410">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2407"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2480">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380478"/>
            </content>
        </type>
        <type derived="true" id="type.2452">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380388"/>
            </content>
        </type>
        <type derived="true" id="type.2466">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380433"/>
            </content>
        </type>
        <type derived="true" id="type.2494">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380523"/>
            </content>
        </type>
        <type derived="true" id="type.2508">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380568"/>
            </content>
        </type>
        <type derived="true" id="type.2438">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380343"/>
            </content>
        </type>
        <type derived="true" id="type.2400">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2398"/>
            </content>
        </type>
        <type derived="true" id="type.2453">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380388"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2495">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380523"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2439">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380343"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2481">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380478"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2509">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380568"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2402">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2398"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2467">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380433"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2401">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2398"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2620">
            <name>const RandomAccessIter&lt;GeneralCategory*, GeneralCategory*&amp;, GeneralCategory**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381160"/>
            </content>
        </type>
        <type derived="true" id="type.2617">
            <name>const RandomAccessIter&lt;GeneralCategory*, const GeneralCategory*&amp;, const GeneralCategory**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381152"/>
            </content>
        </type>
        <type derived="true" id="type.2618">
            <name>const RandomAccessIter&lt;GeneralCategory*, const GeneralCategory*&amp;, const GeneralCategory**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381152"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2718">
            <name>const RandomAccessIter&lt;NumericType*, NumericType*&amp;, NumericType**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381690"/>
            </content>
        </type>
        <type derived="true" id="type.2715">
            <name>const RandomAccessIter&lt;NumericType*, const NumericType*&amp;, const NumericType**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381682"/>
            </content>
        </type>
        <type derived="true" id="type.2716">
            <name>const RandomAccessIter&lt;NumericType*, const NumericType*&amp;, const NumericType**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381682"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2686">
            <name>const RandomAccessIter&lt;Script*, Script*&amp;, Script**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381518"/>
            </content>
        </type>
        <type derived="true" id="type.2683">
            <name>const RandomAccessIter&lt;Script*, const Script*&amp;, const Script**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381510"/>
            </content>
        </type>
        <type derived="true" id="type.2684">
            <name>const RandomAccessIter&lt;Script*, const Script*&amp;, const Script**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381510"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2490">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380508"/>
            </content>
        </type>
        <type derived="true" id="type.2518">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380598"/>
            </content>
        </type>
        <type derived="true" id="type.2504">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380553"/>
            </content>
        </type>
        <type derived="true" id="type.2430">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2428"/>
            </content>
        </type>
        <type derived="true" id="type.2476">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380463"/>
            </content>
        </type>
        <type derived="true" id="type.2448">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380373"/>
            </content>
        </type>
        <type derived="true" id="type.2462">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380418"/>
            </content>
        </type>
        <type derived="true" id="type.2519">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380598"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2432">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2428"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2505">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380553"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2477">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380463"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2491">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380508"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2449">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380373"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2463">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380418"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2431">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2428"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2459">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380411"/>
            </content>
        </type>
        <type derived="true" id="type.2423">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2421"/>
            </content>
        </type>
        <type derived="true" id="type.2473">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380456"/>
            </content>
        </type>
        <type derived="true" id="type.2445">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380366"/>
            </content>
        </type>
        <type derived="true" id="type.2487">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380501"/>
            </content>
        </type>
        <type derived="true" id="type.2501">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380546"/>
            </content>
        </type>
        <type derived="true" id="type.2515">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380591"/>
            </content>
        </type>
        <type derived="true" id="type.2502">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380546"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2474">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380456"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2460">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380411"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2516">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380591"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2446">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380366"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2488">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380501"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2425">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2421"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2424">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2421"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1468">
            <name>const RandomAccessIter&lt;String&lt;char>, String&lt;char>&amp;, String&lt;char>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378607"/>
            </content>
        </type>
        <type derived="true" id="type.1469">
            <name>const RandomAccessIter&lt;String&lt;char>, String&lt;char>&amp;, String&lt;char>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378607"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1465">
            <name>const RandomAccessIter&lt;String&lt;char>, const String&lt;char>&amp;, const String&lt;char>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378600"/>
            </content>
        </type>
        <type derived="true" id="type.1466">
            <name>const RandomAccessIter&lt;String&lt;char>, const String&lt;char>&amp;, const String&lt;char>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378600"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1500">
            <name>const RandomAccessIter&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378732"/>
            </content>
        </type>
        <type derived="true" id="type.1501">
            <name>const RandomAccessIter&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378732"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1497">
            <name>const RandomAccessIter&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378725"/>
            </content>
        </type>
        <type derived="true" id="type.1498">
            <name>const RandomAccessIter&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378725"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1488">
            <name>const RandomAccessIter&lt;String&lt;wchar>, String&lt;wchar>&amp;, String&lt;wchar>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378688"/>
            </content>
        </type>
        <type derived="true" id="type.1489">
            <name>const RandomAccessIter&lt;String&lt;wchar>, String&lt;wchar>&amp;, String&lt;wchar>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378688"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1485">
            <name>const RandomAccessIter&lt;String&lt;wchar>, const String&lt;wchar>&amp;, const String&lt;wchar>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378681"/>
            </content>
        </type>
        <type derived="true" id="type.1486">
            <name>const RandomAccessIter&lt;String&lt;wchar>, const String&lt;wchar>&amp;, const String&lt;wchar>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378681"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1475">
            <name>const RandomAccessIter&lt;System.Ascii.CharClass, CharClass&amp;, CharClass*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378631"/>
            </content>
        </type>
        <type derived="true" id="type.1476">
            <name>const RandomAccessIter&lt;System.Ascii.CharClass, CharClass&amp;, CharClass*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378631"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1472">
            <name>const RandomAccessIter&lt;System.Ascii.CharClass, const CharClass&amp;, const CharClass*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378623"/>
            </content>
        </type>
        <type derived="true" id="type.1473">
            <name>const RandomAccessIter&lt;System.Ascii.CharClass, const CharClass&amp;, const CharClass*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378623"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2823">
            <name>const RandomAccessIter&lt;System.Unicode.Alias, Alias&amp;, Alias*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382257"/>
            </content>
        </type>
        <type derived="true" id="type.2824">
            <name>const RandomAccessIter&lt;System.Unicode.Alias, Alias&amp;, Alias*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382257"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2820">
            <name>const RandomAccessIter&lt;System.Unicode.Alias, const Alias&amp;, const Alias*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382249"/>
            </content>
        </type>
        <type derived="true" id="type.2821">
            <name>const RandomAccessIter&lt;System.Unicode.Alias, const Alias&amp;, const Alias*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382249"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2223">
            <name>const RandomAccessIter&lt;T, R, P></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379986"/>
            </content>
        </type>
        <type derived="true" id="type.2228">
            <name>const RandomAccessIter&lt;T, R, P></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379993"/>
            </content>
        </type>
        <type derived="true" id="type.2230">
            <name>const RandomAccessIter&lt;T, R, P></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380000"/>
            </content>
        </type>
        <type derived="true" id="type.2232">
            <name>const RandomAccessIter&lt;T, R, P></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380007"/>
            </content>
        </type>
        <type derived="true" id="type.2234">
            <name>const RandomAccessIter&lt;T, R, P></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380014"/>
            </content>
        </type>
        <type derived="true" id="type.2236">
            <name>const RandomAccessIter&lt;T, R, P></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380021"/>
            </content>
        </type>
        <type derived="true" id="type.2238">
            <name>const RandomAccessIter&lt;T, R, P></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380028"/>
            </content>
        </type>
        <type derived="true" id="type.2225">
            <name>const RandomAccessIter&lt;T, R, P>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379986"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2224">
            <name>const RandomAccessIter&lt;T, R, P>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379986"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2104">
            <name>const RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379798"/>
            </content>
        </type>
        <type derived="true" id="type.2085">
            <name>const RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2083"/>
            </content>
        </type>
        <type derived="true" id="type.2097">
            <name>const RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379773"/>
            </content>
        </type>
        <type derived="true" id="type.2215">
            <name>const RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2213"/>
            </content>
        </type>
        <type derived="true" id="type.2386">
            <name>const RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2384"/>
            </content>
        </type>
        <type derived="true" id="type.2388">
            <name>const RandomAccessIter&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2384"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2105">
            <name>const RandomAccessIter&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379798"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2087">
            <name>const RandomAccessIter&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2083"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2098">
            <name>const RandomAccessIter&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379773"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2217">
            <name>const RandomAccessIter&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2213"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2387">
            <name>const RandomAccessIter&lt;T, T&amp;, T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2384"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2216">
            <name>const RandomAccessIter&lt;T, T&amp;, T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2213"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2086">
            <name>const RandomAccessIter&lt;T, T&amp;, T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2083"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2101">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379789"/>
            </content>
        </type>
        <type derived="true" id="type.2094">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379764"/>
            </content>
        </type>
        <type derived="true" id="type.2206">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2204"/>
            </content>
        </type>
        <type derived="true" id="type.2378">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2376"/>
            </content>
        </type>
        <type derived="true" id="type.2076">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2074"/>
            </content>
        </type>
        <type derived="true" id="type.2078">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2074"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2095">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379764"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2102">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379789"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2380">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2376"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2208">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2204"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2379">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2376"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2077">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2074"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2207">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2204"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2896">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385244"/>
            </content>
        </type>
        <type derived="true" id="type.1385248">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385244"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385247">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385244"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2893">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385237"/>
            </content>
        </type>
        <type derived="true" id="type.2894">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385237"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385240">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385237"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2904">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385303"/>
            </content>
        </type>
        <type derived="true" id="type.1385307">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385303"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385306">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385303"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2901">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385296"/>
            </content>
        </type>
        <type derived="true" id="type.2902">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385296"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385299">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385296"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2884">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385141"/>
            </content>
        </type>
        <type derived="true" id="type.1385145">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385141"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385144">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385141"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2881">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385134"/>
            </content>
        </type>
        <type derived="true" id="type.2882">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385134"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385137">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385134"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2890">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385196"/>
            </content>
        </type>
        <type derived="true" id="type.1385200">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385196"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385199">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385196"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2887">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385189"/>
            </content>
        </type>
        <type derived="true" id="type.2888">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385189"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385192">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;, const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385189"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2831">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, UniquePtr&lt;System.Unicode.CharacterInfo>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382287"/>
            </content>
        </type>
        <type derived="true" id="type.2832">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, UniquePtr&lt;System.Unicode.CharacterInfo>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382287"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2828">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, const UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfo>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382280"/>
            </content>
        </type>
        <type derived="true" id="type.2829">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, const UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfo>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382280"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2855">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.CharacterInfoPage>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382377"/>
            </content>
        </type>
        <type derived="true" id="type.2856">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.CharacterInfoPage>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382377"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2852">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, const UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfoPage>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382370"/>
            </content>
        </type>
        <type derived="true" id="type.2853">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, const UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfoPage>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382370"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2839">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382316"/>
            </content>
        </type>
        <type derived="true" id="type.2840">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382316"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2836">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382309"/>
            </content>
        </type>
        <type derived="true" id="type.2837">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382309"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2864">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382415"/>
            </content>
        </type>
        <type derived="true" id="type.2865">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382415"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2861">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382408"/>
            </content>
        </type>
        <type derived="true" id="type.2862">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382408"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2164">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379886"/>
            </content>
        </type>
        <type derived="true" id="type.2165">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379886"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2162">
            <name>const RandomAccessIter&lt;byte, const byte&amp;, const byte*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379879"/>
            </content>
        </type>
        <type derived="true" id="type.2163">
            <name>const RandomAccessIter&lt;byte, const byte&amp;, const byte*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379879"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1463">
            <name>const RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378586"/>
            </content>
        </type>
        <type derived="true" id="type.1462">
            <name>const RandomAccessIter&lt;char, const char&amp;, const char*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378578"/>
            </content>
        </type>
        <type derived="true" id="type.1923">
            <name>const RandomAccessIter&lt;long, const long&amp;, const long*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379490"/>
            </content>
        </type>
        <type derived="true" id="type.1924">
            <name>const RandomAccessIter&lt;long, long&amp;, long*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379497"/>
            </content>
        </type>
        <type derived="true" id="type.1492">
            <name>const RandomAccessIter&lt;uchar, const uchar&amp;, const uchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378703"/>
            </content>
        </type>
        <type derived="true" id="type.1493">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378711"/>
            </content>
        </type>
        <type derived="true" id="type.1494">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378711"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2843">
            <name>const RandomAccessIter&lt;uint, const uint&amp;, const uint*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382331"/>
            </content>
        </type>
        <type derived="true" id="type.2844">
            <name>const RandomAccessIter&lt;uint, const uint&amp;, const uint*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382331"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2846">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382338"/>
            </content>
        </type>
        <type derived="true" id="type.2847">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382338"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1504">
            <name>const RandomAccessIter&lt;ulong, const ulong&amp;, const ulong*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378753"/>
            </content>
        </type>
        <type derived="true" id="type.1505">
            <name>const RandomAccessIter&lt;ulong, const ulong&amp;, const ulong*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378753"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1507">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378760"/>
            </content>
        </type>
        <type derived="true" id="type.1508">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378760"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1480">
            <name>const RandomAccessIter&lt;wchar, const wchar&amp;, const wchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378659"/>
            </content>
        </type>
        <type derived="true" id="type.1481">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378667"/>
            </content>
        </type>
        <type derived="true" id="type.1482">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378667"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2125">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2123"/>
            </content>
        </type>
        <type derived="true" id="type.2147">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2123"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2126">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2123"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2261">
            <name>const RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380067"/>
            </content>
        </type>
        <type derived="true" id="type.2285">
            <name>const RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380067"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2262">
            <name>const RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380067"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2311">
            <name>const RedBlackTree&lt;T, T, Identity&lt;T>, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2309"/>
            </content>
        </type>
        <type derived="true" id="type.2358">
            <name>const RedBlackTree&lt;T, T, Identity&lt;T>, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380218"/>
            </content>
        </type>
        <type derived="true" id="type.2349">
            <name>const RedBlackTree&lt;T, T, Identity&lt;T>, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380168"/>
            </content>
        </type>
        <type derived="true" id="type.2334">
            <name>const RedBlackTree&lt;T, T, Identity&lt;T>, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2309"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2312">
            <name>const RedBlackTree&lt;T, T, Identity&lt;T>, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2309"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2134">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2132"/>
            </content>
        </type>
        <type derived="true" id="type.2158">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2132"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2135">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2132"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2250">
            <name>const RedBlackTreeNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2248"/>
            </content>
        </type>
        <type derived="true" id="type.2258">
            <name>const RedBlackTreeNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380058"/>
            </content>
        </type>
        <type derived="true" id="type.2241">
            <name>const RedBlackTreeNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380035"/>
            </content>
        </type>
        <type derived="true" id="type.2360">
            <name>const RedBlackTreeNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380227"/>
            </content>
        </type>
        <type derived="true" id="type.2351">
            <name>const RedBlackTreeNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380177"/>
            </content>
        </type>
        <type derived="true" id="type.2320">
            <name>const RedBlackTreeNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2318"/>
            </content>
        </type>
        <type derived="true" id="type.2345">
            <name>const RedBlackTreeNode&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2318"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2251">
            <name>const RedBlackTreeNode&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2248"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2242">
            <name>const RedBlackTreeNode&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380035"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2321">
            <name>const RedBlackTreeNode&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2318"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2271">
            <name>const RedBlackTreeNode&lt;ValueType></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2269"/>
            </content>
        </type>
        <type derived="true" id="type.2297">
            <name>const RedBlackTreeNode&lt;ValueType>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2269"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2272">
            <name>const RedBlackTreeNode&lt;ValueType>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2269"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2930">
            <name>const RedBlackTreeNodeBase</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378362"/>
            </content>
        </type>
        <type derived="true" id="type.2931">
            <name>const RedBlackTreeNodeBase&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378362"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2142">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2140"/>
            </content>
        </type>
        <type derived="true" id="type.2144">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2140"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2143">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2140"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2130">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2128"/>
            </content>
        </type>
        <type derived="true" id="type.2137">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2128"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2131">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2128"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2257">
            <name>const RedBlackTreeNodeIterator&lt;T, R, P></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380054"/>
            </content>
        </type>
        <type derived="true" id="type.2246">
            <name>const RedBlackTreeNodeIterator&lt;T, R, P></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380041"/>
            </content>
        </type>
        <type derived="true" id="type.2254">
            <name>const RedBlackTreeNodeIterator&lt;T, R, P>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380041"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2247">
            <name>const RedBlackTreeNodeIterator&lt;T, R, P>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380041"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2354">
            <name>const RedBlackTreeNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380186"/>
            </content>
        </type>
        <type derived="true" id="type.2363">
            <name>const RedBlackTreeNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380236"/>
            </content>
        </type>
        <type derived="true" id="type.2329">
            <name>const RedBlackTreeNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2327"/>
            </content>
        </type>
        <type derived="true" id="type.2331">
            <name>const RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2327"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2330">
            <name>const RedBlackTreeNodeIterator&lt;T, T&amp;, T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2327"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2359">
            <name>const RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380223"/>
            </content>
        </type>
        <type derived="true" id="type.2316">
            <name>const RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2314"/>
            </content>
        </type>
        <type derived="true" id="type.2350">
            <name>const RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380173"/>
            </content>
        </type>
        <type derived="true" id="type.2352">
            <name>const RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380173"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2361">
            <name>const RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380223"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2323">
            <name>const RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2314"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2317">
            <name>const RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2314"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2280">
            <name>const RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2278"/>
            </content>
        </type>
        <type derived="true" id="type.2282">
            <name>const RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2278"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2281">
            <name>const RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2278"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2267">
            <name>const RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2265"/>
            </content>
        </type>
        <type derived="true" id="type.2274">
            <name>const RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2265"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2268">
            <name>const RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2265"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1602">
            <name>const Remainder&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379001"/>
            </content>
        </type>
        <type derived="true" id="type.1603">
            <name>const Remainder&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379001"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3004">
            <name>const ReturnStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383550"/>
            </content>
        </type>
        <type derived="true" id="type.3005">
            <name>const ReturnStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383550"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3040">
            <name>const RvalueRef</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383602"/>
            </content>
        </type>
        <type derived="true" id="type.3041">
            <name>const RvalueRef&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383602"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1776">
            <name>const SelectFirst&lt;K, T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1775"/>
            </content>
        </type>
        <type derived="true" id="type.1835">
            <name>const SelectFirst&lt;K, T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379297"/>
            </content>
        </type>
        <type derived="true" id="type.1777">
            <name>const SelectFirst&lt;K, T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1775"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2117">
            <name>const SelectFirst&lt;Key, Value></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2116"/>
            </content>
        </type>
        <type derived="true" id="type.2118">
            <name>const SelectFirst&lt;Key, Value>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2116"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2636">
            <name>const SelectFirst&lt;String&lt;char>, Age*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381260"/>
            </content>
        </type>
        <type derived="true" id="type.2801">
            <name>const SelectFirst&lt;String&lt;char>, AliasType*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382156"/>
            </content>
        </type>
        <type derived="true" id="type.2735">
            <name>const SelectFirst&lt;String&lt;char>, BidiClass*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381798"/>
            </content>
        </type>
        <type derived="true" id="type.2768">
            <name>const SelectFirst&lt;String&lt;char>, BidiPairedBracketType*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381977"/>
            </content>
        </type>
        <type derived="true" id="type.2537">
            <name>const SelectFirst&lt;String&lt;char>, BinaryProperty*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380720"/>
            </content>
        </type>
        <type derived="true" id="type.2570">
            <name>const SelectFirst&lt;String&lt;char>, Block*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380900"/>
            </content>
        </type>
        <type derived="true" id="type.2603">
            <name>const SelectFirst&lt;String&lt;char>, GeneralCategory*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381081"/>
            </content>
        </type>
        <type derived="true" id="type.2702">
            <name>const SelectFirst&lt;String&lt;char>, NumericType*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381619"/>
            </content>
        </type>
        <type derived="true" id="type.2669">
            <name>const SelectFirst&lt;String&lt;char>, Script*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381439"/>
            </content>
        </type>
        <type derived="true" id="type.2623">
            <name>const SelectFirst&lt;System.Unicode.AgeId, Age*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381195"/>
            </content>
        </type>
        <type derived="true" id="type.2788">
            <name>const SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382091"/>
            </content>
        </type>
        <type derived="true" id="type.2722">
            <name>const SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381733"/>
            </content>
        </type>
        <type derived="true" id="type.2755">
            <name>const SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381912"/>
            </content>
        </type>
        <type derived="true" id="type.2523">
            <name>const SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380641"/>
            </content>
        </type>
        <type derived="true" id="type.2557">
            <name>const SelectFirst&lt;System.Unicode.BlockId, Block*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380835"/>
            </content>
        </type>
        <type derived="true" id="type.2590">
            <name>const SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381016"/>
            </content>
        </type>
        <type derived="true" id="type.2689">
            <name>const SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381554"/>
            </content>
        </type>
        <type derived="true" id="type.2656">
            <name>const SelectFirst&lt;System.Unicode.ScriptId, Script*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381374"/>
            </content>
        </type>
        <type derived="true" id="type.2172">
            <name>const SelectFirst&lt;T, U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379928"/>
            </content>
        </type>
        <type derived="true" id="type.2173">
            <name>const SelectFirst&lt;T, U>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379928"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2183">
            <name>const SelectSecond&lt;T, U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379941"/>
            </content>
        </type>
        <type derived="true" id="type.2184">
            <name>const SelectSecond&lt;T, U>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379941"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2347">
            <name>const Set&lt;T, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380157"/>
            </content>
        </type>
        <type derived="true" id="type.2356">
            <name>const Set&lt;T, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380207"/>
            </content>
        </type>
        <type derived="true" id="type.2300">
            <name>const Set&lt;T, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380108"/>
            </content>
        </type>
        <type derived="true" id="type.2301">
            <name>const Set&lt;T, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380108"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1756">
            <name>const ShiftLeft&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379203"/>
            </content>
        </type>
        <type derived="true" id="type.1757">
            <name>const ShiftLeft&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379203"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1761">
            <name>const ShiftRight&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379210"/>
            </content>
        </type>
        <type derived="true" id="type.1762">
            <name>const ShiftRight&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1379210"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2981">
            <name>const SizeOf</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383520"/>
            </content>
        </type>
        <type derived="true" id="type.2982">
            <name>const SizeOf&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383520"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2365">
            <name>const Stack&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380257"/>
            </content>
        </type>
        <type derived="true" id="type.2366">
            <name>const Stack&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380257"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3002">
            <name>const Statement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383544"/>
            </content>
        </type>
        <type derived="true" id="type.1385175">
            <name>const Statement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383544"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383547">
            <name>const Statement*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383544"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2905">
            <name>const StaticInitCriticalSection</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1377846"/>
            </content>
        </type>
        <type derived="true" id="type.2906">
            <name>const StaticInitCriticalSection&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1377846"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2925">
            <name>const StreamReader</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378399"/>
            </content>
        </type>
        <type derived="true" id="type.2926">
            <name>const StreamWriter</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378401"/>
            </content>
        </type>
        <type derived="true" id="type.2437">
            <name>const String&lt;CharT></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380337"/>
            </content>
        </type>
        <type derived="true" id="type.2394">
            <name>const String&lt;CharT></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380292"/>
            </content>
        </type>
        <type derived="true" id="type.2507">
            <name>const String&lt;CharT></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380562"/>
            </content>
        </type>
        <type derived="true" id="type.2465">
            <name>const String&lt;CharT></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380427"/>
            </content>
        </type>
        <type derived="true" id="type.2451">
            <name>const String&lt;CharT></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380382"/>
            </content>
        </type>
        <type derived="true" id="type.2479">
            <name>const String&lt;CharT></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380472"/>
            </content>
        </type>
        <type derived="true" id="type.2493">
            <name>const String&lt;CharT></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380518"/>
            </content>
        </type>
        <type derived="true" id="type.2414">
            <name>const String&lt;CharT>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380292"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2395">
            <name>const String&lt;CharT>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380292"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1461">
            <name>const String&lt;char></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378573"/>
            </content>
        </type>
        <type derived="true" id="type.1491">
            <name>const String&lt;uchar></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378697"/>
            </content>
        </type>
        <type derived="true" id="type.1378718">
            <name>const String&lt;uchar>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378697"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1479">
            <name>const String&lt;wchar></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378653"/>
            </content>
        </type>
        <type derived="true" id="type.3019">
            <name>const SwitchStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383584"/>
            </content>
        </type>
        <type derived="true" id="type.3020">
            <name>const SwitchStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383584"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1595">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378189"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1662">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378215"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1669">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378217"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1590">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378187"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1679">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378220"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1686">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378222"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1696">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378225"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1585">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378185"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1703">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378227"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1713">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378230"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1720">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378232"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1515">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378162"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2022">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378291"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1579">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378182"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1740">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378241"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1745">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378243"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1750">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378245"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1755">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378247"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1760">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378249"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1765">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378251"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1772">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378254"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2051">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378298"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2003">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378289"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2368">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378390"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2072">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378302"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1535">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378171"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2307">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378383"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1524">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378164"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1942">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378274"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1855">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378262"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2252">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378370"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2243">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378368"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2197">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378339"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2187">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378333"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1932">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378272"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2176">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378330"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2168">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378321"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1601">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378192"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1645">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378210"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1606">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378194"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2875">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378523"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1928">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378270"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1619">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378203"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1628">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378205"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1635">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378207"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1652">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378212"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2024">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378291"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1872">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378262"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2375">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378390"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1536">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378171"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2313">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378383"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2873">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378523"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2073">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378302"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2203">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378339"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2053">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378298"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2996">
            <name>const TemplateId</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383538"/>
            </content>
        </type>
        <type derived="true" id="type.2997">
            <name>const TemplateId&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383538"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383541">
            <name>const TemplateId*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383538"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3025">
            <name>const ThrowStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383590"/>
            </content>
        </type>
        <type derived="true" id="type.3026">
            <name>const ThrowStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383590"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3028">
            <name>const TryStatement</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383594"/>
            </content>
        </type>
        <type derived="true" id="type.3029">
            <name>const TryStatement&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383594"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2943">
            <name>const Type</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383405"/>
            </content>
        </type>
        <type derived="true" id="type.2944">
            <name>const Type&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383405"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2984">
            <name>const TypeName</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383522"/>
            </content>
        </type>
        <type derived="true" id="type.2985">
            <name>const TypeName&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383522"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1687">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378223"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1636">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378208"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1704">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378228"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1670">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378218"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2188">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378334"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2177">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378331"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1653">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378213"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2169">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378322"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1721">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378233"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2966">
            <name>const UnaryMinus</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383460"/>
            </content>
        </type>
        <type derived="true" id="type.2967">
            <name>const UnaryMinus&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383460"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2963">
            <name>const UnaryPlus</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383458"/>
            </content>
        </type>
        <type derived="true" id="type.2964">
            <name>const UnaryPlus&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1383458"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2941">
            <name>const UnicodeException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378419"/>
            </content>
        </type>
        <type derived="true" id="type.2942">
            <name>const UnicodeException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378419"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2153">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2151"/>
            </content>
        </type>
        <type derived="true" id="type.2155">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2151"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2154">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2151"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2355">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;T>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380197"/>
            </content>
        </type>
        <type derived="true" id="type.2340">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;T>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2338"/>
            </content>
        </type>
        <type derived="true" id="type.2364">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;T>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380247"/>
            </content>
        </type>
        <type derived="true" id="type.2342">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;T>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2338"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2341">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;T>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2338"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2292">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;ValueType>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2290"/>
            </content>
        </type>
        <type derived="true" id="type.2294">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;ValueType>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2290"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2293">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;ValueType>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.2290"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1478">
            <name>const UniquePtr&lt;System.IO.ByteStream></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378640"/>
            </content>
        </type>
        <type derived="true" id="type.1511">
            <name>const UniquePtr&lt;System.IO.InputStream></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378790"/>
            </content>
        </type>
        <type derived="true" id="type.1510">
            <name>const UniquePtr&lt;System.IO.OutputStream></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1378780"/>
            </content>
        </type>
        <type derived="true" id="type.2891">
            <name>const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385223"/>
            </content>
        </type>
        <type derived="true" id="type.1385227">
            <name>const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385223"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385226">
            <name>const UniquePtr&lt;System.Text.Parsing.CodeDom.CaseStatement>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385223"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2899">
            <name>const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385282"/>
            </content>
        </type>
        <type derived="true" id="type.1385286">
            <name>const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385282"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385285">
            <name>const UniquePtr&lt;System.Text.Parsing.CodeDom.Catch>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385282"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2898">
            <name>const UniquePtr&lt;System.Text.Parsing.CodeDom.CompoundStatement></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385269"/>
            </content>
        </type>
        <type derived="true" id="type.1385273">
            <name>const UniquePtr&lt;System.Text.Parsing.CodeDom.CompoundStatement>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385269"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385272">
            <name>const UniquePtr&lt;System.Text.Parsing.CodeDom.CompoundStatement>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385269"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2897">
            <name>const UniquePtr&lt;System.Text.Parsing.CodeDom.DefaultStatement></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385253"/>
            </content>
        </type>
        <type derived="true" id="type.1385257">
            <name>const UniquePtr&lt;System.Text.Parsing.CodeDom.DefaultStatement>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385253"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385256">
            <name>const UniquePtr&lt;System.Text.Parsing.CodeDom.DefaultStatement>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385253"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2879">
            <name>const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385095"/>
            </content>
        </type>
        <type derived="true" id="type.1385099">
            <name>const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385095"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385098">
            <name>const UniquePtr&lt;System.Text.Parsing.CodeDom.DomObject>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385095"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2885">
            <name>const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385177"/>
            </content>
        </type>
        <type derived="true" id="type.1385181">
            <name>const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385177"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1385180">
            <name>const UniquePtr&lt;System.Text.Parsing.CodeDom.Statement>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1385177"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2648">
            <name>const UniquePtr&lt;System.Unicode.AgeTable></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381318"/>
            </content>
        </type>
        <type derived="true" id="type.2813">
            <name>const UniquePtr&lt;System.Unicode.AliasTypeTable></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382214"/>
            </content>
        </type>
        <type derived="true" id="type.2747">
            <name>const UniquePtr&lt;System.Unicode.BidiClassTable></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381856"/>
            </content>
        </type>
        <type derived="true" id="type.2780">
            <name>const UniquePtr&lt;System.Unicode.BidiPairedBracketTypeTable></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382035"/>
            </content>
        </type>
        <type derived="true" id="type.2554">
            <name>const UniquePtr&lt;System.Unicode.BinaryPropertyTable></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380800"/>
            </content>
        </type>
        <type derived="true" id="type.2582">
            <name>const UniquePtr&lt;System.Unicode.BlockTable></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1380958"/>
            </content>
        </type>
        <type derived="true" id="type.2826">
            <name>const UniquePtr&lt;System.Unicode.CharacterInfo></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382268"/>
            </content>
        </type>
        <type derived="true" id="type.2850">
            <name>const UniquePtr&lt;System.Unicode.CharacterInfoPage></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382357"/>
            </content>
        </type>
        <type derived="true" id="type.2849">
            <name>const UniquePtr&lt;System.Unicode.CharacterTable></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382348"/>
            </content>
        </type>
        <type derived="true" id="type.2834">
            <name>const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382297"/>
            </content>
        </type>
        <type derived="true" id="type.2858">
            <name>const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoHeader></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382386"/>
            </content>
        </type>
        <type derived="true" id="type.2859">
            <name>const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382395"/>
            </content>
        </type>
        <type derived="true" id="type.2615">
            <name>const UniquePtr&lt;System.Unicode.GeneralCategoryTable></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381139"/>
            </content>
        </type>
        <type derived="true" id="type.2719">
            <name>const UniquePtr&lt;System.Unicode.NumericTypeTable></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381699"/>
            </content>
        </type>
        <type derived="true" id="type.2681">
            <name>const UniquePtr&lt;System.Unicode.ScriptTable></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1381497"/>
            </content>
        </type>
        <type derived="true" id="type.2877">
            <name>const UniquePtr&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382435"/>
            </content>
        </type>
        <type derived="true" id="type.2868">
            <name>const UniquePtr&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382424"/>
            </content>
        </type>
        <type derived="true" id="type.2878">
            <name>const UniquePtr&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382446"/>
            </content>
        </type>
        <type derived="true" id="type.2871">
            <name>const UniquePtr&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382424"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2869">
            <name>const UniquePtr&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1382424"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2113">
            <name>const Value&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378310"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1960">
            <name>const ValueType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378284"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2263">
            <name>const ValueType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378378"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1962">
            <name>const ValueType*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378284"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2264">
            <name>const ValueType*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1378378"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.1377790">
            <name>int</name>
        </type>
        <type basic="true" id="type.1377793">
            <name>ulong</name>
        </type>
    </types>
</library>
