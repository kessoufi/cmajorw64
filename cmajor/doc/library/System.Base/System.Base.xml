<library>
    <name>System.Base</name>
    <style>../../style/cmdoc.css</style>
    <namespaces>
        <namespace id="System">
            <name>System</name>
            <classes>
                <class id="1580615">
                    <name>BinaryFun&lt;Argument1, Argument2, Result></name>
                    <groupName>BinaryFun</groupName>
                    <syntax>abstract public class BinaryFun&lt;Argument1, Argument2, Result>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579843">
                            <name>Argument1</name>
                        </templateParameter>
                        <templateParameter id="1579844">
                            <name>Argument2</name>
                        </templateParameter>
                        <templateParameter id="1579845">
                            <name>Result</name>
                        </templateParameter>
                    </templateParameters>
                    <constraint>
                        <type ref="1579843"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                        <connector>and</connector>
                        <type ref="1579844"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                    </constraint>
                    <typedefs>
                        <typedef id="typedef_FirstArgumentType_198527D4B0D376FD16E3123014752AF8EDDB0E8C">
                            <name>FirstArgumentType</name>
                            <syntax>public typedef Argument1 FirstArgumentType;</syntax>
                            <type ref="1579843"/>
                        </typedef>
                        <typedef id="typedef_ResultType_05D47BB7C8D4766237F109C7F20B84569662237F">
                            <name>ResultType</name>
                            <syntax>public typedef Result ResultType;</syntax>
                            <type ref="1579845"/>
                        </typedef>
                        <typedef id="typedef_SecondArgumentType_FD49857836103FCDE72FA41FF9B0635DEFDC9E06">
                            <name>SecondArgumentType</name>
                            <syntax>public typedef Argument2 SecondArgumentType;</syntax>
                            <type ref="1579844"/>
                        </typedef>
                    </typedefs>
                </class>
                <class id="1580677">
                    <name>BinaryPred&lt;Argument1, Argument2></name>
                    <groupName>BinaryPred</groupName>
                    <syntax> public class BinaryPred&lt;Argument1, Argument2>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579863">
                            <name>Argument1</name>
                        </templateParameter>
                        <templateParameter id="1579864">
                            <name>Argument2</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.150"/>
                    <constraint>
                        <type ref="1579863"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                        <connector>and</connector>
                        <type ref="1579864"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                    </constraint>
                </class>
                <class id="1580840">
                    <name>BitAnd&lt;T></name>
                    <groupName>BitAnd</groupName>
                    <syntax> public class BitAnd&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579906">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.279"/>
                    <constraint>
                        <type ref="1579906"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                    </constraint>
                    <functions>
                        <function id="member_function_op_apply_BitAnd_T_125FB1560925572FBE43BB149B29CC47A4F7636B">
                            <name>operator()(const T&amp; left, const T&amp; right) const</name>
                            <syntax>public nothrow inline T operator()(const T&amp; left, const T&amp; right) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.281"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.281"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1579906"/>
                        </function>
                    </functions>
                </class>
                <class id="1580861">
                    <name>BitNot&lt;T></name>
                    <groupName>BitNot</groupName>
                    <syntax> public class BitNot&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579912">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.294"/>
                    <constraint>
                        <type ref="1579912"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                    </constraint>
                    <functions>
                        <function id="member_function_op_apply_BitNot_T_78C439136E97CAF9FC85DE5F98BD29CD48AE3C19">
                            <name>operator()(const T&amp; operand) const</name>
                            <syntax>public nothrow inline T operator()(const T&amp; operand) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>operand</name>
                                    <type ref="type.296"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1579912"/>
                        </function>
                    </functions>
                </class>
                <class id="1580847">
                    <name>BitOr&lt;T></name>
                    <groupName>BitOr</groupName>
                    <syntax> public class BitOr&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579908">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.284"/>
                    <constraint>
                        <type ref="1579908"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                    </constraint>
                    <functions>
                        <function id="member_function_op_apply_BitOr_T_80EDE8BAF952389AD848DDF530B1E1CCB2F24F5C">
                            <name>operator()(const T&amp; left, const T&amp; right) const</name>
                            <syntax>public nothrow inline T operator()(const T&amp; left, const T&amp; right) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.286"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.286"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1579908"/>
                        </function>
                    </functions>
                </class>
                <class id="1580854">
                    <name>BitXor&lt;T></name>
                    <groupName>BitXor</groupName>
                    <syntax> public class BitXor&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579910">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.289"/>
                    <constraint>
                        <type ref="1579910"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                    </constraint>
                    <functions>
                        <function id="member_function_op_apply_BitXor_T_E1EAEA558776E8E7E857541C7F9F476FA7E46902">
                            <name>operator()(const T&amp; left, const T&amp; right) const</name>
                            <syntax>public nothrow inline T operator()(const T&amp; left, const T&amp; right) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.291"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.291"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1579910"/>
                        </function>
                    </functions>
                </class>
                <class id="1579791">
                    <name>Console</name>
                    <groupName>Console</groupName>
                    <syntax> public static class Console;</syntax>
                    <staticMemberFunctions>
                        <function id="member_function_Error_Console_A1949E425FEE75245DA20218A29A0DBF330B2384">
                            <name>Error()</name>
                            <syntax>public static OutputStream&amp; Error();</syntax>
                            <returnType ref="type.1580452"/>
                        </function>
                        <function id="member_function_Out_Console_FC75221F9DB8A4BAA5FB4F5BB2BC8715C3F6DDDD">
                            <name>Out()</name>
                            <syntax>public static OutputStream&amp; Out();</syntax>
                            <returnType ref="type.1580452"/>
                        </function>
                        <function id="member_function_Read_Console_76EB25644F42D8E59761B24929E134ADA2024A59">
                            <name>Read()</name>
                            <syntax>public static int Read();</syntax>
                            <returnType ref="type.1579455"/>
                        </function>
                        <function id="member_function_ReadLine_Console_535C3566554133A2844986D23CEC066926DC89F7">
                            <name>ReadLine()</name>
                            <syntax>public static String&lt;char> ReadLine();</syntax>
                            <returnType ref="type.1580238"/>
                        </function>
                        <function id="member_function_ReadToEnd_Console_EF6891B78CD6CF76217254D7CB283AB71878F3F2">
                            <name>ReadToEnd()</name>
                            <syntax>public static String&lt;char> ReadToEnd();</syntax>
                            <returnType ref="type.1580238"/>
                        </function>
                        <function id="member_function_SetErr_Console_C35A3D387C7F19AECB0091FBD59CF5907CE4DAB5">
                            <name>SetErr(UniquePtr&lt;System.IO.OutputStream>&amp;&amp; err_)</name>
                            <syntax>public static void SetErr(UniquePtr&lt;System.IO.OutputStream>&amp;&amp; err_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>err_</name>
                                    <type ref="type.1580450"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetOut_Console_5A70A1803FA9ADE730A773EE0C2F06C2310D0534">
                            <name>SetOut(UniquePtr&lt;System.IO.OutputStream>&amp;&amp; out_)</name>
                            <syntax>public static void SetOut(UniquePtr&lt;System.IO.OutputStream>&amp;&amp; out_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>out_</name>
                                    <type ref="type.1580450"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="function_group_Write_D6CFFBB40B209994DCA32A1BCB61084F23E50180">
                            <name>Write</name>
                            <overloads>
                                <overload id="member_function_Write_Console_11EDDE987063090D382CACB65C77221E4A7F01C9">
                                    <name>Write(bool b)</name>
                                    <syntax>public static void Write(bool b);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>b</name>
                                            <type ref="type.1579450"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_Console_97E5518784E55214AB6A648220A87EF9A3212793">
                                    <name>Write(byte b)</name>
                                    <syntax>public static void Write(byte b);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>b</name>
                                            <type ref="type.1579452"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_Console_04842A06479973B30F0B5598E8D6FBD3957C1FE2">
                                    <name>Write(const String&lt;char>&amp; s)</name>
                                    <syntax>public static void Write(const String&lt;char>&amp; s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.1580258"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_Console_E29C237F5B71BE086A058763314BABF0FB769D0D">
                                    <name>Write(const String&lt;uchar>&amp; s)</name>
                                    <syntax>public static void Write(const String&lt;uchar>&amp; s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.1580383"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_Console_1009597105157D581D3F7A25632FC3FF6AD3A5AB">
                                    <name>Write(const String&lt;wchar>&amp; s)</name>
                                    <syntax>public static void Write(const String&lt;wchar>&amp; s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.1580339"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_Console_F32844918C0076C3F4620FBFD28CDB4A4AFED9E7">
                                    <name>Write(const char* s)</name>
                                    <syntax>public static void Write(const char* s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.1579514"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_Console_5A827BCBFA0C8D7749A04194F5584212FF8E5101">
                                    <name>Write(const uchar* s)</name>
                                    <syntax>public static void Write(const uchar* s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.1580367"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_Console_A622FA3579F2EBDC9566A38B19AF29D11A0849E2">
                                    <name>Write(const wchar* s)</name>
                                    <syntax>public static void Write(const wchar* s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.1580323"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_Console_244D2AF19E6B576874CE8BA5CDB2EB5CA5B06CCC">
                                    <name>Write(double d)</name>
                                    <syntax>public static void Write(double d);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>d</name>
                                            <type ref="type.1579460"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_Console_AB753AC902C081754CAAAF5EF69E2A9A70C4444E">
                                    <name>Write(float f)</name>
                                    <syntax>public static void Write(float f);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>f</name>
                                            <type ref="type.1579459"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_Console_47B956DC8FCDC2FB8881CE75290F528433CA0992">
                                    <name>Write(int i)</name>
                                    <syntax>public static void Write(int i);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>i</name>
                                            <type ref="type.1579455"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_Console_9934A22CB6E215489667AB287769BC8ABB3CC154">
                                    <name>Write(long l)</name>
                                    <syntax>public static void Write(long l);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>l</name>
                                            <type ref="type.1579457"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_Console_3100A0A058AFE0E6B9A9DFC9C6B9FD398FC591FB">
                                    <name>Write(sbyte s)</name>
                                    <syntax>public static void Write(sbyte s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.1579451"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_Console_F49A9FA7AC1FA81C2021CAAE3024F2CD36FCF878">
                                    <name>Write(short s)</name>
                                    <syntax>public static void Write(short s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.1579453"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_Console_714F7380CD4C63F6444B6D9A022622C29CAE0ADE">
                                    <name>Write(uint u)</name>
                                    <syntax>public static void Write(uint u);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>u</name>
                                            <type ref="type.1579456"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_Console_A86AAF52F29921959347A9598430A3AA3059F634">
                                    <name>Write(ulong u)</name>
                                    <syntax>public static void Write(ulong u);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>u</name>
                                            <type ref="type.1579458"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_Console_B08ED6A7A5289E232B87E43F7860136D9C08D6F7">
                                    <name>Write(ushort u)</name>
                                    <syntax>public static void Write(ushort u);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>u</name>
                                            <type ref="type.1579454"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_WriteLine_2F852D672D69C7BA9A46D8F682E4DDA11F8EEF5D">
                            <name>WriteLine</name>
                            <overloads>
                                <overload id="member_function_WriteLine_Console_5CBAB27B445440400BBC13DEF7F50F5B885EB1F1">
                                    <name>WriteLine()</name>
                                    <syntax>public static void WriteLine();</syntax>
                                </overload>
                                <overload id="member_function_WriteLine_Console_A7A3DDC20233C5298EC3BB88FC0DD323DCB2CC8E">
                                    <name>WriteLine(bool b)</name>
                                    <syntax>public static void WriteLine(bool b);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>b</name>
                                            <type ref="type.1579450"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_Console_53EF58A683171B00F3266FA634078F5835397C0E">
                                    <name>WriteLine(byte b)</name>
                                    <syntax>public static void WriteLine(byte b);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>b</name>
                                            <type ref="type.1579452"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_Console_9AFE70B5869360AF73603AA32F58F1860A016BBC">
                                    <name>WriteLine(const String&lt;char>&amp; s)</name>
                                    <syntax>public static void WriteLine(const String&lt;char>&amp; s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.1580258"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_Console_8E42026B566E7516D68F5231958D260275A09E17">
                                    <name>WriteLine(const String&lt;uchar>&amp; s)</name>
                                    <syntax>public static void WriteLine(const String&lt;uchar>&amp; s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.1580383"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_Console_088DDB55B189391D51E023AA5CD9AE5CFF24E38B">
                                    <name>WriteLine(const String&lt;wchar>&amp; s)</name>
                                    <syntax>public static void WriteLine(const String&lt;wchar>&amp; s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.1580339"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_Console_9FE02332C7669B128638EA7B0A2A2EE07C3A0A17">
                                    <name>WriteLine(const char* s)</name>
                                    <syntax>public static void WriteLine(const char* s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.1579514"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_Console_73C53B1E6656B22DFFA3FDE928E22845DCC312FB">
                                    <name>WriteLine(const uchar* s)</name>
                                    <syntax>public static void WriteLine(const uchar* s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.1580367"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_Console_BBAF19437A1C4FB1F855D4682FE7528B4C44FF19">
                                    <name>WriteLine(const wchar* s)</name>
                                    <syntax>public static void WriteLine(const wchar* s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.1580323"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_Console_141EB97A02623B00CF2C3BBF055D4526FF02D4F4">
                                    <name>WriteLine(double d)</name>
                                    <syntax>public static void WriteLine(double d);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>d</name>
                                            <type ref="type.1579460"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_Console_B2269EC7526C0A25F1305503007FD658E053EEC5">
                                    <name>WriteLine(float f)</name>
                                    <syntax>public static void WriteLine(float f);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>f</name>
                                            <type ref="type.1579459"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_Console_43E085D6DC0AFFDE3BD4BACCF1334A0C9F87CFD3">
                                    <name>WriteLine(int i)</name>
                                    <syntax>public static void WriteLine(int i);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>i</name>
                                            <type ref="type.1579455"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_Console_065C2B868ECA4045FCA2029B4F254DBE8EB986F9">
                                    <name>WriteLine(long l)</name>
                                    <syntax>public static void WriteLine(long l);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>l</name>
                                            <type ref="type.1579457"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_Console_4DCE4F117C4DAA0F1997B9B88F9455F468C17C62">
                                    <name>WriteLine(sbyte s)</name>
                                    <syntax>public static void WriteLine(sbyte s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.1579451"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_Console_891626425064CE042C02952826F876D6DBFF3427">
                                    <name>WriteLine(short s)</name>
                                    <syntax>public static void WriteLine(short s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.1579453"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_Console_36CA5FEFB07132EFC11AB160F98AAC892DCFFEAD">
                                    <name>WriteLine(uint u)</name>
                                    <syntax>public static void WriteLine(uint u);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>u</name>
                                            <type ref="type.1579456"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_Console_35F936231E4D660975446F174C1A49F2F3138A65">
                                    <name>WriteLine(ulong u)</name>
                                    <syntax>public static void WriteLine(ulong u);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>u</name>
                                            <type ref="type.1579458"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_Console_3CB7B6C8B19F5D30328AC775D604D2CF6BA33D6C">
                                    <name>WriteLine(ushort u)</name>
                                    <syntax>public static void WriteLine(ushort u);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>u</name>
                                            <type ref="type.1579454"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                    </staticMemberFunctions>
                </class>
                <class id="1579792">
                    <name>ConversionException</name>
                    <groupName>ConversionException</groupName>
                    <syntax> public class ConversionException;</syntax>
                    <baseClass ref="1579802"/>
                    <constructors>
                        <constructor id="constructor_ConversionException_F5BEDF73523CC545C5360F370A9CADA8AA7A5BA2">
                            <name>ConversionException(const String&lt;char>&amp; message)</name>
                            <syntax>public nothrow ConversionException(const String&lt;char>&amp; message);</syntax>
                            <parameters>
                                <parameter>
                                    <name>message</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                </class>
                <class id="1580659">
                    <name>Divides&lt;T></name>
                    <groupName>Divides</groupName>
                    <syntax> public class Divides&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579857">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.140"/>
                    <constraint>
                        <type ref="1579857"/>
                        <connector>is</connector>
                        <concept ref="concept_MultiplicativeGroup_157A1A41F23EF7E4F09D855F82CBFB2C95135E91"/>
                    </constraint>
                    <functions>
                        <function id="member_function_op_apply_Divides_T_9A5E78D0EAD1D68B1F4863A624BED8F056585C84">
                            <name>operator()(const T&amp; a, const T&amp; b) const</name>
                            <syntax>public nothrow inline T operator()(const T&amp; a, const T&amp; b) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>a</name>
                                    <type ref="type.142"/>
                                </parameter>
                                <parameter>
                                    <name>b</name>
                                    <type ref="type.142"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1579857"/>
                        </function>
                    </functions>
                </class>
                <class id="1580062">
                    <name>Endl</name>
                    <groupName>Endl</groupName>
                    <syntax> public class Endl;</syntax>
                    <constructors>
                        <constructor id="default_constructor_Endl_96F4DD51A48450AD9254E851984F02D02AEE28B2">
                            <name>Endl()</name>
                            <syntax>public nothrow inline Endl();</syntax>
                        </constructor>
                    </constructors>
                </class>
                <class id="1580705">
                    <name>EqualTo&lt;T, U></name>
                    <groupName>EqualTo</groupName>
                    <syntax> public class EqualTo&lt;T, U>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579872">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="1579873">
                            <name>U</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.172"/>
                    <constraint>
                        <concept ref="concept_EqualityComparable_DDA76B65E48DE418ED1651912DC91E6BCF9A6B60">
                            <params>
                                <type ref="1579872"/>
                                <type ref="1579873"/>
                            </params>
                        </concept>
                    </constraint>
                    <functions>
                        <function id="member_function_op_apply_EqualTo_T_U_EF44BBEF6A2C549B5AC36029DFA484ECC680BB47">
                            <name>operator()(const T&amp; left, const U&amp; right) const</name>
                            <syntax>public nothrow inline bool operator()(const T&amp; left, const U&amp; right) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.176"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.177"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </function>
                    </functions>
                </class>
                <class id="1580694">
                    <name>EqualTo&lt;T></name>
                    <groupName>EqualTo</groupName>
                    <syntax> public class EqualTo&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579870">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.163"/>
                    <constraint>
                        <type ref="1579870"/>
                        <connector>is</connector>
                        <concept ref="concept_Regular_A56EC84F9A51535281FA2B6B074E90F9B3BBCCC1"/>
                    </constraint>
                    <functions>
                        <function id="member_function_op_apply_EqualTo_T_8C6C4E80167CF2288BCDC097EA03BB199CA69C76">
                            <name>operator()(const T&amp; left, const T&amp; right) const</name>
                            <syntax>public nothrow inline bool operator()(const T&amp; left, const T&amp; right) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.169"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.169"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </function>
                    </functions>
                </class>
                <class id="1579802">
                    <name>Exception</name>
                    <groupName>Exception</groupName>
                    <syntax> public class Exception;</syntax>
                    <constructors>
                        <constructor id="constructor_Exception_A65EEDA06AE7D97BE82E1650263EE003A2A82C65">
                            <name>Exception(const String&lt;char>&amp; message_)</name>
                            <syntax>public nothrow Exception(const String&lt;char>&amp; message_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>message_</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Message_Exception_F05211DA566BD657837E945496D33235C0715BAB">
                            <name>Message() const</name>
                            <syntax>public nothrow inline const String&lt;char>&amp; Message() const;</syntax>
                            <returnType ref="type.1580258"/>
                        </function>
                        <function id="member_function_StackTrace_Exception_4209F901AF311F49A160C2F34CFD4DD649B00408">
                            <name>StackTrace() const</name>
                            <syntax>public nothrow inline const String&lt;char>&amp; StackTrace() const;</syntax>
                            <returnType ref="type.1580258"/>
                        </function>
                        <function id="member_function_ToString_Exception_F53F4F0B0FFE04946D55DFAC8B39D2875E2B32DF">
                            <name>ToString() const</name>
                            <syntax>public nothrow virtual String&lt;char> ToString() const;</syntax>
                            <returnType ref="type.1580238"/>
                        </function>
                    </functions>
                </class>
                <class id="1580768">
                    <name>Greater&lt;T, U></name>
                    <groupName>Greater</groupName>
                    <syntax> public class Greater&lt;T, U>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579887">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="1579888">
                            <name>U</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.223"/>
                    <constraint>
                        <concept ref="concept_LessThanComparable_1379E4E0FDC9326039B5F717F269D6FD46537B48">
                            <params>
                                <type ref="1579887"/>
                                <type ref="1579888"/>
                            </params>
                        </concept>
                    </constraint>
                    <functions>
                        <function id="member_function_op_apply_Greater_T_U_B2163A8CE91D5C10305059C0277F69C938C61C0B">
                            <name>operator()(const T&amp; left, const U&amp; right) const</name>
                            <syntax>public nothrow inline bool operator()(const T&amp; left, const U&amp; right) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.227"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.228"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </function>
                    </functions>
                </class>
                <class id="1580757">
                    <name>Greater&lt;T></name>
                    <groupName>Greater</groupName>
                    <syntax> public class Greater&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579885">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.214"/>
                    <constraint>
                        <type ref="1579885"/>
                        <connector>is</connector>
                        <concept ref="concept_LessThanComparable_90ED44B8D61617C1FB8517CD74D7D087E77A0AA5"/>
                    </constraint>
                    <functions>
                        <function id="member_function_op_apply_Greater_T_959E41D9E1F9F0EEA007A88D1E3CA23189FE5CC7">
                            <name>operator()(const T&amp; left, const T&amp; right) const</name>
                            <syntax>public nothrow inline bool operator()(const T&amp; left, const T&amp; right) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.220"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.220"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </function>
                    </functions>
                </class>
                <class id="1580810">
                    <name>GreaterOrEqualTo&lt;T, U></name>
                    <groupName>GreaterOrEqualTo</groupName>
                    <syntax> public class GreaterOrEqualTo&lt;T, U>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579897">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="1579898">
                            <name>U</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.257"/>
                    <constraint>
                        <concept ref="concept_LessThanComparable_1379E4E0FDC9326039B5F717F269D6FD46537B48">
                            <params>
                                <type ref="1579897"/>
                                <type ref="1579898"/>
                            </params>
                        </concept>
                    </constraint>
                    <functions>
                        <function id="member_function_op_apply_GreaterOrEqualTo_T_U_7E41B545B0A05D693DD4C13A529BC47F2135F299">
                            <name>operator()(const T&amp; left, const U&amp; right) const</name>
                            <syntax>public nothrow inline bool operator()(const T&amp; left, const U&amp; right) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.261"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.262"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </function>
                    </functions>
                </class>
                <class id="1580799">
                    <name>GreaterOrEqualTo&lt;T></name>
                    <groupName>GreaterOrEqualTo</groupName>
                    <syntax> public class GreaterOrEqualTo&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579895">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.248"/>
                    <constraint>
                        <type ref="1579895"/>
                        <connector>is</connector>
                        <concept ref="concept_LessThanComparable_90ED44B8D61617C1FB8517CD74D7D087E77A0AA5"/>
                    </constraint>
                    <functions>
                        <function id="member_function_op_apply_GreaterOrEqualTo_T_97DD6B043962EF378CA20DAEE5909D139DD94022">
                            <name>operator()(const T&amp; left, const T&amp; right) const</name>
                            <syntax>public nothrow inline bool operator()(const T&amp; left, const T&amp; right) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.254"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.254"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </function>
                    </functions>
                </class>
                <class id="1580687">
                    <name>Identity&lt;T></name>
                    <groupName>Identity</groupName>
                    <syntax> public class Identity&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579868">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.158"/>
                    <constraint>
                        <type ref="1579868"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                    </constraint>
                    <functions>
                        <function id="member_function_op_apply_Identity_T_42E164CADBD884CF0CD70FC93FE378A71150977F">
                            <name>operator()(const T&amp; x) const</name>
                            <syntax>public nothrow inline const T&amp; operator()(const T&amp; x) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.160"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.160"/>
                        </function>
                    </functions>
                </class>
                <class id="1580747">
                    <name>Less&lt;T, U></name>
                    <groupName>Less</groupName>
                    <syntax> public class Less&lt;T, U>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579882">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="1579883">
                            <name>U</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.206"/>
                    <constraint>
                        <concept ref="concept_LessThanComparable_1379E4E0FDC9326039B5F717F269D6FD46537B48">
                            <params>
                                <type ref="1579882"/>
                                <type ref="1579883"/>
                            </params>
                        </concept>
                    </constraint>
                    <functions>
                        <function id="member_function_op_apply_Less_T_U_FCCCCFCB7B88CF34343E1D5982DE0CC35F7B59D0">
                            <name>operator()(const T&amp; left, const U&amp; right) const</name>
                            <syntax>public nothrow inline bool operator()(const T&amp; left, const U&amp; right) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.210"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.211"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </function>
                    </functions>
                </class>
                <class id="1580736">
                    <name>Less&lt;T></name>
                    <groupName>Less</groupName>
                    <syntax> public class Less&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579880">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.197"/>
                    <constraint>
                        <type ref="1579880"/>
                        <connector>is</connector>
                        <concept ref="concept_LessThanComparable_90ED44B8D61617C1FB8517CD74D7D087E77A0AA5"/>
                    </constraint>
                    <functions>
                        <function id="member_function_op_apply_Less_T_8C16DA6B5C03289B1ACDC73FA5A7BE72C2529F1F">
                            <name>operator()(const T&amp; left, const T&amp; right) const</name>
                            <syntax>public nothrow inline bool operator()(const T&amp; left, const T&amp; right) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.203"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.203"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </function>
                    </functions>
                </class>
                <class id="1580789">
                    <name>LessOrEqualTo&lt;T, U></name>
                    <groupName>LessOrEqualTo</groupName>
                    <syntax> public class LessOrEqualTo&lt;T, U>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579892">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="1579893">
                            <name>U</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.240"/>
                    <constraint>
                        <concept ref="concept_LessThanComparable_1379E4E0FDC9326039B5F717F269D6FD46537B48">
                            <params>
                                <type ref="1579892"/>
                                <type ref="1579893"/>
                            </params>
                        </concept>
                    </constraint>
                    <functions>
                        <function id="member_function_op_apply_LessOrEqualTo_T_U_B05EFBE7CEAD86451D6DF048B19DC7BB806B15C7">
                            <name>operator()(const T&amp; left, const U&amp; right) const</name>
                            <syntax>public nothrow inline bool operator()(const T&amp; left, const U&amp; right) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.244"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.245"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </function>
                    </functions>
                </class>
                <class id="1580778">
                    <name>LessOrEqualTo&lt;T></name>
                    <groupName>LessOrEqualTo</groupName>
                    <syntax> public class LessOrEqualTo&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579890">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.231"/>
                    <constraint>
                        <type ref="1579890"/>
                        <connector>is</connector>
                        <concept ref="concept_LessThanComparable_90ED44B8D61617C1FB8517CD74D7D087E77A0AA5"/>
                    </constraint>
                    <functions>
                        <function id="member_function_op_apply_LessOrEqualTo_T_CEA6B34FB7D9A3566721602B815DF0F8442DE2E2">
                            <name>operator()(const T&amp; left, const T&amp; right) const</name>
                            <syntax>public nothrow inline bool operator()(const T&amp; left, const T&amp; right) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.237"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.237"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </function>
                    </functions>
                </class>
                <class id="1580820">
                    <name>LogicalAnd&lt;T></name>
                    <groupName>LogicalAnd</groupName>
                    <syntax> public class LogicalAnd&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579900">
                            <name>T</name>
                            <default>bool</default>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.265"/>
                    <functions>
                        <function id="member_function_op_apply_LogicalAnd_T_EF241E9479DA8E0319F6610A8FF97251F517A470">
                            <name>operator()(bool left, bool right) const</name>
                            <syntax>public nothrow inline bool operator()(bool left, bool right) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.1579450"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.1579450"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </function>
                    </functions>
                </class>
                <class id="1580832">
                    <name>LogicalNot&lt;T></name>
                    <groupName>LogicalNot</groupName>
                    <syntax> public class LogicalNot&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579904">
                            <name>T</name>
                            <default>bool</default>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.273"/>
                    <functions>
                        <function id="member_function_op_apply_LogicalNot_T_7863084655A0BCE91E861E1919854031471C83ED">
                            <name>operator()(bool operand) const</name>
                            <syntax>public nothrow inline bool operator()(bool operand) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>operand</name>
                                    <type ref="type.1579450"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </function>
                    </functions>
                </class>
                <class id="1580828">
                    <name>LogicalOr&lt;T></name>
                    <groupName>LogicalOr</groupName>
                    <syntax> public class LogicalOr&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579902">
                            <name>T</name>
                            <default>bool</default>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.265"/>
                    <functions>
                        <function id="member_function_op_apply_LogicalOr_T_96E0D8CF97F7F38B2DF3EFDA2358E4C80E53D888">
                            <name>operator()(bool left, bool right) const</name>
                            <syntax>public nothrow inline bool operator()(bool left, bool right) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.1579450"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.1579450"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </function>
                    </functions>
                </class>
                <class id="1580638">
                    <name>Minus&lt;T></name>
                    <groupName>Minus</groupName>
                    <syntax> public class Minus&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579852">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.129"/>
                    <constraint>
                        <type ref="1579852"/>
                        <connector>is</connector>
                        <concept ref="concept_AdditiveGroup_F97CD80E909011A4ADD1F7D285678312B63559D8"/>
                    </constraint>
                    <functions>
                        <function id="member_function_op_apply_Minus_T_EE33C25A5093AB70B79C5AC9C9F52DB39999762F">
                            <name>operator()(const T&amp; a, const T&amp; b) const</name>
                            <syntax>public nothrow inline T operator()(const T&amp; a, const T&amp; b) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>a</name>
                                    <type ref="type.131"/>
                                </parameter>
                                <parameter>
                                    <name>b</name>
                                    <type ref="type.131"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1579852"/>
                        </function>
                    </functions>
                </class>
                <class id="1580645">
                    <name>Multiplies&lt;T></name>
                    <groupName>Multiplies</groupName>
                    <syntax> public class Multiplies&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579854">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.134"/>
                    <constraint>
                        <type ref="1579854"/>
                        <connector>is</connector>
                        <concept ref="concept_MultiplicativeSemigroup_E0D9C06FDD3386C79EFB595ABA20C0B553593F5B"/>
                    </constraint>
                    <functions>
                        <function id="member_function_op_apply_Multiplies_T_DEBCDEB20BE65AD22C76E2C35B9969FA7E67F136">
                            <name>operator()(const T&amp; a, const T&amp; b) const</name>
                            <syntax>public nothrow inline T operator()(const T&amp; a, const T&amp; b) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>a</name>
                                    <type ref="type.136"/>
                                </parameter>
                                <parameter>
                                    <name>b</name>
                                    <type ref="type.136"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1579854"/>
                        </function>
                    </functions>
                </class>
                <class id="1580631">
                    <name>Negate&lt;T></name>
                    <groupName>Negate</groupName>
                    <syntax> public class Negate&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579850">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.124"/>
                    <constraint>
                        <type ref="1579850"/>
                        <connector>is</connector>
                        <concept ref="concept_AdditiveGroup_F97CD80E909011A4ADD1F7D285678312B63559D8"/>
                    </constraint>
                    <functions>
                        <function id="member_function_op_apply_Negate_T_A6657661CE7013CCD484CC3922D5A7CCAA8A8A02">
                            <name>operator()(const T&amp; a) const</name>
                            <syntax>public nothrow inline T operator()(const T&amp; a) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>a</name>
                                    <type ref="type.126"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1579850"/>
                        </function>
                    </functions>
                </class>
                <class id="1580726">
                    <name>NotEqualTo&lt;T, U></name>
                    <groupName>NotEqualTo</groupName>
                    <syntax> public class NotEqualTo&lt;T, U>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579877">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="1579878">
                            <name>U</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.189"/>
                    <constraint>
                        <concept ref="concept_EqualityComparable_DDA76B65E48DE418ED1651912DC91E6BCF9A6B60">
                            <params>
                                <type ref="1579877"/>
                                <type ref="1579878"/>
                            </params>
                        </concept>
                    </constraint>
                    <functions>
                        <function id="member_function_op_apply_NotEqualTo_T_U_ED51C46A3641ACE39939742E4D86BEE8F6580F75">
                            <name>operator()(const T&amp; left, const U&amp; right) const</name>
                            <syntax>public nothrow inline bool operator()(const T&amp; left, const U&amp; right) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.193"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.194"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </function>
                    </functions>
                </class>
                <class id="1580715">
                    <name>NotEqualTo&lt;T></name>
                    <groupName>NotEqualTo</groupName>
                    <syntax> public class NotEqualTo&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579875">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.180"/>
                    <constraint>
                        <type ref="1579875"/>
                        <connector>is</connector>
                        <concept ref="concept_Regular_A56EC84F9A51535281FA2B6B074E90F9B3BBCCC1"/>
                    </constraint>
                    <functions>
                        <function id="member_function_op_apply_NotEqualTo_T_33A58B99A662A88EB62E2EEF270DEB55BD84917E">
                            <name>operator()(const T&amp; left, const T&amp; right) const</name>
                            <syntax>public nothrow inline bool operator()(const T&amp; left, const T&amp; right) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.186"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.186"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </function>
                    </functions>
                </class>
                <class id="1581567">
                    <name>Pair&lt;T, U></name>
                    <groupName>Pair</groupName>
                    <syntax> public class Pair&lt;T, U>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579986">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="1579987">
                            <name>U</name>
                        </templateParameter>
                    </templateParameters>
                    <constraint>
                        <type ref="1579986"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                        <connector>and</connector>
                        <type ref="1579987"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                    </constraint>
                    <constructors>
                        <constructor id="default_constructor_Pair_T_U_D7D7FFB0299D5D3DB78A8353ED735645A0EE5EC6">
                            <name>Pair&lt;T, U>()</name>
                            <syntax>public nothrow Pair&lt;T, U>();</syntax>
                        </constructor>
                        <constructor id="constructor_Pair_T_U_E8E17D81BF98D3E3ABCAA41ABB8A75C46DB94349">
                            <name>Pair&lt;T, U>(T&amp;&amp; first_, U&amp;&amp; second_)</name>
                            <syntax>public nothrow Pair&lt;T, U>(T&amp;&amp; first_, U&amp;&amp; second_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>first_</name>
                                    <type ref="type.711"/>
                                </parameter>
                                <parameter>
                                    <name>second_</name>
                                    <type ref="type.712"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_Pair_T_U_CEE157D4B032C6618F5ECE320EDA4038E929A794">
                            <name>Pair&lt;T, U>(const T&amp; first_, const U&amp; second_)</name>
                            <syntax>public Pair&lt;T, U>(const T&amp; first_, const U&amp; second_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>first_</name>
                                    <type ref="type.709"/>
                                </parameter>
                                <parameter>
                                    <name>second_</name>
                                    <type ref="type.710"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <memberVariables>
                        <memberVariable id="variable_first_22F5053A4BAE9EF643CF2A3EED3B0265315EA848">
                            <name>first</name>
                            <syntax>public T first;</syntax>
                            <type ref="1579986"/>
                        </memberVariable>
                        <memberVariable id="variable_second_A1FBA81A34559C5738A1495A9B4859E26164E232">
                            <name>second</name>
                            <syntax>public U second;</syntax>
                            <type ref="1579987"/>
                        </memberVariable>
                    </memberVariables>
                </class>
                <class id="1580617">
                    <name>Plus&lt;T></name>
                    <groupName>Plus</groupName>
                    <syntax> public class Plus&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579847">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.118"/>
                    <constraint>
                        <type ref="1579847"/>
                        <connector>is</connector>
                        <concept ref="concept_AdditiveSemigroup_A6AEA5AA906561975AEB0E030818D6AB2DFEE63A"/>
                    </constraint>
                    <functions>
                        <function id="member_function_op_apply_Plus_T_F3A329DD0ACCC2FB307228498C72A0D6B6369528">
                            <name>operator()(const T&amp; a, const T&amp; b) const</name>
                            <syntax>public nothrow inline T operator()(const T&amp; a, const T&amp; b) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>a</name>
                                    <type ref="type.120"/>
                                </parameter>
                                <parameter>
                                    <name>b</name>
                                    <type ref="type.120"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1579847"/>
                        </function>
                    </functions>
                </class>
                <class id="1581651">
                    <name>RandomAccessIter&lt;T, R, P></name>
                    <groupName>RandomAccessIter</groupName>
                    <syntax> public class RandomAccessIter&lt;T, R, P>;</syntax>
                    <templateParameters>
                        <templateParameter id="1580006">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="1580007">
                            <name>R</name>
                        </templateParameter>
                        <templateParameter id="1580008">
                            <name>P</name>
                        </templateParameter>
                    </templateParameters>
                    <constructors>
                        <constructor id="default_constructor_RandomAccessIter_T_R_P_E9E6BFEBC130306D9DB95554313DDD489D1D1C09">
                            <name>RandomAccessIter&lt;T, R, P>()</name>
                            <syntax>public nothrow inline RandomAccessIter&lt;T, R, P>();</syntax>
                        </constructor>
                        <constructor id="constructor_RandomAccessIter_T_R_P_C99E8789C360D0C5CF4AC6F005E703B94BA08B03">
                            <name>RandomAccessIter&lt;T, R, P>(P ptr_)</name>
                            <syntax>public nothrow inline explicit RandomAccessIter&lt;T, R, P>(P ptr_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>ptr_</name>
                                    <type ref="1580008"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Ptr_RandomAccessIter_T_R_P_D2545B599EB3DD0359D657513DE21B8CF84C1CB9">
                            <name>Ptr() const</name>
                            <syntax>public nothrow inline P Ptr() const;</syntax>
                            <returnType ref="1580008"/>
                        </function>
                        <function id="member_function_op_star_RandomAccessIter_T_R_P_E4A2A9B832DC03703065282772AAAA1492625471">
                            <name>operator*()</name>
                            <syntax>public nothrow inline R operator*();</syntax>
                            <returnType ref="1580007"/>
                        </function>
                        <function id="member_function_op_plusplus_RandomAccessIter_T_R_P_1F1D91C1D03369BB4E622234F491EB7F1D7E1140">
                            <name>operator++()</name>
                            <syntax>public nothrow inline RandomAccessIter&lt;T, R, P>&amp; operator++();</syntax>
                            <returnType ref="type.768"/>
                        </function>
                        <function id="member_function_op_minusminus_RandomAccessIter_T_R_P_BC412447B992C9821663F715887007D54D6304D7">
                            <name>operator--()</name>
                            <syntax>public nothrow inline RandomAccessIter&lt;T, R, P>&amp; operator--();</syntax>
                            <returnType ref="type.768"/>
                        </function>
                        <function id="member_function_op_arrow_RandomAccessIter_T_R_P_88A6DD201CC54B526099C7C37B02554BF6503AAB">
                            <name>operator->()</name>
                            <syntax>public nothrow inline P operator->();</syntax>
                            <returnType ref="1580008"/>
                        </function>
                        <function id="member_function_op_index_RandomAccessIter_T_R_P_935176423651EBBD6B8A9F2DF9AE06689F11FB8F">
                            <name>operator[](long index)</name>
                            <syntax>public nothrow inline R operator[](long index);</syntax>
                            <parameters>
                                <parameter>
                                    <name>index</name>
                                    <type ref="type.1579457"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1580007"/>
                        </function>
                    </functions>
                    <typedefs>
                        <typedef id="typedef_PointerType_4E87D629BA903C584EDE5690C4107BE3C8775FCF">
                            <name>PointerType</name>
                            <syntax>public typedef P PointerType;</syntax>
                            <type ref="1580008"/>
                        </typedef>
                        <typedef id="typedef_ReferenceType_BD25E752C01E4593A65C2CD6C4EA7159BD3E1E92">
                            <name>ReferenceType</name>
                            <syntax>public typedef R ReferenceType;</syntax>
                            <type ref="1580007"/>
                        </typedef>
                        <typedef id="typedef_ValueType_0FEB2649456ADA80D4AFA2D28FCA98803B47F33F">
                            <name>ValueType</name>
                            <syntax>public typedef T ValueType;</syntax>
                            <type ref="1580006"/>
                        </typedef>
                    </typedefs>
                </class>
                <class id="1580681">
                    <name>Rel&lt;Argument></name>
                    <groupName>Rel</groupName>
                    <syntax> public class Rel&lt;Argument>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579866">
                            <name>Argument</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.152"/>
                    <constraint>
                        <type ref="1579866"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                    </constraint>
                    <typedefs>
                        <typedef id="typedef_Domain_AA016DF8DEBE9C61C532847ED72CCD16081ECE8B">
                            <name>Domain</name>
                            <syntax>public typedef Argument Domain;</syntax>
                            <type ref="1579866"/>
                        </typedef>
                    </typedefs>
                </class>
                <class id="1580666">
                    <name>Remainder&lt;T></name>
                    <groupName>Remainder</groupName>
                    <syntax> public class Remainder&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579859">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.145"/>
                    <constraint>
                        <type ref="1579859"/>
                        <connector>is</connector>
                        <concept ref="concept_EuclideanSemiring_0963A0023F004A1F3DA33F82504C5F5A55402241"/>
                    </constraint>
                    <functions>
                        <function id="member_function_op_apply_Remainder_T_E4B5769D152D337977344B0963D56E46A5B9EE85">
                            <name>operator()(const T&amp; a, const T&amp; b) const</name>
                            <syntax>public nothrow inline T operator()(const T&amp; a, const T&amp; b) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>a</name>
                                    <type ref="type.147"/>
                                </parameter>
                                <parameter>
                                    <name>b</name>
                                    <type ref="type.147"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1579859"/>
                        </function>
                    </functions>
                </class>
                <class id="1581593">
                    <name>SelectFirst&lt;T, U></name>
                    <groupName>SelectFirst</groupName>
                    <syntax> public class SelectFirst&lt;T, U>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579995">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="1579996">
                            <name>U</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.721"/>
                    <constraint>
                        <type ref="1579995"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                        <connector>and</connector>
                        <type ref="1579996"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                    </constraint>
                    <functions>
                        <function id="member_function_op_apply_SelectFirst_T_U_8B301CD50B48A45E86B9D1F907B5042338904C24">
                            <name>operator()(const Pair&lt;T, U>&amp; p) const</name>
                            <syntax>public nothrow const T&amp; operator()(const Pair&lt;T, U>&amp; p) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>p</name>
                                    <type ref="type.723"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.717"/>
                        </function>
                    </functions>
                </class>
                <class id="1581606">
                    <name>SelectSecond&lt;T, U></name>
                    <groupName>SelectSecond</groupName>
                    <syntax> public class SelectSecond&lt;T, U>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579998">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="1579999">
                            <name>U</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.732"/>
                    <constraint>
                        <type ref="1579998"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                        <connector>and</connector>
                        <type ref="1579999"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                    </constraint>
                    <functions>
                        <function id="member_function_op_apply_SelectSecond_T_U_ED091A98F846FF946DA1787B233A06F8A14685BF">
                            <name>operator()(const Pair&lt;T, U>&amp; p) const</name>
                            <syntax>public nothrow const U&amp; operator()(const Pair&lt;T, U>&amp; p) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>p</name>
                                    <type ref="type.734"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.729"/>
                        </function>
                    </functions>
                </class>
                <class id="1580868">
                    <name>ShiftLeft&lt;T></name>
                    <groupName>ShiftLeft</groupName>
                    <syntax> public class ShiftLeft&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579914">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.299"/>
                    <constraint>
                        <type ref="1579914"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                    </constraint>
                    <functions>
                        <function id="member_function_op_apply_ShiftLeft_T_9D6EF7465ABAB41348B261A402E313E059EC11A6">
                            <name>operator()(const T&amp; left, const T&amp; right) const</name>
                            <syntax>public nothrow inline T operator()(const T&amp; left, const T&amp; right) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.301"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.301"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1579914"/>
                        </function>
                    </functions>
                </class>
                <class id="1580875">
                    <name>ShiftRight&lt;T></name>
                    <groupName>ShiftRight</groupName>
                    <syntax> public class ShiftRight&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579916">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.304"/>
                    <constraint>
                        <type ref="1579916"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                    </constraint>
                    <functions>
                        <function id="member_function_op_apply_ShiftRight_T_F72DF4B7B74EC89C3F1BC7F65327469E61A9D43A">
                            <name>operator()(const T&amp; left, const T&amp; right) const</name>
                            <syntax>public nothrow inline T operator()(const T&amp; left, const T&amp; right) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.306"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.306"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1579916"/>
                        </function>
                    </functions>
                </class>
                <class id="1581957">
                    <name>String&lt;CharT></name>
                    <groupName>String</groupName>
                    <syntax> public class String&lt;CharT>;</syntax>
                    <templateParameters>
                        <templateParameter id="1580069">
                            <name>CharT</name>
                        </templateParameter>
                    </templateParameters>
                    <constructors>
                        <constructor id="default_constructor_String_CharT_29D461A5530B53DD4D61100F8616E6F0141822A3">
                            <name>String&lt;CharT>()</name>
                            <syntax>public nothrow inline String&lt;CharT>();</syntax>
                        </constructor>
                        <constructor id="constructor_String_CharT_C5C879FC612EE2D50EB1EE1684871AF4523337FA">
                            <name>String&lt;CharT>(CharT c)</name>
                            <syntax>public nothrow inline String&lt;CharT>(CharT c);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="1580069"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_String_CharT_B6AC189665FCCEA4073A58F7E0B5EB3AE37756DD">
                            <name>String&lt;CharT>(CharT c, long n)</name>
                            <syntax>public nothrow String&lt;CharT>(CharT c, long n);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="1580069"/>
                                </parameter>
                                <parameter>
                                    <name>n</name>
                                    <type ref="type.1579457"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="move_constructor_String_CharT_E94770D2E43443AC7FFB599590E0F661FA7E8E48">
                            <name>String&lt;CharT>(String&lt;CharT>&amp;&amp; that)</name>
                            <syntax>public nothrow String&lt;CharT>(String&lt;CharT>&amp;&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.956"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_String_CharT_54CEC635B6DB59333F8CE1A430F61D69DC60C950">
                            <name>String&lt;CharT>(const CharT* begin, const CharT* end)</name>
                            <syntax>public nothrow inline String&lt;CharT>(const CharT* begin, const CharT* end);</syntax>
                            <parameters>
                                <parameter>
                                    <name>begin</name>
                                    <type ref="type.938"/>
                                </parameter>
                                <parameter>
                                    <name>end</name>
                                    <type ref="type.938"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_String_CharT_2CA8BDACF505B472EBB66EA1FE959881B47C557B">
                            <name>String&lt;CharT>(const CharT* chars_)</name>
                            <syntax>public nothrow inline String&lt;CharT>(const CharT* chars_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>chars_</name>
                                    <type ref="type.938"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_String_CharT_81F1390E4DFBC7446385F4FBAD1D6A04D7D5454C">
                            <name>String&lt;CharT>(const CharT* chars_, long length_)</name>
                            <syntax>public nothrow inline String&lt;CharT>(const CharT* chars_, long length_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>chars_</name>
                                    <type ref="type.938"/>
                                </parameter>
                                <parameter>
                                    <name>length_</name>
                                    <type ref="type.1579457"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="copy_constructor_String_CharT_C24FB35F57832868D348468D7A10FD0B1D5DEACC">
                            <name>String&lt;CharT>(const String&lt;CharT>&amp; that)</name>
                            <syntax>public nothrow String&lt;CharT>(const String&lt;CharT>&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.955"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="function_group_Append_3384F1786D16399F8000E0DDE0BD69BC7F1EDFD5">
                            <name>Append</name>
                            <overloads>
                                <overload id="member_function_Append_String_CharT_B01C1D93547372DB44E782859F4E6A44E528B92C">
                                    <name>Append(CharT c)</name>
                                    <syntax>public nothrow inline String&lt;CharT>&amp; Append(CharT c);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>c</name>
                                            <type ref="1580069"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.957"/>
                                </overload>
                                <overload id="member_function_Append_String_CharT_4D9786F435FA6AB4F1D25BD022441BAD27001E07">
                                    <name>Append(CharT c, long count)</name>
                                    <syntax>public nothrow String&lt;CharT>&amp; Append(CharT c, long count);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>c</name>
                                            <type ref="1580069"/>
                                        </parameter>
                                        <parameter>
                                            <name>count</name>
                                            <type ref="type.1579457"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.957"/>
                                </overload>
                                <overload id="member_function_Append_String_CharT_945B02DC7DD183AADA4D8824D22E409DB6D621C9">
                                    <name>Append(const CharT* that)</name>
                                    <syntax>public nothrow inline String&lt;CharT>&amp; Append(const CharT* that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.938"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.957"/>
                                </overload>
                                <overload id="member_function_Append_String_CharT_4DE9A874DCD924B4554CF01ACD805D43F5B29243">
                                    <name>Append(const CharT* that, long count)</name>
                                    <syntax>public nothrow inline String&lt;CharT>&amp; Append(const CharT* that, long count);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.938"/>
                                        </parameter>
                                        <parameter>
                                            <name>count</name>
                                            <type ref="type.1579457"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.957"/>
                                </overload>
                                <overload id="member_function_Append_String_CharT_AF953C10EFCD2B4E0A06C4E60B009E06D526C70F">
                                    <name>Append(const String&lt;CharT>&amp; that)</name>
                                    <syntax>public nothrow inline String&lt;CharT>&amp; Append(const String&lt;CharT>&amp; that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.955"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.957"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_Begin_B98DC3B4F443038D6BD2E554A73675CFA9803305">
                            <name>Begin</name>
                            <overloads>
                                <overload id="member_function_Begin_String_CharT_1C7434C5C1509FCB8273874A117A5F598D3CFF41">
                                    <name>Begin()</name>
                                    <syntax>public nothrow inline RandomAccessIter&lt;CharT, CharT&amp;, CharT*> Begin();</syntax>
                                    <returnType ref="type.948"/>
                                </overload>
                                <overload id="member_function_Begin_String_CharT_E0456338F52474234FC4141ADEBF106AAC067EBC">
                                    <name>Begin() const</name>
                                    <syntax>public nothrow inline RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*> Begin() const;</syntax>
                                    <returnType ref="type.939"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_CBegin_String_CharT_806177B1DDE3BD1B90EF135EBA980FED4D4847E2">
                            <name>CBegin() const</name>
                            <syntax>public nothrow inline RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*> CBegin() const;</syntax>
                            <returnType ref="type.939"/>
                        </function>
                        <function id="member_function_CEnd_String_CharT_C4991ECD85C1097F0C6FE15EE33CA4715D7DF851">
                            <name>CEnd() const</name>
                            <syntax>public nothrow inline RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*> CEnd() const;</syntax>
                            <returnType ref="type.939"/>
                        </function>
                        <function id="member_function_Capacity_String_CharT_76ED7A77DBF553239117B6DB9A04ADF6E359EC5F">
                            <name>Capacity() const</name>
                            <syntax>public nothrow inline long Capacity() const;</syntax>
                            <returnType ref="type.1579457"/>
                        </function>
                        <function id="member_function_Chars_String_CharT_F23E248DC46A5AA9215CDB25B6779E94681FBAB6">
                            <name>Chars() const</name>
                            <syntax>public nothrow inline const CharT* Chars() const;</syntax>
                            <returnType ref="type.938"/>
                        </function>
                        <function id="member_function_Clear_String_CharT_555B7C51416BF9CB8DAFFD0D30A91B2B3C140EEA">
                            <name>Clear()</name>
                            <syntax>public nothrow void Clear();</syntax>
                        </function>
                        <function id="function_group_End_719DE2F2551BE9D07997C1183D8FB03D35C4C789">
                            <name>End</name>
                            <overloads>
                                <overload id="member_function_End_String_CharT_7B9F5A2992AE503BB3BE810F9F18DFFE181EC279">
                                    <name>End()</name>
                                    <syntax>public nothrow inline RandomAccessIter&lt;CharT, CharT&amp;, CharT*> End();</syntax>
                                    <returnType ref="type.948"/>
                                </overload>
                                <overload id="member_function_End_String_CharT_E6FD9A41937D7412DA86D5281CFDF75230C9B991">
                                    <name>End() const</name>
                                    <syntax>public nothrow inline RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*> End() const;</syntax>
                                    <returnType ref="type.939"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_EndsWith_String_CharT_9AD74EFB156171E6E7D9A1F9F0BBCECD3BFB6768">
                            <name>EndsWith(const String&lt;CharT>&amp; suffix) const</name>
                            <syntax>public nothrow bool EndsWith(const String&lt;CharT>&amp; suffix) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>suffix</name>
                                    <type ref="type.955"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </function>
                        <function id="function_group_Find_4B84A99C2D390EC22809407642D885E9FB71F039">
                            <name>Find</name>
                            <overloads>
                                <overload id="member_function_Find_String_CharT_B841E5EC43AA3BC57349C8F05C99ACCB1DCBE924">
                                    <name>Find(CharT x) const</name>
                                    <syntax>public nothrow inline long Find(CharT x) const;</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="1580069"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.1579457"/>
                                </overload>
                                <overload id="member_function_Find_String_CharT_DAA3CEAF648C599B9E7F6EA97E51A6EB3D6EB692">
                                    <name>Find(CharT x, long start) const</name>
                                    <syntax>public nothrow inline long Find(CharT x, long start) const;</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="1580069"/>
                                        </parameter>
                                        <parameter>
                                            <name>start</name>
                                            <type ref="type.1579457"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.1579457"/>
                                </overload>
                                <overload id="member_function_Find_String_CharT_D3FA677990318357800CC8086E99ACEDFBC80592">
                                    <name>Find(const String&lt;CharT>&amp; s) const</name>
                                    <syntax>public nothrow inline long Find(const String&lt;CharT>&amp; s) const;</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.955"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.1579457"/>
                                </overload>
                                <overload id="member_function_Find_String_CharT_01FB92CBFE0DD605943DB57413C962DAE080E138">
                                    <name>Find(const String&lt;CharT>&amp; s, long start) const</name>
                                    <syntax>public nothrow long Find(const String&lt;CharT>&amp; s, long start) const;</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.955"/>
                                        </parameter>
                                        <parameter>
                                            <name>start</name>
                                            <type ref="type.1579457"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.1579457"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_IsEmpty_String_CharT_EDEFC2684A6AD2925D2AACEE4DC82F21300E5F80">
                            <name>IsEmpty() const</name>
                            <syntax>public nothrow inline bool IsEmpty() const;</syntax>
                            <returnType ref="type.1579450"/>
                        </function>
                        <function id="member_function_Length_String_CharT_5DAD659AF865F217935177758B9A1E040AFCB58F">
                            <name>Length() const</name>
                            <syntax>public nothrow inline long Length() const;</syntax>
                            <returnType ref="type.1579457"/>
                        </function>
                        <function id="function_group_RFind_BACFEF7A7387DDC9E39403ADB72637B7C534D65B">
                            <name>RFind</name>
                            <overloads>
                                <overload id="member_function_RFind_String_CharT_501775BDD15C0720564A405C6EF819588108DA59">
                                    <name>RFind(CharT x) const</name>
                                    <syntax>public nothrow inline long RFind(CharT x) const;</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="1580069"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.1579457"/>
                                </overload>
                                <overload id="member_function_RFind_String_CharT_2D089640FFDC7D86FD013DFF9D7072F59426072B">
                                    <name>RFind(CharT x, long start) const</name>
                                    <syntax>public nothrow inline long RFind(CharT x, long start) const;</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="1580069"/>
                                        </parameter>
                                        <parameter>
                                            <name>start</name>
                                            <type ref="type.1579457"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.1579457"/>
                                </overload>
                                <overload id="member_function_RFind_String_CharT_58B84AC6C40569DFDF021CC1C8C7F8F5F27EBCB4">
                                    <name>RFind(const String&lt;CharT>&amp; s) const</name>
                                    <syntax>public nothrow long RFind(const String&lt;CharT>&amp; s) const;</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.955"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.1579457"/>
                                </overload>
                                <overload id="member_function_RFind_String_CharT_587D6641177E9BD47CD43DF5E7DE4BE52057C69D">
                                    <name>RFind(const String&lt;CharT>&amp; s, long start) const</name>
                                    <syntax>public nothrow long RFind(const String&lt;CharT>&amp; s, long start) const;</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.955"/>
                                        </parameter>
                                        <parameter>
                                            <name>start</name>
                                            <type ref="type.1579457"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.1579457"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_Replace_String_CharT_325F62D7349D25B49FD18A0B817DFE37AE82ACC9">
                            <name>Replace(CharT oldChar, CharT newChar)</name>
                            <syntax>public nothrow void Replace(CharT oldChar, CharT newChar);</syntax>
                            <parameters>
                                <parameter>
                                    <name>oldChar</name>
                                    <type ref="1580069"/>
                                </parameter>
                                <parameter>
                                    <name>newChar</name>
                                    <type ref="1580069"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Reserve_String_CharT_7FDA55A0586C3FA2EE25F8AAEF303E7F7D7B91BD">
                            <name>Reserve(long minLen)</name>
                            <syntax>public nothrow void Reserve(long minLen);</syntax>
                            <parameters>
                                <parameter>
                                    <name>minLen</name>
                                    <type ref="type.1579457"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Split_String_CharT_46D055873501619734E7B6570DE088B66B9E9E09">
                            <name>Split(CharT c)</name>
                            <syntax>public List&lt;String&lt;CharT>> Split(CharT c);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="1580069"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.958"/>
                        </function>
                        <function id="member_function_StartsWith_String_CharT_7D1AC2BA4ED593DFF9EC0D2527EA2BC1B6E4F55E">
                            <name>StartsWith(const String&lt;CharT>&amp; prefix) const</name>
                            <syntax>public nothrow bool StartsWith(const String&lt;CharT>&amp; prefix) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>prefix</name>
                                    <type ref="type.955"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </function>
                        <function id="function_group_Substring_976CEF11C49F80197B71E45FC20642F4632852F5">
                            <name>Substring</name>
                            <overloads>
                                <overload id="member_function_Substring_String_CharT_4AED2BC96E1E901320F2BF6C86B5C85FD0FC2DE2">
                                    <name>Substring(long start) const</name>
                                    <syntax>public nothrow String&lt;CharT> Substring(long start) const;</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>start</name>
                                            <type ref="type.1579457"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.1581957"/>
                                </overload>
                                <overload id="member_function_Substring_String_CharT_752D88D116645EC0E27217EF5A6AA357FDD0EED9">
                                    <name>Substring(long start, long length) const</name>
                                    <syntax>public nothrow String&lt;CharT> Substring(long start, long length) const;</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>start</name>
                                            <type ref="type.1579457"/>
                                        </parameter>
                                        <parameter>
                                            <name>length</name>
                                            <type ref="type.1579457"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.1581957"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_op_assign_1356B3AE4F4E47670036754E54B82BC70EA1B474">
                            <name>operator=</name>
                            <overloads>
                                <overload id="move_assignment_op_assign_String_CharT_89252E277D79EF007E70C20EF909B651F7E70A1A">
                                    <name>operator=(String&lt;CharT>&amp;&amp; that)</name>
                                    <syntax>public nothrow inline void operator=(String&lt;CharT>&amp;&amp; that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.956"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="copy_assignment_op_assign_String_CharT_ADE27383DD8298C16CEE9196D89E8A00B028AC72">
                                    <name>operator=(const String&lt;CharT>&amp; that)</name>
                                    <syntax>public nothrow void operator=(const String&lt;CharT>&amp; that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.955"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_op_index_FF0DC1C6F5497888CD78D46BC4C23547143573BC">
                            <name>operator[]</name>
                            <overloads>
                                <overload id="member_function_op_index_String_CharT_B93B2FD7AFA73DB078DF8D72CB2BAA9C0B764C9A">
                                    <name>operator[](long index)</name>
                                    <syntax>public nothrow inline CharT&amp; operator[](long index);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>index</name>
                                            <type ref="type.1579457"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.946"/>
                                </overload>
                                <overload id="member_function_op_index_String_CharT_FE1CC08D2926E284FE59EBAE679D64116E3597A6">
                                    <name>operator[](long index) const</name>
                                    <syntax>public nothrow inline CharT operator[](long index) const;</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>index</name>
                                            <type ref="type.1579457"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="1580069"/>
                                </overload>
                            </overloads>
                        </function>
                    </functions>
                    <typedefs>
                        <typedef id="typedef_ConstIterator_FE780670FCE36D02CF204504FB1C7E61A6280F97">
                            <name>ConstIterator</name>
                            <syntax>public typedef RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*> ConstIterator;</syntax>
                            <type ref="type.939"/>
                        </typedef>
                        <typedef id="typedef_Iterator_D862C254B0415427201DBBCC0FFF06F2AE4EB964">
                            <name>Iterator</name>
                            <syntax>public typedef RandomAccessIter&lt;CharT, CharT&amp;, CharT*> Iterator;</syntax>
                            <type ref="type.948"/>
                        </typedef>
                    </typedefs>
                </class>
                <class id="1580613">
                    <name>UnaryFun&lt;Argument, Result></name>
                    <groupName>UnaryFun</groupName>
                    <syntax>abstract public class UnaryFun&lt;Argument, Result>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579840">
                            <name>Argument</name>
                        </templateParameter>
                        <templateParameter id="1579841">
                            <name>Result</name>
                        </templateParameter>
                    </templateParameters>
                    <constraint>
                        <type ref="1579840"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                    </constraint>
                    <typedefs>
                        <typedef id="typedef_ArgumentType_43EE83BEA312EF2F73DE967A7BB5FF423F6E344A">
                            <name>ArgumentType</name>
                            <syntax>public typedef Argument ArgumentType;</syntax>
                            <type ref="1579840"/>
                        </typedef>
                        <typedef id="typedef_ResultType_F6524AAC9844B81F930A040E6621E53472545B09">
                            <name>ResultType</name>
                            <syntax>public typedef Result ResultType;</syntax>
                            <type ref="1579841"/>
                        </typedef>
                    </typedefs>
                </class>
                <class id="1580673">
                    <name>UnaryPred&lt;Argument></name>
                    <groupName>UnaryPred</groupName>
                    <syntax> public class UnaryPred&lt;Argument>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579861">
                            <name>Argument</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.148"/>
                    <constraint>
                        <type ref="1579861"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                    </constraint>
                </class>
                <class id="1584089">
                    <name>UniquePtr&lt;T></name>
                    <groupName>UniquePtr</groupName>
                    <syntax> public class UniquePtr&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1580188">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constructors>
                        <constructor id="default_constructor_UniquePtr_T_E7EE1988EB13C505141511E876BBFEFE1C8D8707">
                            <name>UniquePtr&lt;T>()</name>
                            <syntax>public nothrow UniquePtr&lt;T>();</syntax>
                        </constructor>
                        <constructor id="constructor_UniquePtr_T_DD6D1101BC9A141DA69E2148ACA482C029FB9691">
                            <name>UniquePtr&lt;T>(T* ptr_)</name>
                            <syntax>public nothrow explicit UniquePtr&lt;T>(T* ptr_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>ptr_</name>
                                    <type ref="type.1411"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="move_constructor_UniquePtr_T_B889669B1BA8F98EB4AD85B4B75D8289CCB57F41">
                            <name>UniquePtr&lt;T>(UniquePtr&lt;T>&amp;&amp; that)</name>
                            <syntax>public nothrow UniquePtr&lt;T>(UniquePtr&lt;T>&amp;&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.1413"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Get_UniquePtr_T_84A185E63E772D34101667B639B5989D36F16FAA">
                            <name>Get()</name>
                            <syntax>public nothrow inline T* Get();</syntax>
                            <returnType ref="type.1411"/>
                        </function>
                        <function id="member_function_GetPtr_UniquePtr_T_42DAFAEBA5656A072DE1F513EE2372B88C71080C">
                            <name>GetPtr()</name>
                            <syntax>public nothrow inline T* GetPtr();</syntax>
                            <returnType ref="type.1411"/>
                        </function>
                        <function id="member_function_IsNull_UniquePtr_T_9E7249CE0E7032B785739C6557F172D7F52E3C8F">
                            <name>IsNull() const</name>
                            <syntax>public nothrow inline bool IsNull() const;</syntax>
                            <returnType ref="type.1579450"/>
                        </function>
                        <function id="member_function_Release_UniquePtr_T_166BC946AE02C3D27B37EDA6E8A0210836F7EAC5">
                            <name>Release()</name>
                            <syntax>public nothrow inline T* Release();</syntax>
                            <returnType ref="type.1411"/>
                        </function>
                        <function id="function_group_Reset_1FBE561AE572CA9B1667EC544A998329F832199A">
                            <name>Reset</name>
                            <overloads>
                                <overload id="member_function_Reset_UniquePtr_T_27D26FF67F60996009B7279F4ED499393E108A82">
                                    <name>Reset()</name>
                                    <syntax>public nothrow void Reset();</syntax>
                                </overload>
                                <overload id="member_function_Reset_UniquePtr_T_B14EB359947A7B75A2B762C644B937C1ED5E0BBF">
                                    <name>Reset(T* ptr_)</name>
                                    <syntax>public nothrow void Reset(T* ptr_);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>ptr_</name>
                                            <type ref="type.1411"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_Swap_UniquePtr_T_D1AE869CD75E2F3C1B3375D393F8BE3FB014D270">
                            <name>Swap(UniquePtr&lt;T>&amp; that)</name>
                            <syntax>public nothrow void Swap(UniquePtr&lt;T>&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.1417"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="function_group_op_star_AA575E87BD629F474DBF5A3F212DE29D2CE5C6DB">
                            <name>operator*</name>
                            <overloads>
                                <overload id="member_function_op_star_UniquePtr_T_6A12B4577A2DA3107BF707829BC7ED257CBC3891">
                                    <name>operator*()</name>
                                    <syntax>public nothrow inline T&amp; operator*();</syntax>
                                    <returnType ref="type.1415"/>
                                </overload>
                                <overload id="member_function_op_star_UniquePtr_T_902AA20851FE1DF35F2439814ED48C18FFAAC5EB">
                                    <name>operator*() const</name>
                                    <syntax>public nothrow inline const T&amp; operator*() const;</syntax>
                                    <returnType ref="type.1416"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_op_arrow_1AA165D4000489BF4D95084C086A2565790F8B78">
                            <name>operator-></name>
                            <overloads>
                                <overload id="member_function_op_arrow_UniquePtr_T_36F2F96D911351B4E2F710B5B03DF982A3EEC5D3">
                                    <name>operator->()</name>
                                    <syntax>public nothrow inline T* operator->();</syntax>
                                    <returnType ref="type.1411"/>
                                </overload>
                                <overload id="member_function_op_arrow_UniquePtr_T_D011F2C483DB4DFC58F0671A00F0785034104F00">
                                    <name>operator->() const</name>
                                    <syntax>public nothrow inline const T* operator->() const;</syntax>
                                    <returnType ref="type.1414"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_op_assign_8CE02042031D5FEB53FA4339B4AF86FB284A6844">
                            <name>operator=</name>
                            <overloads>
                                <overload id="member_function_op_assign_UniquePtr_T_33BBEEB14E9722CE08C99B1A4399584990E6E374">
                                    <name>operator=(T* ptr_)</name>
                                    <syntax>public nothrow void operator=(T* ptr_);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>ptr_</name>
                                            <type ref="type.1411"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="move_assignment_op_assign_UniquePtr_T_181F63A292592308B7E9E272B87C17D6B2898852">
                                    <name>operator=(UniquePtr&lt;T>&amp;&amp; that)</name>
                                    <syntax>public nothrow void operator=(UniquePtr&lt;T>&amp;&amp; that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.1413"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                    </functions>
                </class>
            </classes>
            <functions>
                <function id="function_Abs_90025BA6745E5EE3FEE93163FB9AA2674DC10D78">
                    <name>Abs&lt;T>(const T&amp; x)</name>
                    <syntax>public nothrow inline T Abs&lt;T>(const T&amp; x);</syntax>
                    <templateParameters>
                        <templateParameter id="1579638">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>x</name>
                            <type ref="type.1580234"/>
                        </parameter>
                    </parameters>
                    <returnType ref="1579638"/>
                    <constraint>
                        <type ref="1579638"/>
                        <connector>is</connector>
                        <concept ref="concept_OrderedAdditiveGroup_816E7DDE277944194F8E6A9829101ABF9F3D1A31"/>
                    </constraint>
                </function>
                <function id="function_Accumulate_BB80E68BF0A78DBF5698B13CB294C5DA5407261F">
                    <name>Accumulate&lt;I, T, Op>(I begin, I end, T init, Op op)</name>
                    <syntax>public nothrow T Accumulate&lt;I, T, Op>(I begin, I end, T init, Op op);</syntax>
                    <templateParameters>
                        <templateParameter id="1579573">
                            <name>I</name>
                        </templateParameter>
                        <templateParameter id="1579574">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="1579575">
                            <name>Op</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>begin</name>
                            <type ref="1579573"/>
                        </parameter>
                        <parameter>
                            <name>end</name>
                            <type ref="1579573"/>
                        </parameter>
                        <parameter>
                            <name>init</name>
                            <type ref="1579574"/>
                        </parameter>
                        <parameter>
                            <name>op</name>
                            <type ref="1579575"/>
                        </parameter>
                    </parameters>
                    <returnType ref="1579574"/>
                    <constraint>
                        <type ref="1579573"/>
                        <connector>is</connector>
                        <concept ref="concept_InputIterator_BC46FC10D5EBF285BDF3232BD222C09235D06406"/>
                        <connector>and</connector>
                        <type ref="1579574"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                        <connector>and</connector>
                        <type ref="1579575"/>
                        <connector>is</connector>
                        <concept ref="concept_BinaryOperation_E7FA71F85EB4750A92189AC872008306AEFD4D01"/>
                        <connector>and</connector>
                        <type ref="1579575"/>
                        <dot>FirstArgumentType</dot>
                        <connector>is</connector>
                        <type ref="1579574"/>
                        <connector>and</connector>
                        <type ref="1579575"/>
                        <dot>SecondArgumentType</dot>
                        <connector>is</connector>
                        <type ref="1579573"/>
                        <dot>ValueType</dot>
                    </constraint>
                </function>
                <function id="function_Aliases_5A7C8DD8BFFBE9837141C98C3133610A8CBFEFF1">
                    <name>Aliases(uchar c)</name>
                    <syntax>public const List&lt;System.Unicode.Alias>&amp; Aliases(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1583929"/>
                </function>
                <function id="function_Align_AA050F19CDD50470B4B42B58C504590C9B623D0D">
                    <name>Align(long n, long alignment)</name>
                    <syntax>public nothrow inline long Align(long n, long alignment);</syntax>
                    <parameters>
                        <parameter>
                            <name>n</name>
                            <type ref="type.1579457"/>
                        </parameter>
                        <parameter>
                            <name>alignment</name>
                            <type ref="type.1579457"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579457"/>
                </function>
                <function id="function_group_CharStr_74D2C6FFE63639D595738D9F3A3632EC83B47611">
                    <name>CharStr</name>
                    <overloads>
                        <overload id="function_CharStr_C3E17C940E667CCE431D6D81C6EBEDC4D9FF67E2">
                            <name>CharStr(char c)</name>
                            <syntax>public nothrow String&lt;char> CharStr(char c);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.1579461"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580238"/>
                        </overload>
                        <overload id="function_CharStr_53189AED9F991D0300F3AB5C4EEF58FABA69B83F">
                            <name>CharStr(uchar c)</name>
                            <syntax>public String&lt;uchar> CharStr(uchar c);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.1579463"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580362"/>
                        </overload>
                        <overload id="function_CharStr_F4FA2B9A6FDE034B203C2567FF26E4D8DD0CF2CF">
                            <name>CharStr(wchar c)</name>
                            <syntax>public String&lt;wchar> CharStr(wchar c);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.1579462"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580318"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_Copy_2FDF42F9858C4435492A3ADC7E9D14574E70B182">
                    <name>Copy&lt;I, O>(I begin, I end, O to)</name>
                    <syntax>public O Copy&lt;I, O>(I begin, I end, O to);</syntax>
                    <templateParameters>
                        <templateParameter id="1579526">
                            <name>I</name>
                        </templateParameter>
                        <templateParameter id="1579527">
                            <name>O</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>begin</name>
                            <type ref="1579526"/>
                        </parameter>
                        <parameter>
                            <name>end</name>
                            <type ref="1579526"/>
                        </parameter>
                        <parameter>
                            <name>to</name>
                            <type ref="1579527"/>
                        </parameter>
                    </parameters>
                    <returnType ref="1579527"/>
                    <constraint>
                        <type ref="1579526"/>
                        <connector>is</connector>
                        <concept ref="concept_InputIterator_BC46FC10D5EBF285BDF3232BD222C09235D06406"/>
                        <connector>and</connector>
                        <type ref="1579527"/>
                        <connector>is</connector>
                        <concept ref="concept_OutputIterator_A454885B47A3648BC107033D34E4A3F5AF8202EC"/>
                        <connector>and</connector>
                        <concept ref="concept_CopyAssignable_C698EC74F187E27A402BB382B7AC4F26FE50056C">
                            <params>
                                <type ref="1579527"/>
                                <dot>ValueType</dot>
                                <type ref="1579526"/>
                                <dot>ValueType</dot>
                            </params>
                        </concept>
                    </constraint>
                </function>
                <function id="function_CopyBackward_EB0290E5DB7EA763712354965C66AA39F84C570D">
                    <name>CopyBackward&lt;I, O>(I begin, I end, O to)</name>
                    <syntax>public O CopyBackward&lt;I, O>(I begin, I end, O to);</syntax>
                    <templateParameters>
                        <templateParameter id="1579528">
                            <name>I</name>
                        </templateParameter>
                        <templateParameter id="1579529">
                            <name>O</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>begin</name>
                            <type ref="1579528"/>
                        </parameter>
                        <parameter>
                            <name>end</name>
                            <type ref="1579528"/>
                        </parameter>
                        <parameter>
                            <name>to</name>
                            <type ref="1579529"/>
                        </parameter>
                    </parameters>
                    <returnType ref="1579529"/>
                    <constraint>
                        <type ref="1579528"/>
                        <connector>is</connector>
                        <concept ref="concept_BidirectionalIterator_96C10B73881A17B6DC9C0804E7DF2141C2E58DA6"/>
                        <connector>and</connector>
                        <type ref="1579529"/>
                        <connector>is</connector>
                        <concept ref="concept_BidirectionalIterator_96C10B73881A17B6DC9C0804E7DF2141C2E58DA6"/>
                        <connector>and</connector>
                        <concept ref="concept_CopyAssignable_C698EC74F187E27A402BB382B7AC4F26FE50056C">
                            <params>
                                <type ref="1579529"/>
                                <dot>ValueType</dot>
                                <type ref="1579528"/>
                                <dot>ValueType</dot>
                            </params>
                        </concept>
                    </constraint>
                </function>
                <function id="function_group_Count_282978D9E78FF3687050BA193C733213FF42007C">
                    <name>Count</name>
                    <overloads>
                        <overload id="function_Count_22B4294D98E9A697179407E6CFF3243FA50768DC">
                            <name>Count&lt;I, P>(I begin, I end, P p)</name>
                            <syntax>public nothrow long Count&lt;I, P>(I begin, I end, P p);</syntax>
                            <templateParameters>
                                <templateParameter id="1579559">
                                    <name>I</name>
                                </templateParameter>
                                <templateParameter id="1579560">
                                    <name>P</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>begin</name>
                                    <type ref="1579559"/>
                                </parameter>
                                <parameter>
                                    <name>end</name>
                                    <type ref="1579559"/>
                                </parameter>
                                <parameter>
                                    <name>p</name>
                                    <type ref="1579560"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579457"/>
                            <constraint>
                                <type ref="1579559"/>
                                <connector>is</connector>
                                <concept ref="concept_InputIterator_BC46FC10D5EBF285BDF3232BD222C09235D06406"/>
                                <connector>and</connector>
                                <type ref="1579560"/>
                                <connector>is</connector>
                                <concept ref="concept_UnaryPredicate_817CC9DCD26C0954E03389EC0C9357DB1879C53F"/>
                                <connector>and</connector>
                                <type ref="1579560"/>
                                <dot>ArgumentType</dot>
                                <connector>is</connector>
                                <type ref="1579559"/>
                                <dot>ValueType</dot>
                            </constraint>
                        </overload>
                        <overload id="function_Count_128406414273F71CE5A1AFABB75C60762A2A7F36">
                            <name>Count&lt;I, T>(I begin, I end, const T&amp; value)</name>
                            <syntax>public nothrow long Count&lt;I, T>(I begin, I end, const T&amp; value);</syntax>
                            <templateParameters>
                                <templateParameter id="1579557">
                                    <name>I</name>
                                </templateParameter>
                                <templateParameter id="1579558">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>begin</name>
                                    <type ref="1579557"/>
                                </parameter>
                                <parameter>
                                    <name>end</name>
                                    <type ref="1579557"/>
                                </parameter>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.1580216"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579457"/>
                            <constraint>
                                <type ref="1579557"/>
                                <connector>is</connector>
                                <concept ref="concept_InputIterator_BC46FC10D5EBF285BDF3232BD222C09235D06406"/>
                                <connector>and</connector>
                                <type ref="1579558"/>
                                <connector>is</connector>
                                <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                                <connector>and</connector>
                                <concept ref="concept_EqualityComparable_DDA76B65E48DE418ED1651912DC91E6BCF9A6B60">
                                    <params>
                                        <type ref="1579558"/>
                                        <type ref="1579557"/>
                                        <dot>ValueType</dot>
                                    </params>
                                </concept>
                            </constraint>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_Distance_B2E1B147CDAAC52D2E95B7152AE4B99AE8D89F48">
                    <name>Distance</name>
                    <overloads>
                        <overload id="function_Distance_DA7A0AE310F0C9181EBC2056684AA5F0317EDC61">
                            <name>Distance&lt;I>(I first, I last) where I is ForwardIterator</name>
                            <syntax>public nothrow long Distance&lt;I>(I first, I last);</syntax>
                            <templateParameters>
                                <templateParameter id="1579534">
                                    <name>I</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>first</name>
                                    <type ref="1579534"/>
                                </parameter>
                                <parameter>
                                    <name>last</name>
                                    <type ref="1579534"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579457"/>
                            <constraint>
                                <type ref="1579534"/>
                                <connector>is</connector>
                                <concept ref="concept_ForwardIterator_4C777D423CF589B8535F29F910C025990ED656D4"/>
                            </constraint>
                        </overload>
                        <overload id="function_Distance_870D44C02BB0837379B61D25F1C0317AFCBF46D3">
                            <name>Distance&lt;I>(I first, I last) where I is RandomAccessIterator</name>
                            <syntax>public nothrow inline long Distance&lt;I>(I first, I last);</syntax>
                            <templateParameters>
                                <templateParameter id="1579535">
                                    <name>I</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>first</name>
                                    <type ref="1579535"/>
                                </parameter>
                                <parameter>
                                    <name>last</name>
                                    <type ref="1579535"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579457"/>
                            <constraint>
                                <type ref="1579535"/>
                                <connector>is</connector>
                                <concept ref="concept_RandomAccessIterator_A5A1B6A4EC8E181A67C733002B3BE437554D3484"/>
                            </constraint>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_EmptyString_A007EA59C5405904E57FEAC91E8BD2E689CF8928">
                    <name>EmptyString</name>
                    <overloads>
                        <overload id="function_EmptyString_F52F8A0ED901A5DEF12A97135276DDDD55DFA899">
                            <name>EmptyString(char x)</name>
                            <syntax>public nothrow const char* EmptyString(char x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.1579461"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579514"/>
                        </overload>
                        <overload id="function_EmptyString_F81C7F5227303B7482365CE701552D8DFE8C01D4">
                            <name>EmptyString(uchar x)</name>
                            <syntax>public nothrow const uchar* EmptyString(uchar x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.1579463"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580367"/>
                        </overload>
                        <overload id="function_EmptyString_57D3009DD1B76C863457CE6708D966300BFA03BB">
                            <name>EmptyString(wchar x)</name>
                            <syntax>public nothrow const wchar* EmptyString(wchar x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.1579462"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580323"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_Equal_3550C4B0690E37F7A7F00C2FD7CACB847544738B">
                    <name>Equal</name>
                    <overloads>
                        <overload id="function_Equal_E634B6C2E44EC065DD64C1D60BC03ED7DF0C214A">
                            <name>Equal&lt;I1, I2, R>(I1 first1, I1 last1, I2 first2, I2 last2, R r)</name>
                            <syntax>public nothrow bool Equal&lt;I1, I2, R>(I1 first1, I1 last1, I2 first2, I2 last2, R r);</syntax>
                            <templateParameters>
                                <templateParameter id="1579622">
                                    <name>I1</name>
                                </templateParameter>
                                <templateParameter id="1579623">
                                    <name>I2</name>
                                </templateParameter>
                                <templateParameter id="1579624">
                                    <name>R</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>first1</name>
                                    <type ref="1579622"/>
                                </parameter>
                                <parameter>
                                    <name>last1</name>
                                    <type ref="1579622"/>
                                </parameter>
                                <parameter>
                                    <name>first2</name>
                                    <type ref="1579623"/>
                                </parameter>
                                <parameter>
                                    <name>last2</name>
                                    <type ref="1579623"/>
                                </parameter>
                                <parameter>
                                    <name>r</name>
                                    <type ref="1579624"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                            <constraint>
                                <type ref="1579622"/>
                                <connector>is</connector>
                                <concept ref="concept_InputIterator_BC46FC10D5EBF285BDF3232BD222C09235D06406"/>
                                <connector>and</connector>
                                <type ref="1579623"/>
                                <connector>is</connector>
                                <concept ref="concept_InputIterator_BC46FC10D5EBF285BDF3232BD222C09235D06406"/>
                                <connector>and</connector>
                                <concept ref="concept_Relation_34B41129EB756D944983CCCA612EDAA19318537E">
                                    <params>
                                        <type ref="1579624"/>
                                        <type ref="1579622"/>
                                        <dot>ValueType</dot>
                                        <type ref="1579623"/>
                                        <dot>ValueType</dot>
                                    </params>
                                </concept>
                            </constraint>
                        </overload>
                        <overload id="function_Equal_97B4D756E62FF853747DF44BD46E8F8183DCD548">
                            <name>Equal&lt;I1, I2>(I1 first1, I1 last1, I2 first2, I2 last2)</name>
                            <syntax>public nothrow inline bool Equal&lt;I1, I2>(I1 first1, I1 last1, I2 first2, I2 last2);</syntax>
                            <templateParameters>
                                <templateParameter id="1579625">
                                    <name>I1</name>
                                </templateParameter>
                                <templateParameter id="1579626">
                                    <name>I2</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>first1</name>
                                    <type ref="1579625"/>
                                </parameter>
                                <parameter>
                                    <name>last1</name>
                                    <type ref="1579625"/>
                                </parameter>
                                <parameter>
                                    <name>first2</name>
                                    <type ref="1579626"/>
                                </parameter>
                                <parameter>
                                    <name>last2</name>
                                    <type ref="1579626"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                            <constraint>
                                <type ref="1579625"/>
                                <connector>is</connector>
                                <concept ref="concept_InputIterator_BC46FC10D5EBF285BDF3232BD222C09235D06406"/>
                                <connector>and</connector>
                                <type ref="1579626"/>
                                <connector>is</connector>
                                <concept ref="concept_InputIterator_BC46FC10D5EBF285BDF3232BD222C09235D06406"/>
                                <connector>and</connector>
                                <concept ref="concept_EqualityComparable_DDA76B65E48DE418ED1651912DC91E6BCF9A6B60">
                                    <params>
                                        <type ref="1579625"/>
                                        <dot>ValueType</dot>
                                        <type ref="1579626"/>
                                        <dot>ValueType</dot>
                                    </params>
                                </concept>
                            </constraint>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_EqualRange_D33FB9282176A4702317CFBA505FBC4DB2D09FF6">
                    <name>EqualRange</name>
                    <overloads>
                        <overload id="function_EqualRange_A5B059C17CFBA45FE12B417BF77A0B9A05ED1AD0">
                            <name>EqualRange&lt;I, T, R>(I first, I last, const T&amp; value, R r)</name>
                            <syntax>public Pair&lt;I, I> EqualRange&lt;I, T, R>(I first, I last, const T&amp; value, R r);</syntax>
                            <templateParameters>
                                <templateParameter id="1579550">
                                    <name>I</name>
                                </templateParameter>
                                <templateParameter id="1579551">
                                    <name>T</name>
                                </templateParameter>
                                <templateParameter id="1579552">
                                    <name>R</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>first</name>
                                    <type ref="1579550"/>
                                </parameter>
                                <parameter>
                                    <name>last</name>
                                    <type ref="1579550"/>
                                </parameter>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.1580210"/>
                                </parameter>
                                <parameter>
                                    <name>r</name>
                                    <type ref="1579552"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580211"/>
                            <constraint>
                                <type ref="1579550"/>
                                <connector>is</connector>
                                <concept ref="concept_ForwardIterator_4C777D423CF589B8535F29F910C025990ED656D4"/>
                                <connector>and</connector>
                                <type ref="1579551"/>
                                <connector>is</connector>
                                <type ref="1579550"/>
                                <dot>ValueType</dot>
                                <connector>and</connector>
                                <type ref="1579552"/>
                                <connector>is</connector>
                                <concept ref="concept_Relation_EA6D5281439518EB11DD9152636FEB86745EE746"/>
                                <connector>and</connector>
                                <type ref="1579552"/>
                                <dot>Domain</dot>
                                <connector>is</connector>
                                <type ref="1579550"/>
                                <dot>ValueType</dot>
                            </constraint>
                        </overload>
                        <overload id="function_EqualRange_3655744E74E542CA8B405F1AE46DAAA375EF8CD8">
                            <name>EqualRange&lt;I, T>(I first, I last, const T&amp; value)</name>
                            <syntax>public Pair&lt;I, I> EqualRange&lt;I, T>(I first, I last, const T&amp; value);</syntax>
                            <templateParameters>
                                <templateParameter id="1579548">
                                    <name>I</name>
                                </templateParameter>
                                <templateParameter id="1579549">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>first</name>
                                    <type ref="1579548"/>
                                </parameter>
                                <parameter>
                                    <name>last</name>
                                    <type ref="1579548"/>
                                </parameter>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.1580205"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580206"/>
                            <constraint>
                                <type ref="1579548"/>
                                <connector>is</connector>
                                <concept ref="concept_ForwardIterator_4C777D423CF589B8535F29F910C025990ED656D4"/>
                                <connector>and</connector>
                                <concept ref="concept_TotallyOrdered_40CD71CFED7B3E26AA555259C8C3A14D6CE666EC">
                                    <params>
                                        <type ref="1579549"/>
                                        <type ref="1579548"/>
                                        <dot>ValueType</dot>
                                    </params>
                                </concept>
                            </constraint>
                        </overload>
                    </overloads>
                </function>
                <function id="function_Factorial_ADDF3E498AF7347A4EB5929E3BC4E1B7FE7ABAFD">
                    <name>Factorial&lt;U>(U n)</name>
                    <syntax>public nothrow U Factorial&lt;U>(U n);</syntax>
                    <templateParameters>
                        <templateParameter id="1579639">
                            <name>U</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>n</name>
                            <type ref="1579639"/>
                        </parameter>
                    </parameters>
                    <returnType ref="1579639"/>
                    <constraint>
                        <type ref="1579639"/>
                        <connector>is</connector>
                        <concept ref="concept_UnsignedInteger_FBFA16F1BC6E6222A9D123737D6648E8035C07E7"/>
                    </constraint>
                </function>
                <function id="function_Fill_C019CFA0AC3AE2FB952310AD09148A11E04BCEE0">
                    <name>Fill&lt;I, T>(I begin, I end, const T&amp; value)</name>
                    <syntax>public nothrow void Fill&lt;I, T>(I begin, I end, const T&amp; value);</syntax>
                    <templateParameters>
                        <templateParameter id="1579571">
                            <name>I</name>
                        </templateParameter>
                        <templateParameter id="1579572">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>begin</name>
                            <type ref="1579571"/>
                        </parameter>
                        <parameter>
                            <name>end</name>
                            <type ref="1579571"/>
                        </parameter>
                        <parameter>
                            <name>value</name>
                            <type ref="type.1580219"/>
                        </parameter>
                    </parameters>
                    <constraint>
                        <type ref="1579572"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                        <connector>and</connector>
                        <type ref="1579571"/>
                        <connector>is</connector>
                        <concept ref="concept_ForwardIterator_4C777D423CF589B8535F29F910C025990ED656D4"/>
                        <connector>and</connector>
                        <type ref="1579571"/>
                        <dot>ValueType</dot>
                        <connector>is</connector>
                        <type ref="1579572"/>
                    </constraint>
                </function>
                <function id="function_group_Find_00EA9FD2513F68653C81116871C96CD8DA28346F">
                    <name>Find</name>
                    <overloads>
                        <overload id="function_Find_EC2E31B48B88E96B52A6376BBC8DC1BFD5C8BED8">
                            <name>Find&lt;I, P>(I begin, I end, P p)</name>
                            <syntax>public nothrow I Find&lt;I, P>(I begin, I end, P p);</syntax>
                            <templateParameters>
                                <templateParameter id="1579555">
                                    <name>I</name>
                                </templateParameter>
                                <templateParameter id="1579556">
                                    <name>P</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>begin</name>
                                    <type ref="1579555"/>
                                </parameter>
                                <parameter>
                                    <name>end</name>
                                    <type ref="1579555"/>
                                </parameter>
                                <parameter>
                                    <name>p</name>
                                    <type ref="1579556"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1579555"/>
                            <constraint>
                                <type ref="1579555"/>
                                <connector>is</connector>
                                <concept ref="concept_InputIterator_BC46FC10D5EBF285BDF3232BD222C09235D06406"/>
                                <connector>and</connector>
                                <type ref="1579556"/>
                                <connector>is</connector>
                                <concept ref="concept_UnaryPredicate_817CC9DCD26C0954E03389EC0C9357DB1879C53F"/>
                                <connector>and</connector>
                                <type ref="1579556"/>
                                <dot>ArgumentType</dot>
                                <connector>is</connector>
                                <type ref="1579555"/>
                                <dot>ValueType</dot>
                            </constraint>
                        </overload>
                        <overload id="function_Find_6AC2F32EC326B46D1D6BAC2E6D74AC3E4DF74BBC">
                            <name>Find&lt;I, T>(I begin, I end, const T&amp; value)</name>
                            <syntax>public nothrow I Find&lt;I, T>(I begin, I end, const T&amp; value);</syntax>
                            <templateParameters>
                                <templateParameter id="1579553">
                                    <name>I</name>
                                </templateParameter>
                                <templateParameter id="1579554">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>begin</name>
                                    <type ref="1579553"/>
                                </parameter>
                                <parameter>
                                    <name>end</name>
                                    <type ref="1579553"/>
                                </parameter>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.1580215"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1579553"/>
                            <constraint>
                                <type ref="1579553"/>
                                <connector>is</connector>
                                <concept ref="concept_InputIterator_BC46FC10D5EBF285BDF3232BD222C09235D06406"/>
                                <connector>and</connector>
                                <type ref="1579554"/>
                                <connector>is</connector>
                                <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                                <connector>and</connector>
                                <concept ref="concept_EqualityComparable_DDA76B65E48DE418ED1651912DC91E6BCF9A6B60">
                                    <params>
                                        <type ref="1579554"/>
                                        <type ref="1579553"/>
                                        <dot>ValueType</dot>
                                    </params>
                                </concept>
                            </constraint>
                        </overload>
                    </overloads>
                </function>
                <function id="function_ForEach_A8EC3A763BB35ADA0C33EB1F0668390E46107196">
                    <name>ForEach&lt;I, F>(I begin, I end, F f)</name>
                    <syntax>public F ForEach&lt;I, F>(I begin, I end, F f);</syntax>
                    <templateParameters>
                        <templateParameter id="1579576">
                            <name>I</name>
                        </templateParameter>
                        <templateParameter id="1579577">
                            <name>F</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>begin</name>
                            <type ref="1579576"/>
                        </parameter>
                        <parameter>
                            <name>end</name>
                            <type ref="1579576"/>
                        </parameter>
                        <parameter>
                            <name>f</name>
                            <type ref="1579577"/>
                        </parameter>
                    </parameters>
                    <returnType ref="1579577"/>
                    <constraint>
                        <type ref="1579576"/>
                        <connector>is</connector>
                        <concept ref="concept_InputIterator_BC46FC10D5EBF285BDF3232BD222C09235D06406"/>
                        <connector>and</connector>
                        <type ref="1579577"/>
                        <connector>is</connector>
                        <concept ref="concept_UnaryFunction_DDD936ABC21BA268C3B3C9F4820F5DFE1ACAA344"/>
                        <connector>and</connector>
                        <type ref="1579577"/>
                        <dot>ArgumentType</dot>
                        <connector>is</connector>
                        <type ref="1579576"/>
                        <dot>ValueType</dot>
                    </constraint>
                </function>
                <function id="function_FullFolding_B3AC6BC4F4E8DFFC1502A274548675D9FF86E98D">
                    <name>FullFolding(uchar c)</name>
                    <syntax>public String&lt;uchar> FullFolding(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1580362"/>
                </function>
                <function id="function_FullLower_3FBEEF110E8FC9D23FD43D3CE52156BC75E75576">
                    <name>FullLower(uchar c)</name>
                    <syntax>public String&lt;uchar> FullLower(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1580362"/>
                </function>
                <function id="function_FullTitle_491702D94251FE5ECC7AF0A040984E00682926BF">
                    <name>FullTitle(uchar c)</name>
                    <syntax>public String&lt;uchar> FullTitle(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1580362"/>
                </function>
                <function id="function_FullUpper_356BB77D6C1267F75356A0AC805E2C7A29FDA67B">
                    <name>FullUpper(uchar c)</name>
                    <syntax>public String&lt;uchar> FullUpper(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1580362"/>
                </function>
                <function id="function_Gcd_D6832CAD9795378A61E5977B4872097C75FF084E">
                    <name>Gcd&lt;T>(T a, T b)</name>
                    <syntax>public nothrow T Gcd&lt;T>(T a, T b);</syntax>
                    <templateParameters>
                        <templateParameter id="1579640">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>a</name>
                            <type ref="1579640"/>
                        </parameter>
                        <parameter>
                            <name>b</name>
                            <type ref="1579640"/>
                        </parameter>
                    </parameters>
                    <returnType ref="1579640"/>
                    <constraint>
                        <type ref="1579640"/>
                        <connector>is</connector>
                        <concept ref="concept_EuclideanSemiring_0963A0023F004A1F3DA33F82504C5F5A55402241"/>
                    </constraint>
                </function>
                <function id="function_GetBidiMirroringGlyph_C80825B9D99268D6C6DD0D870F9641656D1E981F">
                    <name>GetBidiMirroringGlyph(uchar c)</name>
                    <syntax>public uchar GetBidiMirroringGlyph(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579463"/>
                </function>
                <function id="function_GetBidiPairedBracket_F98DACC57B43CC7C10362AFCA888E663895FCBB0">
                    <name>GetBidiPairedBracket(uchar c)</name>
                    <syntax>public uchar GetBidiPairedBracket(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579463"/>
                </function>
                <function id="function_GetBidiPairedBracketType_1CCCD160D47143655D6D8168378FD2D3CBAB4884">
                    <name>GetBidiPairedBracketType(uchar c)</name>
                    <syntax>public BidiPairedBracketTypeId GetBidiPairedBracketType(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="1580147"/>
                </function>
                <function id="function_GetCharacterName_AB2939A118988EA73AA73CB49B5AE7CB82C74725">
                    <name>GetCharacterName(uchar c)</name>
                    <syntax>public String&lt;char> GetCharacterName(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1580238"/>
                </function>
                <function id="function_GetNumericType_7450F88942E0C32255B8CABBB454E5241985AFFA">
                    <name>GetNumericType(uchar c)</name>
                    <syntax>public NumericTypeId GetNumericType(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="1580129"/>
                </function>
                <function id="function_GetNumericValue_CE2CEAA3800DA55D0742F41CB93F03EC6BDA8453">
                    <name>GetNumericValue(uchar c)</name>
                    <syntax>public String&lt;uchar> GetNumericValue(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1580362"/>
                </function>
                <function id="function_GetUnicode1Name_01693B361778DEA381F1A77230EF5DE303C8735E">
                    <name>GetUnicode1Name(uchar c)</name>
                    <syntax>public String&lt;char> GetUnicode1Name(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1580238"/>
                </function>
                <function id="function_HexChar_00DE6E80DF72D8B949F2BABA52F1B265AC259DE5">
                    <name>HexChar(byte nibble)</name>
                    <syntax>public nothrow inline char HexChar(byte nibble);</syntax>
                    <parameters>
                        <parameter>
                            <name>nibble</name>
                            <type ref="type.1579452"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579461"/>
                </function>
                <function id="function_group_HexEscape_F56A52A4316DC2F61FB5013CABF896852FDEE336">
                    <name>HexEscape</name>
                    <overloads>
                        <overload id="function_HexEscape_5BEA61854699D70405C9705964F36E50324F9F79">
                            <name>HexEscape(char c)</name>
                            <syntax>public nothrow String&lt;char> HexEscape(char c);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.1579461"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580238"/>
                        </overload>
                        <overload id="function_HexEscape_759AD947B3D1902E5D2C3B38EB89774294461521">
                            <name>HexEscape(uchar c)</name>
                            <syntax>public nothrow String&lt;char> HexEscape(uchar c);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.1579463"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580238"/>
                        </overload>
                        <overload id="function_HexEscape_B88895F4444BF5A29C654E21AFF376B05C625047">
                            <name>HexEscape(wchar c)</name>
                            <syntax>public nothrow String&lt;char> HexEscape(wchar c);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.1579462"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580238"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_IdentityElement_64054A2AE1627DA8FB2AFC805AD46C54F686E8B6">
                    <name>IdentityElement</name>
                    <overloads>
                        <overload id="function_IdentityElement_195932E6859B059A3783365AEBD2B1F1F9ECFC72">
                            <name>IdentityElement&lt;T>(Multiplies&lt;T> @p0)</name>
                            <syntax>public nothrow inline T IdentityElement&lt;T>(Multiplies&lt;T> @p0);</syntax>
                            <templateParameters>
                                <templateParameter id="1579855">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>@p0</name>
                                    <type ref="type.1580652"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1579855"/>
                            <constraint>
                                <type ref="1579855"/>
                                <connector>is</connector>
                                <concept ref="concept_MultiplicativeMonoid_2EC49957FA822229E3BB5F5014BA5E03C5EACC11"/>
                            </constraint>
                        </overload>
                        <overload id="function_IdentityElement_23689A4B2BEF9D589506E8CBC556B86C244DFBDC">
                            <name>IdentityElement&lt;T>(Plus&lt;T> @p0)</name>
                            <syntax>public nothrow inline T IdentityElement&lt;T>(Plus&lt;T> @p0);</syntax>
                            <templateParameters>
                                <templateParameter id="1579848">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>@p0</name>
                                    <type ref="type.1580624"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1579848"/>
                            <constraint>
                                <type ref="1579848"/>
                                <connector>is</connector>
                                <concept ref="concept_AdditiveMonoid_8D82C7092F575679F72B0CA8C2989C67C1966F37"/>
                            </constraint>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_InsertionSort_48C7614915722ADAB75428F28D3D6EA6D5D795B2">
                    <name>InsertionSort</name>
                    <overloads>
                        <overload id="function_InsertionSort_CD54F75B9BB7C45C7E832874642F184C506F8608">
                            <name>InsertionSort&lt;I, R>(I begin, I end, R r)</name>
                            <syntax>public void InsertionSort&lt;I, R>(I begin, I end, R r);</syntax>
                            <templateParameters>
                                <templateParameter id="1579608">
                                    <name>I</name>
                                </templateParameter>
                                <templateParameter id="1579609">
                                    <name>R</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>begin</name>
                                    <type ref="1579608"/>
                                </parameter>
                                <parameter>
                                    <name>end</name>
                                    <type ref="1579608"/>
                                </parameter>
                                <parameter>
                                    <name>r</name>
                                    <type ref="1579609"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="1579608"/>
                                <connector>is</connector>
                                <concept ref="concept_RandomAccessIterator_A5A1B6A4EC8E181A67C733002B3BE437554D3484"/>
                                <connector>and</connector>
                                <type ref="1579609"/>
                                <connector>is</connector>
                                <concept ref="concept_Relation_EA6D5281439518EB11DD9152636FEB86745EE746"/>
                                <connector>and</connector>
                                <type ref="1579609"/>
                                <dot>Domain</dot>
                                <connector>is</connector>
                                <type ref="1579608"/>
                                <dot>ValueType</dot>
                            </constraint>
                        </overload>
                        <overload id="function_InsertionSort_793612C36923A07D7EBF7E10CAF11B6401F01FCE">
                            <name>InsertionSort&lt;I>(I begin, I end)</name>
                            <syntax>public inline void InsertionSort&lt;I>(I begin, I end);</syntax>
                            <templateParameters>
                                <templateParameter id="1579610">
                                    <name>I</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>begin</name>
                                    <type ref="1579610"/>
                                </parameter>
                                <parameter>
                                    <name>end</name>
                                    <type ref="1579610"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="1579610"/>
                                <connector>is</connector>
                                <concept ref="concept_RandomAccessIterator_A5A1B6A4EC8E181A67C733002B3BE437554D3484"/>
                                <connector>and</connector>
                                <type ref="1579610"/>
                                <dot>ValueType</dot>
                                <connector>is</connector>
                                <concept ref="concept_TotallyOrdered_E99156F9F67A4CDD40DFE7EAC64E14E2CF6B24F2"/>
                            </constraint>
                        </overload>
                    </overloads>
                </function>
                <function id="function_IsAlpha_0B71A7646457C64DFC9CB8AFF548204F99A499FB">
                    <name>IsAlpha(char c)</name>
                    <syntax>public nothrow inline bool IsAlpha(char c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579461"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                </function>
                <function id="function_IsAlphabetic_F64CD05EB4C461103DD6DBEB4369C5389C5C1265">
                    <name>IsAlphabetic(uchar c)</name>
                    <syntax>public bool IsAlphabetic(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                </function>
                <function id="function_IsAlphanumeric_AA8A7F46423CD6A580B5F52AFC2C6E8B3FFF3CA6">
                    <name>IsAlphanumeric(char c)</name>
                    <syntax>public nothrow inline bool IsAlphanumeric(char c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579461"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                </function>
                <function id="function_IsAsciiDigit_9E995EEEE001CBF74462DCD9B1D6E73B5E49C2E7">
                    <name>IsAsciiDigit(uchar c)</name>
                    <syntax>public bool IsAsciiDigit(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                </function>
                <function id="function_IsAsciiHexDigit_772FECE363595975DBD3B1C81ECFC7A738D099EB">
                    <name>IsAsciiHexDigit(uchar c)</name>
                    <syntax>public bool IsAsciiHexDigit(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                </function>
                <function id="function_IsBaseChar_5EDEA09F8E30780A517F43125AD579D24EADB318">
                    <name>IsBaseChar(uchar c)</name>
                    <syntax>public bool IsBaseChar(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                </function>
                <function id="function_IsBidiControl_417FAB125D260EA3863C655999BE1622DC8A679E">
                    <name>IsBidiControl(uchar c)</name>
                    <syntax>public bool IsBidiControl(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                </function>
                <function id="function_IsBidiMirrored_ADF7DEBBAD9481A62C19D988B9709E1A318EC6FC">
                    <name>IsBidiMirrored(uchar c)</name>
                    <syntax>public bool IsBidiMirrored(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                </function>
                <function id="function_IsCasedLetter_BF452A6D685EE6C8F79ECA32525211B0F8698BE3">
                    <name>IsCasedLetter(uchar c)</name>
                    <syntax>public bool IsCasedLetter(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                </function>
                <function id="function_IsClosePunctuation_E5140FBFA3D4F0AF742ADA2615EDFB05C1E14E14">
                    <name>IsClosePunctuation(uchar c)</name>
                    <syntax>public bool IsClosePunctuation(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                </function>
                <function id="function_IsCombining_F7F8A56DB081875C8492D7777D9D283309A713F9">
                    <name>IsCombining(uchar c)</name>
                    <syntax>public bool IsCombining(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                </function>
                <function id="function_IsConnectorPunctuation_2BA4F0EE6CCBCF22B725B43779E58A56017F492C">
                    <name>IsConnectorPunctuation(uchar c)</name>
                    <syntax>public bool IsConnectorPunctuation(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                </function>
                <function id="function_group_IsControl_C8D5092C2FAA2A5994F68FD09D570049312AFADC">
                    <name>IsControl</name>
                    <overloads>
                        <overload id="function_IsControl_29E4C31B4D879D612DD5217F3C18ADB362CFC412">
                            <name>IsControl(char c)</name>
                            <syntax>public nothrow inline bool IsControl(char c);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.1579461"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </overload>
                        <overload id="function_IsControl_E6FAF69308E6ECE6E5CAD7FD7423DBE832206D4D">
                            <name>IsControl(uchar c)</name>
                            <syntax>public bool IsControl(uchar c);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.1579463"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_IsCurrencySymbol_2F9C81FA51D86018AAF5AD9734B3B139ED613B6C">
                    <name>IsCurrencySymbol(uchar c)</name>
                    <syntax>public bool IsCurrencySymbol(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                </function>
                <function id="function_IsDashPunctuation_6A80E052E89A720FF26912078684AE8014D20E93">
                    <name>IsDashPunctuation(uchar c)</name>
                    <syntax>public bool IsDashPunctuation(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                </function>
                <function id="function_IsDecimalNumber_F6BEDEF77C5177E6CBE419F2BF1E7D4C9D4D1CA8">
                    <name>IsDecimalNumber(uchar c)</name>
                    <syntax>public bool IsDecimalNumber(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                </function>
                <function id="function_IsDigit_23FA362FC1ABD0C59BC4A88A48A60EC097BDFDC6">
                    <name>IsDigit(char c)</name>
                    <syntax>public nothrow inline bool IsDigit(char c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579461"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                </function>
                <function id="function_IsEnclosingMark_0558078E2C44A1735F197F5BE45871B9F405D6B2">
                    <name>IsEnclosingMark(uchar c)</name>
                    <syntax>public bool IsEnclosingMark(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                </function>
                <function id="function_IsFinalPunctuation_2A9E3E022EB8B25D7899D33557EC8CC504FE5D00">
                    <name>IsFinalPunctuation(uchar c)</name>
                    <syntax>public bool IsFinalPunctuation(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                </function>
                <function id="function_IsFormat_89D7771BCF9445D1B0C2028F5F760853DBBCB4F7">
                    <name>IsFormat(uchar c)</name>
                    <syntax>public bool IsFormat(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                </function>
                <function id="function_IsGraphemeBase_BA0AA4070EB5768D55636654C4A2BB50B275E46D">
                    <name>IsGraphemeBase(uchar c)</name>
                    <syntax>public bool IsGraphemeBase(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                </function>
                <function id="function_IsGraphemeExtender_59385B0A37736D5042F7B24E8A72761D2AD84F57">
                    <name>IsGraphemeExtender(uchar c)</name>
                    <syntax>public bool IsGraphemeExtender(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                </function>
                <function id="function_group_IsGraphic_969227080C6627961411B3220A7A04361A4799E8">
                    <name>IsGraphic</name>
                    <overloads>
                        <overload id="function_IsGraphic_E4F3E4CB2C1AA3FE71ED03D48877078ED674C8D2">
                            <name>IsGraphic(char c)</name>
                            <syntax>public nothrow inline bool IsGraphic(char c);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.1579461"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </overload>
                        <overload id="function_IsGraphic_A1BD39BE4C705D6139021203834BBDF02D02E494">
                            <name>IsGraphic(uchar c)</name>
                            <syntax>public bool IsGraphic(uchar c);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.1579463"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_IsHexDigit_F6752E330F68FC626E259001345CE74F4A13EA24">
                    <name>IsHexDigit(char c)</name>
                    <syntax>public nothrow inline bool IsHexDigit(char c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579461"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                </function>
                <function id="function_IsIdCont_F2D82207F3D6D65FAECEDC8BE47A40E7A6F592E2">
                    <name>IsIdCont(uchar c)</name>
                    <syntax>public bool IsIdCont(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                </function>
                <function id="function_IsIdStart_A3C012B1DABBB9DCD76D2EC13CF48AC32BDE38E0">
                    <name>IsIdStart(uchar c)</name>
                    <syntax>public bool IsIdStart(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                </function>
                <function id="function_IsInitialPunctuation_73CF684CF3403B20DC2A3F65B2C877BFC4D1848A">
                    <name>IsInitialPunctuation(uchar c)</name>
                    <syntax>public bool IsInitialPunctuation(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                </function>
                <function id="function_IsLetter_D5FF05E3ACF5CB448F06BD0226D27CCB3417E90B">
                    <name>IsLetter(uchar c)</name>
                    <syntax>public bool IsLetter(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                </function>
                <function id="function_IsLetterNumber_F2FB830A88A852ED9B226AB91AA20F574844CF92">
                    <name>IsLetterNumber(uchar c)</name>
                    <syntax>public bool IsLetterNumber(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                </function>
                <function id="function_IsLineSeparator_13BE0FAA2AAF31ADC477A99AC05D1F1CEE26682A">
                    <name>IsLineSeparator(uchar c)</name>
                    <syntax>public bool IsLineSeparator(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                </function>
                <function id="function_IsLower_6BACD6BBD70ACCC951410C05D8E021E4B1EE6CD9">
                    <name>IsLower(char c)</name>
                    <syntax>public nothrow inline bool IsLower(char c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579461"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                </function>
                <function id="function_IsLowerLetter_85ECB7E9B99B104EB1F8385CB4E79FB60E306EEB">
                    <name>IsLowerLetter(uchar c)</name>
                    <syntax>public bool IsLowerLetter(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                </function>
                <function id="function_IsLowercase_7978AC240328DA99155675060C73D06CC1EB3636">
                    <name>IsLowercase(uchar c)</name>
                    <syntax>public bool IsLowercase(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                </function>
                <function id="function_IsMark_5C1380F33BBFA40926A349394255803565C53470">
                    <name>IsMark(uchar c)</name>
                    <syntax>public bool IsMark(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                </function>
                <function id="function_IsMathSymbol_03D3E392F1E09ACCC1687FBD14DAEDDAF4FF856C">
                    <name>IsMathSymbol(uchar c)</name>
                    <syntax>public bool IsMathSymbol(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                </function>
                <function id="function_IsModifierLetter_C1BD0F030E6157E4D6C63F240E2CDC285EEEB4DC">
                    <name>IsModifierLetter(uchar c)</name>
                    <syntax>public bool IsModifierLetter(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                </function>
                <function id="function_IsModifierSymbol_D5AD0512361F779ACC4326D08662A10F3C47B840">
                    <name>IsModifierSymbol(uchar c)</name>
                    <syntax>public bool IsModifierSymbol(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                </function>
                <function id="function_IsNonspacingMark_8073B02660C6E5CAC4635B97CB8690D528EF4923">
                    <name>IsNonspacingMark(uchar c)</name>
                    <syntax>public bool IsNonspacingMark(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                </function>
                <function id="function_IsNumber_21765366768967FCF91CB5655BCBD8D1B0016612">
                    <name>IsNumber(uchar c)</name>
                    <syntax>public bool IsNumber(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                </function>
                <function id="function_IsOpenPunctuation_7B813083B2099F3EFCDF4B14D6CFDC446731350F">
                    <name>IsOpenPunctuation(uchar c)</name>
                    <syntax>public bool IsOpenPunctuation(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                </function>
                <function id="function_IsOther_667AA37A6AA65F4631D5A49C2C0318D2FB14E8F2">
                    <name>IsOther(uchar c)</name>
                    <syntax>public bool IsOther(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                </function>
                <function id="function_IsOtherLetter_CDDDD8602D154AEFB3E29FB9E01A3771CD4D8598">
                    <name>IsOtherLetter(uchar c)</name>
                    <syntax>public bool IsOtherLetter(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                </function>
                <function id="function_IsOtherLower_3956A00063914634EF6A0813CABCA51654240A2A">
                    <name>IsOtherLower(uchar c)</name>
                    <syntax>public bool IsOtherLower(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                </function>
                <function id="function_IsOtherNumber_39BC5513B1F87F0121A43ADBB8EF17AB2FCC26A6">
                    <name>IsOtherNumber(uchar c)</name>
                    <syntax>public bool IsOtherNumber(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                </function>
                <function id="function_IsOtherPunctuation_01CAD183A81B08576F4F6DFA347ED18292598585">
                    <name>IsOtherPunctuation(uchar c)</name>
                    <syntax>public bool IsOtherPunctuation(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                </function>
                <function id="function_IsOtherSymbol_D04A1E8F1927468B817F403029825B3E2F21EA3E">
                    <name>IsOtherSymbol(uchar c)</name>
                    <syntax>public bool IsOtherSymbol(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                </function>
                <function id="function_IsOtherUpper_6B0D6AA2ED915806C77F028EF56A63E16E502A0C">
                    <name>IsOtherUpper(uchar c)</name>
                    <syntax>public bool IsOtherUpper(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                </function>
                <function id="function_IsParagraphSeparator_12BE7D5F7A15FAFA85DE8A82AD592C871956BF90">
                    <name>IsParagraphSeparator(uchar c)</name>
                    <syntax>public bool IsParagraphSeparator(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                </function>
                <function id="function_IsPrintable_6CF5A9529F688BC46AC41DB5AD1B8027DF21D055">
                    <name>IsPrintable(char c)</name>
                    <syntax>public nothrow inline bool IsPrintable(char c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579461"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                </function>
                <function id="function_IsPrivateUse_4EA318F6A8E0FD9230AEE840BF2C4A2FCC75928A">
                    <name>IsPrivateUse(uchar c)</name>
                    <syntax>public bool IsPrivateUse(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                </function>
                <function id="function_group_IsPunctuation_64A14B28D86ADA4B5DF2068E8FFAB2A06591DD74">
                    <name>IsPunctuation</name>
                    <overloads>
                        <overload id="function_IsPunctuation_57C48AFE29E6363BA112CFF6B3595EC687CF7850">
                            <name>IsPunctuation(char c)</name>
                            <syntax>public nothrow inline bool IsPunctuation(char c);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.1579461"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </overload>
                        <overload id="function_IsPunctuation_E8E9DC4B93CFC0D26F21D71ED3FC8468B625DB7A">
                            <name>IsPunctuation(uchar c)</name>
                            <syntax>public bool IsPunctuation(uchar c);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.1579463"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_IsSeparator_A06CDDECA4B024E0407B53D984C3E2760B85BD62">
                    <name>IsSeparator(uchar c)</name>
                    <syntax>public bool IsSeparator(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                </function>
                <function id="function_IsSpace_0F0528438DF3BD6B22C119CEDCD118CA859FF906">
                    <name>IsSpace(char c)</name>
                    <syntax>public nothrow inline bool IsSpace(char c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579461"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                </function>
                <function id="function_IsSpaceSeparator_A5593DE69EF2EEFE0C1D597E035393ED54B7AA43">
                    <name>IsSpaceSeparator(uchar c)</name>
                    <syntax>public bool IsSpaceSeparator(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                </function>
                <function id="function_IsSpacingMark_382F69792F96B14A25225CDD5358ED3A0F279684">
                    <name>IsSpacingMark(uchar c)</name>
                    <syntax>public bool IsSpacingMark(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                </function>
                <function id="function_IsSurrogate_BA9581C3BE8A39B853F2382CFC7EE47FC7929483">
                    <name>IsSurrogate(uchar c)</name>
                    <syntax>public bool IsSurrogate(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                </function>
                <function id="function_IsSymbol_2DE870E05451E073BC5BA44C09EA6962A55154C0">
                    <name>IsSymbol(uchar c)</name>
                    <syntax>public bool IsSymbol(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                </function>
                <function id="function_IsTitleLetter_4CC00CE0AD9F0CEE4274754B5F104674C711E226">
                    <name>IsTitleLetter(uchar c)</name>
                    <syntax>public bool IsTitleLetter(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                </function>
                <function id="function_IsUnassigned_7A9655FCD1C9E3C89581ACA6B30A3D3FC51D151C">
                    <name>IsUnassigned(uchar c)</name>
                    <syntax>public bool IsUnassigned(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                </function>
                <function id="function_IsUpper_4E5CAE1559A89743591F42645063E797B6EC08DA">
                    <name>IsUpper(char c)</name>
                    <syntax>public nothrow inline bool IsUpper(char c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579461"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                </function>
                <function id="function_IsUpperLetter_519164F2126C8F2C47F1CEB256A479ECDAA2683B">
                    <name>IsUpperLetter(uchar c)</name>
                    <syntax>public bool IsUpperLetter(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                </function>
                <function id="function_IsUppercase_1D9AD3532E1AEAB4BFA2EDDAF41F7F5B94AEBD43">
                    <name>IsUppercase(uchar c)</name>
                    <syntax>public bool IsUppercase(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                </function>
                <function id="function_IsWhiteSpace_307B86C58DC980235B9FD6ABAA558DDE38C73207">
                    <name>IsWhiteSpace(uchar c)</name>
                    <syntax>public bool IsWhiteSpace(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                </function>
                <function id="function_LastComponentsEqual_A680294D46249F2F2A986CE8CF252E55918706A6">
                    <name>LastComponentsEqual&lt;CharT>(const String&lt;CharT>&amp; s0, const String&lt;CharT>&amp; s1, CharT componentSeparator)</name>
                    <syntax>public bool LastComponentsEqual&lt;CharT>(const String&lt;CharT>&amp; s0, const String&lt;CharT>&amp; s1, CharT componentSeparator);</syntax>
                    <templateParameters>
                        <templateParameter id="1580075">
                            <name>CharT</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>s0</name>
                            <type ref="type.1582249"/>
                        </parameter>
                        <parameter>
                            <name>s1</name>
                            <type ref="type.1582249"/>
                        </parameter>
                        <parameter>
                            <name>componentSeparator</name>
                            <type ref="1580075"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                </function>
                <function id="function_group_LexicographicalCompare_DD4D017E1D8E3AA9BB7E7D0E4F0E9FC2BEA523CD">
                    <name>LexicographicalCompare</name>
                    <overloads>
                        <overload id="function_LexicographicalCompare_B1A28331D1139AA49A52C8E01E51F180563DD5B3">
                            <name>LexicographicalCompare&lt;I1, I2, R>(I1 first1, I1 last1, I2 first2, I2 last2, R r)</name>
                            <syntax>public nothrow bool LexicographicalCompare&lt;I1, I2, R>(I1 first1, I1 last1, I2 first2, I2 last2, R r);</syntax>
                            <templateParameters>
                                <templateParameter id="1579627">
                                    <name>I1</name>
                                </templateParameter>
                                <templateParameter id="1579628">
                                    <name>I2</name>
                                </templateParameter>
                                <templateParameter id="1579629">
                                    <name>R</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>first1</name>
                                    <type ref="1579627"/>
                                </parameter>
                                <parameter>
                                    <name>last1</name>
                                    <type ref="1579627"/>
                                </parameter>
                                <parameter>
                                    <name>first2</name>
                                    <type ref="1579628"/>
                                </parameter>
                                <parameter>
                                    <name>last2</name>
                                    <type ref="1579628"/>
                                </parameter>
                                <parameter>
                                    <name>r</name>
                                    <type ref="1579629"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                            <constraint>
                                <type ref="1579627"/>
                                <connector>is</connector>
                                <concept ref="concept_InputIterator_BC46FC10D5EBF285BDF3232BD222C09235D06406"/>
                                <connector>and</connector>
                                <type ref="1579628"/>
                                <connector>is</connector>
                                <concept ref="concept_InputIterator_BC46FC10D5EBF285BDF3232BD222C09235D06406"/>
                                <connector>and</connector>
                                Same<concept name="Same">
                                    <params>
                                        <type ref="1579627"/>
                                        <dot>ValueType</dot>
                                        <type ref="1579628"/>
                                        <dot>ValueType</dot>
                                    </params>
                                </concept>
                                <connector>and</connector>
                                <concept ref="concept_Relation_34B41129EB756D944983CCCA612EDAA19318537E">
                                    <params>
                                        <type ref="1579629"/>
                                        <type ref="1579627"/>
                                        <dot>ValueType</dot>
                                        <type ref="1579628"/>
                                        <dot>ValueType</dot>
                                    </params>
                                </concept>
                                <connector>and</connector>
                                <concept ref="concept_Relation_34B41129EB756D944983CCCA612EDAA19318537E">
                                    <params>
                                        <type ref="1579629"/>
                                        <type ref="1579628"/>
                                        <dot>ValueType</dot>
                                        <type ref="1579627"/>
                                        <dot>ValueType</dot>
                                    </params>
                                </concept>
                            </constraint>
                        </overload>
                        <overload id="function_LexicographicalCompare_B65CD071D232324C26DC77FD660D3872361D7F24">
                            <name>LexicographicalCompare&lt;I1, I2>(I1 first1, I1 last1, I2 first2, I2 last2)</name>
                            <syntax>public nothrow inline bool LexicographicalCompare&lt;I1, I2>(I1 first1, I1 last1, I2 first2, I2 last2);</syntax>
                            <templateParameters>
                                <templateParameter id="1579630">
                                    <name>I1</name>
                                </templateParameter>
                                <templateParameter id="1579631">
                                    <name>I2</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>first1</name>
                                    <type ref="1579630"/>
                                </parameter>
                                <parameter>
                                    <name>last1</name>
                                    <type ref="1579630"/>
                                </parameter>
                                <parameter>
                                    <name>first2</name>
                                    <type ref="1579631"/>
                                </parameter>
                                <parameter>
                                    <name>last2</name>
                                    <type ref="1579631"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                            <constraint>
                                <type ref="1579630"/>
                                <connector>is</connector>
                                <concept ref="concept_InputIterator_BC46FC10D5EBF285BDF3232BD222C09235D06406"/>
                                <connector>and</connector>
                                <type ref="1579631"/>
                                <connector>is</connector>
                                <concept ref="concept_InputIterator_BC46FC10D5EBF285BDF3232BD222C09235D06406"/>
                                <connector>and</connector>
                                <concept ref="concept_LessThanComparable_1379E4E0FDC9326039B5F717F269D6FD46537B48">
                                    <params>
                                        <type ref="1579630"/>
                                        <dot>ValueType</dot>
                                        <type ref="1579631"/>
                                        <dot>ValueType</dot>
                                    </params>
                                </concept>
                            </constraint>
                        </overload>
                    </overloads>
                </function>
                <function id="function_LinearInsert_B3BEEF9AC2F8E728CA9FE3CD94FCAC62B1D21A7D">
                    <name>LinearInsert&lt;I, R>(I first, I last, R r)</name>
                    <syntax>public void LinearInsert&lt;I, R>(I first, I last, R r);</syntax>
                    <templateParameters>
                        <templateParameter id="1579606">
                            <name>I</name>
                        </templateParameter>
                        <templateParameter id="1579607">
                            <name>R</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>first</name>
                            <type ref="1579606"/>
                        </parameter>
                        <parameter>
                            <name>last</name>
                            <type ref="1579606"/>
                        </parameter>
                        <parameter>
                            <name>r</name>
                            <type ref="1579607"/>
                        </parameter>
                    </parameters>
                    <constraint>
                        <type ref="1579606"/>
                        <connector>is</connector>
                        <concept ref="concept_RandomAccessIterator_A5A1B6A4EC8E181A67C733002B3BE437554D3484"/>
                        <connector>and</connector>
                        <type ref="1579607"/>
                        <connector>is</connector>
                        <concept ref="concept_Relation_EA6D5281439518EB11DD9152636FEB86745EE746"/>
                        <connector>and</connector>
                        <type ref="1579607"/>
                        <dot>Domain</dot>
                        <connector>is</connector>
                        <type ref="1579606"/>
                        <dot>ValueType</dot>
                    </constraint>
                </function>
                <function id="function_group_LowerBound_4E608FCCE72FB95B0FC5C14BAC36486D3EE255DA">
                    <name>LowerBound</name>
                    <overloads>
                        <overload id="function_LowerBound_2E28E06F097EFF751976D1701EB8A042EFDEFACB">
                            <name>LowerBound&lt;I, T, R>(I first, I last, const T&amp; value, R r)</name>
                            <syntax>public nothrow I LowerBound&lt;I, T, R>(I first, I last, const T&amp; value, R r);</syntax>
                            <templateParameters>
                                <templateParameter id="1579540">
                                    <name>I</name>
                                </templateParameter>
                                <templateParameter id="1579541">
                                    <name>T</name>
                                </templateParameter>
                                <templateParameter id="1579542">
                                    <name>R</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>first</name>
                                    <type ref="1579540"/>
                                </parameter>
                                <parameter>
                                    <name>last</name>
                                    <type ref="1579540"/>
                                </parameter>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.1580202"/>
                                </parameter>
                                <parameter>
                                    <name>r</name>
                                    <type ref="1579542"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1579540"/>
                            <constraint>
                                <type ref="1579540"/>
                                <connector>is</connector>
                                <concept ref="concept_ForwardIterator_4C777D423CF589B8535F29F910C025990ED656D4"/>
                                <connector>and</connector>
                                <type ref="1579541"/>
                                <connector>is</connector>
                                <type ref="1579540"/>
                                <dot>ValueType</dot>
                                <connector>and</connector>
                                <type ref="1579542"/>
                                <connector>is</connector>
                                <concept ref="concept_Relation_EA6D5281439518EB11DD9152636FEB86745EE746"/>
                                <connector>and</connector>
                                <type ref="1579542"/>
                                <dot>Domain</dot>
                                <connector>is</connector>
                                <type ref="1579540"/>
                                <dot>ValueType</dot>
                            </constraint>
                        </overload>
                        <overload id="function_LowerBound_3393C2828B956E5D41846418C3E305EF30FD8304">
                            <name>LowerBound&lt;I, T>(I first, I last, const T&amp; value)</name>
                            <syntax>public nothrow I LowerBound&lt;I, T>(I first, I last, const T&amp; value);</syntax>
                            <templateParameters>
                                <templateParameter id="1579538">
                                    <name>I</name>
                                </templateParameter>
                                <templateParameter id="1579539">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>first</name>
                                    <type ref="1579538"/>
                                </parameter>
                                <parameter>
                                    <name>last</name>
                                    <type ref="1579538"/>
                                </parameter>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.1580201"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1579538"/>
                            <constraint>
                                <type ref="1579538"/>
                                <connector>is</connector>
                                <concept ref="concept_ForwardIterator_4C777D423CF589B8535F29F910C025990ED656D4"/>
                                <connector>and</connector>
                                <concept ref="concept_TotallyOrdered_40CD71CFED7B3E26AA555259C8C3A14D6CE666EC">
                                    <params>
                                        <type ref="1579539"/>
                                        <type ref="1579538"/>
                                        <dot>ValueType</dot>
                                    </params>
                                </concept>
                            </constraint>
                        </overload>
                    </overloads>
                </function>
                <function id="function_MakeCharLiteral_F1BA7D855D42B3A9422870DC8C57E80AF15D39E5">
                    <name>MakeCharLiteral(char c)</name>
                    <syntax>public nothrow String&lt;char> MakeCharLiteral(char c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579461"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1580238"/>
                </function>
                <function id="function_MakePair_091EE2C5D4B6ECC9E0FCE7A1DFD05AEA855F10DD">
                    <name>MakePair&lt;T, U>(const T&amp; first, const U&amp; second)</name>
                    <syntax>public Pair&lt;T, U> MakePair&lt;T, U>(const T&amp; first, const U&amp; second);</syntax>
                    <templateParameters>
                        <templateParameter id="1579992">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="1579993">
                            <name>U</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>first</name>
                            <type ref="type.1581587"/>
                        </parameter>
                        <parameter>
                            <name>second</name>
                            <type ref="type.1581588"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1581589"/>
                    <constraint>
                        <type ref="1579992"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                        <connector>and</connector>
                        <type ref="1579993"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                    </constraint>
                </function>
                <function id="function_MakeStringLiteral_E9A11D27C4B9A51259238780159F42DF979F55F9">
                    <name>MakeStringLiteral(const String&lt;char>&amp; s)</name>
                    <syntax>public nothrow String&lt;char> MakeStringLiteral(const String&lt;char>&amp; s);</syntax>
                    <parameters>
                        <parameter>
                            <name>s</name>
                            <type ref="type.1580258"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1580238"/>
                </function>
                <function id="function_Max_11E2F0915E833A4FD921A5C4929BF5EF0BAD25AC">
                    <name>Max&lt;T>(const T&amp; left, const T&amp; right)</name>
                    <syntax>public nothrow inline const T&amp; Max&lt;T>(const T&amp; left, const T&amp; right);</syntax>
                    <templateParameters>
                        <templateParameter id="1579520">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>left</name>
                            <type ref="type.1580195"/>
                        </parameter>
                        <parameter>
                            <name>right</name>
                            <type ref="type.1580195"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1580195"/>
                    <constraint>
                        <type ref="1579520"/>
                        <connector>is</connector>
                        <concept ref="concept_LessThanComparable_90ED44B8D61617C1FB8517CD74D7D087E77A0AA5"/>
                    </constraint>
                </function>
                <function id="function_group_MaxElement_B18B87616B198D6C5C665E39BCF9776CFAFB1BE5">
                    <name>MaxElement</name>
                    <overloads>
                        <overload id="function_MaxElement_18A6F76F9C57B57C6CA13F1FDBD150E5B139F68F">
                            <name>MaxElement&lt;I, R>(I first, I last, R r)</name>
                            <syntax>public nothrow I MaxElement&lt;I, R>(I first, I last, R r);</syntax>
                            <templateParameters>
                                <templateParameter id="1579636">
                                    <name>I</name>
                                </templateParameter>
                                <templateParameter id="1579637">
                                    <name>R</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>first</name>
                                    <type ref="1579636"/>
                                </parameter>
                                <parameter>
                                    <name>last</name>
                                    <type ref="1579636"/>
                                </parameter>
                                <parameter>
                                    <name>r</name>
                                    <type ref="1579637"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1579636"/>
                            <constraint>
                                <type ref="1579636"/>
                                <connector>is</connector>
                                <concept ref="concept_ForwardIterator_4C777D423CF589B8535F29F910C025990ED656D4"/>
                                <connector>and</connector>
                                <type ref="1579637"/>
                                <connector>is</connector>
                                <concept ref="concept_Relation_EA6D5281439518EB11DD9152636FEB86745EE746"/>
                                <connector>and</connector>
                                <type ref="1579637"/>
                                <dot>Domain</dot>
                                <connector>is</connector>
                                <type ref="1579636"/>
                                <dot>ValueType</dot>
                            </constraint>
                        </overload>
                        <overload id="function_MaxElement_0569066B2F7ED5D0E43CBF8F0CC9DC344184C6C5">
                            <name>MaxElement&lt;I>(I first, I last)</name>
                            <syntax>public nothrow I MaxElement&lt;I>(I first, I last);</syntax>
                            <templateParameters>
                                <templateParameter id="1579635">
                                    <name>I</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>first</name>
                                    <type ref="1579635"/>
                                </parameter>
                                <parameter>
                                    <name>last</name>
                                    <type ref="1579635"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1579635"/>
                            <constraint>
                                <type ref="1579635"/>
                                <connector>is</connector>
                                <concept ref="concept_ForwardIterator_4C777D423CF589B8535F29F910C025990ED656D4"/>
                                <connector>and</connector>
                                <type ref="1579635"/>
                                <dot>ValueType</dot>
                                <connector>is</connector>
                                <concept ref="concept_TotallyOrdered_E99156F9F67A4CDD40DFE7EAC64E14E2CF6B24F2"/>
                            </constraint>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_Median_E3C49FEEE2E334F6677C40FEE29BE673069DAB94">
                    <name>Median</name>
                    <overloads>
                        <overload id="function_Median_3439D2C390416494892CC4F6B67DCCD4815C9B71">
                            <name>Median&lt;T, R>(const T&amp; a, const T&amp; b, const T&amp; c, R r)</name>
                            <syntax>public nothrow const T&amp; Median&lt;T, R>(const T&amp; a, const T&amp; b, const T&amp; c, R r);</syntax>
                            <templateParameters>
                                <templateParameter id="1579597">
                                    <name>T</name>
                                </templateParameter>
                                <templateParameter id="1579598">
                                    <name>R</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>a</name>
                                    <type ref="type.1580226"/>
                                </parameter>
                                <parameter>
                                    <name>b</name>
                                    <type ref="type.1580226"/>
                                </parameter>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.1580226"/>
                                </parameter>
                                <parameter>
                                    <name>r</name>
                                    <type ref="1579598"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580226"/>
                            <constraint>
                                <type ref="1579597"/>
                                <connector>is</connector>
                                <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                                <connector>and</connector>
                                <type ref="1579598"/>
                                <connector>is</connector>
                                <concept ref="concept_Relation_EA6D5281439518EB11DD9152636FEB86745EE746"/>
                                <connector>and</connector>
                                <type ref="1579598"/>
                                <dot>Domain</dot>
                                <connector>is</connector>
                                <type ref="1579597"/>
                            </constraint>
                        </overload>
                        <overload id="function_Median_09C3D002E4CA4B392F51A688106F04DDEAD37EC6">
                            <name>Median&lt;T>(const T&amp; a, const T&amp; b, const T&amp; c)</name>
                            <syntax>public nothrow const T&amp; Median&lt;T>(const T&amp; a, const T&amp; b, const T&amp; c);</syntax>
                            <templateParameters>
                                <templateParameter id="1579599">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>a</name>
                                    <type ref="type.1580227"/>
                                </parameter>
                                <parameter>
                                    <name>b</name>
                                    <type ref="type.1580227"/>
                                </parameter>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.1580227"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580227"/>
                            <constraint>
                                <type ref="1579599"/>
                                <connector>is</connector>
                                <concept ref="concept_TotallyOrdered_E99156F9F67A4CDD40DFE7EAC64E14E2CF6B24F2"/>
                            </constraint>
                        </overload>
                    </overloads>
                </function>
                <function id="function_MemGrow_FA58EDDC386D5CFBCBFE74FD5DF1995A285F502C">
                    <name>MemGrow(long size)</name>
                    <syntax>public nothrow inline long MemGrow(long size);</syntax>
                    <parameters>
                        <parameter>
                            <name>size</name>
                            <type ref="type.1579457"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579457"/>
                </function>
                <function id="function_Min_154291870AAF55344ADDB25B04531CEFB58AE9A6">
                    <name>Min&lt;T>(const T&amp; left, const T&amp; right)</name>
                    <syntax>public nothrow inline const T&amp; Min&lt;T>(const T&amp; left, const T&amp; right);</syntax>
                    <templateParameters>
                        <templateParameter id="1579519">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>left</name>
                            <type ref="type.1580194"/>
                        </parameter>
                        <parameter>
                            <name>right</name>
                            <type ref="type.1580194"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1580194"/>
                    <constraint>
                        <type ref="1579519"/>
                        <connector>is</connector>
                        <concept ref="concept_LessThanComparable_90ED44B8D61617C1FB8517CD74D7D087E77A0AA5"/>
                    </constraint>
                </function>
                <function id="function_group_MinElement_4CEA339A46E33298E351B648874ED60629D5014C">
                    <name>MinElement</name>
                    <overloads>
                        <overload id="function_MinElement_14121F7E4755B0D3CCC464F5E0F7AA6F71918FDA">
                            <name>MinElement&lt;I, R>(I first, I last, R r)</name>
                            <syntax>public nothrow I MinElement&lt;I, R>(I first, I last, R r);</syntax>
                            <templateParameters>
                                <templateParameter id="1579633">
                                    <name>I</name>
                                </templateParameter>
                                <templateParameter id="1579634">
                                    <name>R</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>first</name>
                                    <type ref="1579633"/>
                                </parameter>
                                <parameter>
                                    <name>last</name>
                                    <type ref="1579633"/>
                                </parameter>
                                <parameter>
                                    <name>r</name>
                                    <type ref="1579634"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1579633"/>
                            <constraint>
                                <type ref="1579633"/>
                                <connector>is</connector>
                                <concept ref="concept_ForwardIterator_4C777D423CF589B8535F29F910C025990ED656D4"/>
                                <connector>and</connector>
                                <type ref="1579634"/>
                                <connector>is</connector>
                                <concept ref="concept_Relation_EA6D5281439518EB11DD9152636FEB86745EE746"/>
                                <connector>and</connector>
                                <type ref="1579634"/>
                                <dot>Domain</dot>
                                <connector>is</connector>
                                <type ref="1579633"/>
                                <dot>ValueType</dot>
                            </constraint>
                        </overload>
                        <overload id="function_MinElement_FBC46B08EE4A2E1F274D38B4AB68EA8B4DE92EBC">
                            <name>MinElement&lt;I>(I first, I last)</name>
                            <syntax>public nothrow I MinElement&lt;I>(I first, I last);</syntax>
                            <templateParameters>
                                <templateParameter id="1579632">
                                    <name>I</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>first</name>
                                    <type ref="1579632"/>
                                </parameter>
                                <parameter>
                                    <name>last</name>
                                    <type ref="1579632"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1579632"/>
                            <constraint>
                                <type ref="1579632"/>
                                <connector>is</connector>
                                <concept ref="concept_ForwardIterator_4C777D423CF589B8535F29F910C025990ED656D4"/>
                                <connector>and</connector>
                                <type ref="1579632"/>
                                <dot>ValueType</dot>
                                <connector>is</connector>
                                <concept ref="concept_TotallyOrdered_E99156F9F67A4CDD40DFE7EAC64E14E2CF6B24F2"/>
                            </constraint>
                        </overload>
                    </overloads>
                </function>
                <function id="function_Move_B45B0CB721AA583827DCF8FAC44011D6ACED05DE">
                    <name>Move&lt;I, O>(I begin, I end, O to)</name>
                    <syntax>public O Move&lt;I, O>(I begin, I end, O to);</syntax>
                    <templateParameters>
                        <templateParameter id="1579530">
                            <name>I</name>
                        </templateParameter>
                        <templateParameter id="1579531">
                            <name>O</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>begin</name>
                            <type ref="1579530"/>
                        </parameter>
                        <parameter>
                            <name>end</name>
                            <type ref="1579530"/>
                        </parameter>
                        <parameter>
                            <name>to</name>
                            <type ref="1579531"/>
                        </parameter>
                    </parameters>
                    <returnType ref="1579531"/>
                    <constraint>
                        <type ref="1579530"/>
                        <connector>is</connector>
                        <concept ref="concept_InputIterator_BC46FC10D5EBF285BDF3232BD222C09235D06406"/>
                        <connector>and</connector>
                        <type ref="1579531"/>
                        <connector>is</connector>
                        <concept ref="concept_OutputIterator_A454885B47A3648BC107033D34E4A3F5AF8202EC"/>
                        <connector>and</connector>
                        <type ref="1579531"/>
                        <dot>ValueType</dot>
                        <connector>is</connector>
                        <type ref="1579530"/>
                        <dot>ValueType</dot>
                        <connector>and</connector>
                        <type ref="1579530"/>
                        <dot>ValueType</dot>
                        <connector>is</connector>
                        <concept ref="concept_MoveAssignable_DF00F01AE5185608C8DBD5AB4BF79B2C07558F59"/>
                    </constraint>
                </function>
                <function id="function_MoveBackward_059B97D0C776DC209D710E5193DAB43DCCC133BB">
                    <name>MoveBackward&lt;I, O>(I begin, I end, O to)</name>
                    <syntax>public O MoveBackward&lt;I, O>(I begin, I end, O to);</syntax>
                    <templateParameters>
                        <templateParameter id="1579532">
                            <name>I</name>
                        </templateParameter>
                        <templateParameter id="1579533">
                            <name>O</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>begin</name>
                            <type ref="1579532"/>
                        </parameter>
                        <parameter>
                            <name>end</name>
                            <type ref="1579532"/>
                        </parameter>
                        <parameter>
                            <name>to</name>
                            <type ref="1579533"/>
                        </parameter>
                    </parameters>
                    <returnType ref="1579533"/>
                    <constraint>
                        <type ref="1579532"/>
                        <connector>is</connector>
                        <concept ref="concept_BidirectionalIterator_96C10B73881A17B6DC9C0804E7DF2141C2E58DA6"/>
                        <connector>and</connector>
                        <type ref="1579533"/>
                        <connector>is</connector>
                        <concept ref="concept_BidirectionalIterator_96C10B73881A17B6DC9C0804E7DF2141C2E58DA6"/>
                        <connector>and</connector>
                        <type ref="1579533"/>
                        <dot>ValueType</dot>
                        <connector>is</connector>
                        <type ref="1579532"/>
                        <dot>ValueType</dot>
                        <connector>and</connector>
                        <type ref="1579532"/>
                        <dot>ValueType</dot>
                        <connector>is</connector>
                        <concept ref="concept_MoveAssignable_DF00F01AE5185608C8DBD5AB4BF79B2C07558F59"/>
                    </constraint>
                </function>
                <function id="function_group_Next_3F376F15397ED19B4B36DC08482D988F68581D43">
                    <name>Next</name>
                    <overloads>
                        <overload id="function_Next_DE38A8E0938929AD1653B719757B6751CC3801DC">
                            <name>Next&lt;I>(I i, long n) where I is ForwardIterator</name>
                            <syntax>public nothrow I Next&lt;I>(I i, long n);</syntax>
                            <templateParameters>
                                <templateParameter id="1579536">
                                    <name>I</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>i</name>
                                    <type ref="1579536"/>
                                </parameter>
                                <parameter>
                                    <name>n</name>
                                    <type ref="type.1579457"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1579536"/>
                            <constraint>
                                <type ref="1579536"/>
                                <connector>is</connector>
                                <concept ref="concept_ForwardIterator_4C777D423CF589B8535F29F910C025990ED656D4"/>
                            </constraint>
                        </overload>
                        <overload id="function_Next_3B2A56842C92DD768DA61B1291BF7B362A2E3D2E">
                            <name>Next&lt;I>(I i, long n) where I is RandomAccessIterator</name>
                            <syntax>public nothrow inline I Next&lt;I>(I i, long n);</syntax>
                            <templateParameters>
                                <templateParameter id="1579537">
                                    <name>I</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>i</name>
                                    <type ref="1579537"/>
                                </parameter>
                                <parameter>
                                    <name>n</name>
                                    <type ref="type.1579457"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1579537"/>
                            <constraint>
                                <type ref="1579537"/>
                                <connector>is</connector>
                                <concept ref="concept_RandomAccessIterator_A5A1B6A4EC8E181A67C733002B3BE437554D3484"/>
                            </constraint>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_NextPermutation_97923842316AFBCC61B8AFD5FFCFD4DBBA4074EE">
                    <name>NextPermutation</name>
                    <overloads>
                        <overload id="function_NextPermutation_A720BCA204B7AEDAABB9330A5AEF26BA14560D68">
                            <name>NextPermutation&lt;I, R>(I begin, I end, R r)</name>
                            <syntax>public nothrow bool NextPermutation&lt;I, R>(I begin, I end, R r);</syntax>
                            <templateParameters>
                                <templateParameter id="1579642">
                                    <name>I</name>
                                </templateParameter>
                                <templateParameter id="1579643">
                                    <name>R</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>begin</name>
                                    <type ref="1579642"/>
                                </parameter>
                                <parameter>
                                    <name>end</name>
                                    <type ref="1579642"/>
                                </parameter>
                                <parameter>
                                    <name>r</name>
                                    <type ref="1579643"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                            <constraint>
                                <type ref="1579642"/>
                                <connector>is</connector>
                                <concept ref="concept_BidirectionalIterator_96C10B73881A17B6DC9C0804E7DF2141C2E58DA6"/>
                                <connector>and</connector>
                                <type ref="1579643"/>
                                <connector>is</connector>
                                <concept ref="concept_Relation_EA6D5281439518EB11DD9152636FEB86745EE746"/>
                                <connector>and</connector>
                                <type ref="1579643"/>
                                <dot>Domain</dot>
                                <connector>is</connector>
                                <type ref="1579642"/>
                                <dot>ValueType</dot>
                            </constraint>
                        </overload>
                        <overload id="function_NextPermutation_B07C3C3E53608A63421A37FD8CF4ECAF26BB4FEA">
                            <name>NextPermutation&lt;I>(I begin, I end)</name>
                            <syntax>public nothrow bool NextPermutation&lt;I>(I begin, I end);</syntax>
                            <templateParameters>
                                <templateParameter id="1579641">
                                    <name>I</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>begin</name>
                                    <type ref="1579641"/>
                                </parameter>
                                <parameter>
                                    <name>end</name>
                                    <type ref="1579641"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                            <constraint>
                                <type ref="1579641"/>
                                <connector>is</connector>
                                <concept ref="concept_BidirectionalIterator_96C10B73881A17B6DC9C0804E7DF2141C2E58DA6"/>
                                <connector>and</connector>
                                <type ref="1579641"/>
                                <dot>ValueType</dot>
                                <connector>is</connector>
                                <concept ref="concept_LessThanComparable_90ED44B8D61617C1FB8517CD74D7D087E77A0AA5"/>
                            </constraint>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_ParseBool_084FAB887C93F5262A7707B426AE525BB276B61C">
                    <name>ParseBool</name>
                    <overloads>
                        <overload id="function_ParseBool_C078D6115B776EA195D349AEE10222716B917B37">
                            <name>ParseBool(const String&lt;char>&amp; s)</name>
                            <syntax>public bool ParseBool(const String&lt;char>&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </overload>
                        <overload id="function_ParseBool_F9642D0DAC76E3990906B113448266EA3C3F5CCE">
                            <name>ParseBool(const String&lt;char>&amp; s, bool&amp; x)</name>
                            <syntax>public nothrow bool ParseBool(const String&lt;char>&amp; s, bool&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.1580480"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_ParseByte_53D5A6C7806BE112830E1BBEED293F023766B583">
                    <name>ParseByte</name>
                    <overloads>
                        <overload id="function_ParseByte_5291A4C705FDBE9B740FF16BC02AC364BDF4C804">
                            <name>ParseByte(const String&lt;char>&amp; s)</name>
                            <syntax>public byte ParseByte(const String&lt;char>&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579452"/>
                        </overload>
                        <overload id="function_ParseByte_F35CB8343805B37AD1C818861549696565670EA1">
                            <name>ParseByte(const String&lt;char>&amp; s, byte&amp; x)</name>
                            <syntax>public nothrow bool ParseByte(const String&lt;char>&amp; s, byte&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.1580472"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_ParseDouble_A0D77F9140BDCC734DC4E9B3719FB6CBDE7F003B">
                    <name>ParseDouble</name>
                    <overloads>
                        <overload id="function_ParseDouble_C29284DDF88680172C6C268F70C1BB57D9FB95F7">
                            <name>ParseDouble(const String&lt;char>&amp; s)</name>
                            <syntax>public double ParseDouble(const String&lt;char>&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579460"/>
                        </overload>
                        <overload id="function_ParseDouble_C665D27C368E4AD34AB32A9DC06AC81A8C798E72">
                            <name>ParseDouble(const String&lt;char>&amp; s, double&amp; x)</name>
                            <syntax>public nothrow bool ParseDouble(const String&lt;char>&amp; s, double&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.1580479"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_ParseFloat_6E4B68B6C8F960661F802B46DED1F329A72C544F">
                    <name>ParseFloat</name>
                    <overloads>
                        <overload id="function_ParseFloat_153BDC4F9F2B64BB382DC8CE32C6F6AFB46F6E9B">
                            <name>ParseFloat(const String&lt;char>&amp; s)</name>
                            <syntax>public float ParseFloat(const String&lt;char>&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579459"/>
                        </overload>
                        <overload id="function_ParseFloat_45D8DF64FEE8A76A2A3CAFA93197A95C6F214022">
                            <name>ParseFloat(const String&lt;char>&amp; s, float&amp; x)</name>
                            <syntax>public nothrow bool ParseFloat(const String&lt;char>&amp; s, float&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.1580478"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_ParseFloating_21F94125CF078531EAB76A75E712776EE113C1E6">
                    <name>ParseFloating&lt;T>(const String&lt;char>&amp; s, T&amp; x)</name>
                    <syntax>public nothrow bool ParseFloating&lt;T>(const String&lt;char>&amp; s, T&amp; x);</syntax>
                    <templateParameters>
                        <templateParameter id="1579801">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>s</name>
                            <type ref="type.1580258"/>
                        </parameter>
                        <parameter>
                            <name>x</name>
                            <type ref="type.1580470"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                </function>
                <function id="function_ParseHex_6C4BE1AE346F6C18AA453B857B3A84994F9F448F">
                    <name>ParseHex&lt;T>(const String&lt;char>&amp; s, T&amp; x)</name>
                    <syntax>public nothrow bool ParseHex&lt;T>(const String&lt;char>&amp; s, T&amp; x);</syntax>
                    <templateParameters>
                        <templateParameter id="1579800">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>s</name>
                            <type ref="type.1580258"/>
                        </parameter>
                        <parameter>
                            <name>x</name>
                            <type ref="type.1580469"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                    <constraint>
                        <type ref="1579800"/>
                        <connector>is</connector>
                        <concept ref="concept_UnsignedInteger_FBFA16F1BC6E6222A9D123737D6648E8035C07E7"/>
                    </constraint>
                </function>
                <function id="function_group_ParseHexByte_FB8435F4632FFAFD45E4085C30096F3D88B338E3">
                    <name>ParseHexByte</name>
                    <overloads>
                        <overload id="function_ParseHexByte_FCFB93CBDEF609AFA68F41845F374808CDFFC0B8">
                            <name>ParseHexByte(const String&lt;char>&amp; s)</name>
                            <syntax>public byte ParseHexByte(const String&lt;char>&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579452"/>
                        </overload>
                        <overload id="function_ParseHexByte_95968EF84AA0A823E0BE75B2EEDBA350E052AC02">
                            <name>ParseHexByte(const String&lt;char>&amp; s, byte&amp; x)</name>
                            <syntax>public nothrow bool ParseHexByte(const String&lt;char>&amp; s, byte&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.1580472"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_ParseHexUInt_5224B815E2FBB6DE9D192B153CA43631C17AE965">
                    <name>ParseHexUInt</name>
                    <overloads>
                        <overload id="function_ParseHexUInt_993E50F29C6ADF022F6E6B249326E3B43D97577D">
                            <name>ParseHexUInt(const String&lt;char>&amp; s)</name>
                            <syntax>public uint ParseHexUInt(const String&lt;char>&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579456"/>
                        </overload>
                        <overload id="function_ParseHexUInt_6FE70E09FD2F8E1339532C5A50FA0F5CED446D25">
                            <name>ParseHexUInt(const String&lt;char>&amp; s, uint&amp; x)</name>
                            <syntax>public nothrow bool ParseHexUInt(const String&lt;char>&amp; s, uint&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.1580476"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_ParseHexULong_E66BB49C69ADECC9869F38AA84237B6B30F0D7F8">
                    <name>ParseHexULong</name>
                    <overloads>
                        <overload id="function_ParseHexULong_0BDB52019D55DCD511629017293B8CB7F70E0D19">
                            <name>ParseHexULong(const String&lt;char>&amp; s)</name>
                            <syntax>public ulong ParseHexULong(const String&lt;char>&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579458"/>
                        </overload>
                        <overload id="function_ParseHexULong_29E61A2A1B071F3CC953147AE6A31E37F3D60C45">
                            <name>ParseHexULong(const String&lt;char>&amp; s, ulong&amp; x)</name>
                            <syntax>public nothrow bool ParseHexULong(const String&lt;char>&amp; s, ulong&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.1580411"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_ParseHexUShort_51396E9BB2196400F45ED2DAAE849AAD78C536F2">
                    <name>ParseHexUShort</name>
                    <overloads>
                        <overload id="function_ParseHexUShort_457A3D5F0FCADAEA072C464C9064D1320F8E70E5">
                            <name>ParseHexUShort(const String&lt;char>&amp; s)</name>
                            <syntax>public ushort ParseHexUShort(const String&lt;char>&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579454"/>
                        </overload>
                        <overload id="function_ParseHexUShort_35220636645F0C2E4FAD8C8B55E183B76D9254AA">
                            <name>ParseHexUShort(const String&lt;char>&amp; s, ushort&amp; x)</name>
                            <syntax>public nothrow bool ParseHexUShort(const String&lt;char>&amp; s, ushort&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.1580474"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_ParseInt_B67AAFE777622136FA7F24CB5C46C2F7246E5F17">
                    <name>ParseInt</name>
                    <overloads>
                        <overload id="function_ParseInt_A8EDABE83FFE7F67EFC550AB3628C92F7F371F0A">
                            <name>ParseInt(const String&lt;char>&amp; s)</name>
                            <syntax>public int ParseInt(const String&lt;char>&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579455"/>
                        </overload>
                        <overload id="function_ParseInt_6D978B62D09C06382D7E544FE2218FBBCE8F7261">
                            <name>ParseInt(const String&lt;char>&amp; s, int&amp; x)</name>
                            <syntax>public nothrow bool ParseInt(const String&lt;char>&amp; s, int&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.1580475"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_ParseLong_414BBD4BF45B247D40BC5890EAF950198CB547B0">
                    <name>ParseLong</name>
                    <overloads>
                        <overload id="function_ParseLong_5E110253D66A2BBBA2C69FCD0F22949923981EB9">
                            <name>ParseLong(const String&lt;char>&amp; s)</name>
                            <syntax>public long ParseLong(const String&lt;char>&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579457"/>
                        </overload>
                        <overload id="function_ParseLong_AD8AA85AF58FE793B5101DF87591A99AFD91DE67">
                            <name>ParseLong(const String&lt;char>&amp; s, long&amp; x)</name>
                            <syntax>public nothrow bool ParseLong(const String&lt;char>&amp; s, long&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.1580477"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_ParseSByte_DE90B5647191510542CC02946169FF98F0B2510D">
                    <name>ParseSByte</name>
                    <overloads>
                        <overload id="function_ParseSByte_FD3D0B7FDD31AE69F79D4EA9AC22D44ED24FFC21">
                            <name>ParseSByte(const String&lt;char>&amp; s)</name>
                            <syntax>public sbyte ParseSByte(const String&lt;char>&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579451"/>
                        </overload>
                        <overload id="function_ParseSByte_0A9C2C9AF6AEFC0E33CCD69C8C1B40D28195C061">
                            <name>ParseSByte(const String&lt;char>&amp; s, sbyte&amp; x)</name>
                            <syntax>public nothrow bool ParseSByte(const String&lt;char>&amp; s, sbyte&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.1580471"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_ParseShort_208F98B2168A7F3453DAFE73C8B85ED6798EF186">
                    <name>ParseShort</name>
                    <overloads>
                        <overload id="function_ParseShort_942B8342150A0AFA155C29C9893DD75918BD655E">
                            <name>ParseShort(const String&lt;char>&amp; s)</name>
                            <syntax>public short ParseShort(const String&lt;char>&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579453"/>
                        </overload>
                        <overload id="function_ParseShort_60EAE1977EEE791A57C6D4778010B65C2F8A7E17">
                            <name>ParseShort(const String&lt;char>&amp; s, short&amp; x)</name>
                            <syntax>public nothrow bool ParseShort(const String&lt;char>&amp; s, short&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.1580473"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_ParseSigned_2490A3F4C73025AC01798591B3D20BC46F9F19B9">
                    <name>ParseSigned&lt;T>(const String&lt;char>&amp; s, T&amp; x)</name>
                    <syntax>public nothrow bool ParseSigned&lt;T>(const String&lt;char>&amp; s, T&amp; x);</syntax>
                    <templateParameters>
                        <templateParameter id="1579798">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>s</name>
                            <type ref="type.1580258"/>
                        </parameter>
                        <parameter>
                            <name>x</name>
                            <type ref="type.1580467"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                    <constraint>
                        <type ref="1579798"/>
                        <connector>is</connector>
                        <concept ref="concept_SignedInteger_1433E09EDE31E4C6382A074E0B77CDD99D989804"/>
                    </constraint>
                </function>
                <function id="function_group_ParseUInt_A8D0FE3965D91CF54D51392367B065035814250D">
                    <name>ParseUInt</name>
                    <overloads>
                        <overload id="function_ParseUInt_31A2141A803D936F6D4B8B4E9270289DD11C4BB3">
                            <name>ParseUInt(const String&lt;char>&amp; s)</name>
                            <syntax>public uint ParseUInt(const String&lt;char>&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579456"/>
                        </overload>
                        <overload id="function_ParseUInt_62461AA7F4715A2DEFBDE12F55DEB0C448C8CF7A">
                            <name>ParseUInt(const String&lt;char>&amp; s, uint&amp; x)</name>
                            <syntax>public nothrow bool ParseUInt(const String&lt;char>&amp; s, uint&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.1580476"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_ParseULong_CBC5121B802127CBE19978397EAD31C21A2E1CFD">
                    <name>ParseULong</name>
                    <overloads>
                        <overload id="function_ParseULong_471B902ADE6210B8E5D22BD6BC5B7F4DCAF2A9ED">
                            <name>ParseULong(const String&lt;char>&amp; s)</name>
                            <syntax>public ulong ParseULong(const String&lt;char>&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579458"/>
                        </overload>
                        <overload id="function_ParseULong_B3721C6787BFD1367888E30DEBB46BB342F61C66">
                            <name>ParseULong(const String&lt;char>&amp; s, ulong&amp; x)</name>
                            <syntax>public nothrow bool ParseULong(const String&lt;char>&amp; s, ulong&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.1580411"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_ParseUShort_9204BED9FC8BE72D8FBA2ABE82B1A7D447FB3AF2">
                    <name>ParseUShort</name>
                    <overloads>
                        <overload id="function_ParseUShort_2FD0E081EDC2805377A8C46DABD538F1FA94E6BB">
                            <name>ParseUShort(const String&lt;char>&amp; s)</name>
                            <syntax>public ushort ParseUShort(const String&lt;char>&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579454"/>
                        </overload>
                        <overload id="function_ParseUShort_F719D5612C94F65BC3ECD7D4BFB053458C024FFF">
                            <name>ParseUShort(const String&lt;char>&amp; s, ushort&amp; x)</name>
                            <syntax>public nothrow bool ParseUShort(const String&lt;char>&amp; s, ushort&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.1580474"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_ParseUnsigned_4822463994BF0C74C8399CEB7844AC3FA1271D12">
                    <name>ParseUnsigned&lt;T>(const String&lt;char>&amp; s, T&amp; x)</name>
                    <syntax>public nothrow bool ParseUnsigned&lt;T>(const String&lt;char>&amp; s, T&amp; x);</syntax>
                    <templateParameters>
                        <templateParameter id="1579799">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>s</name>
                            <type ref="type.1580258"/>
                        </parameter>
                        <parameter>
                            <name>x</name>
                            <type ref="type.1580468"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                    <constraint>
                        <type ref="1579799"/>
                        <connector>is</connector>
                        <concept ref="concept_UnsignedInteger_FBFA16F1BC6E6222A9D123737D6648E8035C07E7"/>
                    </constraint>
                </function>
                <function id="function_PartialQuickSort_CD08D85AD8BFA6CD4F88EAB3E3394655FE0A2209">
                    <name>PartialQuickSort&lt;I, R>(I begin, I end, R r)</name>
                    <syntax>public void PartialQuickSort&lt;I, R>(I begin, I end, R r);</syntax>
                    <templateParameters>
                        <templateParameter id="1579611">
                            <name>I</name>
                        </templateParameter>
                        <templateParameter id="1579612">
                            <name>R</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>begin</name>
                            <type ref="1579611"/>
                        </parameter>
                        <parameter>
                            <name>end</name>
                            <type ref="1579611"/>
                        </parameter>
                        <parameter>
                            <name>r</name>
                            <type ref="1579612"/>
                        </parameter>
                    </parameters>
                    <constraint>
                        <type ref="1579611"/>
                        <connector>is</connector>
                        <concept ref="concept_RandomAccessIterator_A5A1B6A4EC8E181A67C733002B3BE437554D3484"/>
                        <connector>and</connector>
                        <type ref="1579612"/>
                        <connector>is</connector>
                        <concept ref="concept_Relation_EA6D5281439518EB11DD9152636FEB86745EE746"/>
                        <connector>and</connector>
                        <type ref="1579612"/>
                        <dot>Domain</dot>
                        <connector>is</connector>
                        <type ref="1579611"/>
                        <dot>ValueType</dot>
                    </constraint>
                </function>
                <function id="function_group_PrevPermutation_AC7B564692052D2EFD5D3856B697C1E3DB064645">
                    <name>PrevPermutation</name>
                    <overloads>
                        <overload id="function_PrevPermutation_486D89502402A6AA9B303AF0AFCBE48309DA6F4D">
                            <name>PrevPermutation&lt;I, R>(I begin, I end, R r)</name>
                            <syntax>public nothrow bool PrevPermutation&lt;I, R>(I begin, I end, R r);</syntax>
                            <templateParameters>
                                <templateParameter id="1579645">
                                    <name>I</name>
                                </templateParameter>
                                <templateParameter id="1579646">
                                    <name>R</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>begin</name>
                                    <type ref="1579645"/>
                                </parameter>
                                <parameter>
                                    <name>end</name>
                                    <type ref="1579645"/>
                                </parameter>
                                <parameter>
                                    <name>r</name>
                                    <type ref="1579646"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                            <constraint>
                                <type ref="1579645"/>
                                <connector>is</connector>
                                <concept ref="concept_BidirectionalIterator_96C10B73881A17B6DC9C0804E7DF2141C2E58DA6"/>
                                <connector>and</connector>
                                <type ref="1579646"/>
                                <connector>is</connector>
                                <concept ref="concept_Relation_EA6D5281439518EB11DD9152636FEB86745EE746"/>
                                <connector>and</connector>
                                <type ref="1579646"/>
                                <dot>Domain</dot>
                                <connector>is</connector>
                                <type ref="1579645"/>
                                <dot>ValueType</dot>
                            </constraint>
                        </overload>
                        <overload id="function_PrevPermutation_9C00D39EEB47A9289ACE2A58D6AA815E6398E678">
                            <name>PrevPermutation&lt;I>(I begin, I end)</name>
                            <syntax>public nothrow bool PrevPermutation&lt;I>(I begin, I end);</syntax>
                            <templateParameters>
                                <templateParameter id="1579644">
                                    <name>I</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>begin</name>
                                    <type ref="1579644"/>
                                </parameter>
                                <parameter>
                                    <name>end</name>
                                    <type ref="1579644"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                            <constraint>
                                <type ref="1579644"/>
                                <connector>is</connector>
                                <concept ref="concept_BidirectionalIterator_96C10B73881A17B6DC9C0804E7DF2141C2E58DA6"/>
                                <connector>and</connector>
                                <type ref="1579644"/>
                                <dot>ValueType</dot>
                                <connector>is</connector>
                                <concept ref="concept_LessThanComparable_90ED44B8D61617C1FB8517CD74D7D087E77A0AA5"/>
                            </constraint>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_Remove_1BC9862FFDA24820D39C204DC95CA88EA05A563D">
                    <name>Remove</name>
                    <overloads>
                        <overload id="function_Remove_BA66775F823B29B9D05B8445FDCE58BCE060D721">
                            <name>Remove&lt;I, P>(I begin, I end, P p)</name>
                            <syntax>public nothrow I Remove&lt;I, P>(I begin, I end, P p);</syntax>
                            <templateParameters>
                                <templateParameter id="1579564">
                                    <name>I</name>
                                </templateParameter>
                                <templateParameter id="1579565">
                                    <name>P</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>begin</name>
                                    <type ref="1579564"/>
                                </parameter>
                                <parameter>
                                    <name>end</name>
                                    <type ref="1579564"/>
                                </parameter>
                                <parameter>
                                    <name>p</name>
                                    <type ref="1579565"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1579564"/>
                            <constraint>
                                <type ref="1579564"/>
                                <connector>is</connector>
                                <concept ref="concept_ForwardIterator_4C777D423CF589B8535F29F910C025990ED656D4"/>
                                <connector>and</connector>
                                <type ref="1579565"/>
                                <connector>is</connector>
                                <concept ref="concept_UnaryPredicate_817CC9DCD26C0954E03389EC0C9357DB1879C53F"/>
                                <connector>and</connector>
                                <type ref="1579565"/>
                                <dot>ArgumentType</dot>
                                <connector>is</connector>
                                <type ref="1579564"/>
                                <dot>ValueType</dot>
                            </constraint>
                        </overload>
                        <overload id="function_Remove_2826AC31B923913DC76A5ECA16BA39022D6C004C">
                            <name>Remove&lt;I, T>(I begin, I end, const T&amp; value)</name>
                            <syntax>public nothrow I Remove&lt;I, T>(I begin, I end, const T&amp; value);</syntax>
                            <templateParameters>
                                <templateParameter id="1579569">
                                    <name>I</name>
                                </templateParameter>
                                <templateParameter id="1579570">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>begin</name>
                                    <type ref="1579569"/>
                                </parameter>
                                <parameter>
                                    <name>end</name>
                                    <type ref="1579569"/>
                                </parameter>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.1580218"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1579569"/>
                            <constraint>
                                <type ref="1579569"/>
                                <connector>is</connector>
                                <concept ref="concept_ForwardIterator_4C777D423CF589B8535F29F910C025990ED656D4"/>
                                <connector>and</connector>
                                <type ref="1579570"/>
                                <connector>is</connector>
                                <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                                <connector>and</connector>
                                <concept ref="concept_EqualityComparable_DDA76B65E48DE418ED1651912DC91E6BCF9A6B60">
                                    <params>
                                        <type ref="1579570"/>
                                        <type ref="1579569"/>
                                        <dot>ValueType</dot>
                                    </params>
                                </concept>
                            </constraint>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_RemoveCopy_3FAC2AEC123843A3D4367D4BB708697AA20A0383">
                    <name>RemoveCopy</name>
                    <overloads>
                        <overload id="function_RemoveCopy_CD72CDADD442AB3A060120D1A9517F4A3767DE1C">
                            <name>RemoveCopy&lt;I, O, P>(I begin, I end, O result, P p)</name>
                            <syntax>public nothrow O RemoveCopy&lt;I, O, P>(I begin, I end, O result, P p);</syntax>
                            <templateParameters>
                                <templateParameter id="1579561">
                                    <name>I</name>
                                </templateParameter>
                                <templateParameter id="1579562">
                                    <name>O</name>
                                </templateParameter>
                                <templateParameter id="1579563">
                                    <name>P</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>begin</name>
                                    <type ref="1579561"/>
                                </parameter>
                                <parameter>
                                    <name>end</name>
                                    <type ref="1579561"/>
                                </parameter>
                                <parameter>
                                    <name>result</name>
                                    <type ref="1579562"/>
                                </parameter>
                                <parameter>
                                    <name>p</name>
                                    <type ref="1579563"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1579562"/>
                            <constraint>
                                <type ref="1579561"/>
                                <connector>is</connector>
                                <concept ref="concept_InputIterator_BC46FC10D5EBF285BDF3232BD222C09235D06406"/>
                                <connector>and</connector>
                                <type ref="1579562"/>
                                <connector>is</connector>
                                <concept ref="concept_OutputIterator_A454885B47A3648BC107033D34E4A3F5AF8202EC"/>
                                <connector>and</connector>
                                <type ref="1579562"/>
                                <dot>ValueType</dot>
                                <connector>is</connector>
                                <type ref="1579561"/>
                                <dot>ValueType</dot>
                                <connector>and</connector>
                                <type ref="1579563"/>
                                <connector>is</connector>
                                <concept ref="concept_UnaryPredicate_817CC9DCD26C0954E03389EC0C9357DB1879C53F"/>
                                <connector>and</connector>
                                <type ref="1579563"/>
                                <dot>ArgumentType</dot>
                                <connector>is</connector>
                                <type ref="1579561"/>
                                <dot>ValueType</dot>
                            </constraint>
                        </overload>
                        <overload id="function_RemoveCopy_4EEF4D4EBC3B9ED87B8DF406A01D7C555E39647B">
                            <name>RemoveCopy&lt;I, O, T>(I begin, I end, O result, const T&amp; value)</name>
                            <syntax>public nothrow O RemoveCopy&lt;I, O, T>(I begin, I end, O result, const T&amp; value);</syntax>
                            <templateParameters>
                                <templateParameter id="1579566">
                                    <name>I</name>
                                </templateParameter>
                                <templateParameter id="1579567">
                                    <name>O</name>
                                </templateParameter>
                                <templateParameter id="1579568">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>begin</name>
                                    <type ref="1579566"/>
                                </parameter>
                                <parameter>
                                    <name>end</name>
                                    <type ref="1579566"/>
                                </parameter>
                                <parameter>
                                    <name>result</name>
                                    <type ref="1579567"/>
                                </parameter>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.1580217"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1579567"/>
                            <constraint>
                                <type ref="1579568"/>
                                <connector>is</connector>
                                <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                                <connector>and</connector>
                                <type ref="1579566"/>
                                <connector>is</connector>
                                <concept ref="concept_InputIterator_BC46FC10D5EBF285BDF3232BD222C09235D06406"/>
                                <connector>and</connector>
                                <type ref="1579567"/>
                                <connector>is</connector>
                                <concept ref="concept_OutputIterator_A454885B47A3648BC107033D34E4A3F5AF8202EC"/>
                                <connector>and</connector>
                                <type ref="1579567"/>
                                <dot>ValueType</dot>
                                <connector>is</connector>
                                <type ref="1579566"/>
                                <dot>ValueType</dot>
                                <connector>and</connector>
                                <concept ref="concept_EqualityComparable_DDA76B65E48DE418ED1651912DC91E6BCF9A6B60">
                                    <params>
                                        <type ref="1579568"/>
                                        <type ref="1579566"/>
                                        <dot>ValueType</dot>
                                    </params>
                                </concept>
                            </constraint>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_Reverse_7F57E0F3F6001094CA8E3BF3A6402B2E9F830D46">
                    <name>Reverse</name>
                    <overloads>
                        <overload id="function_Reverse_E6E171FDAD50190ABB8921E3EC7B5C5600AA82DA">
                            <name>Reverse&lt;I>(I begin, I end) where I is BidirectionalIterator</name>
                            <syntax>public nothrow void Reverse&lt;I>(I begin, I end);</syntax>
                            <templateParameters>
                                <templateParameter id="1579523">
                                    <name>I</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>begin</name>
                                    <type ref="1579523"/>
                                </parameter>
                                <parameter>
                                    <name>end</name>
                                    <type ref="1579523"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="1579523"/>
                                <connector>is</connector>
                                <concept ref="concept_BidirectionalIterator_96C10B73881A17B6DC9C0804E7DF2141C2E58DA6"/>
                            </constraint>
                        </overload>
                        <overload id="function_Reverse_3EFD6CD34716708D7307FA8DB00DE0F87C0B36D2">
                            <name>Reverse&lt;I>(I begin, I end) where I is RandomAccessIterator</name>
                            <syntax>public nothrow void Reverse&lt;I>(I begin, I end);</syntax>
                            <templateParameters>
                                <templateParameter id="1579522">
                                    <name>I</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>begin</name>
                                    <type ref="1579522"/>
                                </parameter>
                                <parameter>
                                    <name>end</name>
                                    <type ref="1579522"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="1579522"/>
                                <connector>is</connector>
                                <concept ref="concept_RandomAccessIterator_A5A1B6A4EC8E181A67C733002B3BE437554D3484"/>
                            </constraint>
                        </overload>
                    </overloads>
                </function>
                <function id="function_ReverseUntil_5817FFEA70B9AF39C1CB1F7D7FDD7A22F200808E">
                    <name>ReverseUntil&lt;I>(I first, I middle, I last)</name>
                    <syntax>public Pair&lt;I, I> ReverseUntil&lt;I>(I first, I middle, I last);</syntax>
                    <templateParameters>
                        <templateParameter id="1579524">
                            <name>I</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>first</name>
                            <type ref="1579524"/>
                        </parameter>
                        <parameter>
                            <name>middle</name>
                            <type ref="1579524"/>
                        </parameter>
                        <parameter>
                            <name>last</name>
                            <type ref="1579524"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1580197"/>
                    <constraint>
                        <type ref="1579524"/>
                        <connector>is</connector>
                        <concept ref="concept_BidirectionalIterator_96C10B73881A17B6DC9C0804E7DF2141C2E58DA6"/>
                    </constraint>
                </function>
                <function id="function_Rotate_00AE246D7967AA4F38BB1BDC01E9C600E6332F56">
                    <name>Rotate&lt;I>(I first, I middle, I last)</name>
                    <syntax>public I Rotate&lt;I>(I first, I middle, I last);</syntax>
                    <templateParameters>
                        <templateParameter id="1579525">
                            <name>I</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>first</name>
                            <type ref="1579525"/>
                        </parameter>
                        <parameter>
                            <name>middle</name>
                            <type ref="1579525"/>
                        </parameter>
                        <parameter>
                            <name>last</name>
                            <type ref="1579525"/>
                        </parameter>
                    </parameters>
                    <returnType ref="1579525"/>
                    <constraint>
                        <type ref="1579525"/>
                        <connector>is</connector>
                        <concept ref="concept_BidirectionalIterator_96C10B73881A17B6DC9C0804E7DF2141C2E58DA6"/>
                    </constraint>
                </function>
                <function id="function_Rvalue_FC16F1187C8C3CF8D9182A63AC59041EF4474FA2">
                    <name>Rvalue&lt;T>(T&amp;&amp; x)</name>
                    <syntax>public nothrow inline T&amp;&amp; Rvalue&lt;T>(T&amp;&amp; x);</syntax>
                    <templateParameters>
                        <templateParameter id="1580046">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>x</name>
                            <type ref="type.1581772"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1581772"/>
                </function>
                <function id="function_Select_0_2_DC76CC660DCD753B37546DD00A13EF09D7FCD1F5">
                    <name>Select_0_2&lt;T, R>(const T&amp; a, const T&amp; b, R r)</name>
                    <syntax>public nothrow inline const T&amp; Select_0_2&lt;T, R>(const T&amp; a, const T&amp; b, R r);</syntax>
                    <templateParameters>
                        <templateParameter id="1579585">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="1579586">
                            <name>R</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>a</name>
                            <type ref="type.1580220"/>
                        </parameter>
                        <parameter>
                            <name>b</name>
                            <type ref="type.1580220"/>
                        </parameter>
                        <parameter>
                            <name>r</name>
                            <type ref="1579586"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1580220"/>
                    <constraint>
                        <type ref="1579585"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                        <connector>and</connector>
                        <type ref="1579586"/>
                        <connector>is</connector>
                        <concept ref="concept_Relation_EA6D5281439518EB11DD9152636FEB86745EE746"/>
                        <connector>and</connector>
                        <type ref="1579586"/>
                        <dot>Domain</dot>
                        <connector>is</connector>
                        <type ref="1579585"/>
                    </constraint>
                </function>
                <function id="function_Select_0_3_00EF075749C2485FA077E81651DED5C90B6551C6">
                    <name>Select_0_3&lt;T, R>(const T&amp; a, const T&amp; b, const T&amp; c, R r)</name>
                    <syntax>public nothrow inline const T&amp; Select_0_3&lt;T, R>(const T&amp; a, const T&amp; b, const T&amp; c, R r);</syntax>
                    <templateParameters>
                        <templateParameter id="1579589">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="1579590">
                            <name>R</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>a</name>
                            <type ref="type.1580222"/>
                        </parameter>
                        <parameter>
                            <name>b</name>
                            <type ref="type.1580222"/>
                        </parameter>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1580222"/>
                        </parameter>
                        <parameter>
                            <name>r</name>
                            <type ref="1579590"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1580222"/>
                    <constraint>
                        <type ref="1579589"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                        <connector>and</connector>
                        <type ref="1579590"/>
                        <connector>is</connector>
                        <concept ref="concept_Relation_EA6D5281439518EB11DD9152636FEB86745EE746"/>
                        <connector>and</connector>
                        <type ref="1579590"/>
                        <dot>Domain</dot>
                        <connector>is</connector>
                        <type ref="1579589"/>
                    </constraint>
                </function>
                <function id="function_Select_1_2_4CE085251881D0CBBBD4C3DE0FF97DBE5443EC1B">
                    <name>Select_1_2&lt;T, R>(const T&amp; a, const T&amp; b, R r)</name>
                    <syntax>public nothrow inline const T&amp; Select_1_2&lt;T, R>(const T&amp; a, const T&amp; b, R r);</syntax>
                    <templateParameters>
                        <templateParameter id="1579587">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="1579588">
                            <name>R</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>a</name>
                            <type ref="type.1580221"/>
                        </parameter>
                        <parameter>
                            <name>b</name>
                            <type ref="type.1580221"/>
                        </parameter>
                        <parameter>
                            <name>r</name>
                            <type ref="1579588"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1580221"/>
                    <constraint>
                        <type ref="1579587"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                        <connector>and</connector>
                        <type ref="1579588"/>
                        <connector>is</connector>
                        <concept ref="concept_Relation_EA6D5281439518EB11DD9152636FEB86745EE746"/>
                        <connector>and</connector>
                        <type ref="1579588"/>
                        <dot>Domain</dot>
                        <connector>is</connector>
                        <type ref="1579587"/>
                    </constraint>
                </function>
                <function id="function_Select_1_3_3B6D7DAFF9FB8945872BC97360C3725193A0D9CA">
                    <name>Select_1_3&lt;T, R>(const T&amp; a, const T&amp; b, const T&amp; c, R r)</name>
                    <syntax>public nothrow inline const T&amp; Select_1_3&lt;T, R>(const T&amp; a, const T&amp; b, const T&amp; c, R r);</syntax>
                    <templateParameters>
                        <templateParameter id="1579595">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="1579596">
                            <name>R</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>a</name>
                            <type ref="type.1580225"/>
                        </parameter>
                        <parameter>
                            <name>b</name>
                            <type ref="type.1580225"/>
                        </parameter>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1580225"/>
                        </parameter>
                        <parameter>
                            <name>r</name>
                            <type ref="1579596"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1580225"/>
                    <constraint>
                        <type ref="1579595"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                        <connector>and</connector>
                        <type ref="1579596"/>
                        <connector>is</connector>
                        <concept ref="concept_Relation_EA6D5281439518EB11DD9152636FEB86745EE746"/>
                        <connector>and</connector>
                        <type ref="1579596"/>
                        <dot>Domain</dot>
                        <connector>is</connector>
                        <type ref="1579595"/>
                    </constraint>
                </function>
                <function id="function_Select_1_3_ab_3B925B31046BCB0718956B668E58A7177C08043F">
                    <name>Select_1_3_ab&lt;T, R>(const T&amp; a, const T&amp; b, const T&amp; c, R r)</name>
                    <syntax>public nothrow inline const T&amp; Select_1_3_ab&lt;T, R>(const T&amp; a, const T&amp; b, const T&amp; c, R r);</syntax>
                    <templateParameters>
                        <templateParameter id="1579593">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="1579594">
                            <name>R</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>a</name>
                            <type ref="type.1580224"/>
                        </parameter>
                        <parameter>
                            <name>b</name>
                            <type ref="type.1580224"/>
                        </parameter>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1580224"/>
                        </parameter>
                        <parameter>
                            <name>r</name>
                            <type ref="1579594"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1580224"/>
                    <constraint>
                        <type ref="1579593"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                        <connector>and</connector>
                        <type ref="1579594"/>
                        <connector>is</connector>
                        <concept ref="concept_Relation_EA6D5281439518EB11DD9152636FEB86745EE746"/>
                        <connector>and</connector>
                        <type ref="1579594"/>
                        <dot>Domain</dot>
                        <connector>is</connector>
                        <type ref="1579593"/>
                    </constraint>
                </function>
                <function id="function_Select_2_3_3BA0295A2EE46DDC610E48F03D013A05EC9AC364">
                    <name>Select_2_3&lt;T, R>(const T&amp; a, const T&amp; b, const T&amp; c, R r)</name>
                    <syntax>public nothrow inline const T&amp; Select_2_3&lt;T, R>(const T&amp; a, const T&amp; b, const T&amp; c, R r);</syntax>
                    <templateParameters>
                        <templateParameter id="1579591">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="1579592">
                            <name>R</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>a</name>
                            <type ref="type.1580223"/>
                        </parameter>
                        <parameter>
                            <name>b</name>
                            <type ref="type.1580223"/>
                        </parameter>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1580223"/>
                        </parameter>
                        <parameter>
                            <name>r</name>
                            <type ref="1579592"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1580223"/>
                    <constraint>
                        <type ref="1579591"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                        <connector>and</connector>
                        <type ref="1579592"/>
                        <connector>is</connector>
                        <concept ref="concept_Relation_EA6D5281439518EB11DD9152636FEB86745EE746"/>
                        <connector>and</connector>
                        <type ref="1579592"/>
                        <dot>Domain</dot>
                        <connector>is</connector>
                        <type ref="1579591"/>
                    </constraint>
                </function>
                <function id="function_group_Sort_7666CEBAFF90A9B75A2B7090E958EFBB89DD350D">
                    <name>Sort</name>
                    <overloads>
                        <overload id="function_Sort_4BAFE4D9B66A3B662F11730926180EEE44FACBEA">
                            <name>Sort&lt;C, R>(C&amp; c, R r) where C is ForwardContainer and R is Relation and R.Domain is C.Iterator.ValueType</name>
                            <syntax>public void Sort&lt;C, R>(C&amp; c, R r);</syntax>
                            <templateParameters>
                                <templateParameter id="1579620">
                                    <name>C</name>
                                </templateParameter>
                                <templateParameter id="1579621">
                                    <name>R</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.1580233"/>
                                </parameter>
                                <parameter>
                                    <name>r</name>
                                    <type ref="1579621"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="1579620"/>
                                <connector>is</connector>
                                <concept ref="concept_ForwardContainer_98A0A5CEE1E1C33CCABCFC2F31BF6EE7C21229F2"/>
                                <connector>and</connector>
                                <type ref="1579621"/>
                                <connector>is</connector>
                                <concept ref="concept_Relation_EA6D5281439518EB11DD9152636FEB86745EE746"/>
                                <connector>and</connector>
                                <type ref="1579621"/>
                                <dot>Domain</dot>
                                <connector>is</connector>
                                <type ref="1579620"/>
                                <dot>Iterator</dot>
                                <dot>ValueType</dot>
                            </constraint>
                        </overload>
                        <overload id="function_Sort_8F33FB0548D8CBC19ECCD4AFEB9208CF3695F16A">
                            <name>Sort&lt;C, R>(C&amp; c, R r) where C is RandomAccessContainer and R is Relation and R.Domain is C.Iterator.ValueType</name>
                            <syntax>public inline void Sort&lt;C, R>(C&amp; c, R r);</syntax>
                            <templateParameters>
                                <templateParameter id="1579616">
                                    <name>C</name>
                                </templateParameter>
                                <templateParameter id="1579617">
                                    <name>R</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.1580230"/>
                                </parameter>
                                <parameter>
                                    <name>r</name>
                                    <type ref="1579617"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="1579616"/>
                                <connector>is</connector>
                                <concept ref="concept_RandomAccessContainer_7D44EBDB629CA332A20056356A52519C0BB1FADF"/>
                                <connector>and</connector>
                                <type ref="1579617"/>
                                <connector>is</connector>
                                <concept ref="concept_Relation_EA6D5281439518EB11DD9152636FEB86745EE746"/>
                                <connector>and</connector>
                                <type ref="1579617"/>
                                <dot>Domain</dot>
                                <connector>is</connector>
                                <type ref="1579616"/>
                                <dot>Iterator</dot>
                                <dot>ValueType</dot>
                            </constraint>
                        </overload>
                        <overload id="function_Sort_99482E35D0405A77028504E689653BC873F33296">
                            <name>Sort&lt;C>(C&amp; c) where C is ForwardContainer and C.Iterator.ValueType is TotallyOrdered</name>
                            <syntax>public void Sort&lt;C>(C&amp; c);</syntax>
                            <templateParameters>
                                <templateParameter id="1579619">
                                    <name>C</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.1580232"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="1579619"/>
                                <connector>is</connector>
                                <concept ref="concept_ForwardContainer_98A0A5CEE1E1C33CCABCFC2F31BF6EE7C21229F2"/>
                                <connector>and</connector>
                                <type ref="1579619"/>
                                <dot>Iterator</dot>
                                <dot>ValueType</dot>
                                <connector>is</connector>
                                <concept ref="concept_TotallyOrdered_E99156F9F67A4CDD40DFE7EAC64E14E2CF6B24F2"/>
                            </constraint>
                        </overload>
                        <overload id="function_Sort_8340E39903690F7CC970F9DCA3EC6209708659F4">
                            <name>Sort&lt;C>(C&amp; c) where C is RandomAccessContainer and C.Iterator.ValueType is TotallyOrdered</name>
                            <syntax>public inline void Sort&lt;C>(C&amp; c);</syntax>
                            <templateParameters>
                                <templateParameter id="1579618">
                                    <name>C</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.1580231"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="1579618"/>
                                <connector>is</connector>
                                <concept ref="concept_RandomAccessContainer_7D44EBDB629CA332A20056356A52519C0BB1FADF"/>
                                <connector>and</connector>
                                <type ref="1579618"/>
                                <dot>Iterator</dot>
                                <dot>ValueType</dot>
                                <connector>is</connector>
                                <concept ref="concept_TotallyOrdered_E99156F9F67A4CDD40DFE7EAC64E14E2CF6B24F2"/>
                            </constraint>
                        </overload>
                        <overload id="function_Sort_953030E48C4F1885F1AAA25A96D1934086D0CB61">
                            <name>Sort&lt;I, R>(I begin, I end, R r) where I is RandomAccessIterator and R is Relation and R.Domain is I.ValueType</name>
                            <syntax>public void Sort&lt;I, R>(I begin, I end, R r);</syntax>
                            <templateParameters>
                                <templateParameter id="1579613">
                                    <name>I</name>
                                </templateParameter>
                                <templateParameter id="1579614">
                                    <name>R</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>begin</name>
                                    <type ref="1579613"/>
                                </parameter>
                                <parameter>
                                    <name>end</name>
                                    <type ref="1579613"/>
                                </parameter>
                                <parameter>
                                    <name>r</name>
                                    <type ref="1579614"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="1579613"/>
                                <connector>is</connector>
                                <concept ref="concept_RandomAccessIterator_A5A1B6A4EC8E181A67C733002B3BE437554D3484"/>
                                <connector>and</connector>
                                <type ref="1579614"/>
                                <connector>is</connector>
                                <concept ref="concept_Relation_EA6D5281439518EB11DD9152636FEB86745EE746"/>
                                <connector>and</connector>
                                <type ref="1579614"/>
                                <dot>Domain</dot>
                                <connector>is</connector>
                                <type ref="1579613"/>
                                <dot>ValueType</dot>
                            </constraint>
                        </overload>
                        <overload id="function_Sort_F6AF9C6C068873BD26A0B27B984255291EADC214">
                            <name>Sort&lt;I>(I begin, I end) where I is RandomAccessIterator and I.ValueType is TotallyOrdered</name>
                            <syntax>public inline void Sort&lt;I>(I begin, I end);</syntax>
                            <templateParameters>
                                <templateParameter id="1579615">
                                    <name>I</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>begin</name>
                                    <type ref="1579615"/>
                                </parameter>
                                <parameter>
                                    <name>end</name>
                                    <type ref="1579615"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                <type ref="1579615"/>
                                <connector>is</connector>
                                <concept ref="concept_RandomAccessIterator_A5A1B6A4EC8E181A67C733002B3BE437554D3484"/>
                                <connector>and</connector>
                                <type ref="1579615"/>
                                <dot>ValueType</dot>
                                <connector>is</connector>
                                <concept ref="concept_TotallyOrdered_E99156F9F67A4CDD40DFE7EAC64E14E2CF6B24F2"/>
                            </constraint>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_StrCopy_4A0C4E8198E5EF5112FBB6A6A9D7FF22D5DEC50F">
                    <name>StrCopy</name>
                    <overloads>
                        <overload id="function_StrCopy_E33338E2CBEFA38F9AED4C7D611AB90D30094AA2">
                            <name>StrCopy(char* buf, const char* from)</name>
                            <syntax>public nothrow inline void StrCopy(char* buf, const char* from);</syntax>
                            <parameters>
                                <parameter>
                                    <name>buf</name>
                                    <type ref="type.1579488"/>
                                </parameter>
                                <parameter>
                                    <name>from</name>
                                    <type ref="type.1579514"/>
                                </parameter>
                            </parameters>
                        </overload>
                        <overload id="function_StrCopy_21596AD5C087405301418DF77A78E2BBB8506A64">
                            <name>StrCopy(char* buf, const char* from, long length)</name>
                            <syntax>public nothrow inline long StrCopy(char* buf, const char* from, long length);</syntax>
                            <parameters>
                                <parameter>
                                    <name>buf</name>
                                    <type ref="type.1579488"/>
                                </parameter>
                                <parameter>
                                    <name>from</name>
                                    <type ref="type.1579514"/>
                                </parameter>
                                <parameter>
                                    <name>length</name>
                                    <type ref="type.1579457"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579457"/>
                        </overload>
                        <overload id="function_StrCopy_85FA11298D9DDD7842BA07B97D83634A05A53EC6">
                            <name>StrCopy(uchar* buf, const uchar* from)</name>
                            <syntax>public nothrow inline void StrCopy(uchar* buf, const uchar* from);</syntax>
                            <parameters>
                                <parameter>
                                    <name>buf</name>
                                    <type ref="type.1579492"/>
                                </parameter>
                                <parameter>
                                    <name>from</name>
                                    <type ref="type.1580367"/>
                                </parameter>
                            </parameters>
                        </overload>
                        <overload id="function_StrCopy_F0B6B2A7812C689A4C44574ECDCA2807B41E6360">
                            <name>StrCopy(uchar* buf, const uchar* from, long length)</name>
                            <syntax>public nothrow inline long StrCopy(uchar* buf, const uchar* from, long length);</syntax>
                            <parameters>
                                <parameter>
                                    <name>buf</name>
                                    <type ref="type.1579492"/>
                                </parameter>
                                <parameter>
                                    <name>from</name>
                                    <type ref="type.1580367"/>
                                </parameter>
                                <parameter>
                                    <name>length</name>
                                    <type ref="type.1579457"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579457"/>
                        </overload>
                        <overload id="function_StrCopy_A762A6DFC4F0D8606BB1745F77AE4E8A53BB08F5">
                            <name>StrCopy(wchar* buf, const wchar* from)</name>
                            <syntax>public nothrow inline void StrCopy(wchar* buf, const wchar* from);</syntax>
                            <parameters>
                                <parameter>
                                    <name>buf</name>
                                    <type ref="type.1579490"/>
                                </parameter>
                                <parameter>
                                    <name>from</name>
                                    <type ref="type.1580323"/>
                                </parameter>
                            </parameters>
                        </overload>
                        <overload id="function_StrCopy_4A8DD3B1A4CCD84F624B68EF2AE0723E6053B4B7">
                            <name>StrCopy(wchar* buf, const wchar* from, long length)</name>
                            <syntax>public nothrow inline long StrCopy(wchar* buf, const wchar* from, long length);</syntax>
                            <parameters>
                                <parameter>
                                    <name>buf</name>
                                    <type ref="type.1579490"/>
                                </parameter>
                                <parameter>
                                    <name>from</name>
                                    <type ref="type.1580323"/>
                                </parameter>
                                <parameter>
                                    <name>length</name>
                                    <type ref="type.1579457"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579457"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_StrLen_E1408237B9E28715B1F1021B03A515FE487C5571">
                    <name>StrLen</name>
                    <overloads>
                        <overload id="function_StrLen_43867BE41AC8050BB3FEDC33EFFC99028FA172B4">
                            <name>StrLen(const char* s)</name>
                            <syntax>public nothrow inline long StrLen(const char* s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1579514"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579457"/>
                        </overload>
                        <overload id="function_StrLen_8A54F2C14E5DEEF41A23F5ACC331E3BD0B94B01E">
                            <name>StrLen(const uchar* s)</name>
                            <syntax>public nothrow inline long StrLen(const uchar* s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1580367"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579457"/>
                        </overload>
                        <overload id="function_StrLen_531F21AB95CDA7B15E1373477F390A0051625A3E">
                            <name>StrLen(const wchar* s)</name>
                            <syntax>public nothrow inline long StrLen(const wchar* s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1580323"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579457"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_StringStr_AB80FAA80040AF8FFD30F46F9AE41DEC2C4B7C91">
                    <name>StringStr(const String&lt;char>&amp; s)</name>
                    <syntax>public nothrow String&lt;char> StringStr(const String&lt;char>&amp; s);</syntax>
                    <parameters>
                        <parameter>
                            <name>s</name>
                            <type ref="type.1580258"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1580238"/>
                </function>
                <function id="function_Swap_5FDD933B4C351DD42A3809611282E36ED067EB58">
                    <name>Swap&lt;T>(T&amp; left, T&amp; right)</name>
                    <syntax>public nothrow inline void Swap&lt;T>(T&amp; left, T&amp; right);</syntax>
                    <templateParameters>
                        <templateParameter id="1579521">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>left</name>
                            <type ref="type.1580196"/>
                        </parameter>
                        <parameter>
                            <name>right</name>
                            <type ref="type.1580196"/>
                        </parameter>
                    </parameters>
                    <constraint>
                        <type ref="1579521"/>
                        <connector>is</connector>
                        <concept ref="concept_MoveConstructible_21D36F4E96F5E3072DD6AAB34A26DF5F90FBC262"/>
                        <connector>and</connector>
                        <type ref="1579521"/>
                        <connector>is</connector>
                        <concept ref="concept_MoveAssignable_DF00F01AE5185608C8DBD5AB4BF79B2C07558F59"/>
                        <connector>and</connector>
                        <type ref="1579521"/>
                        <connector>is</connector>
                        <concept ref="concept_Destructible_0524F34CBA010FC34882287B0116D474909E0966"/>
                    </constraint>
                </function>
                <function id="function_ThrowConversionException_584AC16B013DF0505027AC8D884E36CAC768A263">
                    <name>ThrowConversionException(const String&lt;char>&amp; message)</name>
                    <syntax>public void ThrowConversionException(const String&lt;char>&amp; message);</syntax>
                    <parameters>
                        <parameter>
                            <name>message</name>
                            <type ref="type.1580258"/>
                        </parameter>
                    </parameters>
                </function>
                <function id="function_ToFolding_77BCF35CC0B385F68233F95A73EA01B85AE3B747">
                    <name>ToFolding(uchar c)</name>
                    <syntax>public uchar ToFolding(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579463"/>
                </function>
                <function id="function_group_ToHexString_D2A266C8387168EA017F082F7A4B74CEEA662432">
                    <name>ToHexString</name>
                    <overloads>
                        <overload id="function_ToHexString_4E1CFB5C127904BDCFB1F3E899C865424D1815CF">
                            <name>ToHexString(byte b)</name>
                            <syntax>public nothrow String&lt;char> ToHexString(byte b);</syntax>
                            <parameters>
                                <parameter>
                                    <name>b</name>
                                    <type ref="type.1579452"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580238"/>
                        </overload>
                        <overload id="function_ToHexString_527046AE04B4B7040863E7CC33ED88D904AE377E">
                            <name>ToHexString(uint u)</name>
                            <syntax>public nothrow String&lt;char> ToHexString(uint u);</syntax>
                            <parameters>
                                <parameter>
                                    <name>u</name>
                                    <type ref="type.1579456"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580238"/>
                        </overload>
                        <overload id="function_ToHexString_BD59CF1E0692EEDA9B325DE0BB568CCD28177380">
                            <name>ToHexString(ulong u)</name>
                            <syntax>public nothrow String&lt;char> ToHexString(ulong u);</syntax>
                            <parameters>
                                <parameter>
                                    <name>u</name>
                                    <type ref="type.1579458"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580238"/>
                        </overload>
                        <overload id="function_ToHexString_3CC5F51153C903D5388429FEDD450D85E4356139">
                            <name>ToHexString(ushort u)</name>
                            <syntax>public nothrow String&lt;char> ToHexString(ushort u);</syntax>
                            <parameters>
                                <parameter>
                                    <name>u</name>
                                    <type ref="type.1579454"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580238"/>
                        </overload>
                        <overload id="function_ToHexString_17592807B6465494A39CD731D5F89EB2F581C4BC">
                            <name>ToHexString&lt;U>(U x)</name>
                            <syntax>public nothrow String&lt;char> ToHexString&lt;U>(U x);</syntax>
                            <templateParameters>
                                <templateParameter id="1579797">
                                    <name>U</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="1579797"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580238"/>
                            <constraint>
                                <type ref="1579797"/>
                                <connector>is</connector>
                                <concept ref="concept_UnsignedInteger_FBFA16F1BC6E6222A9D123737D6648E8035C07E7"/>
                                <connector>and</connector>
                                ExplicitlyConvertible<concept name="ExplicitlyConvertible">
                                    <params>
                                        <type ref="1579797"/>
                                        <type ref="type.1579452"/>
                                    </params>
                                </concept>
                            </constraint>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_ToLower_C00A3E8C045C69EB1CC858315670B2219EA7B4A9">
                    <name>ToLower</name>
                    <overloads>
                        <overload id="function_ToLower_DCDA7BD88FD2AFDF98BCB3554C1EBB006DDA62C9">
                            <name>ToLower(const String&lt;char>&amp; s)</name>
                            <syntax>public String&lt;char> ToLower(const String&lt;char>&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580238"/>
                        </overload>
                        <overload id="function_ToLower_226F2082CE182489148CF5D2B97A2F7A3C467D24">
                            <name>ToLower(const String&lt;uchar>&amp; s)</name>
                            <syntax>public String&lt;uchar> ToLower(const String&lt;uchar>&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1580383"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580362"/>
                        </overload>
                        <overload id="function_ToLower_D4690233684519923D3D7F65D26FA7307C258536">
                            <name>ToLower(const String&lt;wchar>&amp; s)</name>
                            <syntax>public String&lt;wchar> ToLower(const String&lt;wchar>&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1580339"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580318"/>
                        </overload>
                        <overload id="function_ToLower_0DA3C53D741A6C810615241D50D34FE76AAC6241">
                            <name>ToLower(uchar c)</name>
                            <syntax>public uchar ToLower(uchar c);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.1579463"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579463"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_ToString_375A9150E0A25C8B556F19C7CA9A8B507A117C8C">
                    <name>ToString</name>
                    <overloads>
                        <overload id="function_ToString_8228739ACBC7EE96AD4369E2CFFBC3828FFA7BEE">
                            <name>ToString(bool b)</name>
                            <syntax>public nothrow String&lt;char> ToString(bool b);</syntax>
                            <parameters>
                                <parameter>
                                    <name>b</name>
                                    <type ref="type.1579450"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580238"/>
                        </overload>
                        <overload id="function_ToString_8BA3DF1AC43FD53E6A1326B5AE8D12A87BBF1F4F">
                            <name>ToString(byte x)</name>
                            <syntax>public nothrow String&lt;char> ToString(byte x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.1579452"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580238"/>
                        </overload>
                        <overload id="function_ToString_1D0635DC777F6FBEE59C24E97D00D5715056AB7F">
                            <name>ToString(char c)</name>
                            <syntax>public nothrow String&lt;char> ToString(char c);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.1579461"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580238"/>
                        </overload>
                        <overload id="function_ToString_6B452C6D124C64CBCC35AB25DC3D1C73F31B6309">
                            <name>ToString(double x)</name>
                            <syntax>public nothrow String&lt;char> ToString(double x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.1579460"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580238"/>
                        </overload>
                        <overload id="function_ToString_CEF0F721289B512DA78071BC422461771F271D6C">
                            <name>ToString(double x, int maxNumDecimals)</name>
                            <syntax>public nothrow String&lt;char> ToString(double x, int maxNumDecimals);</syntax>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.1579460"/>
                                </parameter>
                                <parameter>
                                    <name>maxNumDecimals</name>
                                    <type ref="type.1579455"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580238"/>
                        </overload>
                        <overload id="function_ToString_8E7BD7A0003F4FEDD8B61CE8B96DB88219152D26">
                            <name>ToString(double x, int minNumDecimals, int maxNumDecimals)</name>
                            <syntax>public nothrow String&lt;char> ToString(double x, int minNumDecimals, int maxNumDecimals);</syntax>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.1579460"/>
                                </parameter>
                                <parameter>
                                    <name>minNumDecimals</name>
                                    <type ref="type.1579455"/>
                                </parameter>
                                <parameter>
                                    <name>maxNumDecimals</name>
                                    <type ref="type.1579455"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580238"/>
                        </overload>
                        <overload id="function_ToString_F29D039818D26751B5EFD81FDEB59B6AD586FE08">
                            <name>ToString(float f)</name>
                            <syntax>public nothrow String&lt;char> ToString(float f);</syntax>
                            <parameters>
                                <parameter>
                                    <name>f</name>
                                    <type ref="type.1579459"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580238"/>
                        </overload>
                        <overload id="function_ToString_45DAFF73E9D4870570132FAB4BF547270338BCA8">
                            <name>ToString(int x)</name>
                            <syntax>public nothrow String&lt;char> ToString(int x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.1579455"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580238"/>
                        </overload>
                        <overload id="function_ToString_126CDC878E235D8E3F81E46AFDE3B64B60083BEC">
                            <name>ToString(long x)</name>
                            <syntax>public nothrow String&lt;char> ToString(long x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.1579457"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580238"/>
                        </overload>
                        <overload id="function_ToString_89B352277FF5DA9FC346CCEFD7DBB8A98C5DE744">
                            <name>ToString(sbyte x)</name>
                            <syntax>public nothrow String&lt;char> ToString(sbyte x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.1579451"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580238"/>
                        </overload>
                        <overload id="function_ToString_A95E76FFEF5D3297419D5A49EFD522B2978154B8">
                            <name>ToString(short x)</name>
                            <syntax>public nothrow String&lt;char> ToString(short x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.1579453"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580238"/>
                        </overload>
                        <overload id="function_ToString_043D5132536A071238B1F1B062279BFF0951A59F">
                            <name>ToString(uchar c)</name>
                            <syntax>public String&lt;char> ToString(uchar c);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.1579463"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580238"/>
                        </overload>
                        <overload id="function_ToString_C4BC137F246FFC5892F806C6557F3CFBEE99E208">
                            <name>ToString(uint x)</name>
                            <syntax>public nothrow String&lt;char> ToString(uint x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.1579456"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580238"/>
                        </overload>
                        <overload id="function_ToString_CBA8B607A96D159C0C24E46462CA7967967BFFEE">
                            <name>ToString(ulong x)</name>
                            <syntax>public nothrow String&lt;char> ToString(ulong x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.1579458"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580238"/>
                        </overload>
                        <overload id="function_ToString_6B2D10E604BC0B4502ED6F29941B2F92422F94EF">
                            <name>ToString(ushort x)</name>
                            <syntax>public nothrow String&lt;char> ToString(ushort x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.1579454"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580238"/>
                        </overload>
                        <overload id="function_ToString_FA6C75791331B69BD7171EB1F553A80A8B12F707">
                            <name>ToString(wchar c)</name>
                            <syntax>public String&lt;char> ToString(wchar c);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.1579462"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580238"/>
                        </overload>
                        <overload id="function_ToString_418890764A2DC069241646B16F59A4D00665BCC9">
                            <name>ToString&lt;I, U>(I x)</name>
                            <syntax>public nothrow String&lt;char> ToString&lt;I, U>(I x);</syntax>
                            <templateParameters>
                                <templateParameter id="1579794">
                                    <name>I</name>
                                </templateParameter>
                                <templateParameter id="1579795">
                                    <name>U</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="1579794"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580238"/>
                            <constraint>
                                <type ref="1579794"/>
                                <connector>is</connector>
                                <concept ref="concept_SignedInteger_1433E09EDE31E4C6382A074E0B77CDD99D989804"/>
                                <connector>and</connector>
                                <type ref="1579795"/>
                                <connector>is</connector>
                                <concept ref="concept_UnsignedInteger_FBFA16F1BC6E6222A9D123737D6648E8035C07E7"/>
                                <connector>and</connector>
                                ExplicitlyConvertible<concept name="ExplicitlyConvertible">
                                    <params>
                                        <type ref="1579794"/>
                                        <type ref="1579795"/>
                                    </params>
                                </concept>
                                <connector>and</connector>
                                ExplicitlyConvertible<concept name="ExplicitlyConvertible">
                                    <params>
                                        <type ref="1579795"/>
                                        <type ref="type.1579452"/>
                                    </params>
                                </concept>
                            </constraint>
                        </overload>
                        <overload id="function_ToString_B5D4CAADF1202155C66795DE796872A89BA35ACC">
                            <name>ToString&lt;U>(U x)</name>
                            <syntax>public nothrow String&lt;char> ToString&lt;U>(U x);</syntax>
                            <templateParameters>
                                <templateParameter id="1579796">
                                    <name>U</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="1579796"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580238"/>
                            <constraint>
                                <type ref="1579796"/>
                                <connector>is</connector>
                                <concept ref="concept_UnsignedInteger_FBFA16F1BC6E6222A9D123737D6648E8035C07E7"/>
                                <connector>and</connector>
                                ExplicitlyConvertible<concept name="ExplicitlyConvertible">
                                    <params>
                                        <type ref="1579796"/>
                                        <type ref="type.1579452"/>
                                    </params>
                                </concept>
                            </constraint>
                        </overload>
                    </overloads>
                </function>
                <function id="function_ToTitle_CA6A355EFCEF9BE23CB22F4864D38A0B32EDFB2F">
                    <name>ToTitle(uchar c)</name>
                    <syntax>public uchar ToTitle(uchar c);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579463"/>
                </function>
                <function id="function_group_ToUpper_FD8BC95A0FA1A0D2E3BF6897AD81F6B4FF55C69A">
                    <name>ToUpper</name>
                    <overloads>
                        <overload id="function_ToUpper_C1833C79BC674DDECF011303494E1C64F2460F14">
                            <name>ToUpper(const String&lt;char>&amp; s)</name>
                            <syntax>public String&lt;char> ToUpper(const String&lt;char>&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580238"/>
                        </overload>
                        <overload id="function_ToUpper_AE5BA1589AFB8BC3EE16B697600575E5A4D23C8B">
                            <name>ToUpper(const String&lt;uchar>&amp; s)</name>
                            <syntax>public String&lt;uchar> ToUpper(const String&lt;uchar>&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1580383"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580362"/>
                        </overload>
                        <overload id="function_ToUpper_72C82381C298108E02CDC86E8C43488EE9F6F0F8">
                            <name>ToUpper(const String&lt;wchar>&amp; s)</name>
                            <syntax>public String&lt;wchar> ToUpper(const String&lt;wchar>&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1580339"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580318"/>
                        </overload>
                        <overload id="function_ToUpper_74F20A2CB419B4A2BC31BCF221C6A9F4D5B53DE0">
                            <name>ToUpper(uchar c)</name>
                            <syntax>public uchar ToUpper(uchar c);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.1579463"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579463"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_ToUtf16_18D9C2D7A5465C558A6C4E0D6CB5AC1503A1698C">
                    <name>ToUtf16</name>
                    <overloads>
                        <overload id="function_ToUtf16_A5E06C63CBAF22CA84A880EB5BB51269C6BE4257">
                            <name>ToUtf16(const String&lt;char>&amp; utf8Str)</name>
                            <syntax>public String&lt;wchar> ToUtf16(const String&lt;char>&amp; utf8Str);</syntax>
                            <parameters>
                                <parameter>
                                    <name>utf8Str</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580318"/>
                        </overload>
                        <overload id="function_ToUtf16_F2521751AB2A1E1F18C4047AC49CAEAE9CF2EDC6">
                            <name>ToUtf16(const String&lt;uchar>&amp; utf32Str)</name>
                            <syntax>public String&lt;wchar> ToUtf16(const String&lt;uchar>&amp; utf32Str);</syntax>
                            <parameters>
                                <parameter>
                                    <name>utf32Str</name>
                                    <type ref="type.1580383"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580318"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_ToUtf32_ABF914436DBA870AFEF1772C0BDA0BF24FC46D93">
                    <name>ToUtf32</name>
                    <overloads>
                        <overload id="function_ToUtf32_0476C1B2C07579259DF76F80D2F2987EA2B8EFDD">
                            <name>ToUtf32(const String&lt;char>&amp; utf8Str)</name>
                            <syntax>public String&lt;uchar> ToUtf32(const String&lt;char>&amp; utf8Str);</syntax>
                            <parameters>
                                <parameter>
                                    <name>utf8Str</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580362"/>
                        </overload>
                        <overload id="function_ToUtf32_591A6A903DC5D15ED167D4844BC2864FC446614A">
                            <name>ToUtf32(const String&lt;wchar>&amp; utf16Str)</name>
                            <syntax>public String&lt;uchar> ToUtf32(const String&lt;wchar>&amp; utf16Str);</syntax>
                            <parameters>
                                <parameter>
                                    <name>utf16Str</name>
                                    <type ref="type.1580339"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580362"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_ToUtf8_CF017AE20B31D7E66A1234D5E05276AAD11F9443">
                    <name>ToUtf8</name>
                    <overloads>
                        <overload id="function_ToUtf8_0F1024A368A6DA5AA49229F7B5E77D3EC9DE4036">
                            <name>ToUtf8(const String&lt;uchar>&amp; utf32Str)</name>
                            <syntax>public String&lt;char> ToUtf8(const String&lt;uchar>&amp; utf32Str);</syntax>
                            <parameters>
                                <parameter>
                                    <name>utf32Str</name>
                                    <type ref="type.1580383"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580238"/>
                        </overload>
                        <overload id="function_ToUtf8_63916ECE0F4D6130E20FDD15D7F1BFF840F53865">
                            <name>ToUtf8(const String&lt;wchar>&amp; utf16Str)</name>
                            <syntax>public String&lt;char> ToUtf8(const String&lt;wchar>&amp; utf16Str);</syntax>
                            <parameters>
                                <parameter>
                                    <name>utf16Str</name>
                                    <type ref="type.1580339"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580238"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_Transform_D04DA8209BBFF0BFA60C50E544D1E07A875ECE3D">
                    <name>Transform</name>
                    <overloads>
                        <overload id="function_Transform_B8468BDCB0593D1F68859325475E6D8E7A6812CE">
                            <name>Transform&lt;I, O, F>(I begin, I end, O to, F fun)</name>
                            <syntax>public O Transform&lt;I, O, F>(I begin, I end, O to, F fun);</syntax>
                            <templateParameters>
                                <templateParameter id="1579578">
                                    <name>I</name>
                                </templateParameter>
                                <templateParameter id="1579579">
                                    <name>O</name>
                                </templateParameter>
                                <templateParameter id="1579580">
                                    <name>F</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>begin</name>
                                    <type ref="1579578"/>
                                </parameter>
                                <parameter>
                                    <name>end</name>
                                    <type ref="1579578"/>
                                </parameter>
                                <parameter>
                                    <name>to</name>
                                    <type ref="1579579"/>
                                </parameter>
                                <parameter>
                                    <name>fun</name>
                                    <type ref="1579580"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1579579"/>
                            <constraint>
                                <type ref="1579578"/>
                                <connector>is</connector>
                                <concept ref="concept_InputIterator_BC46FC10D5EBF285BDF3232BD222C09235D06406"/>
                                <connector>and</connector>
                                <type ref="1579579"/>
                                <connector>is</connector>
                                <concept ref="concept_OutputIterator_A454885B47A3648BC107033D34E4A3F5AF8202EC"/>
                                <connector>and</connector>
                                <type ref="1579580"/>
                                <connector>is</connector>
                                <concept ref="concept_UnaryFunction_DDD936ABC21BA268C3B3C9F4820F5DFE1ACAA344"/>
                                <connector>and</connector>
                                <type ref="1579580"/>
                                <dot>ArgumentType</dot>
                                <connector>is</connector>
                                <type ref="1579578"/>
                                <dot>ValueType</dot>
                                <connector>and</connector>
                                <concept ref="concept_CopyAssignable_C698EC74F187E27A402BB382B7AC4F26FE50056C">
                                    <params>
                                        <type ref="1579579"/>
                                        <dot>ValueType</dot>
                                        <type ref="1579580"/>
                                        <dot>ResultType</dot>
                                    </params>
                                </concept>
                            </constraint>
                        </overload>
                        <overload id="function_Transform_018C2D2B9797E791EEEE970AEABB387FE99AF712">
                            <name>Transform&lt;I1, I2, O, F>(I1 begin1, I1 end1, I2 begin2, O to, F fun)</name>
                            <syntax>public O Transform&lt;I1, I2, O, F>(I1 begin1, I1 end1, I2 begin2, O to, F fun);</syntax>
                            <templateParameters>
                                <templateParameter id="1579581">
                                    <name>I1</name>
                                </templateParameter>
                                <templateParameter id="1579582">
                                    <name>I2</name>
                                </templateParameter>
                                <templateParameter id="1579583">
                                    <name>O</name>
                                </templateParameter>
                                <templateParameter id="1579584">
                                    <name>F</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>begin1</name>
                                    <type ref="1579581"/>
                                </parameter>
                                <parameter>
                                    <name>end1</name>
                                    <type ref="1579581"/>
                                </parameter>
                                <parameter>
                                    <name>begin2</name>
                                    <type ref="1579582"/>
                                </parameter>
                                <parameter>
                                    <name>to</name>
                                    <type ref="1579583"/>
                                </parameter>
                                <parameter>
                                    <name>fun</name>
                                    <type ref="1579584"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1579583"/>
                            <constraint>
                                <type ref="1579581"/>
                                <connector>is</connector>
                                <concept ref="concept_InputIterator_BC46FC10D5EBF285BDF3232BD222C09235D06406"/>
                                <connector>and</connector>
                                <type ref="1579582"/>
                                <connector>is</connector>
                                <concept ref="concept_InputIterator_BC46FC10D5EBF285BDF3232BD222C09235D06406"/>
                                <connector>and</connector>
                                <type ref="1579583"/>
                                <connector>is</connector>
                                <concept ref="concept_OutputIterator_A454885B47A3648BC107033D34E4A3F5AF8202EC"/>
                                <connector>and</connector>
                                <type ref="1579584"/>
                                <connector>is</connector>
                                <concept ref="concept_BinaryFunction_7F3A6EF707F08A997487EC3748D74CC2156DB250"/>
                                <connector>and</connector>
                                <type ref="1579584"/>
                                <dot>FirstArgumentType</dot>
                                <connector>is</connector>
                                <type ref="1579581"/>
                                <dot>ValueType</dot>
                                <connector>and</connector>
                                <type ref="1579584"/>
                                <dot>SecondArgumentType</dot>
                                <connector>is</connector>
                                <type ref="1579582"/>
                                <dot>ValueType</dot>
                                <connector>and</connector>
                                <concept ref="concept_CopyAssignable_C698EC74F187E27A402BB382B7AC4F26FE50056C">
                                    <params>
                                        <type ref="1579583"/>
                                        <dot>ValueType</dot>
                                        <type ref="1579584"/>
                                        <dot>ResultType</dot>
                                    </params>
                                </concept>
                            </constraint>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_Trim_81141111AEAEC14B75E262A77658E315F4682FA0">
                    <name>Trim</name>
                    <overloads>
                        <overload id="function_Trim_4EC105640B060F96EB3BC9E288DE7D1624DCC838">
                            <name>Trim(const String&lt;char>&amp; s)</name>
                            <syntax>public nothrow String&lt;char> Trim(const String&lt;char>&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580238"/>
                        </overload>
                        <overload id="function_Trim_CA0D04404C5B8206637F0F564509D2C0A091EFD1">
                            <name>Trim(const String&lt;uchar>&amp; s)</name>
                            <syntax>public String&lt;uchar> Trim(const String&lt;uchar>&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1580383"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580362"/>
                        </overload>
                        <overload id="function_Trim_A64760453672C5C36233CE34B42296B97AD7A38E">
                            <name>Trim(const String&lt;wchar>&amp; s)</name>
                            <syntax>public String&lt;wchar> Trim(const String&lt;wchar>&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1580339"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580318"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_UnguardedLinearInsert_06714A0942BAFB9BAF4DB7BA39960CBD4DCC27D5">
                    <name>UnguardedLinearInsert&lt;I, T, R>(I last, const T&amp; val, R r)</name>
                    <syntax>public nothrow void UnguardedLinearInsert&lt;I, T, R>(I last, const T&amp; val, R r);</syntax>
                    <templateParameters>
                        <templateParameter id="1579603">
                            <name>I</name>
                        </templateParameter>
                        <templateParameter id="1579604">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="1579605">
                            <name>R</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>last</name>
                            <type ref="1579603"/>
                        </parameter>
                        <parameter>
                            <name>val</name>
                            <type ref="type.1580229"/>
                        </parameter>
                        <parameter>
                            <name>r</name>
                            <type ref="1579605"/>
                        </parameter>
                    </parameters>
                    <constraint>
                        <type ref="1579603"/>
                        <connector>is</connector>
                        <concept ref="concept_RandomAccessIterator_A5A1B6A4EC8E181A67C733002B3BE437554D3484"/>
                        <connector>and</connector>
                        <type ref="1579604"/>
                        <connector>is</connector>
                        <type ref="1579603"/>
                        <dot>ValueType</dot>
                        <connector>and</connector>
                        <type ref="1579605"/>
                        <connector>is</connector>
                        <concept ref="concept_Relation_EA6D5281439518EB11DD9152636FEB86745EE746"/>
                        <connector>and</connector>
                        <type ref="1579605"/>
                        <dot>Domain</dot>
                        <connector>is</connector>
                        <type ref="1579603"/>
                        <dot>ValueType</dot>
                    </constraint>
                </function>
                <function id="function_UnguardedPartition_3AE6824F66413D8C639E47121D94A8DF1B0FC391">
                    <name>UnguardedPartition&lt;I, T, R>(I begin, I end, const T&amp; pivot, R r)</name>
                    <syntax>public nothrow I UnguardedPartition&lt;I, T, R>(I begin, I end, const T&amp; pivot, R r);</syntax>
                    <templateParameters>
                        <templateParameter id="1579600">
                            <name>I</name>
                        </templateParameter>
                        <templateParameter id="1579601">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="1579602">
                            <name>R</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>begin</name>
                            <type ref="1579600"/>
                        </parameter>
                        <parameter>
                            <name>end</name>
                            <type ref="1579600"/>
                        </parameter>
                        <parameter>
                            <name>pivot</name>
                            <type ref="type.1580228"/>
                        </parameter>
                        <parameter>
                            <name>r</name>
                            <type ref="1579602"/>
                        </parameter>
                    </parameters>
                    <returnType ref="1579600"/>
                    <constraint>
                        <type ref="1579600"/>
                        <connector>is</connector>
                        <concept ref="concept_RandomAccessIterator_A5A1B6A4EC8E181A67C733002B3BE437554D3484"/>
                        <connector>and</connector>
                        <type ref="1579601"/>
                        <connector>is</connector>
                        <type ref="1579600"/>
                        <dot>ValueType</dot>
                        <connector>and</connector>
                        <type ref="1579602"/>
                        <connector>is</connector>
                        <concept ref="concept_Relation_EA6D5281439518EB11DD9152636FEB86745EE746"/>
                        <connector>and</connector>
                        <type ref="1579602"/>
                        <dot>Domain</dot>
                        <connector>is</connector>
                        <type ref="1579600"/>
                        <dot>ValueType</dot>
                    </constraint>
                </function>
                <function id="function_group_UpperBound_28E09EB05F8DD109DBCF7913754DD8C2E970581F">
                    <name>UpperBound</name>
                    <overloads>
                        <overload id="function_UpperBound_20A6C04D12E1E4DCCC376A4E7332BAAA59519694">
                            <name>UpperBound&lt;I, T, R>(I first, I last, const T&amp; value, R r)</name>
                            <syntax>public nothrow I UpperBound&lt;I, T, R>(I first, I last, const T&amp; value, R r);</syntax>
                            <templateParameters>
                                <templateParameter id="1579545">
                                    <name>I</name>
                                </templateParameter>
                                <templateParameter id="1579546">
                                    <name>T</name>
                                </templateParameter>
                                <templateParameter id="1579547">
                                    <name>R</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>first</name>
                                    <type ref="1579545"/>
                                </parameter>
                                <parameter>
                                    <name>last</name>
                                    <type ref="1579545"/>
                                </parameter>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.1580204"/>
                                </parameter>
                                <parameter>
                                    <name>r</name>
                                    <type ref="1579547"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1579545"/>
                            <constraint>
                                <type ref="1579545"/>
                                <connector>is</connector>
                                <concept ref="concept_ForwardIterator_4C777D423CF589B8535F29F910C025990ED656D4"/>
                                <connector>and</connector>
                                <type ref="1579546"/>
                                <connector>is</connector>
                                <type ref="1579545"/>
                                <dot>ValueType</dot>
                                <connector>and</connector>
                                <type ref="1579547"/>
                                <connector>is</connector>
                                <concept ref="concept_Relation_EA6D5281439518EB11DD9152636FEB86745EE746"/>
                                <connector>and</connector>
                                <type ref="1579547"/>
                                <dot>Domain</dot>
                                <connector>is</connector>
                                <type ref="1579545"/>
                                <dot>ValueType</dot>
                            </constraint>
                        </overload>
                        <overload id="function_UpperBound_E87F609F53AED90552EEC6FF298BE586CECC5143">
                            <name>UpperBound&lt;I, T>(I first, I last, const T&amp; value)</name>
                            <syntax>public nothrow I UpperBound&lt;I, T>(I first, I last, const T&amp; value);</syntax>
                            <templateParameters>
                                <templateParameter id="1579543">
                                    <name>I</name>
                                </templateParameter>
                                <templateParameter id="1579544">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>first</name>
                                    <type ref="1579543"/>
                                </parameter>
                                <parameter>
                                    <name>last</name>
                                    <type ref="1579543"/>
                                </parameter>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.1580203"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1579543"/>
                            <constraint>
                                <type ref="1579543"/>
                                <connector>is</connector>
                                <concept ref="concept_ForwardIterator_4C777D423CF589B8535F29F910C025990ED656D4"/>
                                <connector>and</connector>
                                <concept ref="concept_TotallyOrdered_40CD71CFED7B3E26AA555259C8C3A14D6CE666EC">
                                    <params>
                                        <type ref="1579544"/>
                                        <type ref="1579543"/>
                                        <dot>ValueType</dot>
                                    </params>
                                </concept>
                            </constraint>
                        </overload>
                    </overloads>
                </function>
                <function id="function_endl_71F787A419EF569178A77D519ECADF813F51D581">
                    <name>endl()</name>
                    <syntax>public nothrow inline Endl endl();</syntax>
                    <returnType ref="1580062"/>
                </function>
                <function id="function_group_op_plus_C9FCFD8E4E0F27EFEFEA982DE2CE2508CDB3F20F">
                    <name>operator+</name>
                    <overloads>
                        <overload id="function_op_plus_4E9524E4B7C24BB161E4B75984612E6FC79C613A">
                            <name>operator+&lt;CharT>(const CharT* first, const String&lt;CharT>&amp; second)</name>
                            <syntax>public nothrow String&lt;CharT> operator+&lt;CharT>(const CharT* first, const String&lt;CharT>&amp; second);</syntax>
                            <templateParameters>
                                <templateParameter id="1580074">
                                    <name>CharT</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>first</name>
                                    <type ref="type.1582182"/>
                                </parameter>
                                <parameter>
                                    <name>second</name>
                                    <type ref="type.1582204"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1582183"/>
                        </overload>
                        <overload id="function_op_plus_B32FEA3F2E0AF358E65CC12E856606755518CA8B">
                            <name>operator+&lt;CharT>(const String&lt;CharT>&amp; first, const CharT* second)</name>
                            <syntax>public nothrow String&lt;CharT> operator+&lt;CharT>(const String&lt;CharT>&amp; first, const CharT* second);</syntax>
                            <templateParameters>
                                <templateParameter id="1580073">
                                    <name>CharT</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>first</name>
                                    <type ref="type.1582159"/>
                                </parameter>
                                <parameter>
                                    <name>second</name>
                                    <type ref="type.1582142"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1582137"/>
                        </overload>
                        <overload id="function_op_plus_25D97F9C83D6E07A3F5736F043841128519BB8B3">
                            <name>operator+&lt;CharT>(const String&lt;CharT>&amp; first, const String&lt;CharT>&amp; second)</name>
                            <syntax>public nothrow String&lt;CharT> operator+&lt;CharT>(const String&lt;CharT>&amp; first, const String&lt;CharT>&amp; second);</syntax>
                            <templateParameters>
                                <templateParameter id="1580072">
                                    <name>CharT</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>first</name>
                                    <type ref="type.1582114"/>
                                </parameter>
                                <parameter>
                                    <name>second</name>
                                    <type ref="type.1582114"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1582092"/>
                        </overload>
                        <overload id="function_op_plus_70568DC4EA9A41A6C068822650F5CB2C788A4CC6">
                            <name>operator+&lt;T, R, P>(const RandomAccessIter&lt;T, R, P>&amp; it, long offset)</name>
                            <syntax>public nothrow inline RandomAccessIter&lt;T, R, P> operator+&lt;T, R, P>(const RandomAccessIter&lt;T, R, P>&amp; it, long offset);</syntax>
                            <templateParameters>
                                <templateParameter id="1580009">
                                    <name>T</name>
                                </templateParameter>
                                <templateParameter id="1580010">
                                    <name>R</name>
                                </templateParameter>
                                <templateParameter id="1580011">
                                    <name>P</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>it</name>
                                    <type ref="type.1581662"/>
                                </parameter>
                                <parameter>
                                    <name>offset</name>
                                    <type ref="type.1579457"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1581658"/>
                        </overload>
                        <overload id="function_op_plus_F27094AD37DCDB85F062F00D202E7A69AC877DAE">
                            <name>operator+&lt;T, R, P>(long offset, const RandomAccessIter&lt;T, R, P>&amp; it)</name>
                            <syntax>public nothrow inline RandomAccessIter&lt;T, R, P> operator+&lt;T, R, P>(long offset, const RandomAccessIter&lt;T, R, P>&amp; it);</syntax>
                            <templateParameters>
                                <templateParameter id="1580012">
                                    <name>T</name>
                                </templateParameter>
                                <templateParameter id="1580013">
                                    <name>R</name>
                                </templateParameter>
                                <templateParameter id="1580014">
                                    <name>P</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>offset</name>
                                    <type ref="type.1579457"/>
                                </parameter>
                                <parameter>
                                    <name>it</name>
                                    <type ref="type.1581669"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1581665"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_op_minus_8CC59AA8F159CE36FE8E9FA3B53D55402A4DA142">
                    <name>operator-</name>
                    <overloads>
                        <overload id="function_op_minus_84178E3BDBDF33DC8728A135E4861539B7869AE9">
                            <name>operator-&lt;T, R, P>(const RandomAccessIter&lt;T, R, P>&amp; it, long offset)</name>
                            <syntax>public nothrow inline RandomAccessIter&lt;T, R, P> operator-&lt;T, R, P>(const RandomAccessIter&lt;T, R, P>&amp; it, long offset);</syntax>
                            <templateParameters>
                                <templateParameter id="1580015">
                                    <name>T</name>
                                </templateParameter>
                                <templateParameter id="1580016">
                                    <name>R</name>
                                </templateParameter>
                                <templateParameter id="1580017">
                                    <name>P</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>it</name>
                                    <type ref="type.1581676"/>
                                </parameter>
                                <parameter>
                                    <name>offset</name>
                                    <type ref="type.1579457"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1581672"/>
                        </overload>
                        <overload id="function_op_minus_B42A6D5BC1C0BC85F617C85745C98FE0271CE3AF">
                            <name>operator-&lt;T, R, P>(const RandomAccessIter&lt;T, R, P>&amp; left, const RandomAccessIter&lt;T, R, P>&amp; right)</name>
                            <syntax>public nothrow inline long operator-&lt;T, R, P>(const RandomAccessIter&lt;T, R, P>&amp; left, const RandomAccessIter&lt;T, R, P>&amp; right);</syntax>
                            <templateParameters>
                                <templateParameter id="1580018">
                                    <name>T</name>
                                </templateParameter>
                                <templateParameter id="1580019">
                                    <name>R</name>
                                </templateParameter>
                                <templateParameter id="1580020">
                                    <name>P</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.1581683"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.1581683"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579457"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_op_less_A7ADD706A56D40320D9D0755E6FFE077812BDBF8">
                    <name>operator&lt;</name>
                    <overloads>
                        <overload id="function_op_less_DDB7FC849D9E8A0DB43CCDDFEF1DE4BF30B3EB5C">
                            <name>operator&lt;&lt;CharT>(const String&lt;CharT>&amp; left, const String&lt;CharT>&amp; right)</name>
                            <syntax>public nothrow bool operator&lt;&lt;CharT>(const String&lt;CharT>&amp; left, const String&lt;CharT>&amp; right);</syntax>
                            <templateParameters>
                                <templateParameter id="1580071">
                                    <name>CharT</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.1582069"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.1582069"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </overload>
                        <overload id="function_op_less_6A8315DD5504F9A521502BFBBF0B2B07E191B38A">
                            <name>operator&lt;&lt;T, R, P>(const RandomAccessIter&lt;T, R, P>&amp; left, const RandomAccessIter&lt;T, R, P>&amp; right)</name>
                            <syntax>public nothrow inline bool operator&lt;&lt;T, R, P>(const RandomAccessIter&lt;T, R, P>&amp; left, const RandomAccessIter&lt;T, R, P>&amp; right);</syntax>
                            <templateParameters>
                                <templateParameter id="1580024">
                                    <name>T</name>
                                </templateParameter>
                                <templateParameter id="1580025">
                                    <name>R</name>
                                </templateParameter>
                                <templateParameter id="1580026">
                                    <name>P</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.1581697"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.1581697"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </overload>
                        <overload id="function_op_less_A588DA28BB52D347ED1FF7E461C42FF7B5DCA8FC">
                            <name>operator&lt;&lt;T, U>(const Pair&lt;T, U>&amp; left, const Pair&lt;T, U>&amp; right)</name>
                            <syntax>public nothrow bool operator&lt;&lt;T, U>(const Pair&lt;T, U>&amp; left, const Pair&lt;T, U>&amp; right);</syntax>
                            <templateParameters>
                                <templateParameter id="1579988">
                                    <name>T</name>
                                </templateParameter>
                                <templateParameter id="1579989">
                                    <name>U</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.1581579"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.1581579"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                            <constraint>
                                <type ref="1579988"/>
                                <connector>is</connector>
                                <concept ref="concept_TotallyOrdered_E99156F9F67A4CDD40DFE7EAC64E14E2CF6B24F2"/>
                                <connector>and</connector>
                                <type ref="1579989"/>
                                <connector>is</connector>
                                <concept ref="concept_TotallyOrdered_E99156F9F67A4CDD40DFE7EAC64E14E2CF6B24F2"/>
                            </constraint>
                        </overload>
                        <overload id="function_op_less_D89FF7D376F39F849E551A604EDE58DAFE9058D5">
                            <name>operator&lt;&lt;T>(const UniquePtr&lt;T>&amp; left, const UniquePtr&lt;T>&amp; right)</name>
                            <syntax>public nothrow inline bool operator&lt;&lt;T>(const UniquePtr&lt;T>&amp; left, const UniquePtr&lt;T>&amp; right);</syntax>
                            <templateParameters>
                                <templateParameter id="1580190">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.1584116"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.1584116"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_op_eq_3397CE9B6254641971A3405FCF2E1331E936E15B">
                    <name>operator==</name>
                    <overloads>
                        <overload id="function_op_eq_9AA082C23D81DC01FD730478CF27A5617EF747E5">
                            <name>operator==&lt;CharT>(const String&lt;CharT>&amp; left, const String&lt;CharT>&amp; right)</name>
                            <syntax>public nothrow bool operator==&lt;CharT>(const String&lt;CharT>&amp; left, const String&lt;CharT>&amp; right);</syntax>
                            <templateParameters>
                                <templateParameter id="1580070">
                                    <name>CharT</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.1582024"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.1582024"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </overload>
                        <overload id="function_op_eq_F357610FBC8C77AD5F1F942162E9F5A2BBEF5371">
                            <name>operator==&lt;T, R, P>(const RandomAccessIter&lt;T, R, P>&amp; left, const RandomAccessIter&lt;T, R, P>&amp; right)</name>
                            <syntax>public nothrow inline bool operator==&lt;T, R, P>(const RandomAccessIter&lt;T, R, P>&amp; left, const RandomAccessIter&lt;T, R, P>&amp; right);</syntax>
                            <templateParameters>
                                <templateParameter id="1580021">
                                    <name>T</name>
                                </templateParameter>
                                <templateParameter id="1580022">
                                    <name>R</name>
                                </templateParameter>
                                <templateParameter id="1580023">
                                    <name>P</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.1581690"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.1581690"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </overload>
                        <overload id="function_op_eq_772F9A44D92A0CC5596F49F7F7144C97DC6D490E">
                            <name>operator==&lt;T, U>(const Pair&lt;T, U>&amp; left, const Pair&lt;T, U>&amp; right)</name>
                            <syntax>public nothrow bool operator==&lt;T, U>(const Pair&lt;T, U>&amp; left, const Pair&lt;T, U>&amp; right);</syntax>
                            <templateParameters>
                                <templateParameter id="1579990">
                                    <name>T</name>
                                </templateParameter>
                                <templateParameter id="1579991">
                                    <name>U</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.1581586"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.1581586"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                            <constraint>
                                <type ref="1579990"/>
                                <connector>is</connector>
                                <concept ref="concept_Regular_A56EC84F9A51535281FA2B6B074E90F9B3BBCCC1"/>
                                <connector>and</connector>
                                <type ref="1579991"/>
                                <connector>is</connector>
                                <concept ref="concept_Regular_A56EC84F9A51535281FA2B6B074E90F9B3BBCCC1"/>
                            </constraint>
                        </overload>
                        <overload id="function_op_eq_58404146752911C1C448FA1EC418C839ADB26FA5">
                            <name>operator==&lt;T>(const UniquePtr&lt;T>&amp; left, const UniquePtr&lt;T>&amp; right)</name>
                            <syntax>public nothrow inline bool operator==&lt;T>(const UniquePtr&lt;T>&amp; left, const UniquePtr&lt;T>&amp; right);</syntax>
                            <templateParameters>
                                <templateParameter id="1580189">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.1584105"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.1584105"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </overload>
                    </overloads>
                </function>
            </functions>
            <typedefs>
                <typedef id="typedef_string_B6DB6B2DEFC437FBF697A2E84F7B7771FC1DDEE3">
                    <name>string</name>
                    <syntax>public typedef String&lt;char> string;</syntax>
                    <type ref="type.1580238"/>
                </typedef>
                <typedef id="typedef_ustring_1750E1C62AAF5897C1F1DA3C5BC4999982AE9B36">
                    <name>ustring</name>
                    <syntax>public typedef String&lt;uchar> ustring;</syntax>
                    <type ref="type.1580362"/>
                </typedef>
                <typedef id="typedef_wstring_EDB6336488DF46A7779AFB4209BAB1DAF59B5DAE">
                    <name>wstring</name>
                    <syntax>public typedef String&lt;wchar> wstring;</syntax>
                    <type ref="type.1580318"/>
                </typedef>
            </typedefs>
            <constants>
                <constant id="constant_insertionSortThreshold_56F85BEA8266D9529E96B6415FF32EC6B8AB62C5">
                    <name>insertionSortThreshold</name>
                    <syntax>public const long insertionSortThreshold = 16;</syntax>
                    <type ref="type.1579457"/>
                    <value>16</value>
                </constant>
            </constants>
        </namespace>
        <namespace id="System.Ascii">
            <name>System.Ascii</name>
            <classes>
                <class id="1579648">
                    <name>CharClassTable</name>
                    <groupName>CharClassTable</groupName>
                    <syntax> public static class CharClassTable;</syntax>
                    <staticMemberFunctions>
                        <function id="member_function_GetCharacterClass_CharClassTable_6D13F57A23FC87E514FC6824F83ABE307D3A50E9">
                            <name>GetCharacterClass(char c)</name>
                            <syntax>public static nothrow CharClass GetCharacterClass(char c);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.1579461"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1579647"/>
                        </function>
                    </staticMemberFunctions>
                </class>
            </classes>
            <functions>
                <function id="function_op_eq_5C7E6C9355463E5994CD98F9831E6FF6E54B644D">
                    <name>operator==(CharClass left, CharClass right)</name>
                    <syntax>public bool operator==(CharClass left, CharClass right);</syntax>
                    <parameters>
                        <parameter>
                            <name>left</name>
                            <type ref="1579647"/>
                        </parameter>
                        <parameter>
                            <name>right</name>
                            <type ref="1579647"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                </function>
            </functions>
            <enumerations>
                <enumeration id="1579647">
                    <name>CharClass</name>
                    <syntax>public enum CharClass;</syntax>
                    <underlyingType ref="type.1579454"/>
                    <enumConstant>
                        <name>none</name>
                        <value>0u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>lower</name>
                        <value>1u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>upper</name>
                        <value>2u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>alpha</name>
                        <value>3u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>digit</name>
                        <value>4u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>alnum</name>
                        <value>7u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>xdigit</name>
                        <value>8u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cntrl</name>
                        <value>16u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>graph</name>
                        <value>32u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>print</name>
                        <value>64u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>punct</name>
                        <value>128u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>space</name>
                        <value>256u</value>
                    </enumConstant>
                </enumeration>
            </enumerations>
        </namespace>
        <namespace id="System.Collections">
            <name>System.Collections</name>
            <classes>
                <class id="1579653">
                    <name>Bitset</name>
                    <groupName>Bitset</groupName>
                    <syntax> public class Bitset;</syntax>
                    <constructors>
                        <constructor id="default_constructor_Bitset_377449C5DB3A60623DD07B880E6A3E0E46A0ADD9">
                            <name>Bitset()</name>
                            <syntax>public nothrow Bitset();</syntax>
                        </constructor>
                        <constructor id="move_constructor_Bitset_44E080E801C413756451C5A4B75ADDD3AB2F933C">
                            <name>Bitset(Bitset&amp;&amp; @p0)</name>
                            <syntax>public nothrow default Bitset(Bitset&amp;&amp; @p0);</syntax>
                            <parameters>
                                <parameter>
                                    <name>@p0</name>
                                    <type ref="type.1580410"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="copy_constructor_Bitset_EB006E8408E837855C0C0B24F3042A8D25C282DB">
                            <name>Bitset(const Bitset&amp; @p0)</name>
                            <syntax>public default Bitset(const Bitset&amp; @p0);</syntax>
                            <parameters>
                                <parameter>
                                    <name>@p0</name>
                                    <type ref="type.1580409"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_Bitset_FBBF19237FAC6B5BFC3E4BE35B642A332CBCE9E6">
                            <name>Bitset(const String&lt;char>&amp; bits_)</name>
                            <syntax>public Bitset(const String&lt;char>&amp; bits_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>bits_</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_Bitset_CE0374A43EAC8403D757921530D2EC8B16A78804">
                            <name>Bitset(long numBits_)</name>
                            <syntax>public Bitset(long numBits_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>numBits_</name>
                                    <type ref="type.1579457"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_All_Bitset_61C3B1A51B9F332282932D54AFE6E7B5A9B01EFA">
                            <name>All() const</name>
                            <syntax>public nothrow bool All() const;</syntax>
                            <returnType ref="type.1579450"/>
                        </function>
                        <function id="member_function_Any_Bitset_3FEF7A94F01A83026868ABF183B3CFB07A741768">
                            <name>Any() const</name>
                            <syntax>public nothrow bool Any() const;</syntax>
                            <returnType ref="type.1579450"/>
                        </function>
                        <function id="member_function_Bits_Bitset_F3FFAD112AD32A189DAAFB44500237F0FAD59B5D">
                            <name>Bits() const</name>
                            <syntax>public nothrow inline List&lt;ulong>&amp; Bits() const;</syntax>
                            <returnType ref="type.1580434"/>
                        </function>
                        <function id="member_function_Clear_Bitset_71948901C307DEEA2731244A123C2DFE010C0EDB">
                            <name>Clear()</name>
                            <syntax>public nothrow void Clear();</syntax>
                        </function>
                        <function id="member_function_Count_Bitset_226F0B844ABA24912B1A302981A24EF26C8A4315">
                            <name>Count() const</name>
                            <syntax>public nothrow inline long Count() const;</syntax>
                            <returnType ref="type.1579457"/>
                        </function>
                        <function id="function_group_Flip_95D593FF22A52D27061F54BE231B50666C6D4323">
                            <name>Flip</name>
                            <overloads>
                                <overload id="member_function_Flip_Bitset_BF3263EEFB4F883E94883673A07F5A18302D1575">
                                    <name>Flip()</name>
                                    <syntax>public nothrow void Flip();</syntax>
                                </overload>
                                <overload id="member_function_Flip_Bitset_615540BFC9D6EAA661ADE50BE4D6E2FE35EFC0DF">
                                    <name>Flip(long pos)</name>
                                    <syntax>public nothrow inline void Flip(long pos);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>pos</name>
                                            <type ref="type.1579457"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_LastBlockStartIndex_Bitset_B5F5BE3B2422D32FCE8DE37CDD67D932E1EFD213">
                            <name>LastBlockStartIndex() const</name>
                            <syntax>public nothrow inline long LastBlockStartIndex() const;</syntax>
                            <returnType ref="type.1579457"/>
                        </function>
                        <function id="member_function_None_Bitset_F9B4CAF52BD9B30CBBB0DEF4D59F986D50FCE2C3">
                            <name>None() const</name>
                            <syntax>public nothrow bool None() const;</syntax>
                            <returnType ref="type.1579450"/>
                        </function>
                        <function id="member_function_NumBits_Bitset_48826B756E50D05DB7839B7D31D1864F465CCC91">
                            <name>NumBits() const</name>
                            <syntax>public nothrow inline long NumBits() const;</syntax>
                            <returnType ref="type.1579457"/>
                        </function>
                        <function id="member_function_NumFullBlocks_Bitset_2C01E50108456892CCA9C25BF8F07762B3F3A916">
                            <name>NumFullBlocks() const</name>
                            <syntax>public nothrow inline long NumFullBlocks() const;</syntax>
                            <returnType ref="type.1579457"/>
                        </function>
                        <function id="function_group_Reset_3332FA1182B6A97E6FE6AE3E1497BBE946F4824E">
                            <name>Reset</name>
                            <overloads>
                                <overload id="member_function_Reset_Bitset_8A9FA085D394CE586C4007266650EB6706E5A7FF">
                                    <name>Reset()</name>
                                    <syntax>public nothrow void Reset();</syntax>
                                </overload>
                                <overload id="member_function_Reset_Bitset_79E7504F98860C8109BAA5C2A07BD11BBD6C13A1">
                                    <name>Reset(long pos)</name>
                                    <syntax>public nothrow inline void Reset(long pos);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>pos</name>
                                            <type ref="type.1579457"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_Resize_Bitset_2CE2B912CCB48DFDBDE4354E3F5164C161773E41">
                            <name>Resize(long numBits_)</name>
                            <syntax>public void Resize(long numBits_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>numBits_</name>
                                    <type ref="type.1579457"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="function_group_Set_2A7205E5118F3371F79AA12F65ED504A8D88E718">
                            <name>Set</name>
                            <overloads>
                                <overload id="member_function_Set_Bitset_D59A331833604F15E7C3D3E19558DC1F0CE99DEB">
                                    <name>Set()</name>
                                    <syntax>public nothrow void Set();</syntax>
                                </overload>
                                <overload id="member_function_Set_Bitset_F4EC7B80F0ADB5216F3CB11EDB66369E63760CB8">
                                    <name>Set(long pos)</name>
                                    <syntax>public nothrow inline void Set(long pos);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>pos</name>
                                            <type ref="type.1579457"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Set_Bitset_BCA42931F795DF26339FB2E37ABF5606B8ED5A22">
                                    <name>Set(long pos, bool bit)</name>
                                    <syntax>public nothrow void Set(long pos, bool bit);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>pos</name>
                                            <type ref="type.1579457"/>
                                        </parameter>
                                        <parameter>
                                            <name>bit</name>
                                            <type ref="type.1579450"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_Test_Bitset_C6A3B9521EBC0660CA69460BA24F49EEACF4D208">
                            <name>Test(long pos) const</name>
                            <syntax>public nothrow inline bool Test(long pos) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>pos</name>
                                    <type ref="type.1579457"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </function>
                        <function id="member_function_ToString_Bitset_0FED18EDFE916C1FF1685D3559B281236E1822DA">
                            <name>ToString() const</name>
                            <syntax>public nothrow String&lt;char> ToString() const;</syntax>
                            <returnType ref="type.1580238"/>
                        </function>
                        <function id="function_group_op_assign_A9E90F203810F6E1D52DCB0CE9A23FB99D50D012">
                            <name>operator=</name>
                            <overloads>
                                <overload id="move_assignment_op_assign_Bitset_49B81B550D9230ABCF5D78A550417BE1FEE539F5">
                                    <name>operator=(Bitset&amp;&amp; @p0)</name>
                                    <syntax>public nothrow default void operator=(Bitset&amp;&amp; @p0);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>@p0</name>
                                            <type ref="type.1580410"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="copy_assignment_op_assign_Bitset_0C730C3C5C22FAD698F2E86EBF375D07DEAA4EF6">
                                    <name>operator=(const Bitset&amp; @p0)</name>
                                    <syntax>public default void operator=(const Bitset&amp; @p0);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>@p0</name>
                                            <type ref="type.1580409"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_op_index_Bitset_32C14482F5DA7EF77F9B24E9BF5F7C2136A83565">
                            <name>operator[](long index) const</name>
                            <syntax>public nothrow inline bool operator[](long index) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>index</name>
                                    <type ref="type.1579457"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </function>
                    </functions>
                </class>
                <class id="1581176">
                    <name>Bucket&lt;T></name>
                    <groupName>Bucket</groupName>
                    <syntax> public class Bucket&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579937">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constraint>
                        <type ref="1579937"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                    </constraint>
                    <constructors>
                        <constructor id="constructor_Bucket_T_C3BEDB3CB145D98820A7D875A84535BF4F1453B9">
                            <name>Bucket&lt;T>(const T&amp; value_, Bucket&lt;T>* next_)</name>
                            <syntax>public Bucket&lt;T>(const T&amp; value_, Bucket&lt;T>* next_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value_</name>
                                    <type ref="type.473"/>
                                </parameter>
                                <parameter>
                                    <name>next_</name>
                                    <type ref="type.470"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Next_Bucket_T_05267D2FC8C1EC3095C086581CD6BAF77B425603">
                            <name>Next() const</name>
                            <syntax>public nothrow inline Bucket&lt;T>* Next() const;</syntax>
                            <returnType ref="type.470"/>
                        </function>
                        <function id="member_function_SetNext_Bucket_T_3FEF210B59761C4166F7CB72F488B2EA0A0863E0">
                            <name>SetNext(Bucket&lt;T>* next_)</name>
                            <syntax>public nothrow inline void SetNext(Bucket&lt;T>* next_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>next_</name>
                                    <type ref="type.470"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="function_group_Value_F5B1363F74D23B33620B7B64F94D8A12E8B07EB2">
                            <name>Value</name>
                            <overloads>
                                <overload id="member_function_Value_Bucket_T_9C4B92BF600464F6CC996CED43C544E2AFDE14C8">
                                    <name>Value()</name>
                                    <syntax>public nothrow inline T&amp; Value();</syntax>
                                    <returnType ref="type.474"/>
                                </overload>
                                <overload id="member_function_Value_Bucket_T_CF58B3FDBB03AAEE43FB66749BFD31B06ACE1869">
                                    <name>Value() const</name>
                                    <syntax>public nothrow inline const T&amp; Value() const;</syntax>
                                    <returnType ref="type.473"/>
                                </overload>
                            </overloads>
                        </function>
                    </functions>
                    <typedefs>
                        <typedef id="typedef_ValueType_2D44A30C22941FB9CE9C613DF99C5B4CA1915C1F">
                            <name>ValueType</name>
                            <syntax>public typedef T ValueType;</syntax>
                            <type ref="1579937"/>
                        </typedef>
                    </typedefs>
                </class>
                <class id="1580529">
                    <name>ForwardList&lt;T></name>
                    <groupName>ForwardList</groupName>
                    <syntax> public class ForwardList&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579836">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constraint>
                        <type ref="1579836"/>
                        <connector>is</connector>
                        <concept ref="concept_Regular_A56EC84F9A51535281FA2B6B074E90F9B3BBCCC1"/>
                    </constraint>
                    <constructors>
                        <constructor id="default_constructor_ForwardList_T_CCC62245CA5A4647726E0734989E9CA255F76E8B">
                            <name>ForwardList&lt;T>()</name>
                            <syntax>public nothrow ForwardList&lt;T>();</syntax>
                        </constructor>
                        <constructor id="move_constructor_ForwardList_T_47041D1FF705B233FC27AB6E2878BF63F563743A">
                            <name>ForwardList&lt;T>(ForwardList&lt;T>&amp;&amp; that)</name>
                            <syntax>public nothrow ForwardList&lt;T>(ForwardList&lt;T>&amp;&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.99"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="copy_constructor_ForwardList_T_EF4F293C06BC137E506E8A0C69F83A19427FDC25">
                            <name>ForwardList&lt;T>(const ForwardList&lt;T>&amp; that)</name>
                            <syntax>public ForwardList&lt;T>(const ForwardList&lt;T>&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.98"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="function_group_Begin_D4BDC98933F5F8E7F99AB613FB6D40868110E0B1">
                            <name>Begin</name>
                            <overloads>
                                <overload id="member_function_Begin_ForwardList_T_C26C5F45C18595C6C59F7C63CAA604743F1B3815">
                                    <name>Begin()</name>
                                    <syntax>public nothrow inline ForwardListNodeIterator&lt;T, T&amp;, T*> Begin();</syntax>
                                    <returnType ref="type.91"/>
                                </overload>
                                <overload id="member_function_Begin_ForwardList_T_3022B315D6330474E2DFA80698E0B3A642734362">
                                    <name>Begin() const</name>
                                    <syntax>public nothrow inline ForwardListNodeIterator&lt;T, const T&amp;, const T*> Begin() const;</syntax>
                                    <returnType ref="type.78"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_CBegin_ForwardList_T_B9A7A10087A10DB1DC1A9D9EF6CCABA34B777B58">
                            <name>CBegin() const</name>
                            <syntax>public nothrow inline ForwardListNodeIterator&lt;T, const T&amp;, const T*> CBegin() const;</syntax>
                            <returnType ref="type.78"/>
                        </function>
                        <function id="member_function_CEnd_ForwardList_T_F1005B4C619E5DA4FCE9E1BE0700EB7C311069A0">
                            <name>CEnd() const</name>
                            <syntax>public nothrow inline ForwardListNodeIterator&lt;T, const T&amp;, const T*> CEnd() const;</syntax>
                            <returnType ref="type.78"/>
                        </function>
                        <function id="member_function_Clear_ForwardList_T_B0233CE29403A70DB3DB5E052F2F361BFDAA50D5">
                            <name>Clear()</name>
                            <syntax>public nothrow void Clear();</syntax>
                        </function>
                        <function id="member_function_Count_ForwardList_T_635E34CBE71F55498FB1FE741A87D31901B85D43">
                            <name>Count() const</name>
                            <syntax>public nothrow long Count() const;</syntax>
                            <returnType ref="type.1579457"/>
                        </function>
                        <function id="function_group_End_135F372CFD51A00A6232759A800028D487809818">
                            <name>End</name>
                            <overloads>
                                <overload id="member_function_End_ForwardList_T_82C6BA7D53A03267486523205C57E9BC6A1DF491">
                                    <name>End()</name>
                                    <syntax>public nothrow inline ForwardListNodeIterator&lt;T, T&amp;, T*> End();</syntax>
                                    <returnType ref="type.91"/>
                                </overload>
                                <overload id="member_function_End_ForwardList_T_6531EAFAF6FB1A89376007A7F017E7B8D250B01D">
                                    <name>End() const</name>
                                    <syntax>public nothrow inline ForwardListNodeIterator&lt;T, const T&amp;, const T*> End() const;</syntax>
                                    <returnType ref="type.78"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_Front_ForwardList_T_EED016BB2E9837E8A3EECC7C755CFEC3E7AEF11D">
                            <name>Front() const</name>
                            <syntax>public nothrow inline const T&amp; Front() const;</syntax>
                            <returnType ref="type.76"/>
                        </function>
                        <function id="member_function_InsertAfter_ForwardList_T_F7316F19E36AD9C732C2FEBA4E1D238F83C01709">
                            <name>InsertAfter(ForwardListNodeIterator&lt;T, T&amp;, T*> pos, const T&amp; value)</name>
                            <syntax>public ForwardListNodeIterator&lt;T, T&amp;, T*> InsertAfter(ForwardListNodeIterator&lt;T, T&amp;, T*> pos, const T&amp; value);</syntax>
                            <parameters>
                                <parameter>
                                    <name>pos</name>
                                    <type ref="type.91"/>
                                </parameter>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.76"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.91"/>
                        </function>
                        <function id="member_function_InsertFront_ForwardList_T_678269A52B395D4F484835212549842883DDD47B">
                            <name>InsertFront(const T&amp; value)</name>
                            <syntax>public inline ForwardListNodeIterator&lt;T, T&amp;, T*> InsertFront(const T&amp; value);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.76"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.91"/>
                        </function>
                        <function id="member_function_IsEmpty_ForwardList_T_2DA8680AB96FF55021ABCEB876B1276D38AB0B7C">
                            <name>IsEmpty() const</name>
                            <syntax>public nothrow inline bool IsEmpty() const;</syntax>
                            <returnType ref="type.1579450"/>
                        </function>
                        <function id="member_function_Remove_ForwardList_T_CF027E92349700DBE05EB66D8BC992C3F99AE074">
                            <name>Remove(const T&amp; value)</name>
                            <syntax>public nothrow void Remove(const T&amp; value);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.76"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_RemoveAfter_ForwardList_T_4830FE000439AA48AE86A2BD17BCE1AA8B8C0905">
                            <name>RemoveAfter(ForwardListNodeIterator&lt;T, T&amp;, T*> pos)</name>
                            <syntax>public nothrow void RemoveAfter(ForwardListNodeIterator&lt;T, T&amp;, T*> pos);</syntax>
                            <parameters>
                                <parameter>
                                    <name>pos</name>
                                    <type ref="type.91"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_RemoveFront_ForwardList_T_58D5A2EC3145C9174C63C5830D33A0047429132F">
                            <name>RemoveFront()</name>
                            <syntax>public nothrow void RemoveFront();</syntax>
                        </function>
                        <function id="function_group_op_assign_987DE689447C35617DFA216240E69A1C3B12B4C3">
                            <name>operator=</name>
                            <overloads>
                                <overload id="move_assignment_op_assign_ForwardList_T_CD9E228321A6CEB21E39E789E9DDAF3D3A88B54C">
                                    <name>operator=(ForwardList&lt;T>&amp;&amp; that)</name>
                                    <syntax>public nothrow void operator=(ForwardList&lt;T>&amp;&amp; that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.99"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="copy_assignment_op_assign_ForwardList_T_4F66D89AE8D29ADD288085BED35D9F0B059598B9">
                                    <name>operator=(const ForwardList&lt;T>&amp; that)</name>
                                    <syntax>public void operator=(const ForwardList&lt;T>&amp; that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.98"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                    </functions>
                    <typedefs>
                        <typedef id="typedef_ConstIterator_21A3A20A8D926FE73F5EC135FE5394646ADA20A3">
                            <name>ConstIterator</name>
                            <syntax>public typedef ForwardListNodeIterator&lt;T, const T&amp;, const T*> ConstIterator;</syntax>
                            <type ref="type.78"/>
                        </typedef>
                        <typedef id="typedef_Iterator_D45FD82350AFD62BB1D9F36F798F468174A62172">
                            <name>Iterator</name>
                            <syntax>public typedef ForwardListNodeIterator&lt;T, T&amp;, T*> Iterator;</syntax>
                            <type ref="type.91"/>
                        </typedef>
                        <typedef id="typedef_ValueType_B57755710D0A04E00AD577A280012E9633F4881E">
                            <name>ValueType</name>
                            <syntax>public typedef T ValueType;</syntax>
                            <type ref="1579836"/>
                        </typedef>
                    </typedefs>
                </class>
                <class id="1580497">
                    <name>ForwardListNode&lt;T></name>
                    <groupName>ForwardListNode</groupName>
                    <syntax> public class ForwardListNode&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579827">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constraint>
                        <type ref="1579827"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                    </constraint>
                    <constructors>
                        <constructor id="constructor_ForwardListNode_T_72D8ED5186EFD670F9F16C597351F8AAEDE3CE92">
                            <name>ForwardListNode&lt;T>(ForwardListNode&lt;T>* next_, const T&amp; value_)</name>
                            <syntax>public ForwardListNode&lt;T>(ForwardListNode&lt;T>* next_, const T&amp; value_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>next_</name>
                                    <type ref="type.53"/>
                                </parameter>
                                <parameter>
                                    <name>value_</name>
                                    <type ref="type.56"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Next_ForwardListNode_T_93ED798A0166F43FFBE84CD5CA40DAE97556D9A6">
                            <name>Next() const</name>
                            <syntax>public nothrow inline ForwardListNode&lt;T>* Next() const;</syntax>
                            <returnType ref="type.53"/>
                        </function>
                        <function id="member_function_SetNext_ForwardListNode_T_CC308FEE18AA069AA68F15CEF6B6622C77327D6D">
                            <name>SetNext(ForwardListNode&lt;T>* next_)</name>
                            <syntax>public nothrow inline void SetNext(ForwardListNode&lt;T>* next_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>next_</name>
                                    <type ref="type.53"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="function_group_Value_4E28F34B27CBAFAD49B21EBFC8952F28FF3E4746">
                            <name>Value</name>
                            <overloads>
                                <overload id="member_function_Value_ForwardListNode_T_4F5A7F611E4B551857604B6FEFC1B96D1C3331A2">
                                    <name>Value()</name>
                                    <syntax>public nothrow inline T&amp; Value();</syntax>
                                    <returnType ref="type.57"/>
                                </overload>
                                <overload id="member_function_Value_ForwardListNode_T_8623EC1E93FDA9A44D06CA7E83373C520C696ECC">
                                    <name>Value() const</name>
                                    <syntax>public nothrow inline const T&amp; Value() const;</syntax>
                                    <returnType ref="type.56"/>
                                </overload>
                            </overloads>
                        </function>
                    </functions>
                </class>
                <class id="1580503">
                    <name>ForwardListNodeIterator&lt;T, R, P></name>
                    <groupName>ForwardListNodeIterator</groupName>
                    <syntax> public class ForwardListNodeIterator&lt;T, R, P>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579829">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="1579830">
                            <name>R</name>
                        </templateParameter>
                        <templateParameter id="1579831">
                            <name>P</name>
                        </templateParameter>
                    </templateParameters>
                    <constructors>
                        <constructor id="default_constructor_ForwardListNodeIterator_T_R_P_C09FE737177304EB8D2DE1A944F35EE37339B804">
                            <name>ForwardListNodeIterator&lt;T, R, P>()</name>
                            <syntax>public nothrow ForwardListNodeIterator&lt;T, R, P>();</syntax>
                        </constructor>
                        <constructor id="constructor_ForwardListNodeIterator_T_R_P_1698F9EBA105F1A409F22746A3BA5A9A7F66FB29">
                            <name>ForwardListNodeIterator&lt;T, R, P>(ForwardListNode&lt;T>* node_)</name>
                            <syntax>public nothrow ForwardListNodeIterator&lt;T, R, P>(ForwardListNode&lt;T>* node_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>node_</name>
                                    <type ref="type.62"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Node_ForwardListNodeIterator_T_R_P_BD6FC8BF4B79250A3E77B458CAF7C3430C38B4A4">
                            <name>Node() const</name>
                            <syntax>public nothrow inline ForwardListNode&lt;T>* Node() const;</syntax>
                            <returnType ref="type.62"/>
                        </function>
                        <function id="member_function_op_star_ForwardListNodeIterator_T_R_P_DD136EC389178167414D527C180E2B4B6479FE03">
                            <name>operator*()</name>
                            <syntax>public nothrow inline R operator*();</syntax>
                            <returnType ref="1579830"/>
                        </function>
                        <function id="member_function_op_plusplus_ForwardListNodeIterator_T_R_P_E592404458D713340DCDC89434235DA794DC1329">
                            <name>operator++()</name>
                            <syntax>public nothrow inline ForwardListNodeIterator&lt;T, R, P>&amp; operator++();</syntax>
                            <returnType ref="type.69"/>
                        </function>
                        <function id="member_function_op_arrow_ForwardListNodeIterator_T_R_P_AEA55D7836B4D4F8E0CA474CE9E0518FFC535E13">
                            <name>operator->()</name>
                            <syntax>public nothrow inline P operator->();</syntax>
                            <returnType ref="1579831"/>
                        </function>
                    </functions>
                    <typedefs>
                        <typedef id="typedef_PointerType_CC7058855A15D183B741BDE5D5ECB9D45BC114F3">
                            <name>PointerType</name>
                            <syntax>public typedef P PointerType;</syntax>
                            <type ref="1579831"/>
                        </typedef>
                        <typedef id="typedef_ReferenceType_60E694DD3476705D3B73C2CD9764848057E958EA">
                            <name>ReferenceType</name>
                            <syntax>public typedef R ReferenceType;</syntax>
                            <type ref="1579830"/>
                        </typedef>
                        <typedef id="typedef_ValueType_9B460C27CE54375AE4593F02EAE701F41810F47B">
                            <name>ValueType</name>
                            <syntax>public typedef T ValueType;</syntax>
                            <type ref="1579829"/>
                        </typedef>
                    </typedefs>
                </class>
                <class id="1580882">
                    <name>HashMap&lt;K, T, H, C></name>
                    <groupName>HashMap</groupName>
                    <syntax> public class HashMap&lt;K, T, H, C>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579918">
                            <name>K</name>
                        </templateParameter>
                        <templateParameter id="1579919">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="1579920">
                            <name>H</name>
                            <default>Hasher&lt;K></default>
                        </templateParameter>
                        <templateParameter id="1579921">
                            <name>C</name>
                            <default>EqualTo&lt;K></default>
                        </templateParameter>
                    </templateParameters>
                    <constraint>
                        <type ref="1579918"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                        <connector>and</connector>
                        <type ref="1579919"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                        <connector>and</connector>
                        <concept ref="concept_HashFunction_996DE63476FF956BFF568F751960AF2CB4A097A8">
                            <params>
                                <type ref="1579920"/>
                                <type ref="1579918"/>
                            </params>
                        </concept>
                        <connector>and</connector>
                        <type ref="1579921"/>
                        <connector>is</connector>
                        <concept ref="concept_Relation_EA6D5281439518EB11DD9152636FEB86745EE746"/>
                        <connector>and</connector>
                        <type ref="1579921"/>
                        <dot>Domain</dot>
                        <connector>is</connector>
                        <type ref="1579918"/>
                    </constraint>
                    <functions>
                        <function id="function_group_Begin_65E8626B3D84C24A64E67F583E2BBC4D188F3995">
                            <name>Begin</name>
                            <overloads>
                                <overload id="member_function_Begin_HashMap_K_T_H_C_8C1C66A4A711580681990A58D14F1F64FDB7F395">
                                    <name>Begin()</name>
                                    <syntax>public nothrow inline HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>> Begin();</syntax>
                                    <returnType ref="type.328"/>
                                </overload>
                                <overload id="member_function_Begin_HashMap_K_T_H_C_19568B9D7A949BAA5CCB6342726A9FF9885F54FC">
                                    <name>Begin() const</name>
                                    <syntax>public nothrow inline HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>> Begin() const;</syntax>
                                    <returnType ref="type.338"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_CBegin_HashMap_K_T_H_C_7D87CFD2CB0A60E93EF7BCF917A381C4127ED3A3">
                            <name>CBegin() const</name>
                            <syntax>public nothrow inline HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>> CBegin() const;</syntax>
                            <returnType ref="type.338"/>
                        </function>
                        <function id="member_function_CEnd_HashMap_K_T_H_C_AD3B1510A4339A6B48156CF6C92AC2519DF5EB2C">
                            <name>CEnd() const</name>
                            <syntax>public nothrow inline HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>> CEnd() const;</syntax>
                            <returnType ref="type.338"/>
                        </function>
                        <function id="member_function_CFind_HashMap_K_T_H_C_99BC0AA782AB57E9B9CFF753BCE6A9592268425F">
                            <name>CFind(const K&amp; key) const</name>
                            <syntax>public nothrow inline HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>> CFind(const K&amp; key) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>key</name>
                                    <type ref="type.312"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.338"/>
                        </function>
                        <function id="member_function_Clear_HashMap_K_T_H_C_24B3C487BCBFA1EF653660725ABB32E2A138A916">
                            <name>Clear()</name>
                            <syntax>public nothrow inline void Clear();</syntax>
                        </function>
                        <function id="member_function_Count_HashMap_K_T_H_C_D97A380ABAE482B71EB69E9AECEB7A89F161A8AB">
                            <name>Count() const</name>
                            <syntax>public nothrow inline long Count() const;</syntax>
                            <returnType ref="type.1579457"/>
                        </function>
                        <function id="function_group_End_932851C27A14B1E68E4EABEF3A339DC6C0B2644C">
                            <name>End</name>
                            <overloads>
                                <overload id="member_function_End_HashMap_K_T_H_C_9051F88D395B0CFDF4CC4966F0BD092E56EF098D">
                                    <name>End()</name>
                                    <syntax>public nothrow inline HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>> End();</syntax>
                                    <returnType ref="type.328"/>
                                </overload>
                                <overload id="member_function_End_HashMap_K_T_H_C_BC04529214EC7540DC84B5E6E2380536FD88549F">
                                    <name>End() const</name>
                                    <syntax>public nothrow inline HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>> End() const;</syntax>
                                    <returnType ref="type.338"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_Find_BAE3791A3176977D2D8D20BE885E16EBE217360C">
                            <name>Find</name>
                            <overloads>
                                <overload id="member_function_Find_HashMap_K_T_H_C_13587916556990CDC26D7F455BEAA6FA2D75A8FD">
                                    <name>Find(const K&amp; key)</name>
                                    <syntax>public nothrow inline HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>> Find(const K&amp; key);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>key</name>
                                            <type ref="type.312"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.328"/>
                                </overload>
                                <overload id="member_function_Find_HashMap_K_T_H_C_0920BC5A36002CF233BBC7D5544C303AD217CDD7">
                                    <name>Find(const K&amp; key) const</name>
                                    <syntax>public nothrow inline HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>> Find(const K&amp; key) const;</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>key</name>
                                            <type ref="type.312"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.338"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_Insert_HashMap_K_T_H_C_C432308AD00014705263E54C523E2FFF28F83E19">
                            <name>Insert(const Pair&lt;K, T>&amp; value)</name>
                            <syntax>public inline Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool> Insert(const Pair&lt;K, T>&amp; value);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.321"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.345"/>
                        </function>
                        <function id="member_function_IsEmpty_HashMap_K_T_H_C_AEAE949CF4414A600291A53C71931B286B805978">
                            <name>IsEmpty() const</name>
                            <syntax>public nothrow inline bool IsEmpty() const;</syntax>
                            <returnType ref="type.1579450"/>
                        </function>
                        <function id="function_group_Remove_999EA93304468A1342430FBD39A018E7AEC91929">
                            <name>Remove</name>
                            <overloads>
                                <overload id="member_function_Remove_HashMap_K_T_H_C_A91F0E07334E687C16F6539DECD2D488F8B89559">
                                    <name>Remove(HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>> pos)</name>
                                    <syntax>public nothrow inline void Remove(HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>> pos);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>pos</name>
                                            <type ref="type.328"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Remove_HashMap_K_T_H_C_76E0BB7718B05FF75AA337EB3C3945F72163536A">
                                    <name>Remove(const K&amp; key)</name>
                                    <syntax>public nothrow inline void Remove(const K&amp; key);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>key</name>
                                            <type ref="type.312"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_op_index_HashMap_K_T_H_C_15EA563ECDE51290B34A56BDA501BDC2F5DC5815">
                            <name>operator[](const K&amp; key)</name>
                            <syntax>public inline T&amp; operator[](const K&amp; key);</syntax>
                            <parameters>
                                <parameter>
                                    <name>key</name>
                                    <type ref="type.312"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.374"/>
                        </function>
                    </functions>
                    <typedefs>
                        <typedef id="typedef_Compare_7866028B05E4EBBDB90D37DC04707A7C1F271719">
                            <name>Compare</name>
                            <syntax>public typedef C Compare;</syntax>
                            <type ref="1579921"/>
                        </typedef>
                        <typedef id="typedef_ConstIterator_8239E0F25ADB5C1CE0684DBB2C39AA9E32A329A2">
                            <name>ConstIterator</name>
                            <syntax>public typedef HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>> ConstIterator;</syntax>
                            <type ref="type.338"/>
                        </typedef>
                        <typedef id="typedef_HashFun_BC2756B88F493B383687868DD6607CD7529A754E">
                            <name>HashFun</name>
                            <syntax>public typedef H HashFun;</syntax>
                            <type ref="1579920"/>
                        </typedef>
                        <typedef id="typedef_Iterator_4665F3B6FC70467A10BA8C7E74C7A20D60FB9ABC">
                            <name>Iterator</name>
                            <syntax>public typedef HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>> Iterator;</syntax>
                            <type ref="type.328"/>
                        </typedef>
                        <typedef id="typedef_KeyType_2A8EECBF1B2F4120D0EF95E8493795FB55E501AE">
                            <name>KeyType</name>
                            <syntax>public typedef K KeyType;</syntax>
                            <type ref="1579918"/>
                        </typedef>
                        <typedef id="typedef_MappedType_E31DA45D6C4EFDEBDE5C413274A8D6F14A555DE2">
                            <name>MappedType</name>
                            <syntax>public typedef T MappedType;</syntax>
                            <type ref="1579919"/>
                        </typedef>
                        <typedef id="typedef_ValueType_C195924CA5DD2D7640D32E6CB135FE222D7CE9F7">
                            <name>ValueType</name>
                            <syntax>public typedef Pair&lt;K, T> ValueType;</syntax>
                            <type ref="type.310"/>
                        </typedef>
                    </typedefs>
                </class>
                <class id="1581022">
                    <name>HashSet&lt;T, H, C></name>
                    <groupName>HashSet</groupName>
                    <syntax> public class HashSet&lt;T, H, C>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579927">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="1579928">
                            <name>H</name>
                            <default>Hasher&lt;T></default>
                        </templateParameter>
                        <templateParameter id="1579929">
                            <name>C</name>
                            <default>EqualTo&lt;T></default>
                        </templateParameter>
                    </templateParameters>
                    <constraint>
                        <type ref="1579927"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                        <connector>and</connector>
                        <concept ref="concept_HashFunction_996DE63476FF956BFF568F751960AF2CB4A097A8">
                            <params>
                                <type ref="1579928"/>
                                <type ref="1579927"/>
                            </params>
                        </concept>
                        <connector>and</connector>
                        <type ref="1579929"/>
                        <connector>is</connector>
                        <concept ref="concept_Relation_EA6D5281439518EB11DD9152636FEB86745EE746"/>
                        <connector>and</connector>
                        <type ref="1579929"/>
                        <dot>Domain</dot>
                        <connector>is</connector>
                        <type ref="1579927"/>
                    </constraint>
                    <functions>
                        <function id="function_group_Begin_97361C125A75C82F8421B63CDCBD5D82DF3F1777">
                            <name>Begin</name>
                            <overloads>
                                <overload id="member_function_Begin_HashSet_T_H_C_06EDB00601329F9FC4C775AE363003FC5F5527AF">
                                    <name>Begin()</name>
                                    <syntax>public nothrow inline HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>> Begin();</syntax>
                                    <returnType ref="type.404"/>
                                </overload>
                                <overload id="member_function_Begin_HashSet_T_H_C_AF8BA1CF2FB86CC9C895AF1AC125BD893D8EA804">
                                    <name>Begin() const</name>
                                    <syntax>public nothrow inline HashtableIterator&lt;T, const T&amp;, const T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>> Begin() const;</syntax>
                                    <returnType ref="type.414"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_CBegin_HashSet_T_H_C_4308D488E81EE93E73AB38DDCD9A7F70992D0595">
                            <name>CBegin() const</name>
                            <syntax>public nothrow inline HashtableIterator&lt;T, const T&amp;, const T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>> CBegin() const;</syntax>
                            <returnType ref="type.414"/>
                        </function>
                        <function id="member_function_CEnd_HashSet_T_H_C_9C10E4F9715D57775EB0D49DD3115FE7AABB8722">
                            <name>CEnd() const</name>
                            <syntax>public nothrow inline HashtableIterator&lt;T, const T&amp;, const T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>> CEnd() const;</syntax>
                            <returnType ref="type.414"/>
                        </function>
                        <function id="member_function_CFind_HashSet_T_H_C_5F337F3A92803CB8BC43E4618A2C8EC7CB900A74">
                            <name>CFind(const T&amp; key) const</name>
                            <syntax>public nothrow inline HashtableIterator&lt;T, const T&amp;, const T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>> CFind(const T&amp; key) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>key</name>
                                    <type ref="type.396"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.414"/>
                        </function>
                        <function id="member_function_Clear_HashSet_T_H_C_C52C9D69C4B6AFEBD291A3448D01AFA9B0293B21">
                            <name>Clear()</name>
                            <syntax>public nothrow inline void Clear();</syntax>
                        </function>
                        <function id="member_function_Count_HashSet_T_H_C_8213B8B7B179EF331438943D9442A22CC346E2B2">
                            <name>Count() const</name>
                            <syntax>public nothrow inline long Count() const;</syntax>
                            <returnType ref="type.1579457"/>
                        </function>
                        <function id="function_group_End_BE21B38AE01414BFFE2EF836EA8A400B9A174E7E">
                            <name>End</name>
                            <overloads>
                                <overload id="member_function_End_HashSet_T_H_C_400510C8BAFD2C412C2DAFFFFE1345D90AC8EC1D">
                                    <name>End()</name>
                                    <syntax>public nothrow inline HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>> End();</syntax>
                                    <returnType ref="type.404"/>
                                </overload>
                                <overload id="member_function_End_HashSet_T_H_C_7A7CA171A79E46D1AC5D9C84B600B6F6EDF5E106">
                                    <name>End() const</name>
                                    <syntax>public nothrow inline HashtableIterator&lt;T, const T&amp;, const T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>> End() const;</syntax>
                                    <returnType ref="type.414"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_Find_2A973724E77C753BAE9F76CEC24B388AEA1EFEDE">
                            <name>Find</name>
                            <overloads>
                                <overload id="member_function_Find_HashSet_T_H_C_E4FEAD60F8E916E5257084CA20A4298F815606F7">
                                    <name>Find(const T&amp; key)</name>
                                    <syntax>public nothrow inline HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>> Find(const T&amp; key);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>key</name>
                                            <type ref="type.396"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.404"/>
                                </overload>
                                <overload id="member_function_Find_HashSet_T_H_C_DD8ADF613AC23051A8C5A0810D260349CADC65F0">
                                    <name>Find(const T&amp; key) const</name>
                                    <syntax>public nothrow inline HashtableIterator&lt;T, const T&amp;, const T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>> Find(const T&amp; key) const;</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>key</name>
                                            <type ref="type.396"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.414"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_Insert_HashSet_T_H_C_023D88D53E8113FB84BD2440048FBBB05709F018">
                            <name>Insert(const T&amp; value)</name>
                            <syntax>public inline Pair&lt;HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>, bool> Insert(const T&amp; value);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.396"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.421"/>
                        </function>
                        <function id="member_function_IsEmpty_HashSet_T_H_C_AF3E7B2B5B4EC4A370B5502A64AD93F679A89A72">
                            <name>IsEmpty() const</name>
                            <syntax>public nothrow inline bool IsEmpty() const;</syntax>
                            <returnType ref="type.1579450"/>
                        </function>
                        <function id="function_group_Remove_DBE80FD04F4FD65933D2B6F00FA5487F9B5F3CFD">
                            <name>Remove</name>
                            <overloads>
                                <overload id="member_function_Remove_HashSet_T_H_C_63555703084616AA6F31ECE2DD8444B9E9DA0BCA">
                                    <name>Remove(HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>> pos)</name>
                                    <syntax>public nothrow inline void Remove(HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>> pos);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>pos</name>
                                            <type ref="type.404"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Remove_HashSet_T_H_C_9B6224D9CA42DD50C92EDEA23F96E17D92B1F720">
                                    <name>Remove(const T&amp; key)</name>
                                    <syntax>public nothrow inline void Remove(const T&amp; key);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>key</name>
                                            <type ref="type.396"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                    </functions>
                    <typedefs>
                        <typedef id="typedef_Compare_BF38755BF6106660A4FF2CEBE21C6F4E3093A6B4">
                            <name>Compare</name>
                            <syntax>public typedef C Compare;</syntax>
                            <type ref="1579929"/>
                        </typedef>
                        <typedef id="typedef_ConstIterator_B5BDCBB2AAC8486760A8FBE64C9F1F192C17ACEF">
                            <name>ConstIterator</name>
                            <syntax>public typedef HashtableIterator&lt;T, const T&amp;, const T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>> ConstIterator;</syntax>
                            <type ref="type.414"/>
                        </typedef>
                        <typedef id="typedef_HashFun_CD0A861423784BE60858708DC0A2B8423E38AA14">
                            <name>HashFun</name>
                            <syntax>public typedef H HashFun;</syntax>
                            <type ref="1579928"/>
                        </typedef>
                        <typedef id="typedef_Iterator_E65FDBB955A277DE0B77882CE179CCA0CF8E21F1">
                            <name>Iterator</name>
                            <syntax>public typedef HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>> Iterator;</syntax>
                            <type ref="type.404"/>
                        </typedef>
                        <typedef id="typedef_KeyType_0CFF6DAE817A5FD1A3F32FFFB6616A33298FEC77">
                            <name>KeyType</name>
                            <syntax>public typedef T KeyType;</syntax>
                            <type ref="1579927"/>
                        </typedef>
                        <typedef id="typedef_ValueType_DD265559282F3A1341E11FBB1C1574949A521DFD">
                            <name>ValueType</name>
                            <syntax>public typedef T ValueType;</syntax>
                            <type ref="1579927"/>
                        </typedef>
                    </typedefs>
                </class>
                <class id="1581171">
                    <name>Hasher&lt;T></name>
                    <groupName>Hasher</groupName>
                    <syntax> public class Hasher&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579935">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="type.467"/>
                    <functions>
                        <function id="member_function_op_apply_Hasher_T_80FA5E906D500DD677F0624ACED427AC96570BD4">
                            <name>operator()(const T&amp; x)</name>
                            <syntax>public nothrow inline ulong operator()(const T&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.469"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579458"/>
                        </function>
                    </functions>
                </class>
                <class id="1581207">
                    <name>Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare></name>
                    <groupName>Hashtable</groupName>
                    <syntax> public class Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579948">
                            <name>KeyType</name>
                        </templateParameter>
                        <templateParameter id="1579949">
                            <name>ValueType</name>
                        </templateParameter>
                        <templateParameter id="1579950">
                            <name>KeyOfValue</name>
                        </templateParameter>
                        <templateParameter id="1579951">
                            <name>HashFun</name>
                            <default>Hasher&lt;KeyType></default>
                        </templateParameter>
                        <templateParameter id="1579952">
                            <name>Compare</name>
                            <default>EqualTo&lt;KeyType></default>
                        </templateParameter>
                    </templateParameters>
                    <constraint>
                        <type ref="1579948"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                        <connector>and</connector>
                        <type ref="1579949"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                        <connector>and</connector>
                        <concept ref="concept_KeySelectionFunction_719538A539328921CB0D528AECE6DCBE1B8C6E19">
                            <params>
                                <type ref="1579950"/>
                                <type ref="1579948"/>
                                <type ref="1579949"/>
                            </params>
                        </concept>
                        <connector>and</connector>
                        <concept ref="concept_HashFunction_996DE63476FF956BFF568F751960AF2CB4A097A8">
                            <params>
                                <type ref="1579951"/>
                                <type ref="1579948"/>
                            </params>
                        </concept>
                        <connector>and</connector>
                        <type ref="1579952"/>
                        <connector>is</connector>
                        <concept ref="concept_Relation_EA6D5281439518EB11DD9152636FEB86745EE746"/>
                        <connector>and</connector>
                        <type ref="1579952"/>
                        <dot>Domain</dot>
                        <connector>is</connector>
                        <type ref="1579948"/>
                    </constraint>
                    <constructors>
                        <constructor id="default_constructor_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_C120DFC56B289D5CA34B92C224F0C06B85835AC6">
                            <name>Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>()</name>
                            <syntax>public nothrow Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>();</syntax>
                        </constructor>
                        <constructor id="move_constructor_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_BE982BF4502B2B7F1DEF741F0BCD39F771331E71">
                            <name>Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>(Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>&amp;&amp; that)</name>
                            <syntax>public nothrow Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>(Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>&amp;&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.510"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="copy_constructor_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_CCF8491051569C54014568C0B46111CCD7FD0934">
                            <name>Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>(const Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>&amp; that)</name>
                            <syntax>public Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>(const Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.509"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="function_group_Begin_4C20666FFAAFC3DF29B3A2B31FA8BF963C5AD58E">
                            <name>Begin</name>
                            <overloads>
                                <overload id="member_function_Begin_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_5CD1ACCFEF85AC0BA33D444650F51D8D43916C97">
                                    <name>Begin()</name>
                                    <syntax>public nothrow inline HashtableIterator&lt;ValueType, ValueType&amp;, ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>> Begin();</syntax>
                                    <returnType ref="type.493"/>
                                </overload>
                                <overload id="member_function_Begin_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_A7E2AA55CF732B3703E77CB1D84FAA1D7B26610F">
                                    <name>Begin() const</name>
                                    <syntax>public nothrow inline HashtableIterator&lt;ValueType, const ValueType&amp;, const ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>> Begin() const;</syntax>
                                    <returnType ref="type.504"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_CBegin_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_4F789A3F92EA7C2C73F9E092B0AE1F0B4E18B32E">
                            <name>CBegin() const</name>
                            <syntax>public nothrow inline HashtableIterator&lt;ValueType, const ValueType&amp;, const ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>> CBegin() const;</syntax>
                            <returnType ref="type.504"/>
                        </function>
                        <function id="member_function_CEnd_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_5BD6B342849DF0A0DF0BFBA5294BC2C4E344E59A">
                            <name>CEnd() const</name>
                            <syntax>public nothrow inline HashtableIterator&lt;ValueType, const ValueType&amp;, const ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>> CEnd() const;</syntax>
                            <returnType ref="type.504"/>
                        </function>
                        <function id="member_function_CFind_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_7D1AA31FCFB588C5A20679EDFDB58F45CE80A6CF">
                            <name>CFind(const KeyType&amp; key) const</name>
                            <syntax>public nothrow HashtableIterator&lt;ValueType, const ValueType&amp;, const ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>> CFind(const KeyType&amp; key) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>key</name>
                                    <type ref="type.515"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.504"/>
                        </function>
                        <function id="member_function_Clear_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_9ABEE0951EC3CA180921C7EABA6C9B64DCCDEE4C">
                            <name>Clear()</name>
                            <syntax>public nothrow void Clear();</syntax>
                        </function>
                        <function id="member_function_Count_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_3D9FD6A916B148475CF0333194DAF280D8FE57C1">
                            <name>Count() const</name>
                            <syntax>public nothrow inline long Count() const;</syntax>
                            <returnType ref="type.1579457"/>
                        </function>
                        <function id="function_group_End_52C1FD05AB2421F641778E83A9AE7A21716AA0F7">
                            <name>End</name>
                            <overloads>
                                <overload id="member_function_End_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_AC8A414629728BB054B0424BC7D26FD44B0E4198">
                                    <name>End()</name>
                                    <syntax>public nothrow inline HashtableIterator&lt;ValueType, ValueType&amp;, ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>> End();</syntax>
                                    <returnType ref="type.493"/>
                                </overload>
                                <overload id="member_function_End_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_B22A85E7852FD65A805FE6FA7CBC89FD9E9D438B">
                                    <name>End() const</name>
                                    <syntax>public nothrow inline HashtableIterator&lt;ValueType, const ValueType&amp;, const ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>> End() const;</syntax>
                                    <returnType ref="type.504"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_Find_64510E30457D8489A15854B9B57EAB8AA025C280">
                            <name>Find</name>
                            <overloads>
                                <overload id="member_function_Find_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_A9271097C38456261F2180E88BB1388CC78EA70C">
                                    <name>Find(const KeyType&amp; key)</name>
                                    <syntax>public nothrow HashtableIterator&lt;ValueType, ValueType&amp;, ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>> Find(const KeyType&amp; key);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>key</name>
                                            <type ref="type.515"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.493"/>
                                </overload>
                                <overload id="member_function_Find_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_4CDBC2BEC97E355CA0AFF60809AD485042484A12">
                                    <name>Find(const KeyType&amp; key) const</name>
                                    <syntax>public nothrow HashtableIterator&lt;ValueType, const ValueType&amp;, const ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>> Find(const KeyType&amp; key) const;</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>key</name>
                                            <type ref="type.515"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.504"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_GetBucket_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_C204DA02A93346E4D13780B16A48602F4EFDBD0E">
                            <name>GetBucket(long index) const</name>
                            <syntax>public nothrow inline Bucket&lt;ValueType>* GetBucket(long index) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>index</name>
                                    <type ref="type.1579457"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.498"/>
                        </function>
                        <function id="member_function_GetBucketCount_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_53314821EF5C3C02BFEA70FB21746F1B5254DDB8">
                            <name>GetBucketCount() const</name>
                            <syntax>public nothrow inline long GetBucketCount() const;</syntax>
                            <returnType ref="type.1579457"/>
                        </function>
                        <function id="member_function_GetBucketIndex_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_7763E86B403332403B6982B966C80FA3AC9DE466">
                            <name>GetBucketIndex(const ValueType&amp; value) const</name>
                            <syntax>public nothrow inline long GetBucketIndex(const ValueType&amp; value) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.501"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579457"/>
                        </function>
                        <function id="member_function_Insert_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_20C7118E8C90D301B0509B3752EBA95EB8DC74F4">
                            <name>Insert(const ValueType&amp; value)</name>
                            <syntax>public Pair&lt;HashtableIterator&lt;ValueType, ValueType&amp;, ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>>, bool> Insert(const ValueType&amp; value);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.501"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.511"/>
                        </function>
                        <function id="member_function_IsEmpty_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_00A8C7FA934B539191C70B9D1CA58EA400FAB145">
                            <name>IsEmpty() const</name>
                            <syntax>public nothrow inline bool IsEmpty() const;</syntax>
                            <returnType ref="type.1579450"/>
                        </function>
                        <function id="function_group_Remove_8E7E1777D634C99B6DCFCD1C0B260F2BA843F380">
                            <name>Remove</name>
                            <overloads>
                                <overload id="member_function_Remove_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_312234DC35470295CE6479A8DAA543B401FF6892">
                                    <name>Remove(HashtableIterator&lt;ValueType, ValueType&amp;, ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>> pos)</name>
                                    <syntax>public nothrow void Remove(HashtableIterator&lt;ValueType, ValueType&amp;, ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>> pos);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>pos</name>
                                            <type ref="type.493"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Remove_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_A27D3B00BDE13AE1D5AE6EF67903D0FAE5CFB2BF">
                                    <name>Remove(const KeyType&amp; key)</name>
                                    <syntax>public nothrow void Remove(const KeyType&amp; key);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>key</name>
                                            <type ref="type.515"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_SetMaxLoadFactor_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_2F0D8EE2E7F29B91DFAA871389DFE5CFF755E1C8">
                            <name>SetMaxLoadFactor(double maxLoadFactor_)</name>
                            <syntax>public nothrow inline void SetMaxLoadFactor(double maxLoadFactor_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>maxLoadFactor_</name>
                                    <type ref="type.1579460"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="function_group_op_assign_42816A98B851DF877CD50AF5596C5550CCCFB1EB">
                            <name>operator=</name>
                            <overloads>
                                <overload id="move_assignment_op_assign_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_A9EF68FA7CD08932000F01559C8FC610DFC49393">
                                    <name>operator=(Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>&amp;&amp; that)</name>
                                    <syntax>public nothrow void operator=(Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>&amp;&amp; that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.510"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="copy_assignment_op_assign_Hashtable_KeyType_ValueType_KeyOfValue_HashFun_Compare_A82D28187F413C970FBA60CC7C1B59DD70F81DE0">
                                    <name>operator=(const Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>&amp; that)</name>
                                    <syntax>public void operator=(const Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>&amp; that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.509"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                    </functions>
                    <typedefs>
                        <typedef id="typedef_ConstIterator_D8ACCB1653C3EB7755971A84668EF382C37E1DE7">
                            <name>ConstIterator</name>
                            <syntax>public typedef HashtableIterator&lt;ValueType, const ValueType&amp;, const ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>> ConstIterator;</syntax>
                            <type ref="type.504"/>
                        </typedef>
                        <typedef id="typedef_Iterator_065E4E1FBB70AED7A93ED6E652821B859BECB7DD">
                            <name>Iterator</name>
                            <syntax>public typedef HashtableIterator&lt;ValueType, ValueType&amp;, ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>> Iterator;</syntax>
                            <type ref="type.493"/>
                        </typedef>
                    </typedefs>
                </class>
                <class id="1581182">
                    <name>HashtableIterator&lt;T, R, P, H></name>
                    <groupName>HashtableIterator</groupName>
                    <syntax> public class HashtableIterator&lt;T, R, P, H>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579939">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="1579940">
                            <name>R</name>
                        </templateParameter>
                        <templateParameter id="1579941">
                            <name>P</name>
                        </templateParameter>
                        <templateParameter id="1579942">
                            <name>H</name>
                        </templateParameter>
                    </templateParameters>
                    <constructors>
                        <constructor id="default_constructor_HashtableIterator_T_R_P_H_A4CF5976E668436AFC61A9E6682E760CE752D49D">
                            <name>HashtableIterator&lt;T, R, P, H>()</name>
                            <syntax>public nothrow inline HashtableIterator&lt;T, R, P, H>();</syntax>
                        </constructor>
                        <constructor id="constructor_HashtableIterator_T_R_P_H_37B6099986C2AAB8F1D4EDFD6A0D767682A1470C">
                            <name>HashtableIterator&lt;T, R, P, H>(H* table_, Bucket&lt;T>* bucket_)</name>
                            <syntax>public nothrow inline HashtableIterator&lt;T, R, P, H>(H* table_, Bucket&lt;T>* bucket_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>table_</name>
                                    <type ref="type.478"/>
                                </parameter>
                                <parameter>
                                    <name>bucket_</name>
                                    <type ref="type.480"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_GetBucket_HashtableIterator_T_R_P_H_773822587EA9EE2880B6E846D2491A813A9C07DE">
                            <name>GetBucket() const</name>
                            <syntax>public nothrow inline Bucket&lt;T>* GetBucket() const;</syntax>
                            <returnType ref="type.480"/>
                        </function>
                        <function id="member_function_op_star_HashtableIterator_T_R_P_H_E1B21DDFED5574FA7F9529459BA6325AC34504B8">
                            <name>operator*()</name>
                            <syntax>public nothrow inline R operator*();</syntax>
                            <returnType ref="1579940"/>
                        </function>
                        <function id="member_function_op_plusplus_HashtableIterator_T_R_P_H_9B6CE402AC9084539C4A9D2EE402E7F8260C348F">
                            <name>operator++()</name>
                            <syntax>public nothrow inline HashtableIterator&lt;T, R, P, H>&amp; operator++();</syntax>
                            <returnType ref="type.485"/>
                        </function>
                        <function id="member_function_op_arrow_HashtableIterator_T_R_P_H_28B4BB9D1B16EB10F389DEB37F4DFAE337234910">
                            <name>operator->()</name>
                            <syntax>public nothrow inline P operator->();</syntax>
                            <returnType ref="1579941"/>
                        </function>
                    </functions>
                    <typedefs>
                        <typedef id="typedef_HashtableType_88DE4D2AC581DA9D48C950D9DB7FFAFD023955E5">
                            <name>HashtableType</name>
                            <syntax>public typedef H HashtableType;</syntax>
                            <type ref="1579942"/>
                        </typedef>
                        <typedef id="typedef_PointerType_7D068AD725A76E5B98AA59346C640C5236680D84">
                            <name>PointerType</name>
                            <syntax>public typedef P PointerType;</syntax>
                            <type ref="1579941"/>
                        </typedef>
                        <typedef id="typedef_ReferenceType_09AEB4A0B9CC8F59C9F16C51E8EE31568CF131E2">
                            <name>ReferenceType</name>
                            <syntax>public typedef R ReferenceType;</syntax>
                            <type ref="1579940"/>
                        </typedef>
                        <typedef id="typedef_ValueType_CF676C33365285A3DDE209E55B538018EED0E0BC">
                            <name>ValueType</name>
                            <syntax>public typedef T ValueType;</syntax>
                            <type ref="1579939"/>
                        </typedef>
                    </typedefs>
                </class>
                <class id="1579933">
                    <name>HashtablePrimes</name>
                    <groupName>HashtablePrimes</groupName>
                    <syntax> public static class HashtablePrimes;</syntax>
                    <staticMemberFunctions>
                        <function id="member_function_GetNextPrime_HashtablePrimes_E3C991D4BD3E2296CBBDAA6E2C82D1EDD8595209">
                            <name>GetNextPrime(long n)</name>
                            <syntax>public static nothrow long GetNextPrime(long n);</syntax>
                            <parameters>
                                <parameter>
                                    <name>n</name>
                                    <type ref="type.1579457"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579457"/>
                        </function>
                    </staticMemberFunctions>
                </class>
                <class id="1581326">
                    <name>LinkedList&lt;T></name>
                    <groupName>LinkedList</groupName>
                    <syntax> public class LinkedList&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579963">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constraint>
                        <type ref="1579963"/>
                        <connector>is</connector>
                        <concept ref="concept_Regular_A56EC84F9A51535281FA2B6B074E90F9B3BBCCC1"/>
                    </constraint>
                    <constructors>
                        <constructor id="default_constructor_LinkedList_T_3BA3AFC39DE9353C84189744C0F0B39D31B21D38">
                            <name>LinkedList&lt;T>()</name>
                            <syntax>public nothrow LinkedList&lt;T>();</syntax>
                        </constructor>
                        <constructor id="move_constructor_LinkedList_T_1632958D9028122A2B6369B57F1CDA060852E614">
                            <name>LinkedList&lt;T>(LinkedList&lt;T>&amp;&amp; that)</name>
                            <syntax>public nothrow LinkedList&lt;T>(LinkedList&lt;T>&amp;&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.601"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="copy_constructor_LinkedList_T_56FC4C49FDA29D3DAD2BD7C819C66421FFDFD771">
                            <name>LinkedList&lt;T>(const LinkedList&lt;T>&amp; that)</name>
                            <syntax>public LinkedList&lt;T>(const LinkedList&lt;T>&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.600"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Add_LinkedList_T_B5ABB9074241F84FFCD4BCD7E6C46056F9DE1CA0">
                            <name>Add(const T&amp; value)</name>
                            <syntax>public void Add(const T&amp; value);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.592"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Back_LinkedList_T_FDBAA2C06F2EF640F1D49349A02342CC335729A6">
                            <name>Back() const</name>
                            <syntax>public nothrow inline const T&amp; Back() const;</syntax>
                            <returnType ref="type.592"/>
                        </function>
                        <function id="function_group_Begin_7EB6C9B8298B23B0865FBBED2115038C1E5E3C0E">
                            <name>Begin</name>
                            <overloads>
                                <overload id="member_function_Begin_LinkedList_T_F657820FAF7F07DC448E731686F8036168D61C51">
                                    <name>Begin()</name>
                                    <syntax>public nothrow inline LinkedListNodeIterator&lt;T, T&amp;, T*> Begin();</syntax>
                                    <returnType ref="type.584"/>
                                </overload>
                                <overload id="member_function_Begin_LinkedList_T_5F1448BFA8A14D7FC223303D246C8DBDF4B41CAE">
                                    <name>Begin() const</name>
                                    <syntax>public nothrow inline LinkedListNodeIterator&lt;T, const T&amp;, const T*> Begin() const;</syntax>
                                    <returnType ref="type.595"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_CBegin_LinkedList_T_F7013E3D405A9D2E4FF49E40E2E2EAD1919B1232">
                            <name>CBegin() const</name>
                            <syntax>public nothrow inline LinkedListNodeIterator&lt;T, const T&amp;, const T*> CBegin() const;</syntax>
                            <returnType ref="type.595"/>
                        </function>
                        <function id="member_function_CEnd_LinkedList_T_426758E760EA9685E2617DCC0B27C19240EFD772">
                            <name>CEnd() const</name>
                            <syntax>public nothrow inline LinkedListNodeIterator&lt;T, const T&amp;, const T*> CEnd() const;</syntax>
                            <returnType ref="type.595"/>
                        </function>
                        <function id="member_function_Clear_LinkedList_T_0A725CB9F072737578579B28A65854606BDD67FA">
                            <name>Clear()</name>
                            <syntax>public nothrow void Clear();</syntax>
                        </function>
                        <function id="member_function_Count_LinkedList_T_CED5E1318A906EBE39C67E1B51E351956F54A1A0">
                            <name>Count() const</name>
                            <syntax>public nothrow inline long Count() const;</syntax>
                            <returnType ref="type.1579457"/>
                        </function>
                        <function id="function_group_End_C7A02F77AB49DB5DC0410360E32D9546A17A3829">
                            <name>End</name>
                            <overloads>
                                <overload id="member_function_End_LinkedList_T_492423D9F95020A906EBF23AD3D6FC13E5234A2A">
                                    <name>End()</name>
                                    <syntax>public nothrow inline LinkedListNodeIterator&lt;T, T&amp;, T*> End();</syntax>
                                    <returnType ref="type.584"/>
                                </overload>
                                <overload id="member_function_End_LinkedList_T_2B56A643EDB3038056485237EE842E05042F66E4">
                                    <name>End() const</name>
                                    <syntax>public nothrow inline LinkedListNodeIterator&lt;T, const T&amp;, const T*> End() const;</syntax>
                                    <returnType ref="type.595"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_Front_LinkedList_T_CBEF2989AE0E01A1547A059725461D0E2682C9BF">
                            <name>Front() const</name>
                            <syntax>public nothrow inline const T&amp; Front() const;</syntax>
                            <returnType ref="type.592"/>
                        </function>
                        <function id="member_function_Insert_LinkedList_T_42B16FDD6F7A092B89C400993EE9CF0E7CDFD2B8">
                            <name>Insert(LinkedListNodeIterator&lt;T, T&amp;, T*> pos, const T&amp; value)</name>
                            <syntax>public LinkedListNodeIterator&lt;T, T&amp;, T*> Insert(LinkedListNodeIterator&lt;T, T&amp;, T*> pos, const T&amp; value);</syntax>
                            <parameters>
                                <parameter>
                                    <name>pos</name>
                                    <type ref="type.584"/>
                                </parameter>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.592"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.584"/>
                        </function>
                        <function id="member_function_InsertFront_LinkedList_T_6A5F6823A718026B0E6C05757804ABBCCE1BDA84">
                            <name>InsertFront(const T&amp; value)</name>
                            <syntax>public LinkedListNodeIterator&lt;T, T&amp;, T*> InsertFront(const T&amp; value);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.592"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.584"/>
                        </function>
                        <function id="member_function_IsEmpty_LinkedList_T_493A64932EF9DA3259E1B4E0A50FCB7858D5356F">
                            <name>IsEmpty() const</name>
                            <syntax>public nothrow inline bool IsEmpty() const;</syntax>
                            <returnType ref="type.1579450"/>
                        </function>
                        <function id="function_group_Remove_A92FFF51BB76FBFA6A39BD8800693D17379D1174">
                            <name>Remove</name>
                            <overloads>
                                <overload id="member_function_Remove_LinkedList_T_F02CC7D703884D20F502CD3D48D4DE91DA56B6A0">
                                    <name>Remove(LinkedListNodeIterator&lt;T, T&amp;, T*> pos)</name>
                                    <syntax>public nothrow void Remove(LinkedListNodeIterator&lt;T, T&amp;, T*> pos);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>pos</name>
                                            <type ref="type.584"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Remove_LinkedList_T_CEF4B5A5B2D576F43485F608C1092EA27C735D79">
                                    <name>Remove(const T&amp; value)</name>
                                    <syntax>public nothrow void Remove(const T&amp; value);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>value</name>
                                            <type ref="type.592"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_RemoveFirst_LinkedList_T_2A3BADE6EB2E778913483A007AE9C5FF6E86D581">
                            <name>RemoveFirst()</name>
                            <syntax>public nothrow void RemoveFirst();</syntax>
                        </function>
                        <function id="member_function_RemoveLast_LinkedList_T_728F4C4FC1F60C48A2678950CB2B6D91A481088B">
                            <name>RemoveLast()</name>
                            <syntax>public nothrow void RemoveLast();</syntax>
                        </function>
                        <function id="member_function_Tail_LinkedList_T_B4ABF872C9164136302548EF04937E7A1B782C39">
                            <name>Tail()</name>
                            <syntax>public nothrow inline LinkedListNode&lt;T>* Tail();</syntax>
                            <returnType ref="type.589"/>
                        </function>
                        <function id="function_group_op_assign_26C48A92D7873FC1D1330DAEB1AB62792A48D33A">
                            <name>operator=</name>
                            <overloads>
                                <overload id="move_assignment_op_assign_LinkedList_T_A774CE7FDAE23F56535CD8BF95B9457D568C9357">
                                    <name>operator=(LinkedList&lt;T>&amp;&amp; that)</name>
                                    <syntax>public void operator=(LinkedList&lt;T>&amp;&amp; that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.601"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="copy_assignment_op_assign_LinkedList_T_FA9D031A21D3ECD50D5FB2FA24EEC445B532FDDF">
                                    <name>operator=(const LinkedList&lt;T>&amp; that)</name>
                                    <syntax>public void operator=(const LinkedList&lt;T>&amp; that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.600"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                    </functions>
                    <typedefs>
                        <typedef id="typedef_ConstIterator_2CED4053E43F86C6DD53CBE7EF53FAEF520AF15C">
                            <name>ConstIterator</name>
                            <syntax>public typedef LinkedListNodeIterator&lt;T, const T&amp;, const T*> ConstIterator;</syntax>
                            <type ref="type.595"/>
                        </typedef>
                        <typedef id="typedef_Iterator_9881AA2FEBF7906BDFAE72B13F06210CCA727970">
                            <name>Iterator</name>
                            <syntax>public typedef LinkedListNodeIterator&lt;T, T&amp;, T*> Iterator;</syntax>
                            <type ref="type.584"/>
                        </typedef>
                        <typedef id="typedef_ValueType_6A322A37FE1E4B31E674581AD85DFA4B53582C7C">
                            <name>ValueType</name>
                            <syntax>public typedef T ValueType;</syntax>
                            <type ref="1579963"/>
                        </typedef>
                    </typedefs>
                </class>
                <class id="1581261">
                    <name>LinkedListNode&lt;T></name>
                    <groupName>LinkedListNode</groupName>
                    <syntax> public class LinkedListNode&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579954">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constructors>
                        <constructor id="constructor_LinkedListNode_T_0CA94A77641194F1F800DA0BFE76E2CCD2E1A3AD">
                            <name>LinkedListNode&lt;T>(const T&amp; value_, LinkedListNode&lt;T>* prev_, LinkedListNode&lt;T>* next_)</name>
                            <syntax>public LinkedListNode&lt;T>(const T&amp; value_, LinkedListNode&lt;T>* prev_, LinkedListNode&lt;T>* next_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value_</name>
                                    <type ref="type.544"/>
                                </parameter>
                                <parameter>
                                    <name>prev_</name>
                                    <type ref="type.541"/>
                                </parameter>
                                <parameter>
                                    <name>next_</name>
                                    <type ref="type.541"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Next_LinkedListNode_T_C81FACB4934A0540B84B6AF18FE4935C49061D5D">
                            <name>Next() const</name>
                            <syntax>public nothrow inline LinkedListNode&lt;T>* Next() const;</syntax>
                            <returnType ref="type.541"/>
                        </function>
                        <function id="member_function_Prev_LinkedListNode_T_05E39188EFCA8772DC73DD3290792EB39C0155C4">
                            <name>Prev() const</name>
                            <syntax>public nothrow inline LinkedListNode&lt;T>* Prev() const;</syntax>
                            <returnType ref="type.541"/>
                        </function>
                        <function id="member_function_SetNext_LinkedListNode_T_91E52A27F14B903E67F87D864B286401E20CD324">
                            <name>SetNext(LinkedListNode&lt;T>* next_)</name>
                            <syntax>public nothrow inline void SetNext(LinkedListNode&lt;T>* next_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>next_</name>
                                    <type ref="type.541"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetPrev_LinkedListNode_T_0C57952F594FB3BF99504BEA4EFBF237F228479B">
                            <name>SetPrev(LinkedListNode&lt;T>* prev_)</name>
                            <syntax>public nothrow inline void SetPrev(LinkedListNode&lt;T>* prev_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>prev_</name>
                                    <type ref="type.541"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="function_group_Value_C270723701F8EC130F6C5D6755771D1543F2356C">
                            <name>Value</name>
                            <overloads>
                                <overload id="member_function_Value_LinkedListNode_T_91FEA4D277FE61AF37C91389F0223DE9B578B2AE">
                                    <name>Value()</name>
                                    <syntax>public nothrow inline T&amp; Value();</syntax>
                                    <returnType ref="type.545"/>
                                </overload>
                                <overload id="member_function_Value_LinkedListNode_T_45B43EB568E784B8F2A37C6EA495BAD32AC073DB">
                                    <name>Value() const</name>
                                    <syntax>public nothrow inline const T&amp; Value() const;</syntax>
                                    <returnType ref="type.544"/>
                                </overload>
                            </overloads>
                        </function>
                    </functions>
                    <typedefs>
                        <typedef id="typedef_ValueType_948A99BDDD5A0B6F74CFF5FC964D27091B75B8DD">
                            <name>ValueType</name>
                            <syntax>public typedef T ValueType;</syntax>
                            <type ref="1579954"/>
                        </typedef>
                    </typedefs>
                </class>
                <class id="1581267">
                    <name>LinkedListNodeIterator&lt;T, R, P></name>
                    <groupName>LinkedListNodeIterator</groupName>
                    <syntax> public class LinkedListNodeIterator&lt;T, R, P>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579956">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="1579957">
                            <name>R</name>
                        </templateParameter>
                        <templateParameter id="1579958">
                            <name>P</name>
                        </templateParameter>
                    </templateParameters>
                    <constructors>
                        <constructor id="default_constructor_LinkedListNodeIterator_T_R_P_B57566E00B1BF3EA704C59B3D8658ED6974C0BC7">
                            <name>LinkedListNodeIterator&lt;T, R, P>()</name>
                            <syntax>public nothrow LinkedListNodeIterator&lt;T, R, P>();</syntax>
                        </constructor>
                        <constructor id="constructor_LinkedListNodeIterator_T_R_P_340E5F170F25BECA026DA2EBBF96F29442787202">
                            <name>LinkedListNodeIterator&lt;T, R, P>(LinkedList&lt;T>* list_, LinkedListNode&lt;T>* node_)</name>
                            <syntax>public nothrow LinkedListNodeIterator&lt;T, R, P>(LinkedList&lt;T>* list_, LinkedListNode&lt;T>* node_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>list_</name>
                                    <type ref="type.550"/>
                                </parameter>
                                <parameter>
                                    <name>node_</name>
                                    <type ref="type.560"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Node_LinkedListNodeIterator_T_R_P_F8D0BD2D70F3674F7D7BF13A45F617B62FD29A20">
                            <name>Node() const</name>
                            <syntax>public nothrow inline LinkedListNode&lt;T>* Node() const;</syntax>
                            <returnType ref="type.560"/>
                        </function>
                        <function id="member_function_op_star_LinkedListNodeIterator_T_R_P_EEAB0AFBD79D6989C186CA05A837FED7B8491828">
                            <name>operator*()</name>
                            <syntax>public nothrow inline R operator*();</syntax>
                            <returnType ref="1579957"/>
                        </function>
                        <function id="member_function_op_plusplus_LinkedListNodeIterator_T_R_P_4EC528BC4EFEEA4A9384958A9C2A225A292AA3EE">
                            <name>operator++()</name>
                            <syntax>public nothrow inline LinkedListNodeIterator&lt;T, R, P>&amp; operator++();</syntax>
                            <returnType ref="type.573"/>
                        </function>
                        <function id="member_function_op_minusminus_LinkedListNodeIterator_T_R_P_65EF83F23AAC52631277F6B0DE9E99E4D2BB477A">
                            <name>operator--()</name>
                            <syntax>public nothrow inline LinkedListNodeIterator&lt;T, R, P>&amp; operator--();</syntax>
                            <returnType ref="type.573"/>
                        </function>
                        <function id="member_function_op_arrow_LinkedListNodeIterator_T_R_P_F8E99C5A1A31FCA5D8D81A8FC336A517B8128B2E">
                            <name>operator->()</name>
                            <syntax>public nothrow inline P operator->();</syntax>
                            <returnType ref="1579958"/>
                        </function>
                    </functions>
                    <typedefs>
                        <typedef id="typedef_PointerType_8C1CF2ABFDFE2130D51614B483D5655CF54CA455">
                            <name>PointerType</name>
                            <syntax>public typedef P PointerType;</syntax>
                            <type ref="1579958"/>
                        </typedef>
                        <typedef id="typedef_ReferenceType_8AD6C39D6EDC6EFA49DD4EC57E76B0AA4FBA1CA6">
                            <name>ReferenceType</name>
                            <syntax>public typedef R ReferenceType;</syntax>
                            <type ref="1579957"/>
                        </typedef>
                        <typedef id="typedef_ValueType_3E4310E2C009E115790273981F697E5049F4BAD5">
                            <name>ValueType</name>
                            <syntax>public typedef T ValueType;</syntax>
                            <type ref="1579956"/>
                        </typedef>
                    </typedefs>
                </class>
                <class id="1581398">
                    <name>List&lt;T></name>
                    <groupName>List</groupName>
                    <syntax> public class List&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579967">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constraint>
                        <type ref="1579967"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                    </constraint>
                    <constructors>
                        <constructor id="default_constructor_List_T_BA98FAD30FC980262BA8702E5A5F4C353452B7A2">
                            <name>List&lt;T>()</name>
                            <syntax>public nothrow List&lt;T>();</syntax>
                        </constructor>
                        <constructor id="move_constructor_List_T_D2250EEDFFA10AC1F1C7C99671BE1FC30D28E74E">
                            <name>List&lt;T>(List&lt;T>&amp;&amp; that)</name>
                            <syntax>public nothrow List&lt;T>(List&lt;T>&amp;&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.632"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="copy_constructor_List_T_E926101D1CCD088E3F4DA8D9293331AA65AC272C">
                            <name>List&lt;T>(const List&lt;T>&amp; that)</name>
                            <syntax>public List&lt;T>(const List&lt;T>&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.631"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_List_T_8F979D448B7B888E4670A0AD7812A0F38DC74171">
                            <name>List&lt;T>(long n, const T&amp; value)</name>
                            <syntax>public List&lt;T>(long n, const T&amp; value);</syntax>
                            <parameters>
                                <parameter>
                                    <name>n</name>
                                    <type ref="type.1579457"/>
                                </parameter>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.613"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="function_group_Add_F4638F3DD74085EFC3B45FB3D7770BFD75CB7F32">
                            <name>Add</name>
                            <overloads>
                                <overload id="member_function_Add_List_T_1242E85AAD4D8369255E6BB57F2A841ED245BACD">
                                    <name>Add(T&amp;&amp; item)</name>
                                    <syntax>public void Add(T&amp;&amp; item);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>item</name>
                                            <type ref="type.633"/>
                                        </parameter>
                                    </parameters>
                                    <constraint>
                                        T<connector>is</connector>
                                        <concept ref="concept_Movable_67BF70D7114988D4858EF177704CC03346D9240D"/>
                                    </constraint>
                                </overload>
                                <overload id="member_function_Add_List_T_0CEB0F989B58359D06357C988DF595C83DA28430">
                                    <name>Add(const T&amp; item)</name>
                                    <syntax>public void Add(const T&amp; item);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>item</name>
                                            <type ref="type.613"/>
                                        </parameter>
                                    </parameters>
                                    <constraint>
                                        T<connector>is</connector>
                                        <concept ref="concept_Copyable_555DCA16115160D45CEF63A5F50FCD5E29F3D6E2"/>
                                    </constraint>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_Back_C7F1C73C3841ED4C13753B294996DA07CBC94762">
                            <name>Back</name>
                            <overloads>
                                <overload id="member_function_Back_List_T_03E3FD93DE2ABDC2649DE781271BF7359AC4715A">
                                    <name>Back()</name>
                                    <syntax>public nothrow inline T&amp; Back();</syntax>
                                    <returnType ref="type.622"/>
                                </overload>
                                <overload id="member_function_Back_List_T_3E7D96EBC75EEFD525A63BA0A3D17FC1D6A31AD9">
                                    <name>Back() const</name>
                                    <syntax>public nothrow inline const T&amp; Back() const;</syntax>
                                    <returnType ref="type.613"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_Begin_758060A065A001ADAD3174FFEDD31BCD0B0E42F0">
                            <name>Begin</name>
                            <overloads>
                                <overload id="member_function_Begin_List_T_5B142E53EFA4A09A09C698605CBC3929F22ACC87">
                                    <name>Begin()</name>
                                    <syntax>public nothrow inline RandomAccessIter&lt;T, T&amp;, T*> Begin();</syntax>
                                    <returnType ref="type.624"/>
                                </overload>
                                <overload id="member_function_Begin_List_T_F01368757D5322AB3D9E213C9C311320405DBC29">
                                    <name>Begin() const</name>
                                    <syntax>public nothrow inline RandomAccessIter&lt;T, const T&amp;, const T*> Begin() const;</syntax>
                                    <returnType ref="type.615"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_CBegin_List_T_CBA03EEF64A2784C05F241B0FA175357FC842886">
                            <name>CBegin() const</name>
                            <syntax>public nothrow inline RandomAccessIter&lt;T, const T&amp;, const T*> CBegin() const;</syntax>
                            <returnType ref="type.615"/>
                        </function>
                        <function id="member_function_CEnd_List_T_63142CF7EDE83E01CA2C9FBCAC75081A2DFA681D">
                            <name>CEnd() const</name>
                            <syntax>public nothrow inline RandomAccessIter&lt;T, const T&amp;, const T*> CEnd() const;</syntax>
                            <returnType ref="type.615"/>
                        </function>
                        <function id="member_function_Capacity_List_T_AE251844D73314FA36A250132906307DD0B8FBAD">
                            <name>Capacity() const</name>
                            <syntax>public nothrow inline long Capacity() const;</syntax>
                            <returnType ref="type.1579457"/>
                        </function>
                        <function id="member_function_Clear_List_T_B605D2D27445F8489FD181D1D012BF1245483B93">
                            <name>Clear()</name>
                            <syntax>public nothrow void Clear();</syntax>
                        </function>
                        <function id="member_function_Count_List_T_CC08825E95DA25361D24D0B94402BCC8F4B0197F">
                            <name>Count() const</name>
                            <syntax>public nothrow inline long Count() const;</syntax>
                            <returnType ref="type.1579457"/>
                        </function>
                        <function id="function_group_End_CDDF7BF21756D1815110AFBD2BA0C28339C12C0C">
                            <name>End</name>
                            <overloads>
                                <overload id="member_function_End_List_T_B9D951A3B6881FC35620AC1FAB0E374846B164DF">
                                    <name>End()</name>
                                    <syntax>public nothrow inline RandomAccessIter&lt;T, T&amp;, T*> End();</syntax>
                                    <returnType ref="type.624"/>
                                </overload>
                                <overload id="member_function_End_List_T_CE2BE5C7864285366FBE606151ECC5F94BAB0E0C">
                                    <name>End() const</name>
                                    <syntax>public nothrow inline RandomAccessIter&lt;T, const T&amp;, const T*> End() const;</syntax>
                                    <returnType ref="type.615"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_Front_66C06636F700FDB269A58019A44450CBB1E009F2">
                            <name>Front</name>
                            <overloads>
                                <overload id="member_function_Front_List_T_7D22EECF7BC0F908BC2384575A5A1FF83A789945">
                                    <name>Front()</name>
                                    <syntax>public nothrow inline T&amp; Front();</syntax>
                                    <returnType ref="type.622"/>
                                </overload>
                                <overload id="member_function_Front_List_T_464DC4BA6178428B77FC321C19E632A31F481528">
                                    <name>Front() const</name>
                                    <syntax>public nothrow inline const T&amp; Front() const;</syntax>
                                    <returnType ref="type.613"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_Insert_86CE4113FBF10F9D0297EA4E27D22D46B6B77724">
                            <name>Insert</name>
                            <overloads>
                                <overload id="member_function_Insert_List_T_36EFC40710E63A6F9457E3A7F4AD58E72EDC2B06">
                                    <name>Insert(RandomAccessIter&lt;T, T&amp;, T*> pos, T&amp;&amp; item)</name>
                                    <syntax>public RandomAccessIter&lt;T, T&amp;, T*> Insert(RandomAccessIter&lt;T, T&amp;, T*> pos, T&amp;&amp; item);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>pos</name>
                                            <type ref="type.624"/>
                                        </parameter>
                                        <parameter>
                                            <name>item</name>
                                            <type ref="type.633"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.624"/>
                                    <constraint>
                                        T<connector>is</connector>
                                        <concept ref="concept_Movable_67BF70D7114988D4858EF177704CC03346D9240D"/>
                                    </constraint>
                                </overload>
                                <overload id="member_function_Insert_List_T_BE00AC0DF91BDE700E5B2651583DD7C1BE97A9CF">
                                    <name>Insert(RandomAccessIter&lt;T, T&amp;, T*> pos, const T&amp; item)</name>
                                    <syntax>public RandomAccessIter&lt;T, T&amp;, T*> Insert(RandomAccessIter&lt;T, T&amp;, T*> pos, const T&amp; item);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>pos</name>
                                            <type ref="type.624"/>
                                        </parameter>
                                        <parameter>
                                            <name>item</name>
                                            <type ref="type.613"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.624"/>
                                    <constraint>
                                        T<connector>is</connector>
                                        <concept ref="concept_Copyable_555DCA16115160D45CEF63A5F50FCD5E29F3D6E2"/>
                                    </constraint>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_InsertFront_D5D0E1EA6FE0C5EB652ACA646E14E17A4F2804BE">
                            <name>InsertFront</name>
                            <overloads>
                                <overload id="member_function_InsertFront_List_T_98D3B37E0F6554BDCA699BD8ED43E18E0CF0D450">
                                    <name>InsertFront(T&amp;&amp; item)</name>
                                    <syntax>public RandomAccessIter&lt;T, T&amp;, T*> InsertFront(T&amp;&amp; item);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>item</name>
                                            <type ref="type.633"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.624"/>
                                    <constraint>
                                        T<connector>is</connector>
                                        <concept ref="concept_Movable_67BF70D7114988D4858EF177704CC03346D9240D"/>
                                    </constraint>
                                </overload>
                                <overload id="member_function_InsertFront_List_T_C7162F3ADF5C6122D6A514EBA9D00F5E50438DD7">
                                    <name>InsertFront(const T&amp; item)</name>
                                    <syntax>public RandomAccessIter&lt;T, T&amp;, T*> InsertFront(const T&amp; item);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>item</name>
                                            <type ref="type.613"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.624"/>
                                    <constraint>
                                        T<connector>is</connector>
                                        <concept ref="concept_Copyable_555DCA16115160D45CEF63A5F50FCD5E29F3D6E2"/>
                                    </constraint>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_IsEmpty_List_T_9D2D6FCD118AECF7D6172A1DA09ACD9A5837CED0">
                            <name>IsEmpty() const</name>
                            <syntax>public nothrow inline bool IsEmpty() const;</syntax>
                            <returnType ref="type.1579450"/>
                        </function>
                        <function id="member_function_Remove_List_T_6CA3C8C3007BC80A71ACBD9A12502744E82C89ED">
                            <name>Remove(RandomAccessIter&lt;T, T&amp;, T*> pos)</name>
                            <syntax>public T Remove(RandomAccessIter&lt;T, T&amp;, T*> pos);</syntax>
                            <parameters>
                                <parameter>
                                    <name>pos</name>
                                    <type ref="type.624"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1579967"/>
                        </function>
                        <function id="member_function_RemoveFirst_List_T_90904AA2407F217F3BF2BFE855BA3B5978647F16">
                            <name>RemoveFirst()</name>
                            <syntax>public T RemoveFirst();</syntax>
                            <returnType ref="1579967"/>
                        </function>
                        <function id="member_function_RemoveLast_List_T_339A240B36683335D5ABEC158BCABFC2BFCB0373">
                            <name>RemoveLast()</name>
                            <syntax>public T RemoveLast();</syntax>
                            <returnType ref="1579967"/>
                        </function>
                        <function id="member_function_Reserve_List_T_A1BA0B51B33D844FAB593BF2B31274289836B651">
                            <name>Reserve(long minRes)</name>
                            <syntax>public void Reserve(long minRes);</syntax>
                            <parameters>
                                <parameter>
                                    <name>minRes</name>
                                    <type ref="type.1579457"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Resize_List_T_57B376A5801DA1B47D2DA55DDE38E7037B451239">
                            <name>Resize(long newCount)</name>
                            <syntax>public void Resize(long newCount);</syntax>
                            <parameters>
                                <parameter>
                                    <name>newCount</name>
                                    <type ref="type.1579457"/>
                                </parameter>
                            </parameters>
                            <constraint>
                                T<connector>is</connector>
                                <concept ref="concept_Movable_67BF70D7114988D4858EF177704CC03346D9240D"/>
                            </constraint>
                        </function>
                        <function id="function_group_op_assign_681FCE143E5181BDBF0D45D260BDBD36B29CF96F">
                            <name>operator=</name>
                            <overloads>
                                <overload id="move_assignment_op_assign_List_T_9ADA803B73384B3A969D25A29ACAB83482F160D5">
                                    <name>operator=(List&lt;T>&amp;&amp; that)</name>
                                    <syntax>public nothrow void operator=(List&lt;T>&amp;&amp; that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.632"/>
                                        </parameter>
                                    </parameters>
                                    <constraint>
                                        T<connector>is</connector>
                                        <concept ref="concept_Movable_67BF70D7114988D4858EF177704CC03346D9240D"/>
                                    </constraint>
                                </overload>
                                <overload id="copy_assignment_op_assign_List_T_44B985A7A9A36DA3798EC9C18EAAF09FD9F59569">
                                    <name>operator=(const List&lt;T>&amp; that)</name>
                                    <syntax>public void operator=(const List&lt;T>&amp; that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.631"/>
                                        </parameter>
                                    </parameters>
                                    <constraint>
                                        T<connector>is</connector>
                                        <concept ref="concept_Copyable_555DCA16115160D45CEF63A5F50FCD5E29F3D6E2"/>
                                    </constraint>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_op_index_92651A8823E01FEF6E9EC50F9405EA8D0FF83890">
                            <name>operator[]</name>
                            <overloads>
                                <overload id="member_function_op_index_List_T_539A1A941184F71A7AE8BD827A01B666F3D48830">
                                    <name>operator[](long index)</name>
                                    <syntax>public nothrow inline T&amp; operator[](long index);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>index</name>
                                            <type ref="type.1579457"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.622"/>
                                </overload>
                                <overload id="member_function_op_index_List_T_AA2A1F9532E2BEB527BBEC048E2DF4EB16940F71">
                                    <name>operator[](long index) const</name>
                                    <syntax>public nothrow inline const T&amp; operator[](long index) const;</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>index</name>
                                            <type ref="type.1579457"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.613"/>
                                </overload>
                            </overloads>
                        </function>
                    </functions>
                    <typedefs>
                        <typedef id="typedef_ConstIterator_1C11E1BEC53176F5C2C3DECB470DC1A6CE5A056F">
                            <name>ConstIterator</name>
                            <syntax>public typedef RandomAccessIter&lt;T, const T&amp;, const T*> ConstIterator;</syntax>
                            <type ref="type.615"/>
                        </typedef>
                        <typedef id="typedef_Iterator_E3A4B1A1A0B0DEF218D39C3C1618FABFE9F98FAD">
                            <name>Iterator</name>
                            <syntax>public typedef RandomAccessIter&lt;T, T&amp;, T*> Iterator;</syntax>
                            <type ref="type.624"/>
                        </typedef>
                        <typedef id="typedef_ValueType_904C9F742BEB9C81717025C2CEDC83B446B4B65F">
                            <name>ValueType</name>
                            <syntax>public typedef T ValueType;</syntax>
                            <type ref="1579967"/>
                        </typedef>
                    </typedefs>
                </class>
                <class id="1581476">
                    <name>Map&lt;Key, Value, KeyCompare></name>
                    <groupName>Map</groupName>
                    <syntax> public class Map&lt;Key, Value, KeyCompare>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579974">
                            <name>Key</name>
                        </templateParameter>
                        <templateParameter id="1579975">
                            <name>Value</name>
                        </templateParameter>
                        <templateParameter id="1579976">
                            <name>KeyCompare</name>
                            <default>Less&lt;Key></default>
                        </templateParameter>
                    </templateParameters>
                    <constraint>
                        <type ref="1579974"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                        <connector>and</connector>
                        <type ref="1579975"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                        <connector>and</connector>
                        <type ref="1579976"/>
                        <connector>is</connector>
                        <concept ref="concept_Relation_EA6D5281439518EB11DD9152636FEB86745EE746"/>
                        <connector>and</connector>
                        <type ref="1579976"/>
                        <dot>Domain</dot>
                        <connector>is</connector>
                        <type ref="1579974"/>
                    </constraint>
                    <functions>
                        <function id="function_group_Begin_FE9D0125978BD6A49DA7EADF1EC1EA9C79EC90D4">
                            <name>Begin</name>
                            <overloads>
                                <overload id="member_function_Begin_Map_Key_Value_KeyCompare_5B8AC023A9CBB7FCCA976297ADAC2B8BA01DC7A0">
                                    <name>Begin()</name>
                                    <syntax>public nothrow inline RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*> Begin();</syntax>
                                    <returnType ref="type.681"/>
                                </overload>
                                <overload id="member_function_Begin_Map_Key_Value_KeyCompare_C6D63FA5BBF5F278ABB5AE0078F0984344C4FAEC">
                                    <name>Begin() const</name>
                                    <syntax>public nothrow inline RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*> Begin() const;</syntax>
                                    <returnType ref="type.669"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_CBegin_Map_Key_Value_KeyCompare_D40E23EB681ACACC886F8EF0586BF6FE6E92E6DB">
                            <name>CBegin() const</name>
                            <syntax>public nothrow inline RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*> CBegin() const;</syntax>
                            <returnType ref="type.669"/>
                        </function>
                        <function id="member_function_CEnd_Map_Key_Value_KeyCompare_F7049C3EC5CB4A5BF07B2D7B84F73B9C80758FF0">
                            <name>CEnd() const</name>
                            <syntax>public nothrow inline RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*> CEnd() const;</syntax>
                            <returnType ref="type.669"/>
                        </function>
                        <function id="member_function_CFind_Map_Key_Value_KeyCompare_63DC619F3171180AAA343ACD9F63120CB12D1151">
                            <name>CFind(const Key&amp; key) const</name>
                            <syntax>public nothrow inline RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*> CFind(const Key&amp; key) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>key</name>
                                    <type ref="type.653"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.669"/>
                        </function>
                        <function id="member_function_Clear_Map_Key_Value_KeyCompare_F67AD9F821C7816FA6742375245C9F4E0D9FEAE2">
                            <name>Clear()</name>
                            <syntax>public nothrow inline void Clear();</syntax>
                        </function>
                        <function id="member_function_Count_Map_Key_Value_KeyCompare_15C66BC1F50346AABC786A2C611A85910F13EA2B">
                            <name>Count() const</name>
                            <syntax>public nothrow inline long Count() const;</syntax>
                            <returnType ref="type.1579457"/>
                        </function>
                        <function id="function_group_End_475E06DBA9D2E69BB8E5D44217B0C3C44A6DA3D7">
                            <name>End</name>
                            <overloads>
                                <overload id="member_function_End_Map_Key_Value_KeyCompare_FCF364B53EF4855C5049759E82F41030D6133661">
                                    <name>End()</name>
                                    <syntax>public nothrow inline RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*> End();</syntax>
                                    <returnType ref="type.681"/>
                                </overload>
                                <overload id="member_function_End_Map_Key_Value_KeyCompare_E08A5E480E1B0485D20D99AB8C381F4A8AAEA7F9">
                                    <name>End() const</name>
                                    <syntax>public nothrow inline RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*> End() const;</syntax>
                                    <returnType ref="type.669"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_Find_2E50A1226F1357BDE2C81BB6B8E948CEFC551577">
                            <name>Find</name>
                            <overloads>
                                <overload id="member_function_Find_Map_Key_Value_KeyCompare_EA198F11324C1EE2AA8C6D5FE4C516E94E8C89F8">
                                    <name>Find(const Key&amp; key)</name>
                                    <syntax>public nothrow inline RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*> Find(const Key&amp; key);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>key</name>
                                            <type ref="type.653"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.681"/>
                                </overload>
                                <overload id="member_function_Find_Map_Key_Value_KeyCompare_47371917A146D15231BC47E9FE8A0F41C74B5B12">
                                    <name>Find(const Key&amp; key) const</name>
                                    <syntax>public nothrow inline RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*> Find(const Key&amp; key) const;</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>key</name>
                                            <type ref="type.653"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.669"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_Insert_Map_Key_Value_KeyCompare_695995241FEDB6131B95FF146878B500A42F4B4C">
                            <name>Insert(const Pair&lt;Key, Value>&amp; value)</name>
                            <syntax>public inline Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool> Insert(const Pair&lt;Key, Value>&amp; value);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.662"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.690"/>
                            <constraint>
                                ValueType<connector>is</connector>
                                <concept ref="concept_Copyable_555DCA16115160D45CEF63A5F50FCD5E29F3D6E2"/>
                            </constraint>
                        </function>
                        <function id="member_function_IsEmpty_Map_Key_Value_KeyCompare_D1AD7AB2719ACBFDF6D0F8607B3EB29173276C7D">
                            <name>IsEmpty() const</name>
                            <syntax>public nothrow inline bool IsEmpty() const;</syntax>
                            <returnType ref="type.1579450"/>
                        </function>
                        <function id="function_group_Remove_1C96425CE33E17B87A2E9D0F9881E310F2DEBD9F">
                            <name>Remove</name>
                            <overloads>
                                <overload id="member_function_Remove_Map_Key_Value_KeyCompare_5A72AAA2F9DCC35452945B94FEBF21A1F2CE8E43">
                                    <name>Remove(RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*> pos)</name>
                                    <syntax>public nothrow inline void Remove(RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*> pos);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>pos</name>
                                            <type ref="type.681"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Remove_Map_Key_Value_KeyCompare_DA0FFD79155F0CAA0B4E93FDA3E48620A150BE71">
                                    <name>Remove(const Key&amp; key)</name>
                                    <syntax>public nothrow inline bool Remove(const Key&amp; key);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>key</name>
                                            <type ref="type.653"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.1579450"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_op_index_Map_Key_Value_KeyCompare_8BBCC8433D3DAA68F452754E1FDF45FA25C3E126">
                            <name>operator[](const Key&amp; key)</name>
                            <syntax>public inline Value&amp; operator[](const Key&amp; key);</syntax>
                            <parameters>
                                <parameter>
                                    <name>key</name>
                                    <type ref="type.653"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.701"/>
                        </function>
                    </functions>
                    <typedefs>
                        <typedef id="typedef_Compare_B507823B7BE4C96CA8B1F12A160AB833A75E5EAE">
                            <name>Compare</name>
                            <syntax>public typedef KeyCompare Compare;</syntax>
                            <type ref="1579976"/>
                        </typedef>
                        <typedef id="typedef_ConstIterator_6172C7CFD811B814BB07156F78D58EFFDB946A71">
                            <name>ConstIterator</name>
                            <syntax>public typedef RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*> ConstIterator;</syntax>
                            <type ref="type.669"/>
                        </typedef>
                        <typedef id="typedef_Iterator_C7D1ABB1B4F5ABD77EC11FD205C3BFDC52AED1F3">
                            <name>Iterator</name>
                            <syntax>public typedef RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*> Iterator;</syntax>
                            <type ref="type.681"/>
                        </typedef>
                        <typedef id="typedef_KeyType_B6C96AA925025E67D8D38EBEF6E87AFE0804DB62">
                            <name>KeyType</name>
                            <syntax>public typedef Key KeyType;</syntax>
                            <type ref="1579974"/>
                        </typedef>
                        <typedef id="typedef_MappedType_F35AB9E1E348DA57631AFC655348602747007F41">
                            <name>MappedType</name>
                            <syntax>public typedef Value MappedType;</syntax>
                            <type ref="1579975"/>
                        </typedef>
                        <typedef id="typedef_ValueType_F267A062B391C37538D78FB7C418FDB4D635D1A3">
                            <name>ValueType</name>
                            <syntax>public typedef Pair&lt;Key, Value> ValueType;</syntax>
                            <type ref="type.651"/>
                        </typedef>
                    </typedefs>
                </class>
                <class id="1581622">
                    <name>Queue&lt;T></name>
                    <groupName>Queue</groupName>
                    <syntax> public class Queue&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1580004">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constraint>
                        <type ref="1580004"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                    </constraint>
                    <functions>
                        <function id="member_function_Clear_Queue_T_F02E3D7836CEA2C641372029743D23D12E95FC0B">
                            <name>Clear()</name>
                            <syntax>public nothrow inline void Clear();</syntax>
                        </function>
                        <function id="member_function_Count_Queue_T_B19CEC9C607BDB81003423B09B3B868F3D477F1E">
                            <name>Count() const</name>
                            <syntax>public nothrow inline long Count() const;</syntax>
                            <returnType ref="type.1579457"/>
                        </function>
                        <function id="member_function_Front_Queue_T_D89749D369435AA192B58C1CC49734CF8E49A589">
                            <name>Front() const</name>
                            <syntax>public nothrow inline const T&amp; Front() const;</syntax>
                            <returnType ref="type.738"/>
                        </function>
                        <function id="member_function_Get_Queue_T_1B10A1BA349DF1ABECB8536F0879686DB7DF3599">
                            <name>Get()</name>
                            <syntax>public inline T Get();</syntax>
                            <returnType ref="1580004"/>
                        </function>
                        <function id="member_function_IsEmpty_Queue_T_79A7FB3FABA74E1DBA4A94C885C5A3538AFF01F5">
                            <name>IsEmpty() const</name>
                            <syntax>public nothrow inline bool IsEmpty() const;</syntax>
                            <returnType ref="type.1579450"/>
                        </function>
                        <function id="function_group_Put_BEC6CE8D550ABFB9168DE81CE981DC3667FAEA9A">
                            <name>Put</name>
                            <overloads>
                                <overload id="member_function_Put_Queue_T_FA2362A50F7DCEED64C0BAA146FEDAA518E6CC2C">
                                    <name>Put(T&amp;&amp; item)</name>
                                    <syntax>public inline void Put(T&amp;&amp; item);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>item</name>
                                            <type ref="type.739"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Put_Queue_T_16BE8F970EFCC4CCF4C8C147DE3F896950D2780C">
                                    <name>Put(const T&amp; item)</name>
                                    <syntax>public inline void Put(const T&amp; item);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>item</name>
                                            <type ref="type.738"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                    </functions>
                    <typedefs>
                        <typedef id="typedef_ValueType_EA5F1262C7F5D733FA5BFE7EC6EBE8B5B3C86A14">
                            <name>ValueType</name>
                            <syntax>public typedef T ValueType;</syntax>
                            <type ref="1580004"/>
                        </typedef>
                    </typedefs>
                </class>
                <class id="1581732">
                    <name>RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare></name>
                    <groupName>RedBlackTree</groupName>
                    <syntax> public class RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare>;</syntax>
                    <templateParameters>
                        <templateParameter id="1580042">
                            <name>KeyType</name>
                        </templateParameter>
                        <templateParameter id="1580043">
                            <name>ValueType</name>
                        </templateParameter>
                        <templateParameter id="1580044">
                            <name>KeyOfValue</name>
                        </templateParameter>
                        <templateParameter id="1580045">
                            <name>Compare</name>
                        </templateParameter>
                    </templateParameters>
                    <constraint>
                        <type ref="1580042"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                        <connector>and</connector>
                        <type ref="1580043"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                        <connector>and</connector>
                        <concept ref="concept_KeySelectionFunction_719538A539328921CB0D528AECE6DCBE1B8C6E19">
                            <params>
                                <type ref="1580044"/>
                                <type ref="1580042"/>
                                <type ref="1580043"/>
                            </params>
                        </concept>
                        <connector>and</connector>
                        <type ref="1580045"/>
                        <connector>is</connector>
                        <concept ref="concept_Relation_EA6D5281439518EB11DD9152636FEB86745EE746"/>
                        <connector>and</connector>
                        <type ref="1580045"/>
                        <dot>Domain</dot>
                        <connector>is</connector>
                        <type ref="1580042"/>
                    </constraint>
                    <constructors>
                        <constructor id="default_constructor_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_AD3B752A520D960C7313D6E645A074C3DFF084D8">
                            <name>RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare>()</name>
                            <syntax>public RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare>();</syntax>
                        </constructor>
                        <constructor id="move_constructor_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_205013DDAA02A693EE434D6E37F4CD1274EB61BE">
                            <name>RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare>(RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare>&amp;&amp; that)</name>
                            <syntax>public nothrow RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare>(RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare>&amp;&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.827"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="copy_constructor_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_8C2414F43B2F8B1A9C1F53CF6523A27D782EC8D0">
                            <name>RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare>(const RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare>&amp; that)</name>
                            <syntax>public RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare>(const RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare>&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.826"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="function_group_Begin_D7669BDD664E97913A238C7C2303FC0F28B875E6">
                            <name>Begin</name>
                            <overloads>
                                <overload id="member_function_Begin_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_F63A5B9D5181BAF0E6498ED375CC090D257C5C35">
                                    <name>Begin()</name>
                                    <syntax>public nothrow inline RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*> Begin();</syntax>
                                    <returnType ref="type.819"/>
                                </overload>
                                <overload id="member_function_Begin_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_53684386EDE6B8CACE9B73902FF4D25093CA2D3B">
                                    <name>Begin() const</name>
                                    <syntax>public nothrow inline RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*> Begin() const;</syntax>
                                    <returnType ref="type.806"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_CBegin_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_71CFE2C7E2B876B2ABBB5FB528955C4ABC104EF5">
                            <name>CBegin() const</name>
                            <syntax>public nothrow inline RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*> CBegin() const;</syntax>
                            <returnType ref="type.806"/>
                        </function>
                        <function id="member_function_CEnd_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_A71347088BFFD457F763E24FB632E134E50ECAC9">
                            <name>CEnd() const</name>
                            <syntax>public nothrow inline RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*> CEnd() const;</syntax>
                            <returnType ref="type.806"/>
                        </function>
                        <function id="member_function_CFind_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_1152D260B2B080A26CE75BACD32821335FBB6740">
                            <name>CFind(const KeyType&amp; key) const</name>
                            <syntax>public nothrow RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*> CFind(const KeyType&amp; key) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>key</name>
                                    <type ref="type.828"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.806"/>
                        </function>
                        <function id="member_function_Clear_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_D340802D53423264A906B36D086B84427DA289E4">
                            <name>Clear()</name>
                            <syntax>public nothrow void Clear();</syntax>
                        </function>
                        <function id="member_function_Count_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_9B73A160CCA87BAC826A5E79F27D7B3635C4FA1D">
                            <name>Count() const</name>
                            <syntax>public nothrow inline long Count() const;</syntax>
                            <returnType ref="type.1579457"/>
                        </function>
                        <function id="function_group_End_2476ED2CADA245A0154FE78E4CC2FC3D63393373">
                            <name>End</name>
                            <overloads>
                                <overload id="member_function_End_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_BB51D6BCA84CD8CA52725A9C12E5E75D03C5BDA4">
                                    <name>End()</name>
                                    <syntax>public nothrow inline RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*> End();</syntax>
                                    <returnType ref="type.819"/>
                                </overload>
                                <overload id="member_function_End_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_BB0A6027DDB4FEDDEB94B19F9644AFF89EDA708D">
                                    <name>End() const</name>
                                    <syntax>public nothrow inline RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*> End() const;</syntax>
                                    <returnType ref="type.806"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_Find_B1D76DCF5857ADF5A3884D3C889D4230BB209710">
                            <name>Find</name>
                            <overloads>
                                <overload id="member_function_Find_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_E00E86558F9601ED57E41D555B8BCBA8A9ABA95F">
                                    <name>Find(const KeyType&amp; key)</name>
                                    <syntax>public nothrow RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*> Find(const KeyType&amp; key);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>key</name>
                                            <type ref="type.828"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.819"/>
                                </overload>
                                <overload id="member_function_Find_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_930BB4442B3BD7FB5976D51774771BC16F047016">
                                    <name>Find(const KeyType&amp; key) const</name>
                                    <syntax>public nothrow RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*> Find(const KeyType&amp; key) const;</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>key</name>
                                            <type ref="type.828"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.806"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_Insert_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_10E11AF457CE4D27CFF4B7F1999BD1157180B8FE">
                            <name>Insert(const ValueType&amp; value)</name>
                            <syntax>public Pair&lt;RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*>, bool> Insert(const ValueType&amp; value);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.804"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.829"/>
                            <constraint>
                                ValueType<connector>is</connector>
                                <concept ref="concept_Copyable_555DCA16115160D45CEF63A5F50FCD5E29F3D6E2"/>
                            </constraint>
                        </function>
                        <function id="member_function_IsEmpty_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_EA488B8A12D0D4049E1DF34DC8BD14A384BE2455">
                            <name>IsEmpty() const</name>
                            <syntax>public nothrow inline bool IsEmpty() const;</syntax>
                            <returnType ref="type.1579450"/>
                        </function>
                        <function id="function_group_Remove_8E327673F99746C7F9E3FDDDBB1356C7064F2EA8">
                            <name>Remove</name>
                            <overloads>
                                <overload id="member_function_Remove_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_9A33A0EFE56BA62582AA2EF46A02446FAC750EF8">
                                    <name>Remove(RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*> pos)</name>
                                    <syntax>public nothrow void Remove(RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*> pos);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>pos</name>
                                            <type ref="type.819"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Remove_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_240F7BAC14DD9225DE0B6359BB326A5854929105">
                                    <name>Remove(const KeyType&amp; key)</name>
                                    <syntax>public nothrow bool Remove(const KeyType&amp; key);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>key</name>
                                            <type ref="type.828"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.1579450"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_op_assign_859C99C1450F96202684E2117810B92FE3DF4474">
                            <name>operator=</name>
                            <overloads>
                                <overload id="move_assignment_op_assign_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_51F60C29585897650D41BF656F7D5231D75F2A40">
                                    <name>operator=(RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare>&amp;&amp; that)</name>
                                    <syntax>public nothrow void operator=(RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare>&amp;&amp; that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.827"/>
                                        </parameter>
                                    </parameters>
                                    <constraint>
                                        ValueType<connector>is</connector>
                                        <concept ref="concept_Movable_67BF70D7114988D4858EF177704CC03346D9240D"/>
                                    </constraint>
                                </overload>
                                <overload id="copy_assignment_op_assign_RedBlackTree_KeyType_ValueType_KeyOfValue_Compare_7A89D3A15918B3B38F71CCDBBB016FF2EC9EFAC5">
                                    <name>operator=(const RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare>&amp; that)</name>
                                    <syntax>public void operator=(const RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare>&amp; that);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>that</name>
                                            <type ref="type.826"/>
                                        </parameter>
                                    </parameters>
                                    <constraint>
                                        ValueType<connector>is</connector>
                                        <concept ref="concept_Copyable_555DCA16115160D45CEF63A5F50FCD5E29F3D6E2"/>
                                    </constraint>
                                </overload>
                            </overloads>
                        </function>
                    </functions>
                    <typedefs>
                        <typedef id="typedef_ConstIterator_281040C11EB596BB9E88DFAC72311B8739F60C0C">
                            <name>ConstIterator</name>
                            <syntax>public typedef RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*> ConstIterator;</syntax>
                            <type ref="type.806"/>
                        </typedef>
                        <typedef id="typedef_Iterator_61851BC1B0BCCB48BEAFBD207AC61E64957EFF81">
                            <name>Iterator</name>
                            <syntax>public typedef RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*> Iterator;</syntax>
                            <type ref="type.819"/>
                        </typedef>
                    </typedefs>
                </class>
                <class id="1581700">
                    <name>RedBlackTreeNode&lt;T></name>
                    <groupName>RedBlackTreeNode</groupName>
                    <syntax> public class RedBlackTreeNode&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1580033">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <baseClass ref="1580027"/>
                    <constructors>
                        <constructor id="constructor_RedBlackTreeNode_T_4CACA7ABB085630F196747A1DCF5FB2B6459BB66">
                            <name>RedBlackTreeNode&lt;T>(const T&amp; value_, RedBlackTreeNode&lt;T>* parent_)</name>
                            <syntax>public RedBlackTreeNode&lt;T>(const T&amp; value_, RedBlackTreeNode&lt;T>* parent_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value_</name>
                                    <type ref="type.784"/>
                                </parameter>
                                <parameter>
                                    <name>parent_</name>
                                    <type ref="type.781"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="function_group_Value_AFC956AFB8509A9F0F5460FF7BC9E22CF6235041">
                            <name>Value</name>
                            <overloads>
                                <overload id="member_function_Value_RedBlackTreeNode_T_5CC84CADFF4E6D884D077217D63AC9B2FF4D9C2B">
                                    <name>Value()</name>
                                    <syntax>public nothrow inline T&amp; Value();</syntax>
                                    <returnType ref="type.785"/>
                                </overload>
                                <overload id="member_function_Value_RedBlackTreeNode_T_02A99F8E29E69264CBBC1394A13F2BADE8F5B1F5">
                                    <name>Value() const</name>
                                    <syntax>public nothrow inline const T&amp; Value() const;</syntax>
                                    <returnType ref="type.784"/>
                                </overload>
                            </overloads>
                        </function>
                    </functions>
                    <typedefs>
                        <typedef id="typedef_ValueType_5D914DD51ED431E7F52D649AF631D53D838B7DDD">
                            <name>ValueType</name>
                            <syntax>public typedef T ValueType;</syntax>
                            <type ref="1580033"/>
                        </typedef>
                    </typedefs>
                </class>
                <class id="1580027">
                    <name>RedBlackTreeNodeBase</name>
                    <groupName>RedBlackTreeNodeBase</groupName>
                    <syntax> public class RedBlackTreeNodeBase;</syntax>
                    <constructors>
                        <constructor id="constructor_RedBlackTreeNodeBase_10127E169E9BA13A5BCBC54E99CBB5AC112D7075">
                            <name>RedBlackTreeNodeBase(RedBlackTreeNodeBase* parent_)</name>
                            <syntax>public nothrow RedBlackTreeNodeBase(RedBlackTreeNodeBase* parent_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>parent_</name>
                                    <type ref="type.1580029"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_GetColor_RedBlackTreeNodeBase_C3114804876CC00D18B55E362A1F0424B5649B26">
                            <name>GetColor() const</name>
                            <syntax>public nothrow inline Color GetColor() const;</syntax>
                            <returnType ref="1580028"/>
                        </function>
                        <function id="member_function_IsHeaderNode_RedBlackTreeNodeBase_B08204F554FBF8A3C9329EC3ADFD5F3EBA3E0B2B">
                            <name>IsHeaderNode() const</name>
                            <syntax>public nothrow inline bool IsHeaderNode() const;</syntax>
                            <returnType ref="type.1579450"/>
                        </function>
                        <function id="member_function_Left_RedBlackTreeNodeBase_D0162F64673FB47118E327332F8D50ADAB0A4ECA">
                            <name>Left() const</name>
                            <syntax>public nothrow inline RedBlackTreeNodeBase* Left() const;</syntax>
                            <returnType ref="type.1580029"/>
                        </function>
                        <function id="member_function_LeftRef_RedBlackTreeNodeBase_F109AA919A40B1BC52D2CE705A6A0768CA00993E">
                            <name>LeftRef()</name>
                            <syntax>public nothrow inline RedBlackTreeNodeBase*&amp; LeftRef();</syntax>
                            <returnType ref="type.1581510"/>
                        </function>
                        <function id="member_function_Parent_RedBlackTreeNodeBase_8D485E37945E2796DDD110F161C9414B671394B4">
                            <name>Parent() const</name>
                            <syntax>public nothrow inline RedBlackTreeNodeBase* Parent() const;</syntax>
                            <returnType ref="type.1580029"/>
                        </function>
                        <function id="member_function_ParentRef_RedBlackTreeNodeBase_01F987B4FD119FB4AE0F4B0383878A8D8317BE05">
                            <name>ParentRef()</name>
                            <syntax>public nothrow inline RedBlackTreeNodeBase*&amp; ParentRef();</syntax>
                            <returnType ref="type.1581510"/>
                        </function>
                        <function id="member_function_Right_RedBlackTreeNodeBase_59176D5DAC3176D51D1888F61790B700EFCEFEF5">
                            <name>Right() const</name>
                            <syntax>public nothrow inline RedBlackTreeNodeBase* Right() const;</syntax>
                            <returnType ref="type.1580029"/>
                        </function>
                        <function id="member_function_RightRef_RedBlackTreeNodeBase_74A881AD8B5357D886764FBCBDC674CE8928C158">
                            <name>RightRef()</name>
                            <syntax>public nothrow inline RedBlackTreeNodeBase*&amp; RightRef();</syntax>
                            <returnType ref="type.1581510"/>
                        </function>
                        <function id="member_function_SetColor_RedBlackTreeNodeBase_E86C746BB3371E91358AC4F70EA7972BB91F84CA">
                            <name>SetColor(Color color_)</name>
                            <syntax>public nothrow inline void SetColor(Color color_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>color_</name>
                                    <type ref="1580028"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetLeft_RedBlackTreeNodeBase_693D74CA355678A76285252429EC8575FED2357A">
                            <name>SetLeft(RedBlackTreeNodeBase* left_)</name>
                            <syntax>public nothrow inline void SetLeft(RedBlackTreeNodeBase* left_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left_</name>
                                    <type ref="type.1580029"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetParent_RedBlackTreeNodeBase_D9626D13742945C14012C74CE695C8C7F46CE931">
                            <name>SetParent(RedBlackTreeNodeBase* parent_)</name>
                            <syntax>public nothrow inline void SetParent(RedBlackTreeNodeBase* parent_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>parent_</name>
                                    <type ref="type.1580029"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetRight_RedBlackTreeNodeBase_B64B6B3F18DDFBC6DD15402E173BC1826A945C05">
                            <name>SetRight(RedBlackTreeNodeBase* right_)</name>
                            <syntax>public nothrow inline void SetRight(RedBlackTreeNodeBase* right_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>right_</name>
                                    <type ref="type.1580029"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                    <staticMemberFunctions>
                        <function id="member_function_Max_RedBlackTreeNodeBase_4F062F68C3FB6751C758BEF2F9479D3B76198C36">
                            <name>Max(RedBlackTreeNodeBase* n)</name>
                            <syntax>public static nothrow inline RedBlackTreeNodeBase* Max(RedBlackTreeNodeBase* n);</syntax>
                            <parameters>
                                <parameter>
                                    <name>n</name>
                                    <type ref="type.1580029"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580029"/>
                        </function>
                        <function id="member_function_Min_RedBlackTreeNodeBase_C8B9F7EE83DC456DB1C693CB10F59CFCE8ADF6B4">
                            <name>Min(RedBlackTreeNodeBase* n)</name>
                            <syntax>public static nothrow inline RedBlackTreeNodeBase* Min(RedBlackTreeNodeBase* n);</syntax>
                            <parameters>
                                <parameter>
                                    <name>n</name>
                                    <type ref="type.1580029"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580029"/>
                        </function>
                        <function id="member_function_Next_RedBlackTreeNodeBase_07546C9EC12ED13773807C095BEAF5EB14BF72A3">
                            <name>Next(RedBlackTreeNodeBase* n)</name>
                            <syntax>public static nothrow inline RedBlackTreeNodeBase* Next(RedBlackTreeNodeBase* n);</syntax>
                            <parameters>
                                <parameter>
                                    <name>n</name>
                                    <type ref="type.1580029"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580029"/>
                        </function>
                        <function id="member_function_Prev_RedBlackTreeNodeBase_C99173251192B7E484465DC608C3263C8AA71EC7">
                            <name>Prev(RedBlackTreeNodeBase* n)</name>
                            <syntax>public static nothrow inline RedBlackTreeNodeBase* Prev(RedBlackTreeNodeBase* n);</syntax>
                            <parameters>
                                <parameter>
                                    <name>n</name>
                                    <type ref="type.1580029"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580029"/>
                        </function>
                        <function id="member_function_RebalanceAfterInsert_RedBlackTreeNodeBase_6AD70485782F125477AB5C8D92C6FC7CCDB3A8F0">
                            <name>RebalanceAfterInsert(RedBlackTreeNodeBase* n, RedBlackTreeNodeBase*&amp; root)</name>
                            <syntax>public static nothrow void RebalanceAfterInsert(RedBlackTreeNodeBase* n, RedBlackTreeNodeBase*&amp; root);</syntax>
                            <parameters>
                                <parameter>
                                    <name>n</name>
                                    <type ref="type.1580029"/>
                                </parameter>
                                <parameter>
                                    <name>root</name>
                                    <type ref="type.1581510"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_RebalanceForRemove_RedBlackTreeNodeBase_8B26F408EE39DCFE675A41D06DCCB4FBA722839C">
                            <name>RebalanceForRemove(RedBlackTreeNodeBase* z, RedBlackTreeNodeBase*&amp; root, RedBlackTreeNodeBase*&amp; leftmost, RedBlackTreeNodeBase*&amp; rightmost)</name>
                            <syntax>public static nothrow RedBlackTreeNodeBase* RebalanceForRemove(RedBlackTreeNodeBase* z, RedBlackTreeNodeBase*&amp; root, RedBlackTreeNodeBase*&amp; leftmost, RedBlackTreeNodeBase*&amp; rightmost);</syntax>
                            <parameters>
                                <parameter>
                                    <name>z</name>
                                    <type ref="type.1580029"/>
                                </parameter>
                                <parameter>
                                    <name>root</name>
                                    <type ref="type.1581510"/>
                                </parameter>
                                <parameter>
                                    <name>leftmost</name>
                                    <type ref="type.1581510"/>
                                </parameter>
                                <parameter>
                                    <name>rightmost</name>
                                    <type ref="type.1581510"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580029"/>
                        </function>
                    </staticMemberFunctions>
                    <enumerations>
                        <enumeration id="1580028">
                            <name>Color</name>
                            <syntax>public enum Color;</syntax>
                            <underlyingType ref="type.1579455"/>
                            <enumConstant>
                                <name>red</name>
                                <value>0</value>
                            </enumConstant>
                            <enumConstant>
                                <name>black</name>
                                <value>1</value>
                            </enumConstant>
                        </enumeration>
                    </enumerations>
                </class>
                <class id="1581706">
                    <name>RedBlackTreeNodeIterator&lt;T, R, P></name>
                    <groupName>RedBlackTreeNodeIterator</groupName>
                    <syntax> public class RedBlackTreeNodeIterator&lt;T, R, P>;</syntax>
                    <templateParameters>
                        <templateParameter id="1580035">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="1580036">
                            <name>R</name>
                        </templateParameter>
                        <templateParameter id="1580037">
                            <name>P</name>
                        </templateParameter>
                    </templateParameters>
                    <constructors>
                        <constructor id="default_constructor_RedBlackTreeNodeIterator_T_R_P_F0EA5C9DE84214DDF7FACAB0431E84EC8856FC4A">
                            <name>RedBlackTreeNodeIterator&lt;T, R, P>()</name>
                            <syntax>public nothrow RedBlackTreeNodeIterator&lt;T, R, P>();</syntax>
                        </constructor>
                        <constructor id="constructor_RedBlackTreeNodeIterator_T_R_P_D1C3A0A84E42D72F31FDAC876B3BFCFBD45594CC">
                            <name>RedBlackTreeNodeIterator&lt;T, R, P>(RedBlackTreeNode&lt;T>* node_)</name>
                            <syntax>public nothrow RedBlackTreeNodeIterator&lt;T, R, P>(RedBlackTreeNode&lt;T>* node_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>node_</name>
                                    <type ref="type.790"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Node_RedBlackTreeNodeIterator_T_R_P_AC61E8FE4468A7E9FB4E02F95B039D88594F474C">
                            <name>Node() const</name>
                            <syntax>public nothrow inline RedBlackTreeNode&lt;T>* Node() const;</syntax>
                            <returnType ref="type.790"/>
                        </function>
                        <function id="member_function_op_star_RedBlackTreeNodeIterator_T_R_P_129762AD5B3AD286D55FB7B25AE0A9DA4C60F628">
                            <name>operator*()</name>
                            <syntax>public nothrow inline R operator*();</syntax>
                            <returnType ref="1580036"/>
                        </function>
                        <function id="member_function_op_plusplus_RedBlackTreeNodeIterator_T_R_P_F5DE82668341B39DE7AF542F5FE16208C35620A6">
                            <name>operator++()</name>
                            <syntax>public nothrow inline RedBlackTreeNodeIterator&lt;T, R, P>&amp; operator++();</syntax>
                            <returnType ref="type.797"/>
                        </function>
                        <function id="member_function_op_minusminus_RedBlackTreeNodeIterator_T_R_P_87DD0BBD93C6CE668E3C120C6864448D692D4AE4">
                            <name>operator--()</name>
                            <syntax>public nothrow inline RedBlackTreeNodeIterator&lt;T, R, P>&amp; operator--();</syntax>
                            <returnType ref="type.797"/>
                        </function>
                        <function id="member_function_op_arrow_RedBlackTreeNodeIterator_T_R_P_01133A53943E54435AEEEDA0561EE711D4792358">
                            <name>operator->()</name>
                            <syntax>public nothrow inline P operator->();</syntax>
                            <returnType ref="1580037"/>
                        </function>
                    </functions>
                    <typedefs>
                        <typedef id="typedef_PointerType_1F3089F892A0B0828DB97B0DDB50662EBA63D9EA">
                            <name>PointerType</name>
                            <syntax>public typedef P PointerType;</syntax>
                            <type ref="1580037"/>
                        </typedef>
                        <typedef id="typedef_ReferenceType_7E3FE3829D172C56F12E0E2C9321FC4FDD4B07F0">
                            <name>ReferenceType</name>
                            <syntax>public typedef R ReferenceType;</syntax>
                            <type ref="1580036"/>
                        </typedef>
                        <typedef id="typedef_ValueType_54322328E0251976BAB061E9059FAB1AB3E336A7">
                            <name>ValueType</name>
                            <syntax>public typedef T ValueType;</syntax>
                            <type ref="1580035"/>
                        </typedef>
                    </typedefs>
                </class>
                <class id="1581773">
                    <name>Set&lt;T, C></name>
                    <groupName>Set</groupName>
                    <syntax> public class Set&lt;T, C>;</syntax>
                    <templateParameters>
                        <templateParameter id="1580048">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="1580049">
                            <name>C</name>
                            <default>Less&lt;T></default>
                        </templateParameter>
                    </templateParameters>
                    <constraint>
                        <type ref="1580048"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                        <connector>and</connector>
                        <type ref="1580049"/>
                        <connector>is</connector>
                        <concept ref="concept_Relation_EA6D5281439518EB11DD9152636FEB86745EE746"/>
                        <connector>and</connector>
                        <type ref="1580049"/>
                        <dot>Domain</dot>
                        <connector>is</connector>
                        <type ref="1580048"/>
                    </constraint>
                    <functions>
                        <function id="function_group_Begin_6D8D74FE21C23B4F9BF5B538BFD7E2C3A691EBF0">
                            <name>Begin</name>
                            <overloads>
                                <overload id="member_function_Begin_Set_T_C_704ECF672C8A873C01A15C8DD9041E565BD6D52A">
                                    <name>Begin()</name>
                                    <syntax>public nothrow inline RedBlackTreeNodeIterator&lt;T, T&amp;, T*> Begin();</syntax>
                                    <returnType ref="type.868"/>
                                </overload>
                                <overload id="member_function_Begin_Set_T_C_623C28DBB6D8A34EC01002EB22734255BA2F43E8">
                                    <name>Begin() const</name>
                                    <syntax>public nothrow inline RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*> Begin() const;</syntax>
                                    <returnType ref="type.855"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_CBegin_Set_T_C_9849359C89524C084EF845BB264A8B159506A471">
                            <name>CBegin() const</name>
                            <syntax>public nothrow inline RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*> CBegin() const;</syntax>
                            <returnType ref="type.855"/>
                        </function>
                        <function id="member_function_CEnd_Set_T_C_D940C5F57A26BA4F50ABC39257A9E4E71130ACAF">
                            <name>CEnd() const</name>
                            <syntax>public nothrow inline RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*> CEnd() const;</syntax>
                            <returnType ref="type.855"/>
                        </function>
                        <function id="member_function_CFind_Set_T_C_C4FE503E57DBA1DE0F38931B7DDC717919EE26A0">
                            <name>CFind(const T&amp; key) const</name>
                            <syntax>public nothrow inline RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*> CFind(const T&amp; key) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>key</name>
                                    <type ref="type.848"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.855"/>
                        </function>
                        <function id="member_function_Clear_Set_T_C_951F2363C27B294F89148767B99B6CD6EA4716A6">
                            <name>Clear()</name>
                            <syntax>public nothrow void Clear();</syntax>
                        </function>
                        <function id="member_function_Count_Set_T_C_5AD8F266DCA5C4413FAD69EB1228719C08BA1E46">
                            <name>Count() const</name>
                            <syntax>public nothrow inline long Count() const;</syntax>
                            <returnType ref="type.1579457"/>
                        </function>
                        <function id="function_group_End_956AF2470B3E7DE8AE434F61A274C22FC13F8E62">
                            <name>End</name>
                            <overloads>
                                <overload id="member_function_End_Set_T_C_A25D8F6F2D5D8D3819ABD442C3F4F4CDD0AFE98D">
                                    <name>End()</name>
                                    <syntax>public nothrow inline RedBlackTreeNodeIterator&lt;T, T&amp;, T*> End();</syntax>
                                    <returnType ref="type.868"/>
                                </overload>
                                <overload id="member_function_End_Set_T_C_47C57E84FCD0F9DCCF3CEA761491409BF03C6D2B">
                                    <name>End() const</name>
                                    <syntax>public nothrow inline RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*> End() const;</syntax>
                                    <returnType ref="type.855"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_Find_5AB2F6ECD2B3A94D4EC9B1B87A6AFDA52B29125F">
                            <name>Find</name>
                            <overloads>
                                <overload id="member_function_Find_Set_T_C_FC3C2F57A01760949C7E3E6F012A5DAE0E6F9A90">
                                    <name>Find(const T&amp; key)</name>
                                    <syntax>public nothrow inline RedBlackTreeNodeIterator&lt;T, T&amp;, T*> Find(const T&amp; key);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>key</name>
                                            <type ref="type.848"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.868"/>
                                </overload>
                                <overload id="member_function_Find_Set_T_C_1B0561CD6F5BC4CCBE8002911016DA6DC8FBCAD0">
                                    <name>Find(const T&amp; key) const</name>
                                    <syntax>public nothrow inline RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*> Find(const T&amp; key) const;</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>key</name>
                                            <type ref="type.848"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.855"/>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_Insert_Set_T_C_CDB4ED63121A2DE63471B2223D29011064AC0ECD">
                            <name>Insert(const T&amp; value)</name>
                            <syntax>public inline Pair&lt;RedBlackTreeNodeIterator&lt;T, T&amp;, T*>, bool> Insert(const T&amp; value);</syntax>
                            <parameters>
                                <parameter>
                                    <name>value</name>
                                    <type ref="type.848"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.877"/>
                            <constraint>
                                T<connector>is</connector>
                                <concept ref="concept_Copyable_555DCA16115160D45CEF63A5F50FCD5E29F3D6E2"/>
                            </constraint>
                        </function>
                        <function id="member_function_IsEmpty_Set_T_C_2E6520EA59B433B4A955857CD0F1074C0239D890">
                            <name>IsEmpty() const</name>
                            <syntax>public nothrow inline bool IsEmpty() const;</syntax>
                            <returnType ref="type.1579450"/>
                        </function>
                        <function id="function_group_Remove_51C8C353C0E30892CA0C189ED9340B0A90977DB3">
                            <name>Remove</name>
                            <overloads>
                                <overload id="member_function_Remove_Set_T_C_9277559D7AB4413509B8D13FE2731A2794D2DA8C">
                                    <name>Remove(RedBlackTreeNodeIterator&lt;T, T&amp;, T*> pos)</name>
                                    <syntax>public nothrow inline void Remove(RedBlackTreeNodeIterator&lt;T, T&amp;, T*> pos);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>pos</name>
                                            <type ref="type.868"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Remove_Set_T_C_BD925F14443715722144B65F1DBCCEF3F79760EE">
                                    <name>Remove(const T&amp; key)</name>
                                    <syntax>public nothrow inline bool Remove(const T&amp; key);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>key</name>
                                            <type ref="type.848"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.1579450"/>
                                </overload>
                            </overloads>
                        </function>
                    </functions>
                    <typedefs>
                        <typedef id="typedef_Compare_5674BBCEE13AD5C541275A13A6230847AD7CC083">
                            <name>Compare</name>
                            <syntax>public typedef C Compare;</syntax>
                            <type ref="1580049"/>
                        </typedef>
                        <typedef id="typedef_ConstIterator_664F4246D09DBF2F9011DB8DDC4F9F56B030F628">
                            <name>ConstIterator</name>
                            <syntax>public typedef RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*> ConstIterator;</syntax>
                            <type ref="type.855"/>
                        </typedef>
                        <typedef id="typedef_Iterator_46E8AC3EC674D01F9339E392F6F19F80BECC5532">
                            <name>Iterator</name>
                            <syntax>public typedef RedBlackTreeNodeIterator&lt;T, T&amp;, T*> Iterator;</syntax>
                            <type ref="type.868"/>
                        </typedef>
                        <typedef id="typedef_KeyType_327EF2AF91AC65B86DCFD870F05024AB22519110">
                            <name>KeyType</name>
                            <syntax>public typedef T KeyType;</syntax>
                            <type ref="1580048"/>
                        </typedef>
                        <typedef id="typedef_ValueType_AC8E6AC932723CA59C5B8879A788C17F90286C2E">
                            <name>ValueType</name>
                            <syntax>public typedef T ValueType;</syntax>
                            <type ref="1580048"/>
                        </typedef>
                    </typedefs>
                </class>
                <class id="1581922">
                    <name>Stack&lt;T></name>
                    <groupName>Stack</groupName>
                    <syntax> public class Stack&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1580055">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constraint>
                        <type ref="1580055"/>
                        <connector>is</connector>
                        <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                    </constraint>
                    <functions>
                        <function id="member_function_Clear_Stack_T_7F6972DB9A41D47B39E04C6E4A49344538B10297">
                            <name>Clear()</name>
                            <syntax>public nothrow inline void Clear();</syntax>
                        </function>
                        <function id="member_function_Count_Stack_T_1AF697C037EA64F6DFDDC19CC9A9928693230294">
                            <name>Count() const</name>
                            <syntax>public nothrow inline long Count() const;</syntax>
                            <returnType ref="type.1579457"/>
                        </function>
                        <function id="member_function_IsEmpty_Stack_T_E96B0DA4559D8502F2BEF25422880C7E25F57604">
                            <name>IsEmpty() const</name>
                            <syntax>public nothrow inline bool IsEmpty() const;</syntax>
                            <returnType ref="type.1579450"/>
                        </function>
                        <function id="member_function_Pop_Stack_T_127A46B6601B486623579A4074F699ED5633B56E">
                            <name>Pop()</name>
                            <syntax>public inline T Pop();</syntax>
                            <returnType ref="1580055"/>
                            <constraint>
                                T<connector>is</connector>
                                <concept ref="concept_Movable_67BF70D7114988D4858EF177704CC03346D9240D"/>
                            </constraint>
                        </function>
                        <function id="function_group_Push_AB2E6EAB2355AB98CBE08320F59009CE95E8F8A6">
                            <name>Push</name>
                            <overloads>
                                <overload id="member_function_Push_Stack_T_7FE745DAE276481269A52B5F6638B9B70A8BC7F2">
                                    <name>Push(T&amp;&amp; item)</name>
                                    <syntax>public inline void Push(T&amp;&amp; item);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>item</name>
                                            <type ref="type.910"/>
                                        </parameter>
                                    </parameters>
                                    <constraint>
                                        T<connector>is</connector>
                                        <concept ref="concept_Movable_67BF70D7114988D4858EF177704CC03346D9240D"/>
                                    </constraint>
                                </overload>
                                <overload id="member_function_Push_Stack_T_134481DEF2CD73C0909451B98001830B30F3418B">
                                    <name>Push(const T&amp; item)</name>
                                    <syntax>public inline void Push(const T&amp; item);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>item</name>
                                            <type ref="type.909"/>
                                        </parameter>
                                    </parameters>
                                    <constraint>
                                        T<connector>is</connector>
                                        <concept ref="concept_Copyable_555DCA16115160D45CEF63A5F50FCD5E29F3D6E2"/>
                                    </constraint>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_Top_1E17725355C7D2E620B554AA52E1DCDE0040CEF5">
                            <name>Top</name>
                            <overloads>
                                <overload id="member_function_Top_Stack_T_B46167AD390BA88770C3BBE2B811DAE7A05F3727">
                                    <name>Top()</name>
                                    <syntax>public nothrow inline T&amp; Top();</syntax>
                                    <returnType ref="type.911"/>
                                </overload>
                                <overload id="member_function_Top_Stack_T_A71F8FEB5AB8D31E66824CE450D19556545391AD">
                                    <name>Top() const</name>
                                    <syntax>public nothrow inline const T&amp; Top() const;</syntax>
                                    <returnType ref="type.909"/>
                                </overload>
                            </overloads>
                        </function>
                    </functions>
                    <typedefs>
                        <typedef id="typedef_ValueType_A21D976A947D1F0EFED9863B1E3AB8592C253FD1">
                            <name>ValueType</name>
                            <syntax>public typedef T ValueType;</syntax>
                            <type ref="1580055"/>
                        </typedef>
                    </typedefs>
                </class>
            </classes>
            <functions>
                <function id="function_ConstructiveCopy_D125FEDA0FD45AFAFDF4628AEDF46C0E3F5A76A1">
                    <name>ConstructiveCopy&lt;ValueType>(ValueType* to, ValueType* from, long count)</name>
                    <syntax>public void ConstructiveCopy&lt;ValueType>(ValueType* to, ValueType* from, long count);</syntax>
                    <templateParameters>
                        <templateParameter id="1579970">
                            <name>ValueType</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>to</name>
                            <type ref="type.1581473"/>
                        </parameter>
                        <parameter>
                            <name>from</name>
                            <type ref="type.1581473"/>
                        </parameter>
                        <parameter>
                            <name>count</name>
                            <type ref="type.1579457"/>
                        </parameter>
                    </parameters>
                    <constraint>
                        <type ref="1579970"/>
                        <connector>is</connector>
                        <concept ref="concept_CopyConstructible_B11BFA55AF39E78A7C14C35837E65D9DD09586C3"/>
                    </constraint>
                </function>
                <function id="function_ConstructiveMove_1DE9DA17029B9BDF65E74C4AED81D62B69E2DF9C">
                    <name>ConstructiveMove&lt;ValueType>(ValueType* to, ValueType* from, long count)</name>
                    <syntax>public void ConstructiveMove&lt;ValueType>(ValueType* to, ValueType* from, long count);</syntax>
                    <templateParameters>
                        <templateParameter id="1579971">
                            <name>ValueType</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>to</name>
                            <type ref="type.1581474"/>
                        </parameter>
                        <parameter>
                            <name>from</name>
                            <type ref="type.1581474"/>
                        </parameter>
                        <parameter>
                            <name>count</name>
                            <type ref="type.1579457"/>
                        </parameter>
                    </parameters>
                    <constraint>
                        <type ref="1579971"/>
                        <connector>is</connector>
                        <concept ref="concept_MoveConstructible_21D36F4E96F5E3072DD6AAB34A26DF5F90FBC262"/>
                    </constraint>
                </function>
                <function id="function_Destroy_B8FEEE4BD5D75D1903AEDEB4F8C8A96B5C48D6AE">
                    <name>Destroy&lt;ValueType>(ValueType* items, long count)</name>
                    <syntax>public nothrow void Destroy&lt;ValueType>(ValueType* items, long count);</syntax>
                    <templateParameters>
                        <templateParameter id="1579972">
                            <name>ValueType</name>
                        </templateParameter>
                    </templateParameters>
                    <parameters>
                        <parameter>
                            <name>items</name>
                            <type ref="type.1581475"/>
                        </parameter>
                        <parameter>
                            <name>count</name>
                            <type ref="type.1579457"/>
                        </parameter>
                    </parameters>
                    <constraint>
                        <type ref="1579972"/>
                        <connector>is</connector>
                        <concept ref="concept_Destructible_0524F34CBA010FC34882287B0116D474909E0966"/>
                    </constraint>
                </function>
                <function id="function_group_GetHashCode_6A3EAD743D91EFDE396FB5407DAE9791C10C8B40">
                    <name>GetHashCode</name>
                    <overloads>
                        <overload id="function_GetHashCode_2D87A2F8263B4A596ABF8139FFE8961B0D9188AF">
                            <name>GetHashCode(char x)</name>
                            <syntax>public nothrow inline ulong GetHashCode(char x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.1579461"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579458"/>
                        </overload>
                        <overload id="function_GetHashCode_363BED13B53DB115783B0A52839031E574568889">
                            <name>GetHashCode(const String&lt;char>&amp; s)</name>
                            <syntax>public nothrow inline ulong GetHashCode(const String&lt;char>&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579458"/>
                        </overload>
                        <overload id="function_GetHashCode_E642288FCFA9B0FFAB5D348247AE34A1EDFAAF65">
                            <name>GetHashCode(const String&lt;uchar>&amp; s)</name>
                            <syntax>public nothrow inline ulong GetHashCode(const String&lt;uchar>&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1580383"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579458"/>
                        </overload>
                        <overload id="function_GetHashCode_A25F0A07D73FBA0B4BDB655E6ED340AC0CE9B25D">
                            <name>GetHashCode(const String&lt;wchar>&amp; s)</name>
                            <syntax>public nothrow inline ulong GetHashCode(const String&lt;wchar>&amp; s);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1580339"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579458"/>
                        </overload>
                        <overload id="function_GetHashCode_823BCCBA357DC5DC7439E8DBEEF7A15ECAF5E0F9">
                            <name>GetHashCode(long x)</name>
                            <syntax>public nothrow inline ulong GetHashCode(long x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.1579457"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579458"/>
                        </overload>
                        <overload id="function_GetHashCode_5DF5A874705347223DBC04694D84F9ED4BFC9563">
                            <name>GetHashCode(uchar x)</name>
                            <syntax>public nothrow inline ulong GetHashCode(uchar x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.1579463"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579458"/>
                        </overload>
                        <overload id="function_GetHashCode_110A2447AB69E8F2945AC7DA0B4BDC8087AF3133">
                            <name>GetHashCode(ulong x)</name>
                            <syntax>public nothrow inline ulong GetHashCode(ulong x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.1579458"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579458"/>
                        </overload>
                        <overload id="function_GetHashCode_67F2D2345E8E541A5BDE1B8FBA6A8531D8DE09F0">
                            <name>GetHashCode(void* x)</name>
                            <syntax>public nothrow inline ulong GetHashCode(void* x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.1579513"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579458"/>
                        </overload>
                        <overload id="function_GetHashCode_37F6F4B88F339CF82DA5686F27B4D401AD73A05C">
                            <name>GetHashCode(wchar x)</name>
                            <syntax>public nothrow inline ulong GetHashCode(wchar x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.1579462"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579458"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_op_less_3B3B14DF26BAB19CB4A9E45AE2BA7495E75DB862">
                    <name>operator&lt;</name>
                    <overloads>
                        <overload id="function_op_less_DE4F3F07DCE1B749E2F51EB9A43EF56104A36AEF">
                            <name>operator&lt;&lt;T, C>(const Set&lt;T, C>&amp; left, const Set&lt;T, C>&amp; right)</name>
                            <syntax>public nothrow inline bool operator&lt;&lt;T, C>(const Set&lt;T, C>&amp; left, const Set&lt;T, C>&amp; right);</syntax>
                            <templateParameters>
                                <templateParameter id="1580052">
                                    <name>T</name>
                                </templateParameter>
                                <templateParameter id="1580053">
                                    <name>C</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.1581921"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.1581921"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                            <constraint>
                                <type ref="1580052"/>
                                <connector>is</connector>
                                <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                                <connector>and</connector>
                                <type ref="1580053"/>
                                <connector>is</connector>
                                <concept ref="concept_Relation_EA6D5281439518EB11DD9152636FEB86745EE746"/>
                                <connector>and</connector>
                                <type ref="1580053"/>
                                <dot>Domain</dot>
                                <connector>is</connector>
                                <type ref="1580052"/>
                            </constraint>
                        </overload>
                        <overload id="function_op_less_254BE9FF1D0FF7F755FE503607EB7C2B24C6FF24">
                            <name>operator&lt;&lt;T>(const ForwardList&lt;T>&amp; left, const ForwardList&lt;T>&amp; right)</name>
                            <syntax>public bool operator&lt;&lt;T>(const ForwardList&lt;T>&amp; left, const ForwardList&lt;T>&amp; right);</syntax>
                            <templateParameters>
                                <templateParameter id="1579838">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.1580611"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.1580611"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                            <constraint>
                                <type ref="1579838"/>
                                <connector>is</connector>
                                <concept ref="concept_TotallyOrdered_E99156F9F67A4CDD40DFE7EAC64E14E2CF6B24F2"/>
                            </constraint>
                        </overload>
                        <overload id="function_op_less_04E3D9C9667644C0B0DC578EB5A94E8086EE9644">
                            <name>operator&lt;&lt;T>(const LinkedList&lt;T>&amp; left, const LinkedList&lt;T>&amp; right)</name>
                            <syntax>public nothrow bool operator&lt;&lt;T>(const LinkedList&lt;T>&amp; left, const LinkedList&lt;T>&amp; right);</syntax>
                            <templateParameters>
                                <templateParameter id="1579965">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.1581396"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.1581396"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                            <constraint>
                                <type ref="1579965"/>
                                <connector>is</connector>
                                <concept ref="concept_TotallyOrdered_E99156F9F67A4CDD40DFE7EAC64E14E2CF6B24F2"/>
                            </constraint>
                        </overload>
                        <overload id="function_op_less_9BAFA134353624FC2137DB85125A7695CAD81F8D">
                            <name>operator&lt;&lt;T>(const List&lt;T>&amp; left, const List&lt;T>&amp; right)</name>
                            <syntax>public nothrow bool operator&lt;&lt;T>(const List&lt;T>&amp; left, const List&lt;T>&amp; right);</syntax>
                            <templateParameters>
                                <templateParameter id="1579969">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.1581470"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.1581470"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                            <constraint>
                                <type ref="1579969"/>
                                <connector>is</connector>
                                <concept ref="concept_TotallyOrdered_E99156F9F67A4CDD40DFE7EAC64E14E2CF6B24F2"/>
                            </constraint>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_op_eq_0CB716962D945B7B007B1D8F281B78B20FFD18F5">
                    <name>operator==</name>
                    <overloads>
                        <overload id="function_op_eq_22BE8582CCDD5D909372721572F0C2A9625ABC9B">
                            <name>operator==(Color left, Color right)</name>
                            <syntax>public bool operator==(Color left, Color right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="1580028"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="1580028"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </overload>
                        <overload id="function_op_eq_49EA0787A7B4487C22C67AB4273F8DB5FEC8CF3A">
                            <name>operator==(const Bitset&amp; left, const Bitset&amp; right)</name>
                            <syntax>public bool operator==(const Bitset&amp; left, const Bitset&amp; right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.1580409"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.1580409"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </overload>
                        <overload id="function_op_eq_363C0049769C6915B44AF26FA21C80AFABAB9501">
                            <name>operator==&lt;K, T, H, C>(const HashMap&lt;K, T, H, C>&amp; left, const HashMap&lt;K, T, H, C>&amp; right)</name>
                            <syntax>public nothrow bool operator==&lt;K, T, H, C>(const HashMap&lt;K, T, H, C>&amp; left, const HashMap&lt;K, T, H, C>&amp; right);</syntax>
                            <templateParameters>
                                <templateParameter id="1579922">
                                    <name>K</name>
                                </templateParameter>
                                <templateParameter id="1579923">
                                    <name>T</name>
                                </templateParameter>
                                <templateParameter id="1579924">
                                    <name>H</name>
                                </templateParameter>
                                <templateParameter id="1579925">
                                    <name>C</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.1581021"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.1581021"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                            <constraint>
                                <type ref="1579922"/>
                                <connector>is</connector>
                                <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                                <connector>and</connector>
                                <type ref="1579923"/>
                                <connector>is</connector>
                                <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                                <connector>and</connector>
                                <concept ref="concept_HashFunction_996DE63476FF956BFF568F751960AF2CB4A097A8">
                                    <params>
                                        <type ref="1579924"/>
                                        <type ref="1579922"/>
                                    </params>
                                </concept>
                                <connector>and</connector>
                                <type ref="1579925"/>
                                <connector>is</connector>
                                <concept ref="concept_Relation_EA6D5281439518EB11DD9152636FEB86745EE746"/>
                                <connector>and</connector>
                                <type ref="1579925"/>
                                <dot>Domain</dot>
                                <connector>is</connector>
                                <type ref="1579922"/>
                            </constraint>
                        </overload>
                        <overload id="function_op_eq_BD900D1922F9364CF66BBDA2DEA6D285621A320D">
                            <name>operator==&lt;T, C>(const Set&lt;T, C>&amp; left, const Set&lt;T, C>&amp; right)</name>
                            <syntax>public nothrow inline bool operator==&lt;T, C>(const Set&lt;T, C>&amp; left, const Set&lt;T, C>&amp; right);</syntax>
                            <templateParameters>
                                <templateParameter id="1580050">
                                    <name>T</name>
                                </templateParameter>
                                <templateParameter id="1580051">
                                    <name>C</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.1581871"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.1581871"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                            <constraint>
                                <type ref="1580050"/>
                                <connector>is</connector>
                                <concept ref="concept_Regular_A56EC84F9A51535281FA2B6B074E90F9B3BBCCC1"/>
                                <connector>and</connector>
                                <type ref="1580051"/>
                                <connector>is</connector>
                                <concept ref="concept_Relation_EA6D5281439518EB11DD9152636FEB86745EE746"/>
                                <connector>and</connector>
                                <type ref="1580051"/>
                                <dot>Domain</dot>
                                <connector>is</connector>
                                <type ref="1580050"/>
                            </constraint>
                        </overload>
                        <overload id="function_op_eq_ED3F6D43EDC7DAA89243EAF7A3AEB4720BD442B9">
                            <name>operator==&lt;T, H, C>(const HashSet&lt;T, H, C>&amp; left, const HashSet&lt;T, H, C>&amp; right)</name>
                            <syntax>public nothrow bool operator==&lt;T, H, C>(const HashSet&lt;T, H, C>&amp; left, const HashSet&lt;T, H, C>&amp; right);</syntax>
                            <templateParameters>
                                <templateParameter id="1579930">
                                    <name>T</name>
                                </templateParameter>
                                <templateParameter id="1579931">
                                    <name>H</name>
                                </templateParameter>
                                <templateParameter id="1579932">
                                    <name>C</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.1581148"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.1581148"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                            <constraint>
                                <type ref="1579930"/>
                                <connector>is</connector>
                                <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                                <connector>and</connector>
                                <concept ref="concept_HashFunction_996DE63476FF956BFF568F751960AF2CB4A097A8">
                                    <params>
                                        <type ref="1579931"/>
                                        <type ref="1579930"/>
                                    </params>
                                </concept>
                                <connector>and</connector>
                                <type ref="1579932"/>
                                <connector>is</connector>
                                <concept ref="concept_Relation_EA6D5281439518EB11DD9152636FEB86745EE746"/>
                                <connector>and</connector>
                                <type ref="1579932"/>
                                <dot>Domain</dot>
                                <connector>is</connector>
                                <type ref="1579930"/>
                            </constraint>
                        </overload>
                        <overload id="function_op_eq_AD135B06B3FB5147833A16D6B9CFCF15DEC11D4C">
                            <name>operator==&lt;T, R, P, H>(const HashtableIterator&lt;T, R, P, H>&amp; left, const HashtableIterator&lt;T, R, P, H>&amp; right)</name>
                            <syntax>public nothrow bool operator==&lt;T, R, P, H>(const HashtableIterator&lt;T, R, P, H>&amp; left, const HashtableIterator&lt;T, R, P, H>&amp; right);</syntax>
                            <templateParameters>
                                <templateParameter id="1579943">
                                    <name>T</name>
                                </templateParameter>
                                <templateParameter id="1579944">
                                    <name>R</name>
                                </templateParameter>
                                <templateParameter id="1579945">
                                    <name>P</name>
                                </templateParameter>
                                <templateParameter id="1579946">
                                    <name>H</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.1581206"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.1581206"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </overload>
                        <overload id="function_op_eq_9BAC8622080700AD37365C56A9921475685CC38A">
                            <name>operator==&lt;T, R, P>(const ForwardListNodeIterator&lt;T, R, P>&amp; left, const ForwardListNodeIterator&lt;T, R, P>&amp; right)</name>
                            <syntax>public nothrow inline bool operator==&lt;T, R, P>(const ForwardListNodeIterator&lt;T, R, P>&amp; left, const ForwardListNodeIterator&lt;T, R, P>&amp; right);</syntax>
                            <templateParameters>
                                <templateParameter id="1579832">
                                    <name>T</name>
                                </templateParameter>
                                <templateParameter id="1579833">
                                    <name>R</name>
                                </templateParameter>
                                <templateParameter id="1579834">
                                    <name>P</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.1580526"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.1580526"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </overload>
                        <overload id="function_op_eq_06F74A6942361CF32F8012C3AE8BCFDFD3F67654">
                            <name>operator==&lt;T, R, P>(const LinkedListNodeIterator&lt;T, R, P>&amp; left, const LinkedListNodeIterator&lt;T, R, P>&amp; right)</name>
                            <syntax>public nothrow inline bool operator==&lt;T, R, P>(const LinkedListNodeIterator&lt;T, R, P>&amp; left, const LinkedListNodeIterator&lt;T, R, P>&amp; right);</syntax>
                            <templateParameters>
                                <templateParameter id="1579959">
                                    <name>T</name>
                                </templateParameter>
                                <templateParameter id="1579960">
                                    <name>R</name>
                                </templateParameter>
                                <templateParameter id="1579961">
                                    <name>P</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.1581325"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.1581325"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </overload>
                        <overload id="function_op_eq_63109ACFA83E79952D29987C16DBD3C789863038">
                            <name>operator==&lt;T, R, P>(const RedBlackTreeNodeIterator&lt;T, R, P>&amp; left, const RedBlackTreeNodeIterator&lt;T, R, P>&amp; right)</name>
                            <syntax>public nothrow inline bool operator==&lt;T, R, P>(const RedBlackTreeNodeIterator&lt;T, R, P>&amp; left, const RedBlackTreeNodeIterator&lt;T, R, P>&amp; right);</syntax>
                            <templateParameters>
                                <templateParameter id="1580038">
                                    <name>T</name>
                                </templateParameter>
                                <templateParameter id="1580039">
                                    <name>R</name>
                                </templateParameter>
                                <templateParameter id="1580040">
                                    <name>P</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.1581729"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.1581729"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </overload>
                        <overload id="function_op_eq_64F9AFAFCAC8D9B47C6A9B9D8677DEB40A6B66D1">
                            <name>operator==&lt;T>(const ForwardList&lt;T>&amp; left, const ForwardList&lt;T>&amp; right)</name>
                            <syntax>public bool operator==&lt;T>(const ForwardList&lt;T>&amp; left, const ForwardList&lt;T>&amp; right);</syntax>
                            <templateParameters>
                                <templateParameter id="1579837">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.1580583"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.1580583"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                            <constraint>
                                <type ref="1579837"/>
                                <connector>is</connector>
                                <concept ref="concept_Regular_A56EC84F9A51535281FA2B6B074E90F9B3BBCCC1"/>
                            </constraint>
                        </overload>
                        <overload id="function_op_eq_1099B8C5E9BF92E61D7940208A3C36D0585736BF">
                            <name>operator==&lt;T>(const LinkedList&lt;T>&amp; left, const LinkedList&lt;T>&amp; right)</name>
                            <syntax>public nothrow bool operator==&lt;T>(const LinkedList&lt;T>&amp; left, const LinkedList&lt;T>&amp; right);</syntax>
                            <templateParameters>
                                <templateParameter id="1579964">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.1581372"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.1581372"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                            <constraint>
                                <type ref="1579964"/>
                                <connector>is</connector>
                                <concept ref="concept_Regular_A56EC84F9A51535281FA2B6B074E90F9B3BBCCC1"/>
                            </constraint>
                        </overload>
                        <overload id="function_op_eq_B459AB3FC4249EBD8DF64B979B2C71E9FE53FB83">
                            <name>operator==&lt;T>(const List&lt;T>&amp; left, const List&lt;T>&amp; right)</name>
                            <syntax>public nothrow bool operator==&lt;T>(const List&lt;T>&amp; left, const List&lt;T>&amp; right);</syntax>
                            <templateParameters>
                                <templateParameter id="1579968">
                                    <name>T</name>
                                </templateParameter>
                            </templateParameters>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="type.1581445"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="type.1581445"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                            <constraint>
                                <type ref="1579968"/>
                                <connector>is</connector>
                                <concept ref="concept_Regular_A56EC84F9A51535281FA2B6B074E90F9B3BBCCC1"/>
                            </constraint>
                        </overload>
                    </overloads>
                </function>
            </functions>
        </namespace>
        <namespace id="System.Concepts">
            <name>System.Concepts</name>
            <concepts>
                <concept id="concept_AdditiveGroup_F97CD80E909011A4ADD1F7D285678312B63559D8">
                    <name>AdditiveGroup&lt;T></name>
                    <groupName>AdditiveGroup</groupName>
                    <syntax>public concept AdditiveGroup&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579778">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_AdditiveMonoid_8D82C7092F575679F72B0CA8C2989C67C1966F37"/>
                    <constraints>
                        <constraint>operator-(T)</constraint>
                        <constraint>operator-(T, T)</constraint>
                    </constraints>
                    <axioms>
                        <axiom>
                            <name>unaryMinusIsInverseOp(a)</name>
                            <axiomStatements>
                                <axiomStatement>a + (-a) == 0 &amp;&amp; (-a) + a == 0;</axiomStatement>
                            </axiomStatements>
                        </axiom>
                        <axiom>
                            <name>subtract(a, b)</name>
                            <axiomStatements>
                                <axiomStatement>a - b == a + (-b);</axiomStatement>
                            </axiomStatements>
                        </axiom>
                    </axioms>
                </concept>
                <concept id="concept_AdditiveMonoid_8D82C7092F575679F72B0CA8C2989C67C1966F37">
                    <name>AdditiveMonoid&lt;T></name>
                    <groupName>AdditiveMonoid</groupName>
                    <syntax>public concept AdditiveMonoid&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579774">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_AdditiveSemigroup_A6AEA5AA906561975AEB0E030818D6AB2DFEE63A"/>
                    <constraints>
                        <constraint>
                            <concept ref="concept_ConversionFromSByte_A10776EEE4D79E1683CD6134446F23BF3CC9B5CA">
                                <params>
                                    <type ref="1579774"/>
                                </params>
                            </concept>
                            <connector>or</connector>
                            <concept ref="concept_ConversionFromByte_96924ABA4FA755E56F657E9BBC15C4233F878D12">
                                <params>
                                    <type ref="1579774"/>
                                </params>
                            </concept>
                        </constraint>
                    </constraints>
                    <axioms>
                        <axiom>
                            <name>zeroIsIdentityElement(a)</name>
                            <axiomStatements>
                                <axiomStatement>a + 0 == a &amp;&amp; 0 + a == a;</axiomStatement>
                            </axiomStatements>
                        </axiom>
                    </axioms>
                </concept>
                <concept id="concept_AdditiveSemigroup_A6AEA5AA906561975AEB0E030818D6AB2DFEE63A">
                    <name>AdditiveSemigroup&lt;T></name>
                    <groupName>AdditiveSemigroup</groupName>
                    <syntax>public concept AdditiveSemigroup&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579762">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constraints>
                        <constraint>
                            <type ref="1579762"/>
                            <connector>is</connector>
                            <concept ref="concept_Regular_A56EC84F9A51535281FA2B6B074E90F9B3BBCCC1"/>
                        </constraint>
                        <constraint>operator+(T, T)</constraint>
                    </constraints>
                    <axioms>
                        <axiom>
                            <name>additionIsAssociative(a, b, c)</name>
                            <axiomStatements>
                                <axiomStatement>(a + b) + c == a + (b + c);</axiomStatement>
                            </axiomStatements>
                        </axiom>
                        <axiom>
                            <name>additionIsCommutative(a, b)</name>
                            <axiomStatements>
                                <axiomStatement>a + b == b + a;</axiomStatement>
                            </axiomStatements>
                        </axiom>
                    </axioms>
                </concept>
                <concept id="concept_BackInsertionSequence_5885D2D8DDEC40D462924E37DCE754A8F36B52C2">
                    <name>BackInsertionSequence&lt;T></name>
                    <groupName>BackInsertionSequence</groupName>
                    <syntax>public concept BackInsertionSequence&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579744">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_Container_0A128B13B9494DFD21086D34DFB070EAA26D473A"/>
                    <constraints>
                        <constraint>T.Add(T.ValueType)</constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_BidirectionalContainer_05A591605B349EDF6FDA457C4C7B21759F8E2BC7">
                    <name>BidirectionalContainer&lt;T></name>
                    <groupName>BidirectionalContainer</groupName>
                    <syntax>public concept BidirectionalContainer&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579752">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_ForwardContainer_98A0A5CEE1E1C33CCABCFC2F31BF6EE7C21229F2"/>
                    <constraints>
                        <constraint>
                            <type ref="1579752"/>
                            <dot>Iterator</dot>
                            <connector>is</connector>
                            <concept ref="concept_BidirectionalIterator_96C10B73881A17B6DC9C0804E7DF2141C2E58DA6"/>
                            <connector>and</connector>
                            <type ref="1579752"/>
                            <dot>ConstIterator</dot>
                            <connector>is</connector>
                            <concept ref="concept_BidirectionalIterator_96C10B73881A17B6DC9C0804E7DF2141C2E58DA6"/>
                        </constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_BidirectionalIterator_96C10B73881A17B6DC9C0804E7DF2141C2E58DA6">
                    <name>BidirectionalIterator&lt;T></name>
                    <groupName>BidirectionalIterator</groupName>
                    <syntax>public concept BidirectionalIterator&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579713">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_ForwardIterator_4C777D423CF589B8535F29F910C025990ED656D4"/>
                    <constraints>
                        <constraint>operator--()</constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_BinaryFunction_7F3A6EF707F08A997487EC3748D74CC2156DB250">
                    <name>BinaryFunction&lt;T></name>
                    <groupName>BinaryFunction</groupName>
                    <syntax>public concept BinaryFunction&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579719">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constraints>
                        <constraint>
                            <type ref="1579719"/>
                            <connector>is</connector>
                            <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                        </constraint>
                        <constraint>
                            <span class="kw">typename</span>
                             T.FirstArgumentType</constraint>
                        <constraint>
                            <span class="kw">typename</span>
                             T.SecondArgumentType</constraint>
                        <constraint>
                            <span class="kw">typename</span>
                             T.ResultType</constraint>
                        <constraint>
                            <type ref="1579719"/>
                            <dot>FirstArgumentType</dot>
                            <connector>is</connector>
                            <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                            <connector>and</connector>
                            <type ref="1579719"/>
                            <dot>SecondArgumentType</dot>
                            <connector>is</connector>
                            <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                        </constraint>
                        <constraint>operator()(T.FirstArgumentType, T.SecondArgumentType)</constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_BinaryOperation_E7FA71F85EB4750A92189AC872008306AEFD4D01">
                    <name>BinaryOperation&lt;T></name>
                    <groupName>BinaryOperation</groupName>
                    <syntax>public concept BinaryOperation&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579733">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_BinaryFunction_7F3A6EF707F08A997487EC3748D74CC2156DB250"/>
                    <constraints>
                        <constraint>
                            <type ref="1579733"/>
                            <dot>ResultType</dot>
                            <connector>is</connector>
                            <type ref="1579733"/>
                            <dot>FirstArgumentType</dot>
                        </constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_BinaryPredicate_47B7E65D192BA156398E605E540F0BEF2A7473D7">
                    <name>BinaryPredicate&lt;T></name>
                    <groupName>BinaryPredicate</groupName>
                    <syntax>public concept BinaryPredicate&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579723">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_BinaryFunction_7F3A6EF707F08A997487EC3748D74CC2156DB250"/>
                    <constraints>
                        <constraint>
                            <type ref="1579723"/>
                            <dot>ResultType</dot>
                            <connector>is</connector>
                            <type ref="type.1579450"/>
                        </constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_Common_1761C757BC631D15B26D64D830742878B5E7D7F6">
                    <name>Common&lt;T, U></name>
                    <groupName>Common</groupName>
                    <syntax>public concept Common&lt;T, U>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579507">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="1579508">
                            <name>U</name>
                        </templateParameter>
                    </templateParameters>
                    <constraints>
                        <constraint/>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_CommutativeSemiring_18E75B9E6166AB10C73B79D7CBB58DC075B0B5E0">
                    <name>CommutativeSemiring&lt;T></name>
                    <groupName>CommutativeSemiring</groupName>
                    <syntax>public concept CommutativeSemiring&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579788">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_Semiring_4F0D08D0EFBCF87C6267476FBB2CA9239568FA20"/>
                    <constraints/>
                    <axioms>
                        <axiom>
                            <name>multiplicationIsCommutative(a, b)</name>
                            <axiomStatements>
                                <axiomStatement>a * b == b * a;</axiomStatement>
                            </axiomStatements>
                        </axiom>
                    </axioms>
                </concept>
                <concept id="concept_Container_0A128B13B9494DFD21086D34DFB070EAA26D473A">
                    <name>Container&lt;T></name>
                    <groupName>Container</groupName>
                    <syntax>public concept Container&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579742">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constraints>
                        <constraint>
                            <type ref="1579742"/>
                            <connector>is</connector>
                            <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                        </constraint>
                        <constraint>
                            <span class="kw">typename</span>
                             T.ValueType</constraint>
                        <constraint>
                            <span class="kw">typename</span>
                             T.Iterator</constraint>
                        <constraint>
                            <span class="kw">typename</span>
                             T.ConstIterator</constraint>
                        <constraint>
                            <type ref="1579742"/>
                            <dot>Iterator</dot>
                            <connector>is</connector>
                            <concept ref="concept_TrivialIterator_63C9CBDE8700FA0C9E6E0CA6C6C65B5DA24A13E5"/>
                            <connector>and</connector>
                            <type ref="1579742"/>
                            <dot>ConstIterator</dot>
                            <connector>is</connector>
                            <concept ref="concept_TrivialIterator_63C9CBDE8700FA0C9E6E0CA6C6C65B5DA24A13E5"/>
                            <connector>and</connector>
                            <type ref="1579742"/>
                            <dot>ValueType</dot>
                            <connector>is</connector>
                            <type ref="1579742"/>
                            <dot>Iterator</dot>
                            <dot>ValueType</dot>
                        </constraint>
                        <constraint>T.Begin()</constraint>
                        <constraint>T.CBegin()</constraint>
                        <constraint>T.End()</constraint>
                        <constraint>T.CEnd()</constraint>
                        <constraint>T.Count()</constraint>
                        <constraint>T.IsEmpty()</constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_ConversionFromByte_96924ABA4FA755E56F657E9BBC15C4233F878D12">
                    <name>ConversionFromByte&lt;T></name>
                    <groupName>ConversionFromByte</groupName>
                    <syntax>public concept ConversionFromByte&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579772">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constraints>
                        <constraint>T(byte)</constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_ConversionFromSByte_A10776EEE4D79E1683CD6134446F23BF3CC9B5CA">
                    <name>ConversionFromSByte&lt;T></name>
                    <groupName>ConversionFromSByte</groupName>
                    <syntax>public concept ConversionFromSByte&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579770">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constraints>
                        <constraint>T(sbyte)</constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_CopyAssignable_C698EC74F187E27A402BB382B7AC4F26FE50056C">
                    <name>CopyAssignable&lt;T, U></name>
                    <groupName>CopyAssignable</groupName>
                    <syntax>public concept CopyAssignable&lt;T, U>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579677">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="1579678">
                            <name>U</name>
                        </templateParameter>
                    </templateParameters>
                    <constraints>
                        <constraint>operator=(const U&amp;)</constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_CopyAssignable_FCF76B354EA6D2AA36EA34E36E53CB00E98C1BF6">
                    <name>CopyAssignable&lt;T></name>
                    <groupName>CopyAssignable</groupName>
                    <syntax>public concept CopyAssignable&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579675">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constraints>
                        <constraint>operator=(const T&amp;)</constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_CopyConstructible_B11BFA55AF39E78A7C14C35837E65D9DD09586C3">
                    <name>CopyConstructible&lt;T></name>
                    <groupName>CopyConstructible</groupName>
                    <syntax>public concept CopyConstructible&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579669">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constraints>
                        <constraint>T(const T&amp;)</constraint>
                    </constraints>
                    <axioms>
                        <axiom>
                            <name>copyIsEqual(a)</name>
                            <axiomStatements>
                                <axiomStatement>eq(T(a), a);</axiomStatement>
                            </axiomStatements>
                        </axiom>
                    </axioms>
                </concept>
                <concept id="concept_Copyable_555DCA16115160D45CEF63A5F50FCD5E29F3D6E2">
                    <name>Copyable&lt;T></name>
                    <groupName>Copyable</groupName>
                    <syntax>public concept Copyable&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579682">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constraints>
                        <constraint>
                            <type ref="1579682"/>
                            <connector>is</connector>
                            <concept ref="concept_CopyConstructible_B11BFA55AF39E78A7C14C35837E65D9DD09586C3"/>
                            <connector>and</connector>
                            <type ref="1579682"/>
                            <connector>is</connector>
                            <concept ref="concept_CopyAssignable_FCF76B354EA6D2AA36EA34E36E53CB00E98C1BF6"/>
                        </constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_DefaultConstructible_928F89FC5607554E7244359D8FE40432C96E53DC">
                    <name>DefaultConstructible&lt;T></name>
                    <groupName>DefaultConstructible</groupName>
                    <syntax>public concept DefaultConstructible&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579667">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constraints>
                        <constraint>T()</constraint>
                        <constraint>
                            NonreferenceType<concept name="NonreferenceType">
                                <params>
                                    <type ref="1579667"/>
                                </params>
                            </concept>
                        </constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_Destructible_0524F34CBA010FC34882287B0116D474909E0966">
                    <name>Destructible&lt;T></name>
                    <groupName>Destructible</groupName>
                    <syntax>public concept Destructible&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579673">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constraints>
                        <constraint>~T()</constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_EqualityComparable_DDA76B65E48DE418ED1651912DC91E6BCF9A6B60">
                    <name>EqualityComparable&lt;T, U></name>
                    <groupName>EqualityComparable</groupName>
                    <syntax>public concept EqualityComparable&lt;T, U>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579690">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="1579691">
                            <name>U</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_Common_1761C757BC631D15B26D64D830742878B5E7D7F6"/>
                    <constraints>
                        <constraint>
                            <type ref="1579690"/>
                            <connector>is</connector>
                            <concept ref="concept_EqualityComparable_CBC8491006C76A67817EB0837FEB706E443E77B6"/>
                            <connector>and</connector>
                            <type ref="1579691"/>
                            <connector>is</connector>
                            <concept ref="concept_EqualityComparable_CBC8491006C76A67817EB0837FEB706E443E77B6"/>
                            <connector>and</connector>
                            CommonType<connector>is</connector>
                            <concept ref="concept_EqualityComparable_CBC8491006C76A67817EB0837FEB706E443E77B6"/>
                        </constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_EqualityComparable_CBC8491006C76A67817EB0837FEB706E443E77B6">
                    <name>EqualityComparable&lt;T></name>
                    <groupName>EqualityComparable</groupName>
                    <syntax>public concept EqualityComparable&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579688">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constraints>
                        <constraint>operator==(T, T)</constraint>
                    </constraints>
                    <axioms>
                        <axiom>
                            <name>equal(a, b)</name>
                            <axiomStatements>
                                <axiomStatement>a == b &lt;=> eq(a, b);</axiomStatement>
                            </axiomStatements>
                        </axiom>
                        <axiom>
                            <name>reflexive(a)</name>
                            <axiomStatements>
                                <axiomStatement>a == a;</axiomStatement>
                            </axiomStatements>
                        </axiom>
                        <axiom>
                            <name>symmetric(a, b)</name>
                            <axiomStatements>
                                <axiomStatement>a == b => b == a;</axiomStatement>
                            </axiomStatements>
                        </axiom>
                        <axiom>
                            <name>transitive(a, b, c)</name>
                            <axiomStatements>
                                <axiomStatement>a == b &amp;&amp; b == c => a == c;</axiomStatement>
                            </axiomStatements>
                        </axiom>
                        <axiom>
                            <name>notEqualTo(a, b)</name>
                            <axiomStatements>
                                <axiomStatement>a != b &lt;=> !(a == b);</axiomStatement>
                            </axiomStatements>
                        </axiom>
                    </axioms>
                </concept>
                <concept id="concept_EuclideanSemiring_0963A0023F004A1F3DA33F82504C5F5A55402241">
                    <name>EuclideanSemiring&lt;T></name>
                    <groupName>EuclideanSemiring</groupName>
                    <syntax>public concept EuclideanSemiring&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579790">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_CommutativeSemiring_18E75B9E6166AB10C73B79D7CBB58DC075B0B5E0"/>
                    <constraints>
                        <constraint>operator%(T, T)</constraint>
                        <constraint>operator/(T, T)</constraint>
                    </constraints>
                    <axioms>
                        <axiom>
                            <name>quotientAndRemainder(a, b)</name>
                            <axiomStatements>
                                <axiomStatement>b != 0 => a == a / b * b + a % b;</axiomStatement>
                            </axiomStatements>
                        </axiom>
                    </axioms>
                </concept>
                <concept id="concept_ForwardContainer_98A0A5CEE1E1C33CCABCFC2F31BF6EE7C21229F2">
                    <name>ForwardContainer&lt;T></name>
                    <groupName>ForwardContainer</groupName>
                    <syntax>public concept ForwardContainer&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579748">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_Container_0A128B13B9494DFD21086D34DFB070EAA26D473A"/>
                    <constraints>
                        <constraint>
                            <type ref="1579748"/>
                            <dot>Iterator</dot>
                            <connector>is</connector>
                            <concept ref="concept_ForwardIterator_4C777D423CF589B8535F29F910C025990ED656D4"/>
                            <connector>and</connector>
                            <type ref="1579748"/>
                            <dot>ConstIterator</dot>
                            <connector>is</connector>
                            <concept ref="concept_ForwardIterator_4C777D423CF589B8535F29F910C025990ED656D4"/>
                        </constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_ForwardIterator_4C777D423CF589B8535F29F910C025990ED656D4">
                    <name>ForwardIterator&lt;T></name>
                    <groupName>ForwardIterator</groupName>
                    <syntax>public concept ForwardIterator&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579711">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_InputIterator_BC46FC10D5EBF285BDF3232BD222C09235D06406"/>
                    <constraints>
                        <constraint>
                            <type ref="1579711"/>
                            <connector>is</connector>
                            <concept ref="concept_OutputIterator_A454885B47A3648BC107033D34E4A3F5AF8202EC"/>
                        </constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_FrontInsertionSequence_6E92B081B326D22C296036E5DDC43365491BEBF4">
                    <name>FrontInsertionSequence&lt;T></name>
                    <groupName>FrontInsertionSequence</groupName>
                    <syntax>public concept FrontInsertionSequence&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579746">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_Container_0A128B13B9494DFD21086D34DFB070EAA26D473A"/>
                    <constraints>
                        <constraint>T.InsertFront(T.ValueType)</constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_HashFunction_996DE63476FF956BFF568F751960AF2CB4A097A8">
                    <name>HashFunction&lt;T, Key></name>
                    <groupName>HashFunction</groupName>
                    <syntax>public concept HashFunction&lt;T, Key>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579735">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="1579736">
                            <name>Key</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_UnaryFunction_DDD936ABC21BA268C3B3C9F4820F5DFE1ACAA344"/>
                    <constraints>
                        <constraint>
                            <type ref="1579735"/>
                            <dot>ArgumentType</dot>
                            <connector>is</connector>
                            <type ref="1579736"/>
                            <connector>and</connector>
                            <type ref="1579735"/>
                            <dot>ResultType</dot>
                            <connector>is</connector>
                            <type ref="type.1579458"/>
                        </constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_InputIterator_BC46FC10D5EBF285BDF3232BD222C09235D06406">
                    <name>InputIterator&lt;T></name>
                    <groupName>InputIterator</groupName>
                    <syntax>public concept InputIterator&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579709">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_TrivialIterator_63C9CBDE8700FA0C9E6E0CA6C6C65B5DA24A13E5"/>
                    <constraints>
                        <constraint>operator++()</constraint>
                        <constraint>
                            <type ref="1579709"/>
                            <connector>is</connector>
                            <concept ref="concept_Regular_A56EC84F9A51535281FA2B6B074E90F9B3BBCCC1"/>
                        </constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_InsertionSequence_5D1868A305E1B5BDA144AAB9338B802BCE110BE6">
                    <name>InsertionSequence&lt;T></name>
                    <groupName>InsertionSequence</groupName>
                    <syntax>public concept InsertionSequence&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579750">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_ForwardContainer_98A0A5CEE1E1C33CCABCFC2F31BF6EE7C21229F2"/>
                    <constraints>
                        <constraint>T.Insert(T.Iterator, T.ValueType)</constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_Integer_FCDB80A4361DAD68848DDECFDCE105F2560B0B0A">
                    <name>Integer&lt;I></name>
                    <groupName>Integer</groupName>
                    <syntax>public concept Integer&lt;I>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579756">
                            <name>I</name>
                        </templateParameter>
                    </templateParameters>
                    <constraints>
                        <constraint>
                            <type ref="1579756"/>
                            <connector>is</connector>
                            <concept ref="concept_TotallyOrdered_E99156F9F67A4CDD40DFE7EAC64E14E2CF6B24F2"/>
                        </constraint>
                        <constraint>operator-(I)</constraint>
                        <constraint>operator~(I)</constraint>
                        <constraint>operator+(I, I)</constraint>
                        <constraint>operator-(I, I)</constraint>
                        <constraint>operator*(I, I)</constraint>
                        <constraint>operator/(I, I)</constraint>
                        <constraint>operator%(I, I)</constraint>
                        <constraint>operator&lt;&lt;(I, I)</constraint>
                        <constraint>operator>>(I, I)</constraint>
                        <constraint>operator&amp;(I, I)</constraint>
                        <constraint>operator|(I, I)</constraint>
                        <constraint>operator^(I, I)</constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_KeySelectionFunction_719538A539328921CB0D528AECE6DCBE1B8C6E19">
                    <name>KeySelectionFunction&lt;T, Key, Value></name>
                    <groupName>KeySelectionFunction</groupName>
                    <syntax>public concept KeySelectionFunction&lt;T, Key, Value>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579738">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="1579739">
                            <name>Key</name>
                        </templateParameter>
                        <templateParameter id="1579740">
                            <name>Value</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_UnaryFunction_DDD936ABC21BA268C3B3C9F4820F5DFE1ACAA344"/>
                    <constraints>
                        <constraint>
                            <type ref="1579738"/>
                            <dot>ArgumentType</dot>
                            <connector>is</connector>
                            <type ref="1579740"/>
                            <connector>and</connector>
                            <type ref="1579738"/>
                            <dot>ResultType</dot>
                            <connector>is</connector>
                            <type ref="1579739"/>
                        </constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_LessThanComparable_1379E4E0FDC9326039B5F717F269D6FD46537B48">
                    <name>LessThanComparable&lt;T, U></name>
                    <groupName>LessThanComparable</groupName>
                    <syntax>public concept LessThanComparable&lt;T, U>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579695">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="1579696">
                            <name>U</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_Common_1761C757BC631D15B26D64D830742878B5E7D7F6"/>
                    <constraints>
                        <constraint>
                            <type ref="1579695"/>
                            <connector>is</connector>
                            <concept ref="concept_LessThanComparable_90ED44B8D61617C1FB8517CD74D7D087E77A0AA5"/>
                            <connector>and</connector>
                            <type ref="1579696"/>
                            <connector>is</connector>
                            <concept ref="concept_LessThanComparable_90ED44B8D61617C1FB8517CD74D7D087E77A0AA5"/>
                            <connector>and</connector>
                            CommonType<connector>is</connector>
                            <concept ref="concept_LessThanComparable_90ED44B8D61617C1FB8517CD74D7D087E77A0AA5"/>
                        </constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_LessThanComparable_90ED44B8D61617C1FB8517CD74D7D087E77A0AA5">
                    <name>LessThanComparable&lt;T></name>
                    <groupName>LessThanComparable</groupName>
                    <syntax>public concept LessThanComparable&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579693">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constraints>
                        <constraint>operator&lt;(T, T)</constraint>
                    </constraints>
                    <axioms>
                        <axiom>
                            <name>irreflexive(a)</name>
                            <axiomStatements>
                                <axiomStatement>!(a &lt; a);</axiomStatement>
                            </axiomStatements>
                        </axiom>
                        <axiom>
                            <name>antisymmetric(a, b)</name>
                            <axiomStatements>
                                <axiomStatement>a &lt; b => !(b &lt; a);</axiomStatement>
                            </axiomStatements>
                        </axiom>
                        <axiom>
                            <name>transitive(a, b, c)</name>
                            <axiomStatements>
                                <axiomStatement>a &lt; b &amp;&amp; b &lt; c => a &lt; c;</axiomStatement>
                            </axiomStatements>
                        </axiom>
                        <axiom>
                            <name>total(a, b)</name>
                            <axiomStatements>
                                <axiomStatement>a &lt; b || a == b || a > b;</axiomStatement>
                            </axiomStatements>
                        </axiom>
                        <axiom>
                            <name>greaterThan(a, b)</name>
                            <axiomStatements>
                                <axiomStatement>a > b &lt;=> b &lt; a;</axiomStatement>
                            </axiomStatements>
                        </axiom>
                        <axiom>
                            <name>greaterThanOrEqualTo(a, b)</name>
                            <axiomStatements>
                                <axiomStatement>a >= b &lt;=> !(a &lt; b);</axiomStatement>
                            </axiomStatements>
                        </axiom>
                        <axiom>
                            <name>lessThanOrEqualTo(a, b)</name>
                            <axiomStatements>
                                <axiomStatement>a &lt;= b &lt;=> !(b &lt; a);</axiomStatement>
                            </axiomStatements>
                        </axiom>
                    </axioms>
                </concept>
                <concept id="concept_Movable_67BF70D7114988D4858EF177704CC03346D9240D">
                    <name>Movable&lt;T></name>
                    <groupName>Movable</groupName>
                    <syntax>public concept Movable&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579684">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constraints>
                        <constraint>
                            <type ref="1579684"/>
                            <connector>is</connector>
                            <concept ref="concept_MoveConstructible_21D36F4E96F5E3072DD6AAB34A26DF5F90FBC262"/>
                            <connector>and</connector>
                            <type ref="1579684"/>
                            <connector>is</connector>
                            <concept ref="concept_MoveAssignable_DF00F01AE5185608C8DBD5AB4BF79B2C07558F59"/>
                        </constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_MoveAssignable_DF00F01AE5185608C8DBD5AB4BF79B2C07558F59">
                    <name>MoveAssignable&lt;T></name>
                    <groupName>MoveAssignable</groupName>
                    <syntax>public concept MoveAssignable&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579680">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constraints>
                        <constraint>operator=(T&amp;&amp;)</constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_MoveConstructible_21D36F4E96F5E3072DD6AAB34A26DF5F90FBC262">
                    <name>MoveConstructible&lt;T></name>
                    <groupName>MoveConstructible</groupName>
                    <syntax>public concept MoveConstructible&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579671">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constraints>
                        <constraint>T(T&amp;&amp;)</constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_MultiplicativeGroup_157A1A41F23EF7E4F09D855F82CBFB2C95135E91">
                    <name>MultiplicativeGroup&lt;T></name>
                    <groupName>MultiplicativeGroup</groupName>
                    <syntax>public concept MultiplicativeGroup&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579780">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_MultiplicativeMonoid_2EC49957FA822229E3BB5F5014BA5E03C5EACC11"/>
                    <constraints>
                        <constraint>operator/(T, T)</constraint>
                    </constraints>
                    <axioms>
                        <axiom>
                            <name>multiplicativeInverseIsInverseOp(a)</name>
                            <axiomStatements>
                                <axiomStatement>a * (1/a) == 1 &amp;&amp; (1/a) * a == 1;</axiomStatement>
                            </axiomStatements>
                        </axiom>
                        <axiom>
                            <name>division(a, b)</name>
                            <axiomStatements>
                                <axiomStatement>a / b == a * (1/b);</axiomStatement>
                            </axiomStatements>
                        </axiom>
                    </axioms>
                </concept>
                <concept id="concept_MultiplicativeMonoid_2EC49957FA822229E3BB5F5014BA5E03C5EACC11">
                    <name>MultiplicativeMonoid&lt;T></name>
                    <groupName>MultiplicativeMonoid</groupName>
                    <syntax>public concept MultiplicativeMonoid&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579776">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_MultiplicativeSemigroup_E0D9C06FDD3386C79EFB595ABA20C0B553593F5B"/>
                    <constraints>
                        <constraint>
                            <concept ref="concept_ConversionFromSByte_A10776EEE4D79E1683CD6134446F23BF3CC9B5CA">
                                <params>
                                    <type ref="1579776"/>
                                </params>
                            </concept>
                            <connector>or</connector>
                            <concept ref="concept_ConversionFromByte_96924ABA4FA755E56F657E9BBC15C4233F878D12">
                                <params>
                                    <type ref="1579776"/>
                                </params>
                            </concept>
                        </constraint>
                    </constraints>
                    <axioms>
                        <axiom>
                            <name>oneIsIdentityElement(a)</name>
                            <axiomStatements>
                                <axiomStatement>a * 1 == a &amp;&amp; 1 * a == a;</axiomStatement>
                            </axiomStatements>
                        </axiom>
                    </axioms>
                </concept>
                <concept id="concept_MultiplicativeSemigroup_E0D9C06FDD3386C79EFB595ABA20C0B553593F5B">
                    <name>MultiplicativeSemigroup&lt;T></name>
                    <groupName>MultiplicativeSemigroup</groupName>
                    <syntax>public concept MultiplicativeSemigroup&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579764">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constraints>
                        <constraint>
                            <type ref="1579764"/>
                            <connector>is</connector>
                            <concept ref="concept_Regular_A56EC84F9A51535281FA2B6B074E90F9B3BBCCC1"/>
                        </constraint>
                        <constraint>operator*(T, T)</constraint>
                    </constraints>
                    <axioms>
                        <axiom>
                            <name>multiplicationIsAssociative(a, b, c)</name>
                            <axiomStatements>
                                <axiomStatement>(a * b) * c == a * (b * c);</axiomStatement>
                            </axiomStatements>
                        </axiom>
                    </axioms>
                </concept>
                <concept id="concept_OrderedAdditiveGroup_816E7DDE277944194F8E6A9829101ABF9F3D1A31">
                    <name>OrderedAdditiveGroup&lt;T></name>
                    <groupName>OrderedAdditiveGroup</groupName>
                    <syntax>public concept OrderedAdditiveGroup&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579784">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_OrderedAdditiveMonoid_222CA37B033DDCCCC9468E66D20F79A23935055A"/>
                    <constraints>
                        <constraint>
                            <type ref="1579784"/>
                            <connector>is</connector>
                            <concept ref="concept_AdditiveGroup_F97CD80E909011A4ADD1F7D285678312B63559D8"/>
                        </constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_OrderedAdditiveMonoid_222CA37B033DDCCCC9468E66D20F79A23935055A">
                    <name>OrderedAdditiveMonoid&lt;T></name>
                    <groupName>OrderedAdditiveMonoid</groupName>
                    <syntax>public concept OrderedAdditiveMonoid&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579782">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_OrderedAdditiveSemigroup_345BFD4A7343FC1E70CA50D3CF7D48A92261F57E"/>
                    <constraints>
                        <constraint>
                            <type ref="1579782"/>
                            <connector>is</connector>
                            <concept ref="concept_AdditiveMonoid_8D82C7092F575679F72B0CA8C2989C67C1966F37"/>
                        </constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_OrderedAdditiveSemigroup_345BFD4A7343FC1E70CA50D3CF7D48A92261F57E">
                    <name>OrderedAdditiveSemigroup&lt;T></name>
                    <groupName>OrderedAdditiveSemigroup</groupName>
                    <syntax>public concept OrderedAdditiveSemigroup&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579766">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_AdditiveSemigroup_A6AEA5AA906561975AEB0E030818D6AB2DFEE63A"/>
                    <constraints>
                        <constraint>
                            <type ref="1579766"/>
                            <connector>is</connector>
                            <concept ref="concept_TotallyOrdered_E99156F9F67A4CDD40DFE7EAC64E14E2CF6B24F2"/>
                        </constraint>
                    </constraints>
                    <axioms>
                        <axiom>
                            <name>additionPreservesOrder(a, b, c)</name>
                            <axiomStatements>
                                <axiomStatement>a &lt; b => a + c &lt; b + c;</axiomStatement>
                            </axiomStatements>
                        </axiom>
                    </axioms>
                </concept>
                <concept id="concept_OrderedMultiplicativeSemigroup_FC830022C42780AE3A7B2B551D66117747F51D2E">
                    <name>OrderedMultiplicativeSemigroup&lt;T></name>
                    <groupName>OrderedMultiplicativeSemigroup</groupName>
                    <syntax>public concept OrderedMultiplicativeSemigroup&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579768">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_MultiplicativeSemigroup_E0D9C06FDD3386C79EFB595ABA20C0B553593F5B"/>
                    <constraints>
                        <constraint>
                            <type ref="1579768"/>
                            <connector>is</connector>
                            <concept ref="concept_TotallyOrdered_E99156F9F67A4CDD40DFE7EAC64E14E2CF6B24F2"/>
                        </constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_OutputIterator_A454885B47A3648BC107033D34E4A3F5AF8202EC">
                    <name>OutputIterator&lt;T></name>
                    <groupName>OutputIterator</groupName>
                    <syntax>public concept OutputIterator&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579707">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_TrivialIterator_63C9CBDE8700FA0C9E6E0CA6C6C65B5DA24A13E5"/>
                    <constraints>
                        <constraint>operator++()</constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_RandomAccessContainer_7D44EBDB629CA332A20056356A52519C0BB1FADF">
                    <name>RandomAccessContainer&lt;T></name>
                    <groupName>RandomAccessContainer</groupName>
                    <syntax>public concept RandomAccessContainer&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579754">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_BidirectionalContainer_05A591605B349EDF6FDA457C4C7B21759F8E2BC7"/>
                    <constraints>
                        <constraint>
                            <type ref="1579754"/>
                            <dot>Iterator</dot>
                            <connector>is</connector>
                            <concept ref="concept_RandomAccessIterator_A5A1B6A4EC8E181A67C733002B3BE437554D3484"/>
                            <connector>and</connector>
                            <type ref="1579754"/>
                            <dot>ConstIterator</dot>
                            <connector>is</connector>
                            <concept ref="concept_RandomAccessIterator_A5A1B6A4EC8E181A67C733002B3BE437554D3484"/>
                        </constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_RandomAccessIterator_A5A1B6A4EC8E181A67C733002B3BE437554D3484">
                    <name>RandomAccessIterator&lt;T></name>
                    <groupName>RandomAccessIterator</groupName>
                    <syntax>public concept RandomAccessIterator&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579715">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_BidirectionalIterator_96C10B73881A17B6DC9C0804E7DF2141C2E58DA6"/>
                    <constraints>
                        <constraint>operator[](int)</constraint>
                        <constraint>operator+(T, int)</constraint>
                        <constraint>operator+(int, T)</constraint>
                        <constraint>operator-(T, int)</constraint>
                        <constraint>operator-(T, T)</constraint>
                        <constraint>
                            <type ref="1579715"/>
                            <connector>is</connector>
                            <concept ref="concept_LessThanComparable_90ED44B8D61617C1FB8517CD74D7D087E77A0AA5"/>
                        </constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_Regular_A56EC84F9A51535281FA2B6B074E90F9B3BBCCC1">
                    <name>Regular&lt;T></name>
                    <groupName>Regular</groupName>
                    <syntax>public concept Regular&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579698">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                    <constraints>
                        <constraint>
                            <type ref="1579698"/>
                            <connector>is</connector>
                            <concept ref="concept_EqualityComparable_CBC8491006C76A67817EB0837FEB706E443E77B6"/>
                        </constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_Relation_34B41129EB756D944983CCCA612EDAA19318537E">
                    <name>Relation&lt;T, U, V></name>
                    <groupName>Relation</groupName>
                    <syntax>public concept Relation&lt;T, U, V>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579727">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="1579728">
                            <name>U</name>
                        </templateParameter>
                        <templateParameter id="1579729">
                            <name>V</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_BinaryPredicate_47B7E65D192BA156398E605E540F0BEF2A7473D7"/>
                    <constraints>
                        <constraint>
                            <type ref="1579727"/>
                            <dot>FirstArgumentType</dot>
                            <connector>is</connector>
                            <type ref="1579728"/>
                            <connector>and</connector>
                            <type ref="1579727"/>
                            <dot>SecondArgumentType</dot>
                            <connector>is</connector>
                            <type ref="1579729"/>
                        </constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_Relation_EA6D5281439518EB11DD9152636FEB86745EE746">
                    <name>Relation&lt;T></name>
                    <groupName>Relation</groupName>
                    <syntax>public concept Relation&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579725">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_BinaryPredicate_47B7E65D192BA156398E605E540F0BEF2A7473D7"/>
                    <constraints>
                        <constraint>
                            <span class="kw">typename</span>
                             T.Domain</constraint>
                        <constraint>
                            Same<concept name="Same">
                                <params>
                                    <type ref="1579725"/>
                                    <dot>Domain</dot>
                                    <type ref="1579725"/>
                                    <dot>FirstArgumentType</dot>
                                </params>
                            </concept>
                            <connector>and</connector>
                            Same<concept name="Same">
                                <params>
                                    <type ref="1579725"/>
                                    <dot>SecondArgumentType</dot>
                                    <type ref="1579725"/>
                                    <dot>Domain</dot>
                                </params>
                            </concept>
                        </constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7">
                    <name>Semiregular&lt;T></name>
                    <groupName>Semiregular</groupName>
                    <syntax>public concept Semiregular&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579686">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constraints>
                        <constraint>
                            <type ref="1579686"/>
                            <connector>is</connector>
                            <concept ref="concept_DefaultConstructible_928F89FC5607554E7244359D8FE40432C96E53DC"/>
                            <connector>and</connector>
                            <openParen/>
                            <type ref="1579686"/>
                            <connector>is</connector>
                            <concept ref="concept_Movable_67BF70D7114988D4858EF177704CC03346D9240D"/>
                            <connector>or</connector>
                            <type ref="1579686"/>
                            <connector>is</connector>
                            <concept ref="concept_Copyable_555DCA16115160D45CEF63A5F50FCD5E29F3D6E2"/>
                            <closeParen/>
                            <connector>and</connector>
                            <type ref="1579686"/>
                            <connector>is</connector>
                            <concept ref="concept_Destructible_0524F34CBA010FC34882287B0116D474909E0966"/>
                        </constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_Semiring_4F0D08D0EFBCF87C6267476FBB2CA9239568FA20">
                    <name>Semiring&lt;T></name>
                    <groupName>Semiring</groupName>
                    <syntax>public concept Semiring&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579786">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_AdditiveMonoid_8D82C7092F575679F72B0CA8C2989C67C1966F37"/>
                    <constraints>
                        <constraint>
                            <type ref="1579786"/>
                            <connector>is</connector>
                            <concept ref="concept_MultiplicativeMonoid_2EC49957FA822229E3BB5F5014BA5E03C5EACC11"/>
                        </constraint>
                    </constraints>
                    <axioms>
                        <axiom>
                            <name>zeroIsNotOne</name>
                            <axiomStatements>
                                <axiomStatement>0 != 1;</axiomStatement>
                            </axiomStatements>
                        </axiom>
                        <axiom>
                            <name>multiplyingByZeroYieldsZero(a)</name>
                            <axiomStatements>
                                <axiomStatement>0 * a == 0 &amp;&amp; a * 0 == 0;</axiomStatement>
                            </axiomStatements>
                        </axiom>
                        <axiom>
                            <name>distributivity(a, b, c)</name>
                            <axiomStatements>
                                <axiomStatement>a * (b + c) == a * b + a * c &amp;&amp; (b + c) * a == b * a + c * a;</axiomStatement>
                            </axiomStatements>
                        </axiom>
                    </axioms>
                </concept>
                <concept id="concept_SignedInteger_1433E09EDE31E4C6382A074E0B77CDD99D989804">
                    <name>SignedInteger&lt;I></name>
                    <groupName>SignedInteger</groupName>
                    <syntax>public concept SignedInteger&lt;I>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579758">
                            <name>I</name>
                        </templateParameter>
                    </templateParameters>
                    <constraints>
                        <constraint>
                            <type ref="1579758"/>
                            <connector>is</connector>
                            <concept ref="concept_Integer_FCDB80A4361DAD68848DDECFDCE105F2560B0B0A"/>
                        </constraint>
                        <constraint>I(sbyte)</constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_TotallyOrdered_40CD71CFED7B3E26AA555259C8C3A14D6CE666EC">
                    <name>TotallyOrdered&lt;T, U></name>
                    <groupName>TotallyOrdered</groupName>
                    <syntax>public concept TotallyOrdered&lt;T, U>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579702">
                            <name>T</name>
                        </templateParameter>
                        <templateParameter id="1579703">
                            <name>U</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_Common_1761C757BC631D15B26D64D830742878B5E7D7F6"/>
                    <constraints>
                        <constraint>
                            <type ref="1579702"/>
                            <connector>is</connector>
                            <concept ref="concept_TotallyOrdered_E99156F9F67A4CDD40DFE7EAC64E14E2CF6B24F2"/>
                            <connector>and</connector>
                            <type ref="1579703"/>
                            <connector>is</connector>
                            <concept ref="concept_TotallyOrdered_E99156F9F67A4CDD40DFE7EAC64E14E2CF6B24F2"/>
                            <connector>and</connector>
                            CommonType<connector>is</connector>
                            <concept ref="concept_TotallyOrdered_E99156F9F67A4CDD40DFE7EAC64E14E2CF6B24F2"/>
                        </constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_TotallyOrdered_E99156F9F67A4CDD40DFE7EAC64E14E2CF6B24F2">
                    <name>TotallyOrdered&lt;T></name>
                    <groupName>TotallyOrdered</groupName>
                    <syntax>public concept TotallyOrdered&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579700">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_Regular_A56EC84F9A51535281FA2B6B074E90F9B3BBCCC1"/>
                    <constraints>
                        <constraint>
                            <type ref="1579700"/>
                            <connector>is</connector>
                            <concept ref="concept_LessThanComparable_90ED44B8D61617C1FB8517CD74D7D087E77A0AA5"/>
                        </constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_TrivialIterator_63C9CBDE8700FA0C9E6E0CA6C6C65B5DA24A13E5">
                    <name>TrivialIterator&lt;T></name>
                    <groupName>TrivialIterator</groupName>
                    <syntax>public concept TrivialIterator&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579705">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constraints>
                        <constraint>
                            <type ref="1579705"/>
                            <connector>is</connector>
                            <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                        </constraint>
                        <constraint>
                            <span class="kw">typename</span>
                             T.ValueType</constraint>
                        <constraint>
                            <type ref="1579705"/>
                            <dot>ValueType</dot>
                            <connector>is</connector>
                            <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                        </constraint>
                        <constraint>
                            <span class="kw">typename</span>
                             T.ReferenceType</constraint>
                        <constraint>
                            <type ref="1579705"/>
                            <dot>ReferenceType</dot>
                            <connector>is</connector>
                            <type ref="1579705"/>
                            <dot>ValueType</dot>
                            <qualifier>&amp;</qualifier>
                        </constraint>
                        <constraint>operator*()</constraint>
                        <constraint>
                            <span class="kw">typename</span>
                             T.PointerType</constraint>
                        <constraint>
                            <type ref="1579705"/>
                            <dot>PointerType</dot>
                            <connector>is</connector>
                            <type ref="1579705"/>
                            <dot>ValueType</dot>
                            <qualifier>*</qualifier>
                        </constraint>
                        <constraint>operator->()</constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_UnaryFunction_DDD936ABC21BA268C3B3C9F4820F5DFE1ACAA344">
                    <name>UnaryFunction&lt;T></name>
                    <groupName>UnaryFunction</groupName>
                    <syntax>public concept UnaryFunction&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579717">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <constraints>
                        <constraint>
                            <type ref="1579717"/>
                            <connector>is</connector>
                            <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                        </constraint>
                        <constraint>
                            <span class="kw">typename</span>
                             T.ArgumentType</constraint>
                        <constraint>
                            <span class="kw">typename</span>
                             T.ResultType</constraint>
                        <constraint>
                            <type ref="1579717"/>
                            <dot>ArgumentType</dot>
                            <connector>is</connector>
                            <concept ref="concept_Semiregular_E2C46E5F0F7E452605B56E425903C7CB77E861C7"/>
                        </constraint>
                        <constraint>operator()(T.ArgumentType)</constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_UnaryOperation_A42C7312D25FC827BE924605B8EB6CAF29F5668A">
                    <name>UnaryOperation&lt;T></name>
                    <groupName>UnaryOperation</groupName>
                    <syntax>public concept UnaryOperation&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579731">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_UnaryFunction_DDD936ABC21BA268C3B3C9F4820F5DFE1ACAA344"/>
                    <constraints>
                        <constraint>
                            <type ref="1579731"/>
                            <dot>ResultType</dot>
                            <connector>is</connector>
                            <type ref="1579731"/>
                            <dot>ArgumentType</dot>
                        </constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_UnaryPredicate_817CC9DCD26C0954E03389EC0C9357DB1879C53F">
                    <name>UnaryPredicate&lt;T></name>
                    <groupName>UnaryPredicate</groupName>
                    <syntax>public concept UnaryPredicate&lt;T>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579721">
                            <name>T</name>
                        </templateParameter>
                    </templateParameters>
                    <refines ref="concept_UnaryFunction_DDD936ABC21BA268C3B3C9F4820F5DFE1ACAA344"/>
                    <constraints>
                        <constraint>
                            <type ref="1579721"/>
                            <dot>ResultType</dot>
                            <connector>is</connector>
                            <type ref="type.1579450"/>
                        </constraint>
                    </constraints>
                    <axioms/>
                </concept>
                <concept id="concept_UnsignedInteger_FBFA16F1BC6E6222A9D123737D6648E8035C07E7">
                    <name>UnsignedInteger&lt;U></name>
                    <groupName>UnsignedInteger</groupName>
                    <syntax>public concept UnsignedInteger&lt;U>;</syntax>
                    <templateParameters>
                        <templateParameter id="1579760">
                            <name>U</name>
                        </templateParameter>
                    </templateParameters>
                    <constraints>
                        <constraint>
                            <type ref="1579760"/>
                            <connector>is</connector>
                            <concept ref="concept_Integer_FCDB80A4361DAD68848DDECFDCE105F2560B0B0A"/>
                        </constraint>
                        <constraint>U(byte)</constraint>
                    </constraints>
                    <axioms/>
                </concept>
            </concepts>
        </namespace>
        <namespace id="System.IO">
            <name>System.IO</name>
            <classes>
                <class id="1579649">
                    <name>BinaryReader</name>
                    <groupName>BinaryReader</groupName>
                    <syntax> public class BinaryReader;</syntax>
                    <constructors>
                        <constructor id="constructor_BinaryReader_99384187B1A7DF897003E0608CFF1ED84EF2760C">
                            <name>BinaryReader(UniquePtr&lt;System.IO.ByteStream>&amp;&amp; stream_)</name>
                            <syntax>public nothrow BinaryReader(UniquePtr&lt;System.IO.ByteStream>&amp;&amp; stream_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>stream_</name>
                                    <type ref="type.1580310"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_ContainedStream_BinaryReader_DDA24086D4BC4DEF1D8256BE4BED50A3A6B25BB0">
                            <name>ContainedStream()</name>
                            <syntax>public ByteStream&amp; ContainedStream();</syntax>
                            <returnType ref="type.1580312"/>
                        </function>
                        <function id="member_function_ReadBool_BinaryReader_7D4150B79E085499041382212B1D995103D13FFF">
                            <name>ReadBool()</name>
                            <syntax>public bool ReadBool();</syntax>
                            <returnType ref="type.1579450"/>
                        </function>
                        <function id="member_function_ReadByte_BinaryReader_5E8D1300279F520DFB342439697BB27B81D7C26E">
                            <name>ReadByte()</name>
                            <syntax>public byte ReadByte();</syntax>
                            <returnType ref="type.1579452"/>
                        </function>
                        <function id="member_function_ReadChar_BinaryReader_82E6BD374D335D3F9C3FCD0505EF2F7F0381BE2E">
                            <name>ReadChar()</name>
                            <syntax>public char ReadChar();</syntax>
                            <returnType ref="type.1579461"/>
                        </function>
                        <function id="member_function_ReadDouble_BinaryReader_E764E3A97099C9163B89B8FBCC17FC9D14086D2A">
                            <name>ReadDouble()</name>
                            <syntax>public double ReadDouble();</syntax>
                            <returnType ref="type.1579460"/>
                        </function>
                        <function id="member_function_ReadFloat_BinaryReader_31F488ED2AAD86D826B21791511107667A014FBD">
                            <name>ReadFloat()</name>
                            <syntax>public float ReadFloat();</syntax>
                            <returnType ref="type.1579459"/>
                        </function>
                        <function id="member_function_ReadInt_BinaryReader_5273915AB773625DEE066896143C4CD6F700B882">
                            <name>ReadInt()</name>
                            <syntax>public int ReadInt();</syntax>
                            <returnType ref="type.1579455"/>
                        </function>
                        <function id="member_function_ReadLong_BinaryReader_5C57E3D81A94519DE0B35290F20625D887EFD7F1">
                            <name>ReadLong()</name>
                            <syntax>public long ReadLong();</syntax>
                            <returnType ref="type.1579457"/>
                        </function>
                        <function id="member_function_ReadSByte_BinaryReader_E96448DCC609D7D981127DDC3769F3279E979B8F">
                            <name>ReadSByte()</name>
                            <syntax>public sbyte ReadSByte();</syntax>
                            <returnType ref="type.1579451"/>
                        </function>
                        <function id="member_function_ReadShort_BinaryReader_3D66677E3B6C1DA57A2473CCF4CB639C1C40DB21">
                            <name>ReadShort()</name>
                            <syntax>public short ReadShort();</syntax>
                            <returnType ref="type.1579453"/>
                        </function>
                        <function id="member_function_ReadString_BinaryReader_D215B9FD2A82F33D48F36F0919AB07214ED09B6B">
                            <name>ReadString()</name>
                            <syntax>public String&lt;char> ReadString();</syntax>
                            <returnType ref="type.1580238"/>
                        </function>
                        <function id="member_function_ReadUChar_BinaryReader_EADED62463D66516C3DD1A57BB5EC41CE4E068AC">
                            <name>ReadUChar()</name>
                            <syntax>public uchar ReadUChar();</syntax>
                            <returnType ref="type.1579463"/>
                        </function>
                        <function id="member_function_ReadUInt_BinaryReader_AE65B957E533FCDEA46D538020C2692C11622B03">
                            <name>ReadUInt()</name>
                            <syntax>public uint ReadUInt();</syntax>
                            <returnType ref="type.1579456"/>
                        </function>
                        <function id="member_function_ReadULong_BinaryReader_7ABAC55009638C490EADBCDD0A5B4AD0896EFDC4">
                            <name>ReadULong()</name>
                            <syntax>public ulong ReadULong();</syntax>
                            <returnType ref="type.1579458"/>
                        </function>
                        <function id="member_function_ReadUShort_BinaryReader_FC1EA022CA108DE022829DCD653ADD7D3189B625">
                            <name>ReadUShort()</name>
                            <syntax>public ushort ReadUShort();</syntax>
                            <returnType ref="type.1579454"/>
                        </function>
                        <function id="member_function_ReadUString_BinaryReader_181BF99C9C37F81BB93F72E171A2B36A54E0C2FB">
                            <name>ReadUString()</name>
                            <syntax>public String&lt;uchar> ReadUString();</syntax>
                            <returnType ref="type.1580362"/>
                        </function>
                        <function id="member_function_ReadWChar_BinaryReader_5AA272210FDE0A74067CC50E2796F6F3EA1ED7CD">
                            <name>ReadWChar()</name>
                            <syntax>public wchar ReadWChar();</syntax>
                            <returnType ref="type.1579462"/>
                        </function>
                        <function id="member_function_ReadWString_BinaryReader_F0AAD035C242A0E502FA20B685C22872606F3A85">
                            <name>ReadWString()</name>
                            <syntax>public String&lt;wchar> ReadWString();</syntax>
                            <returnType ref="type.1580318"/>
                        </function>
                        <function id="member_function_Seek_BinaryReader_A543CD581EA8EDACAF6FE5CB6015BEB0E47E4C17">
                            <name>Seek(long pos, Origin origin)</name>
                            <syntax>public void Seek(long pos, Origin origin);</syntax>
                            <parameters>
                                <parameter>
                                    <name>pos</name>
                                    <type ref="type.1579457"/>
                                </parameter>
                                <parameter>
                                    <name>origin</name>
                                    <type ref="1579659"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Tell_BinaryReader_3AC0B4D725ABDCA48BF57B62F214E9F33148EBD0">
                            <name>Tell()</name>
                            <syntax>public long Tell();</syntax>
                            <returnType ref="type.1579457"/>
                        </function>
                    </functions>
                </class>
                <class id="1579651">
                    <name>BinaryWriter</name>
                    <groupName>BinaryWriter</groupName>
                    <syntax> public class BinaryWriter;</syntax>
                    <constructors>
                        <constructor id="constructor_BinaryWriter_787A5DE2249D2AC773FDBB05A337E6C25A9ED6F5">
                            <name>BinaryWriter(UniquePtr&lt;System.IO.ByteStream>&amp;&amp; stream_)</name>
                            <syntax>public nothrow BinaryWriter(UniquePtr&lt;System.IO.ByteStream>&amp;&amp; stream_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>stream_</name>
                                    <type ref="type.1580310"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_ContainedStream_BinaryWriter_31597A3FD938799D254276585B07221C62C93F7F">
                            <name>ContainedStream()</name>
                            <syntax>public ByteStream&amp; ContainedStream();</syntax>
                            <returnType ref="type.1580312"/>
                        </function>
                        <function id="member_function_Seek_BinaryWriter_262B3437137B7CB628B09D89D968370AC3BE4806">
                            <name>Seek(long pos, Origin origin)</name>
                            <syntax>public void Seek(long pos, Origin origin);</syntax>
                            <parameters>
                                <parameter>
                                    <name>pos</name>
                                    <type ref="type.1579457"/>
                                </parameter>
                                <parameter>
                                    <name>origin</name>
                                    <type ref="1579659"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Tell_BinaryWriter_B7409AF463074AD4CBE04D145DF48C56F62FE440">
                            <name>Tell()</name>
                            <syntax>public long Tell();</syntax>
                            <returnType ref="type.1579457"/>
                        </function>
                        <function id="function_group_Write_867352E1CE0ACA6E11F4DA21926AC3B016757EDB">
                            <name>Write</name>
                            <overloads>
                                <overload id="member_function_Write_BinaryWriter_9227A4172AF0D4304FF220A3D5E8CF7497B623C0">
                                    <name>Write(bool x)</name>
                                    <syntax>public void Write(bool x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.1579450"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_BinaryWriter_49130F748DFF829AF5A1651D891A8C6890B897DD">
                                    <name>Write(byte x)</name>
                                    <syntax>public void Write(byte x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.1579452"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_BinaryWriter_71FFD84DC1DA8A65AAB8081B228A0B7E2B9D464D">
                                    <name>Write(char x)</name>
                                    <syntax>public void Write(char x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.1579461"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_BinaryWriter_42759A137A9CCC36E5D886D61C3CFD42E1EEE7E8">
                                    <name>Write(const String&lt;char>&amp; x)</name>
                                    <syntax>public void Write(const String&lt;char>&amp; x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.1580258"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_BinaryWriter_83FAEB9317DB8F2175C9E6338B6BA553B03B27F3">
                                    <name>Write(const String&lt;uchar>&amp; x)</name>
                                    <syntax>public void Write(const String&lt;uchar>&amp; x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.1580383"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_BinaryWriter_514D0BE8134A791F3398D7CE3F1792AC4BD3A6BA">
                                    <name>Write(const String&lt;wchar>&amp; x)</name>
                                    <syntax>public void Write(const String&lt;wchar>&amp; x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.1580339"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_BinaryWriter_F340C15574EBD7B958032EFBE3369CE30C39413A">
                                    <name>Write(double x)</name>
                                    <syntax>public void Write(double x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.1579460"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_BinaryWriter_6B3CAC640FBF81A8D9BC4C81842918800ECC0AD8">
                                    <name>Write(float x)</name>
                                    <syntax>public void Write(float x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.1579459"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_BinaryWriter_6A7A93107B2EB695CBEB979A8EDDE35032D9CD56">
                                    <name>Write(int x)</name>
                                    <syntax>public void Write(int x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.1579455"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_BinaryWriter_E899BA0D165F10634A9658689F4CB2B4C023A11F">
                                    <name>Write(long x)</name>
                                    <syntax>public void Write(long x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.1579457"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_BinaryWriter_8A1E5BAF3645A8253A99A1A1D82142F9F3C0843B">
                                    <name>Write(sbyte x)</name>
                                    <syntax>public void Write(sbyte x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.1579451"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_BinaryWriter_079CD4DEC5E3CCE15688293D6201AA9FBD27447D">
                                    <name>Write(short x)</name>
                                    <syntax>public void Write(short x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.1579453"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_BinaryWriter_42732279991BCAAD1B0C91FE9F624C935BF87D75">
                                    <name>Write(uchar x)</name>
                                    <syntax>public void Write(uchar x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.1579463"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_BinaryWriter_22B6E7472E4D1153FC6F1888C85D9F955AEF7229">
                                    <name>Write(uint x)</name>
                                    <syntax>public void Write(uint x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.1579456"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_BinaryWriter_C5D22BDE73ED243BD2E06087985E120D37B5274D">
                                    <name>Write(ulong x)</name>
                                    <syntax>public void Write(ulong x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.1579458"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_BinaryWriter_912311787C89D7CC5678A6B513A2F9049A9BED8D">
                                    <name>Write(ushort x)</name>
                                    <syntax>public void Write(ushort x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.1579454"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_BinaryWriter_345AB5DEE5D1A6B17FCC3C9E2E61FCD5EF8D037F">
                                    <name>Write(wchar x)</name>
                                    <syntax>public void Write(wchar x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.1579462"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                    </functions>
                </class>
                <class id="1579657">
                    <name>BufferedByteStream</name>
                    <groupName>BufferedByteStream</groupName>
                    <syntax> public class BufferedByteStream;</syntax>
                    <baseClass ref="1579660"/>
                    <constructors>
                        <constructor id="move_constructor_BufferedByteStream_EEA33F68D99074223DDD66D5297308A75A5465C7">
                            <name>BufferedByteStream(BufferedByteStream&amp;&amp; @p0)</name>
                            <syntax>public nothrow default BufferedByteStream(BufferedByteStream&amp;&amp; @p0);</syntax>
                            <parameters>
                                <parameter>
                                    <name>@p0</name>
                                    <type ref="type.1580439"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_BufferedByteStream_D4258F76D2FA4E9191F32770606692B58231D39E">
                            <name>BufferedByteStream(UniquePtr&lt;System.IO.ByteStream>&amp;&amp; baseStream_)</name>
                            <syntax>public nothrow BufferedByteStream(UniquePtr&lt;System.IO.ByteStream>&amp;&amp; baseStream_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>baseStream_</name>
                                    <type ref="type.1580310"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_BufferedByteStream_C17F03D839B837329CAB196BC08C8AC17136CCD6">
                            <name>BufferedByteStream(UniquePtr&lt;System.IO.ByteStream>&amp;&amp; baseStream_, long bufferSize_)</name>
                            <syntax>public nothrow BufferedByteStream(UniquePtr&lt;System.IO.ByteStream>&amp;&amp; baseStream_, long bufferSize_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>baseStream_</name>
                                    <type ref="type.1580310"/>
                                </parameter>
                                <parameter>
                                    <name>bufferSize_</name>
                                    <type ref="type.1579457"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_ContainedStream_BufferedByteStream_3E1EA9E0787129D34F15AC15C1BF23FAD497EBD8">
                            <name>ContainedStream()</name>
                            <syntax>public nothrow ByteStream&amp; ContainedStream();</syntax>
                            <returnType ref="type.1580312"/>
                        </function>
                        <function id="member_function_Flush_BufferedByteStream_C190054D9E247609DEBDA46585A479AB3B5FB598">
                            <name>Flush()</name>
                            <syntax>public override void Flush();</syntax>
                        </function>
                        <function id="member_function_Read_BufferedByteStream_7731798CF1D3ADF175EBC9F66EDC6C6951699080">
                            <name>Read(byte* buf, long count)</name>
                            <syntax>public override long Read(byte* buf, long count);</syntax>
                            <parameters>
                                <parameter>
                                    <name>buf</name>
                                    <type ref="type.1579470"/>
                                </parameter>
                                <parameter>
                                    <name>count</name>
                                    <type ref="type.1579457"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579457"/>
                        </function>
                        <function id="member_function_ReadByte_BufferedByteStream_3A2AAD44A0C2362A5292653C0C8D76DA20F5ABFA">
                            <name>ReadByte()</name>
                            <syntax>public override int ReadByte();</syntax>
                            <returnType ref="type.1579455"/>
                        </function>
                        <function id="member_function_Seek_BufferedByteStream_577B82B981103BEA42DCB3521AB2335AF16E1DF7">
                            <name>Seek(long pos, Origin origin)</name>
                            <syntax>public override void Seek(long pos, Origin origin);</syntax>
                            <parameters>
                                <parameter>
                                    <name>pos</name>
                                    <type ref="type.1579457"/>
                                </parameter>
                                <parameter>
                                    <name>origin</name>
                                    <type ref="1579659"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Tell_BufferedByteStream_7AD5B566CE4A4EB80A8DD7C43703DEBEA6682DE6">
                            <name>Tell()</name>
                            <syntax>public override long Tell();</syntax>
                            <returnType ref="type.1579457"/>
                        </function>
                        <function id="function_group_Write_7A0BF8F5EAD509509E2E8B2EE0EF6B2ADD9F80AE">
                            <name>Write</name>
                            <overloads>
                                <overload id="member_function_Write_BufferedByteStream_F6C2A5A7E93788CB03C14A4D720FD805EBC1EF76">
                                    <name>Write(byte x)</name>
                                    <syntax>public override void Write(byte x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.1579452"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_BufferedByteStream_AE1AA6C721ECF393C6C934954B245BA2E015C766">
                                    <name>Write(byte* buf, long count)</name>
                                    <syntax>public override void Write(byte* buf, long count);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>buf</name>
                                            <type ref="type.1579470"/>
                                        </parameter>
                                        <parameter>
                                            <name>count</name>
                                            <type ref="type.1579457"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="move_assignment_op_assign_BufferedByteStream_E35AB8B835B29859F9E6C62E7DCA76405950CEA1">
                            <name>operator=(BufferedByteStream&amp;&amp; @p0)</name>
                            <syntax>public nothrow default void operator=(BufferedByteStream&amp;&amp; @p0);</syntax>
                            <parameters>
                                <parameter>
                                    <name>@p0</name>
                                    <type ref="type.1580439"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1579660">
                    <name>ByteStream</name>
                    <groupName>ByteStream</groupName>
                    <syntax>abstract public class ByteStream;</syntax>
                    <constructors>
                        <constructor id="move_constructor_ByteStream_79C9D690CE6C3AE37E3ED5CCACF1950640749162">
                            <name>ByteStream(ByteStream&amp;&amp; @p0)</name>
                            <syntax>public nothrow default ByteStream(ByteStream&amp;&amp; @p0);</syntax>
                            <parameters>
                                <parameter>
                                    <name>@p0</name>
                                    <type ref="type.1580436"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="function_group_CopyTo_50D26BA5574889FBF6BCCE7346EA0401D2F24AE0">
                            <name>CopyTo</name>
                            <overloads>
                                <overload id="member_function_CopyTo_ByteStream_0492E0CBFB6B3F30EF00802A23577E7067B981A0">
                                    <name>CopyTo(ByteStream&amp; destination)</name>
                                    <syntax>public void CopyTo(ByteStream&amp; destination);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>destination</name>
                                            <type ref="type.1580312"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_CopyTo_ByteStream_09F8EA0997885DD83562B277CD430D46040BB611">
                                    <name>CopyTo(ByteStream&amp; destination, long bufferSize)</name>
                                    <syntax>public void CopyTo(ByteStream&amp; destination, long bufferSize);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>destination</name>
                                            <type ref="type.1580312"/>
                                        </parameter>
                                        <parameter>
                                            <name>bufferSize</name>
                                            <type ref="type.1579457"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_Flush_ByteStream_B359C6583A0F7B15600ACAFE7CAC23020693AEBB">
                            <name>Flush()</name>
                            <syntax>public virtual void Flush();</syntax>
                        </function>
                        <function id="member_function_Read_ByteStream_026763BB61037CC329F0EC41074406529C920B49">
                            <name>Read(byte* buf, long count)</name>
                            <syntax>public abstract long Read(byte* buf, long count);</syntax>
                            <parameters>
                                <parameter>
                                    <name>buf</name>
                                    <type ref="type.1579470"/>
                                </parameter>
                                <parameter>
                                    <name>count</name>
                                    <type ref="type.1579457"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579457"/>
                        </function>
                        <function id="member_function_ReadByte_ByteStream_00F33B1B22C620EA630EFF170682AF0914E4E568">
                            <name>ReadByte()</name>
                            <syntax>public abstract int ReadByte();</syntax>
                            <returnType ref="type.1579455"/>
                        </function>
                        <function id="member_function_Seek_ByteStream_6127E9DEF97F05A69D099D8E1CED2CCA9FD5F9B3">
                            <name>Seek(long pos, Origin origin)</name>
                            <syntax>public virtual void Seek(long pos, Origin origin);</syntax>
                            <parameters>
                                <parameter>
                                    <name>pos</name>
                                    <type ref="type.1579457"/>
                                </parameter>
                                <parameter>
                                    <name>origin</name>
                                    <type ref="1579659"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Tell_ByteStream_163EFD5A892885A5804810B26BDF0BA74083B8D7">
                            <name>Tell()</name>
                            <syntax>public virtual long Tell();</syntax>
                            <returnType ref="type.1579457"/>
                        </function>
                        <function id="function_group_Write_424A07E8A91E3325445B9A66F6B4153C8AF04F02">
                            <name>Write</name>
                            <overloads>
                                <overload id="member_function_Write_ByteStream_B16019C1887E69858F8B4AADB6B9CE65537722E2">
                                    <name>Write(byte x)</name>
                                    <syntax>public abstract void Write(byte x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.1579452"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_ByteStream_E19BFE5AE2C372D12C30E7858F26083DF778BC5D">
                                    <name>Write(byte* buf, long count)</name>
                                    <syntax>public abstract void Write(byte* buf, long count);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>buf</name>
                                            <type ref="type.1579470"/>
                                        </parameter>
                                        <parameter>
                                            <name>count</name>
                                            <type ref="type.1579457"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="move_assignment_op_assign_ByteStream_15F91751C8166EF74B764D28C21985D119070C22">
                            <name>operator=(ByteStream&amp;&amp; @p0)</name>
                            <syntax>public nothrow default void operator=(ByteStream&amp;&amp; @p0);</syntax>
                            <parameters>
                                <parameter>
                                    <name>@p0</name>
                                    <type ref="type.1580436"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1579806">
                    <name>File</name>
                    <groupName>File</groupName>
                    <syntax> public static class File;</syntax>
                    <staticMemberFunctions>
                        <function id="member_function_AppendText_File_643A8FED35EB760E56C6629EF3A3EE6E7F96215F">
                            <name>AppendText(const String&lt;char>&amp; filePath)</name>
                            <syntax>public static StreamWriter AppendText(const String&lt;char>&amp; filePath);</syntax>
                            <parameters>
                                <parameter>
                                    <name>filePath</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1580066"/>
                        </function>
                        <function id="member_function_CreateBinary_File_5A4B549AD41ABE0BCEA7A20302A5E25BD0EC1ADD">
                            <name>CreateBinary(const String&lt;char>&amp; filePath)</name>
                            <syntax>public static BinaryWriter CreateBinary(const String&lt;char>&amp; filePath);</syntax>
                            <parameters>
                                <parameter>
                                    <name>filePath</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1579651"/>
                        </function>
                        <function id="member_function_CreateText_File_2EF9CAB30DD21BABC54A82CCB9FF835510E74DC2">
                            <name>CreateText(const String&lt;char>&amp; filePath)</name>
                            <syntax>public static StreamWriter CreateText(const String&lt;char>&amp; filePath);</syntax>
                            <parameters>
                                <parameter>
                                    <name>filePath</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1580066"/>
                        </function>
                        <function id="member_function_Exists_File_FC6BD11DC4C17349F599B2729C5A76449EDB46F3">
                            <name>Exists(const String&lt;char>&amp; filePath)</name>
                            <syntax>public static nothrow bool Exists(const String&lt;char>&amp; filePath);</syntax>
                            <parameters>
                                <parameter>
                                    <name>filePath</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </function>
                        <function id="member_function_LastWriteTimeLess_File_2A1F7CAC91487015802222F0432A9071D3DA8880">
                            <name>LastWriteTimeLess(const String&lt;char>&amp; filePath1, const String&lt;char>&amp; filePath2)</name>
                            <syntax>public static nothrow bool LastWriteTimeLess(const String&lt;char>&amp; filePath1, const String&lt;char>&amp; filePath2);</syntax>
                            <parameters>
                                <parameter>
                                    <name>filePath1</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                                <parameter>
                                    <name>filePath2</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </function>
                        <function id="member_function_OpenBinary_File_2EEB4F10A5AC3B2E46AC66A79EEDF83EA7A16170">
                            <name>OpenBinary(const String&lt;char>&amp; filePath)</name>
                            <syntax>public static BinaryReader OpenBinary(const String&lt;char>&amp; filePath);</syntax>
                            <parameters>
                                <parameter>
                                    <name>filePath</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1579649"/>
                        </function>
                        <function id="member_function_OpenRead_File_E47873D844B9D94ACA693A28F299A0CCF71AD6B6">
                            <name>OpenRead(const String&lt;char>&amp; filePath)</name>
                            <syntax>public static StreamReader OpenRead(const String&lt;char>&amp; filePath);</syntax>
                            <parameters>
                                <parameter>
                                    <name>filePath</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1580064"/>
                        </function>
                        <function id="member_function_ReadAllText_File_BF69423F5ECED3BABCA2932C268CBA63196E46E4">
                            <name>ReadAllText(const String&lt;char>&amp; filePath)</name>
                            <syntax>public static String&lt;char> ReadAllText(const String&lt;char>&amp; filePath);</syntax>
                            <parameters>
                                <parameter>
                                    <name>filePath</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580238"/>
                        </function>
                    </staticMemberFunctions>
                </class>
                <class id="1579807">
                    <name>FileByteStream</name>
                    <groupName>FileByteStream</groupName>
                    <syntax> public class FileByteStream;</syntax>
                    <baseClass ref="1579660"/>
                    <constructors>
                        <constructor id="move_constructor_FileByteStream_729CF33EAEBA21E76D547F4EDD705803C28520A9">
                            <name>FileByteStream(FileByteStream&amp;&amp; that)</name>
                            <syntax>public nothrow FileByteStream(FileByteStream&amp;&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.1580482"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_FileByteStream_A44C625B3794E09E830DB7A6CAA0B9E08A6611E1">
                            <name>FileByteStream(const String&lt;char>&amp; filePath, OpenMode openMode)</name>
                            <syntax>public FileByteStream(const String&lt;char>&amp; filePath, OpenMode openMode);</syntax>
                            <parameters>
                                <parameter>
                                    <name>filePath</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                                <parameter>
                                    <name>openMode</name>
                                    <type ref="1579811"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_FileByteStream_11778080A4AEBA57BAC595A5098CBBAFB165BE5B">
                            <name>FileByteStream(int fileHandle_)</name>
                            <syntax>public nothrow FileByteStream(int fileHandle_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>fileHandle_</name>
                                    <type ref="type.1579455"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Close_FileByteStream_508760CCC28C72F859D17B8C210EE37412247094">
                            <name>Close()</name>
                            <syntax>public void Close();</syntax>
                        </function>
                        <function id="member_function_IsOpen_FileByteStream_2FDFFDFCA65D0FF034D17B1AAAD7235139A1095C">
                            <name>IsOpen() const</name>
                            <syntax>public nothrow inline bool IsOpen() const;</syntax>
                            <returnType ref="type.1579450"/>
                        </function>
                        <function id="member_function_Open_FileByteStream_4B07581C99CA524D4BB46F91CA6A0D2EE25F1BD2">
                            <name>Open(const String&lt;char>&amp; filePath, OpenMode openMode)</name>
                            <syntax>public void Open(const String&lt;char>&amp; filePath, OpenMode openMode);</syntax>
                            <parameters>
                                <parameter>
                                    <name>filePath</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                                <parameter>
                                    <name>openMode</name>
                                    <type ref="1579811"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Read_FileByteStream_38D0DD0A25D7059AC5F2521D5BE1CC43B5F8C111">
                            <name>Read(byte* buf, long count)</name>
                            <syntax>public override long Read(byte* buf, long count);</syntax>
                            <parameters>
                                <parameter>
                                    <name>buf</name>
                                    <type ref="type.1579470"/>
                                </parameter>
                                <parameter>
                                    <name>count</name>
                                    <type ref="type.1579457"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579457"/>
                        </function>
                        <function id="member_function_ReadByte_FileByteStream_54AB9146421A7FE5DABEB61EDCAA8BE35DB33918">
                            <name>ReadByte()</name>
                            <syntax>public override int ReadByte();</syntax>
                            <returnType ref="type.1579455"/>
                        </function>
                        <function id="member_function_Seek_FileByteStream_D4EEE71F94CCBD0C14FCCDC69A53D78D2A580020">
                            <name>Seek(long pos, Origin origin)</name>
                            <syntax>public override void Seek(long pos, Origin origin);</syntax>
                            <parameters>
                                <parameter>
                                    <name>pos</name>
                                    <type ref="type.1579457"/>
                                </parameter>
                                <parameter>
                                    <name>origin</name>
                                    <type ref="1579659"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Tell_FileByteStream_5672A01D687DA2B72DA0E0635AFBAEEA20331944">
                            <name>Tell()</name>
                            <syntax>public override long Tell();</syntax>
                            <returnType ref="type.1579457"/>
                        </function>
                        <function id="function_group_Write_0A37E9C0BF7D2C1DE77039018E57D4379FEBB319">
                            <name>Write</name>
                            <overloads>
                                <overload id="member_function_Write_FileByteStream_C6C2AAFCFD4E06B7ECD656D005C9D01A973ED1D3">
                                    <name>Write(byte x)</name>
                                    <syntax>public override void Write(byte x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.1579452"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_FileByteStream_DD3F9E7577CED3D3AFD13C3B48300615E3B14A6B">
                                    <name>Write(byte* buf, long count)</name>
                                    <syntax>public override void Write(byte* buf, long count);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>buf</name>
                                            <type ref="type.1579470"/>
                                        </parameter>
                                        <parameter>
                                            <name>count</name>
                                            <type ref="type.1579457"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="move_assignment_op_assign_FileByteStream_DE379FD729C7B3ECB902FAAF2DBF197151DAB71D">
                            <name>operator=(FileByteStream&amp;&amp; @p0)</name>
                            <syntax>public nothrow default void operator=(FileByteStream&amp;&amp; @p0);</syntax>
                            <parameters>
                                <parameter>
                                    <name>@p0</name>
                                    <type ref="type.1580482"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1579812">
                    <name>FileSystemException</name>
                    <groupName>FileSystemException</groupName>
                    <syntax> public class FileSystemException;</syntax>
                    <baseClass ref="1579802"/>
                    <constructors>
                        <constructor id="constructor_FileSystemException_0E10B74628849BBEDA9615E53923669F0A0DB677">
                            <name>FileSystemException(const String&lt;char>&amp; message_)</name>
                            <syntax>public nothrow FileSystemException(const String&lt;char>&amp; message_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>message_</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                </class>
                <class id="1579814">
                    <name>IOBuffer</name>
                    <groupName>IOBuffer</groupName>
                    <syntax> public class IOBuffer;</syntax>
                    <constructors>
                        <constructor id="move_constructor_IOBuffer_453CDC5253461D697E0E33A87D5E9177F5635C90">
                            <name>IOBuffer(IOBuffer&amp;&amp; that)</name>
                            <syntax>public nothrow IOBuffer(IOBuffer&amp;&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.1580489"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_IOBuffer_B543F7FC50F67D2B3A944E23EDC9526BBC474E1D">
                            <name>IOBuffer(long size_)</name>
                            <syntax>public nothrow IOBuffer(long size_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>size_</name>
                                    <type ref="type.1579457"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Mem_IOBuffer_996BF7317F966ED0127C18F3E362F5BE3EABCC8A">
                            <name>Mem() const</name>
                            <syntax>public nothrow inline void* Mem() const;</syntax>
                            <returnType ref="type.1579513"/>
                        </function>
                        <function id="member_function_Size_IOBuffer_554ABD8BBEF2D56AE5DE7C8001AA8F9F9BD8CDBE">
                            <name>Size() const</name>
                            <syntax>public nothrow inline long Size() const;</syntax>
                            <returnType ref="type.1579457"/>
                        </function>
                        <function id="move_assignment_op_assign_IOBuffer_54A9D09456ABA40EA25F67E2E7EFC2E9F773B000">
                            <name>operator=(IOBuffer&amp;&amp; that)</name>
                            <syntax>public nothrow default void operator=(IOBuffer&amp;&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.1580489"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="function_group_op_index_08F14CACE6DEDD9E5D9E72DAE9453D1A1C63DDE2">
                            <name>operator[]</name>
                            <overloads>
                                <overload id="member_function_op_index_IOBuffer_E0DD9215CA5FC5BC24785E9308C6420A1002B600">
                                    <name>operator[](long index)</name>
                                    <syntax>public nothrow inline byte&amp; operator[](long index);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>index</name>
                                            <type ref="type.1579457"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.1580472"/>
                                </overload>
                                <overload id="member_function_op_index_IOBuffer_8B770CF51C05B37CDB6ED63BB2DA73EC88D2E531">
                                    <name>operator[](long index) const</name>
                                    <syntax>public nothrow inline byte operator[](long index) const;</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>index</name>
                                            <type ref="type.1579457"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.1579452"/>
                                </overload>
                            </overloads>
                        </function>
                    </functions>
                </class>
                <class id="1579818">
                    <name>InputFileStream</name>
                    <groupName>InputFileStream</groupName>
                    <syntax> public class InputFileStream;</syntax>
                    <baseClass ref="1580056"/>
                    <constructors>
                        <constructor id="default_constructor_InputFileStream_F69F4295ABA9DB4FE31F575C4D0210031B0CF599">
                            <name>InputFileStream()</name>
                            <syntax>public nothrow InputFileStream();</syntax>
                        </constructor>
                        <constructor id="move_constructor_InputFileStream_B912DD2F7042A7FA1B9973A917C4D21BF70B009C">
                            <name>InputFileStream(InputFileStream&amp;&amp; that)</name>
                            <syntax>public nothrow InputFileStream(InputFileStream&amp;&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.1580492"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_InputFileStream_B4B632C2CD3D67F5273DB5F2C8ADCBE452CA6D4B">
                            <name>InputFileStream(const String&lt;char>&amp; filePath_)</name>
                            <syntax>public InputFileStream(const String&lt;char>&amp; filePath_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>filePath_</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_InputFileStream_7868C0C1357B4800DC263B5B06AD798D39891C54">
                            <name>InputFileStream(const String&lt;char>&amp; filePath_, long bufferSize_)</name>
                            <syntax>public InputFileStream(const String&lt;char>&amp; filePath_, long bufferSize_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>filePath_</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                                <parameter>
                                    <name>bufferSize_</name>
                                    <type ref="type.1579457"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_InputFileStream_EAD1EB01063A5AFB32F7B461DDC8570A19DA0858">
                            <name>InputFileStream(const String&lt;char>&amp; filePath_, long bufferSize_, OpenMode openMode_)</name>
                            <syntax>public InputFileStream(const String&lt;char>&amp; filePath_, long bufferSize_, OpenMode openMode_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>filePath_</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                                <parameter>
                                    <name>bufferSize_</name>
                                    <type ref="type.1579457"/>
                                </parameter>
                                <parameter>
                                    <name>openMode_</name>
                                    <type ref="1579811"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_InputFileStream_6A4B860129634600140B6832AD9952ACECB96101">
                            <name>InputFileStream(int fileHandle_)</name>
                            <syntax>public nothrow InputFileStream(int fileHandle_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>fileHandle_</name>
                                    <type ref="type.1579455"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_InputFileStream_777F3062A6453AB1214EA7BEFAE9A3361DC1EB55">
                            <name>InputFileStream(int fileHandle_, long bufferSize_)</name>
                            <syntax>public nothrow InputFileStream(int fileHandle_, long bufferSize_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>fileHandle_</name>
                                    <type ref="type.1579455"/>
                                </parameter>
                                <parameter>
                                    <name>bufferSize_</name>
                                    <type ref="type.1579457"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Close_InputFileStream_7A332AF93425C02E2489297EAA8F4145E6FE6138">
                            <name>Close()</name>
                            <syntax>public void Close();</syntax>
                        </function>
                        <function id="member_function_EndOfStream_InputFileStream_22132038E3CC6F458831270D1164FE7BB0D3FDC8">
                            <name>EndOfStream() const</name>
                            <syntax>public nothrow override bool EndOfStream() const;</syntax>
                            <returnType ref="type.1579450"/>
                        </function>
                        <function id="member_function_FileHandle_InputFileStream_26B2B4315240CF9604FAF4C6E8621BB3B7EC4C3B">
                            <name>FileHandle() const</name>
                            <syntax>public nothrow inline int FileHandle() const;</syntax>
                            <returnType ref="type.1579455"/>
                        </function>
                        <function id="member_function_FilePath_InputFileStream_BA3DAE011E62CAE9A945FB9B57E3BBB1693F0359">
                            <name>FilePath() const</name>
                            <syntax>public nothrow inline const String&lt;char>&amp; FilePath() const;</syntax>
                            <returnType ref="type.1580258"/>
                        </function>
                        <function id="member_function_Open_InputFileStream_9FA60BB71E42AC01385ED46C54958462325C6755">
                            <name>Open(const String&lt;char>&amp; filePath_, OpenMode openMode)</name>
                            <syntax>public void Open(const String&lt;char>&amp; filePath_, OpenMode openMode);</syntax>
                            <parameters>
                                <parameter>
                                    <name>filePath_</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                                <parameter>
                                    <name>openMode</name>
                                    <type ref="1579811"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Opened_InputFileStream_4542C97DEF03B6740583F0F6AB65EFCA15BF8606">
                            <name>Opened() const</name>
                            <syntax>public nothrow inline bool Opened() const;</syntax>
                            <returnType ref="type.1579450"/>
                        </function>
                        <function id="member_function_Read_InputFileStream_247B0488DD2FC14E4175A8FD79FD9C9825BA8D09">
                            <name>Read()</name>
                            <syntax>public override int Read();</syntax>
                            <returnType ref="type.1579455"/>
                        </function>
                        <function id="member_function_ReadLine_InputFileStream_147B56A0CE10C6326F6E1BACBB7054D39896058B">
                            <name>ReadLine()</name>
                            <syntax>public override String&lt;char> ReadLine();</syntax>
                            <returnType ref="type.1580238"/>
                        </function>
                        <function id="member_function_ReadToEnd_InputFileStream_464FA6766B51305CE3AB5CEB2E043BBDDC30020A">
                            <name>ReadToEnd()</name>
                            <syntax>public override String&lt;char> ReadToEnd();</syntax>
                            <returnType ref="type.1580238"/>
                        </function>
                        <function id="move_assignment_op_assign_InputFileStream_5E0662F4D267918E67056707963DD83E95294FE1">
                            <name>operator=(InputFileStream&amp;&amp; @p0)</name>
                            <syntax>public nothrow default void operator=(InputFileStream&amp;&amp; @p0);</syntax>
                            <parameters>
                                <parameter>
                                    <name>@p0</name>
                                    <type ref="type.1580492"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                    <constants>
                        <constant id="constant_defaultBufferSize_7B64991F89249E9B47914DD67D09589E6F266D05">
                            <name>defaultBufferSize</name>
                            <syntax>public const long defaultBufferSize = 4096;</syntax>
                            <type ref="type.1579457"/>
                            <value>4096</value>
                        </constant>
                    </constants>
                </class>
                <class id="1580056">
                    <name>InputStream</name>
                    <groupName>InputStream</groupName>
                    <syntax>abstract public class InputStream;</syntax>
                    <constructors>
                        <constructor id="default_constructor_InputStream_7D5649B84C4C91D763347586CD9848423E6B49C8">
                            <name>InputStream()</name>
                            <syntax>public nothrow default InputStream();</syntax>
                        </constructor>
                        <constructor id="move_constructor_InputStream_7027EA0240D5245013841AC728460D7C7DB13593">
                            <name>InputStream(InputStream&amp;&amp; @p0)</name>
                            <syntax>public nothrow default InputStream(InputStream&amp;&amp; @p0);</syntax>
                            <parameters>
                                <parameter>
                                    <name>@p0</name>
                                    <type ref="type.1580490"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_EndOfStream_InputStream_1ED62A5082C00BAE3F4982D9A09631A6D4AC0E38">
                            <name>EndOfStream() const</name>
                            <syntax>public nothrow abstract bool EndOfStream() const;</syntax>
                            <returnType ref="type.1579450"/>
                        </function>
                        <function id="member_function_Read_InputStream_3E924A8C5C07B4DB3929F035B7C89790369DD893">
                            <name>Read()</name>
                            <syntax>public abstract int Read();</syntax>
                            <returnType ref="type.1579455"/>
                        </function>
                        <function id="member_function_ReadLine_InputStream_98BB0109EF356D058A3DBE4817DF1AF984A57BE2">
                            <name>ReadLine()</name>
                            <syntax>public abstract String&lt;char> ReadLine();</syntax>
                            <returnType ref="type.1580238"/>
                        </function>
                        <function id="member_function_ReadToEnd_InputStream_ADEBA2FF8EA641934E7FC7A34C6F28693F58D7EB">
                            <name>ReadToEnd()</name>
                            <syntax>public abstract String&lt;char> ReadToEnd();</syntax>
                            <returnType ref="type.1580238"/>
                        </function>
                        <function id="move_assignment_op_assign_InputStream_AF663758DBDB898DA41A882A9DB7AAD2DF24B054">
                            <name>operator=(InputStream&amp;&amp; @p0)</name>
                            <syntax>public nothrow default void operator=(InputStream&amp;&amp; @p0);</syntax>
                            <parameters>
                                <parameter>
                                    <name>@p0</name>
                                    <type ref="type.1580490"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1580076">
                    <name>InputStringStream</name>
                    <groupName>InputStringStream</groupName>
                    <syntax> public class InputStringStream;</syntax>
                    <baseClass ref="1580056"/>
                    <constructors>
                        <constructor id="default_constructor_InputStringStream_E308EE8FCE946794596E4CDAAB2C9A7B674B836C">
                            <name>InputStringStream()</name>
                            <syntax>public nothrow InputStringStream();</syntax>
                        </constructor>
                        <constructor id="move_constructor_InputStringStream_D3FD377194155EA456283921A357D4A60DBC3272">
                            <name>InputStringStream(InputStringStream&amp;&amp; @p0)</name>
                            <syntax>public nothrow default InputStringStream(InputStringStream&amp;&amp; @p0);</syntax>
                            <parameters>
                                <parameter>
                                    <name>@p0</name>
                                    <type ref="type.1582273"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_InputStringStream_A78A1756586A4A65B8383DF364AB9C1EA0A0890D">
                            <name>InputStringStream(const String&lt;char>&amp; str_)</name>
                            <syntax>public nothrow InputStringStream(const String&lt;char>&amp; str_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>str_</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_EndOfStream_InputStringStream_EF0177354F8CBD424E2CA8E3F48C266CD759CD30">
                            <name>EndOfStream() const</name>
                            <syntax>public nothrow override bool EndOfStream() const;</syntax>
                            <returnType ref="type.1579450"/>
                        </function>
                        <function id="member_function_Read_InputStringStream_35DD009FA6D8F6DE45C1C7E7721D68BC6743E08D">
                            <name>Read()</name>
                            <syntax>public override int Read();</syntax>
                            <returnType ref="type.1579455"/>
                        </function>
                        <function id="member_function_ReadLine_InputStringStream_18005D51A30D5E4E6A106F5B0A72D4AFB048D7A0">
                            <name>ReadLine()</name>
                            <syntax>public override String&lt;char> ReadLine();</syntax>
                            <returnType ref="type.1580238"/>
                        </function>
                        <function id="member_function_ReadToEnd_InputStringStream_0FA2E58A37D4A53A755E9FD91743B6B560B76D01">
                            <name>ReadToEnd()</name>
                            <syntax>public override String&lt;char> ReadToEnd();</syntax>
                            <returnType ref="type.1580238"/>
                        </function>
                        <function id="member_function_SetStr_InputStringStream_794243427F33C70B7C8445EDB534AB80B4D72C36">
                            <name>SetStr(const String&lt;char>&amp; str_)</name>
                            <syntax>public nothrow void SetStr(const String&lt;char>&amp; str_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>str_</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Str_InputStringStream_F20453FF6A5ABB6B23F325073D2BA6DF77FC2D0C">
                            <name>Str() const</name>
                            <syntax>public nothrow inline const String&lt;char>&amp; Str() const;</syntax>
                            <returnType ref="type.1580258"/>
                        </function>
                        <function id="move_assignment_op_assign_InputStringStream_7F32901E547BFB5897F63EF38B1D30F75A9E2423">
                            <name>operator=(InputStringStream&amp;&amp; @p0)</name>
                            <syntax>public nothrow default void operator=(InputStringStream&amp;&amp; @p0);</syntax>
                            <parameters>
                                <parameter>
                                    <name>@p0</name>
                                    <type ref="type.1582273"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1580000">
                    <name>InvalidPathException</name>
                    <groupName>InvalidPathException</groupName>
                    <syntax> public class InvalidPathException;</syntax>
                    <baseClass ref="1579802"/>
                    <constructors>
                        <constructor id="constructor_InvalidPathException_0009AC36139F3F68F2A657B1F4AD4C2B90F89FD0">
                            <name>InvalidPathException(const String&lt;char>&amp; message_)</name>
                            <syntax>public nothrow InvalidPathException(const String&lt;char>&amp; message_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>message_</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                </class>
                <class id="1579977">
                    <name>MemoryByteStream</name>
                    <groupName>MemoryByteStream</groupName>
                    <syntax> public class MemoryByteStream;</syntax>
                    <baseClass ref="1579660"/>
                    <constructors>
                        <constructor id="default_constructor_MemoryByteStream_D4C674712CC0F0B5CDBDD339749D61EE9F48F051">
                            <name>MemoryByteStream()</name>
                            <syntax>public MemoryByteStream();</syntax>
                        </constructor>
                        <constructor id="move_constructor_MemoryByteStream_A312C35CF9E8FB67F61CED06EBB565948213F02F">
                            <name>MemoryByteStream(MemoryByteStream&amp;&amp; @p0)</name>
                            <syntax>public nothrow default MemoryByteStream(MemoryByteStream&amp;&amp; @p0);</syntax>
                            <parameters>
                                <parameter>
                                    <name>@p0</name>
                                    <type ref="type.1581537"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_MemoryByteStream_B44F50238BEAF5514E2AFA5CDFD0AEEA6DE03C91">
                            <name>MemoryByteStream(byte* data, long count)</name>
                            <syntax>public MemoryByteStream(byte* data, long count);</syntax>
                            <parameters>
                                <parameter>
                                    <name>data</name>
                                    <type ref="type.1579470"/>
                                </parameter>
                                <parameter>
                                    <name>count</name>
                                    <type ref="type.1579457"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Count_MemoryByteStream_34040823255DB957F9D719775B10DE8E8A8DE5F9">
                            <name>Count() const</name>
                            <syntax>public nothrow inline long Count() const;</syntax>
                            <returnType ref="type.1579457"/>
                        </function>
                        <function id="member_function_Data_MemoryByteStream_F05CDA4D0E77170FC1ED0DD78C826DD155AC8100">
                            <name>Data() const</name>
                            <syntax>public nothrow inline const byte* Data() const;</syntax>
                            <returnType ref="type.1581538"/>
                        </function>
                        <function id="member_function_Read_MemoryByteStream_A42A980BE289489969C04CD3ADB3A84981C46681">
                            <name>Read(byte* buf, long count)</name>
                            <syntax>public override long Read(byte* buf, long count);</syntax>
                            <parameters>
                                <parameter>
                                    <name>buf</name>
                                    <type ref="type.1579470"/>
                                </parameter>
                                <parameter>
                                    <name>count</name>
                                    <type ref="type.1579457"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579457"/>
                        </function>
                        <function id="member_function_ReadByte_MemoryByteStream_CE764D2E275BCC21DC474FFECB48B64295BCDB82">
                            <name>ReadByte()</name>
                            <syntax>public override int ReadByte();</syntax>
                            <returnType ref="type.1579455"/>
                        </function>
                        <function id="member_function_ReadPos_MemoryByteStream_454693B5F0F9B0671C0CE49608E18B0F1B329F9C">
                            <name>ReadPos() const</name>
                            <syntax>public nothrow inline long ReadPos() const;</syntax>
                            <returnType ref="type.1579457"/>
                        </function>
                        <function id="member_function_Seek_MemoryByteStream_68DFFE7C5E531FDB4693E549BFD16E742688DF71">
                            <name>Seek(long pos, Origin origin)</name>
                            <syntax>public override void Seek(long pos, Origin origin);</syntax>
                            <parameters>
                                <parameter>
                                    <name>pos</name>
                                    <type ref="type.1579457"/>
                                </parameter>
                                <parameter>
                                    <name>origin</name>
                                    <type ref="1579659"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Tell_MemoryByteStream_609680823D00A38FF4F449F36F09C0226814DE55">
                            <name>Tell()</name>
                            <syntax>public override long Tell();</syntax>
                            <returnType ref="type.1579457"/>
                        </function>
                        <function id="function_group_Write_B1B7FFB7EAEFE7D5736049A814054DF8D29C0A3D">
                            <name>Write</name>
                            <overloads>
                                <overload id="member_function_Write_MemoryByteStream_E30C18DA4B213548A37ED73D0C11B9A636883326">
                                    <name>Write(byte x)</name>
                                    <syntax>public override void Write(byte x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.1579452"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_MemoryByteStream_C74BFD856C29E1AB9BA1BF21842AC003415AB333">
                                    <name>Write(byte* buf, long count)</name>
                                    <syntax>public override void Write(byte* buf, long count);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>buf</name>
                                            <type ref="type.1579470"/>
                                        </parameter>
                                        <parameter>
                                            <name>count</name>
                                            <type ref="type.1579457"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="move_assignment_op_assign_MemoryByteStream_1A5761A4529DCBCFE74DAC7545678BDFC24B9228">
                            <name>operator=(MemoryByteStream&amp;&amp; @p0)</name>
                            <syntax>public nothrow default void operator=(MemoryByteStream&amp;&amp; @p0);</syntax>
                            <parameters>
                                <parameter>
                                    <name>@p0</name>
                                    <type ref="type.1581537"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1579822">
                    <name>OutputFileStream</name>
                    <groupName>OutputFileStream</groupName>
                    <syntax> public class OutputFileStream;</syntax>
                    <baseClass ref="1580060"/>
                    <constructors>
                        <constructor id="default_constructor_OutputFileStream_41DF3A83BF44C6B2A65CAF3A46B255BA115F98B7">
                            <name>OutputFileStream()</name>
                            <syntax>public nothrow OutputFileStream();</syntax>
                        </constructor>
                        <constructor id="move_constructor_OutputFileStream_BD7C043B3B807B427F418CA92BCB14A9FF679811">
                            <name>OutputFileStream(OutputFileStream&amp;&amp; that)</name>
                            <syntax>public nothrow OutputFileStream(OutputFileStream&amp;&amp; that);</syntax>
                            <parameters>
                                <parameter>
                                    <name>that</name>
                                    <type ref="type.1580496"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_OutputFileStream_89EE0264DEF49005BDDC8547D00AEC46881CB07D">
                            <name>OutputFileStream(const String&lt;char>&amp; filePath_)</name>
                            <syntax>public OutputFileStream(const String&lt;char>&amp; filePath_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>filePath_</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_OutputFileStream_8AFA770943F4B890C1B99EB8ED98BF6DD43F1B29">
                            <name>OutputFileStream(const String&lt;char>&amp; filePath_, OpenMode openMode)</name>
                            <syntax>public OutputFileStream(const String&lt;char>&amp; filePath_, OpenMode openMode);</syntax>
                            <parameters>
                                <parameter>
                                    <name>filePath_</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                                <parameter>
                                    <name>openMode</name>
                                    <type ref="1579811"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_OutputFileStream_3B98D3587FC4116AF9E477BA3329BEC3CFD2A668">
                            <name>OutputFileStream(int fileHandle_)</name>
                            <syntax>public nothrow OutputFileStream(int fileHandle_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>fileHandle_</name>
                                    <type ref="type.1579455"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Close_OutputFileStream_A40F48CCBA24D176C51016924FA0A79C12AD4FCF">
                            <name>Close()</name>
                            <syntax>public void Close();</syntax>
                        </function>
                        <function id="member_function_FileHandle_OutputFileStream_6070F44F17B594275A88D2C5174B1CBA57D3F319">
                            <name>FileHandle() const</name>
                            <syntax>public nothrow inline int FileHandle() const;</syntax>
                            <returnType ref="type.1579455"/>
                        </function>
                        <function id="member_function_FilePath_OutputFileStream_ACCD766DD86D74ECFAA8E9D42144A3D52C16D9DC">
                            <name>FilePath() const</name>
                            <syntax>public nothrow inline const String&lt;char>&amp; FilePath() const;</syntax>
                            <returnType ref="type.1580258"/>
                        </function>
                        <function id="member_function_Open_OutputFileStream_C3DCEFD24E63E476CF2290EC39BF9A4BE4CB8572">
                            <name>Open(const String&lt;char>&amp; filePath_, OpenMode openMode)</name>
                            <syntax>public void Open(const String&lt;char>&amp; filePath_, OpenMode openMode);</syntax>
                            <parameters>
                                <parameter>
                                    <name>filePath_</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                                <parameter>
                                    <name>openMode</name>
                                    <type ref="1579811"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Opened_OutputFileStream_5ADCF6AB706B3B1D7B479AFC9FA9F8F6B0438DE8">
                            <name>Opened() const</name>
                            <syntax>public nothrow inline bool Opened() const;</syntax>
                            <returnType ref="type.1579450"/>
                        </function>
                        <function id="function_group_Write_040BD90AADDF6CC373CC000B9EBB47AAED22DE2E">
                            <name>Write</name>
                            <overloads>
                                <overload id="member_function_Write_OutputFileStream_E07CAD8206FD94D8459A5A1C902FE7F7DFB591A4">
                                    <name>Write(bool b)</name>
                                    <syntax>public override void Write(bool b);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>b</name>
                                            <type ref="type.1579450"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputFileStream_45D2E59511EF932ACDF64517D7A7B4CE883FAE51">
                                    <name>Write(byte b)</name>
                                    <syntax>public override void Write(byte b);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>b</name>
                                            <type ref="type.1579452"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputFileStream_8399C5A438F207289390E71DBD9DCAA977C5576E">
                                    <name>Write(char c)</name>
                                    <syntax>public override void Write(char c);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>c</name>
                                            <type ref="type.1579461"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputFileStream_B9DE3072DF85BA810C6BDA3FCF7893F966D665EF">
                                    <name>Write(const String&lt;char>&amp; s)</name>
                                    <syntax>public override void Write(const String&lt;char>&amp; s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.1580258"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputFileStream_5D8FE40C37AEC66530436A4FF1AC1865BC58C26C">
                                    <name>Write(const String&lt;uchar>&amp; s)</name>
                                    <syntax>public override void Write(const String&lt;uchar>&amp; s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.1580383"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputFileStream_AB20D07758F4C00AD4064CF6CB62CE6879B62B48">
                                    <name>Write(const String&lt;wchar>&amp; s)</name>
                                    <syntax>public override void Write(const String&lt;wchar>&amp; s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.1580339"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputFileStream_972276CBEC07BE7E283137484AFDC29E45DACD0D">
                                    <name>Write(const char* s)</name>
                                    <syntax>public override void Write(const char* s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.1579514"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputFileStream_9525A6BB74DFE154EB90479A70D4C1ABCB2E7980">
                                    <name>Write(const uchar* s)</name>
                                    <syntax>public override void Write(const uchar* s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.1580367"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputFileStream_44EC11DAF513D16430D9495CAE8CC031691E76AE">
                                    <name>Write(const wchar* s)</name>
                                    <syntax>public override void Write(const wchar* s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.1580323"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputFileStream_93ADE14C88AB2169B5731EAD609757DEF63AF049">
                                    <name>Write(double d)</name>
                                    <syntax>public override void Write(double d);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>d</name>
                                            <type ref="type.1579460"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputFileStream_994B703E5E8D54BE0F9A8145F4CE8C278D063F38">
                                    <name>Write(float f)</name>
                                    <syntax>public override void Write(float f);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>f</name>
                                            <type ref="type.1579459"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputFileStream_283FE7905A1EA44A4128FC5E7FFEFA414D3AD79E">
                                    <name>Write(int i)</name>
                                    <syntax>public override void Write(int i);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>i</name>
                                            <type ref="type.1579455"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputFileStream_51CD7A081C2548F93BA7D250D3843C81B6669B90">
                                    <name>Write(long l)</name>
                                    <syntax>public override void Write(long l);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>l</name>
                                            <type ref="type.1579457"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputFileStream_D94FB9738889DBDC7F702479EDEE778217B6D793">
                                    <name>Write(sbyte s)</name>
                                    <syntax>public override void Write(sbyte s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.1579451"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputFileStream_736547D4736098C7653F778F55535AFEF3ED9D7E">
                                    <name>Write(short s)</name>
                                    <syntax>public override void Write(short s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.1579453"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputFileStream_BC8B945B31D78531C57141272C4C0E422A398438">
                                    <name>Write(uchar c)</name>
                                    <syntax>public override void Write(uchar c);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>c</name>
                                            <type ref="type.1579463"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputFileStream_221D8F40E71E8FEA7D32EC3D7BA402D224EED2DB">
                                    <name>Write(uint u)</name>
                                    <syntax>public override void Write(uint u);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>u</name>
                                            <type ref="type.1579456"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputFileStream_19212B37322C0AF2C8243CE669E67EB2F2D3EE3F">
                                    <name>Write(ulong u)</name>
                                    <syntax>public override void Write(ulong u);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>u</name>
                                            <type ref="type.1579458"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputFileStream_25D09804E1BD7B1DA74C8B67646D5B416D543251">
                                    <name>Write(ushort u)</name>
                                    <syntax>public override void Write(ushort u);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>u</name>
                                            <type ref="type.1579454"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputFileStream_DB2F61DA6EB19155ED341F61ABBDD97B0FA65383">
                                    <name>Write(wchar c)</name>
                                    <syntax>public override void Write(wchar c);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>c</name>
                                            <type ref="type.1579462"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_WriteLine_1BB327F6ADE3886899C7F36B262B58D09EF229AD">
                            <name>WriteLine</name>
                            <overloads>
                                <overload id="member_function_WriteLine_OutputFileStream_EECA0B198E735B767C83CF0496C2F1E969B60459">
                                    <name>WriteLine()</name>
                                    <syntax>public override void WriteLine();</syntax>
                                </overload>
                                <overload id="member_function_WriteLine_OutputFileStream_93BBA84F11EFA118E1B41C1EC0DA232A32195D31">
                                    <name>WriteLine(bool b)</name>
                                    <syntax>public override void WriteLine(bool b);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>b</name>
                                            <type ref="type.1579450"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputFileStream_6DB6D34E924E32B0BAE15D17830129999D436CAF">
                                    <name>WriteLine(byte b)</name>
                                    <syntax>public override void WriteLine(byte b);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>b</name>
                                            <type ref="type.1579452"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputFileStream_8E201B927C807E58B14ACBF6D29943B74CFF2BA7">
                                    <name>WriteLine(char c)</name>
                                    <syntax>public override void WriteLine(char c);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>c</name>
                                            <type ref="type.1579461"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputFileStream_AC77016B8D538970A08842242093C214C3F2EBDE">
                                    <name>WriteLine(const String&lt;char>&amp; s)</name>
                                    <syntax>public override void WriteLine(const String&lt;char>&amp; s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.1580258"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputFileStream_84B84B3324838748BBD74399E17DEAA46C03AE33">
                                    <name>WriteLine(const String&lt;uchar>&amp; s)</name>
                                    <syntax>public override void WriteLine(const String&lt;uchar>&amp; s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.1580383"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputFileStream_AE5832F4E5D6012D09D90CCCA0D68506F9A332C6">
                                    <name>WriteLine(const String&lt;wchar>&amp; s)</name>
                                    <syntax>public override void WriteLine(const String&lt;wchar>&amp; s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.1580339"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputFileStream_5795630D9948805160B9B97C9061312FB74C7215">
                                    <name>WriteLine(const char* s)</name>
                                    <syntax>public override void WriteLine(const char* s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.1579514"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputFileStream_5C6AB8A5FFB5F1E410FDE3ED29537BDC349085BE">
                                    <name>WriteLine(const uchar* s)</name>
                                    <syntax>public override void WriteLine(const uchar* s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.1580367"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputFileStream_33F11D7948FB498B372BAA347072B4493C2F16C9">
                                    <name>WriteLine(const wchar* s)</name>
                                    <syntax>public override void WriteLine(const wchar* s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.1580323"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputFileStream_0AD27FE5AD6D4BE9529ECBD600D38902FBEBD0C1">
                                    <name>WriteLine(double d)</name>
                                    <syntax>public override void WriteLine(double d);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>d</name>
                                            <type ref="type.1579460"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputFileStream_70CCD9B8FB21BA8F6FC48ED558F1FCDDE3A902CD">
                                    <name>WriteLine(float f)</name>
                                    <syntax>public override void WriteLine(float f);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>f</name>
                                            <type ref="type.1579459"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputFileStream_EAE090195E4500D6672321E8F085827F35106DDF">
                                    <name>WriteLine(int i)</name>
                                    <syntax>public override void WriteLine(int i);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>i</name>
                                            <type ref="type.1579455"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputFileStream_B5D58C42083B9BFAF1E7F4C50A47483851856C74">
                                    <name>WriteLine(long l)</name>
                                    <syntax>public override void WriteLine(long l);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>l</name>
                                            <type ref="type.1579457"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputFileStream_81966467470FD62EBFFC2013C9EC1DC0B2D78F9F">
                                    <name>WriteLine(sbyte s)</name>
                                    <syntax>public override void WriteLine(sbyte s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.1579451"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputFileStream_D05C9B3E0C9ED554AF1A80B4FF619DF6C25E5520">
                                    <name>WriteLine(short s)</name>
                                    <syntax>public override void WriteLine(short s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.1579453"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputFileStream_D7DB0B45F46C166BE9E911B61A08B0073FD741B4">
                                    <name>WriteLine(uchar c)</name>
                                    <syntax>public override void WriteLine(uchar c);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>c</name>
                                            <type ref="type.1579463"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputFileStream_A7A765085691A6465F2CDF7D13F3E1912B6F5DC2">
                                    <name>WriteLine(uint u)</name>
                                    <syntax>public override void WriteLine(uint u);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>u</name>
                                            <type ref="type.1579456"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputFileStream_937907CEC2221007F2C43F77A8B208997E7AA809">
                                    <name>WriteLine(ulong u)</name>
                                    <syntax>public override void WriteLine(ulong u);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>u</name>
                                            <type ref="type.1579458"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputFileStream_F33516150A1B7A8D1AC11DA9A8695D080E9C3380">
                                    <name>WriteLine(ushort u)</name>
                                    <syntax>public override void WriteLine(ushort u);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>u</name>
                                            <type ref="type.1579454"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputFileStream_D7AB0B4BBE44060D5E853E3FBDF89A07B00AABDD">
                                    <name>WriteLine(wchar c)</name>
                                    <syntax>public override void WriteLine(wchar c);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>c</name>
                                            <type ref="type.1579462"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="move_assignment_op_assign_OutputFileStream_FB33B27C7E6C035F64565D166E76FA3805E970FD">
                            <name>operator=(OutputFileStream&amp;&amp; @p0)</name>
                            <syntax>public nothrow default void operator=(OutputFileStream&amp;&amp; @p0);</syntax>
                            <parameters>
                                <parameter>
                                    <name>@p0</name>
                                    <type ref="type.1580496"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1580060">
                    <name>OutputStream</name>
                    <groupName>OutputStream</groupName>
                    <syntax>abstract public class OutputStream;</syntax>
                    <constructors>
                        <constructor id="default_constructor_OutputStream_9717706E7E516F622EBF564BB05E8D84C42E6449">
                            <name>OutputStream()</name>
                            <syntax>public nothrow default OutputStream();</syntax>
                        </constructor>
                        <constructor id="move_constructor_OutputStream_78D26119EA2468CCD190FA508BE342A5750B255D">
                            <name>OutputStream(OutputStream&amp;&amp; @p0)</name>
                            <syntax>public nothrow default OutputStream(OutputStream&amp;&amp; @p0);</syntax>
                            <parameters>
                                <parameter>
                                    <name>@p0</name>
                                    <type ref="type.1580494"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="function_group_Write_189DB08CED127A1B6274DD212E8644767105EC7C">
                            <name>Write</name>
                            <overloads>
                                <overload id="member_function_Write_OutputStream_F241FF4731110C8A2FA0401A54B6169129AEAD65">
                                    <name>Write(bool b)</name>
                                    <syntax>public abstract void Write(bool b);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>b</name>
                                            <type ref="type.1579450"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStream_4C79F03EA108188534CBA31771D339DF1E5DE3A9">
                                    <name>Write(byte b)</name>
                                    <syntax>public abstract void Write(byte b);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>b</name>
                                            <type ref="type.1579452"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStream_2AC43272071C47BBC77FD399BB96F6AE663AA0A8">
                                    <name>Write(char c)</name>
                                    <syntax>public abstract void Write(char c);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>c</name>
                                            <type ref="type.1579461"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStream_FE237A2CD12AFACC0433DA63E59C8B2EED7EF816">
                                    <name>Write(const String&lt;char>&amp; s)</name>
                                    <syntax>public abstract void Write(const String&lt;char>&amp; s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.1580258"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStream_BCA89A14B38B84F2518D3F334C7C53BDA8310E20">
                                    <name>Write(const String&lt;uchar>&amp; s)</name>
                                    <syntax>public abstract void Write(const String&lt;uchar>&amp; s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.1580383"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStream_2D93CDA2859CAC0D0B03CF18A57DA0686DF075AF">
                                    <name>Write(const String&lt;wchar>&amp; s)</name>
                                    <syntax>public abstract void Write(const String&lt;wchar>&amp; s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.1580339"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStream_14381E50002DA57FA60435068EC59336539E4336">
                                    <name>Write(const char* s)</name>
                                    <syntax>public abstract void Write(const char* s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.1579514"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStream_E5E8FEAE93DE2BEB1C7B1A5565856BA351F8CF0E">
                                    <name>Write(const uchar* s)</name>
                                    <syntax>public abstract void Write(const uchar* s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.1580367"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStream_645CD4BB53ADD4FFA6DDBC11122EDD501E45A2AE">
                                    <name>Write(const wchar* s)</name>
                                    <syntax>public abstract void Write(const wchar* s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.1580323"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStream_E84F5BF2CE2855E02AA424CFD622630ECFDE366B">
                                    <name>Write(double d)</name>
                                    <syntax>public abstract void Write(double d);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>d</name>
                                            <type ref="type.1579460"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStream_10BB29CC18D44EB86F582E957118C9925EF27ADA">
                                    <name>Write(float f)</name>
                                    <syntax>public abstract void Write(float f);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>f</name>
                                            <type ref="type.1579459"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStream_CF5AE02C47D0DADA399E97625AD877CD20296E05">
                                    <name>Write(int i)</name>
                                    <syntax>public abstract void Write(int i);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>i</name>
                                            <type ref="type.1579455"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStream_084C20C518BB23F8DBB5888683753710F9B9A7F5">
                                    <name>Write(long l)</name>
                                    <syntax>public abstract void Write(long l);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>l</name>
                                            <type ref="type.1579457"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStream_CED0AE5CF45015272BB34134D2EB53080E00B9D8">
                                    <name>Write(sbyte s)</name>
                                    <syntax>public abstract void Write(sbyte s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.1579451"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStream_263B5DF158BE603ADC3F7615B6E304BD58B26AAD">
                                    <name>Write(short s)</name>
                                    <syntax>public abstract void Write(short s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.1579453"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStream_6DC04E8AFDE36F6614CF1F1BFD7CE1FE51255FF3">
                                    <name>Write(uchar c)</name>
                                    <syntax>public abstract void Write(uchar c);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>c</name>
                                            <type ref="type.1579463"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStream_FD5E635B53DC75C29A751204A7322C674250B9F1">
                                    <name>Write(uint u)</name>
                                    <syntax>public abstract void Write(uint u);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>u</name>
                                            <type ref="type.1579456"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStream_8ABFE3BF010613E18223C1CF3374D3183EBDBC0F">
                                    <name>Write(ulong u)</name>
                                    <syntax>public abstract void Write(ulong u);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>u</name>
                                            <type ref="type.1579458"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStream_2710022DCA96CC490A4057F08D2DA0E5AFFD5083">
                                    <name>Write(ushort u)</name>
                                    <syntax>public abstract void Write(ushort u);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>u</name>
                                            <type ref="type.1579454"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStream_321FA1AB9A790DEBA67BC46C202106CF29B43CF2">
                                    <name>Write(wchar c)</name>
                                    <syntax>public abstract void Write(wchar c);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>c</name>
                                            <type ref="type.1579462"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_WriteLine_40C09EEBF21ABB674DBD23C3173AC7AD906D7C25">
                            <name>WriteLine</name>
                            <overloads>
                                <overload id="member_function_WriteLine_OutputStream_A1C626A588CF5C150737D66E04D529E4BDD75A74">
                                    <name>WriteLine()</name>
                                    <syntax>public abstract void WriteLine();</syntax>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStream_DBB82ECCC0F44DDC02F8BC30417C12F91ED1C58A">
                                    <name>WriteLine(bool b)</name>
                                    <syntax>public abstract void WriteLine(bool b);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>b</name>
                                            <type ref="type.1579450"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStream_A20B9BD7A5F67A45F48CA30D26E44E62E595603E">
                                    <name>WriteLine(byte b)</name>
                                    <syntax>public abstract void WriteLine(byte b);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>b</name>
                                            <type ref="type.1579452"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStream_E487F80977733522AD5345B22FD5FDD2067353CA">
                                    <name>WriteLine(char c)</name>
                                    <syntax>public abstract void WriteLine(char c);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>c</name>
                                            <type ref="type.1579461"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStream_DD08702CFFDA4D40ED5AD6BCA11811782D9462C2">
                                    <name>WriteLine(const String&lt;char>&amp; s)</name>
                                    <syntax>public abstract void WriteLine(const String&lt;char>&amp; s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.1580258"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStream_12D3BFF746EE0551E34567E7BD3486BF5339BDAB">
                                    <name>WriteLine(const String&lt;uchar>&amp; s)</name>
                                    <syntax>public abstract void WriteLine(const String&lt;uchar>&amp; s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.1580383"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStream_EABCFB9CE867A7B33198944E8CAAD397931C4E5F">
                                    <name>WriteLine(const String&lt;wchar>&amp; s)</name>
                                    <syntax>public abstract void WriteLine(const String&lt;wchar>&amp; s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.1580339"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStream_4FB0F1757F6B8C2F59A073817EDD001E71AC90AC">
                                    <name>WriteLine(const char* s)</name>
                                    <syntax>public abstract void WriteLine(const char* s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.1579514"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStream_605965794173F719977C43C40DCBB7EAE752E967">
                                    <name>WriteLine(const uchar* s)</name>
                                    <syntax>public abstract void WriteLine(const uchar* s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.1580367"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStream_9521351A816AA02134A4B26D09306276D1BF5B2B">
                                    <name>WriteLine(const wchar* s)</name>
                                    <syntax>public abstract void WriteLine(const wchar* s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.1580323"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStream_F469F229CCAEE14D835D19087353D46A310E8582">
                                    <name>WriteLine(double d)</name>
                                    <syntax>public abstract void WriteLine(double d);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>d</name>
                                            <type ref="type.1579460"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStream_BDECEB1EB819F38921A695A24E873DBA55B4E2E4">
                                    <name>WriteLine(float f)</name>
                                    <syntax>public abstract void WriteLine(float f);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>f</name>
                                            <type ref="type.1579459"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStream_A783F07F95AAEBC3C6120C3EA20D4DA451562633">
                                    <name>WriteLine(int i)</name>
                                    <syntax>public abstract void WriteLine(int i);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>i</name>
                                            <type ref="type.1579455"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStream_520C161212D27DC2140677E10AE943E78059890E">
                                    <name>WriteLine(long l)</name>
                                    <syntax>public abstract void WriteLine(long l);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>l</name>
                                            <type ref="type.1579457"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStream_F38F53441D2C83BF85C60269EDB0CCF8E3E7E243">
                                    <name>WriteLine(sbyte s)</name>
                                    <syntax>public abstract void WriteLine(sbyte s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.1579451"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStream_A1CFDFDA4FB88475B8B65A5F6C41D927DD936761">
                                    <name>WriteLine(short s)</name>
                                    <syntax>public abstract void WriteLine(short s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.1579453"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStream_122B46FFEA55338D27C9427ED332CD44958D5B66">
                                    <name>WriteLine(uchar c)</name>
                                    <syntax>public abstract void WriteLine(uchar c);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>c</name>
                                            <type ref="type.1579463"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStream_4C732656D3B17B032C90CFB603D63E235F050C68">
                                    <name>WriteLine(uint u)</name>
                                    <syntax>public abstract void WriteLine(uint u);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>u</name>
                                            <type ref="type.1579456"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStream_3FD8E7B119F957AA6E2257066FFA928E6469EF91">
                                    <name>WriteLine(ulong u)</name>
                                    <syntax>public abstract void WriteLine(ulong u);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>u</name>
                                            <type ref="type.1579458"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStream_E658D2A94A8DD5DC25A755EE3011032DC892AC54">
                                    <name>WriteLine(ushort u)</name>
                                    <syntax>public abstract void WriteLine(ushort u);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>u</name>
                                            <type ref="type.1579454"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStream_4C64D22BEDDF6DFC90B27A3BA170F3C2402FA13E">
                                    <name>WriteLine(wchar c)</name>
                                    <syntax>public abstract void WriteLine(wchar c);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>c</name>
                                            <type ref="type.1579462"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="move_assignment_op_assign_OutputStream_B4C7791665430951D4B05B8DD50776C069710A09">
                            <name>operator=(OutputStream&amp;&amp; @p0)</name>
                            <syntax>public nothrow default void operator=(OutputStream&amp;&amp; @p0);</syntax>
                            <parameters>
                                <parameter>
                                    <name>@p0</name>
                                    <type ref="type.1580494"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1580080">
                    <name>OutputStringStream</name>
                    <groupName>OutputStringStream</groupName>
                    <syntax> public class OutputStringStream;</syntax>
                    <baseClass ref="1580060"/>
                    <constructors>
                        <constructor id="default_constructor_OutputStringStream_C3D16FD003F2010C06863EB267EE0F3086C1E608">
                            <name>OutputStringStream()</name>
                            <syntax>public nothrow OutputStringStream();</syntax>
                        </constructor>
                        <constructor id="move_constructor_OutputStringStream_F920A5D954C98A480C95BAB026AD512F5F605027">
                            <name>OutputStringStream(OutputStringStream&amp;&amp; @p0)</name>
                            <syntax>public nothrow default OutputStringStream(OutputStringStream&amp;&amp; @p0);</syntax>
                            <parameters>
                                <parameter>
                                    <name>@p0</name>
                                    <type ref="type.1582275"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_OutputStringStream_C0EFF38BBCC371B12D6273F0FCF7E22A93CDBF34">
                            <name>OutputStringStream(const String&lt;char>&amp; str_)</name>
                            <syntax>public nothrow OutputStringStream(const String&lt;char>&amp; str_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>str_</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_SetStr_OutputStringStream_8B184DEC00128553967C9E939646EF2C26FC5ACF">
                            <name>SetStr(const String&lt;char>&amp; str_)</name>
                            <syntax>public nothrow void SetStr(const String&lt;char>&amp; str_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>str_</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Str_OutputStringStream_9B4AE16D57AD12C6871283FA13C1A504A02589D9">
                            <name>Str() const</name>
                            <syntax>public nothrow inline const String&lt;char>&amp; Str() const;</syntax>
                            <returnType ref="type.1580258"/>
                        </function>
                        <function id="function_group_Write_DDA0B26C940EDAC0307A2199A41F6D562BFFCD81">
                            <name>Write</name>
                            <overloads>
                                <overload id="member_function_Write_OutputStringStream_29A2E31F6CFEE166DBCC151D2B4F1DEA4BABE403">
                                    <name>Write(bool b)</name>
                                    <syntax>public override void Write(bool b);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>b</name>
                                            <type ref="type.1579450"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStringStream_F9EDE2E2E47E0E795E3801CAB1CBE2EBFE324426">
                                    <name>Write(byte b)</name>
                                    <syntax>public override void Write(byte b);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>b</name>
                                            <type ref="type.1579452"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStringStream_47C9D17B1D42A5D294809DDC686BC159FA0E88B2">
                                    <name>Write(char c)</name>
                                    <syntax>public override void Write(char c);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>c</name>
                                            <type ref="type.1579461"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStringStream_10D5A005E25639D2A350913A12D293281F3207A2">
                                    <name>Write(const String&lt;char>&amp; s)</name>
                                    <syntax>public override void Write(const String&lt;char>&amp; s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.1580258"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStringStream_3384B169F360AB4039F3C4349AB2ADAD30E6E59C">
                                    <name>Write(const String&lt;uchar>&amp; s)</name>
                                    <syntax>public override void Write(const String&lt;uchar>&amp; s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.1580383"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStringStream_39B78D99712437846F61C478B36B22C1E512F4C5">
                                    <name>Write(const String&lt;wchar>&amp; s)</name>
                                    <syntax>public override void Write(const String&lt;wchar>&amp; s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.1580339"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStringStream_D1316C7DA80CE17313888F8A3B0E221E4A6CF077">
                                    <name>Write(const char* s)</name>
                                    <syntax>public override void Write(const char* s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.1579514"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStringStream_81D82A9E45E95C3743AF5734B051D9EA491C329B">
                                    <name>Write(const uchar* s)</name>
                                    <syntax>public override void Write(const uchar* s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.1580367"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStringStream_E0CC2A0CD975EB41F02F994A8A0BE6C72548BD7E">
                                    <name>Write(const wchar* s)</name>
                                    <syntax>public override void Write(const wchar* s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.1580323"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStringStream_37A5414BD176A891323B5C6F2D417F2720229AE7">
                                    <name>Write(double d)</name>
                                    <syntax>public override void Write(double d);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>d</name>
                                            <type ref="type.1579460"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStringStream_A645C20C15488ED794890239A63251730A0475A7">
                                    <name>Write(float f)</name>
                                    <syntax>public override void Write(float f);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>f</name>
                                            <type ref="type.1579459"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStringStream_D8C835A8FBE725F363F5C495E0446DB97E9AEFB5">
                                    <name>Write(int i)</name>
                                    <syntax>public override void Write(int i);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>i</name>
                                            <type ref="type.1579455"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStringStream_2AF176EF0DF40024EEB65006149C84572AE468DA">
                                    <name>Write(long l)</name>
                                    <syntax>public override void Write(long l);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>l</name>
                                            <type ref="type.1579457"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStringStream_CD5FBFDFC404D95A2F23CC8043C8667FC8A26652">
                                    <name>Write(sbyte s)</name>
                                    <syntax>public override void Write(sbyte s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.1579451"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStringStream_92D1E8E0514FF044EFE02C3F289431D4976EF73B">
                                    <name>Write(short s)</name>
                                    <syntax>public override void Write(short s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.1579453"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStringStream_572A2135155D3E1E31A6717C0D89723F904CA8C3">
                                    <name>Write(uchar c)</name>
                                    <syntax>public override void Write(uchar c);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>c</name>
                                            <type ref="type.1579463"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStringStream_BAC361697C6C20303A78FA97CA6A200B019C151B">
                                    <name>Write(uint u)</name>
                                    <syntax>public override void Write(uint u);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>u</name>
                                            <type ref="type.1579456"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStringStream_0F0B7A96E1325C69E16E8F12BDE80A76FCCEF5C1">
                                    <name>Write(ulong u)</name>
                                    <syntax>public override void Write(ulong u);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>u</name>
                                            <type ref="type.1579458"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStringStream_C240ACFC3702B22217A41E2B5E7340B5A555BD53">
                                    <name>Write(ushort u)</name>
                                    <syntax>public override void Write(ushort u);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>u</name>
                                            <type ref="type.1579454"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_OutputStringStream_1CADD06A33D310560BEAD63B5750B631F4F105D9">
                                    <name>Write(wchar c)</name>
                                    <syntax>public override void Write(wchar c);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>c</name>
                                            <type ref="type.1579462"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_WriteLine_45E9BA38BEDF55C2D89BF5D6C2C6D35E89C8600A">
                            <name>WriteLine</name>
                            <overloads>
                                <overload id="member_function_WriteLine_OutputStringStream_62153AED1CAF3A4D2DD867AD44261B6B3E75B34C">
                                    <name>WriteLine()</name>
                                    <syntax>public override void WriteLine();</syntax>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStringStream_22CE311F697DB6ED32922BF56AD39589488BF03D">
                                    <name>WriteLine(bool b)</name>
                                    <syntax>public override void WriteLine(bool b);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>b</name>
                                            <type ref="type.1579450"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStringStream_B1C14F768B651C6A17CBD10EEECAD952E9F0FA0C">
                                    <name>WriteLine(byte b)</name>
                                    <syntax>public override void WriteLine(byte b);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>b</name>
                                            <type ref="type.1579452"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStringStream_4080EFC70D133C9251BADDA65F1F5CFC63AE1B77">
                                    <name>WriteLine(char c)</name>
                                    <syntax>public override void WriteLine(char c);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>c</name>
                                            <type ref="type.1579461"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStringStream_194F3593621CB5073C1F2AFC433D2B686900C741">
                                    <name>WriteLine(const String&lt;char>&amp; s)</name>
                                    <syntax>public override void WriteLine(const String&lt;char>&amp; s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.1580258"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStringStream_4067A8B3435C642EB52F1C27C796B86792B3C08F">
                                    <name>WriteLine(const String&lt;uchar>&amp; s)</name>
                                    <syntax>public override void WriteLine(const String&lt;uchar>&amp; s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.1580383"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStringStream_4DB25202A5271CE5B68E07D4BD1515C2CE322259">
                                    <name>WriteLine(const String&lt;wchar>&amp; s)</name>
                                    <syntax>public override void WriteLine(const String&lt;wchar>&amp; s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.1580339"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStringStream_80C1C25F00813E99AA5FAEC76A4DEDC7767DD652">
                                    <name>WriteLine(const char* s)</name>
                                    <syntax>public override void WriteLine(const char* s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.1579514"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStringStream_C6AF10A1F7952F8017919A9CEFF06F12CCED25FB">
                                    <name>WriteLine(const uchar* s)</name>
                                    <syntax>public override void WriteLine(const uchar* s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.1580367"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStringStream_01BDAB315C160780AE11F5AC0A616952154FE485">
                                    <name>WriteLine(const wchar* s)</name>
                                    <syntax>public override void WriteLine(const wchar* s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.1580323"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStringStream_22E282B7621B76BE622E6230A35C87FA0922959D">
                                    <name>WriteLine(double d)</name>
                                    <syntax>public override void WriteLine(double d);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>d</name>
                                            <type ref="type.1579460"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStringStream_16379A13B9AA49502A872D575A727B9A293E20B6">
                                    <name>WriteLine(float f)</name>
                                    <syntax>public override void WriteLine(float f);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>f</name>
                                            <type ref="type.1579459"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStringStream_D9E98A1E3E13539A4A1E570E8C8BFE0EDC27A4DE">
                                    <name>WriteLine(int i)</name>
                                    <syntax>public override void WriteLine(int i);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>i</name>
                                            <type ref="type.1579455"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStringStream_8AA2A463A88077EC6CE5E0CE1A876598C726826C">
                                    <name>WriteLine(long l)</name>
                                    <syntax>public override void WriteLine(long l);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>l</name>
                                            <type ref="type.1579457"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStringStream_5918C0D08C6B974EA3636B47E9A2FD8BBE861B12">
                                    <name>WriteLine(sbyte s)</name>
                                    <syntax>public override void WriteLine(sbyte s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.1579451"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStringStream_6BAB20CB8319B3D8E1D7004B002DFD9B15BABD5D">
                                    <name>WriteLine(short s)</name>
                                    <syntax>public override void WriteLine(short s);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>s</name>
                                            <type ref="type.1579453"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStringStream_F5DAEEDD5D47B14DE0F4F1EB2B12C9E177B26C30">
                                    <name>WriteLine(uchar c)</name>
                                    <syntax>public override void WriteLine(uchar c);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>c</name>
                                            <type ref="type.1579463"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStringStream_A2A5C1C44DE5154D67977EC9C39D96533A393EED">
                                    <name>WriteLine(uint u)</name>
                                    <syntax>public override void WriteLine(uint u);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>u</name>
                                            <type ref="type.1579456"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStringStream_1EA95BCA4F5A25539A30F2FC8BFCF491FEF9733B">
                                    <name>WriteLine(ulong u)</name>
                                    <syntax>public override void WriteLine(ulong u);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>u</name>
                                            <type ref="type.1579458"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStringStream_BA428FBD6A1EE2BE0D4963B88C87BF7AC75E39F7">
                                    <name>WriteLine(ushort u)</name>
                                    <syntax>public override void WriteLine(ushort u);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>u</name>
                                            <type ref="type.1579454"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_OutputStringStream_580BE7E08BBCE4D9270834B9D19AEF50385E91F8">
                                    <name>WriteLine(wchar c)</name>
                                    <syntax>public override void WriteLine(wchar c);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>c</name>
                                            <type ref="type.1579462"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="move_assignment_op_assign_OutputStringStream_6774B729B1EA2C9F411D3E58876305CACA763BB6">
                            <name>operator=(OutputStringStream&amp;&amp; @p0)</name>
                            <syntax>public nothrow default void operator=(OutputStringStream&amp;&amp; @p0);</syntax>
                            <parameters>
                                <parameter>
                                    <name>@p0</name>
                                    <type ref="type.1582275"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1580002">
                    <name>Path</name>
                    <groupName>Path</groupName>
                    <syntax> public static class Path;</syntax>
                    <staticMemberFunctions>
                        <function id="member_function_ChangeExtension_Path_FE18DB61DE92E21F825C5D138FDD4A726C75DAD5">
                            <name>ChangeExtension(const String&lt;char>&amp; path, const String&lt;char>&amp; extension)</name>
                            <syntax>public static nothrow String&lt;char> ChangeExtension(const String&lt;char>&amp; path, const String&lt;char>&amp; extension);</syntax>
                            <parameters>
                                <parameter>
                                    <name>path</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                                <parameter>
                                    <name>extension</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580238"/>
                        </function>
                        <function id="member_function_Combine_Path_EEE5590F5182CEE3714A9225C9FCFFC05A6B6921">
                            <name>Combine(const String&lt;char>&amp; path1, const String&lt;char>&amp; path2)</name>
                            <syntax>public static nothrow String&lt;char> Combine(const String&lt;char>&amp; path1, const String&lt;char>&amp; path2);</syntax>
                            <parameters>
                                <parameter>
                                    <name>path1</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                                <parameter>
                                    <name>path2</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580238"/>
                        </function>
                        <function id="member_function_GetDirectoryName_Path_0D159749B0A641F90F6DEBEC1C543D2199787AF1">
                            <name>GetDirectoryName(const String&lt;char>&amp; path)</name>
                            <syntax>public static nothrow String&lt;char> GetDirectoryName(const String&lt;char>&amp; path);</syntax>
                            <parameters>
                                <parameter>
                                    <name>path</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580238"/>
                        </function>
                        <function id="member_function_GetExtension_Path_55BED9B5DA43E33150A50E8B7FF94DF3AB269C55">
                            <name>GetExtension(const String&lt;char>&amp; path)</name>
                            <syntax>public static nothrow String&lt;char> GetExtension(const String&lt;char>&amp; path);</syntax>
                            <parameters>
                                <parameter>
                                    <name>path</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580238"/>
                        </function>
                        <function id="member_function_GetFileName_Path_D28BB26E9970CF2D0DAD8DD68FAB4EDB431FEBC9">
                            <name>GetFileName(const String&lt;char>&amp; path)</name>
                            <syntax>public static nothrow String&lt;char> GetFileName(const String&lt;char>&amp; path);</syntax>
                            <parameters>
                                <parameter>
                                    <name>path</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580238"/>
                        </function>
                        <function id="member_function_GetFileNameWithoutExtension_Path_E04D0F05773D663FB286C284C3776D2988B83A28">
                            <name>GetFileNameWithoutExtension(const String&lt;char>&amp; path)</name>
                            <syntax>public static nothrow String&lt;char> GetFileNameWithoutExtension(const String&lt;char>&amp; path);</syntax>
                            <parameters>
                                <parameter>
                                    <name>path</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580238"/>
                        </function>
                        <function id="member_function_GetParent_Path_A8D66872339722D01C96331356331EEFBD27FA57">
                            <name>GetParent(const String&lt;char>&amp; path)</name>
                            <syntax>public static String&lt;char> GetParent(const String&lt;char>&amp; path);</syntax>
                            <parameters>
                                <parameter>
                                    <name>path</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580238"/>
                        </function>
                        <function id="member_function_HasExtension_Path_D1659726FDEA62078FFD294D264B739299A88728">
                            <name>HasExtension(const String&lt;char>&amp; path)</name>
                            <syntax>public static nothrow bool HasExtension(const String&lt;char>&amp; path);</syntax>
                            <parameters>
                                <parameter>
                                    <name>path</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </function>
                        <function id="member_function_IsAbsolute_Path_5876B9C7624B8A41143795D78464A7ECA8FB2E09">
                            <name>IsAbsolute(const String&lt;char>&amp; path)</name>
                            <syntax>public static nothrow bool IsAbsolute(const String&lt;char>&amp; path);</syntax>
                            <parameters>
                                <parameter>
                                    <name>path</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </function>
                        <function id="member_function_IsRelative_Path_A1A23B45BD691E61B6F198FB1A468047548AB6F7">
                            <name>IsRelative(const String&lt;char>&amp; path)</name>
                            <syntax>public static nothrow bool IsRelative(const String&lt;char>&amp; path);</syntax>
                            <parameters>
                                <parameter>
                                    <name>path</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </function>
                        <function id="member_function_MakeCanonical_Path_91E7748771C9AB443ABB765C39E339EB93F8BD13">
                            <name>MakeCanonical(const String&lt;char>&amp; path)</name>
                            <syntax>public static nothrow String&lt;char> MakeCanonical(const String&lt;char>&amp; path);</syntax>
                            <parameters>
                                <parameter>
                                    <name>path</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580238"/>
                        </function>
                    </staticMemberFunctions>
                </class>
                <class id="1580064">
                    <name>StreamReader</name>
                    <groupName>StreamReader</groupName>
                    <syntax> public class StreamReader;</syntax>
                    <constructors>
                        <constructor id="move_constructor_StreamReader_AF8E071BF8478282DD14914255D57C86BA21CA6E">
                            <name>StreamReader(StreamReader&amp;&amp; @p0)</name>
                            <syntax>public nothrow default StreamReader(StreamReader&amp;&amp; @p0);</syntax>
                            <parameters>
                                <parameter>
                                    <name>@p0</name>
                                    <type ref="type.1581953"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_StreamReader_C37EC3A482A8C39B8F850C7A521F9FF72D81F2BB">
                            <name>StreamReader(UniquePtr&lt;System.IO.ByteStream>&amp;&amp; stream_)</name>
                            <syntax>public StreamReader(UniquePtr&lt;System.IO.ByteStream>&amp;&amp; stream_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>stream_</name>
                                    <type ref="type.1580310"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_ContainedStream_StreamReader_8B92431926A60AD5BC4D7E92BDEFE35A531B860E">
                            <name>ContainedStream()</name>
                            <syntax>public ByteStream&amp; ContainedStream();</syntax>
                            <returnType ref="type.1580312"/>
                        </function>
                        <function id="member_function_Peek_StreamReader_8C7A5A22C2FB3890FA94BAB9735FCA167702A7F6">
                            <name>Peek()</name>
                            <syntax>public int Peek();</syntax>
                            <returnType ref="type.1579455"/>
                        </function>
                        <function id="member_function_PutBack_StreamReader_EFDC78F77A20B864B8AF47F2A4F2CCAB6616D63C">
                            <name>PutBack(byte b)</name>
                            <syntax>public void PutBack(byte b);</syntax>
                            <parameters>
                                <parameter>
                                    <name>b</name>
                                    <type ref="type.1579452"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Read_StreamReader_E63E627889CCE346F441A3011D212F273219B3C0">
                            <name>Read()</name>
                            <syntax>public int Read();</syntax>
                            <returnType ref="type.1579455"/>
                        </function>
                        <function id="member_function_ReadLine_StreamReader_9BF8D209DC6D7233678E4026C4D3AC5000CAE57B">
                            <name>ReadLine()</name>
                            <syntax>public String&lt;char> ReadLine();</syntax>
                            <returnType ref="type.1580238"/>
                        </function>
                        <function id="member_function_ReadToEnd_StreamReader_1BA4CAC8B6B7E8346C8F6A672F32398DC8D4C75C">
                            <name>ReadToEnd()</name>
                            <syntax>public String&lt;char> ReadToEnd();</syntax>
                            <returnType ref="type.1580238"/>
                        </function>
                        <function id="move_assignment_op_assign_StreamReader_1778D878EED57302F31004904C3B2DB87DCBFD64">
                            <name>operator=(StreamReader&amp;&amp; @p0)</name>
                            <syntax>public nothrow default void operator=(StreamReader&amp;&amp; @p0);</syntax>
                            <parameters>
                                <parameter>
                                    <name>@p0</name>
                                    <type ref="type.1581953"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
                <class id="1580066">
                    <name>StreamWriter</name>
                    <groupName>StreamWriter</groupName>
                    <syntax> public class StreamWriter;</syntax>
                    <constructors>
                        <constructor id="move_constructor_StreamWriter_7F590E0D8CEE2E1F4E335A43340EF6724E1D32E6">
                            <name>StreamWriter(StreamWriter&amp;&amp; @p0)</name>
                            <syntax>public nothrow default StreamWriter(StreamWriter&amp;&amp; @p0);</syntax>
                            <parameters>
                                <parameter>
                                    <name>@p0</name>
                                    <type ref="type.1581956"/>
                                </parameter>
                            </parameters>
                        </constructor>
                        <constructor id="constructor_StreamWriter_A40CD61AFDF96444B2CB8496C92C2CA3663DD81F">
                            <name>StreamWriter(UniquePtr&lt;System.IO.ByteStream>&amp;&amp; stream_)</name>
                            <syntax>public StreamWriter(UniquePtr&lt;System.IO.ByteStream>&amp;&amp; stream_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>stream_</name>
                                    <type ref="type.1580310"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_ContainedStream_StreamWriter_9675ADB796F1027991C704138C0C80F7265120D1">
                            <name>ContainedStream()</name>
                            <syntax>public ByteStream&amp; ContainedStream();</syntax>
                            <returnType ref="type.1580312"/>
                        </function>
                        <function id="function_group_Write_8BECC84DD5658E296AB514BC09DB81E96EA0FB39">
                            <name>Write</name>
                            <overloads>
                                <overload id="member_function_Write_StreamWriter_D2A66AEDCEA497F515FAE04AB18828BB039E01DD">
                                    <name>Write(bool x)</name>
                                    <syntax>public void Write(bool x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.1579450"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_StreamWriter_38AF5B0A23895CB4E29F32F8ADCDC1A5FDE335D1">
                                    <name>Write(byte x)</name>
                                    <syntax>public void Write(byte x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.1579452"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_StreamWriter_0A47768C17FA67E242B8248611F55650E56275BC">
                                    <name>Write(char x)</name>
                                    <syntax>public void Write(char x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.1579461"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_StreamWriter_249840F2D046BE08B90C0342C45A6BB510E4DE04">
                                    <name>Write(const String&lt;char>&amp; x)</name>
                                    <syntax>public void Write(const String&lt;char>&amp; x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.1580258"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_StreamWriter_53DF96F315C1740810336E90699947E778760FC1">
                                    <name>Write(const String&lt;uchar>&amp; x)</name>
                                    <syntax>public void Write(const String&lt;uchar>&amp; x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.1580383"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_StreamWriter_71CF56BBA74FEB1CA12A93DFBE276B145468BE1E">
                                    <name>Write(const String&lt;wchar>&amp; x)</name>
                                    <syntax>public void Write(const String&lt;wchar>&amp; x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.1580339"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_StreamWriter_2741C0A3486A72D86314F83734582D50A22D13AE">
                                    <name>Write(double x)</name>
                                    <syntax>public void Write(double x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.1579460"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_StreamWriter_774057BFB3E7A423B44F86F345F65A451E9BFED7">
                                    <name>Write(float x)</name>
                                    <syntax>public void Write(float x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.1579459"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_StreamWriter_665F21B950E9D3AA500F6A24DEF297E7336B37EC">
                                    <name>Write(int x)</name>
                                    <syntax>public void Write(int x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.1579455"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_StreamWriter_42A6549E4D379FF2719C7EE0F9313746BE75228A">
                                    <name>Write(long x)</name>
                                    <syntax>public void Write(long x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.1579457"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_StreamWriter_F2FD62855077EB9EE7D25F2E5087B2DF7D41EB5D">
                                    <name>Write(sbyte x)</name>
                                    <syntax>public void Write(sbyte x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.1579451"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_StreamWriter_48F761195F844F347078E95240ED18BAF6D3D6ED">
                                    <name>Write(short x)</name>
                                    <syntax>public void Write(short x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.1579453"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_StreamWriter_0C0983C74E8D690D8753B38BA639941344A4AFAB">
                                    <name>Write(uchar x)</name>
                                    <syntax>public void Write(uchar x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.1579463"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_StreamWriter_84C891A5C34ACEFCCC1328E23360487455902198">
                                    <name>Write(uint x)</name>
                                    <syntax>public void Write(uint x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.1579456"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_StreamWriter_BDDA4644BB455563840018358D66B0D68C3C17E4">
                                    <name>Write(ulong x)</name>
                                    <syntax>public void Write(ulong x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.1579458"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_StreamWriter_D869E70689BB6A96B3228C22EE874F249E0D2A1E">
                                    <name>Write(ushort x)</name>
                                    <syntax>public void Write(ushort x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.1579454"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_Write_StreamWriter_3D855801B36797EEAE5AE2FE1E6F5C3A3E193DBA">
                                    <name>Write(wchar x)</name>
                                    <syntax>public void Write(wchar x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.1579462"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="function_group_WriteLine_6950F7E675C051EC270B972404A66B7034259903">
                            <name>WriteLine</name>
                            <overloads>
                                <overload id="member_function_WriteLine_StreamWriter_02277B0E0CBE686C10F1C56FCD88DA95CB7F843A">
                                    <name>WriteLine()</name>
                                    <syntax>public void WriteLine();</syntax>
                                </overload>
                                <overload id="member_function_WriteLine_StreamWriter_2DFA11DDD580C50B4F6F0A10C72CDF59030F4B98">
                                    <name>WriteLine(byte x)</name>
                                    <syntax>public void WriteLine(byte x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.1579452"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_StreamWriter_CFF900998268ED1A8C9BF55CC5FC1A783558AAAD">
                                    <name>WriteLine(const String&lt;char>&amp; x)</name>
                                    <syntax>public void WriteLine(const String&lt;char>&amp; x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.1580258"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_StreamWriter_E8AE4BD042726A48AA28F0FDABECDC7151D3AAE4">
                                    <name>WriteLine(const String&lt;uchar>&amp; x)</name>
                                    <syntax>public void WriteLine(const String&lt;uchar>&amp; x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.1580383"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_StreamWriter_C2566BE23186EC2B6D438BED89827350FBEAABC2">
                                    <name>WriteLine(const String&lt;wchar>&amp; x)</name>
                                    <syntax>public void WriteLine(const String&lt;wchar>&amp; x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.1580339"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_StreamWriter_D983E4ACCCB831507F1DA13E6E6595288C5543BD">
                                    <name>WriteLine(double x)</name>
                                    <syntax>public void WriteLine(double x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.1579460"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_StreamWriter_00F560CB0695CD8AA61057084EBC7929B83E1A01">
                                    <name>WriteLine(float x)</name>
                                    <syntax>public void WriteLine(float x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.1579459"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_StreamWriter_B9E54AC6F4BE4B388C0D56D16CF498F9439DED9C">
                                    <name>WriteLine(int x)</name>
                                    <syntax>public void WriteLine(int x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.1579455"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_StreamWriter_F72F3648CEF6DE1BBDDA2557832D4E86A2BDEB1F">
                                    <name>WriteLine(long x)</name>
                                    <syntax>public void WriteLine(long x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.1579457"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_StreamWriter_5E77C580C0317CB662C40A33CF207FD8E29E8EAC">
                                    <name>WriteLine(sbyte x)</name>
                                    <syntax>public void WriteLine(sbyte x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.1579451"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_StreamWriter_88754B0DEDFAAF768236A884222812B70872256C">
                                    <name>WriteLine(short x)</name>
                                    <syntax>public void WriteLine(short x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.1579453"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_StreamWriter_A1FBDAD503A0A55DCEAB5C8689FFFCC00AA45016">
                                    <name>WriteLine(uint x)</name>
                                    <syntax>public void WriteLine(uint x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.1579456"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_StreamWriter_3757E6DF2F30E22A7F24947C61884A4AB1B037F9">
                                    <name>WriteLine(ulong x)</name>
                                    <syntax>public void WriteLine(ulong x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.1579458"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                                <overload id="member_function_WriteLine_StreamWriter_575A1D3F7FCCBAEC78BF2D58297EA1ADEF6CC49B">
                                    <name>WriteLine(ushort x)</name>
                                    <syntax>public void WriteLine(ushort x);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>x</name>
                                            <type ref="type.1579454"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="move_assignment_op_assign_StreamWriter_90A6C9C815EF8E76A3CAF33B96562A0EC9BDC187">
                            <name>operator=(StreamWriter&amp;&amp; @p0)</name>
                            <syntax>public nothrow default void operator=(StreamWriter&amp;&amp; @p0);</syntax>
                            <parameters>
                                <parameter>
                                    <name>@p0</name>
                                    <type ref="type.1581956"/>
                                </parameter>
                            </parameters>
                        </function>
                    </functions>
                </class>
            </classes>
            <functions>
                <function id="function_GetCurrentWorkingDirectory_7FA9437AAFDD635DC36B66889EE1103E39DB168E">
                    <name>GetCurrentWorkingDirectory()</name>
                    <syntax>public String&lt;char> GetCurrentWorkingDirectory();</syntax>
                    <returnType ref="type.1580238"/>
                </function>
                <function id="function_GetFullPath_EEDC0F2DAF1CAE05BDA99910401713E2A0C46CB4">
                    <name>GetFullPath(const String&lt;char>&amp; path)</name>
                    <syntax>public String&lt;char> GetFullPath(const String&lt;char>&amp; path);</syntax>
                    <parameters>
                        <parameter>
                            <name>path</name>
                            <type ref="type.1580258"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1580238"/>
                </function>
                <function id="function_ReadFile_B82E086686961755A9DC0B74A89A1D4129431B92">
                    <name>ReadFile(const String&lt;char>&amp; filePath)</name>
                    <syntax>public String&lt;char> ReadFile(const String&lt;char>&amp; filePath);</syntax>
                    <parameters>
                        <parameter>
                            <name>filePath</name>
                            <type ref="type.1580258"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1580238"/>
                </function>
                <function id="function_group_op_shl_247FCBBC20E82D4A1D0D55C77A382CB9751F0C4C">
                    <name>operator&lt;&lt;</name>
                    <overloads>
                        <overload id="function_op_shl_B6F8028F41423B351FD4381ECB62E79419CFF5E6">
                            <name>operator&lt;&lt;(OutputStream&amp; s, System.Endl @p1)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, System.Endl @p1);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1580452"/>
                                </parameter>
                                <parameter>
                                    <name>@p1</name>
                                    <type ref="1580062"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580452"/>
                        </overload>
                        <overload id="function_op_shl_F5A9436710D9E3BB22E14E8E995CCABF892C87A6">
                            <name>operator&lt;&lt;(OutputStream&amp; s, bool x)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, bool x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1580452"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.1579450"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580452"/>
                        </overload>
                        <overload id="function_op_shl_62754DB9C59BA5429BFE531B16CE1A7261206044">
                            <name>operator&lt;&lt;(OutputStream&amp; s, byte x)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, byte x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1580452"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.1579452"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580452"/>
                        </overload>
                        <overload id="function_op_shl_49892595972A7B033E1CECAFA86D8AFB4CA05757">
                            <name>operator&lt;&lt;(OutputStream&amp; s, const String&lt;char>&amp; x)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, const String&lt;char>&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1580452"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580452"/>
                        </overload>
                        <overload id="function_op_shl_EEF147124B24E3190EA9B8A49BC78146B179FC2B">
                            <name>operator&lt;&lt;(OutputStream&amp; s, const String&lt;uchar>&amp; x)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, const String&lt;uchar>&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1580452"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.1580383"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580452"/>
                        </overload>
                        <overload id="function_op_shl_C190C73F4712864327307E6C54FFC83EECEFDF57">
                            <name>operator&lt;&lt;(OutputStream&amp; s, const String&lt;wchar>&amp; x)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, const String&lt;wchar>&amp; x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1580452"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.1580339"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580452"/>
                        </overload>
                        <overload id="function_op_shl_8B9C77002F9310427D2D2FD37D3335703C024074">
                            <name>operator&lt;&lt;(OutputStream&amp; s, const char* x)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, const char* x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1580452"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.1579514"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580452"/>
                        </overload>
                        <overload id="function_op_shl_1DCB89EAF22CF381018DA9F66F790498ADF5E452">
                            <name>operator&lt;&lt;(OutputStream&amp; s, const uchar* x)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, const uchar* x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1580452"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.1580367"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580452"/>
                        </overload>
                        <overload id="function_op_shl_4E5017C76B162064D2EAF11A92D51EAC40489B5F">
                            <name>operator&lt;&lt;(OutputStream&amp; s, const wchar* x)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, const wchar* x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1580452"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.1580323"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580452"/>
                        </overload>
                        <overload id="function_op_shl_AE9443E4627A138D220FFA50E2EFDB80D89D4217">
                            <name>operator&lt;&lt;(OutputStream&amp; s, double x)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, double x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1580452"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.1579460"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580452"/>
                        </overload>
                        <overload id="function_op_shl_4F9AB5F8DEA9E94762AE50D43A58944EFC08073B">
                            <name>operator&lt;&lt;(OutputStream&amp; s, float x)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, float x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1580452"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.1579459"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580452"/>
                        </overload>
                        <overload id="function_op_shl_DEABD1B6DC1CB605B5A503CA43A4E05CBB7DBE69">
                            <name>operator&lt;&lt;(OutputStream&amp; s, int x)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, int x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1580452"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.1579455"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580452"/>
                        </overload>
                        <overload id="function_op_shl_6D9D91D6E907C2FEEE5D6D786B550ECE9EBD2351">
                            <name>operator&lt;&lt;(OutputStream&amp; s, long x)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, long x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1580452"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.1579457"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580452"/>
                        </overload>
                        <overload id="function_op_shl_9327BF1AC396F8396C037B5416DF2256F0C5DA3E">
                            <name>operator&lt;&lt;(OutputStream&amp; s, sbyte x)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, sbyte x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1580452"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.1579451"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580452"/>
                        </overload>
                        <overload id="function_op_shl_096EFD72E9EF7C22D4B36DE53A21D33B6BD126E6">
                            <name>operator&lt;&lt;(OutputStream&amp; s, short x)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, short x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1580452"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.1579453"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580452"/>
                        </overload>
                        <overload id="function_op_shl_7ABC9434B961059FD22ABBF578E8CA001D0EA66D">
                            <name>operator&lt;&lt;(OutputStream&amp; s, uint x)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, uint x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1580452"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.1579456"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580452"/>
                        </overload>
                        <overload id="function_op_shl_4969CA354E16A3D540C5A3D6C3481DCFDE45E380">
                            <name>operator&lt;&lt;(OutputStream&amp; s, ulong x)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, ulong x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1580452"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.1579458"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580452"/>
                        </overload>
                        <overload id="function_op_shl_26E7D2DE7417885151B17F2CB02D4C9180C76F5A">
                            <name>operator&lt;&lt;(OutputStream&amp; s, ushort x)</name>
                            <syntax>public OutputStream&amp; operator&lt;&lt;(OutputStream&amp; s, ushort x);</syntax>
                            <parameters>
                                <parameter>
                                    <name>s</name>
                                    <type ref="type.1580452"/>
                                </parameter>
                                <parameter>
                                    <name>x</name>
                                    <type ref="type.1579454"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580452"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_op_eq_EBB17CA8688213EE7E8C8D69B32D7CB0409C07D2">
                    <name>operator==</name>
                    <overloads>
                        <overload id="function_op_eq_7BBB08801CDC6235D21297AFE8841A5899D74E3E">
                            <name>operator==(OpenMode left, OpenMode right)</name>
                            <syntax>public bool operator==(OpenMode left, OpenMode right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="1579811"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="1579811"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </overload>
                        <overload id="function_op_eq_C373AEE7FDD24C09591B30AC15C107CEC04A65DA">
                            <name>operator==(Origin left, Origin right)</name>
                            <syntax>public bool operator==(Origin left, Origin right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="1579659"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="1579659"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </overload>
                    </overloads>
                </function>
            </functions>
            <constants>
                <constant id="constant_stderr_9DE5B6DBCF427EE0C5DD7EF7F46F93B07C723B43">
                    <name>stderr</name>
                    <syntax>public const int stderr = 2;</syntax>
                    <type ref="type.1579455"/>
                    <value>2</value>
                </constant>
                <constant id="constant_stdin_FC41BF1330DD6025803C52F62CB1FBA3A97CD884">
                    <name>stdin</name>
                    <syntax>public const int stdin = 0;</syntax>
                    <type ref="type.1579455"/>
                    <value>0</value>
                </constant>
                <constant id="constant_stdout_B587483058DC45B1ABF1C9DDEB7EF3E8286B2CAF">
                    <name>stdout</name>
                    <syntax>public const int stdout = 1;</syntax>
                    <type ref="type.1579455"/>
                    <value>1</value>
                </constant>
            </constants>
            <enumerations>
                <enumeration id="1579811">
                    <name>OpenMode</name>
                    <syntax>public enum OpenMode;</syntax>
                    <underlyingType ref="type.1579452"/>
                    <enumConstant>
                        <name>none</name>
                        <value>0u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>read</name>
                        <value>1u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>write</name>
                        <value>2u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>append</name>
                        <value>4u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>binary</name>
                        <value>8u</value>
                    </enumConstant>
                </enumeration>
                <enumeration id="1579659">
                    <name>Origin</name>
                    <syntax>public enum Origin;</syntax>
                    <underlyingType ref="type.1579452"/>
                    <enumConstant>
                        <name>seekSet</name>
                        <value>0u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>seekCur</name>
                        <value>1u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>seekEnd</name>
                        <value>2u</value>
                    </enumConstant>
                </enumeration>
            </enumerations>
        </namespace>
        <namespace id="System.Text">
            <name>System.Text</name>
            <classes>
                <class id="1579662">
                    <name>CodeFormatter</name>
                    <groupName>CodeFormatter</groupName>
                    <syntax> public class CodeFormatter;</syntax>
                    <constructors>
                        <constructor id="constructor_CodeFormatter_6A0AA15ED8227D7699C9DC4FFFD1615FA363C4F7">
                            <name>CodeFormatter(StreamWriter&amp; writer_)</name>
                            <syntax>public nothrow CodeFormatter(StreamWriter&amp; writer_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>writer_</name>
                                    <type ref="type.1580442"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_AtBeginningOfLine_CodeFormatter_10D4FE026ECF215300D601523D92AECD3ED0F9B5">
                            <name>AtBeginningOfLine() const</name>
                            <syntax>public nothrow inline bool AtBeginningOfLine() const;</syntax>
                            <returnType ref="type.1579450"/>
                        </function>
                        <function id="member_function_CurrentIndent_CodeFormatter_E3F672BA905741350712FA931EBB98F3C8EBE055">
                            <name>CurrentIndent() const</name>
                            <syntax>public nothrow inline int CurrentIndent() const;</syntax>
                            <returnType ref="type.1579455"/>
                        </function>
                        <function id="member_function_DecIndent_CodeFormatter_1E275319B540B72A042CB98221DCD273236EDDEA">
                            <name>DecIndent()</name>
                            <syntax>public nothrow inline void DecIndent();</syntax>
                        </function>
                        <function id="member_function_IncIndent_CodeFormatter_700FA7F3DA093C6C7D42FD96059EB58C25A33A96">
                            <name>IncIndent()</name>
                            <syntax>public nothrow inline void IncIndent();</syntax>
                        </function>
                        <function id="member_function_Indent_CodeFormatter_1797AE4C80C2CD52F6071B67C58FF55A02BD5351">
                            <name>Indent() const</name>
                            <syntax>public nothrow inline int Indent() const;</syntax>
                            <returnType ref="type.1579455"/>
                        </function>
                        <function id="member_function_IndentSize_CodeFormatter_63F8C224DF59C7E062FF80EA995CB31D253E9D90">
                            <name>IndentSize() const</name>
                            <syntax>public nothrow inline int IndentSize() const;</syntax>
                            <returnType ref="type.1579455"/>
                        </function>
                        <function id="member_function_Line_CodeFormatter_61E916FB9A539360198669B1E0CAACF27343BC10">
                            <name>Line() const</name>
                            <syntax>public nothrow inline int Line() const;</syntax>
                            <returnType ref="type.1579455"/>
                        </function>
                        <function id="member_function_SetIndentSize_CodeFormatter_9CD18377944093FDAFF1B2C8F3BF1553F331AAF4">
                            <name>SetIndentSize(int indentSize_)</name>
                            <syntax>public nothrow inline void SetIndentSize(int indentSize_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>indentSize_</name>
                                    <type ref="type.1579455"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetLine_CodeFormatter_CEEE9D901342959F057D350AB9F7EE215898FE85">
                            <name>SetLine(int line_)</name>
                            <syntax>public nothrow inline void SetLine(int line_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>line_</name>
                                    <type ref="type.1579455"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetStart_CodeFormatter_4C0A364CCA324A3AA9418DBA2AC7FBA21A32C097">
                            <name>SetStart(bool start_)</name>
                            <syntax>public nothrow inline void SetStart(bool start_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>start_</name>
                                    <type ref="type.1579450"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_SetStartText_CodeFormatter_F0BC84141919AA2DD45E3CF267089EECCD6AD435">
                            <name>SetStartText(const String&lt;char>&amp; startText_)</name>
                            <syntax>public nothrow void SetStartText(const String&lt;char>&amp; startText_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>startText_</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Start_CodeFormatter_BC0E85B1E773C5E1111126D827A2621A0FF8A3C2">
                            <name>Start() const</name>
                            <syntax>public nothrow inline bool Start() const;</syntax>
                            <returnType ref="type.1579450"/>
                        </function>
                        <function id="member_function_StartText_CodeFormatter_A3190950E203FAE043177B7FE30E6ED239E37BB2">
                            <name>StartText() const</name>
                            <syntax>public nothrow inline const String&lt;char>&amp; StartText() const;</syntax>
                            <returnType ref="type.1580258"/>
                        </function>
                        <function id="member_function_Write_CodeFormatter_F2F2C62C0BE332761BAFA24ED67EF6898951346E">
                            <name>Write(const String&lt;char>&amp; text)</name>
                            <syntax>public void Write(const String&lt;char>&amp; text);</syntax>
                            <parameters>
                                <parameter>
                                    <name>text</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="function_group_WriteLine_5212623D88BD0ECF52F17733B1EFFEC593B6D03C">
                            <name>WriteLine</name>
                            <overloads>
                                <overload id="member_function_WriteLine_CodeFormatter_7C6105DB34DDB1A1431C51E81B6154B67C5E4432">
                                    <name>WriteLine()</name>
                                    <syntax>public void WriteLine();</syntax>
                                </overload>
                                <overload id="member_function_WriteLine_CodeFormatter_8E0C859095312D56953D79A5DE9FED23AAB3076B">
                                    <name>WriteLine(const String&lt;char>&amp; text)</name>
                                    <syntax>public void WriteLine(const String&lt;char>&amp; text);</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>text</name>
                                            <type ref="type.1580258"/>
                                        </parameter>
                                    </parameters>
                                </overload>
                            </overloads>
                        </function>
                        <function id="member_function_Writer_CodeFormatter_D57701AD3B687B9BB271D470EF0201E755FC3937">
                            <name>Writer()</name>
                            <syntax>public nothrow inline StreamWriter&amp; Writer();</syntax>
                            <returnType ref="type.1580442"/>
                        </function>
                    </functions>
                </class>
            </classes>
        </namespace>
        <namespace id="System.Threading">
            <name>System.Threading</name>
            <classes>
                <class id="1579983">
                    <name>LockGuard</name>
                    <groupName>LockGuard</groupName>
                    <syntax> public class LockGuard;</syntax>
                    <constructors>
                        <constructor id="constructor_LockGuard_C4E435DB9C6151C5BB799A1EB5FCA359C753A541">
                            <name>LockGuard(Mutex&amp; mtx_)</name>
                            <syntax>public nothrow LockGuard(Mutex&amp; mtx_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>mtx_</name>
                                    <type ref="type.1581562"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                </class>
                <class id="1579981">
                    <name>Mutex</name>
                    <groupName>Mutex</groupName>
                    <syntax> public class Mutex;</syntax>
                    <constructors>
                        <constructor id="default_constructor_Mutex_DDE2F934CEC5F143D1AE16C06CC84DC08A4282B1">
                            <name>Mutex()</name>
                            <syntax>public nothrow Mutex();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Lock_Mutex_32BBE564158E95CC9F1AA18D65C62803C9AC7B1B">
                            <name>Lock()</name>
                            <syntax>public nothrow void Lock();</syntax>
                        </function>
                        <function id="member_function_Unlock_Mutex_54F34EE5DA0379E95ED71CEB793399684FFA271B">
                            <name>Unlock()</name>
                            <syntax>public nothrow void Unlock();</syntax>
                        </function>
                    </functions>
                </class>
            </classes>
        </namespace>
        <namespace id="System.Unicode">
            <name>System.Unicode</name>
            <classes>
                <class id="1580108">
                    <name>Age</name>
                    <groupName>Age</groupName>
                    <syntax> public class Age;</syntax>
                    <constructors>
                        <constructor id="constructor_Age_E175E6FA4C4FB82860CB50A3635B1AC77C7E4F95">
                            <name>Age(AgeId id_, const String&lt;char>&amp; version_)</name>
                            <syntax>public nothrow Age(AgeId id_, const String&lt;char>&amp; version_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>id_</name>
                                    <type ref="1580107"/>
                                </parameter>
                                <parameter>
                                    <name>version_</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Id_Age_D8ED6FC65EE8729CEBEF73FCFE0B62DD2E513882">
                            <name>Id() const</name>
                            <syntax>public nothrow inline AgeId Id() const;</syntax>
                            <returnType ref="1580107"/>
                        </function>
                        <function id="member_function_Version_Age_AD263532B6C886468DFB41857B3A715C0BBD3F3F">
                            <name>Version() const</name>
                            <syntax>public nothrow inline const String&lt;char>&amp; Version() const;</syntax>
                            <returnType ref="type.1580258"/>
                        </function>
                    </functions>
                </class>
                <class id="1580112">
                    <name>AgeTable</name>
                    <groupName>AgeTable</groupName>
                    <syntax> public class AgeTable;</syntax>
                    <functions>
                        <function id="function_group_GetAge_FCB36C4A70B0B668613401AB63DE2AA504139675">
                            <name>GetAge</name>
                            <overloads>
                                <overload id="member_function_GetAge_AgeTable_9AAC80C8F3F35FB702548D39C7D03D18249EF74B">
                                    <name>GetAge(AgeId id) const</name>
                                    <syntax>public const Age* GetAge(AgeId id) const;</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>id</name>
                                            <type ref="1580107"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.1580111"/>
                                </overload>
                                <overload id="member_function_GetAge_AgeTable_E3A107D1B2B6B0A1A40C518D17E907662D03DBE4">
                                    <name>GetAge(const String&lt;char>&amp; version) const</name>
                                    <syntax>public const Age* GetAge(const String&lt;char>&amp; version) const;</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>version</name>
                                            <type ref="type.1580258"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.1580111"/>
                                </overload>
                            </overloads>
                        </function>
                    </functions>
                    <staticMemberFunctions>
                        <function id="member_function_Instance_AgeTable_9A60AD5BEAA4C722E88EBD80EB46FDCB99E0B22B">
                            <name>Instance()</name>
                            <syntax>public static AgeTable&amp; Instance();</syntax>
                            <returnType ref="type.1582836"/>
                        </function>
                    </staticMemberFunctions>
                </class>
                <class id="1580165">
                    <name>Alias</name>
                    <groupName>Alias</groupName>
                    <syntax> public class Alias;</syntax>
                    <constructors>
                        <constructor id="default_constructor_Alias_0904F25622552B8426D09E17AFC7F19B263ED863">
                            <name>Alias()</name>
                            <syntax>public nothrow Alias();</syntax>
                        </constructor>
                        <constructor id="constructor_Alias_0B958B642386524CAEB6F41555454615A0E2D8D8">
                            <name>Alias(AliasTypeId typeId_, const String&lt;char>&amp; name_)</name>
                            <syntax>public nothrow Alias(AliasTypeId typeId_, const String&lt;char>&amp; name_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>typeId_</name>
                                    <type ref="1580156"/>
                                </parameter>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Name_Alias_570991BB15154DC28F3358396D1453FB5091E5A7">
                            <name>Name() const</name>
                            <syntax>public nothrow inline const String&lt;char>&amp; Name() const;</syntax>
                            <returnType ref="type.1580258"/>
                        </function>
                        <function id="member_function_Read_Alias_A6BCDF10A8620F9C802108E8E98EF280D2FB51DC">
                            <name>Read(BinaryReader&amp; reader)</name>
                            <syntax>public void Read(BinaryReader&amp; reader);</syntax>
                            <parameters>
                                <parameter>
                                    <name>reader</name>
                                    <type ref="type.1583192"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_TypeId_Alias_BB81D3CD5A5C711098D9C359AE24C044C3D37C9A">
                            <name>TypeId() const</name>
                            <syntax>public nothrow inline AliasTypeId TypeId() const;</syntax>
                            <returnType ref="1580156"/>
                        </function>
                    </functions>
                </class>
                <class id="1580157">
                    <name>AliasType</name>
                    <groupName>AliasType</groupName>
                    <syntax> public class AliasType;</syntax>
                    <constructors>
                        <constructor id="constructor_AliasType_3A1EAC357A8C7300D5262DDEB100E9344F6CFA98">
                            <name>AliasType(AliasTypeId id_, const String&lt;char>&amp; name_)</name>
                            <syntax>public nothrow AliasType(AliasTypeId id_, const String&lt;char>&amp; name_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>id_</name>
                                    <type ref="1580156"/>
                                </parameter>
                                <parameter>
                                    <name>name_</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Id_AliasType_97B4D73390FC91606E3315CC0B2A042D3E0A5C89">
                            <name>Id() const</name>
                            <syntax>public nothrow inline AliasTypeId Id() const;</syntax>
                            <returnType ref="1580156"/>
                        </function>
                        <function id="member_function_Name_AliasType_85553047BD1B9342BCAC28A5288F19C028055E4F">
                            <name>Name() const</name>
                            <syntax>public nothrow inline const String&lt;char>&amp; Name() const;</syntax>
                            <returnType ref="type.1580258"/>
                        </function>
                    </functions>
                </class>
                <class id="1580161">
                    <name>AliasTypeTable</name>
                    <groupName>AliasTypeTable</groupName>
                    <syntax> public class AliasTypeTable;</syntax>
                    <functions>
                        <function id="function_group_GetAliasType_3BE1E7FF9A43C6F18F8AF225BEF34F6FCD65E405">
                            <name>GetAliasType</name>
                            <overloads>
                                <overload id="member_function_GetAliasType_AliasTypeTable_F41CC77874654BE478B346B68452560B85A6936F">
                                    <name>GetAliasType(AliasTypeId id) const</name>
                                    <syntax>public const AliasType* GetAliasType(AliasTypeId id) const;</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>id</name>
                                            <type ref="1580156"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.1580160"/>
                                </overload>
                                <overload id="member_function_GetAliasType_AliasTypeTable_11333F5CC5F9A882B937505A5DCF86A26BEFC760">
                                    <name>GetAliasType(const String&lt;char>&amp; name) const</name>
                                    <syntax>public const AliasType* GetAliasType(const String&lt;char>&amp; name) const;</syntax>
                                    <parameters>
                                        <parameter>
                                            <name>name</name>
                                            <type ref="type.1580258"/>
                                        </parameter>
                                    </parameters>
                                    <returnType ref="type.1580160"/>
                                </overload>
                            </overloads>
                        </function>
                    </functions>
                    <staticMemberFunctions>
                        <function id="member_function_Instance_AliasTypeTable_35D2366A52CC94AEF1D587AFB203B22FFA264C93">
                            <name>Instance()</name>
                            <syntax>public static AliasTypeTable&amp; Instance();</syntax>
                            <returnType ref="type.1583732"/>
                        </function>
                    </staticMemberFunctions>
                </class>
                <class id="1580139">
                    <name>BidiClass</name>
                    <groupName>BidiClass</groupName>
                    <syntax> public class BidiClass;</syntax>
                    <constructors>
                        <constructor id="constructor_BidiClass_C1F1D830BD6543E72C953B6BFCA0B51325D8E8E3">
                            <name>BidiClass(BidiClassId id_, const String&lt;char>&amp; shortName_, const String&lt;char>&amp; longName_)</name>
                            <syntax>public nothrow BidiClass(BidiClassId id_, const String&lt;char>&amp; shortName_, const String&lt;char>&amp; longName_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>id_</name>
                                    <type ref="1580138"/>
                                </parameter>
                                <parameter>
                                    <name>shortName_</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                                <parameter>
                                    <name>longName_</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Id_BidiClass_BEE92D758B48C2E4A9080BBEA1C44F6150C48F17">
                            <name>Id() const</name>
                            <syntax>public nothrow inline BidiClassId Id() const;</syntax>
                            <returnType ref="1580138"/>
                        </function>
                        <function id="member_function_LongName_BidiClass_CB1F7B38F4448B0DB27843CA36E0FAF45E350671">
                            <name>LongName() const</name>
                            <syntax>public nothrow inline const String&lt;char>&amp; LongName() const;</syntax>
                            <returnType ref="type.1580258"/>
                        </function>
                        <function id="member_function_ShortName_BidiClass_AE4B0B64AB887314F17C46835F4081068BA1CAD9">
                            <name>ShortName() const</name>
                            <syntax>public nothrow inline const String&lt;char>&amp; ShortName() const;</syntax>
                            <returnType ref="type.1580258"/>
                        </function>
                    </functions>
                </class>
                <class id="1580143">
                    <name>BidiClassTable</name>
                    <groupName>BidiClassTable</groupName>
                    <syntax> public class BidiClassTable;</syntax>
                    <functions>
                        <function id="member_function_GetBidiClass_BidiClassTable_273D5F7F6EA51CE0F01F65AECA07D52FD2E5A239">
                            <name>GetBidiClass(BidiClassId id) const</name>
                            <syntax>public const BidiClass* GetBidiClass(BidiClassId id) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>id</name>
                                    <type ref="1580138"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580142"/>
                        </function>
                        <function id="member_function_GetBidiClassByLongName_BidiClassTable_174868F8AD35D65C60002DDEC9A213BAE8C22CA0">
                            <name>GetBidiClassByLongName(const String&lt;char>&amp; longName) const</name>
                            <syntax>public const BidiClass* GetBidiClassByLongName(const String&lt;char>&amp; longName) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>longName</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580142"/>
                        </function>
                        <function id="member_function_GetBidiClassByShortName_BidiClassTable_970010AA2E6A82BDD733E6F525E79A318BCE80B4">
                            <name>GetBidiClassByShortName(const String&lt;char>&amp; shortName) const</name>
                            <syntax>public const BidiClass* GetBidiClassByShortName(const String&lt;char>&amp; shortName) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>shortName</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580142"/>
                        </function>
                    </functions>
                    <staticMemberFunctions>
                        <function id="member_function_Instance_BidiClassTable_35CA78EA8847B0551CCA73E106F19376832A1647">
                            <name>Instance()</name>
                            <syntax>public static BidiClassTable&amp; Instance();</syntax>
                            <returnType ref="type.1583374"/>
                        </function>
                    </staticMemberFunctions>
                </class>
                <class id="1580148">
                    <name>BidiPairedBracketType</name>
                    <groupName>BidiPairedBracketType</groupName>
                    <syntax> public class BidiPairedBracketType;</syntax>
                    <constructors>
                        <constructor id="constructor_BidiPairedBracketType_F37A49B661ED90A0256F6C8D08CEED9F7F9FF343">
                            <name>BidiPairedBracketType(BidiPairedBracketTypeId id_, const String&lt;char>&amp; shortName_, const String&lt;char>&amp; longName_)</name>
                            <syntax>public nothrow BidiPairedBracketType(BidiPairedBracketTypeId id_, const String&lt;char>&amp; shortName_, const String&lt;char>&amp; longName_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>id_</name>
                                    <type ref="1580147"/>
                                </parameter>
                                <parameter>
                                    <name>shortName_</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                                <parameter>
                                    <name>longName_</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Id_BidiPairedBracketType_CEEE09808FFF0CFC0F626F81CBA884CC0213E231">
                            <name>Id() const</name>
                            <syntax>public nothrow inline BidiPairedBracketTypeId Id() const;</syntax>
                            <returnType ref="1580147"/>
                        </function>
                        <function id="member_function_LongName_BidiPairedBracketType_22BEAD4EA71B42615F72C7513C5424841BBA6A9F">
                            <name>LongName() const</name>
                            <syntax>public nothrow inline const String&lt;char>&amp; LongName() const;</syntax>
                            <returnType ref="type.1580258"/>
                        </function>
                        <function id="member_function_ShortName_BidiPairedBracketType_76386A15AD0E14FEC011285E42CB62B9D9F3543F">
                            <name>ShortName() const</name>
                            <syntax>public nothrow inline const String&lt;char>&amp; ShortName() const;</syntax>
                            <returnType ref="type.1580258"/>
                        </function>
                    </functions>
                </class>
                <class id="1580152">
                    <name>BidiPairedBracketTypeTable</name>
                    <groupName>BidiPairedBracketTypeTable</groupName>
                    <syntax> public class BidiPairedBracketTypeTable;</syntax>
                    <functions>
                        <function id="member_function_GetBidiPairedBracketType_BidiPairedBracketTypeTable_810B5A1E852F5A22276D2C0C44A7035B910086FD">
                            <name>GetBidiPairedBracketType(BidiPairedBracketTypeId id) const</name>
                            <syntax>public const BidiPairedBracketType* GetBidiPairedBracketType(BidiPairedBracketTypeId id) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>id</name>
                                    <type ref="1580147"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580151"/>
                        </function>
                        <function id="member_function_GetBidiPairedBracketTypeByLongName_BidiPairedBracketTypeTable_7E0DC49152384ABFA1A5E020402A1438F6F3A452">
                            <name>GetBidiPairedBracketTypeByLongName(const String&lt;char>&amp; longName) const</name>
                            <syntax>public const BidiPairedBracketType* GetBidiPairedBracketTypeByLongName(const String&lt;char>&amp; longName) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>longName</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580151"/>
                        </function>
                        <function id="member_function_GetBidiPairedBracketTypeByShortName_BidiPairedBracketTypeTable_00C2EAE059AF50B996742984419CA4BFDEDD7382">
                            <name>GetBidiPairedBracketTypeByShortName(const String&lt;char>&amp; shortName) const</name>
                            <syntax>public const BidiPairedBracketType* GetBidiPairedBracketTypeByShortName(const String&lt;char>&amp; shortName) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>shortName</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580151"/>
                        </function>
                    </functions>
                    <staticMemberFunctions>
                        <function id="member_function_Instance_BidiPairedBracketTypeTable_D4C6B5D7FAA6CD3846038E4F786F8BFA22BDD70D">
                            <name>Instance()</name>
                            <syntax>public static BidiPairedBracketTypeTable&amp; Instance();</syntax>
                            <returnType ref="type.1583553"/>
                        </function>
                    </staticMemberFunctions>
                </class>
                <class id="1580087">
                    <name>BinaryProperty</name>
                    <groupName>BinaryProperty</groupName>
                    <syntax> public class BinaryProperty;</syntax>
                    <constructors>
                        <constructor id="constructor_BinaryProperty_C7C21AE49D34C18698184C791E01EF001197CE02">
                            <name>BinaryProperty(BinaryPropertyId id_, const String&lt;char>&amp; shortName_, const String&lt;char>&amp; longName_)</name>
                            <syntax>public nothrow BinaryProperty(BinaryPropertyId id_, const String&lt;char>&amp; shortName_, const String&lt;char>&amp; longName_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>id_</name>
                                    <type ref="1580086"/>
                                </parameter>
                                <parameter>
                                    <name>shortName_</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                                <parameter>
                                    <name>longName_</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Id_BinaryProperty_959F83F43B0C547BDC555B66D0BBBFE6880238DC">
                            <name>Id()</name>
                            <syntax>public nothrow inline BinaryPropertyId Id();</syntax>
                            <returnType ref="1580086"/>
                        </function>
                        <function id="member_function_LongName_BinaryProperty_4766B156AD06630D80DD9999B44FF217B561C0A1">
                            <name>LongName()</name>
                            <syntax>public nothrow inline const String&lt;char>&amp; LongName();</syntax>
                            <returnType ref="type.1580258"/>
                        </function>
                        <function id="member_function_ShortName_BinaryProperty_C599525AB2BB3490202006F01F685087DA747A73">
                            <name>ShortName()</name>
                            <syntax>public nothrow inline const String&lt;char>&amp; ShortName();</syntax>
                            <returnType ref="type.1580258"/>
                        </function>
                    </functions>
                </class>
                <class id="1580089">
                    <name>BinaryPropertyTable</name>
                    <groupName>BinaryPropertyTable</groupName>
                    <syntax> public class BinaryPropertyTable;</syntax>
                    <functions>
                        <function id="member_function_GetBinaryProperty_BinaryPropertyTable_AAA53D0DE4F265E8F50924F6E70D6F3127995AF1">
                            <name>GetBinaryProperty(BinaryPropertyId id) const</name>
                            <syntax>public nothrow const BinaryProperty* GetBinaryProperty(BinaryPropertyId id) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>id</name>
                                    <type ref="1580086"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1582282"/>
                        </function>
                        <function id="member_function_GetBinaryPropertyByLongName_BinaryPropertyTable_423BE664F7D4E1436473FA5AA5DB3863AB0AE391">
                            <name>GetBinaryPropertyByLongName(const String&lt;char>&amp; longName) const</name>
                            <syntax>public const BinaryProperty* GetBinaryPropertyByLongName(const String&lt;char>&amp; longName) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>longName</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1582282"/>
                        </function>
                        <function id="member_function_GetBinaryPropertyByShortName_BinaryPropertyTable_2C87A1438F63D7217B0AC2FC8BDF22AA23EF4767">
                            <name>GetBinaryPropertyByShortName(const String&lt;char>&amp; shortName) const</name>
                            <syntax>public const BinaryProperty* GetBinaryPropertyByShortName(const String&lt;char>&amp; shortName) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>shortName</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1582282"/>
                        </function>
                    </functions>
                    <staticMemberFunctions>
                        <function id="member_function_Instance_BinaryPropertyTable_D632D490E73A6081BCA22875DD2867DF2B20A7FA">
                            <name>Instance()</name>
                            <syntax>public static nothrow BinaryPropertyTable&amp; Instance();</syntax>
                            <returnType ref="type.1582281"/>
                        </function>
                    </staticMemberFunctions>
                </class>
                <class id="1580094">
                    <name>Block</name>
                    <groupName>Block</groupName>
                    <syntax> public class Block;</syntax>
                    <constructors>
                        <constructor id="constructor_Block_0C733455CF30211C43FDAB04237C1E13B0504B5A">
                            <name>Block(BlockId id_, const String&lt;char>&amp; shortName_, const String&lt;char>&amp; longName_, uchar start_, uchar end_)</name>
                            <syntax>public nothrow Block(BlockId id_, const String&lt;char>&amp; shortName_, const String&lt;char>&amp; longName_, uchar start_, uchar end_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>id_</name>
                                    <type ref="1580093"/>
                                </parameter>
                                <parameter>
                                    <name>shortName_</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                                <parameter>
                                    <name>longName_</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                                <parameter>
                                    <name>start_</name>
                                    <type ref="type.1579463"/>
                                </parameter>
                                <parameter>
                                    <name>end_</name>
                                    <type ref="type.1579463"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_End_Block_5B46378D7BE25976C02467D7E8D59D7944A5832C">
                            <name>End()</name>
                            <syntax>public nothrow inline uchar End();</syntax>
                            <returnType ref="type.1579463"/>
                        </function>
                        <function id="member_function_Id_Block_D53DE04CB09445FDDA63235E39FC985CA838B29A">
                            <name>Id()</name>
                            <syntax>public nothrow inline BlockId Id();</syntax>
                            <returnType ref="1580093"/>
                        </function>
                        <function id="member_function_LongName_Block_DB6B17609079D844781B17EFEE51D3F5761A87BB">
                            <name>LongName()</name>
                            <syntax>public nothrow inline const String&lt;char>&amp; LongName();</syntax>
                            <returnType ref="type.1580258"/>
                        </function>
                        <function id="member_function_ShortName_Block_089B50B84EB016A348FF723002F78D1BA2EBE4FD">
                            <name>ShortName()</name>
                            <syntax>public nothrow inline const String&lt;char>&amp; ShortName();</syntax>
                            <returnType ref="type.1580258"/>
                        </function>
                        <function id="member_function_Start_Block_E4A97630C72F6F969D915935F16842C188589F0D">
                            <name>Start()</name>
                            <syntax>public nothrow inline uchar Start();</syntax>
                            <returnType ref="type.1579463"/>
                        </function>
                    </functions>
                </class>
                <class id="1580096">
                    <name>BlockTable</name>
                    <groupName>BlockTable</groupName>
                    <syntax> public class BlockTable;</syntax>
                    <functions>
                        <function id="member_function_GetBlock_BlockTable_BBDFB407C8F410AADA68685890858A2867AD6478">
                            <name>GetBlock(BlockId id) const</name>
                            <syntax>public nothrow inline const Block* GetBlock(BlockId id) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>id</name>
                                    <type ref="1580093"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1582476"/>
                        </function>
                        <function id="member_function_GetBlockByLongName_BlockTable_FFF2E67DF0DE4E3734B1EC7D4A7FB8654E7D380C">
                            <name>GetBlockByLongName(const String&lt;char>&amp; longName) const</name>
                            <syntax>public inline const Block* GetBlockByLongName(const String&lt;char>&amp; longName) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>longName</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1582476"/>
                        </function>
                        <function id="member_function_GetBlockByShortName_BlockTable_E829EE5381754ADAF5974D4D9E4F58E08498A03C">
                            <name>GetBlockByShortName(const String&lt;char>&amp; shortName) const</name>
                            <syntax>public inline const Block* GetBlockByShortName(const String&lt;char>&amp; shortName) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>shortName</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1582476"/>
                        </function>
                    </functions>
                    <staticMemberFunctions>
                        <function id="member_function_Instance_BlockTable_402D617371454807D45E1FE95490F8A1E58AA8FB">
                            <name>Instance()</name>
                            <syntax>public static BlockTable&amp; Instance();</syntax>
                            <returnType ref="type.1582475"/>
                        </function>
                    </staticMemberFunctions>
                </class>
                <class id="1580125">
                    <name>CharacterInfo</name>
                    <groupName>CharacterInfo</groupName>
                    <syntax> public class CharacterInfo;</syntax>
                    <constructors>
                        <constructor id="default_constructor_CharacterInfo_0E6141E7D2DB634775A0018D17DC3E3FBA1053A3">
                            <name>CharacterInfo()</name>
                            <syntax>public nothrow CharacterInfo();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_AgeValue_CharacterInfo_CD560E4F4C9BD9881EC1B88A9FFAEA1B3939BEA8">
                            <name>AgeValue() const</name>
                            <syntax>public nothrow inline AgeId AgeValue() const;</syntax>
                            <returnType ref="1580107"/>
                        </function>
                        <function id="member_function_BlockValue_CharacterInfo_BC95D974E9FD9F4209166AAA51B13B3F864BF0EF">
                            <name>BlockValue() const</name>
                            <syntax>public nothrow inline BlockId BlockValue() const;</syntax>
                            <returnType ref="1580093"/>
                        </function>
                        <function id="member_function_Folding_CharacterInfo_C649ADAF9ADC77FAF8483326D2C358B9D91486AD">
                            <name>Folding() const</name>
                            <syntax>public nothrow inline uchar Folding() const;</syntax>
                            <returnType ref="type.1579463"/>
                        </function>
                        <function id="member_function_GeneralCategoryValue_CharacterInfo_F2188BCABC17D145AA80394189CDC1F430690C4B">
                            <name>GeneralCategoryValue() const</name>
                            <syntax>public nothrow inline GeneralCategoryId GeneralCategoryValue() const;</syntax>
                            <returnType ref="1580100"/>
                        </function>
                        <function id="member_function_GetBinaryProperty_CharacterInfo_6800204473CA16BF842638795DABEAB7D737BBC7">
                            <name>GetBinaryProperty(BinaryPropertyId binaryPropertyId) const</name>
                            <syntax>public nothrow inline bool GetBinaryProperty(BinaryPropertyId binaryPropertyId) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>binaryPropertyId</name>
                                    <type ref="1580086"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </function>
                        <function id="member_function_HasGeneralCategory_CharacterInfo_AE9B55685EFFB59DECB01B460231B695C85C103D">
                            <name>HasGeneralCategory(GeneralCategoryId generalCategory_) const</name>
                            <syntax>public nothrow inline bool HasGeneralCategory(GeneralCategoryId generalCategory_) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>generalCategory_</name>
                                    <type ref="1580100"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </function>
                        <function id="member_function_Lower_CharacterInfo_AEA52D4BACF9C95548C8D378B333331788109F17">
                            <name>Lower() const</name>
                            <syntax>public nothrow inline uchar Lower() const;</syntax>
                            <returnType ref="type.1579463"/>
                        </function>
                        <function id="member_function_Read_CharacterInfo_CFDAA2E46C9E48FA3F96CC407216755208BC660C">
                            <name>Read(BinaryReader&amp; reader)</name>
                            <syntax>public void Read(BinaryReader&amp; reader);</syntax>
                            <parameters>
                                <parameter>
                                    <name>reader</name>
                                    <type ref="type.1583192"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_ScriptValue_CharacterInfo_30986ABFE579871D094B6C3406B172194B5885BB">
                            <name>ScriptValue() const</name>
                            <syntax>public nothrow inline ScriptId ScriptValue() const;</syntax>
                            <returnType ref="1580116"/>
                        </function>
                        <function id="member_function_Title_CharacterInfo_B8AB176A059984E478ABFCC3DB54425CFDB6B2AF">
                            <name>Title() const</name>
                            <syntax>public nothrow inline uchar Title() const;</syntax>
                            <returnType ref="type.1579463"/>
                        </function>
                        <function id="member_function_Upper_CharacterInfo_345D995EE1F9DFFB7BF2BB13B285337F41EE4763">
                            <name>Upper() const</name>
                            <syntax>public nothrow inline uchar Upper() const;</syntax>
                            <returnType ref="type.1579463"/>
                        </function>
                    </functions>
                </class>
                <class id="1580173">
                    <name>CharacterInfoPage</name>
                    <groupName>CharacterInfoPage</groupName>
                    <syntax> public class CharacterInfoPage;</syntax>
                    <constructors>
                        <constructor id="default_constructor_CharacterInfoPage_BA46FD4FFBDDF49666B1A2B7476A1A56AF0A1A37">
                            <name>CharacterInfoPage()</name>
                            <syntax>public CharacterInfoPage();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Read_CharacterInfoPage_68D2C17CE56C883DBC450FF209ABD573145A96FB">
                            <name>Read(BinaryReader&amp; reader)</name>
                            <syntax>public void Read(BinaryReader&amp; reader);</syntax>
                            <parameters>
                                <parameter>
                                    <name>reader</name>
                                    <type ref="type.1583192"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_op_index_CharacterInfoPage_5FAA1CFCA336A7CBE84B50DEE225BFF81AE61F98">
                            <name>operator[](long index) const</name>
                            <syntax>public const CharacterInfo&amp; operator[](long index) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>index</name>
                                    <type ref="type.1579457"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1583932"/>
                        </function>
                    </functions>
                </class>
                <class id="1580185">
                    <name>CharacterTable</name>
                    <groupName>CharacterTable</groupName>
                    <syntax> public class CharacterTable;</syntax>
                    <functions>
                        <function id="member_function_GetCharacterInfo_CharacterTable_55E951179608B83A36FBBD19BA6BEC95E40ECA40">
                            <name>GetCharacterInfo(uchar codePoint)</name>
                            <syntax>public const CharacterInfo&amp; GetCharacterInfo(uchar codePoint);</syntax>
                            <parameters>
                                <parameter>
                                    <name>codePoint</name>
                                    <type ref="type.1579463"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1583932"/>
                        </function>
                        <function id="member_function_GetExtendedCharacterInfo_CharacterTable_B5ACF89D2899EA73E5963A50B2C52C059AF261D7">
                            <name>GetExtendedCharacterInfo(uchar codePoint)</name>
                            <syntax>public const ExtendedCharacterInfo&amp; GetExtendedCharacterInfo(uchar codePoint);</syntax>
                            <parameters>
                                <parameter>
                                    <name>codePoint</name>
                                    <type ref="type.1579463"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1583961"/>
                        </function>
                    </functions>
                    <staticMemberFunctions>
                        <function id="member_function_Instance_CharacterTable_FFF763D4390483BDA7060CE6BD1418507E949CB5">
                            <name>Instance()</name>
                            <syntax>public static CharacterTable&amp; Instance();</syntax>
                            <returnType ref="type.1584012"/>
                        </function>
                    </staticMemberFunctions>
                </class>
                <class id="1580169">
                    <name>ExtendedCharacterInfo</name>
                    <groupName>ExtendedCharacterInfo</groupName>
                    <syntax> public class ExtendedCharacterInfo;</syntax>
                    <constructors>
                        <constructor id="default_constructor_ExtendedCharacterInfo_71C15B7DF5B99586244DBA2BCFAACDD56FE720EF">
                            <name>ExtendedCharacterInfo()</name>
                            <syntax>public nothrow ExtendedCharacterInfo();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Aliases_ExtendedCharacterInfo_B24744839A92D326628589D5D8F0AF5C089E68DF">
                            <name>Aliases() const</name>
                            <syntax>public nothrow inline const List&lt;System.Unicode.Alias>&amp; Aliases() const;</syntax>
                            <returnType ref="type.1583929"/>
                        </function>
                        <function id="member_function_BidiClassValue_ExtendedCharacterInfo_855EEA6F26CBD983C6B15517AA3DEB2033B210E9">
                            <name>BidiClassValue() const</name>
                            <syntax>public nothrow inline BidiClassId BidiClassValue() const;</syntax>
                            <returnType ref="1580138"/>
                        </function>
                        <function id="member_function_BidiMirroringGlyph_ExtendedCharacterInfo_82512148496B2965744824DD1041393A383CDBAD">
                            <name>BidiMirroringGlyph() const</name>
                            <syntax>public nothrow inline uchar BidiMirroringGlyph() const;</syntax>
                            <returnType ref="type.1579463"/>
                        </function>
                        <function id="member_function_BidiPairedBracket_ExtendedCharacterInfo_35340D3D38098E4AF4D3DEA5BEEC70FC0DACED08">
                            <name>BidiPairedBracket()</name>
                            <syntax>public nothrow inline uchar BidiPairedBracket();</syntax>
                            <returnType ref="type.1579463"/>
                        </function>
                        <function id="member_function_BidiPairedBracketTypeValue_ExtendedCharacterInfo_2C8655B0D798048D5296FFAB8EA92B5B0E916FE8">
                            <name>BidiPairedBracketTypeValue() const</name>
                            <syntax>public nothrow inline BidiPairedBracketTypeId BidiPairedBracketTypeValue() const;</syntax>
                            <returnType ref="1580147"/>
                        </function>
                        <function id="member_function_CanonicalCombiningClass_ExtendedCharacterInfo_B44F7BC0BD7F7BD6F42036F9AD61DD29804F8A80">
                            <name>CanonicalCombiningClass() const</name>
                            <syntax>public nothrow inline byte CanonicalCombiningClass() const;</syntax>
                            <returnType ref="type.1579452"/>
                        </function>
                        <function id="member_function_CharacterName_ExtendedCharacterInfo_476B7EED7965C4363F5DD40D1953117F65BE6C5F">
                            <name>CharacterName() const</name>
                            <syntax>public nothrow inline const String&lt;char>&amp; CharacterName() const;</syntax>
                            <returnType ref="type.1580258"/>
                        </function>
                        <function id="member_function_FullFolding_ExtendedCharacterInfo_5C913DB4BE6EF915E83F3E6D3323E5FF4B4070EC">
                            <name>FullFolding() const</name>
                            <syntax>public nothrow inline const String&lt;uchar>&amp; FullFolding() const;</syntax>
                            <returnType ref="type.1580383"/>
                        </function>
                        <function id="member_function_FullLower_ExtendedCharacterInfo_86528470BA5E5E1326BE7E18641696054AC05145">
                            <name>FullLower() const</name>
                            <syntax>public nothrow inline const String&lt;uchar>&amp; FullLower() const;</syntax>
                            <returnType ref="type.1580383"/>
                        </function>
                        <function id="member_function_FullTitle_ExtendedCharacterInfo_42EE41AC1F7CBABB0AD2EED2361B536F891937BB">
                            <name>FullTitle() const</name>
                            <syntax>public nothrow inline const String&lt;uchar>&amp; FullTitle() const;</syntax>
                            <returnType ref="type.1580383"/>
                        </function>
                        <function id="member_function_FullUpper_ExtendedCharacterInfo_7AC83F5353CDD53E8B7971325FA9A6121C0F5595">
                            <name>FullUpper() const</name>
                            <syntax>public nothrow inline const String&lt;uchar>&amp; FullUpper() const;</syntax>
                            <returnType ref="type.1580383"/>
                        </function>
                        <function id="member_function_NumericTypeValue_ExtendedCharacterInfo_3F38E1AB167D89161B4C892FE39AB54AB4D27708">
                            <name>NumericTypeValue() const</name>
                            <syntax>public nothrow inline NumericTypeId NumericTypeValue() const;</syntax>
                            <returnType ref="1580129"/>
                        </function>
                        <function id="member_function_NumericValue_ExtendedCharacterInfo_840D8E39A8928E5D0389C1BF8073D7AB51BE60C4">
                            <name>NumericValue() const</name>
                            <syntax>public nothrow inline const String&lt;uchar>&amp; NumericValue() const;</syntax>
                            <returnType ref="type.1580383"/>
                        </function>
                        <function id="member_function_Read_ExtendedCharacterInfo_88C8D8BAABFD9A97A0A98B0DD8F04C563ACFF989">
                            <name>Read(BinaryReader&amp; reader)</name>
                            <syntax>public void Read(BinaryReader&amp; reader);</syntax>
                            <parameters>
                                <parameter>
                                    <name>reader</name>
                                    <type ref="type.1583192"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_Unicode1Name_ExtendedCharacterInfo_89F86767C8D88D579C24498A073800C60DEAEDA5">
                            <name>Unicode1Name() const</name>
                            <syntax>public nothrow inline const String&lt;char>&amp; Unicode1Name() const;</syntax>
                            <returnType ref="type.1580258"/>
                        </function>
                    </functions>
                </class>
                <class id="1580181">
                    <name>ExtendedCharacterInfoHeader</name>
                    <groupName>ExtendedCharacterInfoHeader</groupName>
                    <syntax> public class ExtendedCharacterInfoHeader;</syntax>
                    <constructors>
                        <constructor id="default_constructor_ExtendedCharacterInfoHeader_2C53910ECC8A9879CE646F221F36B988281E2D0A">
                            <name>ExtendedCharacterInfoHeader()</name>
                            <syntax>public ExtendedCharacterInfoHeader();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Read_ExtendedCharacterInfoHeader_9AE07DC3EC802A42C08EBF4325BC51C5B6CDCEE8">
                            <name>Read(BinaryReader&amp; reader)</name>
                            <syntax>public void Read(BinaryReader&amp; reader);</syntax>
                            <parameters>
                                <parameter>
                                    <name>reader</name>
                                    <type ref="type.1583192"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_op_index_ExtendedCharacterInfoHeader_713E346877DD531D7741284C4010D2F781053F67">
                            <name>operator[](long index) const</name>
                            <syntax>public uint operator[](long index) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>index</name>
                                    <type ref="type.1579457"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579456"/>
                        </function>
                    </functions>
                </class>
                <class id="1580177">
                    <name>ExtendedCharacterInfoPage</name>
                    <groupName>ExtendedCharacterInfoPage</groupName>
                    <syntax> public class ExtendedCharacterInfoPage;</syntax>
                    <constructors>
                        <constructor id="default_constructor_ExtendedCharacterInfoPage_EA52F08DA30138C286C485ED991923C3BFCE8A57">
                            <name>ExtendedCharacterInfoPage()</name>
                            <syntax>public ExtendedCharacterInfoPage();</syntax>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Read_ExtendedCharacterInfoPage_AB62C5E9C849F03DE92908913713AE87AB50245B">
                            <name>Read(BinaryReader&amp; reader)</name>
                            <syntax>public void Read(BinaryReader&amp; reader);</syntax>
                            <parameters>
                                <parameter>
                                    <name>reader</name>
                                    <type ref="type.1583192"/>
                                </parameter>
                            </parameters>
                        </function>
                        <function id="member_function_op_index_ExtendedCharacterInfoPage_8A8C5EB717EB590EA9D7571F9708CEE1FDBB42DB">
                            <name>operator[](long index) const</name>
                            <syntax>public const ExtendedCharacterInfo&amp; operator[](long index) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>index</name>
                                    <type ref="type.1579457"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1583961"/>
                        </function>
                    </functions>
                </class>
                <class id="1580101">
                    <name>GeneralCategory</name>
                    <groupName>GeneralCategory</groupName>
                    <syntax> public class GeneralCategory;</syntax>
                    <constructors>
                        <constructor id="constructor_GeneralCategory_4E1790328BACE558AFFE0ED4B6A04CB60716D7A1">
                            <name>GeneralCategory(GeneralCategoryId id_, const String&lt;char>&amp; shortName_, const String&lt;char>&amp; longName_)</name>
                            <syntax>public nothrow GeneralCategory(GeneralCategoryId id_, const String&lt;char>&amp; shortName_, const String&lt;char>&amp; longName_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>id_</name>
                                    <type ref="1580100"/>
                                </parameter>
                                <parameter>
                                    <name>shortName_</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                                <parameter>
                                    <name>longName_</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Id_GeneralCategory_B48432BB76D5AD97F2B0F71C53BAEB3E5A8F0933">
                            <name>Id()</name>
                            <syntax>public nothrow inline GeneralCategoryId Id();</syntax>
                            <returnType ref="1580100"/>
                        </function>
                        <function id="member_function_LongName_GeneralCategory_75BE0C9C84EC7D1884F95EADBA5C804C05FB7138">
                            <name>LongName()</name>
                            <syntax>public nothrow inline const String&lt;char>&amp; LongName();</syntax>
                            <returnType ref="type.1580258"/>
                        </function>
                        <function id="member_function_ShortName_GeneralCategory_2A12D1FDFD1E352D612E50F52908D70FC2CD0E3E">
                            <name>ShortName()</name>
                            <syntax>public nothrow inline const String&lt;char>&amp; ShortName();</syntax>
                            <returnType ref="type.1580258"/>
                        </function>
                    </functions>
                </class>
                <class id="1580103">
                    <name>GeneralCategoryTable</name>
                    <groupName>GeneralCategoryTable</groupName>
                    <syntax> public class GeneralCategoryTable;</syntax>
                    <functions>
                        <function id="member_function_GetGeneralCategory_GeneralCategoryTable_839872350602275ABAFDF64E304D8B90B7894F6E">
                            <name>GetGeneralCategory(GeneralCategoryId id) const</name>
                            <syntax>public nothrow const GeneralCategory* GetGeneralCategory(GeneralCategoryId id) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>id</name>
                                    <type ref="1580100"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1582657"/>
                        </function>
                        <function id="member_function_GetGeneralCategoryByLongName_GeneralCategoryTable_91954A63E6A4BFCB0EAD90EDF743928620ACE9CD">
                            <name>GetGeneralCategoryByLongName(const String&lt;char>&amp; longName) const</name>
                            <syntax>public const GeneralCategory* GetGeneralCategoryByLongName(const String&lt;char>&amp; longName) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>longName</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1582657"/>
                        </function>
                        <function id="member_function_GetGeneralCategoryByShortName_GeneralCategoryTable_1EBFE833F51415997A79A808CCDEED714C4351F1">
                            <name>GetGeneralCategoryByShortName(const String&lt;char>&amp; shortName) const</name>
                            <syntax>public const GeneralCategory* GetGeneralCategoryByShortName(const String&lt;char>&amp; shortName) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>shortName</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1582657"/>
                        </function>
                    </functions>
                    <staticMemberFunctions>
                        <function id="member_function_Instance_GeneralCategoryTable_3EC9058FD94696387EE023B151F74B2D4B2FE8D5">
                            <name>Instance()</name>
                            <syntax>public static GeneralCategoryTable&amp; Instance();</syntax>
                            <returnType ref="type.1582656"/>
                        </function>
                    </staticMemberFunctions>
                </class>
                <class id="1580130">
                    <name>NumericType</name>
                    <groupName>NumericType</groupName>
                    <syntax> public class NumericType;</syntax>
                    <constructors>
                        <constructor id="constructor_NumericType_AA7CA9C59E2368C28DBAB97E8EF7E147F9DCECE9">
                            <name>NumericType(NumericTypeId id_, const String&lt;char>&amp; shortName_, const String&lt;char>&amp; longName_)</name>
                            <syntax>public nothrow NumericType(NumericTypeId id_, const String&lt;char>&amp; shortName_, const String&lt;char>&amp; longName_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>id_</name>
                                    <type ref="1580129"/>
                                </parameter>
                                <parameter>
                                    <name>shortName_</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                                <parameter>
                                    <name>longName_</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Id_NumericType_4693FB042A4816CAFF36F95675C668C128E841CC">
                            <name>Id() const</name>
                            <syntax>public nothrow inline NumericTypeId Id() const;</syntax>
                            <returnType ref="1580129"/>
                        </function>
                        <function id="member_function_LongName_NumericType_53B1812EBBE2A8FDBE886384AB0167A7B9534E1E">
                            <name>LongName() const</name>
                            <syntax>public nothrow inline const String&lt;char>&amp; LongName() const;</syntax>
                            <returnType ref="type.1580258"/>
                        </function>
                        <function id="member_function_ShortName_NumericType_9DE261B510973BB42EBAF546FABF6D0651FC357D">
                            <name>ShortName() const</name>
                            <syntax>public nothrow inline const String&lt;char>&amp; ShortName() const;</syntax>
                            <returnType ref="type.1580258"/>
                        </function>
                    </functions>
                </class>
                <class id="1580134">
                    <name>NumericTypeTable</name>
                    <groupName>NumericTypeTable</groupName>
                    <syntax> public class NumericTypeTable;</syntax>
                    <functions>
                        <function id="member_function_GetNumericType_NumericTypeTable_C0998AA5D669A4D93B9A9F82603D42B6E38A6085">
                            <name>GetNumericType(NumericTypeId id) const</name>
                            <syntax>public const NumericType* GetNumericType(NumericTypeId id) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>id</name>
                                    <type ref="1580129"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580133"/>
                        </function>
                        <function id="member_function_GetNumericTypeByLongName_NumericTypeTable_99CE247847BD56BED1C10BF12F902A7C2C48CB82">
                            <name>GetNumericTypeByLongName(const String&lt;char>&amp; longName) const</name>
                            <syntax>public const NumericType* GetNumericTypeByLongName(const String&lt;char>&amp; longName) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>longName</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580133"/>
                        </function>
                        <function id="member_function_GetNumericTypeByShortName_NumericTypeTable_7751D60D774BCFA3CFE83F74D83AFA5BEBA2993D">
                            <name>GetNumericTypeByShortName(const String&lt;char>&amp; shortName) const</name>
                            <syntax>public const NumericType* GetNumericTypeByShortName(const String&lt;char>&amp; shortName) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>shortName</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580133"/>
                        </function>
                    </functions>
                    <staticMemberFunctions>
                        <function id="member_function_Instance_NumericTypeTable_6087FA1AB8F8F6B39034A663400357AA7B208528">
                            <name>Instance()</name>
                            <syntax>public static NumericTypeTable&amp; Instance();</syntax>
                            <returnType ref="type.1583195"/>
                        </function>
                    </staticMemberFunctions>
                </class>
                <class id="1580117">
                    <name>Script</name>
                    <groupName>Script</groupName>
                    <syntax> public class Script;</syntax>
                    <constructors>
                        <constructor id="constructor_Script_E816BFE748DADE29FBD3A02C4C5588D16235967B">
                            <name>Script(ScriptId id_, const String&lt;char>&amp; shortName_, const String&lt;char>&amp; longName_)</name>
                            <syntax>public nothrow Script(ScriptId id_, const String&lt;char>&amp; shortName_, const String&lt;char>&amp; longName_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>id_</name>
                                    <type ref="1580116"/>
                                </parameter>
                                <parameter>
                                    <name>shortName_</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                                <parameter>
                                    <name>longName_</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                    <functions>
                        <function id="member_function_Id_Script_F700DD8C5AEC988E42E194572699C87B7A41C1E8">
                            <name>Id() const</name>
                            <syntax>public nothrow inline ScriptId Id() const;</syntax>
                            <returnType ref="1580116"/>
                        </function>
                        <function id="member_function_LongName_Script_A0F8BE88A9ABF9FC1B61E2D249266CF19BEA43F4">
                            <name>LongName() const</name>
                            <syntax>public nothrow inline const String&lt;char>&amp; LongName() const;</syntax>
                            <returnType ref="type.1580258"/>
                        </function>
                        <function id="member_function_ShortName_Script_37C0020F00B4103484FE454A62FE3B3E4A7DC47C">
                            <name>ShortName() const</name>
                            <syntax>public nothrow inline const String&lt;char>&amp; ShortName() const;</syntax>
                            <returnType ref="type.1580258"/>
                        </function>
                    </functions>
                </class>
                <class id="1580121">
                    <name>ScriptTable</name>
                    <groupName>ScriptTable</groupName>
                    <syntax> public class ScriptTable;</syntax>
                    <functions>
                        <function id="member_function_GetScript_ScriptTable_ACF79696A32FD77C4BC0FBDD323BCDACFAC19350">
                            <name>GetScript(ScriptId id) const</name>
                            <syntax>public const Script* GetScript(ScriptId id) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>id</name>
                                    <type ref="1580116"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580120"/>
                        </function>
                        <function id="member_function_GetScriptByLongName_ScriptTable_FE1461489F277D6E6E9382AD7E1B6766AFE1B96C">
                            <name>GetScriptByLongName(const String&lt;char>&amp; longName) const</name>
                            <syntax>public const Script* GetScriptByLongName(const String&lt;char>&amp; longName) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>longName</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580120"/>
                        </function>
                        <function id="member_function_GetScriptByShortName_ScriptTable_8F5C0AB4B1E54DA612BD20A7A978CB6FB4EAA22F">
                            <name>GetScriptByShortName(const String&lt;char>&amp; shortName) const</name>
                            <syntax>public const Script* GetScriptByShortName(const String&lt;char>&amp; shortName) const;</syntax>
                            <parameters>
                                <parameter>
                                    <name>shortName</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580120"/>
                        </function>
                    </functions>
                    <staticMemberFunctions>
                        <function id="member_function_Instance_ScriptTable_6A04AA6099B4997361DBB78285F669E13364865A">
                            <name>Instance()</name>
                            <syntax>public static ScriptTable&amp; Instance();</syntax>
                            <returnType ref="type.1583015"/>
                        </function>
                    </staticMemberFunctions>
                </class>
                <class id="1580084">
                    <name>UnicodeException</name>
                    <groupName>UnicodeException</groupName>
                    <syntax> public class UnicodeException;</syntax>
                    <baseClass ref="1579802"/>
                    <constructors>
                        <constructor id="constructor_UnicodeException_2EAF7A972CD58C6D3406BA6864BD32D24A2B5955">
                            <name>UnicodeException(const String&lt;char>&amp; message_)</name>
                            <syntax>public nothrow UnicodeException(const String&lt;char>&amp; message_);</syntax>
                            <parameters>
                                <parameter>
                                    <name>message_</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                        </constructor>
                    </constructors>
                </class>
            </classes>
            <functions>
                <function id="function_group_GetAge_8C88A885DC339596A95BB5321DBB200083BA5B97">
                    <name>GetAge</name>
                    <overloads>
                        <overload id="function_GetAge_FCE043877EB3D76C87AA9CED298EC5B31A12CD3D">
                            <name>GetAge(AgeId id)</name>
                            <syntax>public const Age* GetAge(AgeId id);</syntax>
                            <parameters>
                                <parameter>
                                    <name>id</name>
                                    <type ref="1580107"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580111"/>
                        </overload>
                        <overload id="function_GetAge_DF86DB9EC3916504F59D8CAEE32C50A460670971">
                            <name>GetAge(const String&lt;char>&amp; version)</name>
                            <syntax>public const Age* GetAge(const String&lt;char>&amp; version);</syntax>
                            <parameters>
                                <parameter>
                                    <name>version</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580111"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_group_GetAliasType_5BAD7D7E3328583145982BD542F327BFBDC3971B">
                    <name>GetAliasType</name>
                    <overloads>
                        <overload id="function_GetAliasType_5131EFDFD89738E0E33A23C971810844963D2119">
                            <name>GetAliasType(AliasTypeId id)</name>
                            <syntax>public const AliasType* GetAliasType(AliasTypeId id);</syntax>
                            <parameters>
                                <parameter>
                                    <name>id</name>
                                    <type ref="1580156"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580160"/>
                        </overload>
                        <overload id="function_GetAliasType_606DABF861AB5B05A5E66D1699CD9F9591820458">
                            <name>GetAliasType(const String&lt;char>&amp; name)</name>
                            <syntax>public const AliasType* GetAliasType(const String&lt;char>&amp; name);</syntax>
                            <parameters>
                                <parameter>
                                    <name>name</name>
                                    <type ref="type.1580258"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1580160"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_GetBidiClass_17DCBD47B6BECC842977606746E459F559437820">
                    <name>GetBidiClass(BidiClassId id)</name>
                    <syntax>public const BidiClass* GetBidiClass(BidiClassId id);</syntax>
                    <parameters>
                        <parameter>
                            <name>id</name>
                            <type ref="1580138"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1580142"/>
                </function>
                <function id="function_GetBidiClassByLongName_FC1E64B9296E1D0C2175EE07BE61239E516533B4">
                    <name>GetBidiClassByLongName(const String&lt;char>&amp; longName)</name>
                    <syntax>public const BidiClass* GetBidiClassByLongName(const String&lt;char>&amp; longName);</syntax>
                    <parameters>
                        <parameter>
                            <name>longName</name>
                            <type ref="type.1580258"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1580142"/>
                </function>
                <function id="function_GetBidiClassByShortName_38207E9FCF55C4D784FC1475F9AE5C6FBCA5F7C8">
                    <name>GetBidiClassByShortName(const String&lt;char>&amp; shortName)</name>
                    <syntax>public const BidiClass* GetBidiClassByShortName(const String&lt;char>&amp; shortName);</syntax>
                    <parameters>
                        <parameter>
                            <name>shortName</name>
                            <type ref="type.1580258"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1580142"/>
                </function>
                <function id="function_GetBidiPairedBracketType_73FF6C3125D90826758F5B6349002E7758476278">
                    <name>GetBidiPairedBracketType(BidiPairedBracketTypeId id)</name>
                    <syntax>public const BidiPairedBracketType* GetBidiPairedBracketType(BidiPairedBracketTypeId id);</syntax>
                    <parameters>
                        <parameter>
                            <name>id</name>
                            <type ref="1580147"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1580151"/>
                </function>
                <function id="function_GetBidiPairedBracketTypeByLongName_CB25709E45980F333C345B0446451674EB6A93F5">
                    <name>GetBidiPairedBracketTypeByLongName(const String&lt;char>&amp; longName)</name>
                    <syntax>public const BidiPairedBracketType* GetBidiPairedBracketTypeByLongName(const String&lt;char>&amp; longName);</syntax>
                    <parameters>
                        <parameter>
                            <name>longName</name>
                            <type ref="type.1580258"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1580151"/>
                </function>
                <function id="function_GetBidiPairedBracketTypeByShortName_DB49F723DCA73BAF29016748A69979AC71177AE8">
                    <name>GetBidiPairedBracketTypeByShortName(const String&lt;char>&amp; shortName)</name>
                    <syntax>public const BidiPairedBracketType* GetBidiPairedBracketTypeByShortName(const String&lt;char>&amp; shortName);</syntax>
                    <parameters>
                        <parameter>
                            <name>shortName</name>
                            <type ref="type.1580258"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1580151"/>
                </function>
                <function id="function_GetBinaryProperty_8198EF7E65082C2AB644EF1A2FA02B7BD9009AA5">
                    <name>GetBinaryProperty(BinaryPropertyId id)</name>
                    <syntax>public nothrow const BinaryProperty* GetBinaryProperty(BinaryPropertyId id);</syntax>
                    <parameters>
                        <parameter>
                            <name>id</name>
                            <type ref="1580086"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1582282"/>
                </function>
                <function id="function_GetBinaryPropertyByLongName_3C1B0F6BFF56DDB70DF3742107C4953B94E3FEE1">
                    <name>GetBinaryPropertyByLongName(String&lt;char> longName)</name>
                    <syntax>public const BinaryProperty* GetBinaryPropertyByLongName(String&lt;char> longName);</syntax>
                    <parameters>
                        <parameter>
                            <name>longName</name>
                            <type ref="type.1580238"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1582282"/>
                </function>
                <function id="function_GetBinaryPropertyByShortName_E11C5F2428C638230169A4997DBCF8EA689B3550">
                    <name>GetBinaryPropertyByShortName(String&lt;char> shortName)</name>
                    <syntax>public const BinaryProperty* GetBinaryPropertyByShortName(String&lt;char> shortName);</syntax>
                    <parameters>
                        <parameter>
                            <name>shortName</name>
                            <type ref="type.1580238"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1582282"/>
                </function>
                <function id="function_GetBlock_06FA17E00D6A61AE8509A39E8651D430DC9E6AD2">
                    <name>GetBlock(BlockId id)</name>
                    <syntax>public const Block* GetBlock(BlockId id);</syntax>
                    <parameters>
                        <parameter>
                            <name>id</name>
                            <type ref="1580093"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1582476"/>
                </function>
                <function id="function_GetBlockByLongName_A8082383E7780D2E9F4A6015A8C1A603B5E08178">
                    <name>GetBlockByLongName(const String&lt;char>&amp; longName)</name>
                    <syntax>public const Block* GetBlockByLongName(const String&lt;char>&amp; longName);</syntax>
                    <parameters>
                        <parameter>
                            <name>longName</name>
                            <type ref="type.1580258"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1582476"/>
                </function>
                <function id="function_GetBlockByShortName_81199047E7D2FCA53FB3FF437F4B9D018255D839">
                    <name>GetBlockByShortName(const String&lt;char>&amp; shortName)</name>
                    <syntax>public const Block* GetBlockByShortName(const String&lt;char>&amp; shortName);</syntax>
                    <parameters>
                        <parameter>
                            <name>shortName</name>
                            <type ref="type.1580258"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1582476"/>
                </function>
                <function id="function_GetCharacterInfo_465CC400257EACCA66CBFC96F8C478EC51E17E30">
                    <name>GetCharacterInfo(uchar codePoint)</name>
                    <syntax>public const CharacterInfo&amp; GetCharacterInfo(uchar codePoint);</syntax>
                    <parameters>
                        <parameter>
                            <name>codePoint</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1583932"/>
                </function>
                <function id="function_GetExtendedCharacterInfo_CFCDBF14EBABFEE49F0E79CD8CCC9484B278C0D4">
                    <name>GetExtendedCharacterInfo(uchar codePoint)</name>
                    <syntax>public const ExtendedCharacterInfo&amp; GetExtendedCharacterInfo(uchar codePoint);</syntax>
                    <parameters>
                        <parameter>
                            <name>codePoint</name>
                            <type ref="type.1579463"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1583961"/>
                </function>
                <function id="function_group_GetGeneralCategory_D57C2C957FEC08D82983EC8283583DC3D0C85FEC">
                    <name>GetGeneralCategory</name>
                    <overloads>
                        <overload id="function_GetGeneralCategory_FBBF71A13ABFC72FA20C3594EB360207A00A3830">
                            <name>GetGeneralCategory(GeneralCategoryId id)</name>
                            <syntax>public const GeneralCategory* GetGeneralCategory(GeneralCategoryId id);</syntax>
                            <parameters>
                                <parameter>
                                    <name>id</name>
                                    <type ref="1580100"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1582657"/>
                        </overload>
                        <overload id="function_GetGeneralCategory_A2012BAC60AF4743CCB019E77820FB4774BD54DE">
                            <name>GetGeneralCategory(uchar c)</name>
                            <syntax>public GeneralCategoryId GetGeneralCategory(uchar c);</syntax>
                            <parameters>
                                <parameter>
                                    <name>c</name>
                                    <type ref="type.1579463"/>
                                </parameter>
                            </parameters>
                            <returnType ref="1580100"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_GetGeneralCategoryByLongName_B71E39F53B5E06F5483EA2504DD0FBDC7CF66600">
                    <name>GetGeneralCategoryByLongName(const String&lt;char>&amp; longName)</name>
                    <syntax>public const GeneralCategory* GetGeneralCategoryByLongName(const String&lt;char>&amp; longName);</syntax>
                    <parameters>
                        <parameter>
                            <name>longName</name>
                            <type ref="type.1580258"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1582657"/>
                </function>
                <function id="function_GetGeneralCategoryByShortName_691FC7D7C9482EE8EECC9BAEF72D54C19388AA14">
                    <name>GetGeneralCategoryByShortName(const String&lt;char>&amp; shortName)</name>
                    <syntax>public const GeneralCategory* GetGeneralCategoryByShortName(const String&lt;char>&amp; shortName);</syntax>
                    <parameters>
                        <parameter>
                            <name>shortName</name>
                            <type ref="type.1580258"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1582657"/>
                </function>
                <function id="function_group_GetHashCode_89A2042A5CD2F7E3D9338AA1067835C2275AD586">
                    <name>GetHashCode</name>
                    <overloads>
                        <overload id="function_GetHashCode_6DA6FBD0E06B013D02900342E67C32DD93E15A38">
                            <name>GetHashCode(AgeId id)</name>
                            <syntax>public nothrow inline ulong GetHashCode(AgeId id);</syntax>
                            <parameters>
                                <parameter>
                                    <name>id</name>
                                    <type ref="1580107"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579458"/>
                        </overload>
                        <overload id="function_GetHashCode_DCBFFB5D8E21AFFA4501ED91251F202CF3003336">
                            <name>GetHashCode(AliasTypeId id)</name>
                            <syntax>public nothrow inline ulong GetHashCode(AliasTypeId id);</syntax>
                            <parameters>
                                <parameter>
                                    <name>id</name>
                                    <type ref="1580156"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579458"/>
                        </overload>
                        <overload id="function_GetHashCode_A331739E7A65B0C2DDB0FDF09B81335E46E60DBE">
                            <name>GetHashCode(BidiClassId id)</name>
                            <syntax>public nothrow inline ulong GetHashCode(BidiClassId id);</syntax>
                            <parameters>
                                <parameter>
                                    <name>id</name>
                                    <type ref="1580138"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579458"/>
                        </overload>
                        <overload id="function_GetHashCode_761023A133597A58620B33042C4F2CA14AB31E72">
                            <name>GetHashCode(BidiPairedBracketTypeId id)</name>
                            <syntax>public nothrow inline ulong GetHashCode(BidiPairedBracketTypeId id);</syntax>
                            <parameters>
                                <parameter>
                                    <name>id</name>
                                    <type ref="1580147"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579458"/>
                        </overload>
                        <overload id="function_GetHashCode_AFC706E33C739B708850783869FC12B45BF953D7">
                            <name>GetHashCode(BinaryPropertyId id)</name>
                            <syntax>public nothrow inline ulong GetHashCode(BinaryPropertyId id);</syntax>
                            <parameters>
                                <parameter>
                                    <name>id</name>
                                    <type ref="1580086"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579458"/>
                        </overload>
                        <overload id="function_GetHashCode_EE310E4EDC0CB81009A5E4995AF2F8EA4A9E08C3">
                            <name>GetHashCode(BlockId blockId)</name>
                            <syntax>public nothrow inline ulong GetHashCode(BlockId blockId);</syntax>
                            <parameters>
                                <parameter>
                                    <name>blockId</name>
                                    <type ref="1580093"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579458"/>
                        </overload>
                        <overload id="function_GetHashCode_5BBF1F15FD513F80527549420F4B05CF6242DD2C">
                            <name>GetHashCode(GeneralCategoryId id)</name>
                            <syntax>public nothrow inline const ulong GetHashCode(GeneralCategoryId id);</syntax>
                            <parameters>
                                <parameter>
                                    <name>id</name>
                                    <type ref="1580100"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1582655"/>
                        </overload>
                        <overload id="function_GetHashCode_6D457CDA60494E1F39A65C7FC07165E2F99ECFB8">
                            <name>GetHashCode(NumericTypeId id)</name>
                            <syntax>public nothrow inline ulong GetHashCode(NumericTypeId id);</syntax>
                            <parameters>
                                <parameter>
                                    <name>id</name>
                                    <type ref="1580129"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579458"/>
                        </overload>
                        <overload id="function_GetHashCode_3BD25774E2728761590BF06718263CF7DDA0584C">
                            <name>GetHashCode(ScriptId id)</name>
                            <syntax>public nothrow inline ulong GetHashCode(ScriptId id);</syntax>
                            <parameters>
                                <parameter>
                                    <name>id</name>
                                    <type ref="1580116"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579458"/>
                        </overload>
                    </overloads>
                </function>
                <function id="function_GetNumericType_E7EC2FA4A40A1271DB0E4FE68D15B58547E1B0BB">
                    <name>GetNumericType(NumericTypeId id)</name>
                    <syntax>public const NumericType* GetNumericType(NumericTypeId id);</syntax>
                    <parameters>
                        <parameter>
                            <name>id</name>
                            <type ref="1580129"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1580133"/>
                </function>
                <function id="function_GetNumericTypeByLongName_7410AF6CE718D1C2FE93C82E30121776AD17183C">
                    <name>GetNumericTypeByLongName(const String&lt;char>&amp; longName)</name>
                    <syntax>public const NumericType* GetNumericTypeByLongName(const String&lt;char>&amp; longName);</syntax>
                    <parameters>
                        <parameter>
                            <name>longName</name>
                            <type ref="type.1580258"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1580133"/>
                </function>
                <function id="function_GetNumericTypeByShortName_9C8E6B2B6DA07FAC7C74CFA825C1EAE17AEA9BB3">
                    <name>GetNumericTypeByShortName(const String&lt;char>&amp; shortName)</name>
                    <syntax>public const NumericType* GetNumericTypeByShortName(const String&lt;char>&amp; shortName);</syntax>
                    <parameters>
                        <parameter>
                            <name>shortName</name>
                            <type ref="type.1580258"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1580133"/>
                </function>
                <function id="function_GetScript_F1DCB244992D0D6766827D24FE60B576565B2E27">
                    <name>GetScript(ScriptId id)</name>
                    <syntax>public const Script* GetScript(ScriptId id);</syntax>
                    <parameters>
                        <parameter>
                            <name>id</name>
                            <type ref="1580116"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1580120"/>
                </function>
                <function id="function_GetScriptByLongName_A753237FFEF1630A72F30B9C6C478BDBBBBB181A">
                    <name>GetScriptByLongName(const String&lt;char>&amp; longName)</name>
                    <syntax>public const Script* GetScriptByLongName(const String&lt;char>&amp; longName);</syntax>
                    <parameters>
                        <parameter>
                            <name>longName</name>
                            <type ref="type.1580258"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1580120"/>
                </function>
                <function id="function_GetScriptByShortName_CDE61F43314096507222CAF8E79E5850026974FB">
                    <name>GetScriptByShortName(const String&lt;char>&amp; shortName)</name>
                    <syntax>public const Script* GetScriptByShortName(const String&lt;char>&amp; shortName);</syntax>
                    <parameters>
                        <parameter>
                            <name>shortName</name>
                            <type ref="type.1580258"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1580120"/>
                </function>
                <function id="function_HasGeneralCategory_433C1196F6F5600F2CFD9428AEEC08DA42278C7B">
                    <name>HasGeneralCategory(uchar c, GeneralCategoryId generalCategory)</name>
                    <syntax>public bool HasGeneralCategory(uchar c, GeneralCategoryId generalCategory);</syntax>
                    <parameters>
                        <parameter>
                            <name>c</name>
                            <type ref="type.1579463"/>
                        </parameter>
                        <parameter>
                            <name>generalCategory</name>
                            <type ref="1580100"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1579450"/>
                </function>
                <function id="function_MakeCanonicalPropertyName_431B6D493A0B0C0ADB2BCEF9955C922DF2F74C1E">
                    <name>MakeCanonicalPropertyName(const String&lt;char>&amp; s)</name>
                    <syntax>public String&lt;char> MakeCanonicalPropertyName(const String&lt;char>&amp; s);</syntax>
                    <parameters>
                        <parameter>
                            <name>s</name>
                            <type ref="type.1580258"/>
                        </parameter>
                    </parameters>
                    <returnType ref="type.1580238"/>
                </function>
                <function id="function_PathToUcdBinFile_457C6951EB09C991B5FC8A5F72CDE66CF8949E4B">
                    <name>PathToUcdBinFile()</name>
                    <syntax>public String&lt;char> PathToUcdBinFile();</syntax>
                    <returnType ref="type.1580238"/>
                </function>
                <function id="function_PathToUnicodeDirectory_C1606E555D6C5C32BDDA57C3B6E4D8FAE0327F0C">
                    <name>PathToUnicodeDirectory()</name>
                    <syntax>public String&lt;char> PathToUnicodeDirectory();</syntax>
                    <returnType ref="type.1580238"/>
                </function>
                <function id="function_ThrowUnicodeException_51091169DBCE4D2D78BCCFC418E278FE7DC7A618">
                    <name>ThrowUnicodeException(const String&lt;char>&amp; message)</name>
                    <syntax>public void ThrowUnicodeException(const String&lt;char>&amp; message);</syntax>
                    <parameters>
                        <parameter>
                            <name>message</name>
                            <type ref="type.1580258"/>
                        </parameter>
                    </parameters>
                </function>
                <function id="function_group_op_eq_113E99B94B6066F05BCB5D8853925A6908CA0763">
                    <name>operator==</name>
                    <overloads>
                        <overload id="function_op_eq_83A8B7FEB821A3E5376B401A7BF4EA90AB09B330">
                            <name>operator==(AgeId left, AgeId right)</name>
                            <syntax>public bool operator==(AgeId left, AgeId right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="1580107"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="1580107"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </overload>
                        <overload id="function_op_eq_67827E8957B60EE5DFE915D24522AAD7C26E2632">
                            <name>operator==(AliasTypeId left, AliasTypeId right)</name>
                            <syntax>public bool operator==(AliasTypeId left, AliasTypeId right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="1580156"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="1580156"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </overload>
                        <overload id="function_op_eq_6149115F4696250818CA959B79694D8992644D65">
                            <name>operator==(BidiClassId left, BidiClassId right)</name>
                            <syntax>public bool operator==(BidiClassId left, BidiClassId right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="1580138"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="1580138"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </overload>
                        <overload id="function_op_eq_BE9E5E35E1917F52586BBC2681FC2DB047C3D91A">
                            <name>operator==(BidiPairedBracketTypeId left, BidiPairedBracketTypeId right)</name>
                            <syntax>public bool operator==(BidiPairedBracketTypeId left, BidiPairedBracketTypeId right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="1580147"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="1580147"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </overload>
                        <overload id="function_op_eq_AFF4F76F08CDE93AA35B06C74A0E3ABF41C9CA4F">
                            <name>operator==(BinaryPropertyId left, BinaryPropertyId right)</name>
                            <syntax>public bool operator==(BinaryPropertyId left, BinaryPropertyId right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="1580086"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="1580086"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </overload>
                        <overload id="function_op_eq_5C7F33A8AD6D2B38731AA453E2568EAABA26EF4D">
                            <name>operator==(BlockId left, BlockId right)</name>
                            <syntax>public bool operator==(BlockId left, BlockId right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="1580093"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="1580093"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </overload>
                        <overload id="function_op_eq_56DD78300CDAA77EFA674B212F37C6DA6B4A8A25">
                            <name>operator==(GeneralCategoryId left, GeneralCategoryId right)</name>
                            <syntax>public bool operator==(GeneralCategoryId left, GeneralCategoryId right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="1580100"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="1580100"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </overload>
                        <overload id="function_op_eq_9D813DC24A843D463836CC5E8DFFA6C7BE28B4C8">
                            <name>operator==(NumericTypeId left, NumericTypeId right)</name>
                            <syntax>public bool operator==(NumericTypeId left, NumericTypeId right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="1580129"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="1580129"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </overload>
                        <overload id="function_op_eq_0A3FE44ED63F035DA0D27F69D568AA9AA65BFC5D">
                            <name>operator==(ScriptId left, ScriptId right)</name>
                            <syntax>public bool operator==(ScriptId left, ScriptId right);</syntax>
                            <parameters>
                                <parameter>
                                    <name>left</name>
                                    <type ref="1580116"/>
                                </parameter>
                                <parameter>
                                    <name>right</name>
                                    <type ref="1580116"/>
                                </parameter>
                            </parameters>
                            <returnType ref="type.1579450"/>
                        </overload>
                    </overloads>
                </function>
            </functions>
            <constants>
                <constant id="constant_characterInfoPageSize_1CFACF5D275D30BAA969366B45F004B8AABB4EF5">
                    <name>characterInfoPageSize</name>
                    <syntax>public const uint characterInfoPageSize = 32768u;</syntax>
                    <type ref="type.1579456"/>
                    <value>32768u</value>
                </constant>
                <constant id="constant_characterInfoSize_675F322735FDCA39CF3C4A82CAD21A7E2BDE4133">
                    <name>characterInfoSize</name>
                    <syntax>public const uint characterInfoSize = 32u;</syntax>
                    <type ref="type.1579456"/>
                    <value>32u</value>
                </constant>
                <constant id="constant_cmajor_ucd_version_1_26A3FD99ABF62AC00BDA25708F1A77BF73223BBD">
                    <name>cmajor_ucd_version_1</name>
                    <syntax>public const byte cmajor_ucd_version_1 = 49u;</syntax>
                    <type ref="type.1579452"/>
                    <value>49u</value>
                </constant>
                <constant id="constant_current_cmajor_ucd_version_FC285C4C47B9986B55F53C617D1038D02D9A6CEF">
                    <name>current_cmajor_ucd_version</name>
                    <syntax>public const byte current_cmajor_ucd_version = 49u;</syntax>
                    <type ref="type.1579452"/>
                    <value>49u</value>
                </constant>
                <constant id="constant_numInfosInPage_780066B664B17182EE3C0EC04EAEB023C2F867A3">
                    <name>numInfosInPage</name>
                    <syntax>public const long numInfosInPage = 1024;</syntax>
                    <type ref="type.1579457"/>
                    <value>1024</value>
                </constant>
            </constants>
            <enumerations>
                <enumeration id="1580107">
                    <name>AgeId</name>
                    <syntax>public enum AgeId;</syntax>
                    <underlyingType ref="type.1579452"/>
                    <enumConstant>
                        <name>age_unassigned</name>
                        <value>0u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>age_1_1</name>
                        <value>1u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>age_2_0</name>
                        <value>2u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>age_2_1</name>
                        <value>3u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>age_3_0</name>
                        <value>4u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>age_3_1</name>
                        <value>5u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>age_3_2</name>
                        <value>6u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>age_4_0</name>
                        <value>7u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>age_4_1</name>
                        <value>8u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>age_5_0</name>
                        <value>9u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>age_5_1</name>
                        <value>10u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>age_5_2</name>
                        <value>11u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>age_6_0</name>
                        <value>12u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>age_6_1</name>
                        <value>13u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>age_6_2</name>
                        <value>14u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>age_6_3</name>
                        <value>15u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>age_7_0</name>
                        <value>16u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>age_8_0</name>
                        <value>17u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>age_9_0</name>
                        <value>18u</value>
                    </enumConstant>
                </enumeration>
                <enumeration id="1580156">
                    <name>AliasTypeId</name>
                    <syntax>public enum AliasTypeId;</syntax>
                    <underlyingType ref="type.1579452"/>
                    <enumConstant>
                        <name>none</name>
                        <value>0u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>correction</name>
                        <value>1u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>control</name>
                        <value>2u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>alternate</name>
                        <value>3u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>figment</name>
                        <value>4u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>abbreviation</name>
                        <value>5u</value>
                    </enumConstant>
                </enumeration>
                <enumeration id="1580138">
                    <name>BidiClassId</name>
                    <syntax>public enum BidiClassId;</syntax>
                    <underlyingType ref="type.1579452"/>
                    <enumConstant>
                        <name>none</name>
                        <value>0u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>al</name>
                        <value>1u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>an</name>
                        <value>2u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>b</name>
                        <value>3u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>bn</name>
                        <value>4u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cs</name>
                        <value>5u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>en</name>
                        <value>6u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>es</name>
                        <value>7u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>et</name>
                        <value>8u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>fsi</name>
                        <value>9u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>l</name>
                        <value>10u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>lre</name>
                        <value>11u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>lri</name>
                        <value>12u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>lro</name>
                        <value>13u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>nsm</name>
                        <value>14u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>on</name>
                        <value>15u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>pdf</name>
                        <value>16u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>pdi</name>
                        <value>17u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>r</name>
                        <value>18u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>rle</name>
                        <value>19u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>rli</name>
                        <value>20u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>rlo</name>
                        <value>21u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>s</name>
                        <value>22u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>ws</name>
                        <value>23u</value>
                    </enumConstant>
                </enumeration>
                <enumeration id="1580147">
                    <name>BidiPairedBracketTypeId</name>
                    <syntax>public enum BidiPairedBracketTypeId;</syntax>
                    <underlyingType ref="type.1579452"/>
                    <enumConstant>
                        <name>none</name>
                        <value>0u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>o</name>
                        <value>1u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>c</name>
                        <value>2u</value>
                    </enumConstant>
                </enumeration>
                <enumeration id="1580086">
                    <name>BinaryPropertyId</name>
                    <syntax>public enum BinaryPropertyId;</syntax>
                    <underlyingType ref="type.1579452"/>
                    <enumConstant>
                        <name>asciiHexDigit</name>
                        <value>0u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>alphabetic</name>
                        <value>1u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>bidiControl</name>
                        <value>2u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>bidiMirrored</name>
                        <value>3u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cased</name>
                        <value>4u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>compositionExclusion</name>
                        <value>5u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>caseIgnorable</name>
                        <value>6u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>fullCompositionExclusion</name>
                        <value>7u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>changesWhenCasefolded</name>
                        <value>8u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>changesWhenCaseMapped</name>
                        <value>9u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>changesWhenNFKCCasefolded</name>
                        <value>10u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>changesWhenLowercased</name>
                        <value>11u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>changesWhenTitlecased</name>
                        <value>12u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>changesWhenUppercased</name>
                        <value>13u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>dash</name>
                        <value>14u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>deprecated</name>
                        <value>15u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>defaultIgnorableCodePoint</name>
                        <value>16u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>diacritic</name>
                        <value>17u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>extender</name>
                        <value>18u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>graphemeBase</name>
                        <value>19u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>graphemeExtend</name>
                        <value>20u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>graphemeLink</name>
                        <value>21u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>hexDigit</name>
                        <value>22u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>hyphen</name>
                        <value>23u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>idContinue</name>
                        <value>24u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>ideographic</name>
                        <value>25u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>idStart</name>
                        <value>26u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>idsBinaryOperator</name>
                        <value>27u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>idsTrinaryOperator</name>
                        <value>28u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>joinControl</name>
                        <value>29u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>logicalOrderException</name>
                        <value>30u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>lowercase</name>
                        <value>31u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>math</name>
                        <value>32u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>noncharacterCodePoint</name>
                        <value>33u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>otherAlphabetic</name>
                        <value>34u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>otherDefaultIgnorableCodePoint</name>
                        <value>35u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>otherGraphemeExtend</name>
                        <value>36u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>otherIdContinue</name>
                        <value>37u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>otherIdStart</name>
                        <value>38u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>otherLowercase</name>
                        <value>39u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>otherMath</name>
                        <value>40u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>otherUppercase</name>
                        <value>41u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>patternSyntax</name>
                        <value>42u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>patternWhiteSpace</name>
                        <value>43u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>prependedConcatenationMark</name>
                        <value>44u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>quotationMark</name>
                        <value>45u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>radical</name>
                        <value>46u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>softDotted</name>
                        <value>47u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>sentenceterminal</name>
                        <value>48u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>terminalPunctuation</name>
                        <value>49u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>unifiedIdeograph</name>
                        <value>50u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>uppercase</name>
                        <value>51u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>variationSelector</name>
                        <value>52u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>whiteSpace</name>
                        <value>53u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>xidContinue</name>
                        <value>54u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>xidStart</name>
                        <value>55u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>expandsOnNFC</name>
                        <value>56u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>expandsOnNFD</name>
                        <value>57u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>expandsOnNFKC</name>
                        <value>58u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>expandsOnNFKD</name>
                        <value>59u</value>
                    </enumConstant>
                </enumeration>
                <enumeration id="1580093">
                    <name>BlockId</name>
                    <syntax>public enum BlockId;</syntax>
                    <underlyingType ref="type.1579454"/>
                    <enumConstant>
                        <name>none</name>
                        <value>0u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>adlam</name>
                        <value>1u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>aegeanNumbers</name>
                        <value>2u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>ahom</name>
                        <value>3u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>alchemical</name>
                        <value>4u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>alphabeticPf</name>
                        <value>5u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>anatolianHieroglyphs</name>
                        <value>6u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>ancientGreekMusic</name>
                        <value>7u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>ancientGreekNumbers</name>
                        <value>8u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>ancientSymbols</name>
                        <value>9u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>arabic</name>
                        <value>10u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>arabicExtA</name>
                        <value>11u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>arabicMath</name>
                        <value>12u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>arabicPfA</name>
                        <value>13u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>arabicPfB</name>
                        <value>14u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>arabicSup</name>
                        <value>15u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>armenian</name>
                        <value>16u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>arrows</name>
                        <value>17u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>ascii</name>
                        <value>18u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>avestan</name>
                        <value>19u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>balinese</name>
                        <value>20u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>bamum</name>
                        <value>21u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>bamumSup</name>
                        <value>22u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>bassaVah</name>
                        <value>23u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>batak</name>
                        <value>24u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>bengali</name>
                        <value>25u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>bhaisuki</name>
                        <value>26u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>blockElements</name>
                        <value>27u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>bopomofo</name>
                        <value>28u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>bopomofoExt</name>
                        <value>29u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>boxDrawing</name>
                        <value>30u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>brahmi</name>
                        <value>31u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>braille</name>
                        <value>32u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>buginese</name>
                        <value>33u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>buhid</name>
                        <value>34u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>byzantineMusic</name>
                        <value>35u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>carian</name>
                        <value>36u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>caucasianAlbanian</name>
                        <value>37u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>chakma</name>
                        <value>38u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cham</name>
                        <value>39u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cherokee</name>
                        <value>40u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cherokeeSup</name>
                        <value>41u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cjk</name>
                        <value>42u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cjkCompat</name>
                        <value>43u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cjkCompatForms</name>
                        <value>44u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cjkCompatIdeographs</name>
                        <value>45u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cjkCompatIdeographsSup</name>
                        <value>46u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cjkExtA</name>
                        <value>47u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cjkExtB</name>
                        <value>48u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cjkExtC</name>
                        <value>49u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cjkExtD</name>
                        <value>50u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cjkExtE</name>
                        <value>51u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cjkRadicalsSup</name>
                        <value>52u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cjkStrokes</name>
                        <value>53u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cjkSymbols</name>
                        <value>54u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>compatJamo</name>
                        <value>55u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>controlPictures</name>
                        <value>56u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>coptic</name>
                        <value>57u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>copticEpactNumbers</name>
                        <value>58u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>countingRod</name>
                        <value>59u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cuneiform</name>
                        <value>60u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cuneiformNumbers</name>
                        <value>61u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>currencySymbols</name>
                        <value>62u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cypriotSyllabary</name>
                        <value>63u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cyrillic</name>
                        <value>64u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cyrillicExtA</name>
                        <value>65u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cyrillicExtB</name>
                        <value>66u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cyrillicExtC</name>
                        <value>67u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cyrillicSup</name>
                        <value>68u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>deseret</name>
                        <value>69u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>devanagari</name>
                        <value>70u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>devanagariExt</name>
                        <value>71u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>diacriticals</name>
                        <value>72u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>diariticalsForSymbols</name>
                        <value>73u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>diacriticalsSup</name>
                        <value>74u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>diacriticalsExt</name>
                        <value>75u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>dingbats</name>
                        <value>76u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>domino</name>
                        <value>77u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>duployan</name>
                        <value>78u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>earlyDynasticCuneiform</name>
                        <value>79u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>egyptianHieroglyphs</name>
                        <value>80u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>elbasan</name>
                        <value>81u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>emoticons</name>
                        <value>82u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>enclosedAlphanum</name>
                        <value>83u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>enclosedAlphanumSup</name>
                        <value>84u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>enclosedCjk</name>
                        <value>85u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>enclosedIdeographicSup</name>
                        <value>86u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>ethiopic</name>
                        <value>87u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>ethiopicExt</name>
                        <value>88u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>ethiopicExtA</name>
                        <value>89u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>ethiopicSup</name>
                        <value>90u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>geometricShapes</name>
                        <value>91u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>geometricShapesExt</name>
                        <value>92u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>georgian</name>
                        <value>93u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>georgianSup</name>
                        <value>94u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>glagolitic</name>
                        <value>95u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>glagoliticSup</name>
                        <value>96u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>gothic</name>
                        <value>97u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>grantha</name>
                        <value>98u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>greek</name>
                        <value>99u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>greekExt</name>
                        <value>100u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>gujarati</name>
                        <value>101u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>gurmukhi</name>
                        <value>102u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>halfAndFullForms</name>
                        <value>103u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>halfMarks</name>
                        <value>104u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>hangul</name>
                        <value>105u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>hanunoo</name>
                        <value>106u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>hatran</name>
                        <value>107u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>hebrew</name>
                        <value>108u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>highPuSurrogates</name>
                        <value>109u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>highSurrogates</name>
                        <value>110u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>hiragana</name>
                        <value>111u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>idc</name>
                        <value>112u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>ideographicSymbols</name>
                        <value>113u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>imperialAramaic</name>
                        <value>114u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>indicNumberForms</name>
                        <value>115u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>inscriptionalPahlavi</name>
                        <value>116u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>inscriptionalParthian</name>
                        <value>117u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>ipaExt</name>
                        <value>118u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>jamo</name>
                        <value>119u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>jamoExtA</name>
                        <value>120u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>jamoExtB</name>
                        <value>121u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>javanese</name>
                        <value>122u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>kaithi</name>
                        <value>123u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>kanaSup</name>
                        <value>124u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>kanbun</name>
                        <value>125u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>kangxi</name>
                        <value>126u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>kannada</name>
                        <value>127u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>katakana</name>
                        <value>128u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>katakanaExt</name>
                        <value>129u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>kayahLi</name>
                        <value>130u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>kharoshthi</name>
                        <value>131u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>khmer</name>
                        <value>132u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>khmerSymbols</name>
                        <value>133u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>khojki</name>
                        <value>134u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>khudawadi</name>
                        <value>135u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>lao</name>
                        <value>136u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>latin1Sup</name>
                        <value>137u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>latinExtA</name>
                        <value>138u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>latinExtAdditional</name>
                        <value>139u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>latinExtB</name>
                        <value>140u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>latinExtC</name>
                        <value>141u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>latinExtD</name>
                        <value>142u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>latinExtE</name>
                        <value>143u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>lepcha</name>
                        <value>144u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>letterlikeSymbols</name>
                        <value>145u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>limbu</name>
                        <value>146u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>linearA</name>
                        <value>147u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>linearBIdeograms</name>
                        <value>148u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>linearBSyllabary</name>
                        <value>149u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>lisu</name>
                        <value>150u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>lowSurrogates</name>
                        <value>151u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>lycian</name>
                        <value>152u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>lydian</name>
                        <value>153u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>mahajani</name>
                        <value>154u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>mahjong</name>
                        <value>155u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>malayalam</name>
                        <value>156u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>mandaic</name>
                        <value>157u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>manichean</name>
                        <value>158u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>marchen</name>
                        <value>159u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>mathAlphanum</name>
                        <value>160u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>mathOperators</name>
                        <value>161u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>meeteiMayek</name>
                        <value>162u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>meeteiMayekExt</name>
                        <value>163u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>mendeKikakui</name>
                        <value>164u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>meroiticCursive</name>
                        <value>165u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>meroiticHieroglyphs</name>
                        <value>166u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>miao</name>
                        <value>167u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>miscArrows</name>
                        <value>168u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>miscMathSymbolsA</name>
                        <value>169u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>miscMathSymbolsB</name>
                        <value>170u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>miscPictographs</name>
                        <value>171u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>miscSymbols</name>
                        <value>172u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>miscTechnical</name>
                        <value>173u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>modi</name>
                        <value>174u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>modifierLetters</name>
                        <value>175u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>modifierToneLetters</name>
                        <value>176u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>mongolian</name>
                        <value>177u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>mongolianSup</name>
                        <value>178u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>mro</name>
                        <value>179u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>music</name>
                        <value>180u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>multani</name>
                        <value>181u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>myanmar</name>
                        <value>182u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>myanmarExtA</name>
                        <value>183u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>myanmarExtB</name>
                        <value>184u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>nabataean</name>
                        <value>185u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>nb</name>
                        <value>186u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>newTaiLue</name>
                        <value>187u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>newa</name>
                        <value>188u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>nko</name>
                        <value>189u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>numberForms</name>
                        <value>190u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>ocr</name>
                        <value>191u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>ogham</name>
                        <value>192u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>olChiki</name>
                        <value>193u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>oldHungarian</name>
                        <value>194u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>oldItalic</name>
                        <value>195u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>oldNorthArabian</name>
                        <value>196u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>oldPermic</name>
                        <value>197u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>oldPersian</name>
                        <value>198u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>oldSouthArabian</name>
                        <value>199u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>oldTurkic</name>
                        <value>200u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>oriya</name>
                        <value>201u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>ornamentalDingbats</name>
                        <value>202u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>osage</name>
                        <value>203u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>osmanya</name>
                        <value>204u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>pahawhHmong</name>
                        <value>205u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>palmyrene</name>
                        <value>206u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>pauCinHau</name>
                        <value>207u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>phagsPa</name>
                        <value>208u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>phaistos</name>
                        <value>209u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>phoenician</name>
                        <value>210u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>phoneticExt</name>
                        <value>211u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>phoneticExtSup</name>
                        <value>212u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>playingCards</name>
                        <value>213u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>psalterPahlavi</name>
                        <value>214u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>pua</name>
                        <value>215u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>punctuation</name>
                        <value>216u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>rejang</name>
                        <value>217u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>rumi</name>
                        <value>218u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>runic</name>
                        <value>219u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>samaritan</name>
                        <value>220u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>saurashtra</name>
                        <value>221u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>sharada</name>
                        <value>222u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>shavian</name>
                        <value>223u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>shorthandFormatControls</name>
                        <value>224u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>siddham</name>
                        <value>225u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>sinhala</name>
                        <value>226u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>sinhalaArchaicNumbers</name>
                        <value>227u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>smallForms</name>
                        <value>228u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>soraSompeng</name>
                        <value>229u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>specials</name>
                        <value>230u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>sundanese</name>
                        <value>231u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>sundaneseSup</name>
                        <value>232u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>supArrowsA</name>
                        <value>233u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>supArrowsB</name>
                        <value>234u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>supArrowsC</name>
                        <value>235u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>supMathOperators</name>
                        <value>236u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>supPuaA</name>
                        <value>237u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>supPuaB</name>
                        <value>238u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>supPunctuation</name>
                        <value>239u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>supSymbolsAndPictographs</name>
                        <value>240u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>superAndSub</name>
                        <value>241u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>suttonSignWriting</name>
                        <value>242u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>sylotiNagri</name>
                        <value>243u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>syriac</name>
                        <value>244u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>tagalog</name>
                        <value>245u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>tagbanwa</name>
                        <value>246u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>tags</name>
                        <value>247u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>taiLe</name>
                        <value>248u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>taiTham</name>
                        <value>249u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>taiViet</name>
                        <value>250u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>taiXuanJing</name>
                        <value>251u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>takri</name>
                        <value>252u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>tamil</name>
                        <value>253u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>tangut</name>
                        <value>254u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>tangutComponents</name>
                        <value>255u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>telugu</name>
                        <value>256u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>thaana</name>
                        <value>257u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>thai</name>
                        <value>258u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>tibetan</name>
                        <value>259u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>tifinagh</name>
                        <value>260u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>tirhuta</name>
                        <value>261u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>transportAndMap</name>
                        <value>262u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>ucas</name>
                        <value>263u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>ucasExt</name>
                        <value>264u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>ugaritic</name>
                        <value>265u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>vai</name>
                        <value>266u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>vedicExt</name>
                        <value>267u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>verticalForms</name>
                        <value>268u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>vs</name>
                        <value>269u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>vsSup</name>
                        <value>270u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>warangCiti</name>
                        <value>271u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>yiRadicals</name>
                        <value>272u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>yiSyllables</name>
                        <value>273u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>yijing</name>
                        <value>274u</value>
                    </enumConstant>
                </enumeration>
                <enumeration id="1580100">
                    <name>GeneralCategoryId</name>
                    <syntax>public enum GeneralCategoryId;</syntax>
                    <underlyingType ref="type.1579456"/>
                    <enumConstant>
                        <name>none</name>
                        <value>0u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>Lu</name>
                        <value>1u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>Ll</name>
                        <value>2u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>Lt</name>
                        <value>4u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>Lm</name>
                        <value>8u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>Lo</name>
                        <value>16u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>LC</name>
                        <value>7u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>L</name>
                        <value>31u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>Mn</name>
                        <value>32u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>Mc</name>
                        <value>64u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>Me</name>
                        <value>128u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>M</name>
                        <value>224u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>Nd</name>
                        <value>256u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>Nl</name>
                        <value>512u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>No</name>
                        <value>1024u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>N</name>
                        <value>1792u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>Pc</name>
                        <value>2048u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>Pd</name>
                        <value>4096u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>Ps</name>
                        <value>8192u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>Pe</name>
                        <value>16384u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>Pi</name>
                        <value>32768u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>Pf</name>
                        <value>65536u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>Po</name>
                        <value>131072u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>P</name>
                        <value>260096u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>Sm</name>
                        <value>262144u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>Sc</name>
                        <value>524288u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>Sk</name>
                        <value>1048576u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>So</name>
                        <value>2097152u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>S</name>
                        <value>3932160u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>Zs</name>
                        <value>4194304u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>Zl</name>
                        <value>8388608u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>Zp</name>
                        <value>16777216u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>Z</name>
                        <value>29360128u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>Cc</name>
                        <value>33554432u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>Cf</name>
                        <value>67108864u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>Cs</name>
                        <value>134217728u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>Co</name>
                        <value>268435456u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>Cn</name>
                        <value>536870912u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>C</name>
                        <value>1040187392u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>G</name>
                        <value>8388607u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>B</name>
                        <value>8388383u</value>
                    </enumConstant>
                </enumeration>
                <enumeration id="1580129">
                    <name>NumericTypeId</name>
                    <syntax>public enum NumericTypeId;</syntax>
                    <underlyingType ref="type.1579452"/>
                    <enumConstant>
                        <name>none</name>
                        <value>0u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>de</name>
                        <value>1u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>di</name>
                        <value>2u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>nu</name>
                        <value>3u</value>
                    </enumConstant>
                </enumeration>
                <enumeration id="1580116">
                    <name>ScriptId</name>
                    <syntax>public enum ScriptId;</syntax>
                    <underlyingType ref="type.1579452"/>
                    <enumConstant>
                        <name>none</name>
                        <value>0u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>adlm</name>
                        <value>1u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>aghb</name>
                        <value>2u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>ahom</name>
                        <value>3u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>arab</name>
                        <value>4u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>armi</name>
                        <value>5u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>armn</name>
                        <value>6u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>avst</name>
                        <value>7u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>bali</name>
                        <value>8u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>bamu</name>
                        <value>9u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>bass</name>
                        <value>10u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>batk</name>
                        <value>11u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>beng</name>
                        <value>12u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>bhks</name>
                        <value>13u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>bopo</name>
                        <value>14u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>brah</name>
                        <value>15u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>brai</name>
                        <value>16u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>bugi</name>
                        <value>17u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>buhd</name>
                        <value>18u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cakm</name>
                        <value>19u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cans</name>
                        <value>20u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cari</name>
                        <value>21u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cham</name>
                        <value>22u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cher</name>
                        <value>23u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>copt</name>
                        <value>24u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cprt</name>
                        <value>25u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>cyrl</name>
                        <value>26u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>deva</name>
                        <value>27u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>dsrt</name>
                        <value>28u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>dupl</name>
                        <value>29u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>elba</name>
                        <value>30u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>egyp</name>
                        <value>31u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>ethi</name>
                        <value>32u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>geor</name>
                        <value>33u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>glag</name>
                        <value>34u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>goth</name>
                        <value>35u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>gran</name>
                        <value>36u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>grek</name>
                        <value>37u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>gujr</name>
                        <value>38u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>guru</name>
                        <value>39u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>hang</name>
                        <value>40u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>hani</name>
                        <value>41u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>hano</name>
                        <value>42u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>hatr</name>
                        <value>43u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>hebr</name>
                        <value>44u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>hira</name>
                        <value>45u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>hluw</name>
                        <value>46u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>hmng</name>
                        <value>47u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>hrkt</name>
                        <value>48u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>hung</name>
                        <value>49u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>ital</name>
                        <value>50u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>java</name>
                        <value>51u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>kali</name>
                        <value>52u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>kana</name>
                        <value>53u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>khar</name>
                        <value>54u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>khmr</name>
                        <value>55u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>khoj</name>
                        <value>56u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>knda</name>
                        <value>57u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>kthi</name>
                        <value>58u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>lana</name>
                        <value>59u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>laoo</name>
                        <value>60u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>latn</name>
                        <value>61u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>lepc</name>
                        <value>62u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>limb</name>
                        <value>63u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>lina</name>
                        <value>64u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>linb</name>
                        <value>65u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>lisu</name>
                        <value>66u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>lyci</name>
                        <value>67u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>lydi</name>
                        <value>68u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>mahj</name>
                        <value>69u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>mand</name>
                        <value>70u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>mani</name>
                        <value>71u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>marc</name>
                        <value>72u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>mend</name>
                        <value>73u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>merc</name>
                        <value>74u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>mero</name>
                        <value>75u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>mlym</name>
                        <value>76u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>modi</name>
                        <value>77u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>mong</name>
                        <value>78u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>mroo</name>
                        <value>79u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>mtei</name>
                        <value>80u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>mult</name>
                        <value>81u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>mymr</name>
                        <value>82u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>narb</name>
                        <value>83u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>nbat</name>
                        <value>84u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>newa</name>
                        <value>85u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>nkoo</name>
                        <value>86u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>ogam</name>
                        <value>87u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>olck</name>
                        <value>88u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>orkh</name>
                        <value>89u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>orya</name>
                        <value>90u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>osge</name>
                        <value>91u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>osma</name>
                        <value>92u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>palm</name>
                        <value>93u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>pauc</name>
                        <value>94u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>perm</name>
                        <value>95u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>phag</name>
                        <value>96u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>phli</name>
                        <value>97u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>phlp</name>
                        <value>98u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>phnx</name>
                        <value>99u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>plrd</name>
                        <value>100u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>prti</name>
                        <value>101u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>qaai</name>
                        <value>102u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>rjng</name>
                        <value>103u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>runr</name>
                        <value>104u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>samr</name>
                        <value>105u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>sarb</name>
                        <value>106u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>saur</name>
                        <value>107u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>sgnw</name>
                        <value>108u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>shaw</name>
                        <value>109u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>shrd</name>
                        <value>110u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>sidd</name>
                        <value>111u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>sind</name>
                        <value>112u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>sinh</name>
                        <value>113u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>sora</name>
                        <value>114u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>sund</name>
                        <value>115u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>sylo</name>
                        <value>116u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>syrc</name>
                        <value>117u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>tagb</name>
                        <value>118u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>takr</name>
                        <value>119u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>tale</name>
                        <value>120u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>talu</name>
                        <value>121u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>taml</name>
                        <value>122u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>tang</name>
                        <value>123u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>tavt</name>
                        <value>124u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>telu</name>
                        <value>125u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>tfng</name>
                        <value>126u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>tglg</name>
                        <value>127u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>thaa</name>
                        <value>128u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>thai</name>
                        <value>129u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>tibt</name>
                        <value>130u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>tirh</name>
                        <value>131u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>ugar</name>
                        <value>132u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>vaii</name>
                        <value>133u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>wara</name>
                        <value>134u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>xpeo</name>
                        <value>135u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>xsux</name>
                        <value>136u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>yiii</name>
                        <value>137u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>zinh</name>
                        <value>138u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>zyyy</name>
                        <value>139u</value>
                    </enumConstant>
                    <enumConstant>
                        <name>zzzz</name>
                        <value>140u</value>
                    </enumConstant>
                </enumeration>
            </enumerations>
        </namespace>
    </namespaces>
    <types>
        <type id="1580108">
            <name>Age</name>
        </type>
        <type derived="true" id="type.1580109">
            <name>Age*</name>
            <content>
                <baseType ref="1580108"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582918">
            <name>Age*&amp;</name>
            <content>
                <baseType ref="1580108"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582859">
            <name>Age*&amp;&amp;</name>
            <content>
                <baseType ref="1580108"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583003">
            <name>Age**</name>
            <content>
                <baseType ref="1580108"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584608">
            <name>Age**&amp;&amp;</name>
            <content>
                <baseType ref="1580108"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="1580107">
            <name>AgeId</name>
        </type>
        <type derived="true" id="type.1584552">
            <name>AgeId&amp;</name>
            <content>
                <baseType ref="1580107"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582835">
            <name>AgeId&amp;&amp;</name>
            <content>
                <baseType ref="1580107"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582834">
            <name>AgeId*</name>
            <content>
                <baseType ref="1580107"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1580112">
            <name>AgeTable</name>
        </type>
        <type derived="true" id="type.1582836">
            <name>AgeTable&amp;</name>
            <content>
                <baseType ref="1580112"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580115">
            <name>AgeTable*</name>
            <content>
                <baseType ref="1580112"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1580165">
            <name>Alias</name>
        </type>
        <type derived="true" id="type.1583921">
            <name>Alias&amp;</name>
            <content>
                <baseType ref="1580165"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583931">
            <name>Alias&amp;&amp;</name>
            <content>
                <baseType ref="1580165"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580166">
            <name>Alias*</name>
            <content>
                <baseType ref="1580165"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1580157">
            <name>AliasType</name>
        </type>
        <type derived="true" id="type.1580158">
            <name>AliasType*</name>
            <content>
                <baseType ref="1580157"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583814">
            <name>AliasType*&amp;</name>
            <content>
                <baseType ref="1580157"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583755">
            <name>AliasType*&amp;&amp;</name>
            <content>
                <baseType ref="1580157"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583899">
            <name>AliasType**</name>
            <content>
                <baseType ref="1580157"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1585013">
            <name>AliasType**&amp;&amp;</name>
            <content>
                <baseType ref="1580157"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="1580156">
            <name>AliasTypeId</name>
        </type>
        <type derived="true" id="type.1584957">
            <name>AliasTypeId&amp;</name>
            <content>
                <baseType ref="1580156"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583731">
            <name>AliasTypeId&amp;&amp;</name>
            <content>
                <baseType ref="1580156"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583730">
            <name>AliasTypeId*</name>
            <content>
                <baseType ref="1580156"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1580161">
            <name>AliasTypeTable</name>
        </type>
        <type derived="true" id="type.1583732">
            <name>AliasTypeTable&amp;</name>
            <content>
                <baseType ref="1580161"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580164">
            <name>AliasTypeTable*</name>
            <content>
                <baseType ref="1580161"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1579866">
            <name>Argument</name>
        </type>
        <type id="1579863">
            <name>Argument1</name>
        </type>
        <type id="1579844">
            <name>Argument2</name>
        </type>
        <type id="1580139">
            <name>BidiClass</name>
        </type>
        <type derived="true" id="type.1580140">
            <name>BidiClass*</name>
            <content>
                <baseType ref="1580139"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583456">
            <name>BidiClass*&amp;</name>
            <content>
                <baseType ref="1580139"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583397">
            <name>BidiClass*&amp;&amp;</name>
            <content>
                <baseType ref="1580139"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583541">
            <name>BidiClass**</name>
            <content>
                <baseType ref="1580139"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584851">
            <name>BidiClass**&amp;&amp;</name>
            <content>
                <baseType ref="1580139"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="1580138">
            <name>BidiClassId</name>
        </type>
        <type derived="true" id="type.1584795">
            <name>BidiClassId&amp;</name>
            <content>
                <baseType ref="1580138"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583373">
            <name>BidiClassId&amp;&amp;</name>
            <content>
                <baseType ref="1580138"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583372">
            <name>BidiClassId*</name>
            <content>
                <baseType ref="1580138"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1580143">
            <name>BidiClassTable</name>
        </type>
        <type derived="true" id="type.1583374">
            <name>BidiClassTable&amp;</name>
            <content>
                <baseType ref="1580143"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580146">
            <name>BidiClassTable*</name>
            <content>
                <baseType ref="1580143"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1580148">
            <name>BidiPairedBracketType</name>
        </type>
        <type derived="true" id="type.1580149">
            <name>BidiPairedBracketType*</name>
            <content>
                <baseType ref="1580148"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583635">
            <name>BidiPairedBracketType*&amp;</name>
            <content>
                <baseType ref="1580148"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583576">
            <name>BidiPairedBracketType*&amp;&amp;</name>
            <content>
                <baseType ref="1580148"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583720">
            <name>BidiPairedBracketType**</name>
            <content>
                <baseType ref="1580148"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584932">
            <name>BidiPairedBracketType**&amp;&amp;</name>
            <content>
                <baseType ref="1580148"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="1580147">
            <name>BidiPairedBracketTypeId</name>
        </type>
        <type derived="true" id="type.1584876">
            <name>BidiPairedBracketTypeId&amp;</name>
            <content>
                <baseType ref="1580147"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583552">
            <name>BidiPairedBracketTypeId&amp;&amp;</name>
            <content>
                <baseType ref="1580147"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583551">
            <name>BidiPairedBracketTypeId*</name>
            <content>
                <baseType ref="1580147"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1580152">
            <name>BidiPairedBracketTypeTable</name>
        </type>
        <type derived="true" id="type.1583553">
            <name>BidiPairedBracketTypeTable&amp;</name>
            <content>
                <baseType ref="1580152"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580155">
            <name>BidiPairedBracketTypeTable*</name>
            <content>
                <baseType ref="1580152"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.153" specialization="true">
            <name>BinaryFun&lt;Argument, Argument, bool></name>
            <content>
                <primaryType ref="1580615"/>
                <argumentType ref="1579866"/>
                <argumentType ref="1579866"/>
                <argumentType ref="type.1579450"/>
            </content>
        </type>
        <type derived="true" id="type.154">
            <name>BinaryFun&lt;Argument, Argument, bool>*</name>
            <content>
                <baseType ref="type.153"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1579842">
            <name>BinaryFun&lt;Argument1, Argument2, Result></name>
        </type>
        <type id="type.1580615" specialization="true">
            <name>BinaryFun&lt;Argument1, Argument2, Result></name>
            <content>
                <primaryType ref="1580615"/>
                <argumentType ref="1579843"/>
                <argumentType ref="1579844"/>
                <argumentType ref="1579845"/>
            </content>
        </type>
        <type id="type.150" specialization="true">
            <name>BinaryFun&lt;Argument1, Argument2, bool></name>
            <content>
                <primaryType ref="1580615"/>
                <argumentType ref="1579863"/>
                <argumentType ref="1579864"/>
                <argumentType ref="type.1579450"/>
            </content>
        </type>
        <type derived="true" id="type.151">
            <name>BinaryFun&lt;Argument1, Argument2, bool>*</name>
            <content>
                <baseType ref="type.150"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582374" specialization="true">
            <name>BinaryFun&lt;String&lt;char>, String&lt;char>, bool></name>
            <content>
                <primaryType ref="1580615"/>
                <argumentType ref="type.1580238"/>
                <argumentType ref="type.1580238"/>
                <argumentType ref="type.1579450"/>
            </content>
        </type>
        <type derived="true" id="type.1584345">
            <name>BinaryFun&lt;String&lt;char>, String&lt;char>, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582374"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582375">
            <name>BinaryFun&lt;String&lt;char>, String&lt;char>, bool>*</name>
            <content>
                <baseType ref="type.1582374"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582847" specialization="true">
            <name>BinaryFun&lt;System.Unicode.AgeId, System.Unicode.AgeId, bool></name>
            <content>
                <primaryType ref="1580615"/>
                <argumentType ref="1580107"/>
                <argumentType ref="1580107"/>
                <argumentType ref="type.1579450"/>
            </content>
        </type>
        <type derived="true" id="type.1584574">
            <name>BinaryFun&lt;System.Unicode.AgeId, System.Unicode.AgeId, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582847"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582848">
            <name>BinaryFun&lt;System.Unicode.AgeId, System.Unicode.AgeId, bool>*</name>
            <content>
                <baseType ref="type.1582847"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583743" specialization="true">
            <name>BinaryFun&lt;System.Unicode.AliasTypeId, System.Unicode.AliasTypeId, bool></name>
            <content>
                <primaryType ref="1580615"/>
                <argumentType ref="1580156"/>
                <argumentType ref="1580156"/>
                <argumentType ref="type.1579450"/>
            </content>
        </type>
        <type derived="true" id="type.1584979">
            <name>BinaryFun&lt;System.Unicode.AliasTypeId, System.Unicode.AliasTypeId, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583743"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583744">
            <name>BinaryFun&lt;System.Unicode.AliasTypeId, System.Unicode.AliasTypeId, bool>*</name>
            <content>
                <baseType ref="type.1583743"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583385" specialization="true">
            <name>BinaryFun&lt;System.Unicode.BidiClassId, System.Unicode.BidiClassId, bool></name>
            <content>
                <primaryType ref="1580615"/>
                <argumentType ref="1580138"/>
                <argumentType ref="1580138"/>
                <argumentType ref="type.1579450"/>
            </content>
        </type>
        <type derived="true" id="type.1584817">
            <name>BinaryFun&lt;System.Unicode.BidiClassId, System.Unicode.BidiClassId, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583385"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583386">
            <name>BinaryFun&lt;System.Unicode.BidiClassId, System.Unicode.BidiClassId, bool>*</name>
            <content>
                <baseType ref="type.1583385"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583564" specialization="true">
            <name>BinaryFun&lt;System.Unicode.BidiPairedBracketTypeId, System.Unicode.BidiPairedBracketTypeId, bool></name>
            <content>
                <primaryType ref="1580615"/>
                <argumentType ref="1580147"/>
                <argumentType ref="1580147"/>
                <argumentType ref="type.1579450"/>
            </content>
        </type>
        <type derived="true" id="type.1584898">
            <name>BinaryFun&lt;System.Unicode.BidiPairedBracketTypeId, System.Unicode.BidiPairedBracketTypeId, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583564"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583565">
            <name>BinaryFun&lt;System.Unicode.BidiPairedBracketTypeId, System.Unicode.BidiPairedBracketTypeId, bool>*</name>
            <content>
                <baseType ref="type.1583564"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582293" specialization="true">
            <name>BinaryFun&lt;System.Unicode.BinaryPropertyId, System.Unicode.BinaryPropertyId, bool></name>
            <content>
                <primaryType ref="1580615"/>
                <argumentType ref="1580086"/>
                <argumentType ref="1580086"/>
                <argumentType ref="type.1579450"/>
            </content>
        </type>
        <type derived="true" id="type.1584309">
            <name>BinaryFun&lt;System.Unicode.BinaryPropertyId, System.Unicode.BinaryPropertyId, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582293"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582294">
            <name>BinaryFun&lt;System.Unicode.BinaryPropertyId, System.Unicode.BinaryPropertyId, bool>*</name>
            <content>
                <baseType ref="type.1582293"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582487" specialization="true">
            <name>BinaryFun&lt;System.Unicode.BlockId, System.Unicode.BlockId, bool></name>
            <content>
                <primaryType ref="1580615"/>
                <argumentType ref="1580093"/>
                <argumentType ref="1580093"/>
                <argumentType ref="type.1579450"/>
            </content>
        </type>
        <type derived="true" id="type.1584412">
            <name>BinaryFun&lt;System.Unicode.BlockId, System.Unicode.BlockId, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582487"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582488">
            <name>BinaryFun&lt;System.Unicode.BlockId, System.Unicode.BlockId, bool>*</name>
            <content>
                <baseType ref="type.1582487"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582668" specialization="true">
            <name>BinaryFun&lt;System.Unicode.GeneralCategoryId, System.Unicode.GeneralCategoryId, bool></name>
            <content>
                <primaryType ref="1580615"/>
                <argumentType ref="1580100"/>
                <argumentType ref="1580100"/>
                <argumentType ref="type.1579450"/>
            </content>
        </type>
        <type derived="true" id="type.1584493">
            <name>BinaryFun&lt;System.Unicode.GeneralCategoryId, System.Unicode.GeneralCategoryId, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582668"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582669">
            <name>BinaryFun&lt;System.Unicode.GeneralCategoryId, System.Unicode.GeneralCategoryId, bool>*</name>
            <content>
                <baseType ref="type.1582668"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583206" specialization="true">
            <name>BinaryFun&lt;System.Unicode.NumericTypeId, System.Unicode.NumericTypeId, bool></name>
            <content>
                <primaryType ref="1580615"/>
                <argumentType ref="1580129"/>
                <argumentType ref="1580129"/>
                <argumentType ref="type.1579450"/>
            </content>
        </type>
        <type derived="true" id="type.1584736">
            <name>BinaryFun&lt;System.Unicode.NumericTypeId, System.Unicode.NumericTypeId, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583206"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583207">
            <name>BinaryFun&lt;System.Unicode.NumericTypeId, System.Unicode.NumericTypeId, bool>*</name>
            <content>
                <baseType ref="type.1583206"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583026" specialization="true">
            <name>BinaryFun&lt;System.Unicode.ScriptId, System.Unicode.ScriptId, bool></name>
            <content>
                <primaryType ref="1580615"/>
                <argumentType ref="1580116"/>
                <argumentType ref="1580116"/>
                <argumentType ref="type.1579450"/>
            </content>
        </type>
        <type derived="true" id="type.1584655">
            <name>BinaryFun&lt;System.Unicode.ScriptId, System.Unicode.ScriptId, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583026"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583027">
            <name>BinaryFun&lt;System.Unicode.ScriptId, System.Unicode.ScriptId, bool>*</name>
            <content>
                <baseType ref="type.1583026"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.279" specialization="true">
            <name>BinaryFun&lt;T, T, T></name>
            <content>
                <primaryType ref="1580615"/>
                <argumentType ref="1579906"/>
                <argumentType ref="1579906"/>
                <argumentType ref="1579906"/>
            </content>
        </type>
        <type id="type.129" specialization="true">
            <name>BinaryFun&lt;T, T, T></name>
            <content>
                <primaryType ref="1580615"/>
                <argumentType ref="1579852"/>
                <argumentType ref="1579852"/>
                <argumentType ref="1579852"/>
            </content>
        </type>
        <type id="type.145" specialization="true">
            <name>BinaryFun&lt;T, T, T></name>
            <content>
                <primaryType ref="1580615"/>
                <argumentType ref="1579859"/>
                <argumentType ref="1579859"/>
                <argumentType ref="1579859"/>
            </content>
        </type>
        <type id="type.1580655" specialization="true">
            <name>BinaryFun&lt;T, T, T></name>
            <content>
                <primaryType ref="1580615"/>
                <argumentType ref="1579855"/>
                <argumentType ref="1579855"/>
                <argumentType ref="1579855"/>
            </content>
        </type>
        <type id="type.134" specialization="true">
            <name>BinaryFun&lt;T, T, T></name>
            <content>
                <primaryType ref="1580615"/>
                <argumentType ref="1579854"/>
                <argumentType ref="1579854"/>
                <argumentType ref="1579854"/>
            </content>
        </type>
        <type id="type.304" specialization="true">
            <name>BinaryFun&lt;T, T, T></name>
            <content>
                <primaryType ref="1580615"/>
                <argumentType ref="1579916"/>
                <argumentType ref="1579916"/>
                <argumentType ref="1579916"/>
            </content>
        </type>
        <type id="type.299" specialization="true">
            <name>BinaryFun&lt;T, T, T></name>
            <content>
                <primaryType ref="1580615"/>
                <argumentType ref="1579914"/>
                <argumentType ref="1579914"/>
                <argumentType ref="1579914"/>
            </content>
        </type>
        <type id="type.1580627" specialization="true">
            <name>BinaryFun&lt;T, T, T></name>
            <content>
                <primaryType ref="1580615"/>
                <argumentType ref="1579848"/>
                <argumentType ref="1579848"/>
                <argumentType ref="1579848"/>
            </content>
        </type>
        <type id="type.289" specialization="true">
            <name>BinaryFun&lt;T, T, T></name>
            <content>
                <primaryType ref="1580615"/>
                <argumentType ref="1579910"/>
                <argumentType ref="1579910"/>
                <argumentType ref="1579910"/>
            </content>
        </type>
        <type id="type.140" specialization="true">
            <name>BinaryFun&lt;T, T, T></name>
            <content>
                <primaryType ref="1580615"/>
                <argumentType ref="1579857"/>
                <argumentType ref="1579857"/>
                <argumentType ref="1579857"/>
            </content>
        </type>
        <type id="type.1580655" specialization="true">
            <name>BinaryFun&lt;T, T, T></name>
            <content>
                <primaryType ref="1580615"/>
                <argumentType ref="1579855"/>
                <argumentType ref="1579855"/>
                <argumentType ref="1579855"/>
            </content>
        </type>
        <type id="type.284" specialization="true">
            <name>BinaryFun&lt;T, T, T></name>
            <content>
                <primaryType ref="1580615"/>
                <argumentType ref="1579908"/>
                <argumentType ref="1579908"/>
                <argumentType ref="1579908"/>
            </content>
        </type>
        <type id="type.118" specialization="true">
            <name>BinaryFun&lt;T, T, T></name>
            <content>
                <primaryType ref="1580615"/>
                <argumentType ref="1579847"/>
                <argumentType ref="1579847"/>
                <argumentType ref="1579847"/>
            </content>
        </type>
        <type derived="true" id="type.1580656">
            <name>BinaryFun&lt;T, T, T>*</name>
            <content>
                <baseType ref="type.1580655"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.285">
            <name>BinaryFun&lt;T, T, T>*</name>
            <content>
                <baseType ref="type.284"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580628">
            <name>BinaryFun&lt;T, T, T>*</name>
            <content>
                <baseType ref="type.1580627"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.290">
            <name>BinaryFun&lt;T, T, T>*</name>
            <content>
                <baseType ref="type.289"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.141">
            <name>BinaryFun&lt;T, T, T>*</name>
            <content>
                <baseType ref="type.140"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.146">
            <name>BinaryFun&lt;T, T, T>*</name>
            <content>
                <baseType ref="type.145"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.119">
            <name>BinaryFun&lt;T, T, T>*</name>
            <content>
                <baseType ref="type.118"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.280">
            <name>BinaryFun&lt;T, T, T>*</name>
            <content>
                <baseType ref="type.279"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.135">
            <name>BinaryFun&lt;T, T, T>*</name>
            <content>
                <baseType ref="type.134"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580656">
            <name>BinaryFun&lt;T, T, T>*</name>
            <content>
                <baseType ref="type.1580655"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.130">
            <name>BinaryFun&lt;T, T, T>*</name>
            <content>
                <baseType ref="type.129"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.300">
            <name>BinaryFun&lt;T, T, T>*</name>
            <content>
                <baseType ref="type.299"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.305">
            <name>BinaryFun&lt;T, T, T>*</name>
            <content>
                <baseType ref="type.304"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.250" specialization="true">
            <name>BinaryFun&lt;T, T, bool></name>
            <content>
                <primaryType ref="1580615"/>
                <argumentType ref="1579895"/>
                <argumentType ref="1579895"/>
                <argumentType ref="type.1579450"/>
            </content>
        </type>
        <type id="type.165" specialization="true">
            <name>BinaryFun&lt;T, T, bool></name>
            <content>
                <primaryType ref="1580615"/>
                <argumentType ref="1579870"/>
                <argumentType ref="1579870"/>
                <argumentType ref="type.1579450"/>
            </content>
        </type>
        <type id="type.199" specialization="true">
            <name>BinaryFun&lt;T, T, bool></name>
            <content>
                <primaryType ref="1580615"/>
                <argumentType ref="1579880"/>
                <argumentType ref="1579880"/>
                <argumentType ref="type.1579450"/>
            </content>
        </type>
        <type id="type.216" specialization="true">
            <name>BinaryFun&lt;T, T, bool></name>
            <content>
                <primaryType ref="1580615"/>
                <argumentType ref="1579885"/>
                <argumentType ref="1579885"/>
                <argumentType ref="type.1579450"/>
            </content>
        </type>
        <type id="type.233" specialization="true">
            <name>BinaryFun&lt;T, T, bool></name>
            <content>
                <primaryType ref="1580615"/>
                <argumentType ref="1579890"/>
                <argumentType ref="1579890"/>
                <argumentType ref="type.1579450"/>
            </content>
        </type>
        <type id="type.182" specialization="true">
            <name>BinaryFun&lt;T, T, bool></name>
            <content>
                <primaryType ref="1580615"/>
                <argumentType ref="1579875"/>
                <argumentType ref="1579875"/>
                <argumentType ref="type.1579450"/>
            </content>
        </type>
        <type derived="true" id="type.166">
            <name>BinaryFun&lt;T, T, bool>*</name>
            <content>
                <baseType ref="type.165"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.217">
            <name>BinaryFun&lt;T, T, bool>*</name>
            <content>
                <baseType ref="type.216"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.251">
            <name>BinaryFun&lt;T, T, bool>*</name>
            <content>
                <baseType ref="type.250"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.234">
            <name>BinaryFun&lt;T, T, bool>*</name>
            <content>
                <baseType ref="type.233"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.200">
            <name>BinaryFun&lt;T, T, bool>*</name>
            <content>
                <baseType ref="type.199"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.183">
            <name>BinaryFun&lt;T, T, bool>*</name>
            <content>
                <baseType ref="type.182"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.258" specialization="true">
            <name>BinaryFun&lt;T, U, bool></name>
            <content>
                <primaryType ref="1580615"/>
                <argumentType ref="1579897"/>
                <argumentType ref="1579898"/>
                <argumentType ref="type.1579450"/>
            </content>
        </type>
        <type id="type.173" specialization="true">
            <name>BinaryFun&lt;T, U, bool></name>
            <content>
                <primaryType ref="1580615"/>
                <argumentType ref="1579872"/>
                <argumentType ref="1579873"/>
                <argumentType ref="type.1579450"/>
            </content>
        </type>
        <type id="type.224" specialization="true">
            <name>BinaryFun&lt;T, U, bool></name>
            <content>
                <primaryType ref="1580615"/>
                <argumentType ref="1579887"/>
                <argumentType ref="1579888"/>
                <argumentType ref="type.1579450"/>
            </content>
        </type>
        <type id="type.207" specialization="true">
            <name>BinaryFun&lt;T, U, bool></name>
            <content>
                <primaryType ref="1580615"/>
                <argumentType ref="1579882"/>
                <argumentType ref="1579883"/>
                <argumentType ref="type.1579450"/>
            </content>
        </type>
        <type id="type.190" specialization="true">
            <name>BinaryFun&lt;T, U, bool></name>
            <content>
                <primaryType ref="1580615"/>
                <argumentType ref="1579877"/>
                <argumentType ref="1579878"/>
                <argumentType ref="type.1579450"/>
            </content>
        </type>
        <type id="type.241" specialization="true">
            <name>BinaryFun&lt;T, U, bool></name>
            <content>
                <primaryType ref="1580615"/>
                <argumentType ref="1579892"/>
                <argumentType ref="1579893"/>
                <argumentType ref="type.1579450"/>
            </content>
        </type>
        <type derived="true" id="type.208">
            <name>BinaryFun&lt;T, U, bool>*</name>
            <content>
                <baseType ref="type.207"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.225">
            <name>BinaryFun&lt;T, U, bool>*</name>
            <content>
                <baseType ref="type.224"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.242">
            <name>BinaryFun&lt;T, U, bool>*</name>
            <content>
                <baseType ref="type.241"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.174">
            <name>BinaryFun&lt;T, U, bool>*</name>
            <content>
                <baseType ref="type.173"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.191">
            <name>BinaryFun&lt;T, U, bool>*</name>
            <content>
                <baseType ref="type.190"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.259">
            <name>BinaryFun&lt;T, U, bool>*</name>
            <content>
                <baseType ref="type.258"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.266" specialization="true">
            <name>BinaryFun&lt;bool, bool, bool></name>
            <content>
                <primaryType ref="1580615"/>
                <argumentType ref="type.1579450"/>
                <argumentType ref="type.1579450"/>
                <argumentType ref="type.1579450"/>
            </content>
        </type>
        <type derived="true" id="type.267">
            <name>BinaryFun&lt;bool, bool, bool>*</name>
            <content>
                <baseType ref="type.266"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.152" specialization="true">
            <name>BinaryPred&lt;Argument, Argument></name>
            <content>
                <primaryType ref="1580677"/>
                <argumentType ref="1579866"/>
                <argumentType ref="1579866"/>
            </content>
        </type>
        <type derived="true" id="type.155">
            <name>BinaryPred&lt;Argument, Argument>*</name>
            <content>
                <baseType ref="type.152"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1579862">
            <name>BinaryPred&lt;Argument1, Argument2></name>
        </type>
        <type id="type.1580677" specialization="true">
            <name>BinaryPred&lt;Argument1, Argument2></name>
            <content>
                <primaryType ref="1580677"/>
                <argumentType ref="1579863"/>
                <argumentType ref="1579864"/>
            </content>
        </type>
        <type id="type.1582373" specialization="true">
            <name>BinaryPred&lt;String&lt;char>, String&lt;char>></name>
            <content>
                <primaryType ref="1580677"/>
                <argumentType ref="type.1580238"/>
                <argumentType ref="type.1580238"/>
            </content>
        </type>
        <type derived="true" id="type.1584342">
            <name>BinaryPred&lt;String&lt;char>, String&lt;char>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582373"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582376">
            <name>BinaryPred&lt;String&lt;char>, String&lt;char>>*</name>
            <content>
                <baseType ref="type.1582373"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582846" specialization="true">
            <name>BinaryPred&lt;System.Unicode.AgeId, System.Unicode.AgeId></name>
            <content>
                <primaryType ref="1580677"/>
                <argumentType ref="1580107"/>
                <argumentType ref="1580107"/>
            </content>
        </type>
        <type derived="true" id="type.1584571">
            <name>BinaryPred&lt;System.Unicode.AgeId, System.Unicode.AgeId>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582846"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582849">
            <name>BinaryPred&lt;System.Unicode.AgeId, System.Unicode.AgeId>*</name>
            <content>
                <baseType ref="type.1582846"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583742" specialization="true">
            <name>BinaryPred&lt;System.Unicode.AliasTypeId, System.Unicode.AliasTypeId></name>
            <content>
                <primaryType ref="1580677"/>
                <argumentType ref="1580156"/>
                <argumentType ref="1580156"/>
            </content>
        </type>
        <type derived="true" id="type.1584976">
            <name>BinaryPred&lt;System.Unicode.AliasTypeId, System.Unicode.AliasTypeId>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583742"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583745">
            <name>BinaryPred&lt;System.Unicode.AliasTypeId, System.Unicode.AliasTypeId>*</name>
            <content>
                <baseType ref="type.1583742"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583384" specialization="true">
            <name>BinaryPred&lt;System.Unicode.BidiClassId, System.Unicode.BidiClassId></name>
            <content>
                <primaryType ref="1580677"/>
                <argumentType ref="1580138"/>
                <argumentType ref="1580138"/>
            </content>
        </type>
        <type derived="true" id="type.1584814">
            <name>BinaryPred&lt;System.Unicode.BidiClassId, System.Unicode.BidiClassId>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583384"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583387">
            <name>BinaryPred&lt;System.Unicode.BidiClassId, System.Unicode.BidiClassId>*</name>
            <content>
                <baseType ref="type.1583384"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583563" specialization="true">
            <name>BinaryPred&lt;System.Unicode.BidiPairedBracketTypeId, System.Unicode.BidiPairedBracketTypeId></name>
            <content>
                <primaryType ref="1580677"/>
                <argumentType ref="1580147"/>
                <argumentType ref="1580147"/>
            </content>
        </type>
        <type derived="true" id="type.1584895">
            <name>BinaryPred&lt;System.Unicode.BidiPairedBracketTypeId, System.Unicode.BidiPairedBracketTypeId>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583563"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583566">
            <name>BinaryPred&lt;System.Unicode.BidiPairedBracketTypeId, System.Unicode.BidiPairedBracketTypeId>*</name>
            <content>
                <baseType ref="type.1583563"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582292" specialization="true">
            <name>BinaryPred&lt;System.Unicode.BinaryPropertyId, System.Unicode.BinaryPropertyId></name>
            <content>
                <primaryType ref="1580677"/>
                <argumentType ref="1580086"/>
                <argumentType ref="1580086"/>
            </content>
        </type>
        <type derived="true" id="type.1584306">
            <name>BinaryPred&lt;System.Unicode.BinaryPropertyId, System.Unicode.BinaryPropertyId>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582292"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582295">
            <name>BinaryPred&lt;System.Unicode.BinaryPropertyId, System.Unicode.BinaryPropertyId>*</name>
            <content>
                <baseType ref="type.1582292"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582486" specialization="true">
            <name>BinaryPred&lt;System.Unicode.BlockId, System.Unicode.BlockId></name>
            <content>
                <primaryType ref="1580677"/>
                <argumentType ref="1580093"/>
                <argumentType ref="1580093"/>
            </content>
        </type>
        <type derived="true" id="type.1584409">
            <name>BinaryPred&lt;System.Unicode.BlockId, System.Unicode.BlockId>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582486"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582489">
            <name>BinaryPred&lt;System.Unicode.BlockId, System.Unicode.BlockId>*</name>
            <content>
                <baseType ref="type.1582486"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582667" specialization="true">
            <name>BinaryPred&lt;System.Unicode.GeneralCategoryId, System.Unicode.GeneralCategoryId></name>
            <content>
                <primaryType ref="1580677"/>
                <argumentType ref="1580100"/>
                <argumentType ref="1580100"/>
            </content>
        </type>
        <type derived="true" id="type.1584490">
            <name>BinaryPred&lt;System.Unicode.GeneralCategoryId, System.Unicode.GeneralCategoryId>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582667"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582670">
            <name>BinaryPred&lt;System.Unicode.GeneralCategoryId, System.Unicode.GeneralCategoryId>*</name>
            <content>
                <baseType ref="type.1582667"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583205" specialization="true">
            <name>BinaryPred&lt;System.Unicode.NumericTypeId, System.Unicode.NumericTypeId></name>
            <content>
                <primaryType ref="1580677"/>
                <argumentType ref="1580129"/>
                <argumentType ref="1580129"/>
            </content>
        </type>
        <type derived="true" id="type.1584733">
            <name>BinaryPred&lt;System.Unicode.NumericTypeId, System.Unicode.NumericTypeId>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583205"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583208">
            <name>BinaryPred&lt;System.Unicode.NumericTypeId, System.Unicode.NumericTypeId>*</name>
            <content>
                <baseType ref="type.1583205"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583025" specialization="true">
            <name>BinaryPred&lt;System.Unicode.ScriptId, System.Unicode.ScriptId></name>
            <content>
                <primaryType ref="1580677"/>
                <argumentType ref="1580116"/>
                <argumentType ref="1580116"/>
            </content>
        </type>
        <type derived="true" id="type.1584652">
            <name>BinaryPred&lt;System.Unicode.ScriptId, System.Unicode.ScriptId>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583025"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583028">
            <name>BinaryPred&lt;System.Unicode.ScriptId, System.Unicode.ScriptId>*</name>
            <content>
                <baseType ref="type.1583025"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.249" specialization="true">
            <name>BinaryPred&lt;T, T></name>
            <content>
                <primaryType ref="1580677"/>
                <argumentType ref="1579895"/>
                <argumentType ref="1579895"/>
            </content>
        </type>
        <type id="type.164" specialization="true">
            <name>BinaryPred&lt;T, T></name>
            <content>
                <primaryType ref="1580677"/>
                <argumentType ref="1579870"/>
                <argumentType ref="1579870"/>
            </content>
        </type>
        <type id="type.198" specialization="true">
            <name>BinaryPred&lt;T, T></name>
            <content>
                <primaryType ref="1580677"/>
                <argumentType ref="1579880"/>
                <argumentType ref="1579880"/>
            </content>
        </type>
        <type id="type.215" specialization="true">
            <name>BinaryPred&lt;T, T></name>
            <content>
                <primaryType ref="1580677"/>
                <argumentType ref="1579885"/>
                <argumentType ref="1579885"/>
            </content>
        </type>
        <type id="type.232" specialization="true">
            <name>BinaryPred&lt;T, T></name>
            <content>
                <primaryType ref="1580677"/>
                <argumentType ref="1579890"/>
                <argumentType ref="1579890"/>
            </content>
        </type>
        <type id="type.181" specialization="true">
            <name>BinaryPred&lt;T, T></name>
            <content>
                <primaryType ref="1580677"/>
                <argumentType ref="1579875"/>
                <argumentType ref="1579875"/>
            </content>
        </type>
        <type derived="true" id="type.167">
            <name>BinaryPred&lt;T, T>*</name>
            <content>
                <baseType ref="type.164"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.184">
            <name>BinaryPred&lt;T, T>*</name>
            <content>
                <baseType ref="type.181"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.218">
            <name>BinaryPred&lt;T, T>*</name>
            <content>
                <baseType ref="type.215"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.201">
            <name>BinaryPred&lt;T, T>*</name>
            <content>
                <baseType ref="type.198"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.252">
            <name>BinaryPred&lt;T, T>*</name>
            <content>
                <baseType ref="type.249"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.235">
            <name>BinaryPred&lt;T, T>*</name>
            <content>
                <baseType ref="type.232"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.257" specialization="true">
            <name>BinaryPred&lt;T, U></name>
            <content>
                <primaryType ref="1580677"/>
                <argumentType ref="1579897"/>
                <argumentType ref="1579898"/>
            </content>
        </type>
        <type id="type.223" specialization="true">
            <name>BinaryPred&lt;T, U></name>
            <content>
                <primaryType ref="1580677"/>
                <argumentType ref="1579887"/>
                <argumentType ref="1579888"/>
            </content>
        </type>
        <type id="type.206" specialization="true">
            <name>BinaryPred&lt;T, U></name>
            <content>
                <primaryType ref="1580677"/>
                <argumentType ref="1579882"/>
                <argumentType ref="1579883"/>
            </content>
        </type>
        <type id="type.189" specialization="true">
            <name>BinaryPred&lt;T, U></name>
            <content>
                <primaryType ref="1580677"/>
                <argumentType ref="1579877"/>
                <argumentType ref="1579878"/>
            </content>
        </type>
        <type id="type.172" specialization="true">
            <name>BinaryPred&lt;T, U></name>
            <content>
                <primaryType ref="1580677"/>
                <argumentType ref="1579872"/>
                <argumentType ref="1579873"/>
            </content>
        </type>
        <type id="type.240" specialization="true">
            <name>BinaryPred&lt;T, U></name>
            <content>
                <primaryType ref="1580677"/>
                <argumentType ref="1579892"/>
                <argumentType ref="1579893"/>
            </content>
        </type>
        <type derived="true" id="type.226">
            <name>BinaryPred&lt;T, U>*</name>
            <content>
                <baseType ref="type.223"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.175">
            <name>BinaryPred&lt;T, U>*</name>
            <content>
                <baseType ref="type.172"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.192">
            <name>BinaryPred&lt;T, U>*</name>
            <content>
                <baseType ref="type.189"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.260">
            <name>BinaryPred&lt;T, U>*</name>
            <content>
                <baseType ref="type.257"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.209">
            <name>BinaryPred&lt;T, U>*</name>
            <content>
                <baseType ref="type.206"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.243">
            <name>BinaryPred&lt;T, U>*</name>
            <content>
                <baseType ref="type.240"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.265" specialization="true">
            <name>BinaryPred&lt;bool, bool></name>
            <content>
                <primaryType ref="1580677"/>
                <argumentType ref="type.1579450"/>
                <argumentType ref="type.1579450"/>
            </content>
        </type>
        <type derived="true" id="type.268">
            <name>BinaryPred&lt;bool, bool>*</name>
            <content>
                <baseType ref="type.265"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1580087">
            <name>BinaryProperty</name>
        </type>
        <type derived="true" id="type.1580088">
            <name>BinaryProperty*</name>
            <content>
                <baseType ref="1580087"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582364">
            <name>BinaryProperty*&amp;</name>
            <content>
                <baseType ref="1580087"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582305">
            <name>BinaryProperty*&amp;&amp;</name>
            <content>
                <baseType ref="1580087"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582455">
            <name>BinaryProperty**</name>
            <content>
                <baseType ref="1580087"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584364">
            <name>BinaryProperty**&amp;&amp;</name>
            <content>
                <baseType ref="1580087"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="1580086">
            <name>BinaryPropertyId</name>
        </type>
        <type derived="true" id="type.1584287">
            <name>BinaryPropertyId&amp;</name>
            <content>
                <baseType ref="1580086"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582280">
            <name>BinaryPropertyId&amp;&amp;</name>
            <content>
                <baseType ref="1580086"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582279">
            <name>BinaryPropertyId*</name>
            <content>
                <baseType ref="1580086"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1580089">
            <name>BinaryPropertyTable</name>
        </type>
        <type derived="true" id="type.1582281">
            <name>BinaryPropertyTable&amp;</name>
            <content>
                <baseType ref="1580089"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580092">
            <name>BinaryPropertyTable*</name>
            <content>
                <baseType ref="1580089"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1579649">
            <name>BinaryReader</name>
        </type>
        <type derived="true" id="type.1583192">
            <name>BinaryReader&amp;</name>
            <content>
                <baseType ref="1579649"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580317">
            <name>BinaryReader&amp;&amp;</name>
            <content>
                <baseType ref="1579649"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1579650">
            <name>BinaryReader*</name>
            <content>
                <baseType ref="1579649"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1579651">
            <name>BinaryWriter</name>
        </type>
        <type derived="true" id="type.1580408">
            <name>BinaryWriter&amp;&amp;</name>
            <content>
                <baseType ref="1579651"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1579652">
            <name>BinaryWriter*</name>
            <content>
                <baseType ref="1579651"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1580840" specialization="true">
            <name>BitAnd&lt;T></name>
            <content>
                <primaryType ref="1580840"/>
                <argumentType ref="1579906"/>
            </content>
        </type>
        <type id="1579905">
            <name>BitAnd&lt;T></name>
        </type>
        <type id="type.1580861" specialization="true">
            <name>BitNot&lt;T></name>
            <content>
                <primaryType ref="1580861"/>
                <argumentType ref="1579912"/>
            </content>
        </type>
        <type id="1579911">
            <name>BitNot&lt;T></name>
        </type>
        <type id="type.1580861" specialization="true">
            <name>BitNot&lt;T></name>
            <content>
                <primaryType ref="1580861"/>
                <argumentType ref="1579912"/>
            </content>
        </type>
        <type id="1579907">
            <name>BitOr&lt;T></name>
        </type>
        <type id="type.1580847" specialization="true">
            <name>BitOr&lt;T></name>
            <content>
                <primaryType ref="1580847"/>
                <argumentType ref="1579908"/>
            </content>
        </type>
        <type id="type.1580854" specialization="true">
            <name>BitXor&lt;T></name>
            <content>
                <primaryType ref="1580854"/>
                <argumentType ref="1579910"/>
            </content>
        </type>
        <type id="1579909">
            <name>BitXor&lt;T></name>
        </type>
        <type id="1579653">
            <name>Bitset</name>
        </type>
        <type derived="true" id="type.1580410">
            <name>Bitset&amp;&amp;</name>
            <content>
                <baseType ref="1579653"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1579654">
            <name>Bitset*</name>
            <content>
                <baseType ref="1579653"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1580094">
            <name>Block</name>
        </type>
        <type derived="true" id="type.1580095">
            <name>Block*</name>
            <content>
                <baseType ref="1580094"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582558">
            <name>Block*&amp;</name>
            <content>
                <baseType ref="1580094"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582499">
            <name>Block*&amp;&amp;</name>
            <content>
                <baseType ref="1580094"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582643">
            <name>Block**</name>
            <content>
                <baseType ref="1580094"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584446">
            <name>Block**&amp;&amp;</name>
            <content>
                <baseType ref="1580094"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="1580093">
            <name>BlockId</name>
        </type>
        <type derived="true" id="type.1584390">
            <name>BlockId&amp;</name>
            <content>
                <baseType ref="1580093"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582474">
            <name>BlockId&amp;&amp;</name>
            <content>
                <baseType ref="1580093"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582473">
            <name>BlockId*</name>
            <content>
                <baseType ref="1580093"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1580096">
            <name>BlockTable</name>
        </type>
        <type derived="true" id="type.1582475">
            <name>BlockTable&amp;</name>
            <content>
                <baseType ref="1580096"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580099">
            <name>BlockTable*</name>
            <content>
                <baseType ref="1580096"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.332" specialization="true">
            <name>Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <primaryType ref="1581176"/>
                <argumentType ref="type.310"/>
            </content>
        </type>
        <type id="type.1580978" specialization="true">
            <name>Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <primaryType ref="1581176"/>
                <argumentType ref="type.1580956"/>
            </content>
        </type>
        <type derived="true" id="type.1580979">
            <name>Bucket&lt;Pair&lt;K, T>>*</name>
            <content>
                <baseType ref="type.1580978"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.333">
            <name>Bucket&lt;Pair&lt;K, T>>*</name>
            <content>
                <baseType ref="type.332"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580979">
            <name>Bucket&lt;Pair&lt;K, T>>*</name>
            <content>
                <baseType ref="type.1580978"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581008">
            <name>Bucket&lt;Pair&lt;K, T>>*&amp;</name>
            <content>
                <baseType ref="type.1580978"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.362">
            <name>Bucket&lt;Pair&lt;K, T>>*&amp;</name>
            <content>
                <baseType ref="type.332"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581019">
            <name>Bucket&lt;Pair&lt;K, T>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.1580978"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.373">
            <name>Bucket&lt;Pair&lt;K, T>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.332"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581009">
            <name>Bucket&lt;Pair&lt;K, T>>**</name>
            <content>
                <baseType ref="type.1580978"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.363">
            <name>Bucket&lt;Pair&lt;K, T>>**</name>
            <content>
                <baseType ref="type.332"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582941" specialization="true">
            <name>Bucket&lt;Pair&lt;String&lt;char>, Age*>></name>
            <content>
                <primaryType ref="1581176"/>
                <argumentType ref="type.1582923"/>
            </content>
        </type>
        <type derived="true" id="type.1582942">
            <name>Bucket&lt;Pair&lt;String&lt;char>, Age*>>*</name>
            <content>
                <baseType ref="type.1582941"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582971">
            <name>Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;</name>
            <content>
                <baseType ref="type.1582941"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582982">
            <name>Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.1582941"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582972">
            <name>Bucket&lt;Pair&lt;String&lt;char>, Age*>>**</name>
            <content>
                <baseType ref="type.1582941"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584598">
            <name>Bucket&lt;Pair&lt;String&lt;char>, Age*>>**&amp;</name>
            <content>
                <baseType ref="type.1582941"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584597">
            <name>Bucket&lt;Pair&lt;String&lt;char>, Age*>>**&amp;&amp;</name>
            <content>
                <baseType ref="type.1582941"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1583837" specialization="true">
            <name>Bucket&lt;Pair&lt;String&lt;char>, AliasType*>></name>
            <content>
                <primaryType ref="1581176"/>
                <argumentType ref="type.1583819"/>
            </content>
        </type>
        <type derived="true" id="type.1583838">
            <name>Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*</name>
            <content>
                <baseType ref="type.1583837"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583867">
            <name>Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;</name>
            <content>
                <baseType ref="type.1583837"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583878">
            <name>Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.1583837"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583868">
            <name>Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**</name>
            <content>
                <baseType ref="type.1583837"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1585003">
            <name>Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**&amp;</name>
            <content>
                <baseType ref="type.1583837"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1585002">
            <name>Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**&amp;&amp;</name>
            <content>
                <baseType ref="type.1583837"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1583479" specialization="true">
            <name>Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>></name>
            <content>
                <primaryType ref="1581176"/>
                <argumentType ref="type.1583461"/>
            </content>
        </type>
        <type derived="true" id="type.1583480">
            <name>Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*</name>
            <content>
                <baseType ref="type.1583479"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583509">
            <name>Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;</name>
            <content>
                <baseType ref="type.1583479"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583520">
            <name>Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.1583479"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583510">
            <name>Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**</name>
            <content>
                <baseType ref="type.1583479"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584841">
            <name>Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**&amp;</name>
            <content>
                <baseType ref="type.1583479"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584840">
            <name>Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**&amp;&amp;</name>
            <content>
                <baseType ref="type.1583479"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1583658" specialization="true">
            <name>Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>></name>
            <content>
                <primaryType ref="1581176"/>
                <argumentType ref="type.1583640"/>
            </content>
        </type>
        <type derived="true" id="type.1583659">
            <name>Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*</name>
            <content>
                <baseType ref="type.1583658"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583688">
            <name>Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;</name>
            <content>
                <baseType ref="type.1583658"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583699">
            <name>Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.1583658"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583689">
            <name>Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**</name>
            <content>
                <baseType ref="type.1583658"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584922">
            <name>Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**&amp;</name>
            <content>
                <baseType ref="type.1583658"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584921">
            <name>Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**&amp;&amp;</name>
            <content>
                <baseType ref="type.1583658"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1582401" specialization="true">
            <name>Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>></name>
            <content>
                <primaryType ref="1581176"/>
                <argumentType ref="type.1582383"/>
            </content>
        </type>
        <type derived="true" id="type.1582402">
            <name>Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*</name>
            <content>
                <baseType ref="type.1582401"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582431">
            <name>Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;</name>
            <content>
                <baseType ref="type.1582401"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582442">
            <name>Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.1582401"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582432">
            <name>Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**</name>
            <content>
                <baseType ref="type.1582401"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584350">
            <name>Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**&amp;</name>
            <content>
                <baseType ref="type.1582401"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584349">
            <name>Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**&amp;&amp;</name>
            <content>
                <baseType ref="type.1582401"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1582581" specialization="true">
            <name>Bucket&lt;Pair&lt;String&lt;char>, Block*>></name>
            <content>
                <primaryType ref="1581176"/>
                <argumentType ref="type.1582563"/>
            </content>
        </type>
        <type derived="true" id="type.1582582">
            <name>Bucket&lt;Pair&lt;String&lt;char>, Block*>>*</name>
            <content>
                <baseType ref="type.1582581"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582611">
            <name>Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;</name>
            <content>
                <baseType ref="type.1582581"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582622">
            <name>Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.1582581"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582612">
            <name>Bucket&lt;Pair&lt;String&lt;char>, Block*>>**</name>
            <content>
                <baseType ref="type.1582581"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584436">
            <name>Bucket&lt;Pair&lt;String&lt;char>, Block*>>**&amp;</name>
            <content>
                <baseType ref="type.1582581"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584435">
            <name>Bucket&lt;Pair&lt;String&lt;char>, Block*>>**&amp;&amp;</name>
            <content>
                <baseType ref="type.1582581"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1582762" specialization="true">
            <name>Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>></name>
            <content>
                <primaryType ref="1581176"/>
                <argumentType ref="type.1582744"/>
            </content>
        </type>
        <type derived="true" id="type.1582763">
            <name>Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*</name>
            <content>
                <baseType ref="type.1582762"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582792">
            <name>Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;</name>
            <content>
                <baseType ref="type.1582762"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582803">
            <name>Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.1582762"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582793">
            <name>Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**</name>
            <content>
                <baseType ref="type.1582762"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584517">
            <name>Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**&amp;</name>
            <content>
                <baseType ref="type.1582762"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584516">
            <name>Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**&amp;&amp;</name>
            <content>
                <baseType ref="type.1582762"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1583300" specialization="true">
            <name>Bucket&lt;Pair&lt;String&lt;char>, NumericType*>></name>
            <content>
                <primaryType ref="1581176"/>
                <argumentType ref="type.1583282"/>
            </content>
        </type>
        <type derived="true" id="type.1583301">
            <name>Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*</name>
            <content>
                <baseType ref="type.1583300"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583330">
            <name>Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;</name>
            <content>
                <baseType ref="type.1583300"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583341">
            <name>Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.1583300"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583331">
            <name>Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**</name>
            <content>
                <baseType ref="type.1583300"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584760">
            <name>Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**&amp;</name>
            <content>
                <baseType ref="type.1583300"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584759">
            <name>Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**&amp;&amp;</name>
            <content>
                <baseType ref="type.1583300"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1583120" specialization="true">
            <name>Bucket&lt;Pair&lt;String&lt;char>, Script*>></name>
            <content>
                <primaryType ref="1581176"/>
                <argumentType ref="type.1583102"/>
            </content>
        </type>
        <type derived="true" id="type.1583121">
            <name>Bucket&lt;Pair&lt;String&lt;char>, Script*>>*</name>
            <content>
                <baseType ref="type.1583120"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583150">
            <name>Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;</name>
            <content>
                <baseType ref="type.1583120"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583161">
            <name>Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.1583120"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583151">
            <name>Bucket&lt;Pair&lt;String&lt;char>, Script*>>**</name>
            <content>
                <baseType ref="type.1583120"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584679">
            <name>Bucket&lt;Pair&lt;String&lt;char>, Script*>>**&amp;</name>
            <content>
                <baseType ref="type.1583120"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584678">
            <name>Bucket&lt;Pair&lt;String&lt;char>, Script*>>**&amp;&amp;</name>
            <content>
                <baseType ref="type.1583120"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1582876" specialization="true">
            <name>Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>></name>
            <content>
                <primaryType ref="1581176"/>
                <argumentType ref="type.1582856"/>
            </content>
        </type>
        <type derived="true" id="type.1582877">
            <name>Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*</name>
            <content>
                <baseType ref="type.1582876"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582906">
            <name>Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;</name>
            <content>
                <baseType ref="type.1582876"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582917">
            <name>Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.1582876"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582907">
            <name>Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**</name>
            <content>
                <baseType ref="type.1582876"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584579">
            <name>Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**&amp;</name>
            <content>
                <baseType ref="type.1582876"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584578">
            <name>Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**&amp;&amp;</name>
            <content>
                <baseType ref="type.1582876"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1583772" specialization="true">
            <name>Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>></name>
            <content>
                <primaryType ref="1581176"/>
                <argumentType ref="type.1583752"/>
            </content>
        </type>
        <type derived="true" id="type.1583773">
            <name>Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*</name>
            <content>
                <baseType ref="type.1583772"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583802">
            <name>Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;</name>
            <content>
                <baseType ref="type.1583772"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583813">
            <name>Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.1583772"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583803">
            <name>Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**</name>
            <content>
                <baseType ref="type.1583772"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584984">
            <name>Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**&amp;</name>
            <content>
                <baseType ref="type.1583772"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584983">
            <name>Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**&amp;&amp;</name>
            <content>
                <baseType ref="type.1583772"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1583414" specialization="true">
            <name>Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>></name>
            <content>
                <primaryType ref="1581176"/>
                <argumentType ref="type.1583394"/>
            </content>
        </type>
        <type derived="true" id="type.1583415">
            <name>Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*</name>
            <content>
                <baseType ref="type.1583414"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583444">
            <name>Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;</name>
            <content>
                <baseType ref="type.1583414"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583455">
            <name>Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.1583414"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583445">
            <name>Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**</name>
            <content>
                <baseType ref="type.1583414"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584822">
            <name>Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**&amp;</name>
            <content>
                <baseType ref="type.1583414"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584821">
            <name>Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**&amp;&amp;</name>
            <content>
                <baseType ref="type.1583414"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1583593" specialization="true">
            <name>Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>></name>
            <content>
                <primaryType ref="1581176"/>
                <argumentType ref="type.1583573"/>
            </content>
        </type>
        <type derived="true" id="type.1583594">
            <name>Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*</name>
            <content>
                <baseType ref="type.1583593"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583623">
            <name>Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;</name>
            <content>
                <baseType ref="type.1583593"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583634">
            <name>Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.1583593"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583624">
            <name>Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**</name>
            <content>
                <baseType ref="type.1583593"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584903">
            <name>Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**&amp;</name>
            <content>
                <baseType ref="type.1583593"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584902">
            <name>Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**&amp;&amp;</name>
            <content>
                <baseType ref="type.1583593"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1582322" specialization="true">
            <name>Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>></name>
            <content>
                <primaryType ref="1581176"/>
                <argumentType ref="type.1582302"/>
            </content>
        </type>
        <type derived="true" id="type.1582323">
            <name>Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*</name>
            <content>
                <baseType ref="type.1582322"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582352">
            <name>Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;</name>
            <content>
                <baseType ref="type.1582322"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582363">
            <name>Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.1582322"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582353">
            <name>Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**</name>
            <content>
                <baseType ref="type.1582322"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584314">
            <name>Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**&amp;</name>
            <content>
                <baseType ref="type.1582322"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584313">
            <name>Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**&amp;&amp;</name>
            <content>
                <baseType ref="type.1582322"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1582516" specialization="true">
            <name>Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>></name>
            <content>
                <primaryType ref="1581176"/>
                <argumentType ref="type.1582496"/>
            </content>
        </type>
        <type derived="true" id="type.1582517">
            <name>Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*</name>
            <content>
                <baseType ref="type.1582516"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582546">
            <name>Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;</name>
            <content>
                <baseType ref="type.1582516"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582557">
            <name>Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.1582516"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582547">
            <name>Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**</name>
            <content>
                <baseType ref="type.1582516"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584417">
            <name>Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**&amp;</name>
            <content>
                <baseType ref="type.1582516"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584416">
            <name>Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**&amp;&amp;</name>
            <content>
                <baseType ref="type.1582516"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1582697" specialization="true">
            <name>Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>></name>
            <content>
                <primaryType ref="1581176"/>
                <argumentType ref="type.1582677"/>
            </content>
        </type>
        <type derived="true" id="type.1582698">
            <name>Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*</name>
            <content>
                <baseType ref="type.1582697"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582727">
            <name>Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;</name>
            <content>
                <baseType ref="type.1582697"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582738">
            <name>Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.1582697"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582728">
            <name>Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**</name>
            <content>
                <baseType ref="type.1582697"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584498">
            <name>Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**&amp;</name>
            <content>
                <baseType ref="type.1582697"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584497">
            <name>Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**&amp;&amp;</name>
            <content>
                <baseType ref="type.1582697"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1583235" specialization="true">
            <name>Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>></name>
            <content>
                <primaryType ref="1581176"/>
                <argumentType ref="type.1583215"/>
            </content>
        </type>
        <type derived="true" id="type.1583236">
            <name>Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*</name>
            <content>
                <baseType ref="type.1583235"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583265">
            <name>Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;</name>
            <content>
                <baseType ref="type.1583235"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583276">
            <name>Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.1583235"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583266">
            <name>Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**</name>
            <content>
                <baseType ref="type.1583235"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584741">
            <name>Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**&amp;</name>
            <content>
                <baseType ref="type.1583235"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584740">
            <name>Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**&amp;&amp;</name>
            <content>
                <baseType ref="type.1583235"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1583055" specialization="true">
            <name>Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>></name>
            <content>
                <primaryType ref="1581176"/>
                <argumentType ref="type.1583035"/>
            </content>
        </type>
        <type derived="true" id="type.1583056">
            <name>Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*</name>
            <content>
                <baseType ref="type.1583055"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583085">
            <name>Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;</name>
            <content>
                <baseType ref="type.1583055"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583096">
            <name>Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.1583055"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583086">
            <name>Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**</name>
            <content>
                <baseType ref="type.1583055"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584660">
            <name>Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**&amp;</name>
            <content>
                <baseType ref="type.1583055"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584659">
            <name>Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**&amp;&amp;</name>
            <content>
                <baseType ref="type.1583055"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1581199" specialization="true">
            <name>Bucket&lt;T></name>
            <content>
                <primaryType ref="1581176"/>
                <argumentType ref="1579943"/>
            </content>
        </type>
        <type id="type.1581176" specialization="true">
            <name>Bucket&lt;T></name>
            <content>
                <primaryType ref="1581176"/>
                <argumentType ref="1579937"/>
            </content>
        </type>
        <type id="1579936">
            <name>Bucket&lt;T></name>
        </type>
        <type id="type.1581106" specialization="true">
            <name>Bucket&lt;T></name>
            <content>
                <primaryType ref="1581176"/>
                <argumentType ref="1579930"/>
            </content>
        </type>
        <type id="type.408" specialization="true">
            <name>Bucket&lt;T></name>
            <content>
                <primaryType ref="1581176"/>
                <argumentType ref="1579927"/>
            </content>
        </type>
        <type id="type.1581176" specialization="true">
            <name>Bucket&lt;T></name>
            <content>
                <primaryType ref="1581176"/>
                <argumentType ref="1579937"/>
            </content>
        </type>
        <type id="type.479" specialization="true">
            <name>Bucket&lt;T></name>
            <content>
                <primaryType ref="1581176"/>
                <argumentType ref="1579939"/>
            </content>
        </type>
        <type derived="true" id="type.470">
            <name>Bucket&lt;T>*</name>
            <content>
                <baseType ref="type.1581176"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581200">
            <name>Bucket&lt;T>*</name>
            <content>
                <baseType ref="type.1581199"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581107">
            <name>Bucket&lt;T>*</name>
            <content>
                <baseType ref="type.1581106"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.480">
            <name>Bucket&lt;T>*</name>
            <content>
                <baseType ref="type.479"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.409">
            <name>Bucket&lt;T>*</name>
            <content>
                <baseType ref="type.408"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581136">
            <name>Bucket&lt;T>*&amp;</name>
            <content>
                <baseType ref="type.1581106"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.438">
            <name>Bucket&lt;T>*&amp;</name>
            <content>
                <baseType ref="type.408"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581147">
            <name>Bucket&lt;T>*&amp;&amp;</name>
            <content>
                <baseType ref="type.1581106"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.449">
            <name>Bucket&lt;T>*&amp;&amp;</name>
            <content>
                <baseType ref="type.408"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581137">
            <name>Bucket&lt;T>**</name>
            <content>
                <baseType ref="type.1581106"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.439">
            <name>Bucket&lt;T>**</name>
            <content>
                <baseType ref="type.408"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.497" specialization="true">
            <name>Bucket&lt;ValueType></name>
            <content>
                <primaryType ref="1581176"/>
                <argumentType ref="1579949"/>
            </content>
        </type>
        <type derived="true" id="type.498">
            <name>Bucket&lt;ValueType>*</name>
            <content>
                <baseType ref="type.497"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.529">
            <name>Bucket&lt;ValueType>*&amp;</name>
            <content>
                <baseType ref="type.497"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.540">
            <name>Bucket&lt;ValueType>*&amp;&amp;</name>
            <content>
                <baseType ref="type.497"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.530">
            <name>Bucket&lt;ValueType>**</name>
            <content>
                <baseType ref="type.497"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1579657">
            <name>BufferedByteStream</name>
        </type>
        <type derived="true" id="type.1580439">
            <name>BufferedByteStream&amp;&amp;</name>
            <content>
                <baseType ref="1579657"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1579658">
            <name>BufferedByteStream*</name>
            <content>
                <baseType ref="1579657"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1579660">
            <name>ByteStream</name>
        </type>
        <type derived="true" id="type.1580312">
            <name>ByteStream&amp;</name>
            <content>
                <baseType ref="1579660"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580436">
            <name>ByteStream&amp;&amp;</name>
            <content>
                <baseType ref="1579660"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1579661">
            <name>ByteStream*</name>
            <content>
                <baseType ref="1579660"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584161">
            <name>ByteStream*&amp;</name>
            <content>
                <baseType ref="1579660"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584144">
            <name>ByteStream*&amp;&amp;</name>
            <content>
                <baseType ref="1579660"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="1580051">
            <name>C</name>
        </type>
        <type derived="true" id="type.1580233">
            <name>C&amp;</name>
            <content>
                <baseType ref="1579620"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580231">
            <name>C&amp;</name>
            <content>
                <baseType ref="1579618"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580233">
            <name>C&amp;</name>
            <content>
                <baseType ref="1579620"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580230">
            <name>C&amp;</name>
            <content>
                <baseType ref="1579616"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580232">
            <name>C&amp;</name>
            <content>
                <baseType ref="1579619"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type id="1579647">
            <name>CharClass</name>
        </type>
        <type derived="true" id="type.1580295">
            <name>CharClass&amp;</name>
            <content>
                <baseType ref="1579647"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580236">
            <name>CharClass&amp;&amp;</name>
            <content>
                <baseType ref="1579647"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580235">
            <name>CharClass*</name>
            <content>
                <baseType ref="1579647"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1579648">
            <name>CharClassTable</name>
        </type>
        <type id="1580074">
            <name>CharT</name>
        </type>
        <type derived="true" id="type.1582240">
            <name>CharT&amp;</name>
            <content>
                <baseType ref="1580075"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582060">
            <name>CharT&amp;</name>
            <content>
                <baseType ref="1580071"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582195">
            <name>CharT&amp;</name>
            <content>
                <baseType ref="1580074"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582105">
            <name>CharT&amp;</name>
            <content>
                <baseType ref="1580072"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.946">
            <name>CharT&amp;</name>
            <content>
                <baseType ref="1580069"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582015">
            <name>CharT&amp;</name>
            <content>
                <baseType ref="1580070"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582150">
            <name>CharT&amp;</name>
            <content>
                <baseType ref="1580073"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582016">
            <name>CharT*</name>
            <content>
                <baseType ref="1580070"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582241">
            <name>CharT*</name>
            <content>
                <baseType ref="1580075"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582151">
            <name>CharT*</name>
            <content>
                <baseType ref="1580073"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582061">
            <name>CharT*</name>
            <content>
                <baseType ref="1580071"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582106">
            <name>CharT*</name>
            <content>
                <baseType ref="1580072"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582061">
            <name>CharT*</name>
            <content>
                <baseType ref="1580071"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.947">
            <name>CharT*</name>
            <content>
                <baseType ref="1580069"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582196">
            <name>CharT*</name>
            <content>
                <baseType ref="1580074"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1580125">
            <name>CharacterInfo</name>
        </type>
        <type derived="true" id="type.1583939">
            <name>CharacterInfo&amp;</name>
            <content>
                <baseType ref="1580125"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580126">
            <name>CharacterInfo*</name>
            <content>
                <baseType ref="1580125"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1585038">
            <name>CharacterInfo*&amp;</name>
            <content>
                <baseType ref="1580125"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1585040">
            <name>CharacterInfo*&amp;&amp;</name>
            <content>
                <baseType ref="1580125"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="1580173">
            <name>CharacterInfoPage</name>
        </type>
        <type derived="true" id="type.1584028">
            <name>CharacterInfoPage&amp;</name>
            <content>
                <baseType ref="1580173"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580174">
            <name>CharacterInfoPage*</name>
            <content>
                <baseType ref="1580173"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1585053">
            <name>CharacterInfoPage*&amp;</name>
            <content>
                <baseType ref="1580173"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1585055">
            <name>CharacterInfoPage*&amp;&amp;</name>
            <content>
                <baseType ref="1580173"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="1580185">
            <name>CharacterTable</name>
        </type>
        <type derived="true" id="type.1584012">
            <name>CharacterTable&amp;</name>
            <content>
                <baseType ref="1580185"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580186">
            <name>CharacterTable*</name>
            <content>
                <baseType ref="1580185"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1579662">
            <name>CodeFormatter</name>
        </type>
        <type derived="true" id="type.1450">
            <name>CodeFormatter&amp;&amp;</name>
            <content>
                <baseType ref="1579662"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1579663">
            <name>CodeFormatter*</name>
            <content>
                <baseType ref="1579662"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1580028">
            <name>Color</name>
        </type>
        <type derived="true" id="type.1581507">
            <name>Color&amp;&amp;</name>
            <content>
                <baseType ref="1580028"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581506">
            <name>Color*</name>
            <content>
                <baseType ref="1580028"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1579952">
            <name>Compare</name>
        </type>
        <type id="1579791">
            <name>Console</name>
        </type>
        <type id="1579792">
            <name>ConversionException</name>
        </type>
        <type derived="true" id="type.1580466">
            <name>ConversionException&amp;&amp;</name>
            <content>
                <baseType ref="1579792"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1579793">
            <name>ConversionException*</name>
            <content>
                <baseType ref="1579792"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1580659" specialization="true">
            <name>Divides&lt;T></name>
            <content>
                <primaryType ref="1580659"/>
                <argumentType ref="1579857"/>
            </content>
        </type>
        <type id="1579856">
            <name>Divides&lt;T></name>
        </type>
        <type id="1580062">
            <name>Endl</name>
        </type>
        <type derived="true" id="type.1584281">
            <name>Endl&amp;&amp;</name>
            <content>
                <baseType ref="1580062"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580063">
            <name>Endl*</name>
            <content>
                <baseType ref="1580062"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582369" specialization="true">
            <name>EqualTo&lt;String&lt;char>></name>
            <content>
                <primaryType ref="1580694"/>
                <argumentType ref="type.1580238"/>
            </content>
        </type>
        <type derived="true" id="type.1584337">
            <name>EqualTo&lt;String&lt;char>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582369"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582378">
            <name>EqualTo&lt;String&lt;char>>*</name>
            <content>
                <baseType ref="type.1582369"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582842" specialization="true">
            <name>EqualTo&lt;System.Unicode.AgeId></name>
            <content>
                <primaryType ref="1580694"/>
                <argumentType ref="1580107"/>
            </content>
        </type>
        <type derived="true" id="type.1584566">
            <name>EqualTo&lt;System.Unicode.AgeId>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582842"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582851">
            <name>EqualTo&lt;System.Unicode.AgeId>*</name>
            <content>
                <baseType ref="type.1582842"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583738" specialization="true">
            <name>EqualTo&lt;System.Unicode.AliasTypeId></name>
            <content>
                <primaryType ref="1580694"/>
                <argumentType ref="1580156"/>
            </content>
        </type>
        <type derived="true" id="type.1584971">
            <name>EqualTo&lt;System.Unicode.AliasTypeId>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583738"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583747">
            <name>EqualTo&lt;System.Unicode.AliasTypeId>*</name>
            <content>
                <baseType ref="type.1583738"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583380" specialization="true">
            <name>EqualTo&lt;System.Unicode.BidiClassId></name>
            <content>
                <primaryType ref="1580694"/>
                <argumentType ref="1580138"/>
            </content>
        </type>
        <type derived="true" id="type.1584809">
            <name>EqualTo&lt;System.Unicode.BidiClassId>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583380"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583389">
            <name>EqualTo&lt;System.Unicode.BidiClassId>*</name>
            <content>
                <baseType ref="type.1583380"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583559" specialization="true">
            <name>EqualTo&lt;System.Unicode.BidiPairedBracketTypeId></name>
            <content>
                <primaryType ref="1580694"/>
                <argumentType ref="1580147"/>
            </content>
        </type>
        <type derived="true" id="type.1584890">
            <name>EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583559"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583568">
            <name>EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>*</name>
            <content>
                <baseType ref="type.1583559"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582288" specialization="true">
            <name>EqualTo&lt;System.Unicode.BinaryPropertyId></name>
            <content>
                <primaryType ref="1580694"/>
                <argumentType ref="1580086"/>
            </content>
        </type>
        <type derived="true" id="type.1584301">
            <name>EqualTo&lt;System.Unicode.BinaryPropertyId>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582288"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582297">
            <name>EqualTo&lt;System.Unicode.BinaryPropertyId>*</name>
            <content>
                <baseType ref="type.1582288"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582482" specialization="true">
            <name>EqualTo&lt;System.Unicode.BlockId></name>
            <content>
                <primaryType ref="1580694"/>
                <argumentType ref="1580093"/>
            </content>
        </type>
        <type derived="true" id="type.1584404">
            <name>EqualTo&lt;System.Unicode.BlockId>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582482"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582491">
            <name>EqualTo&lt;System.Unicode.BlockId>*</name>
            <content>
                <baseType ref="type.1582482"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582663" specialization="true">
            <name>EqualTo&lt;System.Unicode.GeneralCategoryId></name>
            <content>
                <primaryType ref="1580694"/>
                <argumentType ref="1580100"/>
            </content>
        </type>
        <type derived="true" id="type.1584485">
            <name>EqualTo&lt;System.Unicode.GeneralCategoryId>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582663"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582672">
            <name>EqualTo&lt;System.Unicode.GeneralCategoryId>*</name>
            <content>
                <baseType ref="type.1582663"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583201" specialization="true">
            <name>EqualTo&lt;System.Unicode.NumericTypeId></name>
            <content>
                <primaryType ref="1580694"/>
                <argumentType ref="1580129"/>
            </content>
        </type>
        <type derived="true" id="type.1584728">
            <name>EqualTo&lt;System.Unicode.NumericTypeId>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583201"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583210">
            <name>EqualTo&lt;System.Unicode.NumericTypeId>*</name>
            <content>
                <baseType ref="type.1583201"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583021" specialization="true">
            <name>EqualTo&lt;System.Unicode.ScriptId></name>
            <content>
                <primaryType ref="1580694"/>
                <argumentType ref="1580116"/>
            </content>
        </type>
        <type derived="true" id="type.1584647">
            <name>EqualTo&lt;System.Unicode.ScriptId>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583021"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583030">
            <name>EqualTo&lt;System.Unicode.ScriptId>*</name>
            <content>
                <baseType ref="type.1583021"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1580705" specialization="true">
            <name>EqualTo&lt;T, U></name>
            <content>
                <primaryType ref="1580705"/>
                <argumentType ref="1579872"/>
                <argumentType ref="1579873"/>
            </content>
        </type>
        <type id="1579871">
            <name>EqualTo&lt;T, U></name>
        </type>
        <type id="type.1580705" specialization="true">
            <name>EqualTo&lt;T, U></name>
            <content>
                <primaryType ref="1580705"/>
                <argumentType ref="1579872"/>
                <argumentType ref="1579873"/>
            </content>
        </type>
        <type id="1579869">
            <name>EqualTo&lt;T></name>
        </type>
        <type id="type.1580694" specialization="true">
            <name>EqualTo&lt;T></name>
            <content>
                <primaryType ref="1580694"/>
                <argumentType ref="1579870"/>
            </content>
        </type>
        <type id="1579802">
            <name>Exception</name>
        </type>
        <type derived="true" id="type.1580281">
            <name>Exception&amp;&amp;</name>
            <content>
                <baseType ref="1579802"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1579803">
            <name>Exception*</name>
            <content>
                <baseType ref="1579802"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1580169">
            <name>ExtendedCharacterInfo</name>
        </type>
        <type derived="true" id="type.1583968">
            <name>ExtendedCharacterInfo&amp;</name>
            <content>
                <baseType ref="1580169"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580170">
            <name>ExtendedCharacterInfo*</name>
            <content>
                <baseType ref="1580169"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1585044">
            <name>ExtendedCharacterInfo*&amp;</name>
            <content>
                <baseType ref="1580169"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1585046">
            <name>ExtendedCharacterInfo*&amp;&amp;</name>
            <content>
                <baseType ref="1580169"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="1580181">
            <name>ExtendedCharacterInfoHeader</name>
        </type>
        <type derived="true" id="type.1584057">
            <name>ExtendedCharacterInfoHeader&amp;</name>
            <content>
                <baseType ref="1580181"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580182">
            <name>ExtendedCharacterInfoHeader*</name>
            <content>
                <baseType ref="1580181"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1580177">
            <name>ExtendedCharacterInfoPage</name>
        </type>
        <type derived="true" id="type.1584066">
            <name>ExtendedCharacterInfoPage&amp;</name>
            <content>
                <baseType ref="1580177"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580178">
            <name>ExtendedCharacterInfoPage*</name>
            <content>
                <baseType ref="1580177"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1585060">
            <name>ExtendedCharacterInfoPage*&amp;</name>
            <content>
                <baseType ref="1580177"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1585062">
            <name>ExtendedCharacterInfoPage*&amp;&amp;</name>
            <content>
                <baseType ref="1580177"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="1579584">
            <name>F</name>
        </type>
        <type id="1579806">
            <name>File</name>
        </type>
        <type id="1579807">
            <name>FileByteStream</name>
        </type>
        <type derived="true" id="type.1580482">
            <name>FileByteStream&amp;&amp;</name>
            <content>
                <baseType ref="1579807"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1579808">
            <name>FileByteStream*</name>
            <content>
                <baseType ref="1579807"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1579812">
            <name>FileSystemException</name>
        </type>
        <type derived="true" id="type.1580487">
            <name>FileSystemException&amp;&amp;</name>
            <content>
                <baseType ref="1579812"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1579813">
            <name>FileSystemException*</name>
            <content>
                <baseType ref="1579812"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1580557" specialization="true">
            <name>ForwardList&lt;T></name>
            <content>
                <primaryType ref="1580529"/>
                <argumentType ref="1579837"/>
            </content>
        </type>
        <type id="type.1580529" specialization="true">
            <name>ForwardList&lt;T></name>
            <content>
                <primaryType ref="1580529"/>
                <argumentType ref="1579836"/>
            </content>
        </type>
        <type id="type.1580585" specialization="true">
            <name>ForwardList&lt;T></name>
            <content>
                <primaryType ref="1580529"/>
                <argumentType ref="1579838"/>
            </content>
        </type>
        <type id="1579835">
            <name>ForwardList&lt;T></name>
        </type>
        <type id="type.1580529" specialization="true">
            <name>ForwardList&lt;T></name>
            <content>
                <primaryType ref="1580529"/>
                <argumentType ref="1579836"/>
            </content>
        </type>
        <type derived="true" id="type.1580612">
            <name>ForwardList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.1580585"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.99">
            <name>ForwardList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.1580529"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580612">
            <name>ForwardList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.1580585"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580584">
            <name>ForwardList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.1580557"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580558">
            <name>ForwardList&lt;T>*</name>
            <content>
                <baseType ref="type.1580557"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.73">
            <name>ForwardList&lt;T>*</name>
            <content>
                <baseType ref="type.1580529"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580558">
            <name>ForwardList&lt;T>*</name>
            <content>
                <baseType ref="type.1580557"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580586">
            <name>ForwardList&lt;T>*</name>
            <content>
                <baseType ref="type.1580585"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.82" specialization="true">
            <name>ForwardListNode&lt;T></name>
            <content>
                <primaryType ref="1580497"/>
                <argumentType ref="1579836"/>
            </content>
        </type>
        <type id="type.61" specialization="true">
            <name>ForwardListNode&lt;T></name>
            <content>
                <primaryType ref="1580497"/>
                <argumentType ref="1579829"/>
            </content>
        </type>
        <type id="type.1580595" specialization="true">
            <name>ForwardListNode&lt;T></name>
            <content>
                <primaryType ref="1580497"/>
                <argumentType ref="1579838"/>
            </content>
        </type>
        <type id="type.1580567" specialization="true">
            <name>ForwardListNode&lt;T></name>
            <content>
                <primaryType ref="1580497"/>
                <argumentType ref="1579837"/>
            </content>
        </type>
        <type id="1579826">
            <name>ForwardListNode&lt;T></name>
        </type>
        <type id="type.1580520" specialization="true">
            <name>ForwardListNode&lt;T></name>
            <content>
                <primaryType ref="1580497"/>
                <argumentType ref="1579832"/>
            </content>
        </type>
        <type id="type.1580595" specialization="true">
            <name>ForwardListNode&lt;T></name>
            <content>
                <primaryType ref="1580497"/>
                <argumentType ref="1579838"/>
            </content>
        </type>
        <type id="type.1580497" specialization="true">
            <name>ForwardListNode&lt;T></name>
            <content>
                <primaryType ref="1580497"/>
                <argumentType ref="1579827"/>
            </content>
        </type>
        <type derived="true" id="type.83">
            <name>ForwardListNode&lt;T>*</name>
            <content>
                <baseType ref="type.82"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580521">
            <name>ForwardListNode&lt;T>*</name>
            <content>
                <baseType ref="type.1580520"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580596">
            <name>ForwardListNode&lt;T>*</name>
            <content>
                <baseType ref="type.1580595"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580568">
            <name>ForwardListNode&lt;T>*</name>
            <content>
                <baseType ref="type.1580567"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580521">
            <name>ForwardListNode&lt;T>*</name>
            <content>
                <baseType ref="type.1580520"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.53">
            <name>ForwardListNode&lt;T>*</name>
            <content>
                <baseType ref="type.1580497"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.62">
            <name>ForwardListNode&lt;T>*</name>
            <content>
                <baseType ref="type.61"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1580503" specialization="true">
            <name>ForwardListNodeIterator&lt;T, R, P></name>
            <content>
                <primaryType ref="1580503"/>
                <argumentType ref="1579829"/>
                <argumentType ref="1579830"/>
                <argumentType ref="1579831"/>
            </content>
        </type>
        <type id="type.1580516" specialization="true">
            <name>ForwardListNodeIterator&lt;T, R, P></name>
            <content>
                <primaryType ref="1580503"/>
                <argumentType ref="1579832"/>
                <argumentType ref="1579833"/>
                <argumentType ref="1579834"/>
            </content>
        </type>
        <type id="1579828">
            <name>ForwardListNodeIterator&lt;T, R, P></name>
        </type>
        <type derived="true" id="type.1580528">
            <name>ForwardListNodeIterator&lt;T, R, P>&amp;</name>
            <content>
                <baseType ref="type.1580516"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.69">
            <name>ForwardListNodeIterator&lt;T, R, P>&amp;</name>
            <content>
                <baseType ref="type.1580503"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.68">
            <name>ForwardListNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.1580503"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.72">
            <name>ForwardListNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.1580516"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.58">
            <name>ForwardListNodeIterator&lt;T, R, P>*</name>
            <content>
                <baseType ref="type.1580503"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580517">
            <name>ForwardListNodeIterator&lt;T, R, P>*</name>
            <content>
                <baseType ref="type.1580516"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1580604" specialization="true">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="1580503"/>
                <argumentType ref="1579838"/>
                <argumentType ref="type.1580599"/>
                <argumentType ref="type.1580603"/>
            </content>
        </type>
        <type id="type.1580576" specialization="true">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="1580503"/>
                <argumentType ref="1579837"/>
                <argumentType ref="type.1580571"/>
                <argumentType ref="type.1580575"/>
            </content>
        </type>
        <type id="type.91" specialization="true">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="1580503"/>
                <argumentType ref="1579836"/>
                <argumentType ref="type.86"/>
                <argumentType ref="type.90"/>
            </content>
        </type>
        <type id="type.1580576" specialization="true">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="1580503"/>
                <argumentType ref="1579837"/>
                <argumentType ref="type.1580571"/>
                <argumentType ref="type.1580575"/>
            </content>
        </type>
        <type derived="true" id="type.1580610">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <baseType ref="type.1580604"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.97">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <baseType ref="type.91"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580582">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <baseType ref="type.1580576"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.115">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1580604"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.107">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1580576"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.96">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.91"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580605">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>*</name>
            <content>
                <baseType ref="type.1580604"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580577">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>*</name>
            <content>
                <baseType ref="type.1580576"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.92">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>*</name>
            <content>
                <baseType ref="type.91"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580577">
            <name>ForwardListNodeIterator&lt;T, T&amp;, T*>*</name>
            <content>
                <baseType ref="type.1580576"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1580563" specialization="true">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="1580503"/>
                <argumentType ref="1579837"/>
                <argumentType ref="type.1580561"/>
                <argumentType ref="type.1580562"/>
            </content>
        </type>
        <type id="type.1580591" specialization="true">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="1580503"/>
                <argumentType ref="1579838"/>
                <argumentType ref="type.1580589"/>
                <argumentType ref="type.1580590"/>
            </content>
        </type>
        <type id="type.78" specialization="true">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="1580503"/>
                <argumentType ref="1579836"/>
                <argumentType ref="type.76"/>
                <argumentType ref="type.77"/>
            </content>
        </type>
        <type id="type.1580591" specialization="true">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="1580503"/>
                <argumentType ref="1579838"/>
                <argumentType ref="type.1580589"/>
                <argumentType ref="type.1580590"/>
            </content>
        </type>
        <type derived="true" id="type.89">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <baseType ref="type.78"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580602">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <baseType ref="type.1580591"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580574">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <baseType ref="type.1580563"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.88">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.78"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.104">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1580563"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.112">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1580591"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580564">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>*</name>
            <content>
                <baseType ref="type.1580563"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580592">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>*</name>
            <content>
                <baseType ref="type.1580591"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.79">
            <name>ForwardListNodeIterator&lt;T, const T&amp;, const T*>*</name>
            <content>
                <baseType ref="type.78"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1580101">
            <name>GeneralCategory</name>
        </type>
        <type derived="true" id="type.1580102">
            <name>GeneralCategory*</name>
            <content>
                <baseType ref="1580101"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582739">
            <name>GeneralCategory*&amp;</name>
            <content>
                <baseType ref="1580101"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582680">
            <name>GeneralCategory*&amp;&amp;</name>
            <content>
                <baseType ref="1580101"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582824">
            <name>GeneralCategory**</name>
            <content>
                <baseType ref="1580101"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584527">
            <name>GeneralCategory**&amp;&amp;</name>
            <content>
                <baseType ref="1580101"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="1580100">
            <name>GeneralCategoryId</name>
        </type>
        <type derived="true" id="type.1584471">
            <name>GeneralCategoryId&amp;</name>
            <content>
                <baseType ref="1580100"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582654">
            <name>GeneralCategoryId&amp;&amp;</name>
            <content>
                <baseType ref="1580100"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582653">
            <name>GeneralCategoryId*</name>
            <content>
                <baseType ref="1580100"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1580103">
            <name>GeneralCategoryTable</name>
        </type>
        <type derived="true" id="type.1582656">
            <name>GeneralCategoryTable&amp;</name>
            <content>
                <baseType ref="1580103"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580106">
            <name>GeneralCategoryTable*</name>
            <content>
                <baseType ref="1580103"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1579886">
            <name>Greater&lt;T, U></name>
        </type>
        <type id="type.1580768" specialization="true">
            <name>Greater&lt;T, U></name>
            <content>
                <primaryType ref="1580768"/>
                <argumentType ref="1579887"/>
                <argumentType ref="1579888"/>
            </content>
        </type>
        <type id="type.1580757" specialization="true">
            <name>Greater&lt;T></name>
            <content>
                <primaryType ref="1580757"/>
                <argumentType ref="1579885"/>
            </content>
        </type>
        <type id="1579884">
            <name>Greater&lt;T></name>
        </type>
        <type id="type.1580757" specialization="true">
            <name>Greater&lt;T></name>
            <content>
                <primaryType ref="1580757"/>
                <argumentType ref="1579885"/>
            </content>
        </type>
        <type id="type.1580810" specialization="true">
            <name>GreaterOrEqualTo&lt;T, U></name>
            <content>
                <primaryType ref="1580810"/>
                <argumentType ref="1579897"/>
                <argumentType ref="1579898"/>
            </content>
        </type>
        <type id="1579896">
            <name>GreaterOrEqualTo&lt;T, U></name>
        </type>
        <type id="type.1580810" specialization="true">
            <name>GreaterOrEqualTo&lt;T, U></name>
            <content>
                <primaryType ref="1580810"/>
                <argumentType ref="1579897"/>
                <argumentType ref="1579898"/>
            </content>
        </type>
        <type id="type.1580799" specialization="true">
            <name>GreaterOrEqualTo&lt;T></name>
            <content>
                <primaryType ref="1580799"/>
                <argumentType ref="1579895"/>
            </content>
        </type>
        <type id="1579894">
            <name>GreaterOrEqualTo&lt;T></name>
        </type>
        <type id="type.1580799" specialization="true">
            <name>GreaterOrEqualTo&lt;T></name>
            <content>
                <primaryType ref="1580799"/>
                <argumentType ref="1579895"/>
            </content>
        </type>
        <type id="1579946">
            <name>H</name>
        </type>
        <type derived="true" id="type.1581198">
            <name>H*</name>
            <content>
                <baseType ref="1579946"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.478">
            <name>H*</name>
            <content>
                <baseType ref="1579942"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581198">
            <name>H*</name>
            <content>
                <baseType ref="1579946"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1579951">
            <name>HashFun</name>
        </type>
        <type id="type.1580882" specialization="true">
            <name>HashMap&lt;K, T, H, C></name>
            <content>
                <primaryType ref="1580882"/>
                <argumentType ref="1579918"/>
                <argumentType ref="1579919"/>
                <argumentType ref="1579920"/>
                <argumentType ref="1579921"/>
            </content>
        </type>
        <type id="type.1580952" specialization="true">
            <name>HashMap&lt;K, T, H, C></name>
            <content>
                <primaryType ref="1580882"/>
                <argumentType ref="1579922"/>
                <argumentType ref="1579923"/>
                <argumentType ref="1579924"/>
                <argumentType ref="1579925"/>
            </content>
        </type>
        <type id="type.1580882" specialization="true">
            <name>HashMap&lt;K, T, H, C></name>
            <content>
                <primaryType ref="1580882"/>
                <argumentType ref="1579918"/>
                <argumentType ref="1579919"/>
                <argumentType ref="1579920"/>
                <argumentType ref="1579921"/>
            </content>
        </type>
        <type id="1579917">
            <name>HashMap&lt;K, T, H, C></name>
        </type>
        <type derived="true" id="type.1580953">
            <name>HashMap&lt;K, T, H, C>*</name>
            <content>
                <baseType ref="type.1580952"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.307">
            <name>HashMap&lt;K, T, H, C>*</name>
            <content>
                <baseType ref="type.1580882"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582919" specialization="true">
            <name>HashMap&lt;String&lt;char>, Age*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="1580882"/>
                <argumentType ref="type.1580238"/>
                <argumentType ref="type.1580109"/>
                <argumentType ref="type.1582365"/>
                <argumentType ref="type.1582369"/>
            </content>
        </type>
        <type derived="true" id="type.1582920">
            <name>HashMap&lt;String&lt;char>, Age*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <baseType ref="type.1582919"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583815" specialization="true">
            <name>HashMap&lt;String&lt;char>, AliasType*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="1580882"/>
                <argumentType ref="type.1580238"/>
                <argumentType ref="type.1580158"/>
                <argumentType ref="type.1582365"/>
                <argumentType ref="type.1582369"/>
            </content>
        </type>
        <type derived="true" id="type.1583816">
            <name>HashMap&lt;String&lt;char>, AliasType*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <baseType ref="type.1583815"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583457" specialization="true">
            <name>HashMap&lt;String&lt;char>, BidiClass*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="1580882"/>
                <argumentType ref="type.1580238"/>
                <argumentType ref="type.1580140"/>
                <argumentType ref="type.1582365"/>
                <argumentType ref="type.1582369"/>
            </content>
        </type>
        <type derived="true" id="type.1583458">
            <name>HashMap&lt;String&lt;char>, BidiClass*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <baseType ref="type.1583457"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583636" specialization="true">
            <name>HashMap&lt;String&lt;char>, BidiPairedBracketType*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="1580882"/>
                <argumentType ref="type.1580238"/>
                <argumentType ref="type.1580149"/>
                <argumentType ref="type.1582365"/>
                <argumentType ref="type.1582369"/>
            </content>
        </type>
        <type derived="true" id="type.1583637">
            <name>HashMap&lt;String&lt;char>, BidiPairedBracketType*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <baseType ref="type.1583636"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582379" specialization="true">
            <name>HashMap&lt;String&lt;char>, BinaryProperty*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="1580882"/>
                <argumentType ref="type.1580238"/>
                <argumentType ref="type.1580088"/>
                <argumentType ref="type.1582365"/>
                <argumentType ref="type.1582369"/>
            </content>
        </type>
        <type derived="true" id="type.1582380">
            <name>HashMap&lt;String&lt;char>, BinaryProperty*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <baseType ref="type.1582379"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582559" specialization="true">
            <name>HashMap&lt;String&lt;char>, Block*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="1580882"/>
                <argumentType ref="type.1580238"/>
                <argumentType ref="type.1580095"/>
                <argumentType ref="type.1582365"/>
                <argumentType ref="type.1582369"/>
            </content>
        </type>
        <type derived="true" id="type.1582560">
            <name>HashMap&lt;String&lt;char>, Block*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <baseType ref="type.1582559"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582740" specialization="true">
            <name>HashMap&lt;String&lt;char>, GeneralCategory*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="1580882"/>
                <argumentType ref="type.1580238"/>
                <argumentType ref="type.1580102"/>
                <argumentType ref="type.1582365"/>
                <argumentType ref="type.1582369"/>
            </content>
        </type>
        <type derived="true" id="type.1582741">
            <name>HashMap&lt;String&lt;char>, GeneralCategory*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <baseType ref="type.1582740"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583278" specialization="true">
            <name>HashMap&lt;String&lt;char>, NumericType*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="1580882"/>
                <argumentType ref="type.1580238"/>
                <argumentType ref="type.1580131"/>
                <argumentType ref="type.1582365"/>
                <argumentType ref="type.1582369"/>
            </content>
        </type>
        <type derived="true" id="type.1583279">
            <name>HashMap&lt;String&lt;char>, NumericType*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <baseType ref="type.1583278"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583098" specialization="true">
            <name>HashMap&lt;String&lt;char>, Script*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="1580882"/>
                <argumentType ref="type.1580238"/>
                <argumentType ref="type.1580118"/>
                <argumentType ref="type.1582365"/>
                <argumentType ref="type.1582369"/>
            </content>
        </type>
        <type derived="true" id="type.1583099">
            <name>HashMap&lt;String&lt;char>, Script*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <baseType ref="type.1583098"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582852" specialization="true">
            <name>HashMap&lt;System.Unicode.AgeId, Age*, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>></name>
            <content>
                <primaryType ref="1580882"/>
                <argumentType ref="1580107"/>
                <argumentType ref="type.1580109"/>
                <argumentType ref="type.1582837"/>
                <argumentType ref="type.1582842"/>
            </content>
        </type>
        <type derived="true" id="type.1582853">
            <name>HashMap&lt;System.Unicode.AgeId, Age*, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>>*</name>
            <content>
                <baseType ref="type.1582852"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583748" specialization="true">
            <name>HashMap&lt;System.Unicode.AliasTypeId, AliasType*, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>></name>
            <content>
                <primaryType ref="1580882"/>
                <argumentType ref="1580156"/>
                <argumentType ref="type.1580158"/>
                <argumentType ref="type.1583733"/>
                <argumentType ref="type.1583738"/>
            </content>
        </type>
        <type derived="true" id="type.1583749">
            <name>HashMap&lt;System.Unicode.AliasTypeId, AliasType*, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>>*</name>
            <content>
                <baseType ref="type.1583748"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583390" specialization="true">
            <name>HashMap&lt;System.Unicode.BidiClassId, BidiClass*, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>></name>
            <content>
                <primaryType ref="1580882"/>
                <argumentType ref="1580138"/>
                <argumentType ref="type.1580140"/>
                <argumentType ref="type.1583375"/>
                <argumentType ref="type.1583380"/>
            </content>
        </type>
        <type derived="true" id="type.1583391">
            <name>HashMap&lt;System.Unicode.BidiClassId, BidiClass*, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>>*</name>
            <content>
                <baseType ref="type.1583390"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583569" specialization="true">
            <name>HashMap&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>></name>
            <content>
                <primaryType ref="1580882"/>
                <argumentType ref="1580147"/>
                <argumentType ref="type.1580149"/>
                <argumentType ref="type.1583554"/>
                <argumentType ref="type.1583559"/>
            </content>
        </type>
        <type derived="true" id="type.1583570">
            <name>HashMap&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>>*</name>
            <content>
                <baseType ref="type.1583569"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582298" specialization="true">
            <name>HashMap&lt;System.Unicode.BinaryPropertyId, BinaryProperty*, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>></name>
            <content>
                <primaryType ref="1580882"/>
                <argumentType ref="1580086"/>
                <argumentType ref="type.1580088"/>
                <argumentType ref="type.1582283"/>
                <argumentType ref="type.1582288"/>
            </content>
        </type>
        <type derived="true" id="type.1582299">
            <name>HashMap&lt;System.Unicode.BinaryPropertyId, BinaryProperty*, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>>*</name>
            <content>
                <baseType ref="type.1582298"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582492" specialization="true">
            <name>HashMap&lt;System.Unicode.BlockId, Block*, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>></name>
            <content>
                <primaryType ref="1580882"/>
                <argumentType ref="1580093"/>
                <argumentType ref="type.1580095"/>
                <argumentType ref="type.1582477"/>
                <argumentType ref="type.1582482"/>
            </content>
        </type>
        <type derived="true" id="type.1582493">
            <name>HashMap&lt;System.Unicode.BlockId, Block*, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>>*</name>
            <content>
                <baseType ref="type.1582492"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582673" specialization="true">
            <name>HashMap&lt;System.Unicode.GeneralCategoryId, GeneralCategory*, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>></name>
            <content>
                <primaryType ref="1580882"/>
                <argumentType ref="1580100"/>
                <argumentType ref="type.1580102"/>
                <argumentType ref="type.1582658"/>
                <argumentType ref="type.1582663"/>
            </content>
        </type>
        <type derived="true" id="type.1582674">
            <name>HashMap&lt;System.Unicode.GeneralCategoryId, GeneralCategory*, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>>*</name>
            <content>
                <baseType ref="type.1582673"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583211" specialization="true">
            <name>HashMap&lt;System.Unicode.NumericTypeId, NumericType*, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>></name>
            <content>
                <primaryType ref="1580882"/>
                <argumentType ref="1580129"/>
                <argumentType ref="type.1580131"/>
                <argumentType ref="type.1583196"/>
                <argumentType ref="type.1583201"/>
            </content>
        </type>
        <type derived="true" id="type.1583212">
            <name>HashMap&lt;System.Unicode.NumericTypeId, NumericType*, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>>*</name>
            <content>
                <baseType ref="type.1583211"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583031" specialization="true">
            <name>HashMap&lt;System.Unicode.ScriptId, Script*, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>></name>
            <content>
                <primaryType ref="1580882"/>
                <argumentType ref="1580116"/>
                <argumentType ref="type.1580118"/>
                <argumentType ref="type.1583016"/>
                <argumentType ref="type.1583021"/>
            </content>
        </type>
        <type derived="true" id="type.1583032">
            <name>HashMap&lt;System.Unicode.ScriptId, Script*, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>>*</name>
            <content>
                <baseType ref="type.1583031"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1579926">
            <name>HashSet&lt;T, H, C></name>
        </type>
        <type id="type.1581085" specialization="true">
            <name>HashSet&lt;T, H, C></name>
            <content>
                <primaryType ref="1581022"/>
                <argumentType ref="1579930"/>
                <argumentType ref="1579931"/>
                <argumentType ref="1579932"/>
            </content>
        </type>
        <type id="type.1581022" specialization="true">
            <name>HashSet&lt;T, H, C></name>
            <content>
                <primaryType ref="1581022"/>
                <argumentType ref="1579927"/>
                <argumentType ref="1579928"/>
                <argumentType ref="1579929"/>
            </content>
        </type>
        <type derived="true" id="type.1581086">
            <name>HashSet&lt;T, H, C>*</name>
            <content>
                <baseType ref="type.1581085"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.388">
            <name>HashSet&lt;T, H, C>*</name>
            <content>
                <baseType ref="type.1581022"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581086">
            <name>HashSet&lt;T, H, C>*</name>
            <content>
                <baseType ref="type.1581085"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582365" specialization="true">
            <name>Hasher&lt;String&lt;char>></name>
            <content>
                <primaryType ref="1581171"/>
                <argumentType ref="type.1580238"/>
            </content>
        </type>
        <type derived="true" id="type.1584331">
            <name>Hasher&lt;String&lt;char>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582365"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582366">
            <name>Hasher&lt;String&lt;char>>*</name>
            <content>
                <baseType ref="type.1582365"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582837" specialization="true">
            <name>Hasher&lt;System.Unicode.AgeId></name>
            <content>
                <primaryType ref="1581171"/>
                <argumentType ref="1580107"/>
            </content>
        </type>
        <type derived="true" id="type.1584560">
            <name>Hasher&lt;System.Unicode.AgeId>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582837"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582838">
            <name>Hasher&lt;System.Unicode.AgeId>*</name>
            <content>
                <baseType ref="type.1582837"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583733" specialization="true">
            <name>Hasher&lt;System.Unicode.AliasTypeId></name>
            <content>
                <primaryType ref="1581171"/>
                <argumentType ref="1580156"/>
            </content>
        </type>
        <type derived="true" id="type.1584965">
            <name>Hasher&lt;System.Unicode.AliasTypeId>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583733"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583734">
            <name>Hasher&lt;System.Unicode.AliasTypeId>*</name>
            <content>
                <baseType ref="type.1583733"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583375" specialization="true">
            <name>Hasher&lt;System.Unicode.BidiClassId></name>
            <content>
                <primaryType ref="1581171"/>
                <argumentType ref="1580138"/>
            </content>
        </type>
        <type derived="true" id="type.1584803">
            <name>Hasher&lt;System.Unicode.BidiClassId>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583375"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583376">
            <name>Hasher&lt;System.Unicode.BidiClassId>*</name>
            <content>
                <baseType ref="type.1583375"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583554" specialization="true">
            <name>Hasher&lt;System.Unicode.BidiPairedBracketTypeId></name>
            <content>
                <primaryType ref="1581171"/>
                <argumentType ref="1580147"/>
            </content>
        </type>
        <type derived="true" id="type.1584884">
            <name>Hasher&lt;System.Unicode.BidiPairedBracketTypeId>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583554"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583555">
            <name>Hasher&lt;System.Unicode.BidiPairedBracketTypeId>*</name>
            <content>
                <baseType ref="type.1583554"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582283" specialization="true">
            <name>Hasher&lt;System.Unicode.BinaryPropertyId></name>
            <content>
                <primaryType ref="1581171"/>
                <argumentType ref="1580086"/>
            </content>
        </type>
        <type derived="true" id="type.1584295">
            <name>Hasher&lt;System.Unicode.BinaryPropertyId>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582283"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582284">
            <name>Hasher&lt;System.Unicode.BinaryPropertyId>*</name>
            <content>
                <baseType ref="type.1582283"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582477" specialization="true">
            <name>Hasher&lt;System.Unicode.BlockId></name>
            <content>
                <primaryType ref="1581171"/>
                <argumentType ref="1580093"/>
            </content>
        </type>
        <type derived="true" id="type.1584398">
            <name>Hasher&lt;System.Unicode.BlockId>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582477"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582478">
            <name>Hasher&lt;System.Unicode.BlockId>*</name>
            <content>
                <baseType ref="type.1582477"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582658" specialization="true">
            <name>Hasher&lt;System.Unicode.GeneralCategoryId></name>
            <content>
                <primaryType ref="1581171"/>
                <argumentType ref="1580100"/>
            </content>
        </type>
        <type derived="true" id="type.1584479">
            <name>Hasher&lt;System.Unicode.GeneralCategoryId>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582658"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582659">
            <name>Hasher&lt;System.Unicode.GeneralCategoryId>*</name>
            <content>
                <baseType ref="type.1582658"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583196" specialization="true">
            <name>Hasher&lt;System.Unicode.NumericTypeId></name>
            <content>
                <primaryType ref="1581171"/>
                <argumentType ref="1580129"/>
            </content>
        </type>
        <type derived="true" id="type.1584722">
            <name>Hasher&lt;System.Unicode.NumericTypeId>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583196"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583197">
            <name>Hasher&lt;System.Unicode.NumericTypeId>*</name>
            <content>
                <baseType ref="type.1583196"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583016" specialization="true">
            <name>Hasher&lt;System.Unicode.ScriptId></name>
            <content>
                <primaryType ref="1581171"/>
                <argumentType ref="1580116"/>
            </content>
        </type>
        <type derived="true" id="type.1584641">
            <name>Hasher&lt;System.Unicode.ScriptId>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583016"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583017">
            <name>Hasher&lt;System.Unicode.ScriptId>*</name>
            <content>
                <baseType ref="type.1583016"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1579934">
            <name>Hasher&lt;T></name>
        </type>
        <type id="type.1581171" specialization="true">
            <name>Hasher&lt;T></name>
            <content>
                <primaryType ref="1581171"/>
                <argumentType ref="1579935"/>
            </content>
        </type>
        <type derived="true" id="type.466">
            <name>Hasher&lt;T>*</name>
            <content>
                <baseType ref="type.1581171"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.323" specialization="true">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C></name>
            <content>
                <primaryType ref="1581207"/>
                <argumentType ref="1579918"/>
                <argumentType ref="type.310"/>
                <argumentType ref="type.316"/>
                <argumentType ref="1579920"/>
                <argumentType ref="1579921"/>
            </content>
        </type>
        <type id="type.1580969" specialization="true">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C></name>
            <content>
                <primaryType ref="1581207"/>
                <argumentType ref="1579922"/>
                <argumentType ref="type.1580956"/>
                <argumentType ref="type.1580962"/>
                <argumentType ref="1579924"/>
                <argumentType ref="1579925"/>
            </content>
        </type>
        <type derived="true" id="type.344">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.323"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580990">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.1580969"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.324">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>*</name>
            <content>
                <baseType ref="type.323"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580970">
            <name>Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>*</name>
            <content>
                <baseType ref="type.1580969"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1581207" specialization="true">
            <name>Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare></name>
            <content>
                <primaryType ref="1581207"/>
                <argumentType ref="1579948"/>
                <argumentType ref="1579949"/>
                <argumentType ref="1579950"/>
                <argumentType ref="1579951"/>
                <argumentType ref="1579952"/>
            </content>
        </type>
        <type id="1579947">
            <name>Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare></name>
        </type>
        <type derived="true" id="type.510">
            <name>Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>&amp;&amp;</name>
            <content>
                <baseType ref="type.1581207"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.488">
            <name>Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>*</name>
            <content>
                <baseType ref="type.1581207"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582932" specialization="true">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Age*>, SelectFirst&lt;String&lt;char>, Age*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="1581207"/>
                <argumentType ref="type.1580238"/>
                <argumentType ref="type.1582923"/>
                <argumentType ref="type.1582925"/>
                <argumentType ref="type.1582365"/>
                <argumentType ref="type.1582369"/>
            </content>
        </type>
        <type derived="true" id="type.1582953">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Age*>, SelectFirst&lt;String&lt;char>, Age*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582932"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582933">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Age*>, SelectFirst&lt;String&lt;char>, Age*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <baseType ref="type.1582932"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584605">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Age*>, SelectFirst&lt;String&lt;char>, Age*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*&amp;</name>
            <content>
                <baseType ref="type.1582932"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584602">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Age*>, SelectFirst&lt;String&lt;char>, Age*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.1582932"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1583828" specialization="true">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, AliasType*>, SelectFirst&lt;String&lt;char>, AliasType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="1581207"/>
                <argumentType ref="type.1580238"/>
                <argumentType ref="type.1583819"/>
                <argumentType ref="type.1583821"/>
                <argumentType ref="type.1582365"/>
                <argumentType ref="type.1582369"/>
            </content>
        </type>
        <type derived="true" id="type.1583849">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, AliasType*>, SelectFirst&lt;String&lt;char>, AliasType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583828"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583829">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, AliasType*>, SelectFirst&lt;String&lt;char>, AliasType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <baseType ref="type.1583828"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1585010">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, AliasType*>, SelectFirst&lt;String&lt;char>, AliasType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*&amp;</name>
            <content>
                <baseType ref="type.1583828"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1585007">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, AliasType*>, SelectFirst&lt;String&lt;char>, AliasType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.1583828"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1583470" specialization="true">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiClass*>, SelectFirst&lt;String&lt;char>, BidiClass*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="1581207"/>
                <argumentType ref="type.1580238"/>
                <argumentType ref="type.1583461"/>
                <argumentType ref="type.1583463"/>
                <argumentType ref="type.1582365"/>
                <argumentType ref="type.1582369"/>
            </content>
        </type>
        <type derived="true" id="type.1583491">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiClass*>, SelectFirst&lt;String&lt;char>, BidiClass*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583470"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583471">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiClass*>, SelectFirst&lt;String&lt;char>, BidiClass*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <baseType ref="type.1583470"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584848">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiClass*>, SelectFirst&lt;String&lt;char>, BidiClass*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*&amp;</name>
            <content>
                <baseType ref="type.1583470"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584845">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiClass*>, SelectFirst&lt;String&lt;char>, BidiClass*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.1583470"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1583649" specialization="true">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiPairedBracketType*>, SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="1581207"/>
                <argumentType ref="type.1580238"/>
                <argumentType ref="type.1583640"/>
                <argumentType ref="type.1583642"/>
                <argumentType ref="type.1582365"/>
                <argumentType ref="type.1582369"/>
            </content>
        </type>
        <type derived="true" id="type.1583670">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiPairedBracketType*>, SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583649"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583650">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiPairedBracketType*>, SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <baseType ref="type.1583649"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584929">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiPairedBracketType*>, SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*&amp;</name>
            <content>
                <baseType ref="type.1583649"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584926">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiPairedBracketType*>, SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.1583649"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1582392" specialization="true">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BinaryProperty*>, SelectFirst&lt;String&lt;char>, BinaryProperty*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="1581207"/>
                <argumentType ref="type.1580238"/>
                <argumentType ref="type.1582383"/>
                <argumentType ref="type.1582385"/>
                <argumentType ref="type.1582365"/>
                <argumentType ref="type.1582369"/>
            </content>
        </type>
        <type derived="true" id="type.1582413">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BinaryProperty*>, SelectFirst&lt;String&lt;char>, BinaryProperty*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582392"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582393">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BinaryProperty*>, SelectFirst&lt;String&lt;char>, BinaryProperty*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <baseType ref="type.1582392"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584361">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BinaryProperty*>, SelectFirst&lt;String&lt;char>, BinaryProperty*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*&amp;</name>
            <content>
                <baseType ref="type.1582392"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584358">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BinaryProperty*>, SelectFirst&lt;String&lt;char>, BinaryProperty*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.1582392"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1582572" specialization="true">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Block*>, SelectFirst&lt;String&lt;char>, Block*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="1581207"/>
                <argumentType ref="type.1580238"/>
                <argumentType ref="type.1582563"/>
                <argumentType ref="type.1582565"/>
                <argumentType ref="type.1582365"/>
                <argumentType ref="type.1582369"/>
            </content>
        </type>
        <type derived="true" id="type.1582593">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Block*>, SelectFirst&lt;String&lt;char>, Block*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582572"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582573">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Block*>, SelectFirst&lt;String&lt;char>, Block*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <baseType ref="type.1582572"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584443">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Block*>, SelectFirst&lt;String&lt;char>, Block*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*&amp;</name>
            <content>
                <baseType ref="type.1582572"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584440">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Block*>, SelectFirst&lt;String&lt;char>, Block*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.1582572"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1582753" specialization="true">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, GeneralCategory*>, SelectFirst&lt;String&lt;char>, GeneralCategory*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="1581207"/>
                <argumentType ref="type.1580238"/>
                <argumentType ref="type.1582744"/>
                <argumentType ref="type.1582746"/>
                <argumentType ref="type.1582365"/>
                <argumentType ref="type.1582369"/>
            </content>
        </type>
        <type derived="true" id="type.1582774">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, GeneralCategory*>, SelectFirst&lt;String&lt;char>, GeneralCategory*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582753"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582754">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, GeneralCategory*>, SelectFirst&lt;String&lt;char>, GeneralCategory*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <baseType ref="type.1582753"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584524">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, GeneralCategory*>, SelectFirst&lt;String&lt;char>, GeneralCategory*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*&amp;</name>
            <content>
                <baseType ref="type.1582753"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584521">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, GeneralCategory*>, SelectFirst&lt;String&lt;char>, GeneralCategory*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.1582753"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1583291" specialization="true">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, NumericType*>, SelectFirst&lt;String&lt;char>, NumericType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="1581207"/>
                <argumentType ref="type.1580238"/>
                <argumentType ref="type.1583282"/>
                <argumentType ref="type.1583284"/>
                <argumentType ref="type.1582365"/>
                <argumentType ref="type.1582369"/>
            </content>
        </type>
        <type derived="true" id="type.1583312">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, NumericType*>, SelectFirst&lt;String&lt;char>, NumericType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583291"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583292">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, NumericType*>, SelectFirst&lt;String&lt;char>, NumericType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <baseType ref="type.1583291"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584767">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, NumericType*>, SelectFirst&lt;String&lt;char>, NumericType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*&amp;</name>
            <content>
                <baseType ref="type.1583291"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584764">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, NumericType*>, SelectFirst&lt;String&lt;char>, NumericType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.1583291"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1583111" specialization="true">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Script*>, SelectFirst&lt;String&lt;char>, Script*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <primaryType ref="1581207"/>
                <argumentType ref="type.1580238"/>
                <argumentType ref="type.1583102"/>
                <argumentType ref="type.1583104"/>
                <argumentType ref="type.1582365"/>
                <argumentType ref="type.1582369"/>
            </content>
        </type>
        <type derived="true" id="type.1583132">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Script*>, SelectFirst&lt;String&lt;char>, Script*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583111"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583112">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Script*>, SelectFirst&lt;String&lt;char>, Script*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <baseType ref="type.1583111"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584686">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Script*>, SelectFirst&lt;String&lt;char>, Script*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*&amp;</name>
            <content>
                <baseType ref="type.1583111"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584683">
            <name>Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Script*>, SelectFirst&lt;String&lt;char>, Script*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.1583111"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1582867" specialization="true">
            <name>Hashtable&lt;System.Unicode.AgeId, Pair&lt;System.Unicode.AgeId, Age*>, SelectFirst&lt;System.Unicode.AgeId, Age*>, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>></name>
            <content>
                <primaryType ref="1581207"/>
                <argumentType ref="1580107"/>
                <argumentType ref="type.1582856"/>
                <argumentType ref="type.1582860"/>
                <argumentType ref="type.1582837"/>
                <argumentType ref="type.1582842"/>
            </content>
        </type>
        <type derived="true" id="type.1582888">
            <name>Hashtable&lt;System.Unicode.AgeId, Pair&lt;System.Unicode.AgeId, Age*>, SelectFirst&lt;System.Unicode.AgeId, Age*>, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582867"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582868">
            <name>Hashtable&lt;System.Unicode.AgeId, Pair&lt;System.Unicode.AgeId, Age*>, SelectFirst&lt;System.Unicode.AgeId, Age*>, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>>*</name>
            <content>
                <baseType ref="type.1582867"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584586">
            <name>Hashtable&lt;System.Unicode.AgeId, Pair&lt;System.Unicode.AgeId, Age*>, SelectFirst&lt;System.Unicode.AgeId, Age*>, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>>*&amp;</name>
            <content>
                <baseType ref="type.1582867"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584583">
            <name>Hashtable&lt;System.Unicode.AgeId, Pair&lt;System.Unicode.AgeId, Age*>, SelectFirst&lt;System.Unicode.AgeId, Age*>, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.1582867"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1583763" specialization="true">
            <name>Hashtable&lt;System.Unicode.AliasTypeId, Pair&lt;System.Unicode.AliasTypeId, AliasType*>, SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>></name>
            <content>
                <primaryType ref="1581207"/>
                <argumentType ref="1580156"/>
                <argumentType ref="type.1583752"/>
                <argumentType ref="type.1583756"/>
                <argumentType ref="type.1583733"/>
                <argumentType ref="type.1583738"/>
            </content>
        </type>
        <type derived="true" id="type.1583784">
            <name>Hashtable&lt;System.Unicode.AliasTypeId, Pair&lt;System.Unicode.AliasTypeId, AliasType*>, SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583763"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583764">
            <name>Hashtable&lt;System.Unicode.AliasTypeId, Pair&lt;System.Unicode.AliasTypeId, AliasType*>, SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>>*</name>
            <content>
                <baseType ref="type.1583763"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584991">
            <name>Hashtable&lt;System.Unicode.AliasTypeId, Pair&lt;System.Unicode.AliasTypeId, AliasType*>, SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>>*&amp;</name>
            <content>
                <baseType ref="type.1583763"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584988">
            <name>Hashtable&lt;System.Unicode.AliasTypeId, Pair&lt;System.Unicode.AliasTypeId, AliasType*>, SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.1583763"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1583405" specialization="true">
            <name>Hashtable&lt;System.Unicode.BidiClassId, Pair&lt;System.Unicode.BidiClassId, BidiClass*>, SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>></name>
            <content>
                <primaryType ref="1581207"/>
                <argumentType ref="1580138"/>
                <argumentType ref="type.1583394"/>
                <argumentType ref="type.1583398"/>
                <argumentType ref="type.1583375"/>
                <argumentType ref="type.1583380"/>
            </content>
        </type>
        <type derived="true" id="type.1583426">
            <name>Hashtable&lt;System.Unicode.BidiClassId, Pair&lt;System.Unicode.BidiClassId, BidiClass*>, SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583405"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583406">
            <name>Hashtable&lt;System.Unicode.BidiClassId, Pair&lt;System.Unicode.BidiClassId, BidiClass*>, SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>>*</name>
            <content>
                <baseType ref="type.1583405"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584829">
            <name>Hashtable&lt;System.Unicode.BidiClassId, Pair&lt;System.Unicode.BidiClassId, BidiClass*>, SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>>*&amp;</name>
            <content>
                <baseType ref="type.1583405"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584826">
            <name>Hashtable&lt;System.Unicode.BidiClassId, Pair&lt;System.Unicode.BidiClassId, BidiClass*>, SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.1583405"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1583584" specialization="true">
            <name>Hashtable&lt;System.Unicode.BidiPairedBracketTypeId, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>></name>
            <content>
                <primaryType ref="1581207"/>
                <argumentType ref="1580147"/>
                <argumentType ref="type.1583573"/>
                <argumentType ref="type.1583577"/>
                <argumentType ref="type.1583554"/>
                <argumentType ref="type.1583559"/>
            </content>
        </type>
        <type derived="true" id="type.1583605">
            <name>Hashtable&lt;System.Unicode.BidiPairedBracketTypeId, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583584"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583585">
            <name>Hashtable&lt;System.Unicode.BidiPairedBracketTypeId, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>>*</name>
            <content>
                <baseType ref="type.1583584"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584910">
            <name>Hashtable&lt;System.Unicode.BidiPairedBracketTypeId, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>>*&amp;</name>
            <content>
                <baseType ref="type.1583584"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584907">
            <name>Hashtable&lt;System.Unicode.BidiPairedBracketTypeId, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.1583584"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1582313" specialization="true">
            <name>Hashtable&lt;System.Unicode.BinaryPropertyId, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>></name>
            <content>
                <primaryType ref="1581207"/>
                <argumentType ref="1580086"/>
                <argumentType ref="type.1582302"/>
                <argumentType ref="type.1582306"/>
                <argumentType ref="type.1582283"/>
                <argumentType ref="type.1582288"/>
            </content>
        </type>
        <type derived="true" id="type.1582334">
            <name>Hashtable&lt;System.Unicode.BinaryPropertyId, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582313"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582314">
            <name>Hashtable&lt;System.Unicode.BinaryPropertyId, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>>*</name>
            <content>
                <baseType ref="type.1582313"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584321">
            <name>Hashtable&lt;System.Unicode.BinaryPropertyId, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>>*&amp;</name>
            <content>
                <baseType ref="type.1582313"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584318">
            <name>Hashtable&lt;System.Unicode.BinaryPropertyId, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.1582313"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1582507" specialization="true">
            <name>Hashtable&lt;System.Unicode.BlockId, Pair&lt;System.Unicode.BlockId, Block*>, SelectFirst&lt;System.Unicode.BlockId, Block*>, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>></name>
            <content>
                <primaryType ref="1581207"/>
                <argumentType ref="1580093"/>
                <argumentType ref="type.1582496"/>
                <argumentType ref="type.1582500"/>
                <argumentType ref="type.1582477"/>
                <argumentType ref="type.1582482"/>
            </content>
        </type>
        <type derived="true" id="type.1582528">
            <name>Hashtable&lt;System.Unicode.BlockId, Pair&lt;System.Unicode.BlockId, Block*>, SelectFirst&lt;System.Unicode.BlockId, Block*>, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582507"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582508">
            <name>Hashtable&lt;System.Unicode.BlockId, Pair&lt;System.Unicode.BlockId, Block*>, SelectFirst&lt;System.Unicode.BlockId, Block*>, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>>*</name>
            <content>
                <baseType ref="type.1582507"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584424">
            <name>Hashtable&lt;System.Unicode.BlockId, Pair&lt;System.Unicode.BlockId, Block*>, SelectFirst&lt;System.Unicode.BlockId, Block*>, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>>*&amp;</name>
            <content>
                <baseType ref="type.1582507"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584421">
            <name>Hashtable&lt;System.Unicode.BlockId, Pair&lt;System.Unicode.BlockId, Block*>, SelectFirst&lt;System.Unicode.BlockId, Block*>, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.1582507"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1582688" specialization="true">
            <name>Hashtable&lt;System.Unicode.GeneralCategoryId, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>></name>
            <content>
                <primaryType ref="1581207"/>
                <argumentType ref="1580100"/>
                <argumentType ref="type.1582677"/>
                <argumentType ref="type.1582681"/>
                <argumentType ref="type.1582658"/>
                <argumentType ref="type.1582663"/>
            </content>
        </type>
        <type derived="true" id="type.1582709">
            <name>Hashtable&lt;System.Unicode.GeneralCategoryId, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582688"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582689">
            <name>Hashtable&lt;System.Unicode.GeneralCategoryId, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>>*</name>
            <content>
                <baseType ref="type.1582688"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584505">
            <name>Hashtable&lt;System.Unicode.GeneralCategoryId, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>>*&amp;</name>
            <content>
                <baseType ref="type.1582688"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584502">
            <name>Hashtable&lt;System.Unicode.GeneralCategoryId, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.1582688"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1583226" specialization="true">
            <name>Hashtable&lt;System.Unicode.NumericTypeId, Pair&lt;System.Unicode.NumericTypeId, NumericType*>, SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>></name>
            <content>
                <primaryType ref="1581207"/>
                <argumentType ref="1580129"/>
                <argumentType ref="type.1583215"/>
                <argumentType ref="type.1583219"/>
                <argumentType ref="type.1583196"/>
                <argumentType ref="type.1583201"/>
            </content>
        </type>
        <type derived="true" id="type.1583247">
            <name>Hashtable&lt;System.Unicode.NumericTypeId, Pair&lt;System.Unicode.NumericTypeId, NumericType*>, SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583226"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583227">
            <name>Hashtable&lt;System.Unicode.NumericTypeId, Pair&lt;System.Unicode.NumericTypeId, NumericType*>, SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>>*</name>
            <content>
                <baseType ref="type.1583226"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584748">
            <name>Hashtable&lt;System.Unicode.NumericTypeId, Pair&lt;System.Unicode.NumericTypeId, NumericType*>, SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>>*&amp;</name>
            <content>
                <baseType ref="type.1583226"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584745">
            <name>Hashtable&lt;System.Unicode.NumericTypeId, Pair&lt;System.Unicode.NumericTypeId, NumericType*>, SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.1583226"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1583046" specialization="true">
            <name>Hashtable&lt;System.Unicode.ScriptId, Pair&lt;System.Unicode.ScriptId, Script*>, SelectFirst&lt;System.Unicode.ScriptId, Script*>, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>></name>
            <content>
                <primaryType ref="1581207"/>
                <argumentType ref="1580116"/>
                <argumentType ref="type.1583035"/>
                <argumentType ref="type.1583039"/>
                <argumentType ref="type.1583016"/>
                <argumentType ref="type.1583021"/>
            </content>
        </type>
        <type derived="true" id="type.1583067">
            <name>Hashtable&lt;System.Unicode.ScriptId, Pair&lt;System.Unicode.ScriptId, Script*>, SelectFirst&lt;System.Unicode.ScriptId, Script*>, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583046"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583047">
            <name>Hashtable&lt;System.Unicode.ScriptId, Pair&lt;System.Unicode.ScriptId, Script*>, SelectFirst&lt;System.Unicode.ScriptId, Script*>, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>>*</name>
            <content>
                <baseType ref="type.1583046"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584667">
            <name>Hashtable&lt;System.Unicode.ScriptId, Pair&lt;System.Unicode.ScriptId, Script*>, SelectFirst&lt;System.Unicode.ScriptId, Script*>, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>>*&amp;</name>
            <content>
                <baseType ref="type.1583046"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584664">
            <name>Hashtable&lt;System.Unicode.ScriptId, Pair&lt;System.Unicode.ScriptId, Script*>, SelectFirst&lt;System.Unicode.ScriptId, Script*>, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>>*&amp;&amp;</name>
            <content>
                <baseType ref="type.1583046"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1581096" specialization="true">
            <name>Hashtable&lt;T, T, Identity&lt;T>, H, C></name>
            <content>
                <primaryType ref="1581207"/>
                <argumentType ref="1579930"/>
                <argumentType ref="1579930"/>
                <argumentType ref="type.1581089"/>
                <argumentType ref="1579931"/>
                <argumentType ref="1579932"/>
            </content>
        </type>
        <type id="type.398" specialization="true">
            <name>Hashtable&lt;T, T, Identity&lt;T>, H, C></name>
            <content>
                <primaryType ref="1581207"/>
                <argumentType ref="1579927"/>
                <argumentType ref="1579927"/>
                <argumentType ref="type.391"/>
                <argumentType ref="1579928"/>
                <argumentType ref="1579929"/>
            </content>
        </type>
        <type derived="true" id="type.420">
            <name>Hashtable&lt;T, T, Identity&lt;T>, H, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.398"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581118">
            <name>Hashtable&lt;T, T, Identity&lt;T>, H, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.1581096"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.399">
            <name>Hashtable&lt;T, T, Identity&lt;T>, H, C>*</name>
            <content>
                <baseType ref="type.398"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581097">
            <name>Hashtable&lt;T, T, Identity&lt;T>, H, C>*</name>
            <content>
                <baseType ref="type.1581096"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.328" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <primaryType ref="1581182"/>
                <argumentType ref="type.310"/>
                <argumentType ref="type.327"/>
                <argumentType ref="type.311"/>
                <argumentType ref="type.323"/>
            </content>
        </type>
        <type id="type.1580974" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <primaryType ref="1581182"/>
                <argumentType ref="type.1580956"/>
                <argumentType ref="type.1580973"/>
                <argumentType ref="type.1580957"/>
                <argumentType ref="type.1580969"/>
            </content>
        </type>
        <type derived="true" id="type.1580982">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <baseType ref="type.1580974"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.336">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <baseType ref="type.328"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580982">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <baseType ref="type.1580974"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.348">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;&amp;</name>
            <content>
                <baseType ref="type.328"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580994">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1580974"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.329">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <baseType ref="type.328"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580975">
            <name>HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <baseType ref="type.1580974"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1580984" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <primaryType ref="1581182"/>
                <argumentType ref="type.1580956"/>
                <argumentType ref="type.1580967"/>
                <argumentType ref="type.1580983"/>
                <argumentType ref="type.1580969"/>
            </content>
        </type>
        <type id="type.338" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <primaryType ref="1581182"/>
                <argumentType ref="type.310"/>
                <argumentType ref="type.321"/>
                <argumentType ref="type.337"/>
                <argumentType ref="type.323"/>
            </content>
        </type>
        <type id="type.1580984" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <primaryType ref="1581182"/>
                <argumentType ref="type.1580956"/>
                <argumentType ref="type.1580967"/>
                <argumentType ref="type.1580983"/>
                <argumentType ref="type.1580969"/>
            </content>
        </type>
        <type derived="true" id="type.1580988">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <baseType ref="type.1580984"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.342">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <baseType ref="type.338"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580988">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <baseType ref="type.1580984"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580985">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <baseType ref="type.1580984"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.339">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <baseType ref="type.338"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580985">
            <name>HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <baseType ref="type.1580984"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582937" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, Age*>, Pair&lt;String&lt;char>, Age*>&amp;, Pair&lt;String&lt;char>, Age*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Age*>, SelectFirst&lt;String&lt;char>, Age*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="1581182"/>
                <argumentType ref="type.1582923"/>
                <argumentType ref="type.1582936"/>
                <argumentType ref="type.1582924"/>
                <argumentType ref="type.1582932"/>
            </content>
        </type>
        <type derived="true" id="type.1582945">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, Age*>, Pair&lt;String&lt;char>, Age*>&amp;, Pair&lt;String&lt;char>, Age*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Age*>, SelectFirst&lt;String&lt;char>, Age*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <baseType ref="type.1582937"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582957">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, Age*>, Pair&lt;String&lt;char>, Age*>&amp;, Pair&lt;String&lt;char>, Age*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Age*>, SelectFirst&lt;String&lt;char>, Age*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582937"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582938">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, Age*>, Pair&lt;String&lt;char>, Age*>&amp;, Pair&lt;String&lt;char>, Age*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Age*>, SelectFirst&lt;String&lt;char>, Age*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <baseType ref="type.1582937"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582947" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, Age*>, const Pair&lt;String&lt;char>, Age*>&amp;, const Pair&lt;String&lt;char>, Age*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Age*>, SelectFirst&lt;String&lt;char>, Age*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="1581182"/>
                <argumentType ref="type.1582923"/>
                <argumentType ref="type.1582930"/>
                <argumentType ref="type.1582946"/>
                <argumentType ref="type.1582932"/>
            </content>
        </type>
        <type derived="true" id="type.1582951">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, Age*>, const Pair&lt;String&lt;char>, Age*>&amp;, const Pair&lt;String&lt;char>, Age*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Age*>, SelectFirst&lt;String&lt;char>, Age*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <baseType ref="type.1582947"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584603">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, Age*>, const Pair&lt;String&lt;char>, Age*>&amp;, const Pair&lt;String&lt;char>, Age*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Age*>, SelectFirst&lt;String&lt;char>, Age*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582947"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582948">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, Age*>, const Pair&lt;String&lt;char>, Age*>&amp;, const Pair&lt;String&lt;char>, Age*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Age*>, SelectFirst&lt;String&lt;char>, Age*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <baseType ref="type.1582947"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583833" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, AliasType*>, Pair&lt;String&lt;char>, AliasType*>&amp;, Pair&lt;String&lt;char>, AliasType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, AliasType*>, SelectFirst&lt;String&lt;char>, AliasType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="1581182"/>
                <argumentType ref="type.1583819"/>
                <argumentType ref="type.1583832"/>
                <argumentType ref="type.1583820"/>
                <argumentType ref="type.1583828"/>
            </content>
        </type>
        <type derived="true" id="type.1583841">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, AliasType*>, Pair&lt;String&lt;char>, AliasType*>&amp;, Pair&lt;String&lt;char>, AliasType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, AliasType*>, SelectFirst&lt;String&lt;char>, AliasType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <baseType ref="type.1583833"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583853">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, AliasType*>, Pair&lt;String&lt;char>, AliasType*>&amp;, Pair&lt;String&lt;char>, AliasType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, AliasType*>, SelectFirst&lt;String&lt;char>, AliasType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583833"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583834">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, AliasType*>, Pair&lt;String&lt;char>, AliasType*>&amp;, Pair&lt;String&lt;char>, AliasType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, AliasType*>, SelectFirst&lt;String&lt;char>, AliasType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <baseType ref="type.1583833"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583843" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, AliasType*>, const Pair&lt;String&lt;char>, AliasType*>&amp;, const Pair&lt;String&lt;char>, AliasType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, AliasType*>, SelectFirst&lt;String&lt;char>, AliasType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="1581182"/>
                <argumentType ref="type.1583819"/>
                <argumentType ref="type.1583826"/>
                <argumentType ref="type.1583842"/>
                <argumentType ref="type.1583828"/>
            </content>
        </type>
        <type derived="true" id="type.1583847">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, AliasType*>, const Pair&lt;String&lt;char>, AliasType*>&amp;, const Pair&lt;String&lt;char>, AliasType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, AliasType*>, SelectFirst&lt;String&lt;char>, AliasType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <baseType ref="type.1583843"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1585008">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, AliasType*>, const Pair&lt;String&lt;char>, AliasType*>&amp;, const Pair&lt;String&lt;char>, AliasType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, AliasType*>, SelectFirst&lt;String&lt;char>, AliasType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583843"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583844">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, AliasType*>, const Pair&lt;String&lt;char>, AliasType*>&amp;, const Pair&lt;String&lt;char>, AliasType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, AliasType*>, SelectFirst&lt;String&lt;char>, AliasType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <baseType ref="type.1583843"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583475" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, BidiClass*>, Pair&lt;String&lt;char>, BidiClass*>&amp;, Pair&lt;String&lt;char>, BidiClass*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiClass*>, SelectFirst&lt;String&lt;char>, BidiClass*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="1581182"/>
                <argumentType ref="type.1583461"/>
                <argumentType ref="type.1583474"/>
                <argumentType ref="type.1583462"/>
                <argumentType ref="type.1583470"/>
            </content>
        </type>
        <type derived="true" id="type.1583483">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, BidiClass*>, Pair&lt;String&lt;char>, BidiClass*>&amp;, Pair&lt;String&lt;char>, BidiClass*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiClass*>, SelectFirst&lt;String&lt;char>, BidiClass*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <baseType ref="type.1583475"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583495">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, BidiClass*>, Pair&lt;String&lt;char>, BidiClass*>&amp;, Pair&lt;String&lt;char>, BidiClass*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiClass*>, SelectFirst&lt;String&lt;char>, BidiClass*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583475"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583476">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, BidiClass*>, Pair&lt;String&lt;char>, BidiClass*>&amp;, Pair&lt;String&lt;char>, BidiClass*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiClass*>, SelectFirst&lt;String&lt;char>, BidiClass*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <baseType ref="type.1583475"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583485" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, BidiClass*>, const Pair&lt;String&lt;char>, BidiClass*>&amp;, const Pair&lt;String&lt;char>, BidiClass*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiClass*>, SelectFirst&lt;String&lt;char>, BidiClass*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="1581182"/>
                <argumentType ref="type.1583461"/>
                <argumentType ref="type.1583468"/>
                <argumentType ref="type.1583484"/>
                <argumentType ref="type.1583470"/>
            </content>
        </type>
        <type derived="true" id="type.1583489">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, BidiClass*>, const Pair&lt;String&lt;char>, BidiClass*>&amp;, const Pair&lt;String&lt;char>, BidiClass*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiClass*>, SelectFirst&lt;String&lt;char>, BidiClass*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <baseType ref="type.1583485"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584846">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, BidiClass*>, const Pair&lt;String&lt;char>, BidiClass*>&amp;, const Pair&lt;String&lt;char>, BidiClass*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiClass*>, SelectFirst&lt;String&lt;char>, BidiClass*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583485"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583486">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, BidiClass*>, const Pair&lt;String&lt;char>, BidiClass*>&amp;, const Pair&lt;String&lt;char>, BidiClass*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiClass*>, SelectFirst&lt;String&lt;char>, BidiClass*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <baseType ref="type.1583485"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583654" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>, Pair&lt;String&lt;char>, BidiPairedBracketType*>&amp;, Pair&lt;String&lt;char>, BidiPairedBracketType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiPairedBracketType*>, SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="1581182"/>
                <argumentType ref="type.1583640"/>
                <argumentType ref="type.1583653"/>
                <argumentType ref="type.1583641"/>
                <argumentType ref="type.1583649"/>
            </content>
        </type>
        <type derived="true" id="type.1583662">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>, Pair&lt;String&lt;char>, BidiPairedBracketType*>&amp;, Pair&lt;String&lt;char>, BidiPairedBracketType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiPairedBracketType*>, SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <baseType ref="type.1583654"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583674">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>, Pair&lt;String&lt;char>, BidiPairedBracketType*>&amp;, Pair&lt;String&lt;char>, BidiPairedBracketType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiPairedBracketType*>, SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583654"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583655">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>, Pair&lt;String&lt;char>, BidiPairedBracketType*>&amp;, Pair&lt;String&lt;char>, BidiPairedBracketType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiPairedBracketType*>, SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <baseType ref="type.1583654"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583664" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>, const Pair&lt;String&lt;char>, BidiPairedBracketType*>&amp;, const Pair&lt;String&lt;char>, BidiPairedBracketType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiPairedBracketType*>, SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="1581182"/>
                <argumentType ref="type.1583640"/>
                <argumentType ref="type.1583647"/>
                <argumentType ref="type.1583663"/>
                <argumentType ref="type.1583649"/>
            </content>
        </type>
        <type derived="true" id="type.1583668">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>, const Pair&lt;String&lt;char>, BidiPairedBracketType*>&amp;, const Pair&lt;String&lt;char>, BidiPairedBracketType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiPairedBracketType*>, SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <baseType ref="type.1583664"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584927">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>, const Pair&lt;String&lt;char>, BidiPairedBracketType*>&amp;, const Pair&lt;String&lt;char>, BidiPairedBracketType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiPairedBracketType*>, SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583664"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583665">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>, const Pair&lt;String&lt;char>, BidiPairedBracketType*>&amp;, const Pair&lt;String&lt;char>, BidiPairedBracketType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiPairedBracketType*>, SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <baseType ref="type.1583664"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582397" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, BinaryProperty*>, Pair&lt;String&lt;char>, BinaryProperty*>&amp;, Pair&lt;String&lt;char>, BinaryProperty*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BinaryProperty*>, SelectFirst&lt;String&lt;char>, BinaryProperty*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="1581182"/>
                <argumentType ref="type.1582383"/>
                <argumentType ref="type.1582396"/>
                <argumentType ref="type.1582384"/>
                <argumentType ref="type.1582392"/>
            </content>
        </type>
        <type derived="true" id="type.1582405">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, BinaryProperty*>, Pair&lt;String&lt;char>, BinaryProperty*>&amp;, Pair&lt;String&lt;char>, BinaryProperty*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BinaryProperty*>, SelectFirst&lt;String&lt;char>, BinaryProperty*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <baseType ref="type.1582397"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582417">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, BinaryProperty*>, Pair&lt;String&lt;char>, BinaryProperty*>&amp;, Pair&lt;String&lt;char>, BinaryProperty*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BinaryProperty*>, SelectFirst&lt;String&lt;char>, BinaryProperty*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582397"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582398">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, BinaryProperty*>, Pair&lt;String&lt;char>, BinaryProperty*>&amp;, Pair&lt;String&lt;char>, BinaryProperty*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BinaryProperty*>, SelectFirst&lt;String&lt;char>, BinaryProperty*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <baseType ref="type.1582397"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582407" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, BinaryProperty*>, const Pair&lt;String&lt;char>, BinaryProperty*>&amp;, const Pair&lt;String&lt;char>, BinaryProperty*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BinaryProperty*>, SelectFirst&lt;String&lt;char>, BinaryProperty*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="1581182"/>
                <argumentType ref="type.1582383"/>
                <argumentType ref="type.1582390"/>
                <argumentType ref="type.1582406"/>
                <argumentType ref="type.1582392"/>
            </content>
        </type>
        <type derived="true" id="type.1582411">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, BinaryProperty*>, const Pair&lt;String&lt;char>, BinaryProperty*>&amp;, const Pair&lt;String&lt;char>, BinaryProperty*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BinaryProperty*>, SelectFirst&lt;String&lt;char>, BinaryProperty*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <baseType ref="type.1582407"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584359">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, BinaryProperty*>, const Pair&lt;String&lt;char>, BinaryProperty*>&amp;, const Pair&lt;String&lt;char>, BinaryProperty*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BinaryProperty*>, SelectFirst&lt;String&lt;char>, BinaryProperty*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582407"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582408">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, BinaryProperty*>, const Pair&lt;String&lt;char>, BinaryProperty*>&amp;, const Pair&lt;String&lt;char>, BinaryProperty*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BinaryProperty*>, SelectFirst&lt;String&lt;char>, BinaryProperty*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <baseType ref="type.1582407"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582577" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, Block*>, Pair&lt;String&lt;char>, Block*>&amp;, Pair&lt;String&lt;char>, Block*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Block*>, SelectFirst&lt;String&lt;char>, Block*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="1581182"/>
                <argumentType ref="type.1582563"/>
                <argumentType ref="type.1582576"/>
                <argumentType ref="type.1582564"/>
                <argumentType ref="type.1582572"/>
            </content>
        </type>
        <type derived="true" id="type.1582585">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, Block*>, Pair&lt;String&lt;char>, Block*>&amp;, Pair&lt;String&lt;char>, Block*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Block*>, SelectFirst&lt;String&lt;char>, Block*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <baseType ref="type.1582577"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582597">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, Block*>, Pair&lt;String&lt;char>, Block*>&amp;, Pair&lt;String&lt;char>, Block*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Block*>, SelectFirst&lt;String&lt;char>, Block*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582577"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582578">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, Block*>, Pair&lt;String&lt;char>, Block*>&amp;, Pair&lt;String&lt;char>, Block*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Block*>, SelectFirst&lt;String&lt;char>, Block*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <baseType ref="type.1582577"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582587" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, Block*>, const Pair&lt;String&lt;char>, Block*>&amp;, const Pair&lt;String&lt;char>, Block*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Block*>, SelectFirst&lt;String&lt;char>, Block*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="1581182"/>
                <argumentType ref="type.1582563"/>
                <argumentType ref="type.1582570"/>
                <argumentType ref="type.1582586"/>
                <argumentType ref="type.1582572"/>
            </content>
        </type>
        <type derived="true" id="type.1582591">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, Block*>, const Pair&lt;String&lt;char>, Block*>&amp;, const Pair&lt;String&lt;char>, Block*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Block*>, SelectFirst&lt;String&lt;char>, Block*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <baseType ref="type.1582587"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584441">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, Block*>, const Pair&lt;String&lt;char>, Block*>&amp;, const Pair&lt;String&lt;char>, Block*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Block*>, SelectFirst&lt;String&lt;char>, Block*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582587"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582588">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, Block*>, const Pair&lt;String&lt;char>, Block*>&amp;, const Pair&lt;String&lt;char>, Block*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Block*>, SelectFirst&lt;String&lt;char>, Block*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <baseType ref="type.1582587"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582758" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, GeneralCategory*>, Pair&lt;String&lt;char>, GeneralCategory*>&amp;, Pair&lt;String&lt;char>, GeneralCategory*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, GeneralCategory*>, SelectFirst&lt;String&lt;char>, GeneralCategory*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="1581182"/>
                <argumentType ref="type.1582744"/>
                <argumentType ref="type.1582757"/>
                <argumentType ref="type.1582745"/>
                <argumentType ref="type.1582753"/>
            </content>
        </type>
        <type derived="true" id="type.1582766">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, GeneralCategory*>, Pair&lt;String&lt;char>, GeneralCategory*>&amp;, Pair&lt;String&lt;char>, GeneralCategory*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, GeneralCategory*>, SelectFirst&lt;String&lt;char>, GeneralCategory*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <baseType ref="type.1582758"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582778">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, GeneralCategory*>, Pair&lt;String&lt;char>, GeneralCategory*>&amp;, Pair&lt;String&lt;char>, GeneralCategory*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, GeneralCategory*>, SelectFirst&lt;String&lt;char>, GeneralCategory*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582758"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582759">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, GeneralCategory*>, Pair&lt;String&lt;char>, GeneralCategory*>&amp;, Pair&lt;String&lt;char>, GeneralCategory*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, GeneralCategory*>, SelectFirst&lt;String&lt;char>, GeneralCategory*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <baseType ref="type.1582758"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582768" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, GeneralCategory*>, const Pair&lt;String&lt;char>, GeneralCategory*>&amp;, const Pair&lt;String&lt;char>, GeneralCategory*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, GeneralCategory*>, SelectFirst&lt;String&lt;char>, GeneralCategory*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="1581182"/>
                <argumentType ref="type.1582744"/>
                <argumentType ref="type.1582751"/>
                <argumentType ref="type.1582767"/>
                <argumentType ref="type.1582753"/>
            </content>
        </type>
        <type derived="true" id="type.1582772">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, GeneralCategory*>, const Pair&lt;String&lt;char>, GeneralCategory*>&amp;, const Pair&lt;String&lt;char>, GeneralCategory*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, GeneralCategory*>, SelectFirst&lt;String&lt;char>, GeneralCategory*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <baseType ref="type.1582768"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584522">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, GeneralCategory*>, const Pair&lt;String&lt;char>, GeneralCategory*>&amp;, const Pair&lt;String&lt;char>, GeneralCategory*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, GeneralCategory*>, SelectFirst&lt;String&lt;char>, GeneralCategory*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582768"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582769">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, GeneralCategory*>, const Pair&lt;String&lt;char>, GeneralCategory*>&amp;, const Pair&lt;String&lt;char>, GeneralCategory*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, GeneralCategory*>, SelectFirst&lt;String&lt;char>, GeneralCategory*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <baseType ref="type.1582768"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583296" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, NumericType*>, Pair&lt;String&lt;char>, NumericType*>&amp;, Pair&lt;String&lt;char>, NumericType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, NumericType*>, SelectFirst&lt;String&lt;char>, NumericType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="1581182"/>
                <argumentType ref="type.1583282"/>
                <argumentType ref="type.1583295"/>
                <argumentType ref="type.1583283"/>
                <argumentType ref="type.1583291"/>
            </content>
        </type>
        <type derived="true" id="type.1583304">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, NumericType*>, Pair&lt;String&lt;char>, NumericType*>&amp;, Pair&lt;String&lt;char>, NumericType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, NumericType*>, SelectFirst&lt;String&lt;char>, NumericType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <baseType ref="type.1583296"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583316">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, NumericType*>, Pair&lt;String&lt;char>, NumericType*>&amp;, Pair&lt;String&lt;char>, NumericType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, NumericType*>, SelectFirst&lt;String&lt;char>, NumericType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583296"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583297">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, NumericType*>, Pair&lt;String&lt;char>, NumericType*>&amp;, Pair&lt;String&lt;char>, NumericType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, NumericType*>, SelectFirst&lt;String&lt;char>, NumericType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <baseType ref="type.1583296"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583306" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, NumericType*>, const Pair&lt;String&lt;char>, NumericType*>&amp;, const Pair&lt;String&lt;char>, NumericType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, NumericType*>, SelectFirst&lt;String&lt;char>, NumericType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="1581182"/>
                <argumentType ref="type.1583282"/>
                <argumentType ref="type.1583289"/>
                <argumentType ref="type.1583305"/>
                <argumentType ref="type.1583291"/>
            </content>
        </type>
        <type derived="true" id="type.1583310">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, NumericType*>, const Pair&lt;String&lt;char>, NumericType*>&amp;, const Pair&lt;String&lt;char>, NumericType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, NumericType*>, SelectFirst&lt;String&lt;char>, NumericType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <baseType ref="type.1583306"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584765">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, NumericType*>, const Pair&lt;String&lt;char>, NumericType*>&amp;, const Pair&lt;String&lt;char>, NumericType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, NumericType*>, SelectFirst&lt;String&lt;char>, NumericType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583306"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583307">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, NumericType*>, const Pair&lt;String&lt;char>, NumericType*>&amp;, const Pair&lt;String&lt;char>, NumericType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, NumericType*>, SelectFirst&lt;String&lt;char>, NumericType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <baseType ref="type.1583306"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583116" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, Script*>, Pair&lt;String&lt;char>, Script*>&amp;, Pair&lt;String&lt;char>, Script*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Script*>, SelectFirst&lt;String&lt;char>, Script*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="1581182"/>
                <argumentType ref="type.1583102"/>
                <argumentType ref="type.1583115"/>
                <argumentType ref="type.1583103"/>
                <argumentType ref="type.1583111"/>
            </content>
        </type>
        <type derived="true" id="type.1583124">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, Script*>, Pair&lt;String&lt;char>, Script*>&amp;, Pair&lt;String&lt;char>, Script*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Script*>, SelectFirst&lt;String&lt;char>, Script*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <baseType ref="type.1583116"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583136">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, Script*>, Pair&lt;String&lt;char>, Script*>&amp;, Pair&lt;String&lt;char>, Script*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Script*>, SelectFirst&lt;String&lt;char>, Script*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583116"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583117">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, Script*>, Pair&lt;String&lt;char>, Script*>&amp;, Pair&lt;String&lt;char>, Script*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Script*>, SelectFirst&lt;String&lt;char>, Script*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <baseType ref="type.1583116"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583126" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, Script*>, const Pair&lt;String&lt;char>, Script*>&amp;, const Pair&lt;String&lt;char>, Script*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Script*>, SelectFirst&lt;String&lt;char>, Script*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <primaryType ref="1581182"/>
                <argumentType ref="type.1583102"/>
                <argumentType ref="type.1583109"/>
                <argumentType ref="type.1583125"/>
                <argumentType ref="type.1583111"/>
            </content>
        </type>
        <type derived="true" id="type.1583130">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, Script*>, const Pair&lt;String&lt;char>, Script*>&amp;, const Pair&lt;String&lt;char>, Script*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Script*>, SelectFirst&lt;String&lt;char>, Script*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <baseType ref="type.1583126"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584684">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, Script*>, const Pair&lt;String&lt;char>, Script*>&amp;, const Pair&lt;String&lt;char>, Script*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Script*>, SelectFirst&lt;String&lt;char>, Script*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583126"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583127">
            <name>HashtableIterator&lt;Pair&lt;String&lt;char>, Script*>, const Pair&lt;String&lt;char>, Script*>&amp;, const Pair&lt;String&lt;char>, Script*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Script*>, SelectFirst&lt;String&lt;char>, Script*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <baseType ref="type.1583126"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582872" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.AgeId, Age*>, Pair&lt;System.Unicode.AgeId, Age*>&amp;, Pair&lt;System.Unicode.AgeId, Age*>*, Hashtable&lt;System.Unicode.AgeId, Pair&lt;System.Unicode.AgeId, Age*>, SelectFirst&lt;System.Unicode.AgeId, Age*>, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>>></name>
            <content>
                <primaryType ref="1581182"/>
                <argumentType ref="type.1582856"/>
                <argumentType ref="type.1582871"/>
                <argumentType ref="type.1582857"/>
                <argumentType ref="type.1582867"/>
            </content>
        </type>
        <type derived="true" id="type.1582880">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.AgeId, Age*>, Pair&lt;System.Unicode.AgeId, Age*>&amp;, Pair&lt;System.Unicode.AgeId, Age*>*, Hashtable&lt;System.Unicode.AgeId, Pair&lt;System.Unicode.AgeId, Age*>, SelectFirst&lt;System.Unicode.AgeId, Age*>, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>>>&amp;</name>
            <content>
                <baseType ref="type.1582872"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582892">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.AgeId, Age*>, Pair&lt;System.Unicode.AgeId, Age*>&amp;, Pair&lt;System.Unicode.AgeId, Age*>*, Hashtable&lt;System.Unicode.AgeId, Pair&lt;System.Unicode.AgeId, Age*>, SelectFirst&lt;System.Unicode.AgeId, Age*>, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582872"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582873">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.AgeId, Age*>, Pair&lt;System.Unicode.AgeId, Age*>&amp;, Pair&lt;System.Unicode.AgeId, Age*>*, Hashtable&lt;System.Unicode.AgeId, Pair&lt;System.Unicode.AgeId, Age*>, SelectFirst&lt;System.Unicode.AgeId, Age*>, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>>>*</name>
            <content>
                <baseType ref="type.1582872"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582882" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.AgeId, Age*>, const Pair&lt;System.Unicode.AgeId, Age*>&amp;, const Pair&lt;System.Unicode.AgeId, Age*>*, Hashtable&lt;System.Unicode.AgeId, Pair&lt;System.Unicode.AgeId, Age*>, SelectFirst&lt;System.Unicode.AgeId, Age*>, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>>></name>
            <content>
                <primaryType ref="1581182"/>
                <argumentType ref="type.1582856"/>
                <argumentType ref="type.1582865"/>
                <argumentType ref="type.1582881"/>
                <argumentType ref="type.1582867"/>
            </content>
        </type>
        <type derived="true" id="type.1582886">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.AgeId, Age*>, const Pair&lt;System.Unicode.AgeId, Age*>&amp;, const Pair&lt;System.Unicode.AgeId, Age*>*, Hashtable&lt;System.Unicode.AgeId, Pair&lt;System.Unicode.AgeId, Age*>, SelectFirst&lt;System.Unicode.AgeId, Age*>, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>>>&amp;</name>
            <content>
                <baseType ref="type.1582882"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584584">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.AgeId, Age*>, const Pair&lt;System.Unicode.AgeId, Age*>&amp;, const Pair&lt;System.Unicode.AgeId, Age*>*, Hashtable&lt;System.Unicode.AgeId, Pair&lt;System.Unicode.AgeId, Age*>, SelectFirst&lt;System.Unicode.AgeId, Age*>, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582882"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582883">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.AgeId, Age*>, const Pair&lt;System.Unicode.AgeId, Age*>&amp;, const Pair&lt;System.Unicode.AgeId, Age*>*, Hashtable&lt;System.Unicode.AgeId, Pair&lt;System.Unicode.AgeId, Age*>, SelectFirst&lt;System.Unicode.AgeId, Age*>, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>>>*</name>
            <content>
                <baseType ref="type.1582882"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583768" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>, Pair&lt;System.Unicode.AliasTypeId, AliasType*>&amp;, Pair&lt;System.Unicode.AliasTypeId, AliasType*>*, Hashtable&lt;System.Unicode.AliasTypeId, Pair&lt;System.Unicode.AliasTypeId, AliasType*>, SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>>></name>
            <content>
                <primaryType ref="1581182"/>
                <argumentType ref="type.1583752"/>
                <argumentType ref="type.1583767"/>
                <argumentType ref="type.1583753"/>
                <argumentType ref="type.1583763"/>
            </content>
        </type>
        <type derived="true" id="type.1583776">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>, Pair&lt;System.Unicode.AliasTypeId, AliasType*>&amp;, Pair&lt;System.Unicode.AliasTypeId, AliasType*>*, Hashtable&lt;System.Unicode.AliasTypeId, Pair&lt;System.Unicode.AliasTypeId, AliasType*>, SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>>>&amp;</name>
            <content>
                <baseType ref="type.1583768"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583788">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>, Pair&lt;System.Unicode.AliasTypeId, AliasType*>&amp;, Pair&lt;System.Unicode.AliasTypeId, AliasType*>*, Hashtable&lt;System.Unicode.AliasTypeId, Pair&lt;System.Unicode.AliasTypeId, AliasType*>, SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583768"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583769">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>, Pair&lt;System.Unicode.AliasTypeId, AliasType*>&amp;, Pair&lt;System.Unicode.AliasTypeId, AliasType*>*, Hashtable&lt;System.Unicode.AliasTypeId, Pair&lt;System.Unicode.AliasTypeId, AliasType*>, SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>>>*</name>
            <content>
                <baseType ref="type.1583768"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583778" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>, const Pair&lt;System.Unicode.AliasTypeId, AliasType*>&amp;, const Pair&lt;System.Unicode.AliasTypeId, AliasType*>*, Hashtable&lt;System.Unicode.AliasTypeId, Pair&lt;System.Unicode.AliasTypeId, AliasType*>, SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>>></name>
            <content>
                <primaryType ref="1581182"/>
                <argumentType ref="type.1583752"/>
                <argumentType ref="type.1583761"/>
                <argumentType ref="type.1583777"/>
                <argumentType ref="type.1583763"/>
            </content>
        </type>
        <type derived="true" id="type.1583782">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>, const Pair&lt;System.Unicode.AliasTypeId, AliasType*>&amp;, const Pair&lt;System.Unicode.AliasTypeId, AliasType*>*, Hashtable&lt;System.Unicode.AliasTypeId, Pair&lt;System.Unicode.AliasTypeId, AliasType*>, SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>>>&amp;</name>
            <content>
                <baseType ref="type.1583778"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584989">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>, const Pair&lt;System.Unicode.AliasTypeId, AliasType*>&amp;, const Pair&lt;System.Unicode.AliasTypeId, AliasType*>*, Hashtable&lt;System.Unicode.AliasTypeId, Pair&lt;System.Unicode.AliasTypeId, AliasType*>, SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583778"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583779">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>, const Pair&lt;System.Unicode.AliasTypeId, AliasType*>&amp;, const Pair&lt;System.Unicode.AliasTypeId, AliasType*>*, Hashtable&lt;System.Unicode.AliasTypeId, Pair&lt;System.Unicode.AliasTypeId, AliasType*>, SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>>>*</name>
            <content>
                <baseType ref="type.1583778"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583410" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>, Pair&lt;System.Unicode.BidiClassId, BidiClass*>&amp;, Pair&lt;System.Unicode.BidiClassId, BidiClass*>*, Hashtable&lt;System.Unicode.BidiClassId, Pair&lt;System.Unicode.BidiClassId, BidiClass*>, SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>>></name>
            <content>
                <primaryType ref="1581182"/>
                <argumentType ref="type.1583394"/>
                <argumentType ref="type.1583409"/>
                <argumentType ref="type.1583395"/>
                <argumentType ref="type.1583405"/>
            </content>
        </type>
        <type derived="true" id="type.1583418">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>, Pair&lt;System.Unicode.BidiClassId, BidiClass*>&amp;, Pair&lt;System.Unicode.BidiClassId, BidiClass*>*, Hashtable&lt;System.Unicode.BidiClassId, Pair&lt;System.Unicode.BidiClassId, BidiClass*>, SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>>>&amp;</name>
            <content>
                <baseType ref="type.1583410"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583430">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>, Pair&lt;System.Unicode.BidiClassId, BidiClass*>&amp;, Pair&lt;System.Unicode.BidiClassId, BidiClass*>*, Hashtable&lt;System.Unicode.BidiClassId, Pair&lt;System.Unicode.BidiClassId, BidiClass*>, SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583410"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583411">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>, Pair&lt;System.Unicode.BidiClassId, BidiClass*>&amp;, Pair&lt;System.Unicode.BidiClassId, BidiClass*>*, Hashtable&lt;System.Unicode.BidiClassId, Pair&lt;System.Unicode.BidiClassId, BidiClass*>, SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>>>*</name>
            <content>
                <baseType ref="type.1583410"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583420" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>, const Pair&lt;System.Unicode.BidiClassId, BidiClass*>&amp;, const Pair&lt;System.Unicode.BidiClassId, BidiClass*>*, Hashtable&lt;System.Unicode.BidiClassId, Pair&lt;System.Unicode.BidiClassId, BidiClass*>, SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>>></name>
            <content>
                <primaryType ref="1581182"/>
                <argumentType ref="type.1583394"/>
                <argumentType ref="type.1583403"/>
                <argumentType ref="type.1583419"/>
                <argumentType ref="type.1583405"/>
            </content>
        </type>
        <type derived="true" id="type.1583424">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>, const Pair&lt;System.Unicode.BidiClassId, BidiClass*>&amp;, const Pair&lt;System.Unicode.BidiClassId, BidiClass*>*, Hashtable&lt;System.Unicode.BidiClassId, Pair&lt;System.Unicode.BidiClassId, BidiClass*>, SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>>>&amp;</name>
            <content>
                <baseType ref="type.1583420"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584827">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>, const Pair&lt;System.Unicode.BidiClassId, BidiClass*>&amp;, const Pair&lt;System.Unicode.BidiClassId, BidiClass*>*, Hashtable&lt;System.Unicode.BidiClassId, Pair&lt;System.Unicode.BidiClassId, BidiClass*>, SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583420"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583421">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>, const Pair&lt;System.Unicode.BidiClassId, BidiClass*>&amp;, const Pair&lt;System.Unicode.BidiClassId, BidiClass*>*, Hashtable&lt;System.Unicode.BidiClassId, Pair&lt;System.Unicode.BidiClassId, BidiClass*>, SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>>>*</name>
            <content>
                <baseType ref="type.1583420"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583589" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>&amp;, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>*, Hashtable&lt;System.Unicode.BidiPairedBracketTypeId, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>>></name>
            <content>
                <primaryType ref="1581182"/>
                <argumentType ref="type.1583573"/>
                <argumentType ref="type.1583588"/>
                <argumentType ref="type.1583574"/>
                <argumentType ref="type.1583584"/>
            </content>
        </type>
        <type derived="true" id="type.1583597">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>&amp;, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>*, Hashtable&lt;System.Unicode.BidiPairedBracketTypeId, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>>>&amp;</name>
            <content>
                <baseType ref="type.1583589"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583609">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>&amp;, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>*, Hashtable&lt;System.Unicode.BidiPairedBracketTypeId, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583589"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583590">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>&amp;, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>*, Hashtable&lt;System.Unicode.BidiPairedBracketTypeId, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>>>*</name>
            <content>
                <baseType ref="type.1583589"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583599" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, const Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>&amp;, const Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>*, Hashtable&lt;System.Unicode.BidiPairedBracketTypeId, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>>></name>
            <content>
                <primaryType ref="1581182"/>
                <argumentType ref="type.1583573"/>
                <argumentType ref="type.1583582"/>
                <argumentType ref="type.1583598"/>
                <argumentType ref="type.1583584"/>
            </content>
        </type>
        <type derived="true" id="type.1583603">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, const Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>&amp;, const Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>*, Hashtable&lt;System.Unicode.BidiPairedBracketTypeId, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>>>&amp;</name>
            <content>
                <baseType ref="type.1583599"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584908">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, const Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>&amp;, const Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>*, Hashtable&lt;System.Unicode.BidiPairedBracketTypeId, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583599"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583600">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, const Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>&amp;, const Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>*, Hashtable&lt;System.Unicode.BidiPairedBracketTypeId, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>>>*</name>
            <content>
                <baseType ref="type.1583599"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582318" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>&amp;, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>*, Hashtable&lt;System.Unicode.BinaryPropertyId, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>>></name>
            <content>
                <primaryType ref="1581182"/>
                <argumentType ref="type.1582302"/>
                <argumentType ref="type.1582317"/>
                <argumentType ref="type.1582303"/>
                <argumentType ref="type.1582313"/>
            </content>
        </type>
        <type derived="true" id="type.1582326">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>&amp;, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>*, Hashtable&lt;System.Unicode.BinaryPropertyId, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>>>&amp;</name>
            <content>
                <baseType ref="type.1582318"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582338">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>&amp;, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>*, Hashtable&lt;System.Unicode.BinaryPropertyId, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582318"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582319">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>&amp;, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>*, Hashtable&lt;System.Unicode.BinaryPropertyId, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>>>*</name>
            <content>
                <baseType ref="type.1582318"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582328" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, const Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>&amp;, const Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>*, Hashtable&lt;System.Unicode.BinaryPropertyId, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>>></name>
            <content>
                <primaryType ref="1581182"/>
                <argumentType ref="type.1582302"/>
                <argumentType ref="type.1582311"/>
                <argumentType ref="type.1582327"/>
                <argumentType ref="type.1582313"/>
            </content>
        </type>
        <type derived="true" id="type.1582332">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, const Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>&amp;, const Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>*, Hashtable&lt;System.Unicode.BinaryPropertyId, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>>>&amp;</name>
            <content>
                <baseType ref="type.1582328"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584319">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, const Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>&amp;, const Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>*, Hashtable&lt;System.Unicode.BinaryPropertyId, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582328"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582329">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, const Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>&amp;, const Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>*, Hashtable&lt;System.Unicode.BinaryPropertyId, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>>>*</name>
            <content>
                <baseType ref="type.1582328"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582512" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BlockId, Block*>, Pair&lt;System.Unicode.BlockId, Block*>&amp;, Pair&lt;System.Unicode.BlockId, Block*>*, Hashtable&lt;System.Unicode.BlockId, Pair&lt;System.Unicode.BlockId, Block*>, SelectFirst&lt;System.Unicode.BlockId, Block*>, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>>></name>
            <content>
                <primaryType ref="1581182"/>
                <argumentType ref="type.1582496"/>
                <argumentType ref="type.1582511"/>
                <argumentType ref="type.1582497"/>
                <argumentType ref="type.1582507"/>
            </content>
        </type>
        <type derived="true" id="type.1582520">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BlockId, Block*>, Pair&lt;System.Unicode.BlockId, Block*>&amp;, Pair&lt;System.Unicode.BlockId, Block*>*, Hashtable&lt;System.Unicode.BlockId, Pair&lt;System.Unicode.BlockId, Block*>, SelectFirst&lt;System.Unicode.BlockId, Block*>, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>>>&amp;</name>
            <content>
                <baseType ref="type.1582512"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582532">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BlockId, Block*>, Pair&lt;System.Unicode.BlockId, Block*>&amp;, Pair&lt;System.Unicode.BlockId, Block*>*, Hashtable&lt;System.Unicode.BlockId, Pair&lt;System.Unicode.BlockId, Block*>, SelectFirst&lt;System.Unicode.BlockId, Block*>, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582512"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582513">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BlockId, Block*>, Pair&lt;System.Unicode.BlockId, Block*>&amp;, Pair&lt;System.Unicode.BlockId, Block*>*, Hashtable&lt;System.Unicode.BlockId, Pair&lt;System.Unicode.BlockId, Block*>, SelectFirst&lt;System.Unicode.BlockId, Block*>, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>>>*</name>
            <content>
                <baseType ref="type.1582512"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582522" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BlockId, Block*>, const Pair&lt;System.Unicode.BlockId, Block*>&amp;, const Pair&lt;System.Unicode.BlockId, Block*>*, Hashtable&lt;System.Unicode.BlockId, Pair&lt;System.Unicode.BlockId, Block*>, SelectFirst&lt;System.Unicode.BlockId, Block*>, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>>></name>
            <content>
                <primaryType ref="1581182"/>
                <argumentType ref="type.1582496"/>
                <argumentType ref="type.1582505"/>
                <argumentType ref="type.1582521"/>
                <argumentType ref="type.1582507"/>
            </content>
        </type>
        <type derived="true" id="type.1582526">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BlockId, Block*>, const Pair&lt;System.Unicode.BlockId, Block*>&amp;, const Pair&lt;System.Unicode.BlockId, Block*>*, Hashtable&lt;System.Unicode.BlockId, Pair&lt;System.Unicode.BlockId, Block*>, SelectFirst&lt;System.Unicode.BlockId, Block*>, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>>>&amp;</name>
            <content>
                <baseType ref="type.1582522"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584422">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BlockId, Block*>, const Pair&lt;System.Unicode.BlockId, Block*>&amp;, const Pair&lt;System.Unicode.BlockId, Block*>*, Hashtable&lt;System.Unicode.BlockId, Pair&lt;System.Unicode.BlockId, Block*>, SelectFirst&lt;System.Unicode.BlockId, Block*>, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582522"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582523">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.BlockId, Block*>, const Pair&lt;System.Unicode.BlockId, Block*>&amp;, const Pair&lt;System.Unicode.BlockId, Block*>*, Hashtable&lt;System.Unicode.BlockId, Pair&lt;System.Unicode.BlockId, Block*>, SelectFirst&lt;System.Unicode.BlockId, Block*>, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>>>*</name>
            <content>
                <baseType ref="type.1582522"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582693" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>&amp;, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>*, Hashtable&lt;System.Unicode.GeneralCategoryId, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>>></name>
            <content>
                <primaryType ref="1581182"/>
                <argumentType ref="type.1582677"/>
                <argumentType ref="type.1582692"/>
                <argumentType ref="type.1582678"/>
                <argumentType ref="type.1582688"/>
            </content>
        </type>
        <type derived="true" id="type.1582701">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>&amp;, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>*, Hashtable&lt;System.Unicode.GeneralCategoryId, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>>>&amp;</name>
            <content>
                <baseType ref="type.1582693"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582713">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>&amp;, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>*, Hashtable&lt;System.Unicode.GeneralCategoryId, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582693"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582694">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>&amp;, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>*, Hashtable&lt;System.Unicode.GeneralCategoryId, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>>>*</name>
            <content>
                <baseType ref="type.1582693"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582703" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, const Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>&amp;, const Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>*, Hashtable&lt;System.Unicode.GeneralCategoryId, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>>></name>
            <content>
                <primaryType ref="1581182"/>
                <argumentType ref="type.1582677"/>
                <argumentType ref="type.1582686"/>
                <argumentType ref="type.1582702"/>
                <argumentType ref="type.1582688"/>
            </content>
        </type>
        <type derived="true" id="type.1582707">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, const Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>&amp;, const Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>*, Hashtable&lt;System.Unicode.GeneralCategoryId, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>>>&amp;</name>
            <content>
                <baseType ref="type.1582703"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584503">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, const Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>&amp;, const Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>*, Hashtable&lt;System.Unicode.GeneralCategoryId, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582703"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582704">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, const Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>&amp;, const Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>*, Hashtable&lt;System.Unicode.GeneralCategoryId, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>>>*</name>
            <content>
                <baseType ref="type.1582703"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583231" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>, Pair&lt;System.Unicode.NumericTypeId, NumericType*>&amp;, Pair&lt;System.Unicode.NumericTypeId, NumericType*>*, Hashtable&lt;System.Unicode.NumericTypeId, Pair&lt;System.Unicode.NumericTypeId, NumericType*>, SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>>></name>
            <content>
                <primaryType ref="1581182"/>
                <argumentType ref="type.1583215"/>
                <argumentType ref="type.1583230"/>
                <argumentType ref="type.1583216"/>
                <argumentType ref="type.1583226"/>
            </content>
        </type>
        <type derived="true" id="type.1583239">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>, Pair&lt;System.Unicode.NumericTypeId, NumericType*>&amp;, Pair&lt;System.Unicode.NumericTypeId, NumericType*>*, Hashtable&lt;System.Unicode.NumericTypeId, Pair&lt;System.Unicode.NumericTypeId, NumericType*>, SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>>>&amp;</name>
            <content>
                <baseType ref="type.1583231"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583251">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>, Pair&lt;System.Unicode.NumericTypeId, NumericType*>&amp;, Pair&lt;System.Unicode.NumericTypeId, NumericType*>*, Hashtable&lt;System.Unicode.NumericTypeId, Pair&lt;System.Unicode.NumericTypeId, NumericType*>, SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583231"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583232">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>, Pair&lt;System.Unicode.NumericTypeId, NumericType*>&amp;, Pair&lt;System.Unicode.NumericTypeId, NumericType*>*, Hashtable&lt;System.Unicode.NumericTypeId, Pair&lt;System.Unicode.NumericTypeId, NumericType*>, SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>>>*</name>
            <content>
                <baseType ref="type.1583231"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583241" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>, const Pair&lt;System.Unicode.NumericTypeId, NumericType*>&amp;, const Pair&lt;System.Unicode.NumericTypeId, NumericType*>*, Hashtable&lt;System.Unicode.NumericTypeId, Pair&lt;System.Unicode.NumericTypeId, NumericType*>, SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>>></name>
            <content>
                <primaryType ref="1581182"/>
                <argumentType ref="type.1583215"/>
                <argumentType ref="type.1583224"/>
                <argumentType ref="type.1583240"/>
                <argumentType ref="type.1583226"/>
            </content>
        </type>
        <type derived="true" id="type.1583245">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>, const Pair&lt;System.Unicode.NumericTypeId, NumericType*>&amp;, const Pair&lt;System.Unicode.NumericTypeId, NumericType*>*, Hashtable&lt;System.Unicode.NumericTypeId, Pair&lt;System.Unicode.NumericTypeId, NumericType*>, SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>>>&amp;</name>
            <content>
                <baseType ref="type.1583241"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584746">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>, const Pair&lt;System.Unicode.NumericTypeId, NumericType*>&amp;, const Pair&lt;System.Unicode.NumericTypeId, NumericType*>*, Hashtable&lt;System.Unicode.NumericTypeId, Pair&lt;System.Unicode.NumericTypeId, NumericType*>, SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583241"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583242">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>, const Pair&lt;System.Unicode.NumericTypeId, NumericType*>&amp;, const Pair&lt;System.Unicode.NumericTypeId, NumericType*>*, Hashtable&lt;System.Unicode.NumericTypeId, Pair&lt;System.Unicode.NumericTypeId, NumericType*>, SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>>>*</name>
            <content>
                <baseType ref="type.1583241"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583051" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.ScriptId, Script*>, Pair&lt;System.Unicode.ScriptId, Script*>&amp;, Pair&lt;System.Unicode.ScriptId, Script*>*, Hashtable&lt;System.Unicode.ScriptId, Pair&lt;System.Unicode.ScriptId, Script*>, SelectFirst&lt;System.Unicode.ScriptId, Script*>, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>>></name>
            <content>
                <primaryType ref="1581182"/>
                <argumentType ref="type.1583035"/>
                <argumentType ref="type.1583050"/>
                <argumentType ref="type.1583036"/>
                <argumentType ref="type.1583046"/>
            </content>
        </type>
        <type derived="true" id="type.1583059">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.ScriptId, Script*>, Pair&lt;System.Unicode.ScriptId, Script*>&amp;, Pair&lt;System.Unicode.ScriptId, Script*>*, Hashtable&lt;System.Unicode.ScriptId, Pair&lt;System.Unicode.ScriptId, Script*>, SelectFirst&lt;System.Unicode.ScriptId, Script*>, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>>>&amp;</name>
            <content>
                <baseType ref="type.1583051"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583071">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.ScriptId, Script*>, Pair&lt;System.Unicode.ScriptId, Script*>&amp;, Pair&lt;System.Unicode.ScriptId, Script*>*, Hashtable&lt;System.Unicode.ScriptId, Pair&lt;System.Unicode.ScriptId, Script*>, SelectFirst&lt;System.Unicode.ScriptId, Script*>, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583051"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583052">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.ScriptId, Script*>, Pair&lt;System.Unicode.ScriptId, Script*>&amp;, Pair&lt;System.Unicode.ScriptId, Script*>*, Hashtable&lt;System.Unicode.ScriptId, Pair&lt;System.Unicode.ScriptId, Script*>, SelectFirst&lt;System.Unicode.ScriptId, Script*>, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>>>*</name>
            <content>
                <baseType ref="type.1583051"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583061" specialization="true">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.ScriptId, Script*>, const Pair&lt;System.Unicode.ScriptId, Script*>&amp;, const Pair&lt;System.Unicode.ScriptId, Script*>*, Hashtable&lt;System.Unicode.ScriptId, Pair&lt;System.Unicode.ScriptId, Script*>, SelectFirst&lt;System.Unicode.ScriptId, Script*>, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>>></name>
            <content>
                <primaryType ref="1581182"/>
                <argumentType ref="type.1583035"/>
                <argumentType ref="type.1583044"/>
                <argumentType ref="type.1583060"/>
                <argumentType ref="type.1583046"/>
            </content>
        </type>
        <type derived="true" id="type.1583065">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.ScriptId, Script*>, const Pair&lt;System.Unicode.ScriptId, Script*>&amp;, const Pair&lt;System.Unicode.ScriptId, Script*>*, Hashtable&lt;System.Unicode.ScriptId, Pair&lt;System.Unicode.ScriptId, Script*>, SelectFirst&lt;System.Unicode.ScriptId, Script*>, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>>>&amp;</name>
            <content>
                <baseType ref="type.1583061"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584665">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.ScriptId, Script*>, const Pair&lt;System.Unicode.ScriptId, Script*>&amp;, const Pair&lt;System.Unicode.ScriptId, Script*>*, Hashtable&lt;System.Unicode.ScriptId, Pair&lt;System.Unicode.ScriptId, Script*>, SelectFirst&lt;System.Unicode.ScriptId, Script*>, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583061"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583062">
            <name>HashtableIterator&lt;Pair&lt;System.Unicode.ScriptId, Script*>, const Pair&lt;System.Unicode.ScriptId, Script*>&amp;, const Pair&lt;System.Unicode.ScriptId, Script*>*, Hashtable&lt;System.Unicode.ScriptId, Pair&lt;System.Unicode.ScriptId, Script*>, SelectFirst&lt;System.Unicode.ScriptId, Script*>, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>>>*</name>
            <content>
                <baseType ref="type.1583061"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1581194" specialization="true">
            <name>HashtableIterator&lt;T, R, P, H></name>
            <content>
                <primaryType ref="1581182"/>
                <argumentType ref="1579943"/>
                <argumentType ref="1579944"/>
                <argumentType ref="1579945"/>
                <argumentType ref="1579946"/>
            </content>
        </type>
        <type id="1579938">
            <name>HashtableIterator&lt;T, R, P, H></name>
        </type>
        <type id="type.1581182" specialization="true">
            <name>HashtableIterator&lt;T, R, P, H></name>
            <content>
                <primaryType ref="1581182"/>
                <argumentType ref="1579939"/>
                <argumentType ref="1579940"/>
                <argumentType ref="1579941"/>
                <argumentType ref="1579942"/>
            </content>
        </type>
        <type id="type.1581194" specialization="true">
            <name>HashtableIterator&lt;T, R, P, H></name>
            <content>
                <primaryType ref="1581182"/>
                <argumentType ref="1579943"/>
                <argumentType ref="1579944"/>
                <argumentType ref="1579945"/>
                <argumentType ref="1579946"/>
            </content>
        </type>
        <type derived="true" id="type.1581205">
            <name>HashtableIterator&lt;T, R, P, H>&amp;</name>
            <content>
                <baseType ref="type.1581194"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.485">
            <name>HashtableIterator&lt;T, R, P, H>&amp;</name>
            <content>
                <baseType ref="type.1581182"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.475">
            <name>HashtableIterator&lt;T, R, P, H>*</name>
            <content>
                <baseType ref="type.1581182"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581195">
            <name>HashtableIterator&lt;T, R, P, H>*</name>
            <content>
                <baseType ref="type.1581194"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1581102" specialization="true">
            <name>HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>></name>
            <content>
                <primaryType ref="1581182"/>
                <argumentType ref="1579930"/>
                <argumentType ref="type.1581100"/>
                <argumentType ref="type.1581101"/>
                <argumentType ref="type.1581096"/>
            </content>
        </type>
        <type id="type.404" specialization="true">
            <name>HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>></name>
            <content>
                <primaryType ref="1581182"/>
                <argumentType ref="1579927"/>
                <argumentType ref="type.402"/>
                <argumentType ref="type.403"/>
                <argumentType ref="type.398"/>
            </content>
        </type>
        <type derived="true" id="type.1581110">
            <name>HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>&amp;</name>
            <content>
                <baseType ref="type.1581102"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.412">
            <name>HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>&amp;</name>
            <content>
                <baseType ref="type.404"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.424">
            <name>HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>&amp;&amp;</name>
            <content>
                <baseType ref="type.404"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581122">
            <name>HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1581102"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581103">
            <name>HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>*</name>
            <content>
                <baseType ref="type.1581102"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.405">
            <name>HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>*</name>
            <content>
                <baseType ref="type.404"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1581112" specialization="true">
            <name>HashtableIterator&lt;T, const T&amp;, const T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>></name>
            <content>
                <primaryType ref="1581182"/>
                <argumentType ref="1579930"/>
                <argumentType ref="type.1581094"/>
                <argumentType ref="type.1581111"/>
                <argumentType ref="type.1581096"/>
            </content>
        </type>
        <type id="type.414" specialization="true">
            <name>HashtableIterator&lt;T, const T&amp;, const T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>></name>
            <content>
                <primaryType ref="1581182"/>
                <argumentType ref="1579927"/>
                <argumentType ref="type.396"/>
                <argumentType ref="type.413"/>
                <argumentType ref="type.398"/>
            </content>
        </type>
        <type derived="true" id="type.1581116">
            <name>HashtableIterator&lt;T, const T&amp;, const T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>&amp;</name>
            <content>
                <baseType ref="type.1581112"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.418">
            <name>HashtableIterator&lt;T, const T&amp;, const T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>&amp;</name>
            <content>
                <baseType ref="type.414"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581113">
            <name>HashtableIterator&lt;T, const T&amp;, const T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>*</name>
            <content>
                <baseType ref="type.1581112"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.415">
            <name>HashtableIterator&lt;T, const T&amp;, const T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>*</name>
            <content>
                <baseType ref="type.414"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.493" specialization="true">
            <name>HashtableIterator&lt;ValueType, ValueType&amp;, ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>></name>
            <content>
                <primaryType ref="1581182"/>
                <argumentType ref="1579949"/>
                <argumentType ref="type.491"/>
                <argumentType ref="type.492"/>
                <argumentType ref="type.1581207"/>
            </content>
        </type>
        <type derived="true" id="type.502">
            <name>HashtableIterator&lt;ValueType, ValueType&amp;, ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>>&amp;</name>
            <content>
                <baseType ref="type.493"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.514">
            <name>HashtableIterator&lt;ValueType, ValueType&amp;, ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>>&amp;&amp;</name>
            <content>
                <baseType ref="type.493"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.494">
            <name>HashtableIterator&lt;ValueType, ValueType&amp;, ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>>*</name>
            <content>
                <baseType ref="type.493"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.504" specialization="true">
            <name>HashtableIterator&lt;ValueType, const ValueType&amp;, const ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>></name>
            <content>
                <primaryType ref="1581182"/>
                <argumentType ref="1579949"/>
                <argumentType ref="type.501"/>
                <argumentType ref="type.503"/>
                <argumentType ref="type.1581207"/>
            </content>
        </type>
        <type derived="true" id="type.508">
            <name>HashtableIterator&lt;ValueType, const ValueType&amp;, const ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>>&amp;</name>
            <content>
                <baseType ref="type.504"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.505">
            <name>HashtableIterator&lt;ValueType, const ValueType&amp;, const ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>>*</name>
            <content>
                <baseType ref="type.504"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1579933">
            <name>HashtablePrimes</name>
        </type>
        <type id="1579758">
            <name>I</name>
        </type>
        <type derived="true" id="type.1580214">
            <name>I&amp;&amp;</name>
            <content>
                <baseType ref="1579550"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580200">
            <name>I&amp;&amp;</name>
            <content>
                <baseType ref="1579524"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580214">
            <name>I&amp;&amp;</name>
            <content>
                <baseType ref="1579550"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580209">
            <name>I&amp;&amp;</name>
            <content>
                <baseType ref="1579548"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="1579630">
            <name>I1</name>
        </type>
        <type id="1579628">
            <name>I2</name>
        </type>
        <type id="1579814">
            <name>IOBuffer</name>
        </type>
        <type derived="true" id="type.1584160">
            <name>IOBuffer&amp;</name>
            <content>
                <baseType ref="1579814"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580489">
            <name>IOBuffer&amp;&amp;</name>
            <content>
                <baseType ref="1579814"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1579815">
            <name>IOBuffer*</name>
            <content>
                <baseType ref="1579814"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1581876" specialization="true">
            <name>Identity&lt;T></name>
            <content>
                <primaryType ref="1580687"/>
                <argumentType ref="1580052"/>
            </content>
        </type>
        <type id="type.391" specialization="true">
            <name>Identity&lt;T></name>
            <content>
                <primaryType ref="1580687"/>
                <argumentType ref="1579927"/>
            </content>
        </type>
        <type id="type.1581826" specialization="true">
            <name>Identity&lt;T></name>
            <content>
                <primaryType ref="1580687"/>
                <argumentType ref="1580050"/>
            </content>
        </type>
        <type id="type.1580687" specialization="true">
            <name>Identity&lt;T></name>
            <content>
                <primaryType ref="1580687"/>
                <argumentType ref="1579868"/>
            </content>
        </type>
        <type id="type.843" specialization="true">
            <name>Identity&lt;T></name>
            <content>
                <primaryType ref="1580687"/>
                <argumentType ref="1580048"/>
            </content>
        </type>
        <type id="1579867">
            <name>Identity&lt;T></name>
        </type>
        <type id="type.1580687" specialization="true">
            <name>Identity&lt;T></name>
            <content>
                <primaryType ref="1580687"/>
                <argumentType ref="1579868"/>
            </content>
        </type>
        <type id="type.1581089" specialization="true">
            <name>Identity&lt;T></name>
            <content>
                <primaryType ref="1580687"/>
                <argumentType ref="1579930"/>
            </content>
        </type>
        <type derived="true" id="type.1581882">
            <name>Identity&lt;T>*</name>
            <content>
                <baseType ref="type.1581876"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.849">
            <name>Identity&lt;T>*</name>
            <content>
                <baseType ref="type.843"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581832">
            <name>Identity&lt;T>*</name>
            <content>
                <baseType ref="type.1581826"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581882">
            <name>Identity&lt;T>*</name>
            <content>
                <baseType ref="type.1581876"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581095">
            <name>Identity&lt;T>*</name>
            <content>
                <baseType ref="type.1581089"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.397">
            <name>Identity&lt;T>*</name>
            <content>
                <baseType ref="type.391"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1579818">
            <name>InputFileStream</name>
        </type>
        <type derived="true" id="type.1580492">
            <name>InputFileStream&amp;&amp;</name>
            <content>
                <baseType ref="1579818"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1579819">
            <name>InputFileStream*</name>
            <content>
                <baseType ref="1579818"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1580056">
            <name>InputStream</name>
        </type>
        <type derived="true" id="type.1580461">
            <name>InputStream&amp;</name>
            <content>
                <baseType ref="1580056"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580490">
            <name>InputStream&amp;&amp;</name>
            <content>
                <baseType ref="1580056"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580057">
            <name>InputStream*</name>
            <content>
                <baseType ref="1580056"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1580076">
            <name>InputStringStream</name>
        </type>
        <type derived="true" id="type.1582273">
            <name>InputStringStream&amp;&amp;</name>
            <content>
                <baseType ref="1580076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580077">
            <name>InputStringStream*</name>
            <content>
                <baseType ref="1580076"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1580000">
            <name>InvalidPathException</name>
        </type>
        <type derived="true" id="type.1581621">
            <name>InvalidPathException&amp;&amp;</name>
            <content>
                <baseType ref="1580000"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580001">
            <name>InvalidPathException*</name>
            <content>
                <baseType ref="1580000"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1579922">
            <name>K</name>
        </type>
        <type derived="true" id="type.1580960">
            <name>K&amp;&amp;</name>
            <content>
                <baseType ref="1579922"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.314">
            <name>K&amp;&amp;</name>
            <content>
                <baseType ref="1579918"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="1579739">
            <name>Key</name>
        </type>
        <type derived="true" id="type.655">
            <name>Key&amp;&amp;</name>
            <content>
                <baseType ref="1579974"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="1579976">
            <name>KeyCompare</name>
        </type>
        <type id="1579950">
            <name>KeyOfValue</name>
        </type>
        <type id="1579948">
            <name>KeyType</name>
        </type>
        <type id="type.1580747" specialization="true">
            <name>Less&lt;T, U></name>
            <content>
                <primaryType ref="1580747"/>
                <argumentType ref="1579882"/>
                <argumentType ref="1579883"/>
            </content>
        </type>
        <type id="1579881">
            <name>Less&lt;T, U></name>
        </type>
        <type id="type.1580747" specialization="true">
            <name>Less&lt;T, U></name>
            <content>
                <primaryType ref="1580747"/>
                <argumentType ref="1579882"/>
                <argumentType ref="1579883"/>
            </content>
        </type>
        <type id="type.1580736" specialization="true">
            <name>Less&lt;T></name>
            <content>
                <primaryType ref="1580736"/>
                <argumentType ref="1579880"/>
            </content>
        </type>
        <type id="1579879">
            <name>Less&lt;T></name>
        </type>
        <type id="type.1580736" specialization="true">
            <name>Less&lt;T></name>
            <content>
                <primaryType ref="1580736"/>
                <argumentType ref="1579880"/>
            </content>
        </type>
        <type id="1579891">
            <name>LessOrEqualTo&lt;T, U></name>
        </type>
        <type id="type.1580789" specialization="true">
            <name>LessOrEqualTo&lt;T, U></name>
            <content>
                <primaryType ref="1580789"/>
                <argumentType ref="1579892"/>
                <argumentType ref="1579893"/>
            </content>
        </type>
        <type id="1579889">
            <name>LessOrEqualTo&lt;T></name>
        </type>
        <type id="type.1580778" specialization="true">
            <name>LessOrEqualTo&lt;T></name>
            <content>
                <primaryType ref="1580778"/>
                <argumentType ref="1579890"/>
            </content>
        </type>
        <type id="type.1581350" specialization="true">
            <name>LinkedList&lt;T></name>
            <content>
                <primaryType ref="1581326"/>
                <argumentType ref="1579964"/>
            </content>
        </type>
        <type id="1579962">
            <name>LinkedList&lt;T></name>
        </type>
        <type id="type.1581326" specialization="true">
            <name>LinkedList&lt;T></name>
            <content>
                <primaryType ref="1581326"/>
                <argumentType ref="1579963"/>
            </content>
        </type>
        <type id="type.549" specialization="true">
            <name>LinkedList&lt;T></name>
            <content>
                <primaryType ref="1581326"/>
                <argumentType ref="1579956"/>
            </content>
        </type>
        <type id="type.1581326" specialization="true">
            <name>LinkedList&lt;T></name>
            <content>
                <primaryType ref="1581326"/>
                <argumentType ref="1579963"/>
            </content>
        </type>
        <type id="type.1581374" specialization="true">
            <name>LinkedList&lt;T></name>
            <content>
                <primaryType ref="1581326"/>
                <argumentType ref="1579965"/>
            </content>
        </type>
        <type id="type.1581300" specialization="true">
            <name>LinkedList&lt;T></name>
            <content>
                <primaryType ref="1581326"/>
                <argumentType ref="1579959"/>
            </content>
        </type>
        <type derived="true" id="type.1581323">
            <name>LinkedList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.1581300"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.572">
            <name>LinkedList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.549"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581397">
            <name>LinkedList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.1581374"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.601">
            <name>LinkedList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.1581326"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581373">
            <name>LinkedList&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.1581350"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.579">
            <name>LinkedList&lt;T>*</name>
            <content>
                <baseType ref="type.1581326"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581301">
            <name>LinkedList&lt;T>*</name>
            <content>
                <baseType ref="type.1581300"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581375">
            <name>LinkedList&lt;T>*</name>
            <content>
                <baseType ref="type.1581374"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.550">
            <name>LinkedList&lt;T>*</name>
            <content>
                <baseType ref="type.549"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581351">
            <name>LinkedList&lt;T>*</name>
            <content>
                <baseType ref="type.1581350"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581375">
            <name>LinkedList&lt;T>*</name>
            <content>
                <baseType ref="type.1581374"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1581360" specialization="true">
            <name>LinkedListNode&lt;T></name>
            <content>
                <primaryType ref="1581261"/>
                <argumentType ref="1579964"/>
            </content>
        </type>
        <type id="type.1581261" specialization="true">
            <name>LinkedListNode&lt;T></name>
            <content>
                <primaryType ref="1581261"/>
                <argumentType ref="1579954"/>
            </content>
        </type>
        <type id="type.588" specialization="true">
            <name>LinkedListNode&lt;T></name>
            <content>
                <primaryType ref="1581261"/>
                <argumentType ref="1579963"/>
            </content>
        </type>
        <type id="type.1581310" specialization="true">
            <name>LinkedListNode&lt;T></name>
            <content>
                <primaryType ref="1581261"/>
                <argumentType ref="1579959"/>
            </content>
        </type>
        <type id="type.1581360" specialization="true">
            <name>LinkedListNode&lt;T></name>
            <content>
                <primaryType ref="1581261"/>
                <argumentType ref="1579964"/>
            </content>
        </type>
        <type id="type.1581384" specialization="true">
            <name>LinkedListNode&lt;T></name>
            <content>
                <primaryType ref="1581261"/>
                <argumentType ref="1579965"/>
            </content>
        </type>
        <type id="1579953">
            <name>LinkedListNode&lt;T></name>
        </type>
        <type id="type.559" specialization="true">
            <name>LinkedListNode&lt;T></name>
            <content>
                <primaryType ref="1581261"/>
                <argumentType ref="1579956"/>
            </content>
        </type>
        <type derived="true" id="type.589">
            <name>LinkedListNode&lt;T>*</name>
            <content>
                <baseType ref="type.588"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581385">
            <name>LinkedListNode&lt;T>*</name>
            <content>
                <baseType ref="type.1581384"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.541">
            <name>LinkedListNode&lt;T>*</name>
            <content>
                <baseType ref="type.1581261"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581361">
            <name>LinkedListNode&lt;T>*</name>
            <content>
                <baseType ref="type.1581360"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.560">
            <name>LinkedListNode&lt;T>*</name>
            <content>
                <baseType ref="type.559"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581311">
            <name>LinkedListNode&lt;T>*</name>
            <content>
                <baseType ref="type.1581310"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581385">
            <name>LinkedListNode&lt;T>*</name>
            <content>
                <baseType ref="type.1581384"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1579955">
            <name>LinkedListNodeIterator&lt;T, R, P></name>
        </type>
        <type id="type.1581267" specialization="true">
            <name>LinkedListNodeIterator&lt;T, R, P></name>
            <content>
                <primaryType ref="1581267"/>
                <argumentType ref="1579956"/>
                <argumentType ref="1579957"/>
                <argumentType ref="1579958"/>
            </content>
        </type>
        <type id="type.1581296" specialization="true">
            <name>LinkedListNodeIterator&lt;T, R, P></name>
            <content>
                <primaryType ref="1581267"/>
                <argumentType ref="1579959"/>
                <argumentType ref="1579960"/>
                <argumentType ref="1579961"/>
            </content>
        </type>
        <type id="type.1581267" specialization="true">
            <name>LinkedListNodeIterator&lt;T, R, P></name>
            <content>
                <primaryType ref="1581267"/>
                <argumentType ref="1579956"/>
                <argumentType ref="1579957"/>
                <argumentType ref="1579958"/>
            </content>
        </type>
        <type derived="true" id="type.1581324">
            <name>LinkedListNodeIterator&lt;T, R, P>&amp;</name>
            <content>
                <baseType ref="type.1581296"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.573">
            <name>LinkedListNodeIterator&lt;T, R, P>&amp;</name>
            <content>
                <baseType ref="type.1581267"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581324">
            <name>LinkedListNodeIterator&lt;T, R, P>&amp;</name>
            <content>
                <baseType ref="type.1581296"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581297">
            <name>LinkedListNodeIterator&lt;T, R, P>*</name>
            <content>
                <baseType ref="type.1581296"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.546">
            <name>LinkedListNodeIterator&lt;T, R, P>*</name>
            <content>
                <baseType ref="type.1581267"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1581380" specialization="true">
            <name>LinkedListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="1581267"/>
                <argumentType ref="1579965"/>
                <argumentType ref="type.1581378"/>
                <argumentType ref="type.1581379"/>
            </content>
        </type>
        <type id="type.1581306" specialization="true">
            <name>LinkedListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="1581267"/>
                <argumentType ref="1579959"/>
                <argumentType ref="type.1581304"/>
                <argumentType ref="type.1581305"/>
            </content>
        </type>
        <type id="type.1581356" specialization="true">
            <name>LinkedListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="1581267"/>
                <argumentType ref="1579964"/>
                <argumentType ref="type.1581354"/>
                <argumentType ref="type.1581355"/>
            </content>
        </type>
        <type id="type.1581306" specialization="true">
            <name>LinkedListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="1581267"/>
                <argumentType ref="1579959"/>
                <argumentType ref="type.1581304"/>
                <argumentType ref="type.1581305"/>
            </content>
        </type>
        <type id="type.555" specialization="true">
            <name>LinkedListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="1581267"/>
                <argumentType ref="1579956"/>
                <argumentType ref="type.553"/>
                <argumentType ref="type.554"/>
            </content>
        </type>
        <type id="type.584" specialization="true">
            <name>LinkedListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="1581267"/>
                <argumentType ref="1579963"/>
                <argumentType ref="type.582"/>
                <argumentType ref="type.583"/>
            </content>
        </type>
        <type derived="true" id="type.564">
            <name>LinkedListNodeIterator&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <baseType ref="type.555"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581315">
            <name>LinkedListNodeIterator&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <baseType ref="type.1581306"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581365">
            <name>LinkedListNodeIterator&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <baseType ref="type.1581356"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.593">
            <name>LinkedListNodeIterator&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <baseType ref="type.584"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581365">
            <name>LinkedListNodeIterator&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <baseType ref="type.1581356"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581389">
            <name>LinkedListNodeIterator&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <baseType ref="type.1581380"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.556">
            <name>LinkedListNodeIterator&lt;T, T&amp;, T*>*</name>
            <content>
                <baseType ref="type.555"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.585">
            <name>LinkedListNodeIterator&lt;T, T&amp;, T*>*</name>
            <content>
                <baseType ref="type.584"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581381">
            <name>LinkedListNodeIterator&lt;T, T&amp;, T*>*</name>
            <content>
                <baseType ref="type.1581380"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581307">
            <name>LinkedListNodeIterator&lt;T, T&amp;, T*>*</name>
            <content>
                <baseType ref="type.1581306"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581357">
            <name>LinkedListNodeIterator&lt;T, T&amp;, T*>*</name>
            <content>
                <baseType ref="type.1581356"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1581317" specialization="true">
            <name>LinkedListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="1581267"/>
                <argumentType ref="1579959"/>
                <argumentType ref="type.1581314"/>
                <argumentType ref="type.1581316"/>
            </content>
        </type>
        <type id="type.1581367" specialization="true">
            <name>LinkedListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="1581267"/>
                <argumentType ref="1579964"/>
                <argumentType ref="type.1581364"/>
                <argumentType ref="type.1581366"/>
            </content>
        </type>
        <type id="type.1581391" specialization="true">
            <name>LinkedListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="1581267"/>
                <argumentType ref="1579965"/>
                <argumentType ref="type.1581388"/>
                <argumentType ref="type.1581390"/>
            </content>
        </type>
        <type id="type.566" specialization="true">
            <name>LinkedListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="1581267"/>
                <argumentType ref="1579956"/>
                <argumentType ref="type.563"/>
                <argumentType ref="type.565"/>
            </content>
        </type>
        <type id="type.1581391" specialization="true">
            <name>LinkedListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="1581267"/>
                <argumentType ref="1579965"/>
                <argumentType ref="type.1581388"/>
                <argumentType ref="type.1581390"/>
            </content>
        </type>
        <type id="type.595" specialization="true">
            <name>LinkedListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="1581267"/>
                <argumentType ref="1579963"/>
                <argumentType ref="type.592"/>
                <argumentType ref="type.594"/>
            </content>
        </type>
        <type derived="true" id="type.1581321">
            <name>LinkedListNodeIterator&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <baseType ref="type.1581317"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581395">
            <name>LinkedListNodeIterator&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <baseType ref="type.1581391"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.599">
            <name>LinkedListNodeIterator&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <baseType ref="type.595"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581321">
            <name>LinkedListNodeIterator&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <baseType ref="type.1581317"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.570">
            <name>LinkedListNodeIterator&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <baseType ref="type.566"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581371">
            <name>LinkedListNodeIterator&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <baseType ref="type.1581367"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581318">
            <name>LinkedListNodeIterator&lt;T, const T&amp;, const T*>*</name>
            <content>
                <baseType ref="type.1581317"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581392">
            <name>LinkedListNodeIterator&lt;T, const T&amp;, const T*>*</name>
            <content>
                <baseType ref="type.1581391"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581368">
            <name>LinkedListNodeIterator&lt;T, const T&amp;, const T*>*</name>
            <content>
                <baseType ref="type.1581367"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.596">
            <name>LinkedListNodeIterator&lt;T, const T&amp;, const T*>*</name>
            <content>
                <baseType ref="type.595"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581318">
            <name>LinkedListNodeIterator&lt;T, const T&amp;, const T*>*</name>
            <content>
                <baseType ref="type.1581317"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.567">
            <name>LinkedListNodeIterator&lt;T, const T&amp;, const T*>*</name>
            <content>
                <baseType ref="type.566"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582991" specialization="true">
            <name>List&lt;Age*></name>
            <content>
                <primaryType ref="1581398"/>
                <argumentType ref="type.1580109"/>
            </content>
        </type>
        <type derived="true" id="type.1583012">
            <name>List&lt;Age*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582991"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582992">
            <name>List&lt;Age*>*</name>
            <content>
                <baseType ref="type.1582991"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583887" specialization="true">
            <name>List&lt;AliasType*></name>
            <content>
                <primaryType ref="1581398"/>
                <argumentType ref="type.1580158"/>
            </content>
        </type>
        <type derived="true" id="type.1583908">
            <name>List&lt;AliasType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583887"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583888">
            <name>List&lt;AliasType*>*</name>
            <content>
                <baseType ref="type.1583887"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583529" specialization="true">
            <name>List&lt;BidiClass*></name>
            <content>
                <primaryType ref="1581398"/>
                <argumentType ref="type.1580140"/>
            </content>
        </type>
        <type derived="true" id="type.1583550">
            <name>List&lt;BidiClass*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583529"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583530">
            <name>List&lt;BidiClass*>*</name>
            <content>
                <baseType ref="type.1583529"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583708" specialization="true">
            <name>List&lt;BidiPairedBracketType*></name>
            <content>
                <primaryType ref="1581398"/>
                <argumentType ref="type.1580149"/>
            </content>
        </type>
        <type derived="true" id="type.1583729">
            <name>List&lt;BidiPairedBracketType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583708"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583709">
            <name>List&lt;BidiPairedBracketType*>*</name>
            <content>
                <baseType ref="type.1583708"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582443" specialization="true">
            <name>List&lt;BinaryProperty*></name>
            <content>
                <primaryType ref="1581398"/>
                <argumentType ref="type.1580088"/>
            </content>
        </type>
        <type derived="true" id="type.1582464">
            <name>List&lt;BinaryProperty*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582443"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582444">
            <name>List&lt;BinaryProperty*>*</name>
            <content>
                <baseType ref="type.1582443"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582631" specialization="true">
            <name>List&lt;Block*></name>
            <content>
                <primaryType ref="1581398"/>
                <argumentType ref="type.1580095"/>
            </content>
        </type>
        <type derived="true" id="type.1582652">
            <name>List&lt;Block*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582631"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582632">
            <name>List&lt;Block*>*</name>
            <content>
                <baseType ref="type.1582631"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1580995" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*></name>
            <content>
                <primaryType ref="1581398"/>
                <argumentType ref="type.1580979"/>
            </content>
        </type>
        <type id="type.349" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*></name>
            <content>
                <primaryType ref="1581398"/>
                <argumentType ref="type.333"/>
            </content>
        </type>
        <type derived="true" id="type.1581018">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1580995"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.372">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.349"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580996">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>*</name>
            <content>
                <baseType ref="type.1580995"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.350">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>*</name>
            <content>
                <baseType ref="type.349"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580996">
            <name>List&lt;Bucket&lt;Pair&lt;K, T>>*>*</name>
            <content>
                <baseType ref="type.1580995"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582958" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*></name>
            <content>
                <primaryType ref="1581398"/>
                <argumentType ref="type.1582942"/>
            </content>
        </type>
        <type derived="true" id="type.1584625">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*>&amp;</name>
            <content>
                <baseType ref="type.1582958"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582981">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582958"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582959">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*>*</name>
            <content>
                <baseType ref="type.1582958"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583854" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*></name>
            <content>
                <primaryType ref="1581398"/>
                <argumentType ref="type.1583838"/>
            </content>
        </type>
        <type derived="true" id="type.1585030">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*>&amp;</name>
            <content>
                <baseType ref="type.1583854"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583877">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583854"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583855">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*>*</name>
            <content>
                <baseType ref="type.1583854"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583496" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*></name>
            <content>
                <primaryType ref="1581398"/>
                <argumentType ref="type.1583480"/>
            </content>
        </type>
        <type derived="true" id="type.1584868">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*>&amp;</name>
            <content>
                <baseType ref="type.1583496"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583519">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583496"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583497">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*>*</name>
            <content>
                <baseType ref="type.1583496"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583675" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*></name>
            <content>
                <primaryType ref="1581398"/>
                <argumentType ref="type.1583659"/>
            </content>
        </type>
        <type derived="true" id="type.1584949">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*>&amp;</name>
            <content>
                <baseType ref="type.1583675"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583698">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583675"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583676">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*>*</name>
            <content>
                <baseType ref="type.1583675"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582418" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*></name>
            <content>
                <primaryType ref="1581398"/>
                <argumentType ref="type.1582402"/>
            </content>
        </type>
        <type derived="true" id="type.1584382">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*>&amp;</name>
            <content>
                <baseType ref="type.1582418"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582441">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582418"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582419">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*>*</name>
            <content>
                <baseType ref="type.1582418"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582598" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*></name>
            <content>
                <primaryType ref="1581398"/>
                <argumentType ref="type.1582582"/>
            </content>
        </type>
        <type derived="true" id="type.1584463">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*>&amp;</name>
            <content>
                <baseType ref="type.1582598"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582621">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582598"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582599">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*>*</name>
            <content>
                <baseType ref="type.1582598"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582779" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*></name>
            <content>
                <primaryType ref="1581398"/>
                <argumentType ref="type.1582763"/>
            </content>
        </type>
        <type derived="true" id="type.1584544">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*>&amp;</name>
            <content>
                <baseType ref="type.1582779"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582802">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582779"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582780">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*>*</name>
            <content>
                <baseType ref="type.1582779"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583317" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*></name>
            <content>
                <primaryType ref="1581398"/>
                <argumentType ref="type.1583301"/>
            </content>
        </type>
        <type derived="true" id="type.1584787">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*>&amp;</name>
            <content>
                <baseType ref="type.1583317"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583340">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583317"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583318">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*>*</name>
            <content>
                <baseType ref="type.1583317"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583137" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*></name>
            <content>
                <primaryType ref="1581398"/>
                <argumentType ref="type.1583121"/>
            </content>
        </type>
        <type derived="true" id="type.1584706">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*>&amp;</name>
            <content>
                <baseType ref="type.1583137"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583160">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583137"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583138">
            <name>List&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*>*</name>
            <content>
                <baseType ref="type.1583137"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582893" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*></name>
            <content>
                <primaryType ref="1581398"/>
                <argumentType ref="type.1582877"/>
            </content>
        </type>
        <type derived="true" id="type.1584618">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*>&amp;</name>
            <content>
                <baseType ref="type.1582893"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582916">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582893"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582894">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*>*</name>
            <content>
                <baseType ref="type.1582893"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583789" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*></name>
            <content>
                <primaryType ref="1581398"/>
                <argumentType ref="type.1583773"/>
            </content>
        </type>
        <type derived="true" id="type.1585023">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*>&amp;</name>
            <content>
                <baseType ref="type.1583789"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583812">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583789"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583790">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*>*</name>
            <content>
                <baseType ref="type.1583789"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583431" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*></name>
            <content>
                <primaryType ref="1581398"/>
                <argumentType ref="type.1583415"/>
            </content>
        </type>
        <type derived="true" id="type.1584861">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*>&amp;</name>
            <content>
                <baseType ref="type.1583431"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583454">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583431"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583432">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*>*</name>
            <content>
                <baseType ref="type.1583431"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583610" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*></name>
            <content>
                <primaryType ref="1581398"/>
                <argumentType ref="type.1583594"/>
            </content>
        </type>
        <type derived="true" id="type.1584942">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*>&amp;</name>
            <content>
                <baseType ref="type.1583610"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583633">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583610"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583611">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*>*</name>
            <content>
                <baseType ref="type.1583610"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582339" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*></name>
            <content>
                <primaryType ref="1581398"/>
                <argumentType ref="type.1582323"/>
            </content>
        </type>
        <type derived="true" id="type.1584375">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*>&amp;</name>
            <content>
                <baseType ref="type.1582339"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582362">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582339"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582340">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*>*</name>
            <content>
                <baseType ref="type.1582339"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582533" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*></name>
            <content>
                <primaryType ref="1581398"/>
                <argumentType ref="type.1582517"/>
            </content>
        </type>
        <type derived="true" id="type.1584456">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*>&amp;</name>
            <content>
                <baseType ref="type.1582533"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582556">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582533"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582534">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*>*</name>
            <content>
                <baseType ref="type.1582533"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582714" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*></name>
            <content>
                <primaryType ref="1581398"/>
                <argumentType ref="type.1582698"/>
            </content>
        </type>
        <type derived="true" id="type.1584537">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*>&amp;</name>
            <content>
                <baseType ref="type.1582714"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582737">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582714"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582715">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*>*</name>
            <content>
                <baseType ref="type.1582714"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583252" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*></name>
            <content>
                <primaryType ref="1581398"/>
                <argumentType ref="type.1583236"/>
            </content>
        </type>
        <type derived="true" id="type.1584780">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*>&amp;</name>
            <content>
                <baseType ref="type.1583252"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583275">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583252"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583253">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*>*</name>
            <content>
                <baseType ref="type.1583252"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583072" specialization="true">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*></name>
            <content>
                <primaryType ref="1581398"/>
                <argumentType ref="type.1583056"/>
            </content>
        </type>
        <type derived="true" id="type.1584699">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*>&amp;</name>
            <content>
                <baseType ref="type.1583072"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583095">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583072"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583073">
            <name>List&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*>*</name>
            <content>
                <baseType ref="type.1583072"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1581123" specialization="true">
            <name>List&lt;Bucket&lt;T>*></name>
            <content>
                <primaryType ref="1581398"/>
                <argumentType ref="type.1581107"/>
            </content>
        </type>
        <type id="type.425" specialization="true">
            <name>List&lt;Bucket&lt;T>*></name>
            <content>
                <primaryType ref="1581398"/>
                <argumentType ref="type.409"/>
            </content>
        </type>
        <type id="type.1581123" specialization="true">
            <name>List&lt;Bucket&lt;T>*></name>
            <content>
                <primaryType ref="1581398"/>
                <argumentType ref="type.1581107"/>
            </content>
        </type>
        <type derived="true" id="type.448">
            <name>List&lt;Bucket&lt;T>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.425"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581146">
            <name>List&lt;Bucket&lt;T>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1581123"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581124">
            <name>List&lt;Bucket&lt;T>*>*</name>
            <content>
                <baseType ref="type.1581123"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.426">
            <name>List&lt;Bucket&lt;T>*>*</name>
            <content>
                <baseType ref="type.425"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.516" specialization="true">
            <name>List&lt;Bucket&lt;ValueType>*></name>
            <content>
                <primaryType ref="1581398"/>
                <argumentType ref="type.498"/>
            </content>
        </type>
        <type derived="true" id="type.539">
            <name>List&lt;Bucket&lt;ValueType>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.516"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.517">
            <name>List&lt;Bucket&lt;ValueType>*>*</name>
            <content>
                <baseType ref="type.516"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582812" specialization="true">
            <name>List&lt;GeneralCategory*></name>
            <content>
                <primaryType ref="1581398"/>
                <argumentType ref="type.1580102"/>
            </content>
        </type>
        <type derived="true" id="type.1582833">
            <name>List&lt;GeneralCategory*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582812"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582813">
            <name>List&lt;GeneralCategory*>*</name>
            <content>
                <baseType ref="type.1582812"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583342" specialization="true">
            <name>List&lt;NumericType*></name>
            <content>
                <primaryType ref="1581398"/>
                <argumentType ref="type.1580131"/>
            </content>
        </type>
        <type derived="true" id="type.1583363">
            <name>List&lt;NumericType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583342"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583343">
            <name>List&lt;NumericType*>*</name>
            <content>
                <baseType ref="type.1583342"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583170" specialization="true">
            <name>List&lt;Script*></name>
            <content>
                <primaryType ref="1581398"/>
                <argumentType ref="type.1580118"/>
            </content>
        </type>
        <type derived="true" id="type.1583191">
            <name>List&lt;Script*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583170"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583171">
            <name>List&lt;Script*>*</name>
            <content>
                <baseType ref="type.1583170"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582162" specialization="true">
            <name>List&lt;String&lt;CharT>></name>
            <content>
                <primaryType ref="1581398"/>
                <argumentType ref="type.1582137"/>
            </content>
        </type>
        <type id="type.1582207" specialization="true">
            <name>List&lt;String&lt;CharT>></name>
            <content>
                <primaryType ref="1581398"/>
                <argumentType ref="type.1582183"/>
            </content>
        </type>
        <type id="type.1582252" specialization="true">
            <name>List&lt;String&lt;CharT>></name>
            <content>
                <primaryType ref="1581398"/>
                <argumentType ref="type.1582227"/>
            </content>
        </type>
        <type id="type.1582207" specialization="true">
            <name>List&lt;String&lt;CharT>></name>
            <content>
                <primaryType ref="1581398"/>
                <argumentType ref="type.1582183"/>
            </content>
        </type>
        <type id="type.958" specialization="true">
            <name>List&lt;String&lt;CharT>></name>
            <content>
                <primaryType ref="1581398"/>
                <argumentType ref="type.1581957"/>
            </content>
        </type>
        <type id="type.1582027" specialization="true">
            <name>List&lt;String&lt;CharT>></name>
            <content>
                <primaryType ref="1581398"/>
                <argumentType ref="type.1582002"/>
            </content>
        </type>
        <type id="type.1582072" specialization="true">
            <name>List&lt;String&lt;CharT>></name>
            <content>
                <primaryType ref="1581398"/>
                <argumentType ref="type.1582047"/>
            </content>
        </type>
        <type id="type.1582117" specialization="true">
            <name>List&lt;String&lt;CharT>></name>
            <content>
                <primaryType ref="1581398"/>
                <argumentType ref="type.1582092"/>
            </content>
        </type>
        <type derived="true" id="type.1582226">
            <name>List&lt;String&lt;CharT>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582207"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582271">
            <name>List&lt;String&lt;CharT>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582252"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582181">
            <name>List&lt;String&lt;CharT>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582162"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582046">
            <name>List&lt;String&lt;CharT>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582027"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582136">
            <name>List&lt;String&lt;CharT>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582117"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.977">
            <name>List&lt;String&lt;CharT>>&amp;&amp;</name>
            <content>
                <baseType ref="type.958"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582181">
            <name>List&lt;String&lt;CharT>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582162"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582091">
            <name>List&lt;String&lt;CharT>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582072"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582163">
            <name>List&lt;String&lt;CharT>>*</name>
            <content>
                <baseType ref="type.1582162"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582208">
            <name>List&lt;String&lt;CharT>>*</name>
            <content>
                <baseType ref="type.1582207"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582073">
            <name>List&lt;String&lt;CharT>>*</name>
            <content>
                <baseType ref="type.1582072"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582253">
            <name>List&lt;String&lt;CharT>>*</name>
            <content>
                <baseType ref="type.1582252"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582028">
            <name>List&lt;String&lt;CharT>>*</name>
            <content>
                <baseType ref="type.1582027"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.959">
            <name>List&lt;String&lt;CharT>>*</name>
            <content>
                <baseType ref="type.958"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582118">
            <name>List&lt;String&lt;CharT>>*</name>
            <content>
                <baseType ref="type.1582117"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1580261" specialization="true">
            <name>List&lt;String&lt;char>></name>
            <content>
                <primaryType ref="1581398"/>
                <argumentType ref="type.1580238"/>
            </content>
        </type>
        <type derived="true" id="type.1580280">
            <name>List&lt;String&lt;char>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1580261"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580262">
            <name>List&lt;String&lt;char>>*</name>
            <content>
                <baseType ref="type.1580261"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1580386" specialization="true">
            <name>List&lt;String&lt;uchar>></name>
            <content>
                <primaryType ref="1581398"/>
                <argumentType ref="type.1580362"/>
            </content>
        </type>
        <type derived="true" id="type.1580405">
            <name>List&lt;String&lt;uchar>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1580386"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580387">
            <name>List&lt;String&lt;uchar>>*</name>
            <content>
                <baseType ref="type.1580386"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1580342" specialization="true">
            <name>List&lt;String&lt;wchar>></name>
            <content>
                <primaryType ref="1581398"/>
                <argumentType ref="type.1580318"/>
            </content>
        </type>
        <type derived="true" id="type.1580361">
            <name>List&lt;String&lt;wchar>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1580342"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580343">
            <name>List&lt;String&lt;wchar>>*</name>
            <content>
                <baseType ref="type.1580342"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1580282" specialization="true">
            <name>List&lt;System.Ascii.CharClass></name>
            <content>
                <primaryType ref="1581398"/>
                <argumentType ref="1579647"/>
            </content>
        </type>
        <type derived="true" id="type.1580304">
            <name>List&lt;System.Ascii.CharClass>&amp;&amp;</name>
            <content>
                <baseType ref="type.1580282"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580283">
            <name>List&lt;System.Ascii.CharClass>*</name>
            <content>
                <baseType ref="type.1580282"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583909" specialization="true">
            <name>List&lt;System.Unicode.Alias></name>
            <content>
                <primaryType ref="1581398"/>
                <argumentType ref="1580165"/>
            </content>
        </type>
        <type derived="true" id="type.1583930">
            <name>List&lt;System.Unicode.Alias>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583909"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583910">
            <name>List&lt;System.Unicode.Alias>*</name>
            <content>
                <baseType ref="type.1583909"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.912" specialization="true">
            <name>List&lt;T></name>
            <content>
                <primaryType ref="1581398"/>
                <argumentType ref="1580055"/>
            </content>
        </type>
        <type id="type.1581423" specialization="true">
            <name>List&lt;T></name>
            <content>
                <primaryType ref="1581398"/>
                <argumentType ref="1579968"/>
            </content>
        </type>
        <type id="1579966">
            <name>List&lt;T></name>
        </type>
        <type id="type.740" specialization="true">
            <name>List&lt;T></name>
            <content>
                <primaryType ref="1581398"/>
                <argumentType ref="1580004"/>
            </content>
        </type>
        <type id="type.1581448" specialization="true">
            <name>List&lt;T></name>
            <content>
                <primaryType ref="1581398"/>
                <argumentType ref="1579969"/>
            </content>
        </type>
        <type id="type.1581398" specialization="true">
            <name>List&lt;T></name>
            <content>
                <primaryType ref="1581398"/>
                <argumentType ref="1579967"/>
            </content>
        </type>
        <type id="type.1581448" specialization="true">
            <name>List&lt;T></name>
            <content>
                <primaryType ref="1581398"/>
                <argumentType ref="1579969"/>
            </content>
        </type>
        <type derived="true" id="type.1581471">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.1581448"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581446">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.1581423"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581471">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.1581448"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.933">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.912"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.762">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.740"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.632">
            <name>List&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.1581398"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581449">
            <name>List&lt;T>*</name>
            <content>
                <baseType ref="type.1581448"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581424">
            <name>List&lt;T>*</name>
            <content>
                <baseType ref="type.1581423"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.741">
            <name>List&lt;T>*</name>
            <content>
                <baseType ref="type.740"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581424">
            <name>List&lt;T>*</name>
            <content>
                <baseType ref="type.1581423"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.913">
            <name>List&lt;T>*</name>
            <content>
                <baseType ref="type.912"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.610">
            <name>List&lt;T>*</name>
            <content>
                <baseType ref="type.1581398"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583941" specialization="true">
            <name>List&lt;UniquePtr&lt;System.Unicode.CharacterInfo>></name>
            <content>
                <primaryType ref="1581398"/>
                <argumentType ref="type.1583933"/>
            </content>
        </type>
        <type derived="true" id="type.1583960">
            <name>List&lt;UniquePtr&lt;System.Unicode.CharacterInfo>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583941"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583942">
            <name>List&lt;UniquePtr&lt;System.Unicode.CharacterInfo>>*</name>
            <content>
                <baseType ref="type.1583941"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1584031" specialization="true">
            <name>List&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>></name>
            <content>
                <primaryType ref="1581398"/>
                <argumentType ref="type.1584022"/>
            </content>
        </type>
        <type derived="true" id="type.1584050">
            <name>List&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1584031"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584032">
            <name>List&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>>*</name>
            <content>
                <baseType ref="type.1584031"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583970" specialization="true">
            <name>List&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>></name>
            <content>
                <primaryType ref="1581398"/>
                <argumentType ref="type.1583962"/>
            </content>
        </type>
        <type derived="true" id="type.1583989">
            <name>List&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583970"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583971">
            <name>List&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>>*</name>
            <content>
                <baseType ref="type.1583970"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1584069" specialization="true">
            <name>List&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>></name>
            <content>
                <primaryType ref="1581398"/>
                <argumentType ref="type.1584060"/>
            </content>
        </type>
        <type derived="true" id="type.1584088">
            <name>List&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1584069"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584070">
            <name>List&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>>*</name>
            <content>
                <baseType ref="type.1584069"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1581539" specialization="true">
            <name>List&lt;byte></name>
            <content>
                <primaryType ref="1581398"/>
                <argumentType ref="type.1579452"/>
            </content>
        </type>
        <type derived="true" id="type.1584263">
            <name>List&lt;byte>&amp;</name>
            <content>
                <baseType ref="type.1581539"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581559">
            <name>List&lt;byte>&amp;&amp;</name>
            <content>
                <baseType ref="type.1581539"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581540">
            <name>List&lt;byte>*</name>
            <content>
                <baseType ref="type.1581539"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1581149" specialization="true">
            <name>List&lt;long></name>
            <content>
                <primaryType ref="1581398"/>
                <argumentType ref="type.1579457"/>
            </content>
        </type>
        <type derived="true" id="type.1581170">
            <name>List&lt;long>&amp;&amp;</name>
            <content>
                <baseType ref="type.1581149"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581150">
            <name>List&lt;long>*</name>
            <content>
                <baseType ref="type.1581149"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583990" specialization="true">
            <name>List&lt;uint></name>
            <content>
                <primaryType ref="1581398"/>
                <argumentType ref="type.1579456"/>
            </content>
        </type>
        <type derived="true" id="type.1584011">
            <name>List&lt;uint>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583990"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583991">
            <name>List&lt;uint>*</name>
            <content>
                <baseType ref="type.1583990"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1580412" specialization="true">
            <name>List&lt;ulong></name>
            <content>
                <primaryType ref="1581398"/>
                <argumentType ref="type.1579458"/>
            </content>
        </type>
        <type derived="true" id="type.1580434">
            <name>List&lt;ulong>&amp;</name>
            <content>
                <baseType ref="type.1580412"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580433">
            <name>List&lt;ulong>&amp;&amp;</name>
            <content>
                <baseType ref="type.1580412"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580413">
            <name>List&lt;ulong>*</name>
            <content>
                <baseType ref="type.1580412"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1579983">
            <name>LockGuard</name>
        </type>
        <type derived="true" id="type.1581566">
            <name>LockGuard&amp;&amp;</name>
            <content>
                <baseType ref="1579983"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1579984">
            <name>LockGuard*</name>
            <content>
                <baseType ref="1579983"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1579899">
            <name>LogicalAnd&lt;T></name>
        </type>
        <type id="type.1580820" specialization="true">
            <name>LogicalAnd&lt;T></name>
            <content>
                <primaryType ref="1580820"/>
                <argumentType ref="1579900"/>
            </content>
        </type>
        <type id="type.1580832" specialization="true">
            <name>LogicalNot&lt;T></name>
            <content>
                <primaryType ref="1580832"/>
                <argumentType ref="1579904"/>
            </content>
        </type>
        <type id="1579903">
            <name>LogicalNot&lt;T></name>
        </type>
        <type id="type.1580828" specialization="true">
            <name>LogicalOr&lt;T></name>
            <content>
                <primaryType ref="1580828"/>
                <argumentType ref="1579902"/>
            </content>
        </type>
        <type id="1579901">
            <name>LogicalOr&lt;T></name>
        </type>
        <type id="type.1581476" specialization="true">
            <name>Map&lt;Key, Value, KeyCompare></name>
            <content>
                <primaryType ref="1581476"/>
                <argumentType ref="1579974"/>
                <argumentType ref="1579975"/>
                <argumentType ref="1579976"/>
            </content>
        </type>
        <type id="1579973">
            <name>Map&lt;Key, Value, KeyCompare></name>
        </type>
        <type derived="true" id="type.648">
            <name>Map&lt;Key, Value, KeyCompare>*</name>
            <content>
                <baseType ref="type.1581476"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1579977">
            <name>MemoryByteStream</name>
        </type>
        <type derived="true" id="type.1581537">
            <name>MemoryByteStream&amp;&amp;</name>
            <content>
                <baseType ref="1579977"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1579978">
            <name>MemoryByteStream*</name>
            <content>
                <baseType ref="1579977"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1580638" specialization="true">
            <name>Minus&lt;T></name>
            <content>
                <primaryType ref="1580638"/>
                <argumentType ref="1579852"/>
            </content>
        </type>
        <type id="1579851">
            <name>Minus&lt;T></name>
        </type>
        <type id="type.1580645" specialization="true">
            <name>Multiplies&lt;T></name>
            <content>
                <primaryType ref="1580645"/>
                <argumentType ref="1579854"/>
            </content>
        </type>
        <type id="1579853">
            <name>Multiplies&lt;T></name>
        </type>
        <type id="type.1580652" specialization="true">
            <name>Multiplies&lt;T></name>
            <content>
                <primaryType ref="1580645"/>
                <argumentType ref="1579855"/>
            </content>
        </type>
        <type id="type.1580645" specialization="true">
            <name>Multiplies&lt;T></name>
            <content>
                <primaryType ref="1580645"/>
                <argumentType ref="1579854"/>
            </content>
        </type>
        <type derived="true" id="type.1580658">
            <name>Multiplies&lt;T>*</name>
            <content>
                <baseType ref="type.1580652"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1579981">
            <name>Mutex</name>
        </type>
        <type derived="true" id="type.1581562">
            <name>Mutex&amp;</name>
            <content>
                <baseType ref="1579981"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581563">
            <name>Mutex&amp;&amp;</name>
            <content>
                <baseType ref="1579981"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1579982">
            <name>Mutex*</name>
            <content>
                <baseType ref="1579981"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1580631" specialization="true">
            <name>Negate&lt;T></name>
            <content>
                <primaryType ref="1580631"/>
                <argumentType ref="1579850"/>
            </content>
        </type>
        <type id="1579849">
            <name>Negate&lt;T></name>
        </type>
        <type id="type.1580631" specialization="true">
            <name>Negate&lt;T></name>
            <content>
                <primaryType ref="1580631"/>
                <argumentType ref="1579850"/>
            </content>
        </type>
        <type id="type.1580726" specialization="true">
            <name>NotEqualTo&lt;T, U></name>
            <content>
                <primaryType ref="1580726"/>
                <argumentType ref="1579877"/>
                <argumentType ref="1579878"/>
            </content>
        </type>
        <type id="1579876">
            <name>NotEqualTo&lt;T, U></name>
        </type>
        <type id="type.1580726" specialization="true">
            <name>NotEqualTo&lt;T, U></name>
            <content>
                <primaryType ref="1580726"/>
                <argumentType ref="1579877"/>
                <argumentType ref="1579878"/>
            </content>
        </type>
        <type id="type.1580715" specialization="true">
            <name>NotEqualTo&lt;T></name>
            <content>
                <primaryType ref="1580715"/>
                <argumentType ref="1579875"/>
            </content>
        </type>
        <type id="1579874">
            <name>NotEqualTo&lt;T></name>
        </type>
        <type id="1580130">
            <name>NumericType</name>
        </type>
        <type derived="true" id="type.1580131">
            <name>NumericType*</name>
            <content>
                <baseType ref="1580130"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583277">
            <name>NumericType*&amp;</name>
            <content>
                <baseType ref="1580130"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583218">
            <name>NumericType*&amp;&amp;</name>
            <content>
                <baseType ref="1580130"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583354">
            <name>NumericType**</name>
            <content>
                <baseType ref="1580130"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584770">
            <name>NumericType**&amp;&amp;</name>
            <content>
                <baseType ref="1580130"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="1580129">
            <name>NumericTypeId</name>
        </type>
        <type derived="true" id="type.1584714">
            <name>NumericTypeId&amp;</name>
            <content>
                <baseType ref="1580129"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583194">
            <name>NumericTypeId&amp;&amp;</name>
            <content>
                <baseType ref="1580129"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583193">
            <name>NumericTypeId*</name>
            <content>
                <baseType ref="1580129"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1580134">
            <name>NumericTypeTable</name>
        </type>
        <type derived="true" id="type.1583195">
            <name>NumericTypeTable&amp;</name>
            <content>
                <baseType ref="1580134"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580137">
            <name>NumericTypeTable*</name>
            <content>
                <baseType ref="1580134"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1579579">
            <name>O</name>
        </type>
        <type id="1579575">
            <name>Op</name>
        </type>
        <type id="1579811">
            <name>OpenMode</name>
        </type>
        <type derived="true" id="type.1580484">
            <name>OpenMode&amp;&amp;</name>
            <content>
                <baseType ref="1579811"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580483">
            <name>OpenMode*</name>
            <content>
                <baseType ref="1579811"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1579659">
            <name>Origin</name>
        </type>
        <type derived="true" id="type.1580441">
            <name>Origin&amp;&amp;</name>
            <content>
                <baseType ref="1579659"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580440">
            <name>Origin*</name>
            <content>
                <baseType ref="1579659"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1579822">
            <name>OutputFileStream</name>
        </type>
        <type derived="true" id="type.1580496">
            <name>OutputFileStream&amp;&amp;</name>
            <content>
                <baseType ref="1579822"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1579823">
            <name>OutputFileStream*</name>
            <content>
                <baseType ref="1579822"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1580060">
            <name>OutputStream</name>
        </type>
        <type derived="true" id="type.1580452">
            <name>OutputStream&amp;</name>
            <content>
                <baseType ref="1580060"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580494">
            <name>OutputStream&amp;&amp;</name>
            <content>
                <baseType ref="1580060"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580061">
            <name>OutputStream*</name>
            <content>
                <baseType ref="1580060"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584173">
            <name>OutputStream*&amp;</name>
            <content>
                <baseType ref="1580060"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584172">
            <name>OutputStream*&amp;&amp;</name>
            <content>
                <baseType ref="1580060"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="1580080">
            <name>OutputStringStream</name>
        </type>
        <type derived="true" id="type.1582275">
            <name>OutputStringStream&amp;&amp;</name>
            <content>
                <baseType ref="1580080"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580081">
            <name>OutputStringStream*</name>
            <content>
                <baseType ref="1580080"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1580026">
            <name>P</name>
        </type>
        <type id="type.1580991" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool></name>
            <content>
                <primaryType ref="1581567"/>
                <argumentType ref="type.1580974"/>
                <argumentType ref="type.1579450"/>
            </content>
        </type>
        <type id="type.345" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool></name>
            <content>
                <primaryType ref="1581567"/>
                <argumentType ref="type.328"/>
                <argumentType ref="type.1579450"/>
            </content>
        </type>
        <type derived="true" id="type.1580992">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool>*</name>
            <content>
                <baseType ref="type.1580991"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.346">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>, bool>*</name>
            <content>
                <baseType ref="type.345"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582954" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;char>, Age*>, Pair&lt;String&lt;char>, Age*>&amp;, Pair&lt;String&lt;char>, Age*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Age*>, SelectFirst&lt;String&lt;char>, Age*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>, bool></name>
            <content>
                <primaryType ref="1581567"/>
                <argumentType ref="type.1582937"/>
                <argumentType ref="type.1579450"/>
            </content>
        </type>
        <type derived="true" id="type.1584622">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;char>, Age*>, Pair&lt;String&lt;char>, Age*>&amp;, Pair&lt;String&lt;char>, Age*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Age*>, SelectFirst&lt;String&lt;char>, Age*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582954"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582955">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;char>, Age*>, Pair&lt;String&lt;char>, Age*>&amp;, Pair&lt;String&lt;char>, Age*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Age*>, SelectFirst&lt;String&lt;char>, Age*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>, bool>*</name>
            <content>
                <baseType ref="type.1582954"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583850" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;char>, AliasType*>, Pair&lt;String&lt;char>, AliasType*>&amp;, Pair&lt;String&lt;char>, AliasType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, AliasType*>, SelectFirst&lt;String&lt;char>, AliasType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>, bool></name>
            <content>
                <primaryType ref="1581567"/>
                <argumentType ref="type.1583833"/>
                <argumentType ref="type.1579450"/>
            </content>
        </type>
        <type derived="true" id="type.1585027">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;char>, AliasType*>, Pair&lt;String&lt;char>, AliasType*>&amp;, Pair&lt;String&lt;char>, AliasType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, AliasType*>, SelectFirst&lt;String&lt;char>, AliasType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583850"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583851">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;char>, AliasType*>, Pair&lt;String&lt;char>, AliasType*>&amp;, Pair&lt;String&lt;char>, AliasType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, AliasType*>, SelectFirst&lt;String&lt;char>, AliasType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>, bool>*</name>
            <content>
                <baseType ref="type.1583850"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583492" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;char>, BidiClass*>, Pair&lt;String&lt;char>, BidiClass*>&amp;, Pair&lt;String&lt;char>, BidiClass*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiClass*>, SelectFirst&lt;String&lt;char>, BidiClass*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>, bool></name>
            <content>
                <primaryType ref="1581567"/>
                <argumentType ref="type.1583475"/>
                <argumentType ref="type.1579450"/>
            </content>
        </type>
        <type derived="true" id="type.1584865">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;char>, BidiClass*>, Pair&lt;String&lt;char>, BidiClass*>&amp;, Pair&lt;String&lt;char>, BidiClass*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiClass*>, SelectFirst&lt;String&lt;char>, BidiClass*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583492"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583493">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;char>, BidiClass*>, Pair&lt;String&lt;char>, BidiClass*>&amp;, Pair&lt;String&lt;char>, BidiClass*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiClass*>, SelectFirst&lt;String&lt;char>, BidiClass*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>, bool>*</name>
            <content>
                <baseType ref="type.1583492"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583671" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>, Pair&lt;String&lt;char>, BidiPairedBracketType*>&amp;, Pair&lt;String&lt;char>, BidiPairedBracketType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiPairedBracketType*>, SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>, bool></name>
            <content>
                <primaryType ref="1581567"/>
                <argumentType ref="type.1583654"/>
                <argumentType ref="type.1579450"/>
            </content>
        </type>
        <type derived="true" id="type.1584946">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>, Pair&lt;String&lt;char>, BidiPairedBracketType*>&amp;, Pair&lt;String&lt;char>, BidiPairedBracketType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiPairedBracketType*>, SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583671"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583672">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>, Pair&lt;String&lt;char>, BidiPairedBracketType*>&amp;, Pair&lt;String&lt;char>, BidiPairedBracketType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiPairedBracketType*>, SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>, bool>*</name>
            <content>
                <baseType ref="type.1583671"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582414" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;char>, BinaryProperty*>, Pair&lt;String&lt;char>, BinaryProperty*>&amp;, Pair&lt;String&lt;char>, BinaryProperty*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BinaryProperty*>, SelectFirst&lt;String&lt;char>, BinaryProperty*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>, bool></name>
            <content>
                <primaryType ref="1581567"/>
                <argumentType ref="type.1582397"/>
                <argumentType ref="type.1579450"/>
            </content>
        </type>
        <type derived="true" id="type.1584379">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;char>, BinaryProperty*>, Pair&lt;String&lt;char>, BinaryProperty*>&amp;, Pair&lt;String&lt;char>, BinaryProperty*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BinaryProperty*>, SelectFirst&lt;String&lt;char>, BinaryProperty*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582414"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582415">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;char>, BinaryProperty*>, Pair&lt;String&lt;char>, BinaryProperty*>&amp;, Pair&lt;String&lt;char>, BinaryProperty*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BinaryProperty*>, SelectFirst&lt;String&lt;char>, BinaryProperty*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>, bool>*</name>
            <content>
                <baseType ref="type.1582414"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582594" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;char>, Block*>, Pair&lt;String&lt;char>, Block*>&amp;, Pair&lt;String&lt;char>, Block*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Block*>, SelectFirst&lt;String&lt;char>, Block*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>, bool></name>
            <content>
                <primaryType ref="1581567"/>
                <argumentType ref="type.1582577"/>
                <argumentType ref="type.1579450"/>
            </content>
        </type>
        <type derived="true" id="type.1584460">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;char>, Block*>, Pair&lt;String&lt;char>, Block*>&amp;, Pair&lt;String&lt;char>, Block*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Block*>, SelectFirst&lt;String&lt;char>, Block*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582594"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582595">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;char>, Block*>, Pair&lt;String&lt;char>, Block*>&amp;, Pair&lt;String&lt;char>, Block*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Block*>, SelectFirst&lt;String&lt;char>, Block*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>, bool>*</name>
            <content>
                <baseType ref="type.1582594"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582775" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;char>, GeneralCategory*>, Pair&lt;String&lt;char>, GeneralCategory*>&amp;, Pair&lt;String&lt;char>, GeneralCategory*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, GeneralCategory*>, SelectFirst&lt;String&lt;char>, GeneralCategory*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>, bool></name>
            <content>
                <primaryType ref="1581567"/>
                <argumentType ref="type.1582758"/>
                <argumentType ref="type.1579450"/>
            </content>
        </type>
        <type derived="true" id="type.1584541">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;char>, GeneralCategory*>, Pair&lt;String&lt;char>, GeneralCategory*>&amp;, Pair&lt;String&lt;char>, GeneralCategory*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, GeneralCategory*>, SelectFirst&lt;String&lt;char>, GeneralCategory*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582775"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582776">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;char>, GeneralCategory*>, Pair&lt;String&lt;char>, GeneralCategory*>&amp;, Pair&lt;String&lt;char>, GeneralCategory*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, GeneralCategory*>, SelectFirst&lt;String&lt;char>, GeneralCategory*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>, bool>*</name>
            <content>
                <baseType ref="type.1582775"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583313" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;char>, NumericType*>, Pair&lt;String&lt;char>, NumericType*>&amp;, Pair&lt;String&lt;char>, NumericType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, NumericType*>, SelectFirst&lt;String&lt;char>, NumericType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>, bool></name>
            <content>
                <primaryType ref="1581567"/>
                <argumentType ref="type.1583296"/>
                <argumentType ref="type.1579450"/>
            </content>
        </type>
        <type derived="true" id="type.1584784">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;char>, NumericType*>, Pair&lt;String&lt;char>, NumericType*>&amp;, Pair&lt;String&lt;char>, NumericType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, NumericType*>, SelectFirst&lt;String&lt;char>, NumericType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583313"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583314">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;char>, NumericType*>, Pair&lt;String&lt;char>, NumericType*>&amp;, Pair&lt;String&lt;char>, NumericType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, NumericType*>, SelectFirst&lt;String&lt;char>, NumericType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>, bool>*</name>
            <content>
                <baseType ref="type.1583313"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583133" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;char>, Script*>, Pair&lt;String&lt;char>, Script*>&amp;, Pair&lt;String&lt;char>, Script*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Script*>, SelectFirst&lt;String&lt;char>, Script*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>, bool></name>
            <content>
                <primaryType ref="1581567"/>
                <argumentType ref="type.1583116"/>
                <argumentType ref="type.1579450"/>
            </content>
        </type>
        <type derived="true" id="type.1584703">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;char>, Script*>, Pair&lt;String&lt;char>, Script*>&amp;, Pair&lt;String&lt;char>, Script*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Script*>, SelectFirst&lt;String&lt;char>, Script*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583133"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583134">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;String&lt;char>, Script*>, Pair&lt;String&lt;char>, Script*>&amp;, Pair&lt;String&lt;char>, Script*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Script*>, SelectFirst&lt;String&lt;char>, Script*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>, bool>*</name>
            <content>
                <baseType ref="type.1583133"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582889" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;System.Unicode.AgeId, Age*>, Pair&lt;System.Unicode.AgeId, Age*>&amp;, Pair&lt;System.Unicode.AgeId, Age*>*, Hashtable&lt;System.Unicode.AgeId, Pair&lt;System.Unicode.AgeId, Age*>, SelectFirst&lt;System.Unicode.AgeId, Age*>, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>>>, bool></name>
            <content>
                <primaryType ref="1581567"/>
                <argumentType ref="type.1582872"/>
                <argumentType ref="type.1579450"/>
            </content>
        </type>
        <type derived="true" id="type.1584615">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;System.Unicode.AgeId, Age*>, Pair&lt;System.Unicode.AgeId, Age*>&amp;, Pair&lt;System.Unicode.AgeId, Age*>*, Hashtable&lt;System.Unicode.AgeId, Pair&lt;System.Unicode.AgeId, Age*>, SelectFirst&lt;System.Unicode.AgeId, Age*>, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>>>, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582889"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582890">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;System.Unicode.AgeId, Age*>, Pair&lt;System.Unicode.AgeId, Age*>&amp;, Pair&lt;System.Unicode.AgeId, Age*>*, Hashtable&lt;System.Unicode.AgeId, Pair&lt;System.Unicode.AgeId, Age*>, SelectFirst&lt;System.Unicode.AgeId, Age*>, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>>>, bool>*</name>
            <content>
                <baseType ref="type.1582889"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583785" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>, Pair&lt;System.Unicode.AliasTypeId, AliasType*>&amp;, Pair&lt;System.Unicode.AliasTypeId, AliasType*>*, Hashtable&lt;System.Unicode.AliasTypeId, Pair&lt;System.Unicode.AliasTypeId, AliasType*>, SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>>>, bool></name>
            <content>
                <primaryType ref="1581567"/>
                <argumentType ref="type.1583768"/>
                <argumentType ref="type.1579450"/>
            </content>
        </type>
        <type derived="true" id="type.1585020">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>, Pair&lt;System.Unicode.AliasTypeId, AliasType*>&amp;, Pair&lt;System.Unicode.AliasTypeId, AliasType*>*, Hashtable&lt;System.Unicode.AliasTypeId, Pair&lt;System.Unicode.AliasTypeId, AliasType*>, SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>>>, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583785"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583786">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>, Pair&lt;System.Unicode.AliasTypeId, AliasType*>&amp;, Pair&lt;System.Unicode.AliasTypeId, AliasType*>*, Hashtable&lt;System.Unicode.AliasTypeId, Pair&lt;System.Unicode.AliasTypeId, AliasType*>, SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>>>, bool>*</name>
            <content>
                <baseType ref="type.1583785"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583427" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>, Pair&lt;System.Unicode.BidiClassId, BidiClass*>&amp;, Pair&lt;System.Unicode.BidiClassId, BidiClass*>*, Hashtable&lt;System.Unicode.BidiClassId, Pair&lt;System.Unicode.BidiClassId, BidiClass*>, SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>>>, bool></name>
            <content>
                <primaryType ref="1581567"/>
                <argumentType ref="type.1583410"/>
                <argumentType ref="type.1579450"/>
            </content>
        </type>
        <type derived="true" id="type.1584858">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>, Pair&lt;System.Unicode.BidiClassId, BidiClass*>&amp;, Pair&lt;System.Unicode.BidiClassId, BidiClass*>*, Hashtable&lt;System.Unicode.BidiClassId, Pair&lt;System.Unicode.BidiClassId, BidiClass*>, SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>>>, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583427"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583428">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>, Pair&lt;System.Unicode.BidiClassId, BidiClass*>&amp;, Pair&lt;System.Unicode.BidiClassId, BidiClass*>*, Hashtable&lt;System.Unicode.BidiClassId, Pair&lt;System.Unicode.BidiClassId, BidiClass*>, SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>>>, bool>*</name>
            <content>
                <baseType ref="type.1583427"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583606" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>&amp;, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>*, Hashtable&lt;System.Unicode.BidiPairedBracketTypeId, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>>>, bool></name>
            <content>
                <primaryType ref="1581567"/>
                <argumentType ref="type.1583589"/>
                <argumentType ref="type.1579450"/>
            </content>
        </type>
        <type derived="true" id="type.1584939">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>&amp;, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>*, Hashtable&lt;System.Unicode.BidiPairedBracketTypeId, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>>>, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583606"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583607">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>&amp;, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>*, Hashtable&lt;System.Unicode.BidiPairedBracketTypeId, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>>>, bool>*</name>
            <content>
                <baseType ref="type.1583606"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582335" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>&amp;, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>*, Hashtable&lt;System.Unicode.BinaryPropertyId, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>>>, bool></name>
            <content>
                <primaryType ref="1581567"/>
                <argumentType ref="type.1582318"/>
                <argumentType ref="type.1579450"/>
            </content>
        </type>
        <type derived="true" id="type.1584372">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>&amp;, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>*, Hashtable&lt;System.Unicode.BinaryPropertyId, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>>>, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582335"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582336">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>&amp;, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>*, Hashtable&lt;System.Unicode.BinaryPropertyId, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>>>, bool>*</name>
            <content>
                <baseType ref="type.1582335"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582529" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;System.Unicode.BlockId, Block*>, Pair&lt;System.Unicode.BlockId, Block*>&amp;, Pair&lt;System.Unicode.BlockId, Block*>*, Hashtable&lt;System.Unicode.BlockId, Pair&lt;System.Unicode.BlockId, Block*>, SelectFirst&lt;System.Unicode.BlockId, Block*>, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>>>, bool></name>
            <content>
                <primaryType ref="1581567"/>
                <argumentType ref="type.1582512"/>
                <argumentType ref="type.1579450"/>
            </content>
        </type>
        <type derived="true" id="type.1584453">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;System.Unicode.BlockId, Block*>, Pair&lt;System.Unicode.BlockId, Block*>&amp;, Pair&lt;System.Unicode.BlockId, Block*>*, Hashtable&lt;System.Unicode.BlockId, Pair&lt;System.Unicode.BlockId, Block*>, SelectFirst&lt;System.Unicode.BlockId, Block*>, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>>>, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582529"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582530">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;System.Unicode.BlockId, Block*>, Pair&lt;System.Unicode.BlockId, Block*>&amp;, Pair&lt;System.Unicode.BlockId, Block*>*, Hashtable&lt;System.Unicode.BlockId, Pair&lt;System.Unicode.BlockId, Block*>, SelectFirst&lt;System.Unicode.BlockId, Block*>, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>>>, bool>*</name>
            <content>
                <baseType ref="type.1582529"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582710" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>&amp;, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>*, Hashtable&lt;System.Unicode.GeneralCategoryId, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>>>, bool></name>
            <content>
                <primaryType ref="1581567"/>
                <argumentType ref="type.1582693"/>
                <argumentType ref="type.1579450"/>
            </content>
        </type>
        <type derived="true" id="type.1584534">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>&amp;, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>*, Hashtable&lt;System.Unicode.GeneralCategoryId, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>>>, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582710"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582711">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>&amp;, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>*, Hashtable&lt;System.Unicode.GeneralCategoryId, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>>>, bool>*</name>
            <content>
                <baseType ref="type.1582710"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583248" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>, Pair&lt;System.Unicode.NumericTypeId, NumericType*>&amp;, Pair&lt;System.Unicode.NumericTypeId, NumericType*>*, Hashtable&lt;System.Unicode.NumericTypeId, Pair&lt;System.Unicode.NumericTypeId, NumericType*>, SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>>>, bool></name>
            <content>
                <primaryType ref="1581567"/>
                <argumentType ref="type.1583231"/>
                <argumentType ref="type.1579450"/>
            </content>
        </type>
        <type derived="true" id="type.1584777">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>, Pair&lt;System.Unicode.NumericTypeId, NumericType*>&amp;, Pair&lt;System.Unicode.NumericTypeId, NumericType*>*, Hashtable&lt;System.Unicode.NumericTypeId, Pair&lt;System.Unicode.NumericTypeId, NumericType*>, SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>>>, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583248"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583249">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>, Pair&lt;System.Unicode.NumericTypeId, NumericType*>&amp;, Pair&lt;System.Unicode.NumericTypeId, NumericType*>*, Hashtable&lt;System.Unicode.NumericTypeId, Pair&lt;System.Unicode.NumericTypeId, NumericType*>, SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>>>, bool>*</name>
            <content>
                <baseType ref="type.1583248"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583068" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;System.Unicode.ScriptId, Script*>, Pair&lt;System.Unicode.ScriptId, Script*>&amp;, Pair&lt;System.Unicode.ScriptId, Script*>*, Hashtable&lt;System.Unicode.ScriptId, Pair&lt;System.Unicode.ScriptId, Script*>, SelectFirst&lt;System.Unicode.ScriptId, Script*>, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>>>, bool></name>
            <content>
                <primaryType ref="1581567"/>
                <argumentType ref="type.1583051"/>
                <argumentType ref="type.1579450"/>
            </content>
        </type>
        <type derived="true" id="type.1584696">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;System.Unicode.ScriptId, Script*>, Pair&lt;System.Unicode.ScriptId, Script*>&amp;, Pair&lt;System.Unicode.ScriptId, Script*>*, Hashtable&lt;System.Unicode.ScriptId, Pair&lt;System.Unicode.ScriptId, Script*>, SelectFirst&lt;System.Unicode.ScriptId, Script*>, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>>>, bool>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583068"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583069">
            <name>Pair&lt;HashtableIterator&lt;Pair&lt;System.Unicode.ScriptId, Script*>, Pair&lt;System.Unicode.ScriptId, Script*>&amp;, Pair&lt;System.Unicode.ScriptId, Script*>*, Hashtable&lt;System.Unicode.ScriptId, Pair&lt;System.Unicode.ScriptId, Script*>, SelectFirst&lt;System.Unicode.ScriptId, Script*>, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>>>, bool>*</name>
            <content>
                <baseType ref="type.1583068"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.421" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>, bool></name>
            <content>
                <primaryType ref="1581567"/>
                <argumentType ref="type.404"/>
                <argumentType ref="type.1579450"/>
            </content>
        </type>
        <type id="type.1581119" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>, bool></name>
            <content>
                <primaryType ref="1581567"/>
                <argumentType ref="type.1581102"/>
                <argumentType ref="type.1579450"/>
            </content>
        </type>
        <type derived="true" id="type.422">
            <name>Pair&lt;HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>, bool>*</name>
            <content>
                <baseType ref="type.421"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581120">
            <name>Pair&lt;HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>, bool>*</name>
            <content>
                <baseType ref="type.1581119"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.511" specialization="true">
            <name>Pair&lt;HashtableIterator&lt;ValueType, ValueType&amp;, ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>>, bool></name>
            <content>
                <primaryType ref="1581567"/>
                <argumentType ref="type.493"/>
                <argumentType ref="type.1579450"/>
            </content>
        </type>
        <type derived="true" id="type.512">
            <name>Pair&lt;HashtableIterator&lt;ValueType, ValueType&amp;, ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>>, bool>*</name>
            <content>
                <baseType ref="type.511"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1580211" specialization="true">
            <name>Pair&lt;I, I></name>
            <content>
                <primaryType ref="1581567"/>
                <argumentType ref="1579550"/>
                <argumentType ref="1579550"/>
            </content>
        </type>
        <type id="type.1580206" specialization="true">
            <name>Pair&lt;I, I></name>
            <content>
                <primaryType ref="1581567"/>
                <argumentType ref="1579548"/>
                <argumentType ref="1579548"/>
            </content>
        </type>
        <type id="type.1580197" specialization="true">
            <name>Pair&lt;I, I></name>
            <content>
                <primaryType ref="1581567"/>
                <argumentType ref="1579524"/>
                <argumentType ref="1579524"/>
            </content>
        </type>
        <type derived="true" id="type.1580212">
            <name>Pair&lt;I, I>*</name>
            <content>
                <baseType ref="type.1580211"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580198">
            <name>Pair&lt;I, I>*</name>
            <content>
                <baseType ref="type.1580197"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580207">
            <name>Pair&lt;I, I>*</name>
            <content>
                <baseType ref="type.1580206"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1580956" specialization="true">
            <name>Pair&lt;K, T></name>
            <content>
                <primaryType ref="1581567"/>
                <argumentType ref="1579922"/>
                <argumentType ref="1579923"/>
            </content>
        </type>
        <type id="type.310" specialization="true">
            <name>Pair&lt;K, T></name>
            <content>
                <primaryType ref="1581567"/>
                <argumentType ref="1579918"/>
                <argumentType ref="1579919"/>
            </content>
        </type>
        <type id="type.1580956" specialization="true">
            <name>Pair&lt;K, T></name>
            <content>
                <primaryType ref="1581567"/>
                <argumentType ref="1579922"/>
                <argumentType ref="1579923"/>
            </content>
        </type>
        <type derived="true" id="type.1580973">
            <name>Pair&lt;K, T>&amp;</name>
            <content>
                <baseType ref="type.1580956"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.327">
            <name>Pair&lt;K, T>&amp;</name>
            <content>
                <baseType ref="type.310"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580957">
            <name>Pair&lt;K, T>*</name>
            <content>
                <baseType ref="type.1580956"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.311">
            <name>Pair&lt;K, T>*</name>
            <content>
                <baseType ref="type.310"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580957">
            <name>Pair&lt;K, T>*</name>
            <content>
                <baseType ref="type.1580956"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.651" specialization="true">
            <name>Pair&lt;Key, Value></name>
            <content>
                <primaryType ref="1581567"/>
                <argumentType ref="1579974"/>
                <argumentType ref="1579975"/>
            </content>
        </type>
        <type derived="true" id="type.677">
            <name>Pair&lt;Key, Value>&amp;</name>
            <content>
                <baseType ref="type.651"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.652">
            <name>Pair&lt;Key, Value>*</name>
            <content>
                <baseType ref="type.651"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.690" specialization="true">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool></name>
            <content>
                <primaryType ref="1581567"/>
                <argumentType ref="type.681"/>
                <argumentType ref="type.1579450"/>
            </content>
        </type>
        <type derived="true" id="type.691">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>, bool>*</name>
            <content>
                <baseType ref="type.690"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1581910" specialization="true">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;T, T&amp;, T*>, bool></name>
            <content>
                <primaryType ref="1581567"/>
                <argumentType ref="type.1581901"/>
                <argumentType ref="type.1579450"/>
            </content>
        </type>
        <type id="type.1581860" specialization="true">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;T, T&amp;, T*>, bool></name>
            <content>
                <primaryType ref="1581567"/>
                <argumentType ref="type.1581851"/>
                <argumentType ref="type.1579450"/>
            </content>
        </type>
        <type id="type.1581910" specialization="true">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;T, T&amp;, T*>, bool></name>
            <content>
                <primaryType ref="1581567"/>
                <argumentType ref="type.1581901"/>
                <argumentType ref="type.1579450"/>
            </content>
        </type>
        <type id="type.877" specialization="true">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;T, T&amp;, T*>, bool></name>
            <content>
                <primaryType ref="1581567"/>
                <argumentType ref="type.868"/>
                <argumentType ref="type.1579450"/>
            </content>
        </type>
        <type derived="true" id="type.878">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;T, T&amp;, T*>, bool>*</name>
            <content>
                <baseType ref="type.877"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581861">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;T, T&amp;, T*>, bool>*</name>
            <content>
                <baseType ref="type.1581860"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581911">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;T, T&amp;, T*>, bool>*</name>
            <content>
                <baseType ref="type.1581910"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.829" specialization="true">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*>, bool></name>
            <content>
                <primaryType ref="1581567"/>
                <argumentType ref="type.819"/>
                <argumentType ref="type.1579450"/>
            </content>
        </type>
        <type derived="true" id="type.830">
            <name>Pair&lt;RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*>, bool>*</name>
            <content>
                <baseType ref="type.829"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582923" specialization="true">
            <name>Pair&lt;String&lt;char>, Age*></name>
            <content>
                <primaryType ref="1581567"/>
                <argumentType ref="type.1580238"/>
                <argumentType ref="type.1580109"/>
            </content>
        </type>
        <type derived="true" id="type.1582936">
            <name>Pair&lt;String&lt;char>, Age*>&amp;</name>
            <content>
                <baseType ref="type.1582923"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584589">
            <name>Pair&lt;String&lt;char>, Age*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582923"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582924">
            <name>Pair&lt;String&lt;char>, Age*>*</name>
            <content>
                <baseType ref="type.1582923"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583819" specialization="true">
            <name>Pair&lt;String&lt;char>, AliasType*></name>
            <content>
                <primaryType ref="1581567"/>
                <argumentType ref="type.1580238"/>
                <argumentType ref="type.1580158"/>
            </content>
        </type>
        <type derived="true" id="type.1583832">
            <name>Pair&lt;String&lt;char>, AliasType*>&amp;</name>
            <content>
                <baseType ref="type.1583819"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584994">
            <name>Pair&lt;String&lt;char>, AliasType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583819"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583820">
            <name>Pair&lt;String&lt;char>, AliasType*>*</name>
            <content>
                <baseType ref="type.1583819"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583461" specialization="true">
            <name>Pair&lt;String&lt;char>, BidiClass*></name>
            <content>
                <primaryType ref="1581567"/>
                <argumentType ref="type.1580238"/>
                <argumentType ref="type.1580140"/>
            </content>
        </type>
        <type derived="true" id="type.1583474">
            <name>Pair&lt;String&lt;char>, BidiClass*>&amp;</name>
            <content>
                <baseType ref="type.1583461"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584832">
            <name>Pair&lt;String&lt;char>, BidiClass*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583461"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583462">
            <name>Pair&lt;String&lt;char>, BidiClass*>*</name>
            <content>
                <baseType ref="type.1583461"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583640" specialization="true">
            <name>Pair&lt;String&lt;char>, BidiPairedBracketType*></name>
            <content>
                <primaryType ref="1581567"/>
                <argumentType ref="type.1580238"/>
                <argumentType ref="type.1580149"/>
            </content>
        </type>
        <type derived="true" id="type.1583653">
            <name>Pair&lt;String&lt;char>, BidiPairedBracketType*>&amp;</name>
            <content>
                <baseType ref="type.1583640"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584913">
            <name>Pair&lt;String&lt;char>, BidiPairedBracketType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583640"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583641">
            <name>Pair&lt;String&lt;char>, BidiPairedBracketType*>*</name>
            <content>
                <baseType ref="type.1583640"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582383" specialization="true">
            <name>Pair&lt;String&lt;char>, BinaryProperty*></name>
            <content>
                <primaryType ref="1581567"/>
                <argumentType ref="type.1580238"/>
                <argumentType ref="type.1580088"/>
            </content>
        </type>
        <type derived="true" id="type.1582396">
            <name>Pair&lt;String&lt;char>, BinaryProperty*>&amp;</name>
            <content>
                <baseType ref="type.1582383"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584324">
            <name>Pair&lt;String&lt;char>, BinaryProperty*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582383"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582384">
            <name>Pair&lt;String&lt;char>, BinaryProperty*>*</name>
            <content>
                <baseType ref="type.1582383"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582563" specialization="true">
            <name>Pair&lt;String&lt;char>, Block*></name>
            <content>
                <primaryType ref="1581567"/>
                <argumentType ref="type.1580238"/>
                <argumentType ref="type.1580095"/>
            </content>
        </type>
        <type derived="true" id="type.1582576">
            <name>Pair&lt;String&lt;char>, Block*>&amp;</name>
            <content>
                <baseType ref="type.1582563"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584427">
            <name>Pair&lt;String&lt;char>, Block*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582563"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582564">
            <name>Pair&lt;String&lt;char>, Block*>*</name>
            <content>
                <baseType ref="type.1582563"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582744" specialization="true">
            <name>Pair&lt;String&lt;char>, GeneralCategory*></name>
            <content>
                <primaryType ref="1581567"/>
                <argumentType ref="type.1580238"/>
                <argumentType ref="type.1580102"/>
            </content>
        </type>
        <type derived="true" id="type.1582757">
            <name>Pair&lt;String&lt;char>, GeneralCategory*>&amp;</name>
            <content>
                <baseType ref="type.1582744"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584508">
            <name>Pair&lt;String&lt;char>, GeneralCategory*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582744"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582745">
            <name>Pair&lt;String&lt;char>, GeneralCategory*>*</name>
            <content>
                <baseType ref="type.1582744"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583282" specialization="true">
            <name>Pair&lt;String&lt;char>, NumericType*></name>
            <content>
                <primaryType ref="1581567"/>
                <argumentType ref="type.1580238"/>
                <argumentType ref="type.1580131"/>
            </content>
        </type>
        <type derived="true" id="type.1583295">
            <name>Pair&lt;String&lt;char>, NumericType*>&amp;</name>
            <content>
                <baseType ref="type.1583282"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584751">
            <name>Pair&lt;String&lt;char>, NumericType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583282"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583283">
            <name>Pair&lt;String&lt;char>, NumericType*>*</name>
            <content>
                <baseType ref="type.1583282"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583102" specialization="true">
            <name>Pair&lt;String&lt;char>, Script*></name>
            <content>
                <primaryType ref="1581567"/>
                <argumentType ref="type.1580238"/>
                <argumentType ref="type.1580118"/>
            </content>
        </type>
        <type derived="true" id="type.1583115">
            <name>Pair&lt;String&lt;char>, Script*>&amp;</name>
            <content>
                <baseType ref="type.1583102"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584670">
            <name>Pair&lt;String&lt;char>, Script*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583102"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583103">
            <name>Pair&lt;String&lt;char>, Script*>*</name>
            <content>
                <baseType ref="type.1583102"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582856" specialization="true">
            <name>Pair&lt;System.Unicode.AgeId, Age*></name>
            <content>
                <primaryType ref="1581567"/>
                <argumentType ref="1580107"/>
                <argumentType ref="type.1580109"/>
            </content>
        </type>
        <type derived="true" id="type.1582871">
            <name>Pair&lt;System.Unicode.AgeId, Age*>&amp;</name>
            <content>
                <baseType ref="type.1582856"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584550">
            <name>Pair&lt;System.Unicode.AgeId, Age*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582856"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582857">
            <name>Pair&lt;System.Unicode.AgeId, Age*>*</name>
            <content>
                <baseType ref="type.1582856"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583752" specialization="true">
            <name>Pair&lt;System.Unicode.AliasTypeId, AliasType*></name>
            <content>
                <primaryType ref="1581567"/>
                <argumentType ref="1580156"/>
                <argumentType ref="type.1580158"/>
            </content>
        </type>
        <type derived="true" id="type.1583767">
            <name>Pair&lt;System.Unicode.AliasTypeId, AliasType*>&amp;</name>
            <content>
                <baseType ref="type.1583752"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584955">
            <name>Pair&lt;System.Unicode.AliasTypeId, AliasType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583752"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583753">
            <name>Pair&lt;System.Unicode.AliasTypeId, AliasType*>*</name>
            <content>
                <baseType ref="type.1583752"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583394" specialization="true">
            <name>Pair&lt;System.Unicode.BidiClassId, BidiClass*></name>
            <content>
                <primaryType ref="1581567"/>
                <argumentType ref="1580138"/>
                <argumentType ref="type.1580140"/>
            </content>
        </type>
        <type derived="true" id="type.1583409">
            <name>Pair&lt;System.Unicode.BidiClassId, BidiClass*>&amp;</name>
            <content>
                <baseType ref="type.1583394"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584793">
            <name>Pair&lt;System.Unicode.BidiClassId, BidiClass*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583394"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583395">
            <name>Pair&lt;System.Unicode.BidiClassId, BidiClass*>*</name>
            <content>
                <baseType ref="type.1583394"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583573" specialization="true">
            <name>Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*></name>
            <content>
                <primaryType ref="1581567"/>
                <argumentType ref="1580147"/>
                <argumentType ref="type.1580149"/>
            </content>
        </type>
        <type derived="true" id="type.1583588">
            <name>Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>&amp;</name>
            <content>
                <baseType ref="type.1583573"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584874">
            <name>Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583573"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583574">
            <name>Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>*</name>
            <content>
                <baseType ref="type.1583573"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582302" specialization="true">
            <name>Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*></name>
            <content>
                <primaryType ref="1581567"/>
                <argumentType ref="1580086"/>
                <argumentType ref="type.1580088"/>
            </content>
        </type>
        <type derived="true" id="type.1582317">
            <name>Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>&amp;</name>
            <content>
                <baseType ref="type.1582302"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584285">
            <name>Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582302"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582303">
            <name>Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>*</name>
            <content>
                <baseType ref="type.1582302"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582496" specialization="true">
            <name>Pair&lt;System.Unicode.BlockId, Block*></name>
            <content>
                <primaryType ref="1581567"/>
                <argumentType ref="1580093"/>
                <argumentType ref="type.1580095"/>
            </content>
        </type>
        <type derived="true" id="type.1582511">
            <name>Pair&lt;System.Unicode.BlockId, Block*>&amp;</name>
            <content>
                <baseType ref="type.1582496"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584388">
            <name>Pair&lt;System.Unicode.BlockId, Block*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582496"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582497">
            <name>Pair&lt;System.Unicode.BlockId, Block*>*</name>
            <content>
                <baseType ref="type.1582496"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582677" specialization="true">
            <name>Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*></name>
            <content>
                <primaryType ref="1581567"/>
                <argumentType ref="1580100"/>
                <argumentType ref="type.1580102"/>
            </content>
        </type>
        <type derived="true" id="type.1582692">
            <name>Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>&amp;</name>
            <content>
                <baseType ref="type.1582677"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584469">
            <name>Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582677"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582678">
            <name>Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>*</name>
            <content>
                <baseType ref="type.1582677"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583215" specialization="true">
            <name>Pair&lt;System.Unicode.NumericTypeId, NumericType*></name>
            <content>
                <primaryType ref="1581567"/>
                <argumentType ref="1580129"/>
                <argumentType ref="type.1580131"/>
            </content>
        </type>
        <type derived="true" id="type.1583230">
            <name>Pair&lt;System.Unicode.NumericTypeId, NumericType*>&amp;</name>
            <content>
                <baseType ref="type.1583215"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584712">
            <name>Pair&lt;System.Unicode.NumericTypeId, NumericType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583215"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583216">
            <name>Pair&lt;System.Unicode.NumericTypeId, NumericType*>*</name>
            <content>
                <baseType ref="type.1583215"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583035" specialization="true">
            <name>Pair&lt;System.Unicode.ScriptId, Script*></name>
            <content>
                <primaryType ref="1581567"/>
                <argumentType ref="1580116"/>
                <argumentType ref="type.1580118"/>
            </content>
        </type>
        <type derived="true" id="type.1583050">
            <name>Pair&lt;System.Unicode.ScriptId, Script*>&amp;</name>
            <content>
                <baseType ref="type.1583035"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584631">
            <name>Pair&lt;System.Unicode.ScriptId, Script*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583035"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583036">
            <name>Pair&lt;System.Unicode.ScriptId, Script*>*</name>
            <content>
                <baseType ref="type.1583035"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.726" specialization="true">
            <name>Pair&lt;T, U></name>
            <content>
                <primaryType ref="1581567"/>
                <argumentType ref="1579998"/>
                <argumentType ref="1579999"/>
            </content>
        </type>
        <type id="type.715" specialization="true">
            <name>Pair&lt;T, U></name>
            <content>
                <primaryType ref="1581567"/>
                <argumentType ref="1579995"/>
                <argumentType ref="1579996"/>
            </content>
        </type>
        <type id="1579985">
            <name>Pair&lt;T, U></name>
        </type>
        <type id="type.1581580" specialization="true">
            <name>Pair&lt;T, U></name>
            <content>
                <primaryType ref="1581567"/>
                <argumentType ref="1579990"/>
                <argumentType ref="1579991"/>
            </content>
        </type>
        <type id="type.1581589" specialization="true">
            <name>Pair&lt;T, U></name>
            <content>
                <primaryType ref="1581567"/>
                <argumentType ref="1579992"/>
                <argumentType ref="1579993"/>
            </content>
        </type>
        <type id="type.1581567" specialization="true">
            <name>Pair&lt;T, U></name>
            <content>
                <primaryType ref="1581567"/>
                <argumentType ref="1579986"/>
                <argumentType ref="1579987"/>
            </content>
        </type>
        <type id="type.1581573" specialization="true">
            <name>Pair&lt;T, U></name>
            <content>
                <primaryType ref="1581567"/>
                <argumentType ref="1579988"/>
                <argumentType ref="1579989"/>
            </content>
        </type>
        <type id="type.1581580" specialization="true">
            <name>Pair&lt;T, U></name>
            <content>
                <primaryType ref="1581567"/>
                <argumentType ref="1579990"/>
                <argumentType ref="1579991"/>
            </content>
        </type>
        <type derived="true" id="type.708">
            <name>Pair&lt;T, U>*</name>
            <content>
                <baseType ref="type.1581567"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.716">
            <name>Pair&lt;T, U>*</name>
            <content>
                <baseType ref="type.715"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.727">
            <name>Pair&lt;T, U>*</name>
            <content>
                <baseType ref="type.726"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581590">
            <name>Pair&lt;T, U>*</name>
            <content>
                <baseType ref="type.1581589"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581581">
            <name>Pair&lt;T, U>*</name>
            <content>
                <baseType ref="type.1581580"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581574">
            <name>Pair&lt;T, U>*</name>
            <content>
                <baseType ref="type.1581573"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581581">
            <name>Pair&lt;T, U>*</name>
            <content>
                <baseType ref="type.1581580"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1580002">
            <name>Path</name>
        </type>
        <type id="1579846">
            <name>Plus&lt;T></name>
        </type>
        <type id="type.1580617" specialization="true">
            <name>Plus&lt;T></name>
            <content>
                <primaryType ref="1580617"/>
                <argumentType ref="1579847"/>
            </content>
        </type>
        <type id="type.1580624" specialization="true">
            <name>Plus&lt;T></name>
            <content>
                <primaryType ref="1580617"/>
                <argumentType ref="1579848"/>
            </content>
        </type>
        <type id="type.1580617" specialization="true">
            <name>Plus&lt;T></name>
            <content>
                <primaryType ref="1580617"/>
                <argumentType ref="1579847"/>
            </content>
        </type>
        <type derived="true" id="type.1580630">
            <name>Plus&lt;T>*</name>
            <content>
                <baseType ref="type.1580624"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1581622" specialization="true">
            <name>Queue&lt;T></name>
            <content>
                <primaryType ref="1581622"/>
                <argumentType ref="1580004"/>
            </content>
        </type>
        <type id="1580003">
            <name>Queue&lt;T></name>
        </type>
        <type derived="true" id="type.737">
            <name>Queue&lt;T>*</name>
            <content>
                <baseType ref="type.1581622"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1580025">
            <name>R</name>
        </type>
        <type id="type.1583004" specialization="true">
            <name>RandomAccessIter&lt;Age*, Age*&amp;, Age**></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1580109"/>
                <argumentType ref="type.1582918"/>
                <argumentType ref="type.1583003"/>
            </content>
        </type>
        <type derived="true" id="type.1583010">
            <name>RandomAccessIter&lt;Age*, Age*&amp;, Age**>&amp;</name>
            <content>
                <baseType ref="type.1583004"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583009">
            <name>RandomAccessIter&lt;Age*, Age*&amp;, Age**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583004"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583005">
            <name>RandomAccessIter&lt;Age*, Age*&amp;, Age**>*</name>
            <content>
                <baseType ref="type.1583004"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582996" specialization="true">
            <name>RandomAccessIter&lt;Age*, const Age*&amp;, const Age**></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1580109"/>
                <argumentType ref="type.1582858"/>
                <argumentType ref="type.1582995"/>
            </content>
        </type>
        <type derived="true" id="type.1583002">
            <name>RandomAccessIter&lt;Age*, const Age*&amp;, const Age**>&amp;</name>
            <content>
                <baseType ref="type.1582996"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1193">
            <name>RandomAccessIter&lt;Age*, const Age*&amp;, const Age**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582996"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582997">
            <name>RandomAccessIter&lt;Age*, const Age*&amp;, const Age**>*</name>
            <content>
                <baseType ref="type.1582996"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583900" specialization="true">
            <name>RandomAccessIter&lt;AliasType*, AliasType*&amp;, AliasType**></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1580158"/>
                <argumentType ref="type.1583814"/>
                <argumentType ref="type.1583899"/>
            </content>
        </type>
        <type derived="true" id="type.1583906">
            <name>RandomAccessIter&lt;AliasType*, AliasType*&amp;, AliasType**>&amp;</name>
            <content>
                <baseType ref="type.1583900"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583905">
            <name>RandomAccessIter&lt;AliasType*, AliasType*&amp;, AliasType**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583900"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583901">
            <name>RandomAccessIter&lt;AliasType*, AliasType*&amp;, AliasType**>*</name>
            <content>
                <baseType ref="type.1583900"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583892" specialization="true">
            <name>RandomAccessIter&lt;AliasType*, const AliasType*&amp;, const AliasType**></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1580158"/>
                <argumentType ref="type.1583754"/>
                <argumentType ref="type.1583891"/>
            </content>
        </type>
        <type derived="true" id="type.1583898">
            <name>RandomAccessIter&lt;AliasType*, const AliasType*&amp;, const AliasType**>&amp;</name>
            <content>
                <baseType ref="type.1583892"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1358">
            <name>RandomAccessIter&lt;AliasType*, const AliasType*&amp;, const AliasType**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583892"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583893">
            <name>RandomAccessIter&lt;AliasType*, const AliasType*&amp;, const AliasType**>*</name>
            <content>
                <baseType ref="type.1583892"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583542" specialization="true">
            <name>RandomAccessIter&lt;BidiClass*, BidiClass*&amp;, BidiClass**></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1580140"/>
                <argumentType ref="type.1583456"/>
                <argumentType ref="type.1583541"/>
            </content>
        </type>
        <type derived="true" id="type.1583548">
            <name>RandomAccessIter&lt;BidiClass*, BidiClass*&amp;, BidiClass**>&amp;</name>
            <content>
                <baseType ref="type.1583542"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583547">
            <name>RandomAccessIter&lt;BidiClass*, BidiClass*&amp;, BidiClass**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583542"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583543">
            <name>RandomAccessIter&lt;BidiClass*, BidiClass*&amp;, BidiClass**>*</name>
            <content>
                <baseType ref="type.1583542"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583534" specialization="true">
            <name>RandomAccessIter&lt;BidiClass*, const BidiClass*&amp;, const BidiClass**></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1580140"/>
                <argumentType ref="type.1583396"/>
                <argumentType ref="type.1583533"/>
            </content>
        </type>
        <type derived="true" id="type.1583540">
            <name>RandomAccessIter&lt;BidiClass*, const BidiClass*&amp;, const BidiClass**>&amp;</name>
            <content>
                <baseType ref="type.1583534"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1292">
            <name>RandomAccessIter&lt;BidiClass*, const BidiClass*&amp;, const BidiClass**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583534"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583535">
            <name>RandomAccessIter&lt;BidiClass*, const BidiClass*&amp;, const BidiClass**>*</name>
            <content>
                <baseType ref="type.1583534"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583721" specialization="true">
            <name>RandomAccessIter&lt;BidiPairedBracketType*, BidiPairedBracketType*&amp;, BidiPairedBracketType**></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1580149"/>
                <argumentType ref="type.1583635"/>
                <argumentType ref="type.1583720"/>
            </content>
        </type>
        <type derived="true" id="type.1583727">
            <name>RandomAccessIter&lt;BidiPairedBracketType*, BidiPairedBracketType*&amp;, BidiPairedBracketType**>&amp;</name>
            <content>
                <baseType ref="type.1583721"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583726">
            <name>RandomAccessIter&lt;BidiPairedBracketType*, BidiPairedBracketType*&amp;, BidiPairedBracketType**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583721"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583722">
            <name>RandomAccessIter&lt;BidiPairedBracketType*, BidiPairedBracketType*&amp;, BidiPairedBracketType**>*</name>
            <content>
                <baseType ref="type.1583721"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583713" specialization="true">
            <name>RandomAccessIter&lt;BidiPairedBracketType*, const BidiPairedBracketType*&amp;, const BidiPairedBracketType**></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1580149"/>
                <argumentType ref="type.1583575"/>
                <argumentType ref="type.1583712"/>
            </content>
        </type>
        <type derived="true" id="type.1583719">
            <name>RandomAccessIter&lt;BidiPairedBracketType*, const BidiPairedBracketType*&amp;, const BidiPairedBracketType**>&amp;</name>
            <content>
                <baseType ref="type.1583713"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1325">
            <name>RandomAccessIter&lt;BidiPairedBracketType*, const BidiPairedBracketType*&amp;, const BidiPairedBracketType**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583713"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583714">
            <name>RandomAccessIter&lt;BidiPairedBracketType*, const BidiPairedBracketType*&amp;, const BidiPairedBracketType**>*</name>
            <content>
                <baseType ref="type.1583713"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582456" specialization="true">
            <name>RandomAccessIter&lt;BinaryProperty*, BinaryProperty*&amp;, BinaryProperty**></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1580088"/>
                <argumentType ref="type.1582364"/>
                <argumentType ref="type.1582455"/>
            </content>
        </type>
        <type derived="true" id="type.1582462">
            <name>RandomAccessIter&lt;BinaryProperty*, BinaryProperty*&amp;, BinaryProperty**>&amp;</name>
            <content>
                <baseType ref="type.1582456"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582461">
            <name>RandomAccessIter&lt;BinaryProperty*, BinaryProperty*&amp;, BinaryProperty**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582456"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582457">
            <name>RandomAccessIter&lt;BinaryProperty*, BinaryProperty*&amp;, BinaryProperty**>*</name>
            <content>
                <baseType ref="type.1582456"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582448" specialization="true">
            <name>RandomAccessIter&lt;BinaryProperty*, const BinaryProperty*&amp;, const BinaryProperty**></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1580088"/>
                <argumentType ref="type.1582304"/>
                <argumentType ref="type.1582447"/>
            </content>
        </type>
        <type derived="true" id="type.1582454">
            <name>RandomAccessIter&lt;BinaryProperty*, const BinaryProperty*&amp;, const BinaryProperty**>&amp;</name>
            <content>
                <baseType ref="type.1582448"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1093">
            <name>RandomAccessIter&lt;BinaryProperty*, const BinaryProperty*&amp;, const BinaryProperty**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582448"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582449">
            <name>RandomAccessIter&lt;BinaryProperty*, const BinaryProperty*&amp;, const BinaryProperty**>*</name>
            <content>
                <baseType ref="type.1582448"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582644" specialization="true">
            <name>RandomAccessIter&lt;Block*, Block*&amp;, Block**></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1580095"/>
                <argumentType ref="type.1582558"/>
                <argumentType ref="type.1582643"/>
            </content>
        </type>
        <type derived="true" id="type.1582650">
            <name>RandomAccessIter&lt;Block*, Block*&amp;, Block**>&amp;</name>
            <content>
                <baseType ref="type.1582644"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582649">
            <name>RandomAccessIter&lt;Block*, Block*&amp;, Block**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582644"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582645">
            <name>RandomAccessIter&lt;Block*, Block*&amp;, Block**>*</name>
            <content>
                <baseType ref="type.1582644"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582636" specialization="true">
            <name>RandomAccessIter&lt;Block*, const Block*&amp;, const Block**></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1580095"/>
                <argumentType ref="type.1582498"/>
                <argumentType ref="type.1582635"/>
            </content>
        </type>
        <type derived="true" id="type.1582642">
            <name>RandomAccessIter&lt;Block*, const Block*&amp;, const Block**>&amp;</name>
            <content>
                <baseType ref="type.1582636"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1127">
            <name>RandomAccessIter&lt;Block*, const Block*&amp;, const Block**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582636"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582637">
            <name>RandomAccessIter&lt;Block*, const Block*&amp;, const Block**>*</name>
            <content>
                <baseType ref="type.1582636"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1581010" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1580979"/>
                <argumentType ref="type.1581008"/>
                <argumentType ref="type.1581009"/>
            </content>
        </type>
        <type id="type.364" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.333"/>
                <argumentType ref="type.362"/>
                <argumentType ref="type.363"/>
            </content>
        </type>
        <type id="type.1581010" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1580979"/>
                <argumentType ref="type.1581008"/>
                <argumentType ref="type.1581009"/>
            </content>
        </type>
        <type derived="true" id="type.1581016">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <baseType ref="type.1581010"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.370">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <baseType ref="type.364"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581016">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <baseType ref="type.1581010"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.387">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1581010"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.369">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.364"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.365">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <baseType ref="type.364"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581011">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <baseType ref="type.1581010"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1581001" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1580979"/>
                <argumentType ref="type.1580999"/>
                <argumentType ref="type.1581000"/>
            </content>
        </type>
        <type id="type.355" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.333"/>
                <argumentType ref="type.353"/>
                <argumentType ref="type.354"/>
            </content>
        </type>
        <type id="type.1581001" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1580979"/>
                <argumentType ref="type.1580999"/>
                <argumentType ref="type.1581000"/>
            </content>
        </type>
        <type derived="true" id="type.361">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <baseType ref="type.355"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581007">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <baseType ref="type.1581001"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.360">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.355"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.384">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1581001"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581002">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <baseType ref="type.1581001"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.356">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <baseType ref="type.355"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582973" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Age*>>**></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1582942"/>
                <argumentType ref="type.1582971"/>
                <argumentType ref="type.1582972"/>
            </content>
        </type>
        <type derived="true" id="type.1582979">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Age*>>**>&amp;</name>
            <content>
                <baseType ref="type.1582973"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1188">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582973"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582974">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Age*>>**>*</name>
            <content>
                <baseType ref="type.1582973"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582964" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>**></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1582942"/>
                <argumentType ref="type.1582962"/>
                <argumentType ref="type.1582963"/>
            </content>
        </type>
        <type derived="true" id="type.1582970">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>**>&amp;</name>
            <content>
                <baseType ref="type.1582964"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1185">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582964"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582965">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>**>*</name>
            <content>
                <baseType ref="type.1582964"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583869" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1583838"/>
                <argumentType ref="type.1583867"/>
                <argumentType ref="type.1583868"/>
            </content>
        </type>
        <type derived="true" id="type.1583875">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**>&amp;</name>
            <content>
                <baseType ref="type.1583869"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1353">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583869"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583870">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**>*</name>
            <content>
                <baseType ref="type.1583869"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583860" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1583838"/>
                <argumentType ref="type.1583858"/>
                <argumentType ref="type.1583859"/>
            </content>
        </type>
        <type derived="true" id="type.1583866">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**>&amp;</name>
            <content>
                <baseType ref="type.1583860"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1350">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583860"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583861">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**>*</name>
            <content>
                <baseType ref="type.1583860"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583511" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1583480"/>
                <argumentType ref="type.1583509"/>
                <argumentType ref="type.1583510"/>
            </content>
        </type>
        <type derived="true" id="type.1583517">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**>&amp;</name>
            <content>
                <baseType ref="type.1583511"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1287">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583511"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583512">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**>*</name>
            <content>
                <baseType ref="type.1583511"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583502" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1583480"/>
                <argumentType ref="type.1583500"/>
                <argumentType ref="type.1583501"/>
            </content>
        </type>
        <type derived="true" id="type.1583508">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**>&amp;</name>
            <content>
                <baseType ref="type.1583502"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1284">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583502"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583503">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**>*</name>
            <content>
                <baseType ref="type.1583502"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583690" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1583659"/>
                <argumentType ref="type.1583688"/>
                <argumentType ref="type.1583689"/>
            </content>
        </type>
        <type derived="true" id="type.1583696">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**>&amp;</name>
            <content>
                <baseType ref="type.1583690"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1320">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583690"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583691">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**>*</name>
            <content>
                <baseType ref="type.1583690"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583681" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1583659"/>
                <argumentType ref="type.1583679"/>
                <argumentType ref="type.1583680"/>
            </content>
        </type>
        <type derived="true" id="type.1583687">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**>&amp;</name>
            <content>
                <baseType ref="type.1583681"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1317">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583681"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583682">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**>*</name>
            <content>
                <baseType ref="type.1583681"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582433" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1582402"/>
                <argumentType ref="type.1582431"/>
                <argumentType ref="type.1582432"/>
            </content>
        </type>
        <type derived="true" id="type.1582439">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**>&amp;</name>
            <content>
                <baseType ref="type.1582433"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1089">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582433"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582434">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**>*</name>
            <content>
                <baseType ref="type.1582433"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582424" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1582402"/>
                <argumentType ref="type.1582422"/>
                <argumentType ref="type.1582423"/>
            </content>
        </type>
        <type derived="true" id="type.1582430">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**>&amp;</name>
            <content>
                <baseType ref="type.1582424"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1086">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582424"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582425">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**>*</name>
            <content>
                <baseType ref="type.1582424"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582613" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Block*>>**></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1582582"/>
                <argumentType ref="type.1582611"/>
                <argumentType ref="type.1582612"/>
            </content>
        </type>
        <type derived="true" id="type.1582619">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Block*>>**>&amp;</name>
            <content>
                <baseType ref="type.1582613"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1122">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582613"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582614">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Block*>>**>*</name>
            <content>
                <baseType ref="type.1582613"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582604" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>**></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1582582"/>
                <argumentType ref="type.1582602"/>
                <argumentType ref="type.1582603"/>
            </content>
        </type>
        <type derived="true" id="type.1582610">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>**>&amp;</name>
            <content>
                <baseType ref="type.1582604"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1119">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582604"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582605">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>**>*</name>
            <content>
                <baseType ref="type.1582604"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582794" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1582763"/>
                <argumentType ref="type.1582792"/>
                <argumentType ref="type.1582793"/>
            </content>
        </type>
        <type derived="true" id="type.1582800">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**>&amp;</name>
            <content>
                <baseType ref="type.1582794"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1155">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582794"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582795">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**>*</name>
            <content>
                <baseType ref="type.1582794"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582785" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1582763"/>
                <argumentType ref="type.1582783"/>
                <argumentType ref="type.1582784"/>
            </content>
        </type>
        <type derived="true" id="type.1582791">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**>&amp;</name>
            <content>
                <baseType ref="type.1582785"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1152">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582785"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582786">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**>*</name>
            <content>
                <baseType ref="type.1582785"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583332" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1583301"/>
                <argumentType ref="type.1583330"/>
                <argumentType ref="type.1583331"/>
            </content>
        </type>
        <type derived="true" id="type.1583338">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**>&amp;</name>
            <content>
                <baseType ref="type.1583332"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1254">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583332"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583333">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**>*</name>
            <content>
                <baseType ref="type.1583332"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583323" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1583301"/>
                <argumentType ref="type.1583321"/>
                <argumentType ref="type.1583322"/>
            </content>
        </type>
        <type derived="true" id="type.1583329">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**>&amp;</name>
            <content>
                <baseType ref="type.1583323"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1251">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583323"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583324">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**>*</name>
            <content>
                <baseType ref="type.1583323"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583152" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Script*>>**></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1583121"/>
                <argumentType ref="type.1583150"/>
                <argumentType ref="type.1583151"/>
            </content>
        </type>
        <type derived="true" id="type.1583158">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Script*>>**>&amp;</name>
            <content>
                <baseType ref="type.1583152"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1221">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583152"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583153">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Script*>>**>*</name>
            <content>
                <baseType ref="type.1583152"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583143" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>**></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1583121"/>
                <argumentType ref="type.1583141"/>
                <argumentType ref="type.1583142"/>
            </content>
        </type>
        <type derived="true" id="type.1583149">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>**>&amp;</name>
            <content>
                <baseType ref="type.1583143"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1218">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583143"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583144">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>**>*</name>
            <content>
                <baseType ref="type.1583143"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582908" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1582877"/>
                <argumentType ref="type.1582906"/>
                <argumentType ref="type.1582907"/>
            </content>
        </type>
        <type derived="true" id="type.1582914">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**>&amp;</name>
            <content>
                <baseType ref="type.1582908"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1175">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582908"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582909">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**>*</name>
            <content>
                <baseType ref="type.1582908"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582899" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1582877"/>
                <argumentType ref="type.1582897"/>
                <argumentType ref="type.1582898"/>
            </content>
        </type>
        <type derived="true" id="type.1582905">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**>&amp;</name>
            <content>
                <baseType ref="type.1582899"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1172">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582899"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582900">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**>*</name>
            <content>
                <baseType ref="type.1582899"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583804" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1583773"/>
                <argumentType ref="type.1583802"/>
                <argumentType ref="type.1583803"/>
            </content>
        </type>
        <type derived="true" id="type.1583810">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**>&amp;</name>
            <content>
                <baseType ref="type.1583804"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1340">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583804"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583805">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**>*</name>
            <content>
                <baseType ref="type.1583804"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583795" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1583773"/>
                <argumentType ref="type.1583793"/>
                <argumentType ref="type.1583794"/>
            </content>
        </type>
        <type derived="true" id="type.1583801">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**>&amp;</name>
            <content>
                <baseType ref="type.1583795"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1337">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583795"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583796">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**>*</name>
            <content>
                <baseType ref="type.1583795"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583446" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1583415"/>
                <argumentType ref="type.1583444"/>
                <argumentType ref="type.1583445"/>
            </content>
        </type>
        <type derived="true" id="type.1583452">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**>&amp;</name>
            <content>
                <baseType ref="type.1583446"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1274">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583446"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583447">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**>*</name>
            <content>
                <baseType ref="type.1583446"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583437" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1583415"/>
                <argumentType ref="type.1583435"/>
                <argumentType ref="type.1583436"/>
            </content>
        </type>
        <type derived="true" id="type.1583443">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**>&amp;</name>
            <content>
                <baseType ref="type.1583437"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1271">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583437"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583438">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**>*</name>
            <content>
                <baseType ref="type.1583437"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583625" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1583594"/>
                <argumentType ref="type.1583623"/>
                <argumentType ref="type.1583624"/>
            </content>
        </type>
        <type derived="true" id="type.1583631">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**>&amp;</name>
            <content>
                <baseType ref="type.1583625"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1307">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583625"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583626">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**>*</name>
            <content>
                <baseType ref="type.1583625"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583616" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1583594"/>
                <argumentType ref="type.1583614"/>
                <argumentType ref="type.1583615"/>
            </content>
        </type>
        <type derived="true" id="type.1583622">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**>&amp;</name>
            <content>
                <baseType ref="type.1583616"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1304">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583616"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583617">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**>*</name>
            <content>
                <baseType ref="type.1583616"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582354" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1582323"/>
                <argumentType ref="type.1582352"/>
                <argumentType ref="type.1582353"/>
            </content>
        </type>
        <type derived="true" id="type.1582360">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**>&amp;</name>
            <content>
                <baseType ref="type.1582354"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1075">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582354"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582355">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**>*</name>
            <content>
                <baseType ref="type.1582354"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582345" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1582323"/>
                <argumentType ref="type.1582343"/>
                <argumentType ref="type.1582344"/>
            </content>
        </type>
        <type derived="true" id="type.1582351">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**>&amp;</name>
            <content>
                <baseType ref="type.1582345"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1072">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582345"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582346">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**>*</name>
            <content>
                <baseType ref="type.1582345"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582548" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1582517"/>
                <argumentType ref="type.1582546"/>
                <argumentType ref="type.1582547"/>
            </content>
        </type>
        <type derived="true" id="type.1582554">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**>&amp;</name>
            <content>
                <baseType ref="type.1582548"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1109">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582548"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582549">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**>*</name>
            <content>
                <baseType ref="type.1582548"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582539" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1582517"/>
                <argumentType ref="type.1582537"/>
                <argumentType ref="type.1582538"/>
            </content>
        </type>
        <type derived="true" id="type.1582545">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**>&amp;</name>
            <content>
                <baseType ref="type.1582539"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1106">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582539"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582540">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**>*</name>
            <content>
                <baseType ref="type.1582539"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582729" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1582698"/>
                <argumentType ref="type.1582727"/>
                <argumentType ref="type.1582728"/>
            </content>
        </type>
        <type derived="true" id="type.1582735">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**>&amp;</name>
            <content>
                <baseType ref="type.1582729"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1142">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582729"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582730">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**>*</name>
            <content>
                <baseType ref="type.1582729"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582720" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1582698"/>
                <argumentType ref="type.1582718"/>
                <argumentType ref="type.1582719"/>
            </content>
        </type>
        <type derived="true" id="type.1582726">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**>&amp;</name>
            <content>
                <baseType ref="type.1582720"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1139">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582720"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582721">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**>*</name>
            <content>
                <baseType ref="type.1582720"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583267" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1583236"/>
                <argumentType ref="type.1583265"/>
                <argumentType ref="type.1583266"/>
            </content>
        </type>
        <type derived="true" id="type.1583273">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**>&amp;</name>
            <content>
                <baseType ref="type.1583267"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1241">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583267"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583268">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**>*</name>
            <content>
                <baseType ref="type.1583267"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583258" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1583236"/>
                <argumentType ref="type.1583256"/>
                <argumentType ref="type.1583257"/>
            </content>
        </type>
        <type derived="true" id="type.1583264">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**>&amp;</name>
            <content>
                <baseType ref="type.1583258"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1238">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583258"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583259">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**>*</name>
            <content>
                <baseType ref="type.1583258"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583087" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1583056"/>
                <argumentType ref="type.1583085"/>
                <argumentType ref="type.1583086"/>
            </content>
        </type>
        <type derived="true" id="type.1583093">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**>&amp;</name>
            <content>
                <baseType ref="type.1583087"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1208">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583087"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583088">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**>*</name>
            <content>
                <baseType ref="type.1583087"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583078" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1583056"/>
                <argumentType ref="type.1583076"/>
                <argumentType ref="type.1583077"/>
            </content>
        </type>
        <type derived="true" id="type.1583084">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**>&amp;</name>
            <content>
                <baseType ref="type.1583078"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1205">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583078"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583079">
            <name>RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**>*</name>
            <content>
                <baseType ref="type.1583078"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1581138" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1581107"/>
                <argumentType ref="type.1581136"/>
                <argumentType ref="type.1581137"/>
            </content>
        </type>
        <type id="type.440" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.409"/>
                <argumentType ref="type.438"/>
                <argumentType ref="type.439"/>
            </content>
        </type>
        <type derived="true" id="type.1581144">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**>&amp;</name>
            <content>
                <baseType ref="type.1581138"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.446">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**>&amp;</name>
            <content>
                <baseType ref="type.440"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581144">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**>&amp;</name>
            <content>
                <baseType ref="type.1581138"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.462">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1581138"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.445">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.440"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.441">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**>*</name>
            <content>
                <baseType ref="type.440"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581139">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**>*</name>
            <content>
                <baseType ref="type.1581138"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1581129" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1581107"/>
                <argumentType ref="type.1581127"/>
                <argumentType ref="type.1581128"/>
            </content>
        </type>
        <type id="type.431" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.409"/>
                <argumentType ref="type.429"/>
                <argumentType ref="type.430"/>
            </content>
        </type>
        <type derived="true" id="type.437">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>&amp;</name>
            <content>
                <baseType ref="type.431"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581135">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>&amp;</name>
            <content>
                <baseType ref="type.1581129"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.459">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1581129"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.436">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.431"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581130">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>*</name>
            <content>
                <baseType ref="type.1581129"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.432">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>*</name>
            <content>
                <baseType ref="type.431"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581130">
            <name>RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>*</name>
            <content>
                <baseType ref="type.1581129"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.531" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, Bucket&lt;ValueType>*&amp;, Bucket&lt;ValueType>**></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.498"/>
                <argumentType ref="type.529"/>
                <argumentType ref="type.530"/>
            </content>
        </type>
        <type derived="true" id="type.537">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, Bucket&lt;ValueType>*&amp;, Bucket&lt;ValueType>**>&amp;</name>
            <content>
                <baseType ref="type.531"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.536">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, Bucket&lt;ValueType>*&amp;, Bucket&lt;ValueType>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.531"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.532">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, Bucket&lt;ValueType>*&amp;, Bucket&lt;ValueType>**>*</name>
            <content>
                <baseType ref="type.531"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.522" specialization="true">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, const Bucket&lt;ValueType>*&amp;, const Bucket&lt;ValueType>**></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.498"/>
                <argumentType ref="type.520"/>
                <argumentType ref="type.521"/>
            </content>
        </type>
        <type derived="true" id="type.528">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, const Bucket&lt;ValueType>*&amp;, const Bucket&lt;ValueType>**>&amp;</name>
            <content>
                <baseType ref="type.522"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.527">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, const Bucket&lt;ValueType>*&amp;, const Bucket&lt;ValueType>**>&amp;&amp;</name>
            <content>
                <baseType ref="type.522"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.523">
            <name>RandomAccessIter&lt;Bucket&lt;ValueType>*, const Bucket&lt;ValueType>*&amp;, const Bucket&lt;ValueType>**>*</name>
            <content>
                <baseType ref="type.522"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582107" specialization="true">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="1580072"/>
                <argumentType ref="type.1582105"/>
                <argumentType ref="type.1582106"/>
            </content>
        </type>
        <type id="type.1582062" specialization="true">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="1580071"/>
                <argumentType ref="type.1582060"/>
                <argumentType ref="type.1582061"/>
            </content>
        </type>
        <type id="type.1582017" specialization="true">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="1580070"/>
                <argumentType ref="type.1582015"/>
                <argumentType ref="type.1582016"/>
            </content>
        </type>
        <type id="type.1582242" specialization="true">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="1580075"/>
                <argumentType ref="type.1582240"/>
                <argumentType ref="type.1582241"/>
            </content>
        </type>
        <type id="type.1582197" specialization="true">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="1580074"/>
                <argumentType ref="type.1582195"/>
                <argumentType ref="type.1582196"/>
            </content>
        </type>
        <type id="type.948" specialization="true">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="1580069"/>
                <argumentType ref="type.946"/>
                <argumentType ref="type.947"/>
            </content>
        </type>
        <type id="type.1582152" specialization="true">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="1580073"/>
                <argumentType ref="type.1582150"/>
                <argumentType ref="type.1582151"/>
            </content>
        </type>
        <type id="type.1582107" specialization="true">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="1580072"/>
                <argumentType ref="type.1582105"/>
                <argumentType ref="type.1582106"/>
            </content>
        </type>
        <type derived="true" id="type.1582023">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;</name>
            <content>
                <baseType ref="type.1582017"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.954">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;</name>
            <content>
                <baseType ref="type.948"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582203">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;</name>
            <content>
                <baseType ref="type.1582197"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582248">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;</name>
            <content>
                <baseType ref="type.1582242"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582068">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;</name>
            <content>
                <baseType ref="type.1582062"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582248">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;</name>
            <content>
                <baseType ref="type.1582242"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582113">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;</name>
            <content>
                <baseType ref="type.1582107"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582158">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;</name>
            <content>
                <baseType ref="type.1582152"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.998">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582062"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.984">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582017"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1054">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582242"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1040">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582197"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.953">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.948"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1026">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582152"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1012">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582107"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582063">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>*</name>
            <content>
                <baseType ref="type.1582062"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582018">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>*</name>
            <content>
                <baseType ref="type.1582017"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582063">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>*</name>
            <content>
                <baseType ref="type.1582062"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582198">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>*</name>
            <content>
                <baseType ref="type.1582197"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582108">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>*</name>
            <content>
                <baseType ref="type.1582107"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.949">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>*</name>
            <content>
                <baseType ref="type.948"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582243">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>*</name>
            <content>
                <baseType ref="type.1582242"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582153">
            <name>RandomAccessIter&lt;CharT, CharT&amp;, CharT*>*</name>
            <content>
                <baseType ref="type.1582152"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582143" specialization="true">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="1580073"/>
                <argumentType ref="type.1582141"/>
                <argumentType ref="type.1582142"/>
            </content>
        </type>
        <type id="type.1582098" specialization="true">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="1580072"/>
                <argumentType ref="type.1582096"/>
                <argumentType ref="type.1582097"/>
            </content>
        </type>
        <type id="type.1582233" specialization="true">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="1580075"/>
                <argumentType ref="type.1582231"/>
                <argumentType ref="type.1582232"/>
            </content>
        </type>
        <type id="type.939" specialization="true">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="1580069"/>
                <argumentType ref="type.937"/>
                <argumentType ref="type.938"/>
            </content>
        </type>
        <type id="type.1582053" specialization="true">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="1580071"/>
                <argumentType ref="type.1582051"/>
                <argumentType ref="type.1582052"/>
            </content>
        </type>
        <type id="type.1582188" specialization="true">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="1580074"/>
                <argumentType ref="type.1582187"/>
                <argumentType ref="type.1582182"/>
            </content>
        </type>
        <type id="type.1582233" specialization="true">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="1580075"/>
                <argumentType ref="type.1582231"/>
                <argumentType ref="type.1582232"/>
            </content>
        </type>
        <type id="type.1582008" specialization="true">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="1580070"/>
                <argumentType ref="type.1582006"/>
                <argumentType ref="type.1582007"/>
            </content>
        </type>
        <type derived="true" id="type.1582059">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;</name>
            <content>
                <baseType ref="type.1582053"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.945">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;</name>
            <content>
                <baseType ref="type.939"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582014">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;</name>
            <content>
                <baseType ref="type.1582008"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582239">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;</name>
            <content>
                <baseType ref="type.1582233"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582194">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;</name>
            <content>
                <baseType ref="type.1582188"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582104">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;</name>
            <content>
                <baseType ref="type.1582098"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582149">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;</name>
            <content>
                <baseType ref="type.1582143"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1037">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582188"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1023">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582143"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1009">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582098"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.995">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582053"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.981">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582008"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1051">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582233"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.944">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;&amp;</name>
            <content>
                <baseType ref="type.939"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582099">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>*</name>
            <content>
                <baseType ref="type.1582098"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582189">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>*</name>
            <content>
                <baseType ref="type.1582188"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582009">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>*</name>
            <content>
                <baseType ref="type.1582008"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582054">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>*</name>
            <content>
                <baseType ref="type.1582053"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582234">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>*</name>
            <content>
                <baseType ref="type.1582233"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582144">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>*</name>
            <content>
                <baseType ref="type.1582143"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.940">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>*</name>
            <content>
                <baseType ref="type.939"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582234">
            <name>RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>*</name>
            <content>
                <baseType ref="type.1582233"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582825" specialization="true">
            <name>RandomAccessIter&lt;GeneralCategory*, GeneralCategory*&amp;, GeneralCategory**></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1580102"/>
                <argumentType ref="type.1582739"/>
                <argumentType ref="type.1582824"/>
            </content>
        </type>
        <type derived="true" id="type.1582831">
            <name>RandomAccessIter&lt;GeneralCategory*, GeneralCategory*&amp;, GeneralCategory**>&amp;</name>
            <content>
                <baseType ref="type.1582825"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582830">
            <name>RandomAccessIter&lt;GeneralCategory*, GeneralCategory*&amp;, GeneralCategory**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582825"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582826">
            <name>RandomAccessIter&lt;GeneralCategory*, GeneralCategory*&amp;, GeneralCategory**>*</name>
            <content>
                <baseType ref="type.1582825"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582817" specialization="true">
            <name>RandomAccessIter&lt;GeneralCategory*, const GeneralCategory*&amp;, const GeneralCategory**></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1580102"/>
                <argumentType ref="type.1582679"/>
                <argumentType ref="type.1582816"/>
            </content>
        </type>
        <type derived="true" id="type.1582823">
            <name>RandomAccessIter&lt;GeneralCategory*, const GeneralCategory*&amp;, const GeneralCategory**>&amp;</name>
            <content>
                <baseType ref="type.1582817"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1160">
            <name>RandomAccessIter&lt;GeneralCategory*, const GeneralCategory*&amp;, const GeneralCategory**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582817"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582818">
            <name>RandomAccessIter&lt;GeneralCategory*, const GeneralCategory*&amp;, const GeneralCategory**>*</name>
            <content>
                <baseType ref="type.1582817"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583355" specialization="true">
            <name>RandomAccessIter&lt;NumericType*, NumericType*&amp;, NumericType**></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1580131"/>
                <argumentType ref="type.1583277"/>
                <argumentType ref="type.1583354"/>
            </content>
        </type>
        <type derived="true" id="type.1583361">
            <name>RandomAccessIter&lt;NumericType*, NumericType*&amp;, NumericType**>&amp;</name>
            <content>
                <baseType ref="type.1583355"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583360">
            <name>RandomAccessIter&lt;NumericType*, NumericType*&amp;, NumericType**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583355"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583356">
            <name>RandomAccessIter&lt;NumericType*, NumericType*&amp;, NumericType**>*</name>
            <content>
                <baseType ref="type.1583355"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583347" specialization="true">
            <name>RandomAccessIter&lt;NumericType*, const NumericType*&amp;, const NumericType**></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1580131"/>
                <argumentType ref="type.1583217"/>
                <argumentType ref="type.1583346"/>
            </content>
        </type>
        <type derived="true" id="type.1583353">
            <name>RandomAccessIter&lt;NumericType*, const NumericType*&amp;, const NumericType**>&amp;</name>
            <content>
                <baseType ref="type.1583347"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1258">
            <name>RandomAccessIter&lt;NumericType*, const NumericType*&amp;, const NumericType**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583347"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583348">
            <name>RandomAccessIter&lt;NumericType*, const NumericType*&amp;, const NumericType**>*</name>
            <content>
                <baseType ref="type.1583347"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583183" specialization="true">
            <name>RandomAccessIter&lt;Script*, Script*&amp;, Script**></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1580118"/>
                <argumentType ref="type.1583097"/>
                <argumentType ref="type.1583182"/>
            </content>
        </type>
        <type derived="true" id="type.1583189">
            <name>RandomAccessIter&lt;Script*, Script*&amp;, Script**>&amp;</name>
            <content>
                <baseType ref="type.1583183"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583188">
            <name>RandomAccessIter&lt;Script*, Script*&amp;, Script**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583183"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583184">
            <name>RandomAccessIter&lt;Script*, Script*&amp;, Script**>*</name>
            <content>
                <baseType ref="type.1583183"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583175" specialization="true">
            <name>RandomAccessIter&lt;Script*, const Script*&amp;, const Script**></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1580118"/>
                <argumentType ref="type.1583037"/>
                <argumentType ref="type.1583174"/>
            </content>
        </type>
        <type derived="true" id="type.1583181">
            <name>RandomAccessIter&lt;Script*, const Script*&amp;, const Script**>&amp;</name>
            <content>
                <baseType ref="type.1583175"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1226">
            <name>RandomAccessIter&lt;Script*, const Script*&amp;, const Script**>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583175"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583176">
            <name>RandomAccessIter&lt;Script*, const Script*&amp;, const Script**>*</name>
            <content>
                <baseType ref="type.1583175"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582038" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1582002"/>
                <argumentType ref="type.1582026"/>
                <argumentType ref="type.1582003"/>
            </content>
        </type>
        <type id="type.1582083" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1582047"/>
                <argumentType ref="type.1582071"/>
                <argumentType ref="type.1582048"/>
            </content>
        </type>
        <type id="type.969" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1581957"/>
                <argumentType ref="type.957"/>
                <argumentType ref="type.934"/>
            </content>
        </type>
        <type id="type.1582218" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1582183"/>
                <argumentType ref="type.1582206"/>
                <argumentType ref="type.1582184"/>
            </content>
        </type>
        <type id="type.1582128" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1582092"/>
                <argumentType ref="type.1582116"/>
                <argumentType ref="type.1582093"/>
            </content>
        </type>
        <type id="type.1582263" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1582227"/>
                <argumentType ref="type.1582251"/>
                <argumentType ref="type.1582228"/>
            </content>
        </type>
        <type id="type.1582128" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1582092"/>
                <argumentType ref="type.1582116"/>
                <argumentType ref="type.1582093"/>
            </content>
        </type>
        <type id="type.1582173" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1582137"/>
                <argumentType ref="type.1582161"/>
                <argumentType ref="type.1582138"/>
            </content>
        </type>
        <type derived="true" id="type.1582089">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;</name>
            <content>
                <baseType ref="type.1582083"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582134">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;</name>
            <content>
                <baseType ref="type.1582128"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582269">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;</name>
            <content>
                <baseType ref="type.1582263"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582224">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;</name>
            <content>
                <baseType ref="type.1582218"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582269">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;</name>
            <content>
                <baseType ref="type.1582263"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582044">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;</name>
            <content>
                <baseType ref="type.1582038"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582179">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;</name>
            <content>
                <baseType ref="type.1582173"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.975">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;</name>
            <content>
                <baseType ref="type.969"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.974">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.969"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.991">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582038"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1005">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582083"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1019">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582128"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1033">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582173"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1061">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582263"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1047">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582218"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582084">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>*</name>
            <content>
                <baseType ref="type.1582083"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.970">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>*</name>
            <content>
                <baseType ref="type.969"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582174">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>*</name>
            <content>
                <baseType ref="type.1582173"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582039">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>*</name>
            <content>
                <baseType ref="type.1582038"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582129">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>*</name>
            <content>
                <baseType ref="type.1582128"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582264">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>*</name>
            <content>
                <baseType ref="type.1582263"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582219">
            <name>RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>*</name>
            <content>
                <baseType ref="type.1582218"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582211" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1582183"/>
                <argumentType ref="type.1582204"/>
                <argumentType ref="type.1582186"/>
            </content>
        </type>
        <type id="type.1582031" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1582002"/>
                <argumentType ref="type.1582024"/>
                <argumentType ref="type.1582005"/>
            </content>
        </type>
        <type id="type.1582121" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1582092"/>
                <argumentType ref="type.1582114"/>
                <argumentType ref="type.1582095"/>
            </content>
        </type>
        <type id="type.1582166" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1582137"/>
                <argumentType ref="type.1582159"/>
                <argumentType ref="type.1582140"/>
            </content>
        </type>
        <type id="type.1582256" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1582227"/>
                <argumentType ref="type.1582249"/>
                <argumentType ref="type.1582230"/>
            </content>
        </type>
        <type id="type.1582076" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1582047"/>
                <argumentType ref="type.1582069"/>
                <argumentType ref="type.1582050"/>
            </content>
        </type>
        <type id="type.962" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1581957"/>
                <argumentType ref="type.955"/>
                <argumentType ref="type.936"/>
            </content>
        </type>
        <type id="type.1582211" specialization="true">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1582183"/>
                <argumentType ref="type.1582204"/>
                <argumentType ref="type.1582186"/>
            </content>
        </type>
        <type derived="true" id="type.1582082">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;</name>
            <content>
                <baseType ref="type.1582076"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582217">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;</name>
            <content>
                <baseType ref="type.1582211"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582037">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;</name>
            <content>
                <baseType ref="type.1582031"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.968">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;</name>
            <content>
                <baseType ref="type.962"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582262">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;</name>
            <content>
                <baseType ref="type.1582256"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582172">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;</name>
            <content>
                <baseType ref="type.1582166"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582262">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;</name>
            <content>
                <baseType ref="type.1582256"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582127">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;</name>
            <content>
                <baseType ref="type.1582121"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.967">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.962"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1016">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582121"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1030">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582166"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.988">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582031"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1044">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582211"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1058">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582256"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1002">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582076"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582077">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>*</name>
            <content>
                <baseType ref="type.1582076"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582167">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>*</name>
            <content>
                <baseType ref="type.1582166"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582212">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>*</name>
            <content>
                <baseType ref="type.1582211"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.963">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>*</name>
            <content>
                <baseType ref="type.962"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582032">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>*</name>
            <content>
                <baseType ref="type.1582031"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582212">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>*</name>
            <content>
                <baseType ref="type.1582211"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582122">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>*</name>
            <content>
                <baseType ref="type.1582121"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582257">
            <name>RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>*</name>
            <content>
                <baseType ref="type.1582256"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1580272" specialization="true">
            <name>RandomAccessIter&lt;String&lt;char>, String&lt;char>&amp;, String&lt;char>*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1580238"/>
                <argumentType ref="type.1580260"/>
                <argumentType ref="type.1580239"/>
            </content>
        </type>
        <type derived="true" id="type.1580278">
            <name>RandomAccessIter&lt;String&lt;char>, String&lt;char>&amp;, String&lt;char>*>&amp;</name>
            <content>
                <baseType ref="type.1580272"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.11">
            <name>RandomAccessIter&lt;String&lt;char>, String&lt;char>&amp;, String&lt;char>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1580272"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580273">
            <name>RandomAccessIter&lt;String&lt;char>, String&lt;char>&amp;, String&lt;char>*>*</name>
            <content>
                <baseType ref="type.1580272"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1580265" specialization="true">
            <name>RandomAccessIter&lt;String&lt;char>, const String&lt;char>&amp;, const String&lt;char>*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1580238"/>
                <argumentType ref="type.1580258"/>
                <argumentType ref="type.1580241"/>
            </content>
        </type>
        <type derived="true" id="type.1580271">
            <name>RandomAccessIter&lt;String&lt;char>, const String&lt;char>&amp;, const String&lt;char>*>&amp;</name>
            <content>
                <baseType ref="type.1580265"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.8">
            <name>RandomAccessIter&lt;String&lt;char>, const String&lt;char>&amp;, const String&lt;char>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1580265"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580266">
            <name>RandomAccessIter&lt;String&lt;char>, const String&lt;char>&amp;, const String&lt;char>*>*</name>
            <content>
                <baseType ref="type.1580265"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1580397" specialization="true">
            <name>RandomAccessIter&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1580362"/>
                <argumentType ref="type.1580385"/>
                <argumentType ref="type.1580363"/>
            </content>
        </type>
        <type derived="true" id="type.1580403">
            <name>RandomAccessIter&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*>&amp;</name>
            <content>
                <baseType ref="type.1580397"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.43">
            <name>RandomAccessIter&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1580397"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580398">
            <name>RandomAccessIter&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*>*</name>
            <content>
                <baseType ref="type.1580397"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1580390" specialization="true">
            <name>RandomAccessIter&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1580362"/>
                <argumentType ref="type.1580383"/>
                <argumentType ref="type.1580365"/>
            </content>
        </type>
        <type derived="true" id="type.1580396">
            <name>RandomAccessIter&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*>&amp;</name>
            <content>
                <baseType ref="type.1580390"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.40">
            <name>RandomAccessIter&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1580390"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580391">
            <name>RandomAccessIter&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*>*</name>
            <content>
                <baseType ref="type.1580390"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1580353" specialization="true">
            <name>RandomAccessIter&lt;String&lt;wchar>, String&lt;wchar>&amp;, String&lt;wchar>*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1580318"/>
                <argumentType ref="type.1580341"/>
                <argumentType ref="type.1580319"/>
            </content>
        </type>
        <type derived="true" id="type.1580359">
            <name>RandomAccessIter&lt;String&lt;wchar>, String&lt;wchar>&amp;, String&lt;wchar>*>&amp;</name>
            <content>
                <baseType ref="type.1580353"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.31">
            <name>RandomAccessIter&lt;String&lt;wchar>, String&lt;wchar>&amp;, String&lt;wchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1580353"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580354">
            <name>RandomAccessIter&lt;String&lt;wchar>, String&lt;wchar>&amp;, String&lt;wchar>*>*</name>
            <content>
                <baseType ref="type.1580353"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1580346" specialization="true">
            <name>RandomAccessIter&lt;String&lt;wchar>, const String&lt;wchar>&amp;, const String&lt;wchar>*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1580318"/>
                <argumentType ref="type.1580339"/>
                <argumentType ref="type.1580321"/>
            </content>
        </type>
        <type derived="true" id="type.1580352">
            <name>RandomAccessIter&lt;String&lt;wchar>, const String&lt;wchar>&amp;, const String&lt;wchar>*>&amp;</name>
            <content>
                <baseType ref="type.1580346"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.28">
            <name>RandomAccessIter&lt;String&lt;wchar>, const String&lt;wchar>&amp;, const String&lt;wchar>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1580346"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580347">
            <name>RandomAccessIter&lt;String&lt;wchar>, const String&lt;wchar>&amp;, const String&lt;wchar>*>*</name>
            <content>
                <baseType ref="type.1580346"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1580296" specialization="true">
            <name>RandomAccessIter&lt;System.Ascii.CharClass, CharClass&amp;, CharClass*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="1579647"/>
                <argumentType ref="type.1580295"/>
                <argumentType ref="type.1580235"/>
            </content>
        </type>
        <type derived="true" id="type.1580302">
            <name>RandomAccessIter&lt;System.Ascii.CharClass, CharClass&amp;, CharClass*>&amp;</name>
            <content>
                <baseType ref="type.1580296"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.18">
            <name>RandomAccessIter&lt;System.Ascii.CharClass, CharClass&amp;, CharClass*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1580296"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580297">
            <name>RandomAccessIter&lt;System.Ascii.CharClass, CharClass&amp;, CharClass*>*</name>
            <content>
                <baseType ref="type.1580296"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1580288" specialization="true">
            <name>RandomAccessIter&lt;System.Ascii.CharClass, const CharClass&amp;, const CharClass*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="1579647"/>
                <argumentType ref="type.1580286"/>
                <argumentType ref="type.1580287"/>
            </content>
        </type>
        <type derived="true" id="type.1580294">
            <name>RandomAccessIter&lt;System.Ascii.CharClass, const CharClass&amp;, const CharClass*>&amp;</name>
            <content>
                <baseType ref="type.1580288"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.15">
            <name>RandomAccessIter&lt;System.Ascii.CharClass, const CharClass&amp;, const CharClass*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1580288"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580289">
            <name>RandomAccessIter&lt;System.Ascii.CharClass, const CharClass&amp;, const CharClass*>*</name>
            <content>
                <baseType ref="type.1580288"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583922" specialization="true">
            <name>RandomAccessIter&lt;System.Unicode.Alias, Alias&amp;, Alias*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="1580165"/>
                <argumentType ref="type.1583921"/>
                <argumentType ref="type.1580166"/>
            </content>
        </type>
        <type derived="true" id="type.1583928">
            <name>RandomAccessIter&lt;System.Unicode.Alias, Alias&amp;, Alias*>&amp;</name>
            <content>
                <baseType ref="type.1583922"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1366">
            <name>RandomAccessIter&lt;System.Unicode.Alias, Alias&amp;, Alias*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583922"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583923">
            <name>RandomAccessIter&lt;System.Unicode.Alias, Alias&amp;, Alias*>*</name>
            <content>
                <baseType ref="type.1583922"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583914" specialization="true">
            <name>RandomAccessIter&lt;System.Unicode.Alias, const Alias&amp;, const Alias*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="1580165"/>
                <argumentType ref="type.1583913"/>
                <argumentType ref="type.1580168"/>
            </content>
        </type>
        <type derived="true" id="type.1583920">
            <name>RandomAccessIter&lt;System.Unicode.Alias, const Alias&amp;, const Alias*>&amp;</name>
            <content>
                <baseType ref="type.1583914"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1363">
            <name>RandomAccessIter&lt;System.Unicode.Alias, const Alias&amp;, const Alias*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583914"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583915">
            <name>RandomAccessIter&lt;System.Unicode.Alias, const Alias&amp;, const Alias*>*</name>
            <content>
                <baseType ref="type.1583914"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1581658" specialization="true">
            <name>RandomAccessIter&lt;T, R, P></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="1580009"/>
                <argumentType ref="1580010"/>
                <argumentType ref="1580011"/>
            </content>
        </type>
        <type id="type.1581693" specialization="true">
            <name>RandomAccessIter&lt;T, R, P></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="1580024"/>
                <argumentType ref="1580025"/>
                <argumentType ref="1580026"/>
            </content>
        </type>
        <type id="type.1581686" specialization="true">
            <name>RandomAccessIter&lt;T, R, P></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="1580021"/>
                <argumentType ref="1580022"/>
                <argumentType ref="1580023"/>
            </content>
        </type>
        <type id="1580005">
            <name>RandomAccessIter&lt;T, R, P></name>
        </type>
        <type id="type.1581679" specialization="true">
            <name>RandomAccessIter&lt;T, R, P></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="1580018"/>
                <argumentType ref="1580019"/>
                <argumentType ref="1580020"/>
            </content>
        </type>
        <type id="type.1581672" specialization="true">
            <name>RandomAccessIter&lt;T, R, P></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="1580015"/>
                <argumentType ref="1580016"/>
                <argumentType ref="1580017"/>
            </content>
        </type>
        <type id="type.1581665" specialization="true">
            <name>RandomAccessIter&lt;T, R, P></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="1580012"/>
                <argumentType ref="1580013"/>
                <argumentType ref="1580014"/>
            </content>
        </type>
        <type id="type.1581693" specialization="true">
            <name>RandomAccessIter&lt;T, R, P></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="1580024"/>
                <argumentType ref="1580025"/>
                <argumentType ref="1580026"/>
            </content>
        </type>
        <type id="type.1581651" specialization="true">
            <name>RandomAccessIter&lt;T, R, P></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="1580006"/>
                <argumentType ref="1580007"/>
                <argumentType ref="1580008"/>
            </content>
        </type>
        <type derived="true" id="type.1581699">
            <name>RandomAccessIter&lt;T, R, P>&amp;</name>
            <content>
                <baseType ref="type.1581693"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581671">
            <name>RandomAccessIter&lt;T, R, P>&amp;</name>
            <content>
                <baseType ref="type.1581665"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.768">
            <name>RandomAccessIter&lt;T, R, P>&amp;</name>
            <content>
                <baseType ref="type.1581651"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581685">
            <name>RandomAccessIter&lt;T, R, P>&amp;</name>
            <content>
                <baseType ref="type.1581679"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581664">
            <name>RandomAccessIter&lt;T, R, P>&amp;</name>
            <content>
                <baseType ref="type.1581658"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581699">
            <name>RandomAccessIter&lt;T, R, P>&amp;</name>
            <content>
                <baseType ref="type.1581693"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581692">
            <name>RandomAccessIter&lt;T, R, P>&amp;</name>
            <content>
                <baseType ref="type.1581686"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581678">
            <name>RandomAccessIter&lt;T, R, P>&amp;</name>
            <content>
                <baseType ref="type.1581672"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.776">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.1581679"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.772">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.1581665"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.774">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.1581672"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.778">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.1581686"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.780">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.1581693"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.770">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.1581658"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.767">
            <name>RandomAccessIter&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.1581651"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581659">
            <name>RandomAccessIter&lt;T, R, P>*</name>
            <content>
                <baseType ref="type.1581658"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.763">
            <name>RandomAccessIter&lt;T, R, P>*</name>
            <content>
                <baseType ref="type.1581651"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581680">
            <name>RandomAccessIter&lt;T, R, P>*</name>
            <content>
                <baseType ref="type.1581679"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581673">
            <name>RandomAccessIter&lt;T, R, P>*</name>
            <content>
                <baseType ref="type.1581672"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581687">
            <name>RandomAccessIter&lt;T, R, P>*</name>
            <content>
                <baseType ref="type.1581686"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581666">
            <name>RandomAccessIter&lt;T, R, P>*</name>
            <content>
                <baseType ref="type.1581665"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581694">
            <name>RandomAccessIter&lt;T, R, P>*</name>
            <content>
                <baseType ref="type.1581693"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1581438" specialization="true">
            <name>RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="1579968"/>
                <argumentType ref="type.1581436"/>
                <argumentType ref="type.1581437"/>
            </content>
        </type>
        <type id="type.624" specialization="true">
            <name>RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="1579967"/>
                <argumentType ref="type.622"/>
                <argumentType ref="type.623"/>
            </content>
        </type>
        <type id="type.1581438" specialization="true">
            <name>RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="1579968"/>
                <argumentType ref="type.1581436"/>
                <argumentType ref="type.1581437"/>
            </content>
        </type>
        <type id="type.754" specialization="true">
            <name>RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="1580004"/>
                <argumentType ref="type.752"/>
                <argumentType ref="type.753"/>
            </content>
        </type>
        <type id="type.925" specialization="true">
            <name>RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="1580055"/>
                <argumentType ref="type.911"/>
                <argumentType ref="type.924"/>
            </content>
        </type>
        <type id="type.1581463" specialization="true">
            <name>RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="1579969"/>
                <argumentType ref="type.1581461"/>
                <argumentType ref="type.1581462"/>
            </content>
        </type>
        <type derived="true" id="type.1581469">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <baseType ref="type.1581463"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581444">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <baseType ref="type.1581438"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.760">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <baseType ref="type.754"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581444">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <baseType ref="type.1581438"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.931">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <baseType ref="type.925"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.630">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <baseType ref="type.624"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.759">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.754"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.640">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1581438"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.647">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1581463"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.629">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.624"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.930">
            <name>RandomAccessIter&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.925"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581464">
            <name>RandomAccessIter&lt;T, T&amp;, T*>*</name>
            <content>
                <baseType ref="type.1581463"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.926">
            <name>RandomAccessIter&lt;T, T&amp;, T*>*</name>
            <content>
                <baseType ref="type.925"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.625">
            <name>RandomAccessIter&lt;T, T&amp;, T*>*</name>
            <content>
                <baseType ref="type.624"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.755">
            <name>RandomAccessIter&lt;T, T&amp;, T*>*</name>
            <content>
                <baseType ref="type.754"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581439">
            <name>RandomAccessIter&lt;T, T&amp;, T*>*</name>
            <content>
                <baseType ref="type.1581438"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1581429" specialization="true">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="1579968"/>
                <argumentType ref="type.1581427"/>
                <argumentType ref="type.1581428"/>
            </content>
        </type>
        <type id="type.615" specialization="true">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="1579967"/>
                <argumentType ref="type.613"/>
                <argumentType ref="type.614"/>
            </content>
        </type>
        <type id="type.917" specialization="true">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="1580055"/>
                <argumentType ref="type.909"/>
                <argumentType ref="type.916"/>
            </content>
        </type>
        <type id="type.745" specialization="true">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="1580004"/>
                <argumentType ref="type.738"/>
                <argumentType ref="type.744"/>
            </content>
        </type>
        <type id="type.1581454" specialization="true">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="1579969"/>
                <argumentType ref="type.1581452"/>
                <argumentType ref="type.1581453"/>
            </content>
        </type>
        <type derived="true" id="type.1581435">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <baseType ref="type.1581429"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.923">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <baseType ref="type.917"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581435">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <baseType ref="type.1581429"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.751">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <baseType ref="type.745"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581460">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <baseType ref="type.1581454"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.621">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <baseType ref="type.615"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.620">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.615"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.644">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1581454"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.750">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.745"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.922">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.917"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.637">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1581429"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.616">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>*</name>
            <content>
                <baseType ref="type.615"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581455">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>*</name>
            <content>
                <baseType ref="type.1581454"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.918">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>*</name>
            <content>
                <baseType ref="type.917"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.746">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>*</name>
            <content>
                <baseType ref="type.745"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581430">
            <name>RandomAccessIter&lt;T, const T&amp;, const T*>*</name>
            <content>
                <baseType ref="type.1581429"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583952" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, UniquePtr&lt;System.Unicode.CharacterInfo>*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1583933"/>
                <argumentType ref="type.1583940"/>
                <argumentType ref="type.1583934"/>
            </content>
        </type>
        <type derived="true" id="type.1583958">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, UniquePtr&lt;System.Unicode.CharacterInfo>*>&amp;</name>
            <content>
                <baseType ref="type.1583952"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1374">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, UniquePtr&lt;System.Unicode.CharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583952"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583953">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, UniquePtr&lt;System.Unicode.CharacterInfo>*>*</name>
            <content>
                <baseType ref="type.1583952"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583945" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, const UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfo>*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1583933"/>
                <argumentType ref="type.1583937"/>
                <argumentType ref="type.1583936"/>
            </content>
        </type>
        <type derived="true" id="type.1583951">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, const UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfo>*>&amp;</name>
            <content>
                <baseType ref="type.1583945"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1371">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, const UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583945"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583946">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, const UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfo>*>*</name>
            <content>
                <baseType ref="type.1583945"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1584042" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.CharacterInfoPage>*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1584022"/>
                <argumentType ref="type.1584030"/>
                <argumentType ref="type.1584023"/>
            </content>
        </type>
        <type derived="true" id="type.1584048">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.CharacterInfoPage>*>&amp;</name>
            <content>
                <baseType ref="type.1584042"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1398">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.CharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1584042"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584043">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.CharacterInfoPage>*>*</name>
            <content>
                <baseType ref="type.1584042"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1584035" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, const UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfoPage>*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1584022"/>
                <argumentType ref="type.1584026"/>
                <argumentType ref="type.1584025"/>
            </content>
        </type>
        <type derived="true" id="type.1584041">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, const UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfoPage>*>&amp;</name>
            <content>
                <baseType ref="type.1584035"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1395">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, const UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1584035"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584036">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, const UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfoPage>*>*</name>
            <content>
                <baseType ref="type.1584035"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583981" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1583962"/>
                <argumentType ref="type.1583969"/>
                <argumentType ref="type.1583963"/>
            </content>
        </type>
        <type derived="true" id="type.1583987">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*>&amp;</name>
            <content>
                <baseType ref="type.1583981"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1382">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583981"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583982">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*>*</name>
            <content>
                <baseType ref="type.1583981"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583974" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1583962"/>
                <argumentType ref="type.1583966"/>
                <argumentType ref="type.1583965"/>
            </content>
        </type>
        <type derived="true" id="type.1583980">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*>&amp;</name>
            <content>
                <baseType ref="type.1583974"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1379">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583974"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583975">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*>*</name>
            <content>
                <baseType ref="type.1583974"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1584080" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1584060"/>
                <argumentType ref="type.1584068"/>
                <argumentType ref="type.1584061"/>
            </content>
        </type>
        <type derived="true" id="type.1584086">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*>&amp;</name>
            <content>
                <baseType ref="type.1584080"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1407">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1584080"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584081">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*>*</name>
            <content>
                <baseType ref="type.1584080"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1584073" specialization="true">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1584060"/>
                <argumentType ref="type.1584064"/>
                <argumentType ref="type.1584063"/>
            </content>
        </type>
        <type derived="true" id="type.1584079">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*>&amp;</name>
            <content>
                <baseType ref="type.1584073"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1404">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1584073"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584074">
            <name>RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*>*</name>
            <content>
                <baseType ref="type.1584073"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1581551" specialization="true">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1579452"/>
                <argumentType ref="type.1580472"/>
                <argumentType ref="type.1579470"/>
            </content>
        </type>
        <type derived="true" id="type.1581557">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <baseType ref="type.1581551"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.707">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1581551"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581552">
            <name>RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <baseType ref="type.1581551"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1581544" specialization="true">
            <name>RandomAccessIter&lt;byte, const byte&amp;, const byte*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1579452"/>
                <argumentType ref="type.1581543"/>
                <argumentType ref="type.1581538"/>
            </content>
        </type>
        <type derived="true" id="type.1581550">
            <name>RandomAccessIter&lt;byte, const byte&amp;, const byte*>&amp;</name>
            <content>
                <baseType ref="type.1581544"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581549">
            <name>RandomAccessIter&lt;byte, const byte&amp;, const byte*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1581544"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581545">
            <name>RandomAccessIter&lt;byte, const byte&amp;, const byte*>*</name>
            <content>
                <baseType ref="type.1581544"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1580251" specialization="true">
            <name>RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1579461"/>
                <argumentType ref="type.1580250"/>
                <argumentType ref="type.1579488"/>
            </content>
        </type>
        <type derived="true" id="type.1580257">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <baseType ref="type.1580251"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580256">
            <name>RandomAccessIter&lt;char, char&amp;, char*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1580251"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580252">
            <name>RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <baseType ref="type.1580251"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1580243" specialization="true">
            <name>RandomAccessIter&lt;char, const char&amp;, const char*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1579461"/>
                <argumentType ref="type.1580242"/>
                <argumentType ref="type.1579514"/>
            </content>
        </type>
        <type derived="true" id="type.1580249">
            <name>RandomAccessIter&lt;char, const char&amp;, const char*>&amp;</name>
            <content>
                <baseType ref="type.1580243"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580248">
            <name>RandomAccessIter&lt;char, const char&amp;, const char*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1580243"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580244">
            <name>RandomAccessIter&lt;char, const char&amp;, const char*>*</name>
            <content>
                <baseType ref="type.1580243"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1581155" specialization="true">
            <name>RandomAccessIter&lt;long, const long&amp;, const long*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1579457"/>
                <argumentType ref="type.1581153"/>
                <argumentType ref="type.1581154"/>
            </content>
        </type>
        <type derived="true" id="type.1581161">
            <name>RandomAccessIter&lt;long, const long&amp;, const long*>&amp;</name>
            <content>
                <baseType ref="type.1581155"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581160">
            <name>RandomAccessIter&lt;long, const long&amp;, const long*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1581155"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581156">
            <name>RandomAccessIter&lt;long, const long&amp;, const long*>*</name>
            <content>
                <baseType ref="type.1581155"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1581162" specialization="true">
            <name>RandomAccessIter&lt;long, long&amp;, long*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1579457"/>
                <argumentType ref="type.1580477"/>
                <argumentType ref="type.1579480"/>
            </content>
        </type>
        <type derived="true" id="type.1581168">
            <name>RandomAccessIter&lt;long, long&amp;, long*>&amp;</name>
            <content>
                <baseType ref="type.1581162"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581167">
            <name>RandomAccessIter&lt;long, long&amp;, long*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1581162"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581163">
            <name>RandomAccessIter&lt;long, long&amp;, long*>*</name>
            <content>
                <baseType ref="type.1581162"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1580368" specialization="true">
            <name>RandomAccessIter&lt;uchar, const uchar&amp;, const uchar*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1579463"/>
                <argumentType ref="type.1580366"/>
                <argumentType ref="type.1580367"/>
            </content>
        </type>
        <type derived="true" id="type.1580374">
            <name>RandomAccessIter&lt;uchar, const uchar&amp;, const uchar*>&amp;</name>
            <content>
                <baseType ref="type.1580368"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580373">
            <name>RandomAccessIter&lt;uchar, const uchar&amp;, const uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1580368"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580369">
            <name>RandomAccessIter&lt;uchar, const uchar&amp;, const uchar*>*</name>
            <content>
                <baseType ref="type.1580368"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1580376" specialization="true">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1579463"/>
                <argumentType ref="type.1580375"/>
                <argumentType ref="type.1579492"/>
            </content>
        </type>
        <type derived="true" id="type.1580382">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <baseType ref="type.1580376"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.36">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1580376"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580377">
            <name>RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <baseType ref="type.1580376"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583996" specialization="true">
            <name>RandomAccessIter&lt;uint, const uint&amp;, const uint*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1579456"/>
                <argumentType ref="type.1583994"/>
                <argumentType ref="type.1583995"/>
            </content>
        </type>
        <type derived="true" id="type.1584002">
            <name>RandomAccessIter&lt;uint, const uint&amp;, const uint*>&amp;</name>
            <content>
                <baseType ref="type.1583996"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1386">
            <name>RandomAccessIter&lt;uint, const uint&amp;, const uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583996"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583997">
            <name>RandomAccessIter&lt;uint, const uint&amp;, const uint*>*</name>
            <content>
                <baseType ref="type.1583996"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1584003" specialization="true">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1579456"/>
                <argumentType ref="type.1580476"/>
                <argumentType ref="type.1579478"/>
            </content>
        </type>
        <type derived="true" id="type.1584009">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <baseType ref="type.1584003"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1389">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1584003"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584004">
            <name>RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <baseType ref="type.1584003"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1580418" specialization="true">
            <name>RandomAccessIter&lt;ulong, const ulong&amp;, const ulong*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1579458"/>
                <argumentType ref="type.1580416"/>
                <argumentType ref="type.1580417"/>
            </content>
        </type>
        <type derived="true" id="type.1580424">
            <name>RandomAccessIter&lt;ulong, const ulong&amp;, const ulong*>&amp;</name>
            <content>
                <baseType ref="type.1580418"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.47">
            <name>RandomAccessIter&lt;ulong, const ulong&amp;, const ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1580418"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580419">
            <name>RandomAccessIter&lt;ulong, const ulong&amp;, const ulong*>*</name>
            <content>
                <baseType ref="type.1580418"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1580425" specialization="true">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1579458"/>
                <argumentType ref="type.1580411"/>
                <argumentType ref="type.1579482"/>
            </content>
        </type>
        <type derived="true" id="type.1580431">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <baseType ref="type.1580425"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.50">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1580425"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580426">
            <name>RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <baseType ref="type.1580425"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1580324" specialization="true">
            <name>RandomAccessIter&lt;wchar, const wchar&amp;, const wchar*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1579462"/>
                <argumentType ref="type.1580322"/>
                <argumentType ref="type.1580323"/>
            </content>
        </type>
        <type derived="true" id="type.1580330">
            <name>RandomAccessIter&lt;wchar, const wchar&amp;, const wchar*>&amp;</name>
            <content>
                <baseType ref="type.1580324"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580329">
            <name>RandomAccessIter&lt;wchar, const wchar&amp;, const wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1580324"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580325">
            <name>RandomAccessIter&lt;wchar, const wchar&amp;, const wchar*>*</name>
            <content>
                <baseType ref="type.1580324"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1580332" specialization="true">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <primaryType ref="1581651"/>
                <argumentType ref="type.1579462"/>
                <argumentType ref="type.1580331"/>
                <argumentType ref="type.1579490"/>
            </content>
        </type>
        <type derived="true" id="type.1580338">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <baseType ref="type.1580332"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.24">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1580332"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580333">
            <name>RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <baseType ref="type.1580332"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.664" specialization="true">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare></name>
            <content>
                <primaryType ref="1581732"/>
                <argumentType ref="1579974"/>
                <argumentType ref="type.651"/>
                <argumentType ref="type.657"/>
                <argumentType ref="1579976"/>
            </content>
        </type>
        <type derived="true" id="type.689">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;&amp;</name>
            <content>
                <baseType ref="type.664"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.665">
            <name>RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>*</name>
            <content>
                <baseType ref="type.664"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1581732" specialization="true">
            <name>RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare></name>
            <content>
                <primaryType ref="1581732"/>
                <argumentType ref="1580042"/>
                <argumentType ref="1580043"/>
                <argumentType ref="1580044"/>
                <argumentType ref="1580045"/>
            </content>
        </type>
        <type id="1580041">
            <name>RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare></name>
        </type>
        <type derived="true" id="type.827">
            <name>RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare>&amp;&amp;</name>
            <content>
                <baseType ref="type.1581732"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.801">
            <name>RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare>*</name>
            <content>
                <baseType ref="type.1581732"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1581883" specialization="true">
            <name>RedBlackTree&lt;T, T, Identity&lt;T>, C></name>
            <content>
                <primaryType ref="1581732"/>
                <argumentType ref="1580052"/>
                <argumentType ref="1580052"/>
                <argumentType ref="type.1581876"/>
                <argumentType ref="1580053"/>
            </content>
        </type>
        <type id="type.850" specialization="true">
            <name>RedBlackTree&lt;T, T, Identity&lt;T>, C></name>
            <content>
                <primaryType ref="1581732"/>
                <argumentType ref="1580048"/>
                <argumentType ref="1580048"/>
                <argumentType ref="type.843"/>
                <argumentType ref="1580049"/>
            </content>
        </type>
        <type id="type.1581833" specialization="true">
            <name>RedBlackTree&lt;T, T, Identity&lt;T>, C></name>
            <content>
                <primaryType ref="1581732"/>
                <argumentType ref="1580050"/>
                <argumentType ref="1580050"/>
                <argumentType ref="type.1581826"/>
                <argumentType ref="1580051"/>
            </content>
        </type>
        <type derived="true" id="type.876">
            <name>RedBlackTree&lt;T, T, Identity&lt;T>, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.850"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581909">
            <name>RedBlackTree&lt;T, T, Identity&lt;T>, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.1581883"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581859">
            <name>RedBlackTree&lt;T, T, Identity&lt;T>, C>&amp;&amp;</name>
            <content>
                <baseType ref="type.1581833"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.851">
            <name>RedBlackTree&lt;T, T, Identity&lt;T>, C>*</name>
            <content>
                <baseType ref="type.850"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581834">
            <name>RedBlackTree&lt;T, T, Identity&lt;T>, C>*</name>
            <content>
                <baseType ref="type.1581833"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581884">
            <name>RedBlackTree&lt;T, T, Identity&lt;T>, C>*</name>
            <content>
                <baseType ref="type.1581883"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.673" specialization="true">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>></name>
            <content>
                <primaryType ref="1581700"/>
                <argumentType ref="type.651"/>
            </content>
        </type>
        <type derived="true" id="type.698">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>>&amp;</name>
            <content>
                <baseType ref="type.673"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.674">
            <name>RedBlackTreeNode&lt;Pair&lt;Key, Value>>*</name>
            <content>
                <baseType ref="type.673"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1581892" specialization="true">
            <name>RedBlackTreeNode&lt;T></name>
            <content>
                <primaryType ref="1581700"/>
                <argumentType ref="1580052"/>
            </content>
        </type>
        <type id="type.1581723" specialization="true">
            <name>RedBlackTreeNode&lt;T></name>
            <content>
                <primaryType ref="1581700"/>
                <argumentType ref="1580038"/>
            </content>
        </type>
        <type id="type.1581892" specialization="true">
            <name>RedBlackTreeNode&lt;T></name>
            <content>
                <primaryType ref="1581700"/>
                <argumentType ref="1580052"/>
            </content>
        </type>
        <type id="type.1581700" specialization="true">
            <name>RedBlackTreeNode&lt;T></name>
            <content>
                <primaryType ref="1581700"/>
                <argumentType ref="1580033"/>
            </content>
        </type>
        <type id="type.859" specialization="true">
            <name>RedBlackTreeNode&lt;T></name>
            <content>
                <primaryType ref="1581700"/>
                <argumentType ref="1580048"/>
            </content>
        </type>
        <type id="1580032">
            <name>RedBlackTreeNode&lt;T></name>
        </type>
        <type id="type.789" specialization="true">
            <name>RedBlackTreeNode&lt;T></name>
            <content>
                <primaryType ref="1581700"/>
                <argumentType ref="1580035"/>
            </content>
        </type>
        <type id="type.1581842" specialization="true">
            <name>RedBlackTreeNode&lt;T></name>
            <content>
                <primaryType ref="1581700"/>
                <argumentType ref="1580050"/>
            </content>
        </type>
        <type derived="true" id="type.1581868">
            <name>RedBlackTreeNode&lt;T>&amp;</name>
            <content>
                <baseType ref="type.1581842"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581918">
            <name>RedBlackTreeNode&lt;T>&amp;</name>
            <content>
                <baseType ref="type.1581892"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.885">
            <name>RedBlackTreeNode&lt;T>&amp;</name>
            <content>
                <baseType ref="type.859"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581918">
            <name>RedBlackTreeNode&lt;T>&amp;</name>
            <content>
                <baseType ref="type.1581892"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581893">
            <name>RedBlackTreeNode&lt;T>*</name>
            <content>
                <baseType ref="type.1581892"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581724">
            <name>RedBlackTreeNode&lt;T>*</name>
            <content>
                <baseType ref="type.1581723"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581843">
            <name>RedBlackTreeNode&lt;T>*</name>
            <content>
                <baseType ref="type.1581842"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.860">
            <name>RedBlackTreeNode&lt;T>*</name>
            <content>
                <baseType ref="type.859"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581893">
            <name>RedBlackTreeNode&lt;T>*</name>
            <content>
                <baseType ref="type.1581892"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.790">
            <name>RedBlackTreeNode&lt;T>*</name>
            <content>
                <baseType ref="type.789"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.781">
            <name>RedBlackTreeNode&lt;T>*</name>
            <content>
                <baseType ref="type.1581700"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.810" specialization="true">
            <name>RedBlackTreeNode&lt;ValueType></name>
            <content>
                <primaryType ref="1581700"/>
                <argumentType ref="1580043"/>
            </content>
        </type>
        <type derived="true" id="type.837">
            <name>RedBlackTreeNode&lt;ValueType>&amp;</name>
            <content>
                <baseType ref="type.810"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.811">
            <name>RedBlackTreeNode&lt;ValueType>*</name>
            <content>
                <baseType ref="type.810"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1580027">
            <name>RedBlackTreeNodeBase</name>
        </type>
        <type derived="true" id="type.1447">
            <name>RedBlackTreeNodeBase&amp;&amp;</name>
            <content>
                <baseType ref="1580027"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580029">
            <name>RedBlackTreeNodeBase*</name>
            <content>
                <baseType ref="1580027"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1">
            <name>RedBlackTreeNodeBase*</name>
            <content>
                <baseType ref="1580027"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581510">
            <name>RedBlackTreeNodeBase*&amp;</name>
            <content>
                <baseType ref="1580027"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type id="type.681" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="1581706"/>
                <argumentType ref="type.651"/>
                <argumentType ref="type.677"/>
                <argumentType ref="type.652"/>
            </content>
        </type>
        <type derived="true" id="type.687">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <baseType ref="type.681"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.686">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.681"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.682">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>*</name>
            <content>
                <baseType ref="type.681"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.669" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <primaryType ref="1581706"/>
                <argumentType ref="type.651"/>
                <argumentType ref="type.662"/>
                <argumentType ref="type.668"/>
            </content>
        </type>
        <type derived="true" id="type.680">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <baseType ref="type.669"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.679">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;&amp;</name>
            <content>
                <baseType ref="type.669"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.670">
            <name>RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>*</name>
            <content>
                <baseType ref="type.669"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1581719" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, R, P></name>
            <content>
                <primaryType ref="1581706"/>
                <argumentType ref="1580038"/>
                <argumentType ref="1580039"/>
                <argumentType ref="1580040"/>
            </content>
        </type>
        <type id="type.1581706" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, R, P></name>
            <content>
                <primaryType ref="1581706"/>
                <argumentType ref="1580035"/>
                <argumentType ref="1580036"/>
                <argumentType ref="1580037"/>
            </content>
        </type>
        <type id="type.1581719" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, R, P></name>
            <content>
                <primaryType ref="1581706"/>
                <argumentType ref="1580038"/>
                <argumentType ref="1580039"/>
                <argumentType ref="1580040"/>
            </content>
        </type>
        <type id="1580034">
            <name>RedBlackTreeNodeIterator&lt;T, R, P></name>
        </type>
        <type derived="true" id="type.1581731">
            <name>RedBlackTreeNodeIterator&lt;T, R, P>&amp;</name>
            <content>
                <baseType ref="type.1581719"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.797">
            <name>RedBlackTreeNodeIterator&lt;T, R, P>&amp;</name>
            <content>
                <baseType ref="type.1581706"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581731">
            <name>RedBlackTreeNodeIterator&lt;T, R, P>&amp;</name>
            <content>
                <baseType ref="type.1581719"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.796">
            <name>RedBlackTreeNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.1581706"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.800">
            <name>RedBlackTreeNodeIterator&lt;T, R, P>&amp;&amp;</name>
            <content>
                <baseType ref="type.1581719"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581720">
            <name>RedBlackTreeNodeIterator&lt;T, R, P>*</name>
            <content>
                <baseType ref="type.1581719"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.786">
            <name>RedBlackTreeNodeIterator&lt;T, R, P>*</name>
            <content>
                <baseType ref="type.1581706"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581720">
            <name>RedBlackTreeNodeIterator&lt;T, R, P>*</name>
            <content>
                <baseType ref="type.1581719"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1581901" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="1581706"/>
                <argumentType ref="1580052"/>
                <argumentType ref="type.1581896"/>
                <argumentType ref="type.1581900"/>
            </content>
        </type>
        <type id="type.868" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="1581706"/>
                <argumentType ref="1580048"/>
                <argumentType ref="type.863"/>
                <argumentType ref="type.867"/>
            </content>
        </type>
        <type id="type.1581901" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="1581706"/>
                <argumentType ref="1580052"/>
                <argumentType ref="type.1581896"/>
                <argumentType ref="type.1581900"/>
            </content>
        </type>
        <type id="type.1581851" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <primaryType ref="1581706"/>
                <argumentType ref="1580050"/>
                <argumentType ref="type.1581846"/>
                <argumentType ref="type.1581850"/>
            </content>
        </type>
        <type derived="true" id="type.1581907">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <baseType ref="type.1581901"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.874">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <baseType ref="type.868"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581857">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <baseType ref="type.1581851"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581906">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1581901"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581856">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1581851"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581906">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1581901"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.873">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.868"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.869">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*>*</name>
            <content>
                <baseType ref="type.868"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581852">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*>*</name>
            <content>
                <baseType ref="type.1581851"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581902">
            <name>RedBlackTreeNodeIterator&lt;T, T&amp;, T*>*</name>
            <content>
                <baseType ref="type.1581901"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1581838" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="1581706"/>
                <argumentType ref="1580050"/>
                <argumentType ref="type.1581831"/>
                <argumentType ref="type.1581837"/>
            </content>
        </type>
        <type id="type.1581888" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="1581706"/>
                <argumentType ref="1580052"/>
                <argumentType ref="type.1581881"/>
                <argumentType ref="type.1581887"/>
            </content>
        </type>
        <type id="type.855" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="1581706"/>
                <argumentType ref="1580048"/>
                <argumentType ref="type.848"/>
                <argumentType ref="type.854"/>
            </content>
        </type>
        <type id="type.1581888" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <primaryType ref="1581706"/>
                <argumentType ref="1580052"/>
                <argumentType ref="type.1581881"/>
                <argumentType ref="type.1581887"/>
            </content>
        </type>
        <type derived="true" id="type.1581899">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <baseType ref="type.1581888"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581849">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <baseType ref="type.1581838"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.866">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <baseType ref="type.855"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.894">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1581838"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.903">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1581888"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.865">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;&amp;</name>
            <content>
                <baseType ref="type.855"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581889">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>*</name>
            <content>
                <baseType ref="type.1581888"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581839">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>*</name>
            <content>
                <baseType ref="type.1581838"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.856">
            <name>RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>*</name>
            <content>
                <baseType ref="type.855"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.819" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*></name>
            <content>
                <primaryType ref="1581706"/>
                <argumentType ref="1580043"/>
                <argumentType ref="type.814"/>
                <argumentType ref="type.818"/>
            </content>
        </type>
        <type derived="true" id="type.825">
            <name>RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*>&amp;</name>
            <content>
                <baseType ref="type.819"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.824">
            <name>RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.819"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.820">
            <name>RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*>*</name>
            <content>
                <baseType ref="type.819"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.806" specialization="true">
            <name>RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*></name>
            <content>
                <primaryType ref="1581706"/>
                <argumentType ref="1580043"/>
                <argumentType ref="type.804"/>
                <argumentType ref="type.805"/>
            </content>
        </type>
        <type derived="true" id="type.817">
            <name>RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*>&amp;</name>
            <content>
                <baseType ref="type.806"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.816">
            <name>RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.806"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.807">
            <name>RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*>*</name>
            <content>
                <baseType ref="type.806"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1579865">
            <name>Rel&lt;Argument></name>
        </type>
        <type id="type.1580681" specialization="true">
            <name>Rel&lt;Argument></name>
            <content>
                <primaryType ref="1580681"/>
                <argumentType ref="1579866"/>
            </content>
        </type>
        <type id="type.1582372" specialization="true">
            <name>Rel&lt;String&lt;char>></name>
            <content>
                <primaryType ref="1580681"/>
                <argumentType ref="type.1580238"/>
            </content>
        </type>
        <type derived="true" id="type.1584339">
            <name>Rel&lt;String&lt;char>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582372"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582377">
            <name>Rel&lt;String&lt;char>>*</name>
            <content>
                <baseType ref="type.1582372"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582845" specialization="true">
            <name>Rel&lt;System.Unicode.AgeId></name>
            <content>
                <primaryType ref="1580681"/>
                <argumentType ref="1580107"/>
            </content>
        </type>
        <type derived="true" id="type.1584568">
            <name>Rel&lt;System.Unicode.AgeId>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582845"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582850">
            <name>Rel&lt;System.Unicode.AgeId>*</name>
            <content>
                <baseType ref="type.1582845"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583741" specialization="true">
            <name>Rel&lt;System.Unicode.AliasTypeId></name>
            <content>
                <primaryType ref="1580681"/>
                <argumentType ref="1580156"/>
            </content>
        </type>
        <type derived="true" id="type.1584973">
            <name>Rel&lt;System.Unicode.AliasTypeId>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583741"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583746">
            <name>Rel&lt;System.Unicode.AliasTypeId>*</name>
            <content>
                <baseType ref="type.1583741"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583383" specialization="true">
            <name>Rel&lt;System.Unicode.BidiClassId></name>
            <content>
                <primaryType ref="1580681"/>
                <argumentType ref="1580138"/>
            </content>
        </type>
        <type derived="true" id="type.1584811">
            <name>Rel&lt;System.Unicode.BidiClassId>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583383"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583388">
            <name>Rel&lt;System.Unicode.BidiClassId>*</name>
            <content>
                <baseType ref="type.1583383"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583562" specialization="true">
            <name>Rel&lt;System.Unicode.BidiPairedBracketTypeId></name>
            <content>
                <primaryType ref="1580681"/>
                <argumentType ref="1580147"/>
            </content>
        </type>
        <type derived="true" id="type.1584892">
            <name>Rel&lt;System.Unicode.BidiPairedBracketTypeId>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583562"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583567">
            <name>Rel&lt;System.Unicode.BidiPairedBracketTypeId>*</name>
            <content>
                <baseType ref="type.1583562"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582291" specialization="true">
            <name>Rel&lt;System.Unicode.BinaryPropertyId></name>
            <content>
                <primaryType ref="1580681"/>
                <argumentType ref="1580086"/>
            </content>
        </type>
        <type derived="true" id="type.1584303">
            <name>Rel&lt;System.Unicode.BinaryPropertyId>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582291"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582296">
            <name>Rel&lt;System.Unicode.BinaryPropertyId>*</name>
            <content>
                <baseType ref="type.1582291"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582485" specialization="true">
            <name>Rel&lt;System.Unicode.BlockId></name>
            <content>
                <primaryType ref="1580681"/>
                <argumentType ref="1580093"/>
            </content>
        </type>
        <type derived="true" id="type.1584406">
            <name>Rel&lt;System.Unicode.BlockId>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582485"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582490">
            <name>Rel&lt;System.Unicode.BlockId>*</name>
            <content>
                <baseType ref="type.1582485"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582666" specialization="true">
            <name>Rel&lt;System.Unicode.GeneralCategoryId></name>
            <content>
                <primaryType ref="1580681"/>
                <argumentType ref="1580100"/>
            </content>
        </type>
        <type derived="true" id="type.1584487">
            <name>Rel&lt;System.Unicode.GeneralCategoryId>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582666"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582671">
            <name>Rel&lt;System.Unicode.GeneralCategoryId>*</name>
            <content>
                <baseType ref="type.1582666"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583204" specialization="true">
            <name>Rel&lt;System.Unicode.NumericTypeId></name>
            <content>
                <primaryType ref="1580681"/>
                <argumentType ref="1580129"/>
            </content>
        </type>
        <type derived="true" id="type.1584730">
            <name>Rel&lt;System.Unicode.NumericTypeId>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583204"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583209">
            <name>Rel&lt;System.Unicode.NumericTypeId>*</name>
            <content>
                <baseType ref="type.1583204"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583024" specialization="true">
            <name>Rel&lt;System.Unicode.ScriptId></name>
            <content>
                <primaryType ref="1580681"/>
                <argumentType ref="1580116"/>
            </content>
        </type>
        <type derived="true" id="type.1584649">
            <name>Rel&lt;System.Unicode.ScriptId>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583024"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583029">
            <name>Rel&lt;System.Unicode.ScriptId>*</name>
            <content>
                <baseType ref="type.1583024"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.180" specialization="true">
            <name>Rel&lt;T></name>
            <content>
                <primaryType ref="1580681"/>
                <argumentType ref="1579875"/>
            </content>
        </type>
        <type id="type.163" specialization="true">
            <name>Rel&lt;T></name>
            <content>
                <primaryType ref="1580681"/>
                <argumentType ref="1579870"/>
            </content>
        </type>
        <type id="type.231" specialization="true">
            <name>Rel&lt;T></name>
            <content>
                <primaryType ref="1580681"/>
                <argumentType ref="1579890"/>
            </content>
        </type>
        <type id="type.248" specialization="true">
            <name>Rel&lt;T></name>
            <content>
                <primaryType ref="1580681"/>
                <argumentType ref="1579895"/>
            </content>
        </type>
        <type id="type.197" specialization="true">
            <name>Rel&lt;T></name>
            <content>
                <primaryType ref="1580681"/>
                <argumentType ref="1579880"/>
            </content>
        </type>
        <type id="type.214" specialization="true">
            <name>Rel&lt;T></name>
            <content>
                <primaryType ref="1580681"/>
                <argumentType ref="1579885"/>
            </content>
        </type>
        <type derived="true" id="type.253">
            <name>Rel&lt;T>*</name>
            <content>
                <baseType ref="type.248"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.219">
            <name>Rel&lt;T>*</name>
            <content>
                <baseType ref="type.214"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.168">
            <name>Rel&lt;T>*</name>
            <content>
                <baseType ref="type.163"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.236">
            <name>Rel&lt;T>*</name>
            <content>
                <baseType ref="type.231"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.185">
            <name>Rel&lt;T>*</name>
            <content>
                <baseType ref="type.180"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.202">
            <name>Rel&lt;T>*</name>
            <content>
                <baseType ref="type.197"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1580666" specialization="true">
            <name>Remainder&lt;T></name>
            <content>
                <primaryType ref="1580666"/>
                <argumentType ref="1579859"/>
            </content>
        </type>
        <type id="1579858">
            <name>Remainder&lt;T></name>
        </type>
        <type id="type.1580666" specialization="true">
            <name>Remainder&lt;T></name>
            <content>
                <primaryType ref="1580666"/>
                <argumentType ref="1579859"/>
            </content>
        </type>
        <type id="1579845">
            <name>Result</name>
        </type>
        <type id="1580117">
            <name>Script</name>
        </type>
        <type derived="true" id="type.1580118">
            <name>Script*</name>
            <content>
                <baseType ref="1580117"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583097">
            <name>Script*&amp;</name>
            <content>
                <baseType ref="1580117"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583038">
            <name>Script*&amp;&amp;</name>
            <content>
                <baseType ref="1580117"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583182">
            <name>Script**</name>
            <content>
                <baseType ref="1580117"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584689">
            <name>Script**&amp;&amp;</name>
            <content>
                <baseType ref="1580117"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="1580116">
            <name>ScriptId</name>
        </type>
        <type derived="true" id="type.1584633">
            <name>ScriptId&amp;</name>
            <content>
                <baseType ref="1580116"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583014">
            <name>ScriptId&amp;&amp;</name>
            <content>
                <baseType ref="1580116"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583013">
            <name>ScriptId*</name>
            <content>
                <baseType ref="1580116"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1580121">
            <name>ScriptTable</name>
        </type>
        <type derived="true" id="type.1583015">
            <name>ScriptTable&amp;</name>
            <content>
                <baseType ref="1580121"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580124">
            <name>ScriptTable*</name>
            <content>
                <baseType ref="1580121"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.316" specialization="true">
            <name>SelectFirst&lt;K, T></name>
            <content>
                <primaryType ref="1581593"/>
                <argumentType ref="1579918"/>
                <argumentType ref="1579919"/>
            </content>
        </type>
        <type id="type.1580962" specialization="true">
            <name>SelectFirst&lt;K, T></name>
            <content>
                <primaryType ref="1581593"/>
                <argumentType ref="1579922"/>
                <argumentType ref="1579923"/>
            </content>
        </type>
        <type derived="true" id="type.1580968">
            <name>SelectFirst&lt;K, T>*</name>
            <content>
                <baseType ref="type.1580962"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.322">
            <name>SelectFirst&lt;K, T>*</name>
            <content>
                <baseType ref="type.316"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580968">
            <name>SelectFirst&lt;K, T>*</name>
            <content>
                <baseType ref="type.1580962"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.657" specialization="true">
            <name>SelectFirst&lt;Key, Value></name>
            <content>
                <primaryType ref="1581593"/>
                <argumentType ref="1579974"/>
                <argumentType ref="1579975"/>
            </content>
        </type>
        <type derived="true" id="type.663">
            <name>SelectFirst&lt;Key, Value>*</name>
            <content>
                <baseType ref="type.657"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582925" specialization="true">
            <name>SelectFirst&lt;String&lt;char>, Age*></name>
            <content>
                <primaryType ref="1581593"/>
                <argumentType ref="type.1580238"/>
                <argumentType ref="type.1580109"/>
            </content>
        </type>
        <type derived="true" id="type.1584591">
            <name>SelectFirst&lt;String&lt;char>, Age*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582925"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582931">
            <name>SelectFirst&lt;String&lt;char>, Age*>*</name>
            <content>
                <baseType ref="type.1582925"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583821" specialization="true">
            <name>SelectFirst&lt;String&lt;char>, AliasType*></name>
            <content>
                <primaryType ref="1581593"/>
                <argumentType ref="type.1580238"/>
                <argumentType ref="type.1580158"/>
            </content>
        </type>
        <type derived="true" id="type.1584996">
            <name>SelectFirst&lt;String&lt;char>, AliasType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583821"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583827">
            <name>SelectFirst&lt;String&lt;char>, AliasType*>*</name>
            <content>
                <baseType ref="type.1583821"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583463" specialization="true">
            <name>SelectFirst&lt;String&lt;char>, BidiClass*></name>
            <content>
                <primaryType ref="1581593"/>
                <argumentType ref="type.1580238"/>
                <argumentType ref="type.1580140"/>
            </content>
        </type>
        <type derived="true" id="type.1584834">
            <name>SelectFirst&lt;String&lt;char>, BidiClass*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583463"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583469">
            <name>SelectFirst&lt;String&lt;char>, BidiClass*>*</name>
            <content>
                <baseType ref="type.1583463"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583642" specialization="true">
            <name>SelectFirst&lt;String&lt;char>, BidiPairedBracketType*></name>
            <content>
                <primaryType ref="1581593"/>
                <argumentType ref="type.1580238"/>
                <argumentType ref="type.1580149"/>
            </content>
        </type>
        <type derived="true" id="type.1584915">
            <name>SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583642"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583648">
            <name>SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>*</name>
            <content>
                <baseType ref="type.1583642"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582385" specialization="true">
            <name>SelectFirst&lt;String&lt;char>, BinaryProperty*></name>
            <content>
                <primaryType ref="1581593"/>
                <argumentType ref="type.1580238"/>
                <argumentType ref="type.1580088"/>
            </content>
        </type>
        <type derived="true" id="type.1584326">
            <name>SelectFirst&lt;String&lt;char>, BinaryProperty*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582385"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582391">
            <name>SelectFirst&lt;String&lt;char>, BinaryProperty*>*</name>
            <content>
                <baseType ref="type.1582385"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582565" specialization="true">
            <name>SelectFirst&lt;String&lt;char>, Block*></name>
            <content>
                <primaryType ref="1581593"/>
                <argumentType ref="type.1580238"/>
                <argumentType ref="type.1580095"/>
            </content>
        </type>
        <type derived="true" id="type.1584429">
            <name>SelectFirst&lt;String&lt;char>, Block*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582565"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582571">
            <name>SelectFirst&lt;String&lt;char>, Block*>*</name>
            <content>
                <baseType ref="type.1582565"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582746" specialization="true">
            <name>SelectFirst&lt;String&lt;char>, GeneralCategory*></name>
            <content>
                <primaryType ref="1581593"/>
                <argumentType ref="type.1580238"/>
                <argumentType ref="type.1580102"/>
            </content>
        </type>
        <type derived="true" id="type.1584510">
            <name>SelectFirst&lt;String&lt;char>, GeneralCategory*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582746"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582752">
            <name>SelectFirst&lt;String&lt;char>, GeneralCategory*>*</name>
            <content>
                <baseType ref="type.1582746"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583284" specialization="true">
            <name>SelectFirst&lt;String&lt;char>, NumericType*></name>
            <content>
                <primaryType ref="1581593"/>
                <argumentType ref="type.1580238"/>
                <argumentType ref="type.1580131"/>
            </content>
        </type>
        <type derived="true" id="type.1584753">
            <name>SelectFirst&lt;String&lt;char>, NumericType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583284"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583290">
            <name>SelectFirst&lt;String&lt;char>, NumericType*>*</name>
            <content>
                <baseType ref="type.1583284"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583104" specialization="true">
            <name>SelectFirst&lt;String&lt;char>, Script*></name>
            <content>
                <primaryType ref="1581593"/>
                <argumentType ref="type.1580238"/>
                <argumentType ref="type.1580118"/>
            </content>
        </type>
        <type derived="true" id="type.1584672">
            <name>SelectFirst&lt;String&lt;char>, Script*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583104"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583110">
            <name>SelectFirst&lt;String&lt;char>, Script*>*</name>
            <content>
                <baseType ref="type.1583104"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582860" specialization="true">
            <name>SelectFirst&lt;System.Unicode.AgeId, Age*></name>
            <content>
                <primaryType ref="1581593"/>
                <argumentType ref="1580107"/>
                <argumentType ref="type.1580109"/>
            </content>
        </type>
        <type derived="true" id="type.1584555">
            <name>SelectFirst&lt;System.Unicode.AgeId, Age*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582860"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582866">
            <name>SelectFirst&lt;System.Unicode.AgeId, Age*>*</name>
            <content>
                <baseType ref="type.1582860"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583756" specialization="true">
            <name>SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*></name>
            <content>
                <primaryType ref="1581593"/>
                <argumentType ref="1580156"/>
                <argumentType ref="type.1580158"/>
            </content>
        </type>
        <type derived="true" id="type.1584960">
            <name>SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583756"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583762">
            <name>SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>*</name>
            <content>
                <baseType ref="type.1583756"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583398" specialization="true">
            <name>SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*></name>
            <content>
                <primaryType ref="1581593"/>
                <argumentType ref="1580138"/>
                <argumentType ref="type.1580140"/>
            </content>
        </type>
        <type derived="true" id="type.1584798">
            <name>SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583398"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583404">
            <name>SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>*</name>
            <content>
                <baseType ref="type.1583398"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583577" specialization="true">
            <name>SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*></name>
            <content>
                <primaryType ref="1581593"/>
                <argumentType ref="1580147"/>
                <argumentType ref="type.1580149"/>
            </content>
        </type>
        <type derived="true" id="type.1584879">
            <name>SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583577"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583583">
            <name>SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>*</name>
            <content>
                <baseType ref="type.1583577"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582306" specialization="true">
            <name>SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*></name>
            <content>
                <primaryType ref="1581593"/>
                <argumentType ref="1580086"/>
                <argumentType ref="type.1580088"/>
            </content>
        </type>
        <type derived="true" id="type.1584290">
            <name>SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582306"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582312">
            <name>SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>*</name>
            <content>
                <baseType ref="type.1582306"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582500" specialization="true">
            <name>SelectFirst&lt;System.Unicode.BlockId, Block*></name>
            <content>
                <primaryType ref="1581593"/>
                <argumentType ref="1580093"/>
                <argumentType ref="type.1580095"/>
            </content>
        </type>
        <type derived="true" id="type.1584393">
            <name>SelectFirst&lt;System.Unicode.BlockId, Block*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582500"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582506">
            <name>SelectFirst&lt;System.Unicode.BlockId, Block*>*</name>
            <content>
                <baseType ref="type.1582500"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582681" specialization="true">
            <name>SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*></name>
            <content>
                <primaryType ref="1581593"/>
                <argumentType ref="1580100"/>
                <argumentType ref="type.1580102"/>
            </content>
        </type>
        <type derived="true" id="type.1584474">
            <name>SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582681"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582687">
            <name>SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>*</name>
            <content>
                <baseType ref="type.1582681"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583219" specialization="true">
            <name>SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*></name>
            <content>
                <primaryType ref="1581593"/>
                <argumentType ref="1580129"/>
                <argumentType ref="type.1580131"/>
            </content>
        </type>
        <type derived="true" id="type.1584717">
            <name>SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583219"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583225">
            <name>SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>*</name>
            <content>
                <baseType ref="type.1583219"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583039" specialization="true">
            <name>SelectFirst&lt;System.Unicode.ScriptId, Script*></name>
            <content>
                <primaryType ref="1581593"/>
                <argumentType ref="1580116"/>
                <argumentType ref="type.1580118"/>
            </content>
        </type>
        <type derived="true" id="type.1584636">
            <name>SelectFirst&lt;System.Unicode.ScriptId, Script*>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583039"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583045">
            <name>SelectFirst&lt;System.Unicode.ScriptId, Script*>*</name>
            <content>
                <baseType ref="type.1583039"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1579994">
            <name>SelectFirst&lt;T, U></name>
        </type>
        <type id="type.1581593" specialization="true">
            <name>SelectFirst&lt;T, U></name>
            <content>
                <primaryType ref="1581593"/>
                <argumentType ref="1579995"/>
                <argumentType ref="1579996"/>
            </content>
        </type>
        <type id="1579997">
            <name>SelectSecond&lt;T, U></name>
        </type>
        <type id="type.1581606" specialization="true">
            <name>SelectSecond&lt;T, U></name>
            <content>
                <primaryType ref="1581606"/>
                <argumentType ref="1579998"/>
                <argumentType ref="1579999"/>
            </content>
        </type>
        <type id="1580047">
            <name>Set&lt;T, C></name>
        </type>
        <type id="type.1581872" specialization="true">
            <name>Set&lt;T, C></name>
            <content>
                <primaryType ref="1581773"/>
                <argumentType ref="1580052"/>
                <argumentType ref="1580053"/>
            </content>
        </type>
        <type id="type.1581773" specialization="true">
            <name>Set&lt;T, C></name>
            <content>
                <primaryType ref="1581773"/>
                <argumentType ref="1580048"/>
                <argumentType ref="1580049"/>
            </content>
        </type>
        <type id="type.1581822" specialization="true">
            <name>Set&lt;T, C></name>
            <content>
                <primaryType ref="1581773"/>
                <argumentType ref="1580050"/>
                <argumentType ref="1580051"/>
            </content>
        </type>
        <type id="type.1581872" specialization="true">
            <name>Set&lt;T, C></name>
            <content>
                <primaryType ref="1581773"/>
                <argumentType ref="1580052"/>
                <argumentType ref="1580053"/>
            </content>
        </type>
        <type derived="true" id="type.1581823">
            <name>Set&lt;T, C>*</name>
            <content>
                <baseType ref="type.1581822"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581873">
            <name>Set&lt;T, C>*</name>
            <content>
                <baseType ref="type.1581872"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.840">
            <name>Set&lt;T, C>*</name>
            <content>
                <baseType ref="type.1581773"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1579913">
            <name>ShiftLeft&lt;T></name>
        </type>
        <type id="type.1580868" specialization="true">
            <name>ShiftLeft&lt;T></name>
            <content>
                <primaryType ref="1580868"/>
                <argumentType ref="1579914"/>
            </content>
        </type>
        <type id="type.1580875" specialization="true">
            <name>ShiftRight&lt;T></name>
            <content>
                <primaryType ref="1580875"/>
                <argumentType ref="1579916"/>
            </content>
        </type>
        <type id="1579915">
            <name>ShiftRight&lt;T></name>
        </type>
        <type id="type.1580875" specialization="true">
            <name>ShiftRight&lt;T></name>
            <content>
                <primaryType ref="1580875"/>
                <argumentType ref="1579916"/>
            </content>
        </type>
        <type id="type.1581922" specialization="true">
            <name>Stack&lt;T></name>
            <content>
                <primaryType ref="1581922"/>
                <argumentType ref="1580055"/>
            </content>
        </type>
        <type id="1580054">
            <name>Stack&lt;T></name>
        </type>
        <type derived="true" id="type.908">
            <name>Stack&lt;T>*</name>
            <content>
                <baseType ref="type.1581922"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1579511">
            <name>StaticInitCriticalSection</name>
        </type>
        <type derived="true" id="type.1422">
            <name>StaticInitCriticalSection&amp;&amp;</name>
            <content>
                <baseType ref="1579511"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="1580064">
            <name>StreamReader</name>
        </type>
        <type derived="true" id="type.1581953">
            <name>StreamReader&amp;&amp;</name>
            <content>
                <baseType ref="1580064"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580065">
            <name>StreamReader*</name>
            <content>
                <baseType ref="1580064"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1580066">
            <name>StreamWriter</name>
        </type>
        <type derived="true" id="type.1580442">
            <name>StreamWriter&amp;</name>
            <content>
                <baseType ref="1580066"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581956">
            <name>StreamWriter&amp;&amp;</name>
            <content>
                <baseType ref="1580066"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580067">
            <name>StreamWriter*</name>
            <content>
                <baseType ref="1580066"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582227" specialization="true">
            <name>String&lt;CharT></name>
            <content>
                <primaryType ref="1581957"/>
                <argumentType ref="1580075"/>
            </content>
        </type>
        <type id="type.1582092" specialization="true">
            <name>String&lt;CharT></name>
            <content>
                <primaryType ref="1581957"/>
                <argumentType ref="1580072"/>
            </content>
        </type>
        <type id="1580068">
            <name>String&lt;CharT></name>
        </type>
        <type id="type.1582227" specialization="true">
            <name>String&lt;CharT></name>
            <content>
                <primaryType ref="1581957"/>
                <argumentType ref="1580075"/>
            </content>
        </type>
        <type id="type.1582183" specialization="true">
            <name>String&lt;CharT></name>
            <content>
                <primaryType ref="1581957"/>
                <argumentType ref="1580074"/>
            </content>
        </type>
        <type id="type.1582002" specialization="true">
            <name>String&lt;CharT></name>
            <content>
                <primaryType ref="1581957"/>
                <argumentType ref="1580070"/>
            </content>
        </type>
        <type id="type.1581957" specialization="true">
            <name>String&lt;CharT></name>
            <content>
                <primaryType ref="1581957"/>
                <argumentType ref="1580069"/>
            </content>
        </type>
        <type id="type.1582137" specialization="true">
            <name>String&lt;CharT></name>
            <content>
                <primaryType ref="1581957"/>
                <argumentType ref="1580073"/>
            </content>
        </type>
        <type id="type.1582047" specialization="true">
            <name>String&lt;CharT></name>
            <content>
                <primaryType ref="1581957"/>
                <argumentType ref="1580071"/>
            </content>
        </type>
        <type derived="true" id="type.1582206">
            <name>String&lt;CharT>&amp;</name>
            <content>
                <baseType ref="type.1582183"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582251">
            <name>String&lt;CharT>&amp;</name>
            <content>
                <baseType ref="type.1582227"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582071">
            <name>String&lt;CharT>&amp;</name>
            <content>
                <baseType ref="type.1582047"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582161">
            <name>String&lt;CharT>&amp;</name>
            <content>
                <baseType ref="type.1582137"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582026">
            <name>String&lt;CharT>&amp;</name>
            <content>
                <baseType ref="type.1582002"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582116">
            <name>String&lt;CharT>&amp;</name>
            <content>
                <baseType ref="type.1582092"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.957">
            <name>String&lt;CharT>&amp;</name>
            <content>
                <baseType ref="type.1581957"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582205">
            <name>String&lt;CharT>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582183"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582250">
            <name>String&lt;CharT>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582227"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.956">
            <name>String&lt;CharT>&amp;&amp;</name>
            <content>
                <baseType ref="type.1581957"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582025">
            <name>String&lt;CharT>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582002"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582115">
            <name>String&lt;CharT>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582092"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582160">
            <name>String&lt;CharT>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582137"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582070">
            <name>String&lt;CharT>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582047"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582205">
            <name>String&lt;CharT>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582183"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582228">
            <name>String&lt;CharT>*</name>
            <content>
                <baseType ref="type.1582227"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582138">
            <name>String&lt;CharT>*</name>
            <content>
                <baseType ref="type.1582137"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582184">
            <name>String&lt;CharT>*</name>
            <content>
                <baseType ref="type.1582183"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582048">
            <name>String&lt;CharT>*</name>
            <content>
                <baseType ref="type.1582047"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582228">
            <name>String&lt;CharT>*</name>
            <content>
                <baseType ref="type.1582227"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582003">
            <name>String&lt;CharT>*</name>
            <content>
                <baseType ref="type.1582002"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.934">
            <name>String&lt;CharT>*</name>
            <content>
                <baseType ref="type.1581957"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582093">
            <name>String&lt;CharT>*</name>
            <content>
                <baseType ref="type.1582092"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1580238" specialization="true">
            <name>String&lt;char></name>
            <content>
                <primaryType ref="1581957"/>
                <argumentType ref="type.1579461"/>
            </content>
        </type>
        <type derived="true" id="type.1580260">
            <name>String&lt;char>&amp;</name>
            <content>
                <baseType ref="type.1580238"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580259">
            <name>String&lt;char>&amp;&amp;</name>
            <content>
                <baseType ref="type.1580238"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580239">
            <name>String&lt;char>*</name>
            <content>
                <baseType ref="type.1580238"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1580362" specialization="true">
            <name>String&lt;uchar></name>
            <content>
                <primaryType ref="1581957"/>
                <argumentType ref="type.1579463"/>
            </content>
        </type>
        <type derived="true" id="type.1580385">
            <name>String&lt;uchar>&amp;</name>
            <content>
                <baseType ref="type.1580362"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580384">
            <name>String&lt;uchar>&amp;&amp;</name>
            <content>
                <baseType ref="type.1580362"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580363">
            <name>String&lt;uchar>*</name>
            <content>
                <baseType ref="type.1580362"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1580318" specialization="true">
            <name>String&lt;wchar></name>
            <content>
                <primaryType ref="1581957"/>
                <argumentType ref="type.1579462"/>
            </content>
        </type>
        <type derived="true" id="type.1580341">
            <name>String&lt;wchar>&amp;</name>
            <content>
                <baseType ref="type.1580318"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580340">
            <name>String&lt;wchar>&amp;&amp;</name>
            <content>
                <baseType ref="type.1580318"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580319">
            <name>String&lt;wchar>*</name>
            <content>
                <baseType ref="type.1580318"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1580189">
            <name>T</name>
        </type>
        <type derived="true" id="type.1580571">
            <name>T&amp;</name>
            <content>
                <baseType ref="1579837"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1415">
            <name>T&amp;</name>
            <content>
                <baseType ref="1580188"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.863">
            <name>T&amp;</name>
            <content>
                <baseType ref="1580048"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.402">
            <name>T&amp;</name>
            <content>
                <baseType ref="1579927"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.752">
            <name>T&amp;</name>
            <content>
                <baseType ref="1580004"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.374">
            <name>T&amp;</name>
            <content>
                <baseType ref="1579919"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581378">
            <name>T&amp;</name>
            <content>
                <baseType ref="1579965"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.622">
            <name>T&amp;</name>
            <content>
                <baseType ref="1579967"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581728">
            <name>T&amp;</name>
            <content>
                <baseType ref="1580038"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580196">
            <name>T&amp;</name>
            <content>
                <baseType ref="1579521"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.474">
            <name>T&amp;</name>
            <content>
                <baseType ref="1579937"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581461">
            <name>T&amp;</name>
            <content>
                <baseType ref="1579969"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581896">
            <name>T&amp;</name>
            <content>
                <baseType ref="1580052"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584119">
            <name>T&amp;</name>
            <content>
                <baseType ref="1580190"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581100">
            <name>T&amp;</name>
            <content>
                <baseType ref="1579930"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584119">
            <name>T&amp;</name>
            <content>
                <baseType ref="1580190"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.582">
            <name>T&amp;</name>
            <content>
                <baseType ref="1579963"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.911">
            <name>T&amp;</name>
            <content>
                <baseType ref="1580055"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.794">
            <name>T&amp;</name>
            <content>
                <baseType ref="1580035"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581020">
            <name>T&amp;</name>
            <content>
                <baseType ref="1579923"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581846">
            <name>T&amp;</name>
            <content>
                <baseType ref="1580050"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.57">
            <name>T&amp;</name>
            <content>
                <baseType ref="1579827"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.553">
            <name>T&amp;</name>
            <content>
                <baseType ref="1579956"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.484">
            <name>T&amp;</name>
            <content>
                <baseType ref="1579939"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580468">
            <name>T&amp;</name>
            <content>
                <baseType ref="1579799"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580469">
            <name>T&amp;</name>
            <content>
                <baseType ref="1579800"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581436">
            <name>T&amp;</name>
            <content>
                <baseType ref="1579968"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.86">
            <name>T&amp;</name>
            <content>
                <baseType ref="1579836"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580470">
            <name>T&amp;</name>
            <content>
                <baseType ref="1579801"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.785">
            <name>T&amp;</name>
            <content>
                <baseType ref="1580033"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.545">
            <name>T&amp;</name>
            <content>
                <baseType ref="1579954"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581304">
            <name>T&amp;</name>
            <content>
                <baseType ref="1579959"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.66">
            <name>T&amp;</name>
            <content>
                <baseType ref="1579829"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584108">
            <name>T&amp;</name>
            <content>
                <baseType ref="1580189"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581204">
            <name>T&amp;</name>
            <content>
                <baseType ref="1579943"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581354">
            <name>T&amp;</name>
            <content>
                <baseType ref="1579964"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580599">
            <name>T&amp;</name>
            <content>
                <baseType ref="1579838"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580525">
            <name>T&amp;</name>
            <content>
                <baseType ref="1579832"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580467">
            <name>T&amp;</name>
            <content>
                <baseType ref="1579798"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.730">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="1579998"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.739">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="1580004"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581577">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="1579988"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.633">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="1579967"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581772">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="1580046"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.910">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="1580055"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580961">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="1579923"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.315">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="1579919"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581472">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="1579969"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.711">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="1579986"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581591">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="1579992"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.719">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="1579995"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581584">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="1579990"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581447">
            <name>T&amp;&amp;</name>
            <content>
                <baseType ref="1579968"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.924">
            <name>T*</name>
            <content>
                <baseType ref="1580055"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.867">
            <name>T*</name>
            <content>
                <baseType ref="1580048"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.90">
            <name>T*</name>
            <content>
                <baseType ref="1579836"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581305">
            <name>T*</name>
            <content>
                <baseType ref="1579959"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584104">
            <name>T*</name>
            <content>
                <baseType ref="1580189"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580575">
            <name>T*</name>
            <content>
                <baseType ref="1579837"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581355">
            <name>T*</name>
            <content>
                <baseType ref="1579964"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581900">
            <name>T*</name>
            <content>
                <baseType ref="1580052"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581101">
            <name>T*</name>
            <content>
                <baseType ref="1579930"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584115">
            <name>T*</name>
            <content>
                <baseType ref="1580190"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581850">
            <name>T*</name>
            <content>
                <baseType ref="1580050"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581462">
            <name>T*</name>
            <content>
                <baseType ref="1579969"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.753">
            <name>T*</name>
            <content>
                <baseType ref="1580004"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580603">
            <name>T*</name>
            <content>
                <baseType ref="1579838"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581437">
            <name>T*</name>
            <content>
                <baseType ref="1579968"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584115">
            <name>T*</name>
            <content>
                <baseType ref="1580190"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.583">
            <name>T*</name>
            <content>
                <baseType ref="1579963"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.554">
            <name>T*</name>
            <content>
                <baseType ref="1579956"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581379">
            <name>T*</name>
            <content>
                <baseType ref="1579965"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.623">
            <name>T*</name>
            <content>
                <baseType ref="1579967"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.403">
            <name>T*</name>
            <content>
                <baseType ref="1579927"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1411">
            <name>T*</name>
            <content>
                <baseType ref="1580188"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1579999">
            <name>U</name>
        </type>
        <type derived="true" id="type.712">
            <name>U&amp;&amp;</name>
            <content>
                <baseType ref="1579987"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.720">
            <name>U&amp;&amp;</name>
            <content>
                <baseType ref="1579996"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581578">
            <name>U&amp;&amp;</name>
            <content>
                <baseType ref="1579989"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581592">
            <name>U&amp;&amp;</name>
            <content>
                <baseType ref="1579993"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581585">
            <name>U&amp;&amp;</name>
            <content>
                <baseType ref="1579991"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.731">
            <name>U&amp;&amp;</name>
            <content>
                <baseType ref="1579999"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="type.1580613" specialization="true">
            <name>UnaryFun&lt;Argument, Result></name>
            <content>
                <primaryType ref="1580613"/>
                <argumentType ref="1579840"/>
                <argumentType ref="1579841"/>
            </content>
        </type>
        <type id="1579839">
            <name>UnaryFun&lt;Argument, Result></name>
        </type>
        <type id="type.148" specialization="true">
            <name>UnaryFun&lt;Argument, bool></name>
            <content>
                <primaryType ref="1580613"/>
                <argumentType ref="1579861"/>
                <argumentType ref="type.1579450"/>
            </content>
        </type>
        <type derived="true" id="type.149">
            <name>UnaryFun&lt;Argument, bool>*</name>
            <content>
                <baseType ref="type.148"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1580965" specialization="true">
            <name>UnaryFun&lt;Pair&lt;K, T>, K></name>
            <content>
                <primaryType ref="1580613"/>
                <argumentType ref="type.1580956"/>
                <argumentType ref="1579922"/>
            </content>
        </type>
        <type id="type.319" specialization="true">
            <name>UnaryFun&lt;Pair&lt;K, T>, K></name>
            <content>
                <primaryType ref="1580613"/>
                <argumentType ref="type.310"/>
                <argumentType ref="1579918"/>
            </content>
        </type>
        <type id="type.1580965" specialization="true">
            <name>UnaryFun&lt;Pair&lt;K, T>, K></name>
            <content>
                <primaryType ref="1580613"/>
                <argumentType ref="type.1580956"/>
                <argumentType ref="1579922"/>
            </content>
        </type>
        <type derived="true" id="type.1580966">
            <name>UnaryFun&lt;Pair&lt;K, T>, K>*</name>
            <content>
                <baseType ref="type.1580965"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.320">
            <name>UnaryFun&lt;Pair&lt;K, T>, K>*</name>
            <content>
                <baseType ref="type.319"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580966">
            <name>UnaryFun&lt;Pair&lt;K, T>, K>*</name>
            <content>
                <baseType ref="type.1580965"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.660" specialization="true">
            <name>UnaryFun&lt;Pair&lt;Key, Value>, Key></name>
            <content>
                <primaryType ref="1580613"/>
                <argumentType ref="type.651"/>
                <argumentType ref="1579974"/>
            </content>
        </type>
        <type derived="true" id="type.661">
            <name>UnaryFun&lt;Pair&lt;Key, Value>, Key>*</name>
            <content>
                <baseType ref="type.660"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582928" specialization="true">
            <name>UnaryFun&lt;Pair&lt;String&lt;char>, Age*>, String&lt;char>></name>
            <content>
                <primaryType ref="1580613"/>
                <argumentType ref="type.1582923"/>
                <argumentType ref="type.1580238"/>
            </content>
        </type>
        <type derived="true" id="type.1584593">
            <name>UnaryFun&lt;Pair&lt;String&lt;char>, Age*>, String&lt;char>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582928"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582929">
            <name>UnaryFun&lt;Pair&lt;String&lt;char>, Age*>, String&lt;char>>*</name>
            <content>
                <baseType ref="type.1582928"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583824" specialization="true">
            <name>UnaryFun&lt;Pair&lt;String&lt;char>, AliasType*>, String&lt;char>></name>
            <content>
                <primaryType ref="1580613"/>
                <argumentType ref="type.1583819"/>
                <argumentType ref="type.1580238"/>
            </content>
        </type>
        <type derived="true" id="type.1584998">
            <name>UnaryFun&lt;Pair&lt;String&lt;char>, AliasType*>, String&lt;char>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583824"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583825">
            <name>UnaryFun&lt;Pair&lt;String&lt;char>, AliasType*>, String&lt;char>>*</name>
            <content>
                <baseType ref="type.1583824"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583466" specialization="true">
            <name>UnaryFun&lt;Pair&lt;String&lt;char>, BidiClass*>, String&lt;char>></name>
            <content>
                <primaryType ref="1580613"/>
                <argumentType ref="type.1583461"/>
                <argumentType ref="type.1580238"/>
            </content>
        </type>
        <type derived="true" id="type.1584836">
            <name>UnaryFun&lt;Pair&lt;String&lt;char>, BidiClass*>, String&lt;char>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583466"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583467">
            <name>UnaryFun&lt;Pair&lt;String&lt;char>, BidiClass*>, String&lt;char>>*</name>
            <content>
                <baseType ref="type.1583466"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583645" specialization="true">
            <name>UnaryFun&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>, String&lt;char>></name>
            <content>
                <primaryType ref="1580613"/>
                <argumentType ref="type.1583640"/>
                <argumentType ref="type.1580238"/>
            </content>
        </type>
        <type derived="true" id="type.1584917">
            <name>UnaryFun&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>, String&lt;char>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583645"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583646">
            <name>UnaryFun&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>, String&lt;char>>*</name>
            <content>
                <baseType ref="type.1583645"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582388" specialization="true">
            <name>UnaryFun&lt;Pair&lt;String&lt;char>, BinaryProperty*>, String&lt;char>></name>
            <content>
                <primaryType ref="1580613"/>
                <argumentType ref="type.1582383"/>
                <argumentType ref="type.1580238"/>
            </content>
        </type>
        <type derived="true" id="type.1584328">
            <name>UnaryFun&lt;Pair&lt;String&lt;char>, BinaryProperty*>, String&lt;char>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582388"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582389">
            <name>UnaryFun&lt;Pair&lt;String&lt;char>, BinaryProperty*>, String&lt;char>>*</name>
            <content>
                <baseType ref="type.1582388"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582568" specialization="true">
            <name>UnaryFun&lt;Pair&lt;String&lt;char>, Block*>, String&lt;char>></name>
            <content>
                <primaryType ref="1580613"/>
                <argumentType ref="type.1582563"/>
                <argumentType ref="type.1580238"/>
            </content>
        </type>
        <type derived="true" id="type.1584431">
            <name>UnaryFun&lt;Pair&lt;String&lt;char>, Block*>, String&lt;char>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582568"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582569">
            <name>UnaryFun&lt;Pair&lt;String&lt;char>, Block*>, String&lt;char>>*</name>
            <content>
                <baseType ref="type.1582568"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582749" specialization="true">
            <name>UnaryFun&lt;Pair&lt;String&lt;char>, GeneralCategory*>, String&lt;char>></name>
            <content>
                <primaryType ref="1580613"/>
                <argumentType ref="type.1582744"/>
                <argumentType ref="type.1580238"/>
            </content>
        </type>
        <type derived="true" id="type.1584512">
            <name>UnaryFun&lt;Pair&lt;String&lt;char>, GeneralCategory*>, String&lt;char>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582749"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582750">
            <name>UnaryFun&lt;Pair&lt;String&lt;char>, GeneralCategory*>, String&lt;char>>*</name>
            <content>
                <baseType ref="type.1582749"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583287" specialization="true">
            <name>UnaryFun&lt;Pair&lt;String&lt;char>, NumericType*>, String&lt;char>></name>
            <content>
                <primaryType ref="1580613"/>
                <argumentType ref="type.1583282"/>
                <argumentType ref="type.1580238"/>
            </content>
        </type>
        <type derived="true" id="type.1584755">
            <name>UnaryFun&lt;Pair&lt;String&lt;char>, NumericType*>, String&lt;char>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583287"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583288">
            <name>UnaryFun&lt;Pair&lt;String&lt;char>, NumericType*>, String&lt;char>>*</name>
            <content>
                <baseType ref="type.1583287"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583107" specialization="true">
            <name>UnaryFun&lt;Pair&lt;String&lt;char>, Script*>, String&lt;char>></name>
            <content>
                <primaryType ref="1580613"/>
                <argumentType ref="type.1583102"/>
                <argumentType ref="type.1580238"/>
            </content>
        </type>
        <type derived="true" id="type.1584674">
            <name>UnaryFun&lt;Pair&lt;String&lt;char>, Script*>, String&lt;char>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583107"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583108">
            <name>UnaryFun&lt;Pair&lt;String&lt;char>, Script*>, String&lt;char>>*</name>
            <content>
                <baseType ref="type.1583107"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582863" specialization="true">
            <name>UnaryFun&lt;Pair&lt;System.Unicode.AgeId, Age*>, System.Unicode.AgeId></name>
            <content>
                <primaryType ref="1580613"/>
                <argumentType ref="type.1582856"/>
                <argumentType ref="1580107"/>
            </content>
        </type>
        <type derived="true" id="type.1584557">
            <name>UnaryFun&lt;Pair&lt;System.Unicode.AgeId, Age*>, System.Unicode.AgeId>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582863"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582864">
            <name>UnaryFun&lt;Pair&lt;System.Unicode.AgeId, Age*>, System.Unicode.AgeId>*</name>
            <content>
                <baseType ref="type.1582863"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583759" specialization="true">
            <name>UnaryFun&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>, System.Unicode.AliasTypeId></name>
            <content>
                <primaryType ref="1580613"/>
                <argumentType ref="type.1583752"/>
                <argumentType ref="1580156"/>
            </content>
        </type>
        <type derived="true" id="type.1584962">
            <name>UnaryFun&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>, System.Unicode.AliasTypeId>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583759"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583760">
            <name>UnaryFun&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>, System.Unicode.AliasTypeId>*</name>
            <content>
                <baseType ref="type.1583759"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583401" specialization="true">
            <name>UnaryFun&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>, System.Unicode.BidiClassId></name>
            <content>
                <primaryType ref="1580613"/>
                <argumentType ref="type.1583394"/>
                <argumentType ref="1580138"/>
            </content>
        </type>
        <type derived="true" id="type.1584800">
            <name>UnaryFun&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>, System.Unicode.BidiClassId>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583401"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583402">
            <name>UnaryFun&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>, System.Unicode.BidiClassId>*</name>
            <content>
                <baseType ref="type.1583401"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583580" specialization="true">
            <name>UnaryFun&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, System.Unicode.BidiPairedBracketTypeId></name>
            <content>
                <primaryType ref="1580613"/>
                <argumentType ref="type.1583573"/>
                <argumentType ref="1580147"/>
            </content>
        </type>
        <type derived="true" id="type.1584881">
            <name>UnaryFun&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, System.Unicode.BidiPairedBracketTypeId>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583580"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583581">
            <name>UnaryFun&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, System.Unicode.BidiPairedBracketTypeId>*</name>
            <content>
                <baseType ref="type.1583580"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582309" specialization="true">
            <name>UnaryFun&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, System.Unicode.BinaryPropertyId></name>
            <content>
                <primaryType ref="1580613"/>
                <argumentType ref="type.1582302"/>
                <argumentType ref="1580086"/>
            </content>
        </type>
        <type derived="true" id="type.1584292">
            <name>UnaryFun&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, System.Unicode.BinaryPropertyId>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582309"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582310">
            <name>UnaryFun&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, System.Unicode.BinaryPropertyId>*</name>
            <content>
                <baseType ref="type.1582309"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582503" specialization="true">
            <name>UnaryFun&lt;Pair&lt;System.Unicode.BlockId, Block*>, System.Unicode.BlockId></name>
            <content>
                <primaryType ref="1580613"/>
                <argumentType ref="type.1582496"/>
                <argumentType ref="1580093"/>
            </content>
        </type>
        <type derived="true" id="type.1584395">
            <name>UnaryFun&lt;Pair&lt;System.Unicode.BlockId, Block*>, System.Unicode.BlockId>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582503"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582504">
            <name>UnaryFun&lt;Pair&lt;System.Unicode.BlockId, Block*>, System.Unicode.BlockId>*</name>
            <content>
                <baseType ref="type.1582503"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582684" specialization="true">
            <name>UnaryFun&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, System.Unicode.GeneralCategoryId></name>
            <content>
                <primaryType ref="1580613"/>
                <argumentType ref="type.1582677"/>
                <argumentType ref="1580100"/>
            </content>
        </type>
        <type derived="true" id="type.1584476">
            <name>UnaryFun&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, System.Unicode.GeneralCategoryId>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582684"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582685">
            <name>UnaryFun&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, System.Unicode.GeneralCategoryId>*</name>
            <content>
                <baseType ref="type.1582684"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583222" specialization="true">
            <name>UnaryFun&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>, System.Unicode.NumericTypeId></name>
            <content>
                <primaryType ref="1580613"/>
                <argumentType ref="type.1583215"/>
                <argumentType ref="1580129"/>
            </content>
        </type>
        <type derived="true" id="type.1584719">
            <name>UnaryFun&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>, System.Unicode.NumericTypeId>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583222"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583223">
            <name>UnaryFun&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>, System.Unicode.NumericTypeId>*</name>
            <content>
                <baseType ref="type.1583222"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583042" specialization="true">
            <name>UnaryFun&lt;Pair&lt;System.Unicode.ScriptId, Script*>, System.Unicode.ScriptId></name>
            <content>
                <primaryType ref="1580613"/>
                <argumentType ref="type.1583035"/>
                <argumentType ref="1580116"/>
            </content>
        </type>
        <type derived="true" id="type.1584638">
            <name>UnaryFun&lt;Pair&lt;System.Unicode.ScriptId, Script*>, System.Unicode.ScriptId>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583042"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583043">
            <name>UnaryFun&lt;Pair&lt;System.Unicode.ScriptId, Script*>, System.Unicode.ScriptId>*</name>
            <content>
                <baseType ref="type.1583042"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.721" specialization="true">
            <name>UnaryFun&lt;Pair&lt;T, U>, T></name>
            <content>
                <primaryType ref="1580613"/>
                <argumentType ref="type.715"/>
                <argumentType ref="1579995"/>
            </content>
        </type>
        <type derived="true" id="type.722">
            <name>UnaryFun&lt;Pair&lt;T, U>, T>*</name>
            <content>
                <baseType ref="type.721"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.732" specialization="true">
            <name>UnaryFun&lt;Pair&lt;T, U>, U></name>
            <content>
                <primaryType ref="1580613"/>
                <argumentType ref="type.726"/>
                <argumentType ref="1579999"/>
            </content>
        </type>
        <type derived="true" id="type.733">
            <name>UnaryFun&lt;Pair&lt;T, U>, U>*</name>
            <content>
                <baseType ref="type.732"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582367" specialization="true">
            <name>UnaryFun&lt;String&lt;char>, ulong></name>
            <content>
                <primaryType ref="1580613"/>
                <argumentType ref="type.1580238"/>
                <argumentType ref="type.1579458"/>
            </content>
        </type>
        <type derived="true" id="type.1584334">
            <name>UnaryFun&lt;String&lt;char>, ulong>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582367"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582368">
            <name>UnaryFun&lt;String&lt;char>, ulong>*</name>
            <content>
                <baseType ref="type.1582367"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582839" specialization="true">
            <name>UnaryFun&lt;System.Unicode.AgeId, ulong></name>
            <content>
                <primaryType ref="1580613"/>
                <argumentType ref="1580107"/>
                <argumentType ref="type.1579458"/>
            </content>
        </type>
        <type derived="true" id="type.1584563">
            <name>UnaryFun&lt;System.Unicode.AgeId, ulong>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582839"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582840">
            <name>UnaryFun&lt;System.Unicode.AgeId, ulong>*</name>
            <content>
                <baseType ref="type.1582839"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583735" specialization="true">
            <name>UnaryFun&lt;System.Unicode.AliasTypeId, ulong></name>
            <content>
                <primaryType ref="1580613"/>
                <argumentType ref="1580156"/>
                <argumentType ref="type.1579458"/>
            </content>
        </type>
        <type derived="true" id="type.1584968">
            <name>UnaryFun&lt;System.Unicode.AliasTypeId, ulong>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583735"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583736">
            <name>UnaryFun&lt;System.Unicode.AliasTypeId, ulong>*</name>
            <content>
                <baseType ref="type.1583735"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583377" specialization="true">
            <name>UnaryFun&lt;System.Unicode.BidiClassId, ulong></name>
            <content>
                <primaryType ref="1580613"/>
                <argumentType ref="1580138"/>
                <argumentType ref="type.1579458"/>
            </content>
        </type>
        <type derived="true" id="type.1584806">
            <name>UnaryFun&lt;System.Unicode.BidiClassId, ulong>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583377"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583378">
            <name>UnaryFun&lt;System.Unicode.BidiClassId, ulong>*</name>
            <content>
                <baseType ref="type.1583377"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583556" specialization="true">
            <name>UnaryFun&lt;System.Unicode.BidiPairedBracketTypeId, ulong></name>
            <content>
                <primaryType ref="1580613"/>
                <argumentType ref="1580147"/>
                <argumentType ref="type.1579458"/>
            </content>
        </type>
        <type derived="true" id="type.1584887">
            <name>UnaryFun&lt;System.Unicode.BidiPairedBracketTypeId, ulong>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583556"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583557">
            <name>UnaryFun&lt;System.Unicode.BidiPairedBracketTypeId, ulong>*</name>
            <content>
                <baseType ref="type.1583556"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582285" specialization="true">
            <name>UnaryFun&lt;System.Unicode.BinaryPropertyId, ulong></name>
            <content>
                <primaryType ref="1580613"/>
                <argumentType ref="1580086"/>
                <argumentType ref="type.1579458"/>
            </content>
        </type>
        <type derived="true" id="type.1584298">
            <name>UnaryFun&lt;System.Unicode.BinaryPropertyId, ulong>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582285"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582286">
            <name>UnaryFun&lt;System.Unicode.BinaryPropertyId, ulong>*</name>
            <content>
                <baseType ref="type.1582285"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582479" specialization="true">
            <name>UnaryFun&lt;System.Unicode.BlockId, ulong></name>
            <content>
                <primaryType ref="1580613"/>
                <argumentType ref="1580093"/>
                <argumentType ref="type.1579458"/>
            </content>
        </type>
        <type derived="true" id="type.1584401">
            <name>UnaryFun&lt;System.Unicode.BlockId, ulong>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582479"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582480">
            <name>UnaryFun&lt;System.Unicode.BlockId, ulong>*</name>
            <content>
                <baseType ref="type.1582479"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582660" specialization="true">
            <name>UnaryFun&lt;System.Unicode.GeneralCategoryId, ulong></name>
            <content>
                <primaryType ref="1580613"/>
                <argumentType ref="1580100"/>
                <argumentType ref="type.1579458"/>
            </content>
        </type>
        <type derived="true" id="type.1584482">
            <name>UnaryFun&lt;System.Unicode.GeneralCategoryId, ulong>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582660"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582661">
            <name>UnaryFun&lt;System.Unicode.GeneralCategoryId, ulong>*</name>
            <content>
                <baseType ref="type.1582660"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583198" specialization="true">
            <name>UnaryFun&lt;System.Unicode.NumericTypeId, ulong></name>
            <content>
                <primaryType ref="1580613"/>
                <argumentType ref="1580129"/>
                <argumentType ref="type.1579458"/>
            </content>
        </type>
        <type derived="true" id="type.1584725">
            <name>UnaryFun&lt;System.Unicode.NumericTypeId, ulong>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583198"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583199">
            <name>UnaryFun&lt;System.Unicode.NumericTypeId, ulong>*</name>
            <content>
                <baseType ref="type.1583198"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583018" specialization="true">
            <name>UnaryFun&lt;System.Unicode.ScriptId, ulong></name>
            <content>
                <primaryType ref="1580613"/>
                <argumentType ref="1580116"/>
                <argumentType ref="type.1579458"/>
            </content>
        </type>
        <type derived="true" id="type.1584644">
            <name>UnaryFun&lt;System.Unicode.ScriptId, ulong>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583018"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583019">
            <name>UnaryFun&lt;System.Unicode.ScriptId, ulong>*</name>
            <content>
                <baseType ref="type.1583018"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1581092" specialization="true">
            <name>UnaryFun&lt;T, T></name>
            <content>
                <primaryType ref="1580613"/>
                <argumentType ref="1579930"/>
                <argumentType ref="1579930"/>
            </content>
        </type>
        <type id="type.1581879" specialization="true">
            <name>UnaryFun&lt;T, T></name>
            <content>
                <primaryType ref="1580613"/>
                <argumentType ref="1580052"/>
                <argumentType ref="1580052"/>
            </content>
        </type>
        <type id="type.124" specialization="true">
            <name>UnaryFun&lt;T, T></name>
            <content>
                <primaryType ref="1580613"/>
                <argumentType ref="1579850"/>
                <argumentType ref="1579850"/>
            </content>
        </type>
        <type id="type.158" specialization="true">
            <name>UnaryFun&lt;T, T></name>
            <content>
                <primaryType ref="1580613"/>
                <argumentType ref="1579868"/>
                <argumentType ref="1579868"/>
            </content>
        </type>
        <type id="type.1581829" specialization="true">
            <name>UnaryFun&lt;T, T></name>
            <content>
                <primaryType ref="1580613"/>
                <argumentType ref="1580050"/>
                <argumentType ref="1580050"/>
            </content>
        </type>
        <type id="type.294" specialization="true">
            <name>UnaryFun&lt;T, T></name>
            <content>
                <primaryType ref="1580613"/>
                <argumentType ref="1579912"/>
                <argumentType ref="1579912"/>
            </content>
        </type>
        <type id="type.846" specialization="true">
            <name>UnaryFun&lt;T, T></name>
            <content>
                <primaryType ref="1580613"/>
                <argumentType ref="1580048"/>
                <argumentType ref="1580048"/>
            </content>
        </type>
        <type id="type.394" specialization="true">
            <name>UnaryFun&lt;T, T></name>
            <content>
                <primaryType ref="1580613"/>
                <argumentType ref="1579927"/>
                <argumentType ref="1579927"/>
            </content>
        </type>
        <type derived="true" id="type.1581880">
            <name>UnaryFun&lt;T, T>*</name>
            <content>
                <baseType ref="type.1581879"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581093">
            <name>UnaryFun&lt;T, T>*</name>
            <content>
                <baseType ref="type.1581092"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581880">
            <name>UnaryFun&lt;T, T>*</name>
            <content>
                <baseType ref="type.1581879"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.125">
            <name>UnaryFun&lt;T, T>*</name>
            <content>
                <baseType ref="type.124"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.847">
            <name>UnaryFun&lt;T, T>*</name>
            <content>
                <baseType ref="type.846"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581830">
            <name>UnaryFun&lt;T, T>*</name>
            <content>
                <baseType ref="type.1581829"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.295">
            <name>UnaryFun&lt;T, T>*</name>
            <content>
                <baseType ref="type.294"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.159">
            <name>UnaryFun&lt;T, T>*</name>
            <content>
                <baseType ref="type.158"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.395">
            <name>UnaryFun&lt;T, T>*</name>
            <content>
                <baseType ref="type.394"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.467" specialization="true">
            <name>UnaryFun&lt;T, ulong></name>
            <content>
                <primaryType ref="1580613"/>
                <argumentType ref="1579935"/>
                <argumentType ref="type.1579458"/>
            </content>
        </type>
        <type derived="true" id="type.468">
            <name>UnaryFun&lt;T, ulong>*</name>
            <content>
                <baseType ref="type.467"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.274" specialization="true">
            <name>UnaryFun&lt;bool, bool></name>
            <content>
                <primaryType ref="1580613"/>
                <argumentType ref="type.1579450"/>
                <argumentType ref="type.1579450"/>
            </content>
        </type>
        <type derived="true" id="type.275">
            <name>UnaryFun&lt;bool, bool>*</name>
            <content>
                <baseType ref="type.274"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1580673" specialization="true">
            <name>UnaryPred&lt;Argument></name>
            <content>
                <primaryType ref="1580673"/>
                <argumentType ref="1579861"/>
            </content>
        </type>
        <type id="1579860">
            <name>UnaryPred&lt;Argument></name>
        </type>
        <type id="type.1580673" specialization="true">
            <name>UnaryPred&lt;Argument></name>
            <content>
                <primaryType ref="1580673"/>
                <argumentType ref="1579861"/>
            </content>
        </type>
        <type id="type.273" specialization="true">
            <name>UnaryPred&lt;bool></name>
            <content>
                <primaryType ref="1580673"/>
                <argumentType ref="type.1579450"/>
            </content>
        </type>
        <type derived="true" id="type.276">
            <name>UnaryPred&lt;bool>*</name>
            <content>
                <baseType ref="type.273"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1580084">
            <name>UnicodeException</name>
        </type>
        <type derived="true" id="type.1582278">
            <name>UnicodeException&amp;&amp;</name>
            <content>
                <baseType ref="1580084"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580085">
            <name>UnicodeException*</name>
            <content>
                <baseType ref="1580084"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.692" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <primaryType ref="1584089"/>
                <argumentType ref="type.673"/>
            </content>
        </type>
        <type derived="true" id="type.700">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;</name>
            <content>
                <baseType ref="type.692"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.697">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;&amp;</name>
            <content>
                <baseType ref="type.692"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.693">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>*</name>
            <content>
                <baseType ref="type.692"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.879" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>></name>
            <content>
                <primaryType ref="1584089"/>
                <argumentType ref="type.859"/>
            </content>
        </type>
        <type id="type.1581862" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>></name>
            <content>
                <primaryType ref="1584089"/>
                <argumentType ref="type.1581842"/>
            </content>
        </type>
        <type id="type.1581912" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>></name>
            <content>
                <primaryType ref="1584089"/>
                <argumentType ref="type.1581892"/>
            </content>
        </type>
        <type derived="true" id="type.887">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>>&amp;</name>
            <content>
                <baseType ref="type.879"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581870">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>>&amp;</name>
            <content>
                <baseType ref="type.1581862"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581920">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>>&amp;</name>
            <content>
                <baseType ref="type.1581912"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.884">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>>&amp;&amp;</name>
            <content>
                <baseType ref="type.879"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581917">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1581912"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581867">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1581862"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581917">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>>&amp;&amp;</name>
            <content>
                <baseType ref="type.1581912"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.880">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>>*</name>
            <content>
                <baseType ref="type.879"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581913">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>>*</name>
            <content>
                <baseType ref="type.1581912"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581863">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;T>>*</name>
            <content>
                <baseType ref="type.1581862"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.831" specialization="true">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;ValueType>></name>
            <content>
                <primaryType ref="1584089"/>
                <argumentType ref="type.810"/>
            </content>
        </type>
        <type derived="true" id="type.839">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;ValueType>>&amp;</name>
            <content>
                <baseType ref="type.831"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.836">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;ValueType>>&amp;&amp;</name>
            <content>
                <baseType ref="type.831"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.832">
            <name>UniquePtr&lt;RedBlackTreeNode&lt;ValueType>>*</name>
            <content>
                <baseType ref="type.831"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1580305" specialization="true">
            <name>UniquePtr&lt;System.IO.ByteStream></name>
            <content>
                <primaryType ref="1584089"/>
                <argumentType ref="1579660"/>
            </content>
        </type>
        <type derived="true" id="type.1580314">
            <name>UniquePtr&lt;System.IO.ByteStream>&amp;</name>
            <content>
                <baseType ref="type.1580305"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580310">
            <name>UniquePtr&lt;System.IO.ByteStream>&amp;&amp;</name>
            <content>
                <baseType ref="type.1580305"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580306">
            <name>UniquePtr&lt;System.IO.ByteStream>*</name>
            <content>
                <baseType ref="type.1580305"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1580455" specialization="true">
            <name>UniquePtr&lt;System.IO.InputStream></name>
            <content>
                <primaryType ref="1584089"/>
                <argumentType ref="1580056"/>
            </content>
        </type>
        <type derived="true" id="type.1580463">
            <name>UniquePtr&lt;System.IO.InputStream>&amp;</name>
            <content>
                <baseType ref="type.1580455"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580460">
            <name>UniquePtr&lt;System.IO.InputStream>&amp;&amp;</name>
            <content>
                <baseType ref="type.1580455"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580456">
            <name>UniquePtr&lt;System.IO.InputStream>*</name>
            <content>
                <baseType ref="type.1580455"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1580445" specialization="true">
            <name>UniquePtr&lt;System.IO.OutputStream></name>
            <content>
                <primaryType ref="1584089"/>
                <argumentType ref="1580060"/>
            </content>
        </type>
        <type derived="true" id="type.1580454">
            <name>UniquePtr&lt;System.IO.OutputStream>&amp;</name>
            <content>
                <baseType ref="type.1580445"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580450">
            <name>UniquePtr&lt;System.IO.OutputStream>&amp;&amp;</name>
            <content>
                <baseType ref="type.1580445"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580446">
            <name>UniquePtr&lt;System.IO.OutputStream>*</name>
            <content>
                <baseType ref="type.1580445"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582983" specialization="true">
            <name>UniquePtr&lt;System.Unicode.AgeTable></name>
            <content>
                <primaryType ref="1584089"/>
                <argumentType ref="1580112"/>
            </content>
        </type>
        <type derived="true" id="type.1582990">
            <name>UniquePtr&lt;System.Unicode.AgeTable>&amp;</name>
            <content>
                <baseType ref="type.1582983"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582988">
            <name>UniquePtr&lt;System.Unicode.AgeTable>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582983"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582984">
            <name>UniquePtr&lt;System.Unicode.AgeTable>*</name>
            <content>
                <baseType ref="type.1582983"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583879" specialization="true">
            <name>UniquePtr&lt;System.Unicode.AliasTypeTable></name>
            <content>
                <primaryType ref="1584089"/>
                <argumentType ref="1580161"/>
            </content>
        </type>
        <type derived="true" id="type.1583886">
            <name>UniquePtr&lt;System.Unicode.AliasTypeTable>&amp;</name>
            <content>
                <baseType ref="type.1583879"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583884">
            <name>UniquePtr&lt;System.Unicode.AliasTypeTable>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583879"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583880">
            <name>UniquePtr&lt;System.Unicode.AliasTypeTable>*</name>
            <content>
                <baseType ref="type.1583879"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583521" specialization="true">
            <name>UniquePtr&lt;System.Unicode.BidiClassTable></name>
            <content>
                <primaryType ref="1584089"/>
                <argumentType ref="1580143"/>
            </content>
        </type>
        <type derived="true" id="type.1583528">
            <name>UniquePtr&lt;System.Unicode.BidiClassTable>&amp;</name>
            <content>
                <baseType ref="type.1583521"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583526">
            <name>UniquePtr&lt;System.Unicode.BidiClassTable>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583521"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583522">
            <name>UniquePtr&lt;System.Unicode.BidiClassTable>*</name>
            <content>
                <baseType ref="type.1583521"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583700" specialization="true">
            <name>UniquePtr&lt;System.Unicode.BidiPairedBracketTypeTable></name>
            <content>
                <primaryType ref="1584089"/>
                <argumentType ref="1580152"/>
            </content>
        </type>
        <type derived="true" id="type.1583707">
            <name>UniquePtr&lt;System.Unicode.BidiPairedBracketTypeTable>&amp;</name>
            <content>
                <baseType ref="type.1583700"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583705">
            <name>UniquePtr&lt;System.Unicode.BidiPairedBracketTypeTable>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583700"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583701">
            <name>UniquePtr&lt;System.Unicode.BidiPairedBracketTypeTable>*</name>
            <content>
                <baseType ref="type.1583700"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582465" specialization="true">
            <name>UniquePtr&lt;System.Unicode.BinaryPropertyTable></name>
            <content>
                <primaryType ref="1584089"/>
                <argumentType ref="1580089"/>
            </content>
        </type>
        <type derived="true" id="type.1582472">
            <name>UniquePtr&lt;System.Unicode.BinaryPropertyTable>&amp;</name>
            <content>
                <baseType ref="type.1582465"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582470">
            <name>UniquePtr&lt;System.Unicode.BinaryPropertyTable>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582465"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582466">
            <name>UniquePtr&lt;System.Unicode.BinaryPropertyTable>*</name>
            <content>
                <baseType ref="type.1582465"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582623" specialization="true">
            <name>UniquePtr&lt;System.Unicode.BlockTable></name>
            <content>
                <primaryType ref="1584089"/>
                <argumentType ref="1580096"/>
            </content>
        </type>
        <type derived="true" id="type.1582630">
            <name>UniquePtr&lt;System.Unicode.BlockTable>&amp;</name>
            <content>
                <baseType ref="type.1582623"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582628">
            <name>UniquePtr&lt;System.Unicode.BlockTable>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582623"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582624">
            <name>UniquePtr&lt;System.Unicode.BlockTable>*</name>
            <content>
                <baseType ref="type.1582623"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583933" specialization="true">
            <name>UniquePtr&lt;System.Unicode.CharacterInfo></name>
            <content>
                <primaryType ref="1584089"/>
                <argumentType ref="1580125"/>
            </content>
        </type>
        <type derived="true" id="type.1583940">
            <name>UniquePtr&lt;System.Unicode.CharacterInfo>&amp;</name>
            <content>
                <baseType ref="type.1583933"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583938">
            <name>UniquePtr&lt;System.Unicode.CharacterInfo>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583933"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583934">
            <name>UniquePtr&lt;System.Unicode.CharacterInfo>*</name>
            <content>
                <baseType ref="type.1583933"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1584022" specialization="true">
            <name>UniquePtr&lt;System.Unicode.CharacterInfoPage></name>
            <content>
                <primaryType ref="1584089"/>
                <argumentType ref="1580173"/>
            </content>
        </type>
        <type derived="true" id="type.1584030">
            <name>UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;</name>
            <content>
                <baseType ref="type.1584022"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584027">
            <name>UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;&amp;</name>
            <content>
                <baseType ref="type.1584022"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584023">
            <name>UniquePtr&lt;System.Unicode.CharacterInfoPage>*</name>
            <content>
                <baseType ref="type.1584022"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1584013" specialization="true">
            <name>UniquePtr&lt;System.Unicode.CharacterTable></name>
            <content>
                <primaryType ref="1584089"/>
                <argumentType ref="1580185"/>
            </content>
        </type>
        <type derived="true" id="type.1584021">
            <name>UniquePtr&lt;System.Unicode.CharacterTable>&amp;</name>
            <content>
                <baseType ref="type.1584013"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584018">
            <name>UniquePtr&lt;System.Unicode.CharacterTable>&amp;&amp;</name>
            <content>
                <baseType ref="type.1584013"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584014">
            <name>UniquePtr&lt;System.Unicode.CharacterTable>*</name>
            <content>
                <baseType ref="type.1584013"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583962" specialization="true">
            <name>UniquePtr&lt;System.Unicode.ExtendedCharacterInfo></name>
            <content>
                <primaryType ref="1584089"/>
                <argumentType ref="1580169"/>
            </content>
        </type>
        <type derived="true" id="type.1583969">
            <name>UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;</name>
            <content>
                <baseType ref="type.1583962"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583967">
            <name>UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583962"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583963">
            <name>UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*</name>
            <content>
                <baseType ref="type.1583962"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1584051" specialization="true">
            <name>UniquePtr&lt;System.Unicode.ExtendedCharacterInfoHeader></name>
            <content>
                <primaryType ref="1584089"/>
                <argumentType ref="1580181"/>
            </content>
        </type>
        <type derived="true" id="type.1584059">
            <name>UniquePtr&lt;System.Unicode.ExtendedCharacterInfoHeader>&amp;</name>
            <content>
                <baseType ref="type.1584051"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584056">
            <name>UniquePtr&lt;System.Unicode.ExtendedCharacterInfoHeader>&amp;&amp;</name>
            <content>
                <baseType ref="type.1584051"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584052">
            <name>UniquePtr&lt;System.Unicode.ExtendedCharacterInfoHeader>*</name>
            <content>
                <baseType ref="type.1584051"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1584060" specialization="true">
            <name>UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage></name>
            <content>
                <primaryType ref="1584089"/>
                <argumentType ref="1580177"/>
            </content>
        </type>
        <type derived="true" id="type.1584068">
            <name>UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;</name>
            <content>
                <baseType ref="type.1584060"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584065">
            <name>UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;&amp;</name>
            <content>
                <baseType ref="type.1584060"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584061">
            <name>UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*</name>
            <content>
                <baseType ref="type.1584060"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1582804" specialization="true">
            <name>UniquePtr&lt;System.Unicode.GeneralCategoryTable></name>
            <content>
                <primaryType ref="1584089"/>
                <argumentType ref="1580103"/>
            </content>
        </type>
        <type derived="true" id="type.1582811">
            <name>UniquePtr&lt;System.Unicode.GeneralCategoryTable>&amp;</name>
            <content>
                <baseType ref="type.1582804"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582809">
            <name>UniquePtr&lt;System.Unicode.GeneralCategoryTable>&amp;&amp;</name>
            <content>
                <baseType ref="type.1582804"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582805">
            <name>UniquePtr&lt;System.Unicode.GeneralCategoryTable>*</name>
            <content>
                <baseType ref="type.1582804"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583364" specialization="true">
            <name>UniquePtr&lt;System.Unicode.NumericTypeTable></name>
            <content>
                <primaryType ref="1584089"/>
                <argumentType ref="1580134"/>
            </content>
        </type>
        <type derived="true" id="type.1583371">
            <name>UniquePtr&lt;System.Unicode.NumericTypeTable>&amp;</name>
            <content>
                <baseType ref="type.1583364"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583369">
            <name>UniquePtr&lt;System.Unicode.NumericTypeTable>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583364"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583365">
            <name>UniquePtr&lt;System.Unicode.NumericTypeTable>*</name>
            <content>
                <baseType ref="type.1583364"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1583162" specialization="true">
            <name>UniquePtr&lt;System.Unicode.ScriptTable></name>
            <content>
                <primaryType ref="1584089"/>
                <argumentType ref="1580121"/>
            </content>
        </type>
        <type derived="true" id="type.1583169">
            <name>UniquePtr&lt;System.Unicode.ScriptTable>&amp;</name>
            <content>
                <baseType ref="type.1583162"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583167">
            <name>UniquePtr&lt;System.Unicode.ScriptTable>&amp;&amp;</name>
            <content>
                <baseType ref="type.1583162"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583163">
            <name>UniquePtr&lt;System.Unicode.ScriptTable>*</name>
            <content>
                <baseType ref="type.1583162"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="type.1584089" specialization="true">
            <name>UniquePtr&lt;T></name>
            <content>
                <primaryType ref="1584089"/>
                <argumentType ref="1580188"/>
            </content>
        </type>
        <type id="type.1584100" specialization="true">
            <name>UniquePtr&lt;T></name>
            <content>
                <primaryType ref="1584089"/>
                <argumentType ref="1580189"/>
            </content>
        </type>
        <type id="type.1584111" specialization="true">
            <name>UniquePtr&lt;T></name>
            <content>
                <primaryType ref="1584089"/>
                <argumentType ref="1580190"/>
            </content>
        </type>
        <type id="1580187">
            <name>UniquePtr&lt;T></name>
        </type>
        <type derived="true" id="type.1417">
            <name>UniquePtr&lt;T>&amp;</name>
            <content>
                <baseType ref="type.1584089"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584121">
            <name>UniquePtr&lt;T>&amp;</name>
            <content>
                <baseType ref="type.1584111"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584110">
            <name>UniquePtr&lt;T>&amp;</name>
            <content>
                <baseType ref="type.1584100"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584121">
            <name>UniquePtr&lt;T>&amp;</name>
            <content>
                <baseType ref="type.1584111"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584106">
            <name>UniquePtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.1584100"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584117">
            <name>UniquePtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.1584111"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584106">
            <name>UniquePtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.1584100"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1413">
            <name>UniquePtr&lt;T>&amp;&amp;</name>
            <content>
                <baseType ref="type.1584089"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1408">
            <name>UniquePtr&lt;T>*</name>
            <content>
                <baseType ref="type.1584089"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584101">
            <name>UniquePtr&lt;T>*</name>
            <content>
                <baseType ref="type.1584100"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584112">
            <name>UniquePtr&lt;T>*</name>
            <content>
                <baseType ref="type.1584111"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type id="1579729">
            <name>V</name>
        </type>
        <type id="1579740">
            <name>Value</name>
        </type>
        <type derived="true" id="type.701">
            <name>Value&amp;</name>
            <content>
                <baseType ref="1579975"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.656">
            <name>Value&amp;&amp;</name>
            <content>
                <baseType ref="1579975"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type id="1579972">
            <name>ValueType</name>
        </type>
        <type derived="true" id="type.491">
            <name>ValueType&amp;</name>
            <content>
                <baseType ref="1579949"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.814">
            <name>ValueType&amp;</name>
            <content>
                <baseType ref="1580043"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.818">
            <name>ValueType*</name>
            <content>
                <baseType ref="1580043"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581473">
            <name>ValueType*</name>
            <content>
                <baseType ref="1579970"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.492">
            <name>ValueType*</name>
            <content>
                <baseType ref="1579949"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581474">
            <name>ValueType*</name>
            <content>
                <baseType ref="1579971"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581475">
            <name>ValueType*</name>
            <content>
                <baseType ref="1579972"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581474">
            <name>ValueType*</name>
            <content>
                <baseType ref="1579971"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.1579450">
            <name>bool</name>
        </type>
        <type derived="true" id="type.1580480">
            <name>bool&amp;</name>
            <content>
                <baseType ref="type.1579450"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type basic="true" id="type.1579452">
            <name>byte</name>
        </type>
        <type derived="true" id="type.1580472">
            <name>byte&amp;</name>
            <content>
                <baseType ref="type.1579452"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1579470">
            <name>byte*</name>
            <content>
                <baseType ref="type.1579452"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584264">
            <name>byte*&amp;</name>
            <content>
                <baseType ref="type.1579452"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584261">
            <name>byte*&amp;&amp;</name>
            <content>
                <baseType ref="type.1579452"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type basic="true" id="type.1579461">
            <name>char</name>
        </type>
        <type derived="true" id="type.1580250">
            <name>char&amp;</name>
            <content>
                <baseType ref="type.1579461"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1579488">
            <name>char*</name>
            <content>
                <baseType ref="type.1579461"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584179">
            <name>char*&amp;</name>
            <content>
                <baseType ref="type.1579461"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584140">
            <name>char*&amp;&amp;</name>
            <content>
                <baseType ref="type.1579461"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580111">
            <name>const Age*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580108"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582858">
            <name>const Age*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580108"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582995">
            <name>const Age**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580108"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582841">
            <name>const AgeId&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580107"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582989">
            <name>const AgeTable&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580112"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580114">
            <name>const AgeTable*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580112"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583913">
            <name>const Alias&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580165"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580168">
            <name>const Alias*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580165"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580160">
            <name>const AliasType*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580157"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583754">
            <name>const AliasType*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580157"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583891">
            <name>const AliasType**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580157"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583737">
            <name>const AliasTypeId&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580156"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583885">
            <name>const AliasTypeTable&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580161"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580163">
            <name>const AliasTypeTable*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580161"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580142">
            <name>const BidiClass*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580139"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583396">
            <name>const BidiClass*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580139"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583533">
            <name>const BidiClass**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580139"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583379">
            <name>const BidiClassId&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580138"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583527">
            <name>const BidiClassTable&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580143"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580145">
            <name>const BidiClassTable*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580143"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580151">
            <name>const BidiPairedBracketType*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580148"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583575">
            <name>const BidiPairedBracketType*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580148"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583712">
            <name>const BidiPairedBracketType**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580148"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583558">
            <name>const BidiPairedBracketTypeId&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580147"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583706">
            <name>const BidiPairedBracketTypeTable&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580152"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580154">
            <name>const BidiPairedBracketTypeTable*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580152"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584347">
            <name>const BinaryFun&lt;String&lt;char>, String&lt;char>, bool>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582374"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584576">
            <name>const BinaryFun&lt;System.Unicode.AgeId, System.Unicode.AgeId, bool>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582847"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584981">
            <name>const BinaryFun&lt;System.Unicode.AliasTypeId, System.Unicode.AliasTypeId, bool>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583743"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584819">
            <name>const BinaryFun&lt;System.Unicode.BidiClassId, System.Unicode.BidiClassId, bool>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583385"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584900">
            <name>const BinaryFun&lt;System.Unicode.BidiPairedBracketTypeId, System.Unicode.BidiPairedBracketTypeId, bool>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583564"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584311">
            <name>const BinaryFun&lt;System.Unicode.BinaryPropertyId, System.Unicode.BinaryPropertyId, bool>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582293"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584414">
            <name>const BinaryFun&lt;System.Unicode.BlockId, System.Unicode.BlockId, bool>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582487"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584495">
            <name>const BinaryFun&lt;System.Unicode.GeneralCategoryId, System.Unicode.GeneralCategoryId, bool>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582668"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584738">
            <name>const BinaryFun&lt;System.Unicode.NumericTypeId, System.Unicode.NumericTypeId, bool>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583206"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584657">
            <name>const BinaryFun&lt;System.Unicode.ScriptId, System.Unicode.ScriptId, bool>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583026"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584344">
            <name>const BinaryPred&lt;String&lt;char>, String&lt;char>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582373"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584573">
            <name>const BinaryPred&lt;System.Unicode.AgeId, System.Unicode.AgeId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582846"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584978">
            <name>const BinaryPred&lt;System.Unicode.AliasTypeId, System.Unicode.AliasTypeId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583742"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584816">
            <name>const BinaryPred&lt;System.Unicode.BidiClassId, System.Unicode.BidiClassId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583384"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584897">
            <name>const BinaryPred&lt;System.Unicode.BidiPairedBracketTypeId, System.Unicode.BidiPairedBracketTypeId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583563"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584308">
            <name>const BinaryPred&lt;System.Unicode.BinaryPropertyId, System.Unicode.BinaryPropertyId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582292"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584411">
            <name>const BinaryPred&lt;System.Unicode.BlockId, System.Unicode.BlockId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582486"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584492">
            <name>const BinaryPred&lt;System.Unicode.GeneralCategoryId, System.Unicode.GeneralCategoryId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582667"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584735">
            <name>const BinaryPred&lt;System.Unicode.NumericTypeId, System.Unicode.NumericTypeId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583205"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584654">
            <name>const BinaryPred&lt;System.Unicode.ScriptId, System.Unicode.ScriptId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583025"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582282">
            <name>const BinaryProperty*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580087"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582304">
            <name>const BinaryProperty*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580087"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582447">
            <name>const BinaryProperty**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580087"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582287">
            <name>const BinaryPropertyId&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580086"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582471">
            <name>const BinaryPropertyTable&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580089"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580091">
            <name>const BinaryPropertyTable*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580089"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1423">
            <name>const BinaryReader</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579649"/>
            </content>
        </type>
        <type derived="true" id="type.1424">
            <name>const BinaryReader&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579649"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1425">
            <name>const BinaryWriter</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579651"/>
            </content>
        </type>
        <type derived="true" id="type.1426">
            <name>const BinaryWriter&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579651"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.277">
            <name>const BitAnd&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580840"/>
            </content>
        </type>
        <type derived="true" id="type.278">
            <name>const BitAnd&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580840"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.292">
            <name>const BitNot&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580861"/>
            </content>
        </type>
        <type derived="true" id="type.293">
            <name>const BitNot&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580861"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.282">
            <name>const BitOr&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580847"/>
            </content>
        </type>
        <type derived="true" id="type.283">
            <name>const BitOr&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580847"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.287">
            <name>const BitXor&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580854"/>
            </content>
        </type>
        <type derived="true" id="type.288">
            <name>const BitXor&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580854"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1444">
            <name>const Bitset</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579653"/>
            </content>
        </type>
        <type derived="true" id="type.1580409">
            <name>const Bitset&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579653"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1579656">
            <name>const Bitset*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579653"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582476">
            <name>const Block*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580094"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582498">
            <name>const Block*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580094"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582635">
            <name>const Block**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580094"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582481">
            <name>const BlockId&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580093"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582629">
            <name>const BlockTable&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580096"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580098">
            <name>const BlockTable*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580096"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.379">
            <name>const Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580978"/>
            </content>
        </type>
        <type derived="true" id="type.334">
            <name>const Bucket&lt;Pair&lt;K, T>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.332"/>
            </content>
        </type>
        <type derived="true" id="type.335">
            <name>const Bucket&lt;Pair&lt;K, T>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.332"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580981">
            <name>const Bucket&lt;Pair&lt;K, T>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580978"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.353">
            <name>const Bucket&lt;Pair&lt;K, T>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.332"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580999">
            <name>const Bucket&lt;Pair&lt;K, T>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580978"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581000">
            <name>const Bucket&lt;Pair&lt;K, T>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580978"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.354">
            <name>const Bucket&lt;Pair&lt;K, T>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.332"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581000">
            <name>const Bucket&lt;Pair&lt;K, T>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580978"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1180">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, Age*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582941"/>
            </content>
        </type>
        <type derived="true" id="type.1582944">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, Age*>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582941"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582962">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582941"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582963">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, Age*>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582941"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1345">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583837"/>
            </content>
        </type>
        <type derived="true" id="type.1583840">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583837"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583858">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583837"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583859">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583837"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1279">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583479"/>
            </content>
        </type>
        <type derived="true" id="type.1583482">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583479"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583500">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583479"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583501">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583479"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1312">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583658"/>
            </content>
        </type>
        <type derived="true" id="type.1583661">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583658"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583679">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583658"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583680">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583658"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1081">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582401"/>
            </content>
        </type>
        <type derived="true" id="type.1582404">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582401"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582422">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582401"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582423">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582401"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1114">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, Block*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582581"/>
            </content>
        </type>
        <type derived="true" id="type.1582584">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, Block*>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582581"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582602">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582581"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582603">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, Block*>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582581"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1147">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582762"/>
            </content>
        </type>
        <type derived="true" id="type.1582765">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582762"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582783">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582762"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582784">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582762"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1246">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583300"/>
            </content>
        </type>
        <type derived="true" id="type.1583303">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583300"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583321">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583300"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583322">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583300"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1213">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, Script*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583120"/>
            </content>
        </type>
        <type derived="true" id="type.1583123">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, Script*>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583120"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583141">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583120"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583142">
            <name>const Bucket&lt;Pair&lt;String&lt;char>, Script*>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583120"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1167">
            <name>const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582876"/>
            </content>
        </type>
        <type derived="true" id="type.1582879">
            <name>const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582876"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582897">
            <name>const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582876"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582898">
            <name>const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582876"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1332">
            <name>const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583772"/>
            </content>
        </type>
        <type derived="true" id="type.1583775">
            <name>const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583772"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583793">
            <name>const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583772"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583794">
            <name>const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583772"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1266">
            <name>const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583414"/>
            </content>
        </type>
        <type derived="true" id="type.1583417">
            <name>const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583414"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583435">
            <name>const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583414"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583436">
            <name>const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583414"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1299">
            <name>const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583593"/>
            </content>
        </type>
        <type derived="true" id="type.1583596">
            <name>const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583593"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583614">
            <name>const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583593"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583615">
            <name>const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583593"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1067">
            <name>const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582322"/>
            </content>
        </type>
        <type derived="true" id="type.1582325">
            <name>const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582322"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582343">
            <name>const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582322"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582344">
            <name>const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582322"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1101">
            <name>const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582516"/>
            </content>
        </type>
        <type derived="true" id="type.1582519">
            <name>const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582516"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582537">
            <name>const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582516"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582538">
            <name>const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582516"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1134">
            <name>const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582697"/>
            </content>
        </type>
        <type derived="true" id="type.1582700">
            <name>const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582697"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582718">
            <name>const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582697"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582719">
            <name>const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582697"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1233">
            <name>const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583235"/>
            </content>
        </type>
        <type derived="true" id="type.1583238">
            <name>const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583235"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583256">
            <name>const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583235"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583257">
            <name>const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583235"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1200">
            <name>const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583055"/>
            </content>
        </type>
        <type derived="true" id="type.1583058">
            <name>const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583055"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583076">
            <name>const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583055"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583077">
            <name>const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583055"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.481">
            <name>const Bucket&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.479"/>
            </content>
        </type>
        <type derived="true" id="type.487">
            <name>const Bucket&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581199"/>
            </content>
        </type>
        <type derived="true" id="type.454">
            <name>const Bucket&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581106"/>
            </content>
        </type>
        <type derived="true" id="type.410">
            <name>const Bucket&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.408"/>
            </content>
        </type>
        <type derived="true" id="type.471">
            <name>const Bucket&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581176"/>
            </content>
        </type>
        <type derived="true" id="type.411">
            <name>const Bucket&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.408"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581109">
            <name>const Bucket&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581106"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.482">
            <name>const Bucket&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.479"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581109">
            <name>const Bucket&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581106"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581202">
            <name>const Bucket&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581199"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.472">
            <name>const Bucket&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581176"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.429">
            <name>const Bucket&lt;T>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.408"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581127">
            <name>const Bucket&lt;T>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581106"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581128">
            <name>const Bucket&lt;T>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581106"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.430">
            <name>const Bucket&lt;T>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.408"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.499">
            <name>const Bucket&lt;ValueType></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.497"/>
            </content>
        </type>
        <type derived="true" id="type.500">
            <name>const Bucket&lt;ValueType>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.497"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.520">
            <name>const Bucket&lt;ValueType>*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.497"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.521">
            <name>const Bucket&lt;ValueType>**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.497"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1427">
            <name>const BufferedByteStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579657"/>
            </content>
        </type>
        <type derived="true" id="type.1580438">
            <name>const BufferedByteStream&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579657"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1428">
            <name>const ByteStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579660"/>
            </content>
        </type>
        <type derived="true" id="type.1580313">
            <name>const ByteStream&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579660"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580311">
            <name>const ByteStream*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579660"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580286">
            <name>const CharClass&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579647"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580287">
            <name>const CharClass*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579647"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582006">
            <name>const CharT&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580070"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582096">
            <name>const CharT&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580072"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.937">
            <name>const CharT&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580069"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582051">
            <name>const CharT&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580071"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582231">
            <name>const CharT&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580075"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582187">
            <name>const CharT&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580074"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582141">
            <name>const CharT&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580073"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582231">
            <name>const CharT&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580075"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582007">
            <name>const CharT*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580070"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582097">
            <name>const CharT*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580072"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582182">
            <name>const CharT*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580074"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582142">
            <name>const CharT*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580073"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582232">
            <name>const CharT*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580075"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582052">
            <name>const CharT*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580071"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.938">
            <name>const CharT*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580069"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583932">
            <name>const CharacterInfo&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580125"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580128">
            <name>const CharacterInfo*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580125"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584029">
            <name>const CharacterInfoPage&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580173"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580176">
            <name>const CharacterInfoPage*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580173"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584020">
            <name>const CharacterTable&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580185"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584019">
            <name>const CharacterTable*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580185"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1448">
            <name>const CodeFormatter</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579662"/>
            </content>
        </type>
        <type derived="true" id="type.1449">
            <name>const CodeFormatter&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579662"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1579665">
            <name>const CodeFormatter*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579662"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1451">
            <name>const ConversionException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579792"/>
            </content>
        </type>
        <type derived="true" id="type.1452">
            <name>const ConversionException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579792"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.138">
            <name>const Divides&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580659"/>
            </content>
        </type>
        <type derived="true" id="type.139">
            <name>const Divides&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580659"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584222">
            <name>const Endl&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580062"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1076">
            <name>const EqualTo&lt;String&lt;char>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582369"/>
            </content>
        </type>
        <type derived="true" id="type.1584338">
            <name>const EqualTo&lt;String&lt;char>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582369"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582371">
            <name>const EqualTo&lt;String&lt;char>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582369"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1162">
            <name>const EqualTo&lt;System.Unicode.AgeId></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582842"/>
            </content>
        </type>
        <type derived="true" id="type.1584567">
            <name>const EqualTo&lt;System.Unicode.AgeId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582842"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582844">
            <name>const EqualTo&lt;System.Unicode.AgeId>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582842"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1327">
            <name>const EqualTo&lt;System.Unicode.AliasTypeId></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583738"/>
            </content>
        </type>
        <type derived="true" id="type.1584972">
            <name>const EqualTo&lt;System.Unicode.AliasTypeId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583738"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583740">
            <name>const EqualTo&lt;System.Unicode.AliasTypeId>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583738"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1261">
            <name>const EqualTo&lt;System.Unicode.BidiClassId></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583380"/>
            </content>
        </type>
        <type derived="true" id="type.1584810">
            <name>const EqualTo&lt;System.Unicode.BidiClassId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583380"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583382">
            <name>const EqualTo&lt;System.Unicode.BidiClassId>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583380"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1294">
            <name>const EqualTo&lt;System.Unicode.BidiPairedBracketTypeId></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583559"/>
            </content>
        </type>
        <type derived="true" id="type.1584891">
            <name>const EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583559"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583561">
            <name>const EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583559"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1062">
            <name>const EqualTo&lt;System.Unicode.BinaryPropertyId></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582288"/>
            </content>
        </type>
        <type derived="true" id="type.1584302">
            <name>const EqualTo&lt;System.Unicode.BinaryPropertyId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582288"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582290">
            <name>const EqualTo&lt;System.Unicode.BinaryPropertyId>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582288"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1096">
            <name>const EqualTo&lt;System.Unicode.BlockId></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582482"/>
            </content>
        </type>
        <type derived="true" id="type.1584405">
            <name>const EqualTo&lt;System.Unicode.BlockId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582482"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582484">
            <name>const EqualTo&lt;System.Unicode.BlockId>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582482"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1129">
            <name>const EqualTo&lt;System.Unicode.GeneralCategoryId></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582663"/>
            </content>
        </type>
        <type derived="true" id="type.1584486">
            <name>const EqualTo&lt;System.Unicode.GeneralCategoryId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582663"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582665">
            <name>const EqualTo&lt;System.Unicode.GeneralCategoryId>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582663"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1228">
            <name>const EqualTo&lt;System.Unicode.NumericTypeId></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583201"/>
            </content>
        </type>
        <type derived="true" id="type.1584729">
            <name>const EqualTo&lt;System.Unicode.NumericTypeId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583201"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583203">
            <name>const EqualTo&lt;System.Unicode.NumericTypeId>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583201"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1195">
            <name>const EqualTo&lt;System.Unicode.ScriptId></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583021"/>
            </content>
        </type>
        <type derived="true" id="type.1584648">
            <name>const EqualTo&lt;System.Unicode.ScriptId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583021"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583023">
            <name>const EqualTo&lt;System.Unicode.ScriptId>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583021"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.170">
            <name>const EqualTo&lt;T, U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580705"/>
            </content>
        </type>
        <type derived="true" id="type.171">
            <name>const EqualTo&lt;T, U>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580705"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.161">
            <name>const EqualTo&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580694"/>
            </content>
        </type>
        <type derived="true" id="type.162">
            <name>const EqualTo&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580694"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1453">
            <name>const Exception</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579802"/>
            </content>
        </type>
        <type derived="true" id="type.1580237">
            <name>const Exception&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579802"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1579805">
            <name>const Exception*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579802"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583961">
            <name>const ExtendedCharacterInfo&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580169"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580172">
            <name>const ExtendedCharacterInfo*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580169"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584058">
            <name>const ExtendedCharacterInfoHeader&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580181"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580184">
            <name>const ExtendedCharacterInfoHeader*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580181"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584067">
            <name>const ExtendedCharacterInfoPage&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580177"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580180">
            <name>const ExtendedCharacterInfoPage*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580177"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1429">
            <name>const FileByteStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579807"/>
            </content>
        </type>
        <type derived="true" id="type.1580481">
            <name>const FileByteStream&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579807"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1579810">
            <name>const FileByteStream*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579807"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1430">
            <name>const FileSystemException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579812"/>
            </content>
        </type>
        <type derived="true" id="type.1431">
            <name>const FileSystemException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579812"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.108">
            <name>const ForwardList&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580585"/>
            </content>
        </type>
        <type derived="true" id="type.100">
            <name>const ForwardList&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580557"/>
            </content>
        </type>
        <type derived="true" id="type.74">
            <name>const ForwardList&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580529"/>
            </content>
        </type>
        <type derived="true" id="type.1580611">
            <name>const ForwardList&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580585"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.98">
            <name>const ForwardList&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580529"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580583">
            <name>const ForwardList&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580557"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580611">
            <name>const ForwardList&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580585"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580560">
            <name>const ForwardList&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580557"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.75">
            <name>const ForwardList&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580529"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580588">
            <name>const ForwardList&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580585"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.102">
            <name>const ForwardListNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580567"/>
            </content>
        </type>
        <type derived="true" id="type.110">
            <name>const ForwardListNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580595"/>
            </content>
        </type>
        <type derived="true" id="type.54">
            <name>const ForwardListNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580497"/>
            </content>
        </type>
        <type derived="true" id="type.63">
            <name>const ForwardListNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.61"/>
            </content>
        </type>
        <type derived="true" id="type.71">
            <name>const ForwardListNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580520"/>
            </content>
        </type>
        <type derived="true" id="type.84">
            <name>const ForwardListNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.82"/>
            </content>
        </type>
        <type derived="true" id="type.85">
            <name>const ForwardListNode&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.82"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580523">
            <name>const ForwardListNode&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580520"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.64">
            <name>const ForwardListNode&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.61"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580598">
            <name>const ForwardListNode&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580595"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.55">
            <name>const ForwardListNode&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580497"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580570">
            <name>const ForwardListNode&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580567"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580523">
            <name>const ForwardListNode&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580520"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.70">
            <name>const ForwardListNodeIterator&lt;T, R, P></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580516"/>
            </content>
        </type>
        <type derived="true" id="type.59">
            <name>const ForwardListNodeIterator&lt;T, R, P></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580503"/>
            </content>
        </type>
        <type derived="true" id="type.67">
            <name>const ForwardListNodeIterator&lt;T, R, P>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580503"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580526">
            <name>const ForwardListNodeIterator&lt;T, R, P>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580516"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580519">
            <name>const ForwardListNodeIterator&lt;T, R, P>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580516"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.60">
            <name>const ForwardListNodeIterator&lt;T, R, P>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580503"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.105">
            <name>const ForwardListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580576"/>
            </content>
        </type>
        <type derived="true" id="type.113">
            <name>const ForwardListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580604"/>
            </content>
        </type>
        <type derived="true" id="type.93">
            <name>const ForwardListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.91"/>
            </content>
        </type>
        <type derived="true" id="type.95">
            <name>const ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.91"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.114">
            <name>const ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580604"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.106">
            <name>const ForwardListNodeIterator&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580576"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580607">
            <name>const ForwardListNodeIterator&lt;T, T&amp;, T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580604"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580579">
            <name>const ForwardListNodeIterator&lt;T, T&amp;, T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580576"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.94">
            <name>const ForwardListNodeIterator&lt;T, T&amp;, T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.91"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580607">
            <name>const ForwardListNodeIterator&lt;T, T&amp;, T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580604"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.109">
            <name>const ForwardListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580591"/>
            </content>
        </type>
        <type derived="true" id="type.80">
            <name>const ForwardListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.78"/>
            </content>
        </type>
        <type derived="true" id="type.101">
            <name>const ForwardListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580563"/>
            </content>
        </type>
        <type derived="true" id="type.87">
            <name>const ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.78"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.103">
            <name>const ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580563"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.111">
            <name>const ForwardListNodeIterator&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580591"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.81">
            <name>const ForwardListNodeIterator&lt;T, const T&amp;, const T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.78"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580594">
            <name>const ForwardListNodeIterator&lt;T, const T&amp;, const T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580591"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580566">
            <name>const ForwardListNodeIterator&lt;T, const T&amp;, const T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580563"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582657">
            <name>const GeneralCategory*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580101"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582679">
            <name>const GeneralCategory*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580101"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582816">
            <name>const GeneralCategory**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580101"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582662">
            <name>const GeneralCategoryId&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580100"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582810">
            <name>const GeneralCategoryTable&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580103"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580105">
            <name>const GeneralCategoryTable*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580103"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.221">
            <name>const Greater&lt;T, U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580768"/>
            </content>
        </type>
        <type derived="true" id="type.222">
            <name>const Greater&lt;T, U>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580768"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.212">
            <name>const Greater&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580757"/>
            </content>
        </type>
        <type derived="true" id="type.213">
            <name>const Greater&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580757"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.255">
            <name>const GreaterOrEqualTo&lt;T, U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580810"/>
            </content>
        </type>
        <type derived="true" id="type.256">
            <name>const GreaterOrEqualTo&lt;T, U>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580810"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.246">
            <name>const GreaterOrEqualTo&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580799"/>
            </content>
        </type>
        <type derived="true" id="type.247">
            <name>const GreaterOrEqualTo&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580799"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.308">
            <name>const HashMap&lt;K, T, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580882"/>
            </content>
        </type>
        <type derived="true" id="type.375">
            <name>const HashMap&lt;K, T, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580952"/>
            </content>
        </type>
        <type derived="true" id="type.1581021">
            <name>const HashMap&lt;K, T, H, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580952"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.309">
            <name>const HashMap&lt;K, T, H, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580882"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580955">
            <name>const HashMap&lt;K, T, H, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580952"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1176">
            <name>const HashMap&lt;String&lt;char>, Age*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582919"/>
            </content>
        </type>
        <type derived="true" id="type.1582922">
            <name>const HashMap&lt;String&lt;char>, Age*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582919"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1341">
            <name>const HashMap&lt;String&lt;char>, AliasType*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583815"/>
            </content>
        </type>
        <type derived="true" id="type.1583818">
            <name>const HashMap&lt;String&lt;char>, AliasType*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583815"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1275">
            <name>const HashMap&lt;String&lt;char>, BidiClass*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583457"/>
            </content>
        </type>
        <type derived="true" id="type.1583460">
            <name>const HashMap&lt;String&lt;char>, BidiClass*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583457"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1308">
            <name>const HashMap&lt;String&lt;char>, BidiPairedBracketType*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583636"/>
            </content>
        </type>
        <type derived="true" id="type.1583639">
            <name>const HashMap&lt;String&lt;char>, BidiPairedBracketType*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583636"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1077">
            <name>const HashMap&lt;String&lt;char>, BinaryProperty*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582379"/>
            </content>
        </type>
        <type derived="true" id="type.1582382">
            <name>const HashMap&lt;String&lt;char>, BinaryProperty*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582379"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1110">
            <name>const HashMap&lt;String&lt;char>, Block*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582559"/>
            </content>
        </type>
        <type derived="true" id="type.1582562">
            <name>const HashMap&lt;String&lt;char>, Block*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582559"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1143">
            <name>const HashMap&lt;String&lt;char>, GeneralCategory*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582740"/>
            </content>
        </type>
        <type derived="true" id="type.1582743">
            <name>const HashMap&lt;String&lt;char>, GeneralCategory*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582740"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1242">
            <name>const HashMap&lt;String&lt;char>, NumericType*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583278"/>
            </content>
        </type>
        <type derived="true" id="type.1583281">
            <name>const HashMap&lt;String&lt;char>, NumericType*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583278"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1209">
            <name>const HashMap&lt;String&lt;char>, Script*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583098"/>
            </content>
        </type>
        <type derived="true" id="type.1583101">
            <name>const HashMap&lt;String&lt;char>, Script*, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583098"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1163">
            <name>const HashMap&lt;System.Unicode.AgeId, Age*, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582852"/>
            </content>
        </type>
        <type derived="true" id="type.1582855">
            <name>const HashMap&lt;System.Unicode.AgeId, Age*, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582852"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1328">
            <name>const HashMap&lt;System.Unicode.AliasTypeId, AliasType*, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583748"/>
            </content>
        </type>
        <type derived="true" id="type.1583751">
            <name>const HashMap&lt;System.Unicode.AliasTypeId, AliasType*, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583748"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1262">
            <name>const HashMap&lt;System.Unicode.BidiClassId, BidiClass*, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583390"/>
            </content>
        </type>
        <type derived="true" id="type.1583393">
            <name>const HashMap&lt;System.Unicode.BidiClassId, BidiClass*, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583390"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1295">
            <name>const HashMap&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583569"/>
            </content>
        </type>
        <type derived="true" id="type.1583572">
            <name>const HashMap&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583569"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1063">
            <name>const HashMap&lt;System.Unicode.BinaryPropertyId, BinaryProperty*, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582298"/>
            </content>
        </type>
        <type derived="true" id="type.1582301">
            <name>const HashMap&lt;System.Unicode.BinaryPropertyId, BinaryProperty*, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582298"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1097">
            <name>const HashMap&lt;System.Unicode.BlockId, Block*, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582492"/>
            </content>
        </type>
        <type derived="true" id="type.1582495">
            <name>const HashMap&lt;System.Unicode.BlockId, Block*, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582492"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1130">
            <name>const HashMap&lt;System.Unicode.GeneralCategoryId, GeneralCategory*, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582673"/>
            </content>
        </type>
        <type derived="true" id="type.1582676">
            <name>const HashMap&lt;System.Unicode.GeneralCategoryId, GeneralCategory*, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582673"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1229">
            <name>const HashMap&lt;System.Unicode.NumericTypeId, NumericType*, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583211"/>
            </content>
        </type>
        <type derived="true" id="type.1583214">
            <name>const HashMap&lt;System.Unicode.NumericTypeId, NumericType*, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583211"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1196">
            <name>const HashMap&lt;System.Unicode.ScriptId, Script*, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583031"/>
            </content>
        </type>
        <type derived="true" id="type.1583034">
            <name>const HashMap&lt;System.Unicode.ScriptId, Script*, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583031"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.450">
            <name>const HashSet&lt;T, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581085"/>
            </content>
        </type>
        <type derived="true" id="type.389">
            <name>const HashSet&lt;T, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581022"/>
            </content>
        </type>
        <type derived="true" id="type.1581148">
            <name>const HashSet&lt;T, H, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581085"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581088">
            <name>const HashSet&lt;T, H, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581085"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.390">
            <name>const HashSet&lt;T, H, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581022"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581088">
            <name>const HashSet&lt;T, H, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581085"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584333">
            <name>const Hasher&lt;String&lt;char>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582365"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584562">
            <name>const Hasher&lt;System.Unicode.AgeId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582837"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584967">
            <name>const Hasher&lt;System.Unicode.AliasTypeId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583733"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584805">
            <name>const Hasher&lt;System.Unicode.BidiClassId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583375"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584886">
            <name>const Hasher&lt;System.Unicode.BidiPairedBracketTypeId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583554"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584297">
            <name>const Hasher&lt;System.Unicode.BinaryPropertyId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582283"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584400">
            <name>const Hasher&lt;System.Unicode.BlockId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582477"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584481">
            <name>const Hasher&lt;System.Unicode.GeneralCategoryId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582658"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584724">
            <name>const Hasher&lt;System.Unicode.NumericTypeId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583196"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584643">
            <name>const Hasher&lt;System.Unicode.ScriptId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583016"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.325">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.323"/>
            </content>
        </type>
        <type derived="true" id="type.377">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580969"/>
            </content>
        </type>
        <type derived="true" id="type.1580989">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580969"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.343">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.323"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580989">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580969"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580972">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580969"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.326">
            <name>const Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.323"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.489">
            <name>const Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581207"/>
            </content>
        </type>
        <type derived="true" id="type.509">
            <name>const Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581207"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.490">
            <name>const Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581207"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1178">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Age*>, SelectFirst&lt;String&lt;char>, Age*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582932"/>
            </content>
        </type>
        <type derived="true" id="type.1582952">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Age*>, SelectFirst&lt;String&lt;char>, Age*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582932"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582935">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Age*>, SelectFirst&lt;String&lt;char>, Age*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582932"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1343">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, AliasType*>, SelectFirst&lt;String&lt;char>, AliasType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583828"/>
            </content>
        </type>
        <type derived="true" id="type.1583848">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, AliasType*>, SelectFirst&lt;String&lt;char>, AliasType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583828"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583831">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, AliasType*>, SelectFirst&lt;String&lt;char>, AliasType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583828"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1277">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiClass*>, SelectFirst&lt;String&lt;char>, BidiClass*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583470"/>
            </content>
        </type>
        <type derived="true" id="type.1583490">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiClass*>, SelectFirst&lt;String&lt;char>, BidiClass*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583470"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583473">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiClass*>, SelectFirst&lt;String&lt;char>, BidiClass*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583470"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1310">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiPairedBracketType*>, SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583649"/>
            </content>
        </type>
        <type derived="true" id="type.1583669">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiPairedBracketType*>, SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583649"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583652">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiPairedBracketType*>, SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583649"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1079">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BinaryProperty*>, SelectFirst&lt;String&lt;char>, BinaryProperty*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582392"/>
            </content>
        </type>
        <type derived="true" id="type.1582412">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BinaryProperty*>, SelectFirst&lt;String&lt;char>, BinaryProperty*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582392"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582395">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BinaryProperty*>, SelectFirst&lt;String&lt;char>, BinaryProperty*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582392"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1112">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Block*>, SelectFirst&lt;String&lt;char>, Block*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582572"/>
            </content>
        </type>
        <type derived="true" id="type.1582592">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Block*>, SelectFirst&lt;String&lt;char>, Block*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582572"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582575">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Block*>, SelectFirst&lt;String&lt;char>, Block*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582572"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1145">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, GeneralCategory*>, SelectFirst&lt;String&lt;char>, GeneralCategory*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582753"/>
            </content>
        </type>
        <type derived="true" id="type.1582773">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, GeneralCategory*>, SelectFirst&lt;String&lt;char>, GeneralCategory*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582753"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582756">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, GeneralCategory*>, SelectFirst&lt;String&lt;char>, GeneralCategory*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582753"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1244">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, NumericType*>, SelectFirst&lt;String&lt;char>, NumericType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583291"/>
            </content>
        </type>
        <type derived="true" id="type.1583311">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, NumericType*>, SelectFirst&lt;String&lt;char>, NumericType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583291"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583294">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, NumericType*>, SelectFirst&lt;String&lt;char>, NumericType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583291"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1211">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Script*>, SelectFirst&lt;String&lt;char>, Script*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583111"/>
            </content>
        </type>
        <type derived="true" id="type.1583131">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Script*>, SelectFirst&lt;String&lt;char>, Script*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583111"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583114">
            <name>const Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Script*>, SelectFirst&lt;String&lt;char>, Script*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583111"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1165">
            <name>const Hashtable&lt;System.Unicode.AgeId, Pair&lt;System.Unicode.AgeId, Age*>, SelectFirst&lt;System.Unicode.AgeId, Age*>, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582867"/>
            </content>
        </type>
        <type derived="true" id="type.1582887">
            <name>const Hashtable&lt;System.Unicode.AgeId, Pair&lt;System.Unicode.AgeId, Age*>, SelectFirst&lt;System.Unicode.AgeId, Age*>, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582867"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582870">
            <name>const Hashtable&lt;System.Unicode.AgeId, Pair&lt;System.Unicode.AgeId, Age*>, SelectFirst&lt;System.Unicode.AgeId, Age*>, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582867"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1330">
            <name>const Hashtable&lt;System.Unicode.AliasTypeId, Pair&lt;System.Unicode.AliasTypeId, AliasType*>, SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583763"/>
            </content>
        </type>
        <type derived="true" id="type.1583783">
            <name>const Hashtable&lt;System.Unicode.AliasTypeId, Pair&lt;System.Unicode.AliasTypeId, AliasType*>, SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583763"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583766">
            <name>const Hashtable&lt;System.Unicode.AliasTypeId, Pair&lt;System.Unicode.AliasTypeId, AliasType*>, SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583763"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1264">
            <name>const Hashtable&lt;System.Unicode.BidiClassId, Pair&lt;System.Unicode.BidiClassId, BidiClass*>, SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583405"/>
            </content>
        </type>
        <type derived="true" id="type.1583425">
            <name>const Hashtable&lt;System.Unicode.BidiClassId, Pair&lt;System.Unicode.BidiClassId, BidiClass*>, SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583405"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583408">
            <name>const Hashtable&lt;System.Unicode.BidiClassId, Pair&lt;System.Unicode.BidiClassId, BidiClass*>, SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583405"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1297">
            <name>const Hashtable&lt;System.Unicode.BidiPairedBracketTypeId, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583584"/>
            </content>
        </type>
        <type derived="true" id="type.1583604">
            <name>const Hashtable&lt;System.Unicode.BidiPairedBracketTypeId, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583584"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583587">
            <name>const Hashtable&lt;System.Unicode.BidiPairedBracketTypeId, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583584"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1065">
            <name>const Hashtable&lt;System.Unicode.BinaryPropertyId, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582313"/>
            </content>
        </type>
        <type derived="true" id="type.1582333">
            <name>const Hashtable&lt;System.Unicode.BinaryPropertyId, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582313"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582316">
            <name>const Hashtable&lt;System.Unicode.BinaryPropertyId, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582313"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1099">
            <name>const Hashtable&lt;System.Unicode.BlockId, Pair&lt;System.Unicode.BlockId, Block*>, SelectFirst&lt;System.Unicode.BlockId, Block*>, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582507"/>
            </content>
        </type>
        <type derived="true" id="type.1582527">
            <name>const Hashtable&lt;System.Unicode.BlockId, Pair&lt;System.Unicode.BlockId, Block*>, SelectFirst&lt;System.Unicode.BlockId, Block*>, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582507"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582510">
            <name>const Hashtable&lt;System.Unicode.BlockId, Pair&lt;System.Unicode.BlockId, Block*>, SelectFirst&lt;System.Unicode.BlockId, Block*>, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582507"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1132">
            <name>const Hashtable&lt;System.Unicode.GeneralCategoryId, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582688"/>
            </content>
        </type>
        <type derived="true" id="type.1582708">
            <name>const Hashtable&lt;System.Unicode.GeneralCategoryId, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582688"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582691">
            <name>const Hashtable&lt;System.Unicode.GeneralCategoryId, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582688"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1231">
            <name>const Hashtable&lt;System.Unicode.NumericTypeId, Pair&lt;System.Unicode.NumericTypeId, NumericType*>, SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583226"/>
            </content>
        </type>
        <type derived="true" id="type.1583246">
            <name>const Hashtable&lt;System.Unicode.NumericTypeId, Pair&lt;System.Unicode.NumericTypeId, NumericType*>, SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583226"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583229">
            <name>const Hashtable&lt;System.Unicode.NumericTypeId, Pair&lt;System.Unicode.NumericTypeId, NumericType*>, SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583226"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1198">
            <name>const Hashtable&lt;System.Unicode.ScriptId, Pair&lt;System.Unicode.ScriptId, Script*>, SelectFirst&lt;System.Unicode.ScriptId, Script*>, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583046"/>
            </content>
        </type>
        <type derived="true" id="type.1583066">
            <name>const Hashtable&lt;System.Unicode.ScriptId, Pair&lt;System.Unicode.ScriptId, Script*>, SelectFirst&lt;System.Unicode.ScriptId, Script*>, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583046"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583049">
            <name>const Hashtable&lt;System.Unicode.ScriptId, Pair&lt;System.Unicode.ScriptId, Script*>, SelectFirst&lt;System.Unicode.ScriptId, Script*>, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583046"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.452">
            <name>const Hashtable&lt;T, T, Identity&lt;T>, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581096"/>
            </content>
        </type>
        <type derived="true" id="type.400">
            <name>const Hashtable&lt;T, T, Identity&lt;T>, H, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.398"/>
            </content>
        </type>
        <type derived="true" id="type.419">
            <name>const Hashtable&lt;T, T, Identity&lt;T>, H, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.398"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581117">
            <name>const Hashtable&lt;T, T, Identity&lt;T>, H, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581096"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581099">
            <name>const Hashtable&lt;T, T, Identity&lt;T>, H, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581096"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.401">
            <name>const Hashtable&lt;T, T, Identity&lt;T>, H, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.398"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.330">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.328"/>
            </content>
        </type>
        <type derived="true" id="type.378">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580974"/>
            </content>
        </type>
        <type derived="true" id="type.1580993">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580974"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.347">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.328"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.331">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.328"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580977">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, Pair&lt;K, T>&amp;, Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580974"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.380">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580984"/>
            </content>
        </type>
        <type derived="true" id="type.340">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.338"/>
            </content>
        </type>
        <type derived="true" id="type.341">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.338"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580987">
            <name>const HashtableIterator&lt;Pair&lt;K, T>, const Pair&lt;K, T>&amp;, const Pair&lt;K, T>*, Hashtable&lt;K, Pair&lt;K, T>, SelectFirst&lt;K, T>, H, C>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580984"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1179">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, Age*>, Pair&lt;String&lt;char>, Age*>&amp;, Pair&lt;String&lt;char>, Age*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Age*>, SelectFirst&lt;String&lt;char>, Age*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582937"/>
            </content>
        </type>
        <type derived="true" id="type.1582956">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, Age*>, Pair&lt;String&lt;char>, Age*>&amp;, Pair&lt;String&lt;char>, Age*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Age*>, SelectFirst&lt;String&lt;char>, Age*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582937"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582940">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, Age*>, Pair&lt;String&lt;char>, Age*>&amp;, Pair&lt;String&lt;char>, Age*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Age*>, SelectFirst&lt;String&lt;char>, Age*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582937"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1181">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, Age*>, const Pair&lt;String&lt;char>, Age*>&amp;, const Pair&lt;String&lt;char>, Age*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Age*>, SelectFirst&lt;String&lt;char>, Age*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582947"/>
            </content>
        </type>
        <type derived="true" id="type.1584604">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, Age*>, const Pair&lt;String&lt;char>, Age*>&amp;, const Pair&lt;String&lt;char>, Age*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Age*>, SelectFirst&lt;String&lt;char>, Age*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582947"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582950">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, Age*>, const Pair&lt;String&lt;char>, Age*>&amp;, const Pair&lt;String&lt;char>, Age*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Age*>, SelectFirst&lt;String&lt;char>, Age*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582947"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1344">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, AliasType*>, Pair&lt;String&lt;char>, AliasType*>&amp;, Pair&lt;String&lt;char>, AliasType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, AliasType*>, SelectFirst&lt;String&lt;char>, AliasType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583833"/>
            </content>
        </type>
        <type derived="true" id="type.1583852">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, AliasType*>, Pair&lt;String&lt;char>, AliasType*>&amp;, Pair&lt;String&lt;char>, AliasType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, AliasType*>, SelectFirst&lt;String&lt;char>, AliasType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583833"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583836">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, AliasType*>, Pair&lt;String&lt;char>, AliasType*>&amp;, Pair&lt;String&lt;char>, AliasType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, AliasType*>, SelectFirst&lt;String&lt;char>, AliasType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583833"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1346">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, AliasType*>, const Pair&lt;String&lt;char>, AliasType*>&amp;, const Pair&lt;String&lt;char>, AliasType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, AliasType*>, SelectFirst&lt;String&lt;char>, AliasType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583843"/>
            </content>
        </type>
        <type derived="true" id="type.1585009">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, AliasType*>, const Pair&lt;String&lt;char>, AliasType*>&amp;, const Pair&lt;String&lt;char>, AliasType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, AliasType*>, SelectFirst&lt;String&lt;char>, AliasType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583843"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583846">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, AliasType*>, const Pair&lt;String&lt;char>, AliasType*>&amp;, const Pair&lt;String&lt;char>, AliasType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, AliasType*>, SelectFirst&lt;String&lt;char>, AliasType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583843"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1278">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, BidiClass*>, Pair&lt;String&lt;char>, BidiClass*>&amp;, Pair&lt;String&lt;char>, BidiClass*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiClass*>, SelectFirst&lt;String&lt;char>, BidiClass*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583475"/>
            </content>
        </type>
        <type derived="true" id="type.1583494">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, BidiClass*>, Pair&lt;String&lt;char>, BidiClass*>&amp;, Pair&lt;String&lt;char>, BidiClass*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiClass*>, SelectFirst&lt;String&lt;char>, BidiClass*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583475"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583478">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, BidiClass*>, Pair&lt;String&lt;char>, BidiClass*>&amp;, Pair&lt;String&lt;char>, BidiClass*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiClass*>, SelectFirst&lt;String&lt;char>, BidiClass*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583475"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1280">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, BidiClass*>, const Pair&lt;String&lt;char>, BidiClass*>&amp;, const Pair&lt;String&lt;char>, BidiClass*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiClass*>, SelectFirst&lt;String&lt;char>, BidiClass*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583485"/>
            </content>
        </type>
        <type derived="true" id="type.1584847">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, BidiClass*>, const Pair&lt;String&lt;char>, BidiClass*>&amp;, const Pair&lt;String&lt;char>, BidiClass*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiClass*>, SelectFirst&lt;String&lt;char>, BidiClass*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583485"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583488">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, BidiClass*>, const Pair&lt;String&lt;char>, BidiClass*>&amp;, const Pair&lt;String&lt;char>, BidiClass*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiClass*>, SelectFirst&lt;String&lt;char>, BidiClass*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583485"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1311">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>, Pair&lt;String&lt;char>, BidiPairedBracketType*>&amp;, Pair&lt;String&lt;char>, BidiPairedBracketType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiPairedBracketType*>, SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583654"/>
            </content>
        </type>
        <type derived="true" id="type.1583673">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>, Pair&lt;String&lt;char>, BidiPairedBracketType*>&amp;, Pair&lt;String&lt;char>, BidiPairedBracketType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiPairedBracketType*>, SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583654"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583657">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>, Pair&lt;String&lt;char>, BidiPairedBracketType*>&amp;, Pair&lt;String&lt;char>, BidiPairedBracketType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiPairedBracketType*>, SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583654"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1313">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>, const Pair&lt;String&lt;char>, BidiPairedBracketType*>&amp;, const Pair&lt;String&lt;char>, BidiPairedBracketType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiPairedBracketType*>, SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583664"/>
            </content>
        </type>
        <type derived="true" id="type.1584928">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>, const Pair&lt;String&lt;char>, BidiPairedBracketType*>&amp;, const Pair&lt;String&lt;char>, BidiPairedBracketType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiPairedBracketType*>, SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583664"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583667">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>, const Pair&lt;String&lt;char>, BidiPairedBracketType*>&amp;, const Pair&lt;String&lt;char>, BidiPairedBracketType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BidiPairedBracketType*>, SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583664"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1080">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, BinaryProperty*>, Pair&lt;String&lt;char>, BinaryProperty*>&amp;, Pair&lt;String&lt;char>, BinaryProperty*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BinaryProperty*>, SelectFirst&lt;String&lt;char>, BinaryProperty*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582397"/>
            </content>
        </type>
        <type derived="true" id="type.1582416">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, BinaryProperty*>, Pair&lt;String&lt;char>, BinaryProperty*>&amp;, Pair&lt;String&lt;char>, BinaryProperty*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BinaryProperty*>, SelectFirst&lt;String&lt;char>, BinaryProperty*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582397"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582400">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, BinaryProperty*>, Pair&lt;String&lt;char>, BinaryProperty*>&amp;, Pair&lt;String&lt;char>, BinaryProperty*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BinaryProperty*>, SelectFirst&lt;String&lt;char>, BinaryProperty*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582397"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1082">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, BinaryProperty*>, const Pair&lt;String&lt;char>, BinaryProperty*>&amp;, const Pair&lt;String&lt;char>, BinaryProperty*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BinaryProperty*>, SelectFirst&lt;String&lt;char>, BinaryProperty*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582407"/>
            </content>
        </type>
        <type derived="true" id="type.1584360">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, BinaryProperty*>, const Pair&lt;String&lt;char>, BinaryProperty*>&amp;, const Pair&lt;String&lt;char>, BinaryProperty*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BinaryProperty*>, SelectFirst&lt;String&lt;char>, BinaryProperty*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582407"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582410">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, BinaryProperty*>, const Pair&lt;String&lt;char>, BinaryProperty*>&amp;, const Pair&lt;String&lt;char>, BinaryProperty*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, BinaryProperty*>, SelectFirst&lt;String&lt;char>, BinaryProperty*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582407"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1113">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, Block*>, Pair&lt;String&lt;char>, Block*>&amp;, Pair&lt;String&lt;char>, Block*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Block*>, SelectFirst&lt;String&lt;char>, Block*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582577"/>
            </content>
        </type>
        <type derived="true" id="type.1582596">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, Block*>, Pair&lt;String&lt;char>, Block*>&amp;, Pair&lt;String&lt;char>, Block*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Block*>, SelectFirst&lt;String&lt;char>, Block*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582577"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582580">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, Block*>, Pair&lt;String&lt;char>, Block*>&amp;, Pair&lt;String&lt;char>, Block*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Block*>, SelectFirst&lt;String&lt;char>, Block*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582577"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1115">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, Block*>, const Pair&lt;String&lt;char>, Block*>&amp;, const Pair&lt;String&lt;char>, Block*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Block*>, SelectFirst&lt;String&lt;char>, Block*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582587"/>
            </content>
        </type>
        <type derived="true" id="type.1584442">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, Block*>, const Pair&lt;String&lt;char>, Block*>&amp;, const Pair&lt;String&lt;char>, Block*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Block*>, SelectFirst&lt;String&lt;char>, Block*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582587"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582590">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, Block*>, const Pair&lt;String&lt;char>, Block*>&amp;, const Pair&lt;String&lt;char>, Block*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Block*>, SelectFirst&lt;String&lt;char>, Block*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582587"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1146">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, GeneralCategory*>, Pair&lt;String&lt;char>, GeneralCategory*>&amp;, Pair&lt;String&lt;char>, GeneralCategory*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, GeneralCategory*>, SelectFirst&lt;String&lt;char>, GeneralCategory*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582758"/>
            </content>
        </type>
        <type derived="true" id="type.1582777">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, GeneralCategory*>, Pair&lt;String&lt;char>, GeneralCategory*>&amp;, Pair&lt;String&lt;char>, GeneralCategory*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, GeneralCategory*>, SelectFirst&lt;String&lt;char>, GeneralCategory*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582758"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582761">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, GeneralCategory*>, Pair&lt;String&lt;char>, GeneralCategory*>&amp;, Pair&lt;String&lt;char>, GeneralCategory*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, GeneralCategory*>, SelectFirst&lt;String&lt;char>, GeneralCategory*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582758"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1148">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, GeneralCategory*>, const Pair&lt;String&lt;char>, GeneralCategory*>&amp;, const Pair&lt;String&lt;char>, GeneralCategory*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, GeneralCategory*>, SelectFirst&lt;String&lt;char>, GeneralCategory*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582768"/>
            </content>
        </type>
        <type derived="true" id="type.1584523">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, GeneralCategory*>, const Pair&lt;String&lt;char>, GeneralCategory*>&amp;, const Pair&lt;String&lt;char>, GeneralCategory*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, GeneralCategory*>, SelectFirst&lt;String&lt;char>, GeneralCategory*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582768"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582771">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, GeneralCategory*>, const Pair&lt;String&lt;char>, GeneralCategory*>&amp;, const Pair&lt;String&lt;char>, GeneralCategory*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, GeneralCategory*>, SelectFirst&lt;String&lt;char>, GeneralCategory*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582768"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1245">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, NumericType*>, Pair&lt;String&lt;char>, NumericType*>&amp;, Pair&lt;String&lt;char>, NumericType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, NumericType*>, SelectFirst&lt;String&lt;char>, NumericType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583296"/>
            </content>
        </type>
        <type derived="true" id="type.1583315">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, NumericType*>, Pair&lt;String&lt;char>, NumericType*>&amp;, Pair&lt;String&lt;char>, NumericType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, NumericType*>, SelectFirst&lt;String&lt;char>, NumericType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583296"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583299">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, NumericType*>, Pair&lt;String&lt;char>, NumericType*>&amp;, Pair&lt;String&lt;char>, NumericType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, NumericType*>, SelectFirst&lt;String&lt;char>, NumericType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583296"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1247">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, NumericType*>, const Pair&lt;String&lt;char>, NumericType*>&amp;, const Pair&lt;String&lt;char>, NumericType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, NumericType*>, SelectFirst&lt;String&lt;char>, NumericType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583306"/>
            </content>
        </type>
        <type derived="true" id="type.1584766">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, NumericType*>, const Pair&lt;String&lt;char>, NumericType*>&amp;, const Pair&lt;String&lt;char>, NumericType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, NumericType*>, SelectFirst&lt;String&lt;char>, NumericType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583306"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583309">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, NumericType*>, const Pair&lt;String&lt;char>, NumericType*>&amp;, const Pair&lt;String&lt;char>, NumericType*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, NumericType*>, SelectFirst&lt;String&lt;char>, NumericType*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583306"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1212">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, Script*>, Pair&lt;String&lt;char>, Script*>&amp;, Pair&lt;String&lt;char>, Script*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Script*>, SelectFirst&lt;String&lt;char>, Script*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583116"/>
            </content>
        </type>
        <type derived="true" id="type.1583135">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, Script*>, Pair&lt;String&lt;char>, Script*>&amp;, Pair&lt;String&lt;char>, Script*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Script*>, SelectFirst&lt;String&lt;char>, Script*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583116"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583119">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, Script*>, Pair&lt;String&lt;char>, Script*>&amp;, Pair&lt;String&lt;char>, Script*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Script*>, SelectFirst&lt;String&lt;char>, Script*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583116"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1214">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, Script*>, const Pair&lt;String&lt;char>, Script*>&amp;, const Pair&lt;String&lt;char>, Script*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Script*>, SelectFirst&lt;String&lt;char>, Script*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583126"/>
            </content>
        </type>
        <type derived="true" id="type.1584685">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, Script*>, const Pair&lt;String&lt;char>, Script*>&amp;, const Pair&lt;String&lt;char>, Script*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Script*>, SelectFirst&lt;String&lt;char>, Script*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583126"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583129">
            <name>const HashtableIterator&lt;Pair&lt;String&lt;char>, Script*>, const Pair&lt;String&lt;char>, Script*>&amp;, const Pair&lt;String&lt;char>, Script*>*, Hashtable&lt;String&lt;char>, Pair&lt;String&lt;char>, Script*>, SelectFirst&lt;String&lt;char>, Script*>, Hasher&lt;String&lt;char>>, EqualTo&lt;String&lt;char>>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583126"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1166">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.AgeId, Age*>, Pair&lt;System.Unicode.AgeId, Age*>&amp;, Pair&lt;System.Unicode.AgeId, Age*>*, Hashtable&lt;System.Unicode.AgeId, Pair&lt;System.Unicode.AgeId, Age*>, SelectFirst&lt;System.Unicode.AgeId, Age*>, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582872"/>
            </content>
        </type>
        <type derived="true" id="type.1582891">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.AgeId, Age*>, Pair&lt;System.Unicode.AgeId, Age*>&amp;, Pair&lt;System.Unicode.AgeId, Age*>*, Hashtable&lt;System.Unicode.AgeId, Pair&lt;System.Unicode.AgeId, Age*>, SelectFirst&lt;System.Unicode.AgeId, Age*>, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582872"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582875">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.AgeId, Age*>, Pair&lt;System.Unicode.AgeId, Age*>&amp;, Pair&lt;System.Unicode.AgeId, Age*>*, Hashtable&lt;System.Unicode.AgeId, Pair&lt;System.Unicode.AgeId, Age*>, SelectFirst&lt;System.Unicode.AgeId, Age*>, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582872"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1168">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.AgeId, Age*>, const Pair&lt;System.Unicode.AgeId, Age*>&amp;, const Pair&lt;System.Unicode.AgeId, Age*>*, Hashtable&lt;System.Unicode.AgeId, Pair&lt;System.Unicode.AgeId, Age*>, SelectFirst&lt;System.Unicode.AgeId, Age*>, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582882"/>
            </content>
        </type>
        <type derived="true" id="type.1584585">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.AgeId, Age*>, const Pair&lt;System.Unicode.AgeId, Age*>&amp;, const Pair&lt;System.Unicode.AgeId, Age*>*, Hashtable&lt;System.Unicode.AgeId, Pair&lt;System.Unicode.AgeId, Age*>, SelectFirst&lt;System.Unicode.AgeId, Age*>, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582882"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582885">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.AgeId, Age*>, const Pair&lt;System.Unicode.AgeId, Age*>&amp;, const Pair&lt;System.Unicode.AgeId, Age*>*, Hashtable&lt;System.Unicode.AgeId, Pair&lt;System.Unicode.AgeId, Age*>, SelectFirst&lt;System.Unicode.AgeId, Age*>, Hasher&lt;System.Unicode.AgeId>, EqualTo&lt;System.Unicode.AgeId>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582882"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1331">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>, Pair&lt;System.Unicode.AliasTypeId, AliasType*>&amp;, Pair&lt;System.Unicode.AliasTypeId, AliasType*>*, Hashtable&lt;System.Unicode.AliasTypeId, Pair&lt;System.Unicode.AliasTypeId, AliasType*>, SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583768"/>
            </content>
        </type>
        <type derived="true" id="type.1583787">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>, Pair&lt;System.Unicode.AliasTypeId, AliasType*>&amp;, Pair&lt;System.Unicode.AliasTypeId, AliasType*>*, Hashtable&lt;System.Unicode.AliasTypeId, Pair&lt;System.Unicode.AliasTypeId, AliasType*>, SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583768"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583771">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>, Pair&lt;System.Unicode.AliasTypeId, AliasType*>&amp;, Pair&lt;System.Unicode.AliasTypeId, AliasType*>*, Hashtable&lt;System.Unicode.AliasTypeId, Pair&lt;System.Unicode.AliasTypeId, AliasType*>, SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583768"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1333">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>, const Pair&lt;System.Unicode.AliasTypeId, AliasType*>&amp;, const Pair&lt;System.Unicode.AliasTypeId, AliasType*>*, Hashtable&lt;System.Unicode.AliasTypeId, Pair&lt;System.Unicode.AliasTypeId, AliasType*>, SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583778"/>
            </content>
        </type>
        <type derived="true" id="type.1584990">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>, const Pair&lt;System.Unicode.AliasTypeId, AliasType*>&amp;, const Pair&lt;System.Unicode.AliasTypeId, AliasType*>*, Hashtable&lt;System.Unicode.AliasTypeId, Pair&lt;System.Unicode.AliasTypeId, AliasType*>, SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583778"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583781">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>, const Pair&lt;System.Unicode.AliasTypeId, AliasType*>&amp;, const Pair&lt;System.Unicode.AliasTypeId, AliasType*>*, Hashtable&lt;System.Unicode.AliasTypeId, Pair&lt;System.Unicode.AliasTypeId, AliasType*>, SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>, Hasher&lt;System.Unicode.AliasTypeId>, EqualTo&lt;System.Unicode.AliasTypeId>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583778"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1265">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>, Pair&lt;System.Unicode.BidiClassId, BidiClass*>&amp;, Pair&lt;System.Unicode.BidiClassId, BidiClass*>*, Hashtable&lt;System.Unicode.BidiClassId, Pair&lt;System.Unicode.BidiClassId, BidiClass*>, SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583410"/>
            </content>
        </type>
        <type derived="true" id="type.1583429">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>, Pair&lt;System.Unicode.BidiClassId, BidiClass*>&amp;, Pair&lt;System.Unicode.BidiClassId, BidiClass*>*, Hashtable&lt;System.Unicode.BidiClassId, Pair&lt;System.Unicode.BidiClassId, BidiClass*>, SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583410"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583413">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>, Pair&lt;System.Unicode.BidiClassId, BidiClass*>&amp;, Pair&lt;System.Unicode.BidiClassId, BidiClass*>*, Hashtable&lt;System.Unicode.BidiClassId, Pair&lt;System.Unicode.BidiClassId, BidiClass*>, SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583410"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1267">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>, const Pair&lt;System.Unicode.BidiClassId, BidiClass*>&amp;, const Pair&lt;System.Unicode.BidiClassId, BidiClass*>*, Hashtable&lt;System.Unicode.BidiClassId, Pair&lt;System.Unicode.BidiClassId, BidiClass*>, SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583420"/>
            </content>
        </type>
        <type derived="true" id="type.1584828">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>, const Pair&lt;System.Unicode.BidiClassId, BidiClass*>&amp;, const Pair&lt;System.Unicode.BidiClassId, BidiClass*>*, Hashtable&lt;System.Unicode.BidiClassId, Pair&lt;System.Unicode.BidiClassId, BidiClass*>, SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583420"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583423">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>, const Pair&lt;System.Unicode.BidiClassId, BidiClass*>&amp;, const Pair&lt;System.Unicode.BidiClassId, BidiClass*>*, Hashtable&lt;System.Unicode.BidiClassId, Pair&lt;System.Unicode.BidiClassId, BidiClass*>, SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>, Hasher&lt;System.Unicode.BidiClassId>, EqualTo&lt;System.Unicode.BidiClassId>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583420"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1298">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>&amp;, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>*, Hashtable&lt;System.Unicode.BidiPairedBracketTypeId, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583589"/>
            </content>
        </type>
        <type derived="true" id="type.1583608">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>&amp;, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>*, Hashtable&lt;System.Unicode.BidiPairedBracketTypeId, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583589"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583592">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>&amp;, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>*, Hashtable&lt;System.Unicode.BidiPairedBracketTypeId, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583589"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1300">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, const Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>&amp;, const Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>*, Hashtable&lt;System.Unicode.BidiPairedBracketTypeId, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583599"/>
            </content>
        </type>
        <type derived="true" id="type.1584909">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, const Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>&amp;, const Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>*, Hashtable&lt;System.Unicode.BidiPairedBracketTypeId, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583599"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583602">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, const Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>&amp;, const Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>*, Hashtable&lt;System.Unicode.BidiPairedBracketTypeId, Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, Hasher&lt;System.Unicode.BidiPairedBracketTypeId>, EqualTo&lt;System.Unicode.BidiPairedBracketTypeId>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583599"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1066">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>&amp;, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>*, Hashtable&lt;System.Unicode.BinaryPropertyId, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582318"/>
            </content>
        </type>
        <type derived="true" id="type.1582337">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>&amp;, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>*, Hashtable&lt;System.Unicode.BinaryPropertyId, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582318"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582321">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>&amp;, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>*, Hashtable&lt;System.Unicode.BinaryPropertyId, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582318"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1068">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, const Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>&amp;, const Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>*, Hashtable&lt;System.Unicode.BinaryPropertyId, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582328"/>
            </content>
        </type>
        <type derived="true" id="type.1584320">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, const Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>&amp;, const Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>*, Hashtable&lt;System.Unicode.BinaryPropertyId, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582328"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582331">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, const Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>&amp;, const Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>*, Hashtable&lt;System.Unicode.BinaryPropertyId, Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, Hasher&lt;System.Unicode.BinaryPropertyId>, EqualTo&lt;System.Unicode.BinaryPropertyId>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582328"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1100">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.BlockId, Block*>, Pair&lt;System.Unicode.BlockId, Block*>&amp;, Pair&lt;System.Unicode.BlockId, Block*>*, Hashtable&lt;System.Unicode.BlockId, Pair&lt;System.Unicode.BlockId, Block*>, SelectFirst&lt;System.Unicode.BlockId, Block*>, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582512"/>
            </content>
        </type>
        <type derived="true" id="type.1582531">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.BlockId, Block*>, Pair&lt;System.Unicode.BlockId, Block*>&amp;, Pair&lt;System.Unicode.BlockId, Block*>*, Hashtable&lt;System.Unicode.BlockId, Pair&lt;System.Unicode.BlockId, Block*>, SelectFirst&lt;System.Unicode.BlockId, Block*>, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582512"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582515">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.BlockId, Block*>, Pair&lt;System.Unicode.BlockId, Block*>&amp;, Pair&lt;System.Unicode.BlockId, Block*>*, Hashtable&lt;System.Unicode.BlockId, Pair&lt;System.Unicode.BlockId, Block*>, SelectFirst&lt;System.Unicode.BlockId, Block*>, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582512"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1102">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.BlockId, Block*>, const Pair&lt;System.Unicode.BlockId, Block*>&amp;, const Pair&lt;System.Unicode.BlockId, Block*>*, Hashtable&lt;System.Unicode.BlockId, Pair&lt;System.Unicode.BlockId, Block*>, SelectFirst&lt;System.Unicode.BlockId, Block*>, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582522"/>
            </content>
        </type>
        <type derived="true" id="type.1584423">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.BlockId, Block*>, const Pair&lt;System.Unicode.BlockId, Block*>&amp;, const Pair&lt;System.Unicode.BlockId, Block*>*, Hashtable&lt;System.Unicode.BlockId, Pair&lt;System.Unicode.BlockId, Block*>, SelectFirst&lt;System.Unicode.BlockId, Block*>, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582522"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582525">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.BlockId, Block*>, const Pair&lt;System.Unicode.BlockId, Block*>&amp;, const Pair&lt;System.Unicode.BlockId, Block*>*, Hashtable&lt;System.Unicode.BlockId, Pair&lt;System.Unicode.BlockId, Block*>, SelectFirst&lt;System.Unicode.BlockId, Block*>, Hasher&lt;System.Unicode.BlockId>, EqualTo&lt;System.Unicode.BlockId>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582522"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1133">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>&amp;, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>*, Hashtable&lt;System.Unicode.GeneralCategoryId, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582693"/>
            </content>
        </type>
        <type derived="true" id="type.1582712">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>&amp;, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>*, Hashtable&lt;System.Unicode.GeneralCategoryId, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582693"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582696">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>&amp;, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>*, Hashtable&lt;System.Unicode.GeneralCategoryId, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582693"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1135">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, const Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>&amp;, const Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>*, Hashtable&lt;System.Unicode.GeneralCategoryId, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582703"/>
            </content>
        </type>
        <type derived="true" id="type.1584504">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, const Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>&amp;, const Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>*, Hashtable&lt;System.Unicode.GeneralCategoryId, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582703"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582706">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, const Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>&amp;, const Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>*, Hashtable&lt;System.Unicode.GeneralCategoryId, Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, Hasher&lt;System.Unicode.GeneralCategoryId>, EqualTo&lt;System.Unicode.GeneralCategoryId>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582703"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1232">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>, Pair&lt;System.Unicode.NumericTypeId, NumericType*>&amp;, Pair&lt;System.Unicode.NumericTypeId, NumericType*>*, Hashtable&lt;System.Unicode.NumericTypeId, Pair&lt;System.Unicode.NumericTypeId, NumericType*>, SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583231"/>
            </content>
        </type>
        <type derived="true" id="type.1583250">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>, Pair&lt;System.Unicode.NumericTypeId, NumericType*>&amp;, Pair&lt;System.Unicode.NumericTypeId, NumericType*>*, Hashtable&lt;System.Unicode.NumericTypeId, Pair&lt;System.Unicode.NumericTypeId, NumericType*>, SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583231"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583234">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>, Pair&lt;System.Unicode.NumericTypeId, NumericType*>&amp;, Pair&lt;System.Unicode.NumericTypeId, NumericType*>*, Hashtable&lt;System.Unicode.NumericTypeId, Pair&lt;System.Unicode.NumericTypeId, NumericType*>, SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583231"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1234">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>, const Pair&lt;System.Unicode.NumericTypeId, NumericType*>&amp;, const Pair&lt;System.Unicode.NumericTypeId, NumericType*>*, Hashtable&lt;System.Unicode.NumericTypeId, Pair&lt;System.Unicode.NumericTypeId, NumericType*>, SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583241"/>
            </content>
        </type>
        <type derived="true" id="type.1584747">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>, const Pair&lt;System.Unicode.NumericTypeId, NumericType*>&amp;, const Pair&lt;System.Unicode.NumericTypeId, NumericType*>*, Hashtable&lt;System.Unicode.NumericTypeId, Pair&lt;System.Unicode.NumericTypeId, NumericType*>, SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583241"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583244">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>, const Pair&lt;System.Unicode.NumericTypeId, NumericType*>&amp;, const Pair&lt;System.Unicode.NumericTypeId, NumericType*>*, Hashtable&lt;System.Unicode.NumericTypeId, Pair&lt;System.Unicode.NumericTypeId, NumericType*>, SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>, Hasher&lt;System.Unicode.NumericTypeId>, EqualTo&lt;System.Unicode.NumericTypeId>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583241"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1199">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.ScriptId, Script*>, Pair&lt;System.Unicode.ScriptId, Script*>&amp;, Pair&lt;System.Unicode.ScriptId, Script*>*, Hashtable&lt;System.Unicode.ScriptId, Pair&lt;System.Unicode.ScriptId, Script*>, SelectFirst&lt;System.Unicode.ScriptId, Script*>, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583051"/>
            </content>
        </type>
        <type derived="true" id="type.1583070">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.ScriptId, Script*>, Pair&lt;System.Unicode.ScriptId, Script*>&amp;, Pair&lt;System.Unicode.ScriptId, Script*>*, Hashtable&lt;System.Unicode.ScriptId, Pair&lt;System.Unicode.ScriptId, Script*>, SelectFirst&lt;System.Unicode.ScriptId, Script*>, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583051"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583054">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.ScriptId, Script*>, Pair&lt;System.Unicode.ScriptId, Script*>&amp;, Pair&lt;System.Unicode.ScriptId, Script*>*, Hashtable&lt;System.Unicode.ScriptId, Pair&lt;System.Unicode.ScriptId, Script*>, SelectFirst&lt;System.Unicode.ScriptId, Script*>, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583051"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1201">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.ScriptId, Script*>, const Pair&lt;System.Unicode.ScriptId, Script*>&amp;, const Pair&lt;System.Unicode.ScriptId, Script*>*, Hashtable&lt;System.Unicode.ScriptId, Pair&lt;System.Unicode.ScriptId, Script*>, SelectFirst&lt;System.Unicode.ScriptId, Script*>, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583061"/>
            </content>
        </type>
        <type derived="true" id="type.1584666">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.ScriptId, Script*>, const Pair&lt;System.Unicode.ScriptId, Script*>&amp;, const Pair&lt;System.Unicode.ScriptId, Script*>*, Hashtable&lt;System.Unicode.ScriptId, Pair&lt;System.Unicode.ScriptId, Script*>, SelectFirst&lt;System.Unicode.ScriptId, Script*>, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583061"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583064">
            <name>const HashtableIterator&lt;Pair&lt;System.Unicode.ScriptId, Script*>, const Pair&lt;System.Unicode.ScriptId, Script*>&amp;, const Pair&lt;System.Unicode.ScriptId, Script*>*, Hashtable&lt;System.Unicode.ScriptId, Pair&lt;System.Unicode.ScriptId, Script*>, SelectFirst&lt;System.Unicode.ScriptId, Script*>, Hasher&lt;System.Unicode.ScriptId>, EqualTo&lt;System.Unicode.ScriptId>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583061"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.476">
            <name>const HashtableIterator&lt;T, R, P, H></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581182"/>
            </content>
        </type>
        <type derived="true" id="type.486">
            <name>const HashtableIterator&lt;T, R, P, H></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581194"/>
            </content>
        </type>
        <type derived="true" id="type.1581206">
            <name>const HashtableIterator&lt;T, R, P, H>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581194"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581197">
            <name>const HashtableIterator&lt;T, R, P, H>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581194"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.477">
            <name>const HashtableIterator&lt;T, R, P, H>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581182"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.453">
            <name>const HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581102"/>
            </content>
        </type>
        <type derived="true" id="type.406">
            <name>const HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.404"/>
            </content>
        </type>
        <type derived="true" id="type.1581121">
            <name>const HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581102"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.423">
            <name>const HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.404"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581105">
            <name>const HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581102"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.407">
            <name>const HashtableIterator&lt;T, T&amp;, T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.404"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.455">
            <name>const HashtableIterator&lt;T, const T&amp;, const T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581112"/>
            </content>
        </type>
        <type derived="true" id="type.416">
            <name>const HashtableIterator&lt;T, const T&amp;, const T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.414"/>
            </content>
        </type>
        <type derived="true" id="type.417">
            <name>const HashtableIterator&lt;T, const T&amp;, const T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.414"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581115">
            <name>const HashtableIterator&lt;T, const T&amp;, const T*, Hashtable&lt;T, T, Identity&lt;T>, H, C>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581112"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.495">
            <name>const HashtableIterator&lt;ValueType, ValueType&amp;, ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.493"/>
            </content>
        </type>
        <type derived="true" id="type.513">
            <name>const HashtableIterator&lt;ValueType, ValueType&amp;, ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.493"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.496">
            <name>const HashtableIterator&lt;ValueType, ValueType&amp;, ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.493"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.506">
            <name>const HashtableIterator&lt;ValueType, const ValueType&amp;, const ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.504"/>
            </content>
        </type>
        <type derived="true" id="type.507">
            <name>const HashtableIterator&lt;ValueType, const ValueType&amp;, const ValueType*, Hashtable&lt;KeyType, ValueType, KeyOfValue, HashFun, Compare>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.504"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580213">
            <name>const I&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579550"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580208">
            <name>const I&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579548"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580213">
            <name>const I&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579550"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580199">
            <name>const I&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579524"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1432">
            <name>const IOBuffer</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579814"/>
            </content>
        </type>
        <type derived="true" id="type.1580488">
            <name>const IOBuffer&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579814"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1579817">
            <name>const IOBuffer*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579814"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.392">
            <name>const Identity&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.391"/>
            </content>
        </type>
        <type derived="true" id="type.898">
            <name>const Identity&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581876"/>
            </content>
        </type>
        <type derived="true" id="type.156">
            <name>const Identity&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580687"/>
            </content>
        </type>
        <type derived="true" id="type.844">
            <name>const Identity&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.843"/>
            </content>
        </type>
        <type derived="true" id="type.889">
            <name>const Identity&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581826"/>
            </content>
        </type>
        <type derived="true" id="type.451">
            <name>const Identity&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581089"/>
            </content>
        </type>
        <type derived="true" id="type.393">
            <name>const Identity&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.391"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581878">
            <name>const Identity&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581876"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.845">
            <name>const Identity&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.843"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581828">
            <name>const Identity&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581826"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581091">
            <name>const Identity&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581089"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.157">
            <name>const Identity&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580687"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1433">
            <name>const InputFileStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579818"/>
            </content>
        </type>
        <type derived="true" id="type.1580491">
            <name>const InputFileStream&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579818"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1579821">
            <name>const InputFileStream*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579818"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1438">
            <name>const InputStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580056"/>
            </content>
        </type>
        <type derived="true" id="type.1580462">
            <name>const InputStream&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580056"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580059">
            <name>const InputStream*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580056"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1442">
            <name>const InputStringStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580076"/>
            </content>
        </type>
        <type derived="true" id="type.1582272">
            <name>const InputStringStream&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580076"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580079">
            <name>const InputStringStream*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580076"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1436">
            <name>const InvalidPathException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580000"/>
            </content>
        </type>
        <type derived="true" id="type.1437">
            <name>const InvalidPathException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580000"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.312">
            <name>const K&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579918"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580958">
            <name>const K&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579922"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.653">
            <name>const Key&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579974"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.515">
            <name>const KeyType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579948"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.828">
            <name>const KeyType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580042"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.204">
            <name>const Less&lt;T, U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580747"/>
            </content>
        </type>
        <type derived="true" id="type.205">
            <name>const Less&lt;T, U>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580747"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.195">
            <name>const Less&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580736"/>
            </content>
        </type>
        <type derived="true" id="type.196">
            <name>const Less&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580736"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.238">
            <name>const LessOrEqualTo&lt;T, U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580789"/>
            </content>
        </type>
        <type derived="true" id="type.239">
            <name>const LessOrEqualTo&lt;T, U>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580789"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.229">
            <name>const LessOrEqualTo&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580778"/>
            </content>
        </type>
        <type derived="true" id="type.230">
            <name>const LessOrEqualTo&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580778"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.575">
            <name>const LinkedList&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581300"/>
            </content>
        </type>
        <type derived="true" id="type.580">
            <name>const LinkedList&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581326"/>
            </content>
        </type>
        <type derived="true" id="type.602">
            <name>const LinkedList&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581350"/>
            </content>
        </type>
        <type derived="true" id="type.606">
            <name>const LinkedList&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581374"/>
            </content>
        </type>
        <type derived="true" id="type.551">
            <name>const LinkedList&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.549"/>
            </content>
        </type>
        <type derived="true" id="type.1581372">
            <name>const LinkedList&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581350"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.600">
            <name>const LinkedList&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581326"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581322">
            <name>const LinkedList&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581300"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581372">
            <name>const LinkedList&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581350"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581396">
            <name>const LinkedList&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581374"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.571">
            <name>const LinkedList&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.549"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.552">
            <name>const LinkedList&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.549"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581377">
            <name>const LinkedList&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581374"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581303">
            <name>const LinkedList&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581300"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581377">
            <name>const LinkedList&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581374"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581353">
            <name>const LinkedList&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581350"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.581">
            <name>const LinkedList&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581326"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.577">
            <name>const LinkedListNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581310"/>
            </content>
        </type>
        <type derived="true" id="type.590">
            <name>const LinkedListNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.588"/>
            </content>
        </type>
        <type derived="true" id="type.542">
            <name>const LinkedListNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581261"/>
            </content>
        </type>
        <type derived="true" id="type.561">
            <name>const LinkedListNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.559"/>
            </content>
        </type>
        <type derived="true" id="type.608">
            <name>const LinkedListNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581384"/>
            </content>
        </type>
        <type derived="true" id="type.604">
            <name>const LinkedListNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581360"/>
            </content>
        </type>
        <type derived="true" id="type.1581363">
            <name>const LinkedListNode&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581360"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581313">
            <name>const LinkedListNode&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581310"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.543">
            <name>const LinkedListNode&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581261"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581363">
            <name>const LinkedListNode&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581360"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.591">
            <name>const LinkedListNode&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.588"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581387">
            <name>const LinkedListNode&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581384"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.562">
            <name>const LinkedListNode&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.559"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.547">
            <name>const LinkedListNodeIterator&lt;T, R, P></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581267"/>
            </content>
        </type>
        <type derived="true" id="type.574">
            <name>const LinkedListNodeIterator&lt;T, R, P></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581296"/>
            </content>
        </type>
        <type derived="true" id="type.1581325">
            <name>const LinkedListNodeIterator&lt;T, R, P>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581296"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581299">
            <name>const LinkedListNodeIterator&lt;T, R, P>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581296"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.548">
            <name>const LinkedListNodeIterator&lt;T, R, P>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581267"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.557">
            <name>const LinkedListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.555"/>
            </content>
        </type>
        <type derived="true" id="type.576">
            <name>const LinkedListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581306"/>
            </content>
        </type>
        <type derived="true" id="type.586">
            <name>const LinkedListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.584"/>
            </content>
        </type>
        <type derived="true" id="type.603">
            <name>const LinkedListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581356"/>
            </content>
        </type>
        <type derived="true" id="type.607">
            <name>const LinkedListNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581380"/>
            </content>
        </type>
        <type derived="true" id="type.558">
            <name>const LinkedListNodeIterator&lt;T, T&amp;, T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.555"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581309">
            <name>const LinkedListNodeIterator&lt;T, T&amp;, T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581306"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581383">
            <name>const LinkedListNodeIterator&lt;T, T&amp;, T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581380"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581359">
            <name>const LinkedListNodeIterator&lt;T, T&amp;, T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581356"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.587">
            <name>const LinkedListNodeIterator&lt;T, T&amp;, T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.584"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581359">
            <name>const LinkedListNodeIterator&lt;T, T&amp;, T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581356"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.568">
            <name>const LinkedListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.566"/>
            </content>
        </type>
        <type derived="true" id="type.578">
            <name>const LinkedListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581317"/>
            </content>
        </type>
        <type derived="true" id="type.605">
            <name>const LinkedListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581367"/>
            </content>
        </type>
        <type derived="true" id="type.609">
            <name>const LinkedListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581391"/>
            </content>
        </type>
        <type derived="true" id="type.597">
            <name>const LinkedListNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.595"/>
            </content>
        </type>
        <type derived="true" id="type.598">
            <name>const LinkedListNodeIterator&lt;T, const T&amp;, const T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.595"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.569">
            <name>const LinkedListNodeIterator&lt;T, const T&amp;, const T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.566"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581394">
            <name>const LinkedListNodeIterator&lt;T, const T&amp;, const T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581391"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581370">
            <name>const LinkedListNodeIterator&lt;T, const T&amp;, const T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581367"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581320">
            <name>const LinkedListNodeIterator&lt;T, const T&amp;, const T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581317"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581370">
            <name>const LinkedListNodeIterator&lt;T, const T&amp;, const T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581367"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1190">
            <name>const List&lt;Age*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582991"/>
            </content>
        </type>
        <type derived="true" id="type.1583011">
            <name>const List&lt;Age*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582991"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582994">
            <name>const List&lt;Age*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582991"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1355">
            <name>const List&lt;AliasType*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583887"/>
            </content>
        </type>
        <type derived="true" id="type.1583907">
            <name>const List&lt;AliasType*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583887"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583890">
            <name>const List&lt;AliasType*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583887"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1289">
            <name>const List&lt;BidiClass*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583529"/>
            </content>
        </type>
        <type derived="true" id="type.1583549">
            <name>const List&lt;BidiClass*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583529"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583532">
            <name>const List&lt;BidiClass*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583529"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1322">
            <name>const List&lt;BidiPairedBracketType*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583708"/>
            </content>
        </type>
        <type derived="true" id="type.1583728">
            <name>const List&lt;BidiPairedBracketType*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583708"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583711">
            <name>const List&lt;BidiPairedBracketType*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583708"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1090">
            <name>const List&lt;BinaryProperty*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582443"/>
            </content>
        </type>
        <type derived="true" id="type.1582463">
            <name>const List&lt;BinaryProperty*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582443"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582446">
            <name>const List&lt;BinaryProperty*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582443"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1124">
            <name>const List&lt;Block*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582631"/>
            </content>
        </type>
        <type derived="true" id="type.1582651">
            <name>const List&lt;Block*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582631"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582634">
            <name>const List&lt;Block*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582631"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.351">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.349"/>
            </content>
        </type>
        <type derived="true" id="type.381">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580995"/>
            </content>
        </type>
        <type derived="true" id="type.1581017">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580995"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.371">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.349"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581017">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580995"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.352">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.349"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580998">
            <name>const List&lt;Bucket&lt;Pair&lt;K, T>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580995"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1182">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582958"/>
            </content>
        </type>
        <type derived="true" id="type.1582980">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582958"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582961">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582958"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1347">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583854"/>
            </content>
        </type>
        <type derived="true" id="type.1583876">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583854"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583857">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583854"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1281">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583496"/>
            </content>
        </type>
        <type derived="true" id="type.1583518">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583496"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583499">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583496"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1314">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583675"/>
            </content>
        </type>
        <type derived="true" id="type.1583697">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583675"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583678">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583675"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1083">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582418"/>
            </content>
        </type>
        <type derived="true" id="type.1582440">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582418"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582421">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582418"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1116">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582598"/>
            </content>
        </type>
        <type derived="true" id="type.1582620">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582598"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582601">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582598"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1149">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582779"/>
            </content>
        </type>
        <type derived="true" id="type.1582801">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582779"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582782">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582779"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1248">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583317"/>
            </content>
        </type>
        <type derived="true" id="type.1583339">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583317"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583320">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583317"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1215">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583137"/>
            </content>
        </type>
        <type derived="true" id="type.1583159">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583137"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583140">
            <name>const List&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583137"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1169">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582893"/>
            </content>
        </type>
        <type derived="true" id="type.1582915">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582893"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582896">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582893"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1334">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583789"/>
            </content>
        </type>
        <type derived="true" id="type.1583811">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583789"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583792">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583789"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1268">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583431"/>
            </content>
        </type>
        <type derived="true" id="type.1583453">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583431"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583434">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583431"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1301">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583610"/>
            </content>
        </type>
        <type derived="true" id="type.1583632">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583610"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583613">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583610"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1069">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582339"/>
            </content>
        </type>
        <type derived="true" id="type.1582361">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582339"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582342">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582339"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1103">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582533"/>
            </content>
        </type>
        <type derived="true" id="type.1582555">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582533"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582536">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582533"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1136">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582714"/>
            </content>
        </type>
        <type derived="true" id="type.1582736">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582714"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582717">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582714"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1235">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583252"/>
            </content>
        </type>
        <type derived="true" id="type.1583274">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583252"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583255">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583252"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1202">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583072"/>
            </content>
        </type>
        <type derived="true" id="type.1583094">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583072"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583075">
            <name>const List&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583072"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.456">
            <name>const List&lt;Bucket&lt;T>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581123"/>
            </content>
        </type>
        <type derived="true" id="type.427">
            <name>const List&lt;Bucket&lt;T>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.425"/>
            </content>
        </type>
        <type derived="true" id="type.1581145">
            <name>const List&lt;Bucket&lt;T>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581123"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.447">
            <name>const List&lt;Bucket&lt;T>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.425"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581145">
            <name>const List&lt;Bucket&lt;T>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581123"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581126">
            <name>const List&lt;Bucket&lt;T>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581123"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.428">
            <name>const List&lt;Bucket&lt;T>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.425"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581126">
            <name>const List&lt;Bucket&lt;T>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581123"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.518">
            <name>const List&lt;Bucket&lt;ValueType>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.516"/>
            </content>
        </type>
        <type derived="true" id="type.538">
            <name>const List&lt;Bucket&lt;ValueType>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.516"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.519">
            <name>const List&lt;Bucket&lt;ValueType>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.516"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1157">
            <name>const List&lt;GeneralCategory*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582812"/>
            </content>
        </type>
        <type derived="true" id="type.1582832">
            <name>const List&lt;GeneralCategory*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582812"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582815">
            <name>const List&lt;GeneralCategory*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582812"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1255">
            <name>const List&lt;NumericType*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583342"/>
            </content>
        </type>
        <type derived="true" id="type.1583362">
            <name>const List&lt;NumericType*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583342"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583345">
            <name>const List&lt;NumericType*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583342"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1223">
            <name>const List&lt;Script*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583170"/>
            </content>
        </type>
        <type derived="true" id="type.1583190">
            <name>const List&lt;Script*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583170"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583173">
            <name>const List&lt;Script*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583170"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.960">
            <name>const List&lt;String&lt;CharT>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.958"/>
            </content>
        </type>
        <type derived="true" id="type.1055">
            <name>const List&lt;String&lt;CharT>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582252"/>
            </content>
        </type>
        <type derived="true" id="type.999">
            <name>const List&lt;String&lt;CharT>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582072"/>
            </content>
        </type>
        <type derived="true" id="type.1041">
            <name>const List&lt;String&lt;CharT>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582207"/>
            </content>
        </type>
        <type derived="true" id="type.1013">
            <name>const List&lt;String&lt;CharT>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582117"/>
            </content>
        </type>
        <type derived="true" id="type.1027">
            <name>const List&lt;String&lt;CharT>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582162"/>
            </content>
        </type>
        <type derived="true" id="type.985">
            <name>const List&lt;String&lt;CharT>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582027"/>
            </content>
        </type>
        <type derived="true" id="type.976">
            <name>const List&lt;String&lt;CharT>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.958"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582225">
            <name>const List&lt;String&lt;CharT>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582207"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582135">
            <name>const List&lt;String&lt;CharT>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582117"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582180">
            <name>const List&lt;String&lt;CharT>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582162"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582090">
            <name>const List&lt;String&lt;CharT>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582072"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582270">
            <name>const List&lt;String&lt;CharT>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582252"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582045">
            <name>const List&lt;String&lt;CharT>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582027"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582165">
            <name>const List&lt;String&lt;CharT>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582162"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582210">
            <name>const List&lt;String&lt;CharT>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582207"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582120">
            <name>const List&lt;String&lt;CharT>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582117"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582165">
            <name>const List&lt;String&lt;CharT>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582162"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582030">
            <name>const List&lt;String&lt;CharT>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582027"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.961">
            <name>const List&lt;String&lt;CharT>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.958"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582255">
            <name>const List&lt;String&lt;CharT>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582252"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582075">
            <name>const List&lt;String&lt;CharT>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582072"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.5">
            <name>const List&lt;String&lt;char>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580261"/>
            </content>
        </type>
        <type derived="true" id="type.1580279">
            <name>const List&lt;String&lt;char>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580261"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580264">
            <name>const List&lt;String&lt;char>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580261"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.37">
            <name>const List&lt;String&lt;uchar>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580386"/>
            </content>
        </type>
        <type derived="true" id="type.1580404">
            <name>const List&lt;String&lt;uchar>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580386"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580389">
            <name>const List&lt;String&lt;uchar>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580386"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.25">
            <name>const List&lt;String&lt;wchar>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580342"/>
            </content>
        </type>
        <type derived="true" id="type.1580360">
            <name>const List&lt;String&lt;wchar>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580342"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580345">
            <name>const List&lt;String&lt;wchar>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580342"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.12">
            <name>const List&lt;System.Ascii.CharClass></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580282"/>
            </content>
        </type>
        <type derived="true" id="type.1580303">
            <name>const List&lt;System.Ascii.CharClass>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580282"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580285">
            <name>const List&lt;System.Ascii.CharClass>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580282"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1360">
            <name>const List&lt;System.Unicode.Alias></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583909"/>
            </content>
        </type>
        <type derived="true" id="type.1583929">
            <name>const List&lt;System.Unicode.Alias>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583909"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583912">
            <name>const List&lt;System.Unicode.Alias>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583909"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.641">
            <name>const List&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581448"/>
            </content>
        </type>
        <type derived="true" id="type.914">
            <name>const List&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.912"/>
            </content>
        </type>
        <type derived="true" id="type.611">
            <name>const List&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581398"/>
            </content>
        </type>
        <type derived="true" id="type.742">
            <name>const List&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.740"/>
            </content>
        </type>
        <type derived="true" id="type.634">
            <name>const List&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581423"/>
            </content>
        </type>
        <type derived="true" id="type.761">
            <name>const List&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.740"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.631">
            <name>const List&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581398"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.932">
            <name>const List&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.912"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581445">
            <name>const List&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581423"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581470">
            <name>const List&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581448"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581451">
            <name>const List&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581448"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581426">
            <name>const List&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581423"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.743">
            <name>const List&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.740"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.612">
            <name>const List&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581398"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581451">
            <name>const List&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581448"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.915">
            <name>const List&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.912"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1368">
            <name>const List&lt;UniquePtr&lt;System.Unicode.CharacterInfo>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583941"/>
            </content>
        </type>
        <type derived="true" id="type.1583959">
            <name>const List&lt;UniquePtr&lt;System.Unicode.CharacterInfo>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583941"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583944">
            <name>const List&lt;UniquePtr&lt;System.Unicode.CharacterInfo>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583941"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1392">
            <name>const List&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1584031"/>
            </content>
        </type>
        <type derived="true" id="type.1584049">
            <name>const List&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1584031"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584034">
            <name>const List&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1584031"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1376">
            <name>const List&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583970"/>
            </content>
        </type>
        <type derived="true" id="type.1583988">
            <name>const List&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583970"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583973">
            <name>const List&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583970"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1401">
            <name>const List&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1584069"/>
            </content>
        </type>
        <type derived="true" id="type.1584087">
            <name>const List&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1584069"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584072">
            <name>const List&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1584069"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.702">
            <name>const List&lt;byte></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581539"/>
            </content>
        </type>
        <type derived="true" id="type.1581558">
            <name>const List&lt;byte>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581539"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581542">
            <name>const List&lt;byte>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581539"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.463">
            <name>const List&lt;long></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581149"/>
            </content>
        </type>
        <type derived="true" id="type.1581169">
            <name>const List&lt;long>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581149"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581152">
            <name>const List&lt;long>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581149"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1383">
            <name>const List&lt;uint></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583990"/>
            </content>
        </type>
        <type derived="true" id="type.1584010">
            <name>const List&lt;uint>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583990"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583993">
            <name>const List&lt;uint>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583990"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.44">
            <name>const List&lt;ulong></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580412"/>
            </content>
        </type>
        <type derived="true" id="type.1580432">
            <name>const List&lt;ulong>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580412"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580415">
            <name>const List&lt;ulong>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580412"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1455">
            <name>const LockGuard</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579983"/>
            </content>
        </type>
        <type derived="true" id="type.1581565">
            <name>const LockGuard&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579983"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.263">
            <name>const LogicalAnd&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580820"/>
            </content>
        </type>
        <type derived="true" id="type.264">
            <name>const LogicalAnd&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580820"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.271">
            <name>const LogicalNot&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580832"/>
            </content>
        </type>
        <type derived="true" id="type.272">
            <name>const LogicalNot&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580832"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.269">
            <name>const LogicalOr&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580828"/>
            </content>
        </type>
        <type derived="true" id="type.270">
            <name>const LogicalOr&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580828"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.649">
            <name>const Map&lt;Key, Value, KeyCompare></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581476"/>
            </content>
        </type>
        <type derived="true" id="type.650">
            <name>const Map&lt;Key, Value, KeyCompare>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581476"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1435">
            <name>const MemoryByteStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579977"/>
            </content>
        </type>
        <type derived="true" id="type.1581536">
            <name>const MemoryByteStream&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579977"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1579980">
            <name>const MemoryByteStream*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579977"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.127">
            <name>const Minus&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580638"/>
            </content>
        </type>
        <type derived="true" id="type.128">
            <name>const Minus&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580638"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.132">
            <name>const Multiplies&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580645"/>
            </content>
        </type>
        <type derived="true" id="type.137">
            <name>const Multiplies&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580652"/>
            </content>
        </type>
        <type derived="true" id="type.1580654">
            <name>const Multiplies&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580652"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.133">
            <name>const Multiplies&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580645"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580654">
            <name>const Multiplies&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580652"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1454">
            <name>const Mutex</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579981"/>
            </content>
        </type>
        <type derived="true" id="type.1581560">
            <name>const Mutex&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579981"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.122">
            <name>const Negate&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580631"/>
            </content>
        </type>
        <type derived="true" id="type.123">
            <name>const Negate&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580631"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.187">
            <name>const NotEqualTo&lt;T, U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580726"/>
            </content>
        </type>
        <type derived="true" id="type.188">
            <name>const NotEqualTo&lt;T, U>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580726"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.178">
            <name>const NotEqualTo&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580715"/>
            </content>
        </type>
        <type derived="true" id="type.179">
            <name>const NotEqualTo&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580715"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580133">
            <name>const NumericType*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580130"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583217">
            <name>const NumericType*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580130"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583346">
            <name>const NumericType**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580130"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583200">
            <name>const NumericTypeId&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580129"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583370">
            <name>const NumericTypeTable&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580134"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580136">
            <name>const NumericTypeTable*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580134"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1434">
            <name>const OutputFileStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579822"/>
            </content>
        </type>
        <type derived="true" id="type.1580495">
            <name>const OutputFileStream&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579822"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1579825">
            <name>const OutputFileStream*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579822"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1439">
            <name>const OutputStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580060"/>
            </content>
        </type>
        <type derived="true" id="type.1580453">
            <name>const OutputStream&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580060"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580451">
            <name>const OutputStream*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580060"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1443">
            <name>const OutputStringStream</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580080"/>
            </content>
        </type>
        <type derived="true" id="type.1582274">
            <name>const OutputStringStream&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580080"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580083">
            <name>const OutputStringStream*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580080"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580967">
            <name>const Pair&lt;K, T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580956"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.321">
            <name>const Pair&lt;K, T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.310"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580967">
            <name>const Pair&lt;K, T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580956"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580983">
            <name>const Pair&lt;K, T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580956"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.337">
            <name>const Pair&lt;K, T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.310"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.662">
            <name>const Pair&lt;Key, Value>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.651"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.668">
            <name>const Pair&lt;Key, Value>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.651"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582930">
            <name>const Pair&lt;String&lt;char>, Age*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582923"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582946">
            <name>const Pair&lt;String&lt;char>, Age*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582923"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583826">
            <name>const Pair&lt;String&lt;char>, AliasType*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583819"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583842">
            <name>const Pair&lt;String&lt;char>, AliasType*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583819"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583468">
            <name>const Pair&lt;String&lt;char>, BidiClass*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583461"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583484">
            <name>const Pair&lt;String&lt;char>, BidiClass*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583461"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583647">
            <name>const Pair&lt;String&lt;char>, BidiPairedBracketType*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583640"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583663">
            <name>const Pair&lt;String&lt;char>, BidiPairedBracketType*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583640"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582390">
            <name>const Pair&lt;String&lt;char>, BinaryProperty*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582383"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582406">
            <name>const Pair&lt;String&lt;char>, BinaryProperty*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582383"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582570">
            <name>const Pair&lt;String&lt;char>, Block*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582563"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582586">
            <name>const Pair&lt;String&lt;char>, Block*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582563"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582751">
            <name>const Pair&lt;String&lt;char>, GeneralCategory*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582744"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582767">
            <name>const Pair&lt;String&lt;char>, GeneralCategory*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582744"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583289">
            <name>const Pair&lt;String&lt;char>, NumericType*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583282"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583305">
            <name>const Pair&lt;String&lt;char>, NumericType*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583282"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583109">
            <name>const Pair&lt;String&lt;char>, Script*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583102"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583125">
            <name>const Pair&lt;String&lt;char>, Script*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583102"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582865">
            <name>const Pair&lt;System.Unicode.AgeId, Age*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582856"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582881">
            <name>const Pair&lt;System.Unicode.AgeId, Age*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582856"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583761">
            <name>const Pair&lt;System.Unicode.AliasTypeId, AliasType*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583752"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583777">
            <name>const Pair&lt;System.Unicode.AliasTypeId, AliasType*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583752"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583403">
            <name>const Pair&lt;System.Unicode.BidiClassId, BidiClass*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583394"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583419">
            <name>const Pair&lt;System.Unicode.BidiClassId, BidiClass*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583394"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583582">
            <name>const Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583573"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583598">
            <name>const Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583573"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582311">
            <name>const Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582302"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582327">
            <name>const Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582302"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582505">
            <name>const Pair&lt;System.Unicode.BlockId, Block*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582496"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582521">
            <name>const Pair&lt;System.Unicode.BlockId, Block*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582496"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582686">
            <name>const Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582677"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582702">
            <name>const Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582677"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583224">
            <name>const Pair&lt;System.Unicode.NumericTypeId, NumericType*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583215"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583240">
            <name>const Pair&lt;System.Unicode.NumericTypeId, NumericType*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583215"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583044">
            <name>const Pair&lt;System.Unicode.ScriptId, Script*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583035"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583060">
            <name>const Pair&lt;System.Unicode.ScriptId, Script*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583035"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.723">
            <name>const Pair&lt;T, U>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.715"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581579">
            <name>const Pair&lt;T, U>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581573"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581586">
            <name>const Pair&lt;T, U>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581580"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.734">
            <name>const Pair&lt;T, U>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.726"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581586">
            <name>const Pair&lt;T, U>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581580"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.121">
            <name>const Plus&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580624"/>
            </content>
        </type>
        <type derived="true" id="type.116">
            <name>const Plus&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580617"/>
            </content>
        </type>
        <type derived="true" id="type.1580626">
            <name>const Plus&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580624"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.117">
            <name>const Plus&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580617"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.735">
            <name>const Queue&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581622"/>
            </content>
        </type>
        <type derived="true" id="type.736">
            <name>const Queue&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581622"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1194">
            <name>const RandomAccessIter&lt;Age*, Age*&amp;, Age**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583004"/>
            </content>
        </type>
        <type derived="true" id="type.1583008">
            <name>const RandomAccessIter&lt;Age*, Age*&amp;, Age**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583004"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583007">
            <name>const RandomAccessIter&lt;Age*, Age*&amp;, Age**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583004"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1191">
            <name>const RandomAccessIter&lt;Age*, const Age*&amp;, const Age**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582996"/>
            </content>
        </type>
        <type derived="true" id="type.1192">
            <name>const RandomAccessIter&lt;Age*, const Age*&amp;, const Age**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582996"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582999">
            <name>const RandomAccessIter&lt;Age*, const Age*&amp;, const Age**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582996"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1359">
            <name>const RandomAccessIter&lt;AliasType*, AliasType*&amp;, AliasType**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583900"/>
            </content>
        </type>
        <type derived="true" id="type.1583904">
            <name>const RandomAccessIter&lt;AliasType*, AliasType*&amp;, AliasType**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583900"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583903">
            <name>const RandomAccessIter&lt;AliasType*, AliasType*&amp;, AliasType**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583900"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1356">
            <name>const RandomAccessIter&lt;AliasType*, const AliasType*&amp;, const AliasType**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583892"/>
            </content>
        </type>
        <type derived="true" id="type.1357">
            <name>const RandomAccessIter&lt;AliasType*, const AliasType*&amp;, const AliasType**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583892"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583895">
            <name>const RandomAccessIter&lt;AliasType*, const AliasType*&amp;, const AliasType**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583892"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1293">
            <name>const RandomAccessIter&lt;BidiClass*, BidiClass*&amp;, BidiClass**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583542"/>
            </content>
        </type>
        <type derived="true" id="type.1583546">
            <name>const RandomAccessIter&lt;BidiClass*, BidiClass*&amp;, BidiClass**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583542"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583545">
            <name>const RandomAccessIter&lt;BidiClass*, BidiClass*&amp;, BidiClass**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583542"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1290">
            <name>const RandomAccessIter&lt;BidiClass*, const BidiClass*&amp;, const BidiClass**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583534"/>
            </content>
        </type>
        <type derived="true" id="type.1291">
            <name>const RandomAccessIter&lt;BidiClass*, const BidiClass*&amp;, const BidiClass**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583534"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583537">
            <name>const RandomAccessIter&lt;BidiClass*, const BidiClass*&amp;, const BidiClass**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583534"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1326">
            <name>const RandomAccessIter&lt;BidiPairedBracketType*, BidiPairedBracketType*&amp;, BidiPairedBracketType**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583721"/>
            </content>
        </type>
        <type derived="true" id="type.1583725">
            <name>const RandomAccessIter&lt;BidiPairedBracketType*, BidiPairedBracketType*&amp;, BidiPairedBracketType**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583721"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583724">
            <name>const RandomAccessIter&lt;BidiPairedBracketType*, BidiPairedBracketType*&amp;, BidiPairedBracketType**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583721"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1323">
            <name>const RandomAccessIter&lt;BidiPairedBracketType*, const BidiPairedBracketType*&amp;, const BidiPairedBracketType**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583713"/>
            </content>
        </type>
        <type derived="true" id="type.1324">
            <name>const RandomAccessIter&lt;BidiPairedBracketType*, const BidiPairedBracketType*&amp;, const BidiPairedBracketType**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583713"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583716">
            <name>const RandomAccessIter&lt;BidiPairedBracketType*, const BidiPairedBracketType*&amp;, const BidiPairedBracketType**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583713"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1094">
            <name>const RandomAccessIter&lt;BinaryProperty*, BinaryProperty*&amp;, BinaryProperty**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582456"/>
            </content>
        </type>
        <type derived="true" id="type.1582460">
            <name>const RandomAccessIter&lt;BinaryProperty*, BinaryProperty*&amp;, BinaryProperty**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582456"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582459">
            <name>const RandomAccessIter&lt;BinaryProperty*, BinaryProperty*&amp;, BinaryProperty**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582456"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1091">
            <name>const RandomAccessIter&lt;BinaryProperty*, const BinaryProperty*&amp;, const BinaryProperty**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582448"/>
            </content>
        </type>
        <type derived="true" id="type.1092">
            <name>const RandomAccessIter&lt;BinaryProperty*, const BinaryProperty*&amp;, const BinaryProperty**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582448"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582451">
            <name>const RandomAccessIter&lt;BinaryProperty*, const BinaryProperty*&amp;, const BinaryProperty**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582448"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1128">
            <name>const RandomAccessIter&lt;Block*, Block*&amp;, Block**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582644"/>
            </content>
        </type>
        <type derived="true" id="type.1582648">
            <name>const RandomAccessIter&lt;Block*, Block*&amp;, Block**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582644"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582647">
            <name>const RandomAccessIter&lt;Block*, Block*&amp;, Block**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582644"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1125">
            <name>const RandomAccessIter&lt;Block*, const Block*&amp;, const Block**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582636"/>
            </content>
        </type>
        <type derived="true" id="type.1126">
            <name>const RandomAccessIter&lt;Block*, const Block*&amp;, const Block**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582636"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582639">
            <name>const RandomAccessIter&lt;Block*, const Block*&amp;, const Block**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582636"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.385">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581010"/>
            </content>
        </type>
        <type derived="true" id="type.366">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.364"/>
            </content>
        </type>
        <type derived="true" id="type.386">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581010"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.368">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.364"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581013">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581010"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.367">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.364"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581013">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, Bucket&lt;Pair&lt;K, T>>*&amp;, Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581010"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.357">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.355"/>
            </content>
        </type>
        <type derived="true" id="type.382">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581001"/>
            </content>
        </type>
        <type derived="true" id="type.359">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.355"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.383">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581001"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581004">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581001"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.358">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.355"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581004">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;K, T>>*, const Bucket&lt;Pair&lt;K, T>>*&amp;, const Bucket&lt;Pair&lt;K, T>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581001"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1186">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Age*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582973"/>
            </content>
        </type>
        <type derived="true" id="type.1187">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Age*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582973"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582976">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Age*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582973"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1183">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582964"/>
            </content>
        </type>
        <type derived="true" id="type.1184">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582964"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582967">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Age*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Age*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582964"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1351">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583869"/>
            </content>
        </type>
        <type derived="true" id="type.1352">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583869"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583872">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583869"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1348">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583860"/>
            </content>
        </type>
        <type derived="true" id="type.1349">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583860"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583863">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, AliasType*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583860"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1285">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583511"/>
            </content>
        </type>
        <type derived="true" id="type.1286">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583511"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583514">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583511"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1282">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583502"/>
            </content>
        </type>
        <type derived="true" id="type.1283">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583502"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583505">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiClass*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583502"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1318">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583690"/>
            </content>
        </type>
        <type derived="true" id="type.1319">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583690"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583693">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583690"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1315">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583681"/>
            </content>
        </type>
        <type derived="true" id="type.1316">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583681"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583684">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583681"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1087">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582433"/>
            </content>
        </type>
        <type derived="true" id="type.1088">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582433"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582436">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582433"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1084">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582424"/>
            </content>
        </type>
        <type derived="true" id="type.1085">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582424"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582427">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, BinaryProperty*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582424"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1120">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Block*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582613"/>
            </content>
        </type>
        <type derived="true" id="type.1121">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Block*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582613"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582616">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Block*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582613"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1117">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582604"/>
            </content>
        </type>
        <type derived="true" id="type.1118">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582604"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582607">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Block*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Block*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582604"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1153">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582794"/>
            </content>
        </type>
        <type derived="true" id="type.1154">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582794"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582797">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582794"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1150">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582785"/>
            </content>
        </type>
        <type derived="true" id="type.1151">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582785"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582788">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, GeneralCategory*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582785"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1252">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583332"/>
            </content>
        </type>
        <type derived="true" id="type.1253">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583332"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583335">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583332"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1249">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583323"/>
            </content>
        </type>
        <type derived="true" id="type.1250">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583323"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583326">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, NumericType*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583323"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1219">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Script*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583152"/>
            </content>
        </type>
        <type derived="true" id="type.1220">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Script*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583152"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583155">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, Bucket&lt;Pair&lt;String&lt;char>, Script*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583152"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1216">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583143"/>
            </content>
        </type>
        <type derived="true" id="type.1217">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583143"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583146">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;String&lt;char>, Script*>>*, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>*&amp;, const Bucket&lt;Pair&lt;String&lt;char>, Script*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583143"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1173">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582908"/>
            </content>
        </type>
        <type derived="true" id="type.1174">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582908"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582911">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582908"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1170">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582899"/>
            </content>
        </type>
        <type derived="true" id="type.1171">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582899"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582902">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AgeId, Age*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582899"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1338">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583804"/>
            </content>
        </type>
        <type derived="true" id="type.1339">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583804"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583807">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583804"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1335">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583795"/>
            </content>
        </type>
        <type derived="true" id="type.1336">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583795"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583798">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583795"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1272">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583446"/>
            </content>
        </type>
        <type derived="true" id="type.1273">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583446"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583449">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583446"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1269">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583437"/>
            </content>
        </type>
        <type derived="true" id="type.1270">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583437"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583440">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583437"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1305">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583625"/>
            </content>
        </type>
        <type derived="true" id="type.1306">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583625"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583628">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583625"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1302">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583616"/>
            </content>
        </type>
        <type derived="true" id="type.1303">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583616"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583619">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583616"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1073">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582354"/>
            </content>
        </type>
        <type derived="true" id="type.1074">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582354"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582357">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582354"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1070">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582345"/>
            </content>
        </type>
        <type derived="true" id="type.1071">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582345"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582348">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582345"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1107">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582548"/>
            </content>
        </type>
        <type derived="true" id="type.1108">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582548"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582551">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582548"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1104">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582539"/>
            </content>
        </type>
        <type derived="true" id="type.1105">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582539"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582542">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.BlockId, Block*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582539"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1140">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582729"/>
            </content>
        </type>
        <type derived="true" id="type.1141">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582729"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582732">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582729"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1137">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582720"/>
            </content>
        </type>
        <type derived="true" id="type.1138">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582720"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582723">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582720"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1239">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583267"/>
            </content>
        </type>
        <type derived="true" id="type.1240">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583267"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583270">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583267"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1236">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583258"/>
            </content>
        </type>
        <type derived="true" id="type.1237">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583258"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583261">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583258"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1206">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583087"/>
            </content>
        </type>
        <type derived="true" id="type.1207">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583087"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583090">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583087"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1203">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583078"/>
            </content>
        </type>
        <type derived="true" id="type.1204">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583078"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583081">
            <name>const RandomAccessIter&lt;Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>*&amp;, const Bucket&lt;Pair&lt;System.Unicode.ScriptId, Script*>>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583078"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.442">
            <name>const RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.440"/>
            </content>
        </type>
        <type derived="true" id="type.460">
            <name>const RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581138"/>
            </content>
        </type>
        <type derived="true" id="type.444">
            <name>const RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.440"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.461">
            <name>const RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581138"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581141">
            <name>const RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581138"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.443">
            <name>const RandomAccessIter&lt;Bucket&lt;T>*, Bucket&lt;T>*&amp;, Bucket&lt;T>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.440"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.433">
            <name>const RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.431"/>
            </content>
        </type>
        <type derived="true" id="type.457">
            <name>const RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581129"/>
            </content>
        </type>
        <type derived="true" id="type.435">
            <name>const RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.431"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.458">
            <name>const RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581129"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581132">
            <name>const RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581129"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.434">
            <name>const RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.431"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581132">
            <name>const RandomAccessIter&lt;Bucket&lt;T>*, const Bucket&lt;T>*&amp;, const Bucket&lt;T>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581129"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.533">
            <name>const RandomAccessIter&lt;Bucket&lt;ValueType>*, Bucket&lt;ValueType>*&amp;, Bucket&lt;ValueType>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.531"/>
            </content>
        </type>
        <type derived="true" id="type.535">
            <name>const RandomAccessIter&lt;Bucket&lt;ValueType>*, Bucket&lt;ValueType>*&amp;, Bucket&lt;ValueType>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.531"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.534">
            <name>const RandomAccessIter&lt;Bucket&lt;ValueType>*, Bucket&lt;ValueType>*&amp;, Bucket&lt;ValueType>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.531"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.524">
            <name>const RandomAccessIter&lt;Bucket&lt;ValueType>*, const Bucket&lt;ValueType>*&amp;, const Bucket&lt;ValueType>**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.522"/>
            </content>
        </type>
        <type derived="true" id="type.526">
            <name>const RandomAccessIter&lt;Bucket&lt;ValueType>*, const Bucket&lt;ValueType>*&amp;, const Bucket&lt;ValueType>**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.522"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.525">
            <name>const RandomAccessIter&lt;Bucket&lt;ValueType>*, const Bucket&lt;ValueType>*&amp;, const Bucket&lt;ValueType>**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.522"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.950">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.948"/>
            </content>
        </type>
        <type derived="true" id="type.1024">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582152"/>
            </content>
        </type>
        <type derived="true" id="type.996">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582062"/>
            </content>
        </type>
        <type derived="true" id="type.982">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582017"/>
            </content>
        </type>
        <type derived="true" id="type.1052">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582242"/>
            </content>
        </type>
        <type derived="true" id="type.1010">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582107"/>
            </content>
        </type>
        <type derived="true" id="type.1038">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582197"/>
            </content>
        </type>
        <type derived="true" id="type.1025">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582152"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.952">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.948"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.983">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582017"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.997">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582062"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1053">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582242"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1011">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582107"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1039">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582197"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582065">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582062"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582245">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582242"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582155">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582152"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582110">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582107"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.951">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.948"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582200">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582197"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582020">
            <name>const RandomAccessIter&lt;CharT, CharT&amp;, CharT*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582017"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1021">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582143"/>
            </content>
        </type>
        <type derived="true" id="type.993">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582053"/>
            </content>
        </type>
        <type derived="true" id="type.1049">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582233"/>
            </content>
        </type>
        <type derived="true" id="type.979">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582008"/>
            </content>
        </type>
        <type derived="true" id="type.1007">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582098"/>
            </content>
        </type>
        <type derived="true" id="type.1035">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582188"/>
            </content>
        </type>
        <type derived="true" id="type.941">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.939"/>
            </content>
        </type>
        <type derived="true" id="type.943">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.939"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.994">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582053"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1022">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582143"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.980">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582008"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1008">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582098"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1036">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582188"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1050">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582233"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582056">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582053"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582011">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582008"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582191">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582188"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.942">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.939"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582236">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582233"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582146">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582143"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582101">
            <name>const RandomAccessIter&lt;CharT, const CharT&amp;, const CharT*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582098"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1161">
            <name>const RandomAccessIter&lt;GeneralCategory*, GeneralCategory*&amp;, GeneralCategory**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582825"/>
            </content>
        </type>
        <type derived="true" id="type.1582829">
            <name>const RandomAccessIter&lt;GeneralCategory*, GeneralCategory*&amp;, GeneralCategory**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582825"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582828">
            <name>const RandomAccessIter&lt;GeneralCategory*, GeneralCategory*&amp;, GeneralCategory**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582825"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1158">
            <name>const RandomAccessIter&lt;GeneralCategory*, const GeneralCategory*&amp;, const GeneralCategory**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582817"/>
            </content>
        </type>
        <type derived="true" id="type.1159">
            <name>const RandomAccessIter&lt;GeneralCategory*, const GeneralCategory*&amp;, const GeneralCategory**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582817"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582820">
            <name>const RandomAccessIter&lt;GeneralCategory*, const GeneralCategory*&amp;, const GeneralCategory**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582817"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1259">
            <name>const RandomAccessIter&lt;NumericType*, NumericType*&amp;, NumericType**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583355"/>
            </content>
        </type>
        <type derived="true" id="type.1583359">
            <name>const RandomAccessIter&lt;NumericType*, NumericType*&amp;, NumericType**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583355"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583358">
            <name>const RandomAccessIter&lt;NumericType*, NumericType*&amp;, NumericType**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583355"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1256">
            <name>const RandomAccessIter&lt;NumericType*, const NumericType*&amp;, const NumericType**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583347"/>
            </content>
        </type>
        <type derived="true" id="type.1257">
            <name>const RandomAccessIter&lt;NumericType*, const NumericType*&amp;, const NumericType**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583347"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583350">
            <name>const RandomAccessIter&lt;NumericType*, const NumericType*&amp;, const NumericType**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583347"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1227">
            <name>const RandomAccessIter&lt;Script*, Script*&amp;, Script**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583183"/>
            </content>
        </type>
        <type derived="true" id="type.1583187">
            <name>const RandomAccessIter&lt;Script*, Script*&amp;, Script**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583183"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583186">
            <name>const RandomAccessIter&lt;Script*, Script*&amp;, Script**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583183"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1224">
            <name>const RandomAccessIter&lt;Script*, const Script*&amp;, const Script**></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583175"/>
            </content>
        </type>
        <type derived="true" id="type.1225">
            <name>const RandomAccessIter&lt;Script*, const Script*&amp;, const Script**>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583175"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583178">
            <name>const RandomAccessIter&lt;Script*, const Script*&amp;, const Script**>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583175"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.989">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582038"/>
            </content>
        </type>
        <type derived="true" id="type.1017">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582128"/>
            </content>
        </type>
        <type derived="true" id="type.971">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.969"/>
            </content>
        </type>
        <type derived="true" id="type.1059">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582263"/>
            </content>
        </type>
        <type derived="true" id="type.1003">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582083"/>
            </content>
        </type>
        <type derived="true" id="type.1031">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582173"/>
            </content>
        </type>
        <type derived="true" id="type.1045">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582218"/>
            </content>
        </type>
        <type derived="true" id="type.1004">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582083"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.990">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582038"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1032">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582173"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1046">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582218"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1060">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582263"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1018">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582128"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.973">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.969"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582041">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582038"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582266">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582263"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582221">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582218"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582176">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582173"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582131">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582128"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582086">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582083"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.972">
            <name>const RandomAccessIter&lt;String&lt;CharT>, String&lt;CharT>&amp;, String&lt;CharT>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.969"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1042">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582211"/>
            </content>
        </type>
        <type derived="true" id="type.1028">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582166"/>
            </content>
        </type>
        <type derived="true" id="type.1014">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582121"/>
            </content>
        </type>
        <type derived="true" id="type.986">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582031"/>
            </content>
        </type>
        <type derived="true" id="type.1000">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582076"/>
            </content>
        </type>
        <type derived="true" id="type.964">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.962"/>
            </content>
        </type>
        <type derived="true" id="type.1056">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582256"/>
            </content>
        </type>
        <type derived="true" id="type.1015">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582121"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.987">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582031"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.966">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.962"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1001">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582076"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1029">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582166"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1057">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582256"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1043">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582211"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582124">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582121"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582079">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582076"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582259">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582256"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582034">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582031"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582214">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582211"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.965">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.962"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582169">
            <name>const RandomAccessIter&lt;String&lt;CharT>, const String&lt;CharT>&amp;, const String&lt;CharT>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582166"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.9">
            <name>const RandomAccessIter&lt;String&lt;char>, String&lt;char>&amp;, String&lt;char>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580272"/>
            </content>
        </type>
        <type derived="true" id="type.10">
            <name>const RandomAccessIter&lt;String&lt;char>, String&lt;char>&amp;, String&lt;char>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580272"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580275">
            <name>const RandomAccessIter&lt;String&lt;char>, String&lt;char>&amp;, String&lt;char>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580272"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.6">
            <name>const RandomAccessIter&lt;String&lt;char>, const String&lt;char>&amp;, const String&lt;char>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580265"/>
            </content>
        </type>
        <type derived="true" id="type.7">
            <name>const RandomAccessIter&lt;String&lt;char>, const String&lt;char>&amp;, const String&lt;char>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580265"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580268">
            <name>const RandomAccessIter&lt;String&lt;char>, const String&lt;char>&amp;, const String&lt;char>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580265"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.41">
            <name>const RandomAccessIter&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580397"/>
            </content>
        </type>
        <type derived="true" id="type.42">
            <name>const RandomAccessIter&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580397"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580400">
            <name>const RandomAccessIter&lt;String&lt;uchar>, String&lt;uchar>&amp;, String&lt;uchar>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580397"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.38">
            <name>const RandomAccessIter&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580390"/>
            </content>
        </type>
        <type derived="true" id="type.39">
            <name>const RandomAccessIter&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580390"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580393">
            <name>const RandomAccessIter&lt;String&lt;uchar>, const String&lt;uchar>&amp;, const String&lt;uchar>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580390"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.29">
            <name>const RandomAccessIter&lt;String&lt;wchar>, String&lt;wchar>&amp;, String&lt;wchar>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580353"/>
            </content>
        </type>
        <type derived="true" id="type.30">
            <name>const RandomAccessIter&lt;String&lt;wchar>, String&lt;wchar>&amp;, String&lt;wchar>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580353"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580356">
            <name>const RandomAccessIter&lt;String&lt;wchar>, String&lt;wchar>&amp;, String&lt;wchar>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580353"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.26">
            <name>const RandomAccessIter&lt;String&lt;wchar>, const String&lt;wchar>&amp;, const String&lt;wchar>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580346"/>
            </content>
        </type>
        <type derived="true" id="type.27">
            <name>const RandomAccessIter&lt;String&lt;wchar>, const String&lt;wchar>&amp;, const String&lt;wchar>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580346"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580349">
            <name>const RandomAccessIter&lt;String&lt;wchar>, const String&lt;wchar>&amp;, const String&lt;wchar>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580346"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.16">
            <name>const RandomAccessIter&lt;System.Ascii.CharClass, CharClass&amp;, CharClass*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580296"/>
            </content>
        </type>
        <type derived="true" id="type.17">
            <name>const RandomAccessIter&lt;System.Ascii.CharClass, CharClass&amp;, CharClass*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580296"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580299">
            <name>const RandomAccessIter&lt;System.Ascii.CharClass, CharClass&amp;, CharClass*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580296"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.13">
            <name>const RandomAccessIter&lt;System.Ascii.CharClass, const CharClass&amp;, const CharClass*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580288"/>
            </content>
        </type>
        <type derived="true" id="type.14">
            <name>const RandomAccessIter&lt;System.Ascii.CharClass, const CharClass&amp;, const CharClass*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580288"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580291">
            <name>const RandomAccessIter&lt;System.Ascii.CharClass, const CharClass&amp;, const CharClass*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580288"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1364">
            <name>const RandomAccessIter&lt;System.Unicode.Alias, Alias&amp;, Alias*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583922"/>
            </content>
        </type>
        <type derived="true" id="type.1365">
            <name>const RandomAccessIter&lt;System.Unicode.Alias, Alias&amp;, Alias*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583922"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583925">
            <name>const RandomAccessIter&lt;System.Unicode.Alias, Alias&amp;, Alias*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583922"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1361">
            <name>const RandomAccessIter&lt;System.Unicode.Alias, const Alias&amp;, const Alias*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583914"/>
            </content>
        </type>
        <type derived="true" id="type.1362">
            <name>const RandomAccessIter&lt;System.Unicode.Alias, const Alias&amp;, const Alias*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583914"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583917">
            <name>const RandomAccessIter&lt;System.Unicode.Alias, const Alias&amp;, const Alias*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583914"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.769">
            <name>const RandomAccessIter&lt;T, R, P></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581658"/>
            </content>
        </type>
        <type derived="true" id="type.771">
            <name>const RandomAccessIter&lt;T, R, P></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581665"/>
            </content>
        </type>
        <type derived="true" id="type.773">
            <name>const RandomAccessIter&lt;T, R, P></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581672"/>
            </content>
        </type>
        <type derived="true" id="type.775">
            <name>const RandomAccessIter&lt;T, R, P></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581679"/>
            </content>
        </type>
        <type derived="true" id="type.777">
            <name>const RandomAccessIter&lt;T, R, P></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581686"/>
            </content>
        </type>
        <type derived="true" id="type.779">
            <name>const RandomAccessIter&lt;T, R, P></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581693"/>
            </content>
        </type>
        <type derived="true" id="type.764">
            <name>const RandomAccessIter&lt;T, R, P></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581651"/>
            </content>
        </type>
        <type derived="true" id="type.766">
            <name>const RandomAccessIter&lt;T, R, P>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581651"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581697">
            <name>const RandomAccessIter&lt;T, R, P>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581693"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581669">
            <name>const RandomAccessIter&lt;T, R, P>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581665"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581662">
            <name>const RandomAccessIter&lt;T, R, P>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581658"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581676">
            <name>const RandomAccessIter&lt;T, R, P>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581672"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581683">
            <name>const RandomAccessIter&lt;T, R, P>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581679"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581690">
            <name>const RandomAccessIter&lt;T, R, P>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581686"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581689">
            <name>const RandomAccessIter&lt;T, R, P>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581686"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581696">
            <name>const RandomAccessIter&lt;T, R, P>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581693"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.765">
            <name>const RandomAccessIter&lt;T, R, P>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581651"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581661">
            <name>const RandomAccessIter&lt;T, R, P>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581658"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581696">
            <name>const RandomAccessIter&lt;T, R, P>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581693"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581668">
            <name>const RandomAccessIter&lt;T, R, P>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581665"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581682">
            <name>const RandomAccessIter&lt;T, R, P>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581679"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581675">
            <name>const RandomAccessIter&lt;T, R, P>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581672"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.638">
            <name>const RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581438"/>
            </content>
        </type>
        <type derived="true" id="type.645">
            <name>const RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581463"/>
            </content>
        </type>
        <type derived="true" id="type.626">
            <name>const RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.624"/>
            </content>
        </type>
        <type derived="true" id="type.756">
            <name>const RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.754"/>
            </content>
        </type>
        <type derived="true" id="type.927">
            <name>const RandomAccessIter&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.925"/>
            </content>
        </type>
        <type derived="true" id="type.929">
            <name>const RandomAccessIter&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.925"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.628">
            <name>const RandomAccessIter&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.624"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.646">
            <name>const RandomAccessIter&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581463"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.758">
            <name>const RandomAccessIter&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.754"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.639">
            <name>const RandomAccessIter&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581438"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581441">
            <name>const RandomAccessIter&lt;T, T&amp;, T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581438"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.627">
            <name>const RandomAccessIter&lt;T, T&amp;, T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.624"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581466">
            <name>const RandomAccessIter&lt;T, T&amp;, T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581463"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.757">
            <name>const RandomAccessIter&lt;T, T&amp;, T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.754"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.928">
            <name>const RandomAccessIter&lt;T, T&amp;, T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.925"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.642">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581454"/>
            </content>
        </type>
        <type derived="true" id="type.747">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.745"/>
            </content>
        </type>
        <type derived="true" id="type.635">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581429"/>
            </content>
        </type>
        <type derived="true" id="type.919">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.917"/>
            </content>
        </type>
        <type derived="true" id="type.617">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.615"/>
            </content>
        </type>
        <type derived="true" id="type.619">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.615"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.636">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581429"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.921">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.917"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.643">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581454"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.749">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.745"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.618">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.615"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581457">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581454"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.748">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.745"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581457">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581454"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.920">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.917"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581432">
            <name>const RandomAccessIter&lt;T, const T&amp;, const T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581429"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1372">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, UniquePtr&lt;System.Unicode.CharacterInfo>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583952"/>
            </content>
        </type>
        <type derived="true" id="type.1373">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, UniquePtr&lt;System.Unicode.CharacterInfo>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583952"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583955">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, UniquePtr&lt;System.Unicode.CharacterInfo>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583952"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1369">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, const UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfo>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583945"/>
            </content>
        </type>
        <type derived="true" id="type.1370">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, const UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfo>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583945"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583948">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfo>, const UniquePtr&lt;System.Unicode.CharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfo>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583945"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1396">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.CharacterInfoPage>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1584042"/>
            </content>
        </type>
        <type derived="true" id="type.1397">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.CharacterInfoPage>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1584042"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584045">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.CharacterInfoPage>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1584042"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1393">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, const UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfoPage>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1584035"/>
            </content>
        </type>
        <type derived="true" id="type.1394">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, const UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfoPage>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1584035"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584038">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.CharacterInfoPage>, const UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.CharacterInfoPage>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1584035"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1380">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583981"/>
            </content>
        </type>
        <type derived="true" id="type.1381">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583981"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583984">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583981"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1377">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583974"/>
            </content>
        </type>
        <type derived="true" id="type.1378">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583974"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583977">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583974"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1405">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1584080"/>
            </content>
        </type>
        <type derived="true" id="type.1406">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1584080"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584083">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1584080"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1402">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1584073"/>
            </content>
        </type>
        <type derived="true" id="type.1403">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1584073"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584076">
            <name>const RandomAccessIter&lt;UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;, const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1584073"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.705">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581551"/>
            </content>
        </type>
        <type derived="true" id="type.706">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581551"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581554">
            <name>const RandomAccessIter&lt;byte, byte&amp;, byte*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581551"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.703">
            <name>const RandomAccessIter&lt;byte, const byte&amp;, const byte*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581544"/>
            </content>
        </type>
        <type derived="true" id="type.704">
            <name>const RandomAccessIter&lt;byte, const byte&amp;, const byte*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581544"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581547">
            <name>const RandomAccessIter&lt;byte, const byte&amp;, const byte*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581544"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.4">
            <name>const RandomAccessIter&lt;char, char&amp;, char*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580251"/>
            </content>
        </type>
        <type derived="true" id="type.1580255">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580251"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580254">
            <name>const RandomAccessIter&lt;char, char&amp;, char*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580251"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.3">
            <name>const RandomAccessIter&lt;char, const char&amp;, const char*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580243"/>
            </content>
        </type>
        <type derived="true" id="type.1580247">
            <name>const RandomAccessIter&lt;char, const char&amp;, const char*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580243"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580246">
            <name>const RandomAccessIter&lt;char, const char&amp;, const char*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580243"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.464">
            <name>const RandomAccessIter&lt;long, const long&amp;, const long*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581155"/>
            </content>
        </type>
        <type derived="true" id="type.1581159">
            <name>const RandomAccessIter&lt;long, const long&amp;, const long*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581155"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581158">
            <name>const RandomAccessIter&lt;long, const long&amp;, const long*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581155"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.465">
            <name>const RandomAccessIter&lt;long, long&amp;, long*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581162"/>
            </content>
        </type>
        <type derived="true" id="type.1581166">
            <name>const RandomAccessIter&lt;long, long&amp;, long*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581162"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581165">
            <name>const RandomAccessIter&lt;long, long&amp;, long*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581162"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.33">
            <name>const RandomAccessIter&lt;uchar, const uchar&amp;, const uchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580368"/>
            </content>
        </type>
        <type derived="true" id="type.1580372">
            <name>const RandomAccessIter&lt;uchar, const uchar&amp;, const uchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580368"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580371">
            <name>const RandomAccessIter&lt;uchar, const uchar&amp;, const uchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580368"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.34">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580376"/>
            </content>
        </type>
        <type derived="true" id="type.35">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580376"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580379">
            <name>const RandomAccessIter&lt;uchar, uchar&amp;, uchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580376"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1384">
            <name>const RandomAccessIter&lt;uint, const uint&amp;, const uint*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583996"/>
            </content>
        </type>
        <type derived="true" id="type.1385">
            <name>const RandomAccessIter&lt;uint, const uint&amp;, const uint*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583996"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583999">
            <name>const RandomAccessIter&lt;uint, const uint&amp;, const uint*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583996"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1387">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1584003"/>
            </content>
        </type>
        <type derived="true" id="type.1388">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1584003"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584006">
            <name>const RandomAccessIter&lt;uint, uint&amp;, uint*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1584003"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.45">
            <name>const RandomAccessIter&lt;ulong, const ulong&amp;, const ulong*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580418"/>
            </content>
        </type>
        <type derived="true" id="type.46">
            <name>const RandomAccessIter&lt;ulong, const ulong&amp;, const ulong*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580418"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580421">
            <name>const RandomAccessIter&lt;ulong, const ulong&amp;, const ulong*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580418"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.48">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580425"/>
            </content>
        </type>
        <type derived="true" id="type.49">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580425"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580428">
            <name>const RandomAccessIter&lt;ulong, ulong&amp;, ulong*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580425"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.21">
            <name>const RandomAccessIter&lt;wchar, const wchar&amp;, const wchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580324"/>
            </content>
        </type>
        <type derived="true" id="type.1580328">
            <name>const RandomAccessIter&lt;wchar, const wchar&amp;, const wchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580324"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580327">
            <name>const RandomAccessIter&lt;wchar, const wchar&amp;, const wchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580324"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.22">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580332"/>
            </content>
        </type>
        <type derived="true" id="type.23">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580332"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580335">
            <name>const RandomAccessIter&lt;wchar, wchar&amp;, wchar*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580332"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.666">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.664"/>
            </content>
        </type>
        <type derived="true" id="type.688">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.664"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.667">
            <name>const RedBlackTree&lt;Key, Pair&lt;Key, Value>, SelectFirst&lt;Key, Value>, KeyCompare>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.664"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.802">
            <name>const RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581732"/>
            </content>
        </type>
        <type derived="true" id="type.826">
            <name>const RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581732"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.803">
            <name>const RedBlackTree&lt;KeyType, ValueType, KeyOfValue, Compare>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581732"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.899">
            <name>const RedBlackTree&lt;T, T, Identity&lt;T>, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581883"/>
            </content>
        </type>
        <type derived="true" id="type.852">
            <name>const RedBlackTree&lt;T, T, Identity&lt;T>, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.850"/>
            </content>
        </type>
        <type derived="true" id="type.890">
            <name>const RedBlackTree&lt;T, T, Identity&lt;T>, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581833"/>
            </content>
        </type>
        <type derived="true" id="type.875">
            <name>const RedBlackTree&lt;T, T, Identity&lt;T>, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.850"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581858">
            <name>const RedBlackTree&lt;T, T, Identity&lt;T>, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581833"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581908">
            <name>const RedBlackTree&lt;T, T, Identity&lt;T>, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581883"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581858">
            <name>const RedBlackTree&lt;T, T, Identity&lt;T>, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581833"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581836">
            <name>const RedBlackTree&lt;T, T, Identity&lt;T>, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581833"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.853">
            <name>const RedBlackTree&lt;T, T, Identity&lt;T>, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.850"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581886">
            <name>const RedBlackTree&lt;T, T, Identity&lt;T>, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581883"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.675">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.673"/>
            </content>
        </type>
        <type derived="true" id="type.699">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.673"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.676">
            <name>const RedBlackTreeNode&lt;Pair&lt;Key, Value>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.673"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.799">
            <name>const RedBlackTreeNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581723"/>
            </content>
        </type>
        <type derived="true" id="type.861">
            <name>const RedBlackTreeNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.859"/>
            </content>
        </type>
        <type derived="true" id="type.782">
            <name>const RedBlackTreeNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581700"/>
            </content>
        </type>
        <type derived="true" id="type.791">
            <name>const RedBlackTreeNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.789"/>
            </content>
        </type>
        <type derived="true" id="type.892">
            <name>const RedBlackTreeNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581842"/>
            </content>
        </type>
        <type derived="true" id="type.901">
            <name>const RedBlackTreeNode&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581892"/>
            </content>
        </type>
        <type derived="true" id="type.1581869">
            <name>const RedBlackTreeNode&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581842"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.886">
            <name>const RedBlackTreeNode&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.859"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581919">
            <name>const RedBlackTreeNode&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581892"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581869">
            <name>const RedBlackTreeNode&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581842"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581845">
            <name>const RedBlackTreeNode&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581842"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.783">
            <name>const RedBlackTreeNode&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581700"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581845">
            <name>const RedBlackTreeNode&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581842"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581895">
            <name>const RedBlackTreeNode&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581892"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.792">
            <name>const RedBlackTreeNode&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.789"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581726">
            <name>const RedBlackTreeNode&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581723"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.862">
            <name>const RedBlackTreeNode&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.859"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.812">
            <name>const RedBlackTreeNode&lt;ValueType></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.810"/>
            </content>
        </type>
        <type derived="true" id="type.838">
            <name>const RedBlackTreeNode&lt;ValueType>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.810"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.813">
            <name>const RedBlackTreeNode&lt;ValueType>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.810"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1445">
            <name>const RedBlackTreeNodeBase</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580027"/>
            </content>
        </type>
        <type derived="true" id="type.1446">
            <name>const RedBlackTreeNodeBase&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580027"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580031">
            <name>const RedBlackTreeNodeBase*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580027"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.683">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.681"/>
            </content>
        </type>
        <type derived="true" id="type.685">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.681"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.684">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, Pair&lt;Key, Value>&amp;, Pair&lt;Key, Value>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.681"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.671">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.669"/>
            </content>
        </type>
        <type derived="true" id="type.678">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.669"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.672">
            <name>const RedBlackTreeNodeIterator&lt;Pair&lt;Key, Value>, const Pair&lt;Key, Value>&amp;, const Pair&lt;Key, Value>*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.669"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.787">
            <name>const RedBlackTreeNodeIterator&lt;T, R, P></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581706"/>
            </content>
        </type>
        <type derived="true" id="type.798">
            <name>const RedBlackTreeNodeIterator&lt;T, R, P></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581719"/>
            </content>
        </type>
        <type derived="true" id="type.1581729">
            <name>const RedBlackTreeNodeIterator&lt;T, R, P>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581719"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.795">
            <name>const RedBlackTreeNodeIterator&lt;T, R, P>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581706"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581729">
            <name>const RedBlackTreeNodeIterator&lt;T, R, P>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581719"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581722">
            <name>const RedBlackTreeNodeIterator&lt;T, R, P>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581719"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.788">
            <name>const RedBlackTreeNodeIterator&lt;T, R, P>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581706"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581722">
            <name>const RedBlackTreeNodeIterator&lt;T, R, P>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581719"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.870">
            <name>const RedBlackTreeNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.868"/>
            </content>
        </type>
        <type derived="true" id="type.895">
            <name>const RedBlackTreeNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581851"/>
            </content>
        </type>
        <type derived="true" id="type.904">
            <name>const RedBlackTreeNodeIterator&lt;T, T&amp;, T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581901"/>
            </content>
        </type>
        <type derived="true" id="type.1581905">
            <name>const RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581901"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.872">
            <name>const RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.868"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581905">
            <name>const RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581901"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581855">
            <name>const RedBlackTreeNodeIterator&lt;T, T&amp;, T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581851"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.871">
            <name>const RedBlackTreeNodeIterator&lt;T, T&amp;, T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.868"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581854">
            <name>const RedBlackTreeNodeIterator&lt;T, T&amp;, T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581851"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581904">
            <name>const RedBlackTreeNodeIterator&lt;T, T&amp;, T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581901"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.891">
            <name>const RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581838"/>
            </content>
        </type>
        <type derived="true" id="type.900">
            <name>const RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581888"/>
            </content>
        </type>
        <type derived="true" id="type.857">
            <name>const RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.855"/>
            </content>
        </type>
        <type derived="true" id="type.864">
            <name>const RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.855"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.893">
            <name>const RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581838"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.902">
            <name>const RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581888"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581841">
            <name>const RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581838"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581891">
            <name>const RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581888"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581841">
            <name>const RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581838"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.858">
            <name>const RedBlackTreeNodeIterator&lt;T, const T&amp;, const T*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.855"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.821">
            <name>const RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.819"/>
            </content>
        </type>
        <type derived="true" id="type.823">
            <name>const RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.819"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.822">
            <name>const RedBlackTreeNodeIterator&lt;ValueType, ValueType&amp;, ValueType*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.819"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.808">
            <name>const RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.806"/>
            </content>
        </type>
        <type derived="true" id="type.815">
            <name>const RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.806"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.809">
            <name>const RedBlackTreeNodeIterator&lt;ValueType, const ValueType&amp;, const ValueType*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.806"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584341">
            <name>const Rel&lt;String&lt;char>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582372"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584570">
            <name>const Rel&lt;System.Unicode.AgeId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582845"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584975">
            <name>const Rel&lt;System.Unicode.AliasTypeId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583741"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584813">
            <name>const Rel&lt;System.Unicode.BidiClassId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583383"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584894">
            <name>const Rel&lt;System.Unicode.BidiPairedBracketTypeId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583562"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584305">
            <name>const Rel&lt;System.Unicode.BinaryPropertyId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582291"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584408">
            <name>const Rel&lt;System.Unicode.BlockId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582485"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584489">
            <name>const Rel&lt;System.Unicode.GeneralCategoryId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582666"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584732">
            <name>const Rel&lt;System.Unicode.NumericTypeId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583204"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584651">
            <name>const Rel&lt;System.Unicode.ScriptId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583024"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.143">
            <name>const Remainder&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580666"/>
            </content>
        </type>
        <type derived="true" id="type.144">
            <name>const Remainder&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580666"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580120">
            <name>const Script*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580117"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583037">
            <name>const Script*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580117"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583174">
            <name>const Script**</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580117"/>
                <qualifier>*</qualifier>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583020">
            <name>const ScriptId&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580116"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583168">
            <name>const ScriptTable&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580121"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580123">
            <name>const ScriptTable*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580121"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.376">
            <name>const SelectFirst&lt;K, T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580962"/>
            </content>
        </type>
        <type derived="true" id="type.317">
            <name>const SelectFirst&lt;K, T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.316"/>
            </content>
        </type>
        <type derived="true" id="type.318">
            <name>const SelectFirst&lt;K, T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.316"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580964">
            <name>const SelectFirst&lt;K, T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580962"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.658">
            <name>const SelectFirst&lt;Key, Value></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.657"/>
            </content>
        </type>
        <type derived="true" id="type.659">
            <name>const SelectFirst&lt;Key, Value>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.657"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1177">
            <name>const SelectFirst&lt;String&lt;char>, Age*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582925"/>
            </content>
        </type>
        <type derived="true" id="type.1584592">
            <name>const SelectFirst&lt;String&lt;char>, Age*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582925"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582927">
            <name>const SelectFirst&lt;String&lt;char>, Age*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582925"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1342">
            <name>const SelectFirst&lt;String&lt;char>, AliasType*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583821"/>
            </content>
        </type>
        <type derived="true" id="type.1584997">
            <name>const SelectFirst&lt;String&lt;char>, AliasType*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583821"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583823">
            <name>const SelectFirst&lt;String&lt;char>, AliasType*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583821"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1276">
            <name>const SelectFirst&lt;String&lt;char>, BidiClass*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583463"/>
            </content>
        </type>
        <type derived="true" id="type.1584835">
            <name>const SelectFirst&lt;String&lt;char>, BidiClass*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583463"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583465">
            <name>const SelectFirst&lt;String&lt;char>, BidiClass*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583463"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1309">
            <name>const SelectFirst&lt;String&lt;char>, BidiPairedBracketType*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583642"/>
            </content>
        </type>
        <type derived="true" id="type.1584916">
            <name>const SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583642"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583644">
            <name>const SelectFirst&lt;String&lt;char>, BidiPairedBracketType*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583642"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1078">
            <name>const SelectFirst&lt;String&lt;char>, BinaryProperty*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582385"/>
            </content>
        </type>
        <type derived="true" id="type.1584327">
            <name>const SelectFirst&lt;String&lt;char>, BinaryProperty*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582385"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582387">
            <name>const SelectFirst&lt;String&lt;char>, BinaryProperty*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582385"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1111">
            <name>const SelectFirst&lt;String&lt;char>, Block*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582565"/>
            </content>
        </type>
        <type derived="true" id="type.1584430">
            <name>const SelectFirst&lt;String&lt;char>, Block*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582565"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582567">
            <name>const SelectFirst&lt;String&lt;char>, Block*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582565"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1144">
            <name>const SelectFirst&lt;String&lt;char>, GeneralCategory*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582746"/>
            </content>
        </type>
        <type derived="true" id="type.1584511">
            <name>const SelectFirst&lt;String&lt;char>, GeneralCategory*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582746"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582748">
            <name>const SelectFirst&lt;String&lt;char>, GeneralCategory*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582746"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1243">
            <name>const SelectFirst&lt;String&lt;char>, NumericType*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583284"/>
            </content>
        </type>
        <type derived="true" id="type.1584754">
            <name>const SelectFirst&lt;String&lt;char>, NumericType*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583284"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583286">
            <name>const SelectFirst&lt;String&lt;char>, NumericType*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583284"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1210">
            <name>const SelectFirst&lt;String&lt;char>, Script*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583104"/>
            </content>
        </type>
        <type derived="true" id="type.1584673">
            <name>const SelectFirst&lt;String&lt;char>, Script*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583104"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583106">
            <name>const SelectFirst&lt;String&lt;char>, Script*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583104"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1164">
            <name>const SelectFirst&lt;System.Unicode.AgeId, Age*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582860"/>
            </content>
        </type>
        <type derived="true" id="type.1584556">
            <name>const SelectFirst&lt;System.Unicode.AgeId, Age*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582860"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582862">
            <name>const SelectFirst&lt;System.Unicode.AgeId, Age*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582860"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1329">
            <name>const SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583756"/>
            </content>
        </type>
        <type derived="true" id="type.1584961">
            <name>const SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583756"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583758">
            <name>const SelectFirst&lt;System.Unicode.AliasTypeId, AliasType*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583756"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1263">
            <name>const SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583398"/>
            </content>
        </type>
        <type derived="true" id="type.1584799">
            <name>const SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583398"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583400">
            <name>const SelectFirst&lt;System.Unicode.BidiClassId, BidiClass*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583398"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1296">
            <name>const SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583577"/>
            </content>
        </type>
        <type derived="true" id="type.1584880">
            <name>const SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583577"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583579">
            <name>const SelectFirst&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583577"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1064">
            <name>const SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582306"/>
            </content>
        </type>
        <type derived="true" id="type.1584291">
            <name>const SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582306"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582308">
            <name>const SelectFirst&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582306"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1098">
            <name>const SelectFirst&lt;System.Unicode.BlockId, Block*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582500"/>
            </content>
        </type>
        <type derived="true" id="type.1584394">
            <name>const SelectFirst&lt;System.Unicode.BlockId, Block*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582500"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582502">
            <name>const SelectFirst&lt;System.Unicode.BlockId, Block*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582500"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1131">
            <name>const SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582681"/>
            </content>
        </type>
        <type derived="true" id="type.1584475">
            <name>const SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582681"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582683">
            <name>const SelectFirst&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582681"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1230">
            <name>const SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583219"/>
            </content>
        </type>
        <type derived="true" id="type.1584718">
            <name>const SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583219"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583221">
            <name>const SelectFirst&lt;System.Unicode.NumericTypeId, NumericType*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583219"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1197">
            <name>const SelectFirst&lt;System.Unicode.ScriptId, Script*></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583039"/>
            </content>
        </type>
        <type derived="true" id="type.1584637">
            <name>const SelectFirst&lt;System.Unicode.ScriptId, Script*>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583039"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583041">
            <name>const SelectFirst&lt;System.Unicode.ScriptId, Script*>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583039"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.713">
            <name>const SelectFirst&lt;T, U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581593"/>
            </content>
        </type>
        <type derived="true" id="type.714">
            <name>const SelectFirst&lt;T, U>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581593"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.724">
            <name>const SelectSecond&lt;T, U></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581606"/>
            </content>
        </type>
        <type derived="true" id="type.725">
            <name>const SelectSecond&lt;T, U>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581606"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.897">
            <name>const Set&lt;T, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581872"/>
            </content>
        </type>
        <type derived="true" id="type.841">
            <name>const Set&lt;T, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581773"/>
            </content>
        </type>
        <type derived="true" id="type.888">
            <name>const Set&lt;T, C></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581822"/>
            </content>
        </type>
        <type derived="true" id="type.1581921">
            <name>const Set&lt;T, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581872"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581871">
            <name>const Set&lt;T, C>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581822"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581875">
            <name>const Set&lt;T, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581872"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.842">
            <name>const Set&lt;T, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581773"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581875">
            <name>const Set&lt;T, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581872"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581825">
            <name>const Set&lt;T, C>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581822"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.297">
            <name>const ShiftLeft&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580868"/>
            </content>
        </type>
        <type derived="true" id="type.298">
            <name>const ShiftLeft&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580868"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.302">
            <name>const ShiftRight&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580875"/>
            </content>
        </type>
        <type derived="true" id="type.303">
            <name>const ShiftRight&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580875"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.906">
            <name>const Stack&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581922"/>
            </content>
        </type>
        <type derived="true" id="type.907">
            <name>const Stack&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581922"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1420">
            <name>const StaticInitCriticalSection</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579511"/>
            </content>
        </type>
        <type derived="true" id="type.1421">
            <name>const StaticInitCriticalSection&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579511"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1440">
            <name>const StreamReader</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580064"/>
            </content>
        </type>
        <type derived="true" id="type.1581952">
            <name>const StreamReader&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580064"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1441">
            <name>const StreamWriter</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580066"/>
            </content>
        </type>
        <type derived="true" id="type.1581955">
            <name>const StreamWriter&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580066"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1048">
            <name>const String&lt;CharT></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582227"/>
            </content>
        </type>
        <type derived="true" id="type.1020">
            <name>const String&lt;CharT></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582137"/>
            </content>
        </type>
        <type derived="true" id="type.935">
            <name>const String&lt;CharT></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581957"/>
            </content>
        </type>
        <type derived="true" id="type.1006">
            <name>const String&lt;CharT></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582092"/>
            </content>
        </type>
        <type derived="true" id="type.992">
            <name>const String&lt;CharT></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582047"/>
            </content>
        </type>
        <type derived="true" id="type.978">
            <name>const String&lt;CharT></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582002"/>
            </content>
        </type>
        <type derived="true" id="type.1034">
            <name>const String&lt;CharT></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582183"/>
            </content>
        </type>
        <type derived="true" id="type.1582159">
            <name>const String&lt;CharT>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582137"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582249">
            <name>const String&lt;CharT>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582227"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582024">
            <name>const String&lt;CharT>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582002"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.955">
            <name>const String&lt;CharT>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581957"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582069">
            <name>const String&lt;CharT>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582047"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582114">
            <name>const String&lt;CharT>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582092"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582204">
            <name>const String&lt;CharT>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582183"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582249">
            <name>const String&lt;CharT>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582227"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582140">
            <name>const String&lt;CharT>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582137"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582186">
            <name>const String&lt;CharT>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582183"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.936">
            <name>const String&lt;CharT>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581957"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582230">
            <name>const String&lt;CharT>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582227"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582050">
            <name>const String&lt;CharT>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582047"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582095">
            <name>const String&lt;CharT>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582092"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582005">
            <name>const String&lt;CharT>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582002"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.2">
            <name>const String&lt;char></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580238"/>
            </content>
        </type>
        <type derived="true" id="type.1580258">
            <name>const String&lt;char>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580238"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584275">
            <name>const String&lt;char>&amp;&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580238"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580241">
            <name>const String&lt;char>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580238"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.32">
            <name>const String&lt;uchar></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580362"/>
            </content>
        </type>
        <type derived="true" id="type.1580383">
            <name>const String&lt;uchar>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580362"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1585068">
            <name>const String&lt;uchar>&amp;&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580362"/>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580365">
            <name>const String&lt;uchar>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580362"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.20">
            <name>const String&lt;wchar></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580318"/>
            </content>
        </type>
        <type derived="true" id="type.1580339">
            <name>const String&lt;wchar>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580318"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580321">
            <name>const String&lt;wchar>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580318"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580195">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579520"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580217">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579568"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580218">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579570"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580194">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579519"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580219">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579572"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580220">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579585"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580221">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579587"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.160">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579868"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.147">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579859"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580222">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579589"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.142">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579857"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580223">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579591"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.136">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579854"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580224">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579593"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580225">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579595"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.131">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579852"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.126">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579850"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580226">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579597"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580227">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579599"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.120">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579847"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580229">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579604"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580234">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579638"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.65">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579829"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.56">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579827"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581587">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579992"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581364">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579964"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584120">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580190"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.848">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580048"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584109">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580189"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581582">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579990"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580959">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579923"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581727">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580038"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584120">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580190"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.909">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580055"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581575">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579988"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.709">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579986"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.717">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579995"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.728">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579998"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581881">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580052"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.738">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580004"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1416">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580188"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581094">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579930"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580216">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579558"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580228">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579601"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581388">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579965"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.203">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579880"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.544">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579954"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.313">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579919"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.306">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579916"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.301">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579914"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.296">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579912"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.193">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579877"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.186">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579875"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.291">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579910"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580524">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579832"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.286">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579908"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580561">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579837"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581452">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579969"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.281">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579906"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.563">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579956"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580589">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579838"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580215">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579554"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580210">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579551"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.592">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579963"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580205">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579549"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581831">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580050"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.793">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580035"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580204">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579546"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581427">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579968"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580629">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579848"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580657">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579855"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.210">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579882"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.220">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579885"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580203">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579544"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580202">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579541"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.227">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579887"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.237">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579890"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.483">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579939"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.244">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579892"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.613">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579967"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.473">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579937"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.469">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579935"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.76">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579836"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581314">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579959"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.254">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579895"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580201">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579539"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.261">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579897"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.176">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579872"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.396">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579927"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581203">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579943"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.169">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579870"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.784">
            <name>const T&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580033"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581428">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579968"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581316">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579959"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.614">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579967"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.77">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579836"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581366">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579964"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581453">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579969"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.594">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579963"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581887">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580052"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.744">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580004"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581390">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579965"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580562">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579837"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.413">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579927"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.854">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580048"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.916">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580055"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581111">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579930"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1414">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580188"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584118">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580190"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580590">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579838"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584107">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580189"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581837">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580050"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.565">
            <name>const T*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579956"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.245">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579893"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.729">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579999"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581583">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579991"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.262">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579898"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581588">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579993"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581576">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579989"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.177">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579873"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.718">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579996"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.211">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579883"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.228">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579888"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.194">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579878"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.710">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579987"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581588">
            <name>const U&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579993"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584595">
            <name>const UnaryFun&lt;Pair&lt;String&lt;char>, Age*>, String&lt;char>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582928"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1585000">
            <name>const UnaryFun&lt;Pair&lt;String&lt;char>, AliasType*>, String&lt;char>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583824"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584838">
            <name>const UnaryFun&lt;Pair&lt;String&lt;char>, BidiClass*>, String&lt;char>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583466"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584919">
            <name>const UnaryFun&lt;Pair&lt;String&lt;char>, BidiPairedBracketType*>, String&lt;char>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583645"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584330">
            <name>const UnaryFun&lt;Pair&lt;String&lt;char>, BinaryProperty*>, String&lt;char>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582388"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584433">
            <name>const UnaryFun&lt;Pair&lt;String&lt;char>, Block*>, String&lt;char>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582568"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584514">
            <name>const UnaryFun&lt;Pair&lt;String&lt;char>, GeneralCategory*>, String&lt;char>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582749"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584757">
            <name>const UnaryFun&lt;Pair&lt;String&lt;char>, NumericType*>, String&lt;char>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583287"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584676">
            <name>const UnaryFun&lt;Pair&lt;String&lt;char>, Script*>, String&lt;char>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583107"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584559">
            <name>const UnaryFun&lt;Pair&lt;System.Unicode.AgeId, Age*>, System.Unicode.AgeId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582863"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584964">
            <name>const UnaryFun&lt;Pair&lt;System.Unicode.AliasTypeId, AliasType*>, System.Unicode.AliasTypeId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583759"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584802">
            <name>const UnaryFun&lt;Pair&lt;System.Unicode.BidiClassId, BidiClass*>, System.Unicode.BidiClassId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583401"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584883">
            <name>const UnaryFun&lt;Pair&lt;System.Unicode.BidiPairedBracketTypeId, BidiPairedBracketType*>, System.Unicode.BidiPairedBracketTypeId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583580"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584294">
            <name>const UnaryFun&lt;Pair&lt;System.Unicode.BinaryPropertyId, BinaryProperty*>, System.Unicode.BinaryPropertyId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582309"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584397">
            <name>const UnaryFun&lt;Pair&lt;System.Unicode.BlockId, Block*>, System.Unicode.BlockId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582503"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584478">
            <name>const UnaryFun&lt;Pair&lt;System.Unicode.GeneralCategoryId, GeneralCategory*>, System.Unicode.GeneralCategoryId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582684"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584721">
            <name>const UnaryFun&lt;Pair&lt;System.Unicode.NumericTypeId, NumericType*>, System.Unicode.NumericTypeId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583222"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584640">
            <name>const UnaryFun&lt;Pair&lt;System.Unicode.ScriptId, Script*>, System.Unicode.ScriptId>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583042"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584336">
            <name>const UnaryFun&lt;String&lt;char>, ulong>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582367"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584565">
            <name>const UnaryFun&lt;System.Unicode.AgeId, ulong>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582839"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584970">
            <name>const UnaryFun&lt;System.Unicode.AliasTypeId, ulong>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583735"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584808">
            <name>const UnaryFun&lt;System.Unicode.BidiClassId, ulong>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583377"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584889">
            <name>const UnaryFun&lt;System.Unicode.BidiPairedBracketTypeId, ulong>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583556"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584300">
            <name>const UnaryFun&lt;System.Unicode.BinaryPropertyId, ulong>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582285"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584403">
            <name>const UnaryFun&lt;System.Unicode.BlockId, ulong>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582479"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584484">
            <name>const UnaryFun&lt;System.Unicode.GeneralCategoryId, ulong>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582660"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584727">
            <name>const UnaryFun&lt;System.Unicode.NumericTypeId, ulong>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583198"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584646">
            <name>const UnaryFun&lt;System.Unicode.ScriptId, ulong>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583018"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1456">
            <name>const UnicodeException</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580084"/>
            </content>
        </type>
        <type derived="true" id="type.1457">
            <name>const UnicodeException&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580084"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.694">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.692"/>
            </content>
        </type>
        <type derived="true" id="type.696">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.692"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.695">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;Pair&lt;Key, Value>>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.692"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.881">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;T>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.879"/>
            </content>
        </type>
        <type derived="true" id="type.896">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;T>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581862"/>
            </content>
        </type>
        <type derived="true" id="type.905">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;T>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581912"/>
            </content>
        </type>
        <type derived="true" id="type.883">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;T>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.879"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581916">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;T>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581912"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581866">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;T>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581862"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581865">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;T>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581862"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.882">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;T>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.879"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581915">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;T>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1581912"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.833">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;ValueType>></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.831"/>
            </content>
        </type>
        <type derived="true" id="type.835">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;ValueType>>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.831"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.834">
            <name>const UniquePtr&lt;RedBlackTreeNode&lt;ValueType>>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.831"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.19">
            <name>const UniquePtr&lt;System.IO.ByteStream></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580305"/>
            </content>
        </type>
        <type derived="true" id="type.1580309">
            <name>const UniquePtr&lt;System.IO.ByteStream>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580305"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580308">
            <name>const UniquePtr&lt;System.IO.ByteStream>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580305"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.52">
            <name>const UniquePtr&lt;System.IO.InputStream></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580455"/>
            </content>
        </type>
        <type derived="true" id="type.1580459">
            <name>const UniquePtr&lt;System.IO.InputStream>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580455"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580458">
            <name>const UniquePtr&lt;System.IO.InputStream>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580455"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.51">
            <name>const UniquePtr&lt;System.IO.OutputStream></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580445"/>
            </content>
        </type>
        <type derived="true" id="type.1580449">
            <name>const UniquePtr&lt;System.IO.OutputStream>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580445"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580448">
            <name>const UniquePtr&lt;System.IO.OutputStream>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1580445"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1189">
            <name>const UniquePtr&lt;System.Unicode.AgeTable></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582983"/>
            </content>
        </type>
        <type derived="true" id="type.1582987">
            <name>const UniquePtr&lt;System.Unicode.AgeTable>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582983"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582986">
            <name>const UniquePtr&lt;System.Unicode.AgeTable>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582983"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1354">
            <name>const UniquePtr&lt;System.Unicode.AliasTypeTable></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583879"/>
            </content>
        </type>
        <type derived="true" id="type.1583883">
            <name>const UniquePtr&lt;System.Unicode.AliasTypeTable>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583879"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583882">
            <name>const UniquePtr&lt;System.Unicode.AliasTypeTable>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583879"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1288">
            <name>const UniquePtr&lt;System.Unicode.BidiClassTable></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583521"/>
            </content>
        </type>
        <type derived="true" id="type.1583525">
            <name>const UniquePtr&lt;System.Unicode.BidiClassTable>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583521"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583524">
            <name>const UniquePtr&lt;System.Unicode.BidiClassTable>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583521"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1321">
            <name>const UniquePtr&lt;System.Unicode.BidiPairedBracketTypeTable></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583700"/>
            </content>
        </type>
        <type derived="true" id="type.1583704">
            <name>const UniquePtr&lt;System.Unicode.BidiPairedBracketTypeTable>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583700"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583703">
            <name>const UniquePtr&lt;System.Unicode.BidiPairedBracketTypeTable>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583700"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1095">
            <name>const UniquePtr&lt;System.Unicode.BinaryPropertyTable></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582465"/>
            </content>
        </type>
        <type derived="true" id="type.1582469">
            <name>const UniquePtr&lt;System.Unicode.BinaryPropertyTable>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582465"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582468">
            <name>const UniquePtr&lt;System.Unicode.BinaryPropertyTable>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582465"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1123">
            <name>const UniquePtr&lt;System.Unicode.BlockTable></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582623"/>
            </content>
        </type>
        <type derived="true" id="type.1582627">
            <name>const UniquePtr&lt;System.Unicode.BlockTable>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582623"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582626">
            <name>const UniquePtr&lt;System.Unicode.BlockTable>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582623"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1367">
            <name>const UniquePtr&lt;System.Unicode.CharacterInfo></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583933"/>
            </content>
        </type>
        <type derived="true" id="type.1583937">
            <name>const UniquePtr&lt;System.Unicode.CharacterInfo>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583933"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583936">
            <name>const UniquePtr&lt;System.Unicode.CharacterInfo>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583933"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1391">
            <name>const UniquePtr&lt;System.Unicode.CharacterInfoPage></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1584022"/>
            </content>
        </type>
        <type derived="true" id="type.1584026">
            <name>const UniquePtr&lt;System.Unicode.CharacterInfoPage>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1584022"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584025">
            <name>const UniquePtr&lt;System.Unicode.CharacterInfoPage>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1584022"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1390">
            <name>const UniquePtr&lt;System.Unicode.CharacterTable></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1584013"/>
            </content>
        </type>
        <type derived="true" id="type.1584017">
            <name>const UniquePtr&lt;System.Unicode.CharacterTable>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1584013"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584016">
            <name>const UniquePtr&lt;System.Unicode.CharacterTable>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1584013"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1375">
            <name>const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583962"/>
            </content>
        </type>
        <type derived="true" id="type.1583966">
            <name>const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583962"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583965">
            <name>const UniquePtr&lt;System.Unicode.ExtendedCharacterInfo>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583962"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1399">
            <name>const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoHeader></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1584051"/>
            </content>
        </type>
        <type derived="true" id="type.1584055">
            <name>const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoHeader>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1584051"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584054">
            <name>const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoHeader>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1584051"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1400">
            <name>const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1584060"/>
            </content>
        </type>
        <type derived="true" id="type.1584064">
            <name>const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1584060"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584063">
            <name>const UniquePtr&lt;System.Unicode.ExtendedCharacterInfoPage>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1584060"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1156">
            <name>const UniquePtr&lt;System.Unicode.GeneralCategoryTable></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582804"/>
            </content>
        </type>
        <type derived="true" id="type.1582808">
            <name>const UniquePtr&lt;System.Unicode.GeneralCategoryTable>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582804"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582807">
            <name>const UniquePtr&lt;System.Unicode.GeneralCategoryTable>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1582804"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1260">
            <name>const UniquePtr&lt;System.Unicode.NumericTypeTable></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583364"/>
            </content>
        </type>
        <type derived="true" id="type.1583368">
            <name>const UniquePtr&lt;System.Unicode.NumericTypeTable>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583364"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583367">
            <name>const UniquePtr&lt;System.Unicode.NumericTypeTable>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583364"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1222">
            <name>const UniquePtr&lt;System.Unicode.ScriptTable></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583162"/>
            </content>
        </type>
        <type derived="true" id="type.1583166">
            <name>const UniquePtr&lt;System.Unicode.ScriptTable>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583162"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583165">
            <name>const UniquePtr&lt;System.Unicode.ScriptTable>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1583162"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1409">
            <name>const UniquePtr&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1584089"/>
            </content>
        </type>
        <type derived="true" id="type.1418">
            <name>const UniquePtr&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1584100"/>
            </content>
        </type>
        <type derived="true" id="type.1419">
            <name>const UniquePtr&lt;T></name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1584111"/>
            </content>
        </type>
        <type derived="true" id="type.1584105">
            <name>const UniquePtr&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1584100"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584116">
            <name>const UniquePtr&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1584111"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1412">
            <name>const UniquePtr&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1584089"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584105">
            <name>const UniquePtr&lt;T>&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1584100"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584114">
            <name>const UniquePtr&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1584111"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1410">
            <name>const UniquePtr&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1584089"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584103">
            <name>const UniquePtr&lt;T>*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1584100"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.654">
            <name>const Value&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579975"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.501">
            <name>const ValueType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579949"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.804">
            <name>const ValueType&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580043"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.503">
            <name>const ValueType*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1579949"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.805">
            <name>const ValueType*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="1580043"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580924">
            <name>const bool&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1579450"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581543">
            <name>const byte&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1579452"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581538">
            <name>const byte*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1579452"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584267">
            <name>const byte*&amp;&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1579452"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580242">
            <name>const char&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1579461"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1579514">
            <name>const char*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1579461"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584154">
            <name>const char*&amp;&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1579461"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581153">
            <name>const long&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1579457"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1581154">
            <name>const long*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1579457"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584225">
            <name>const long*&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1579457"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584224">
            <name>const long*&amp;&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1579457"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580366">
            <name>const uchar&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1579463"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580367">
            <name>const uchar*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1579463"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584254">
            <name>const uchar*&amp;&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1579463"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583994">
            <name>const uint&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1579456"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1583995">
            <name>const uint*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1579456"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1582655">
            <name>const ulong</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1579458"/>
            </content>
        </type>
        <type derived="true" id="type.1580416">
            <name>const ulong&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1579458"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580417">
            <name>const ulong*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1579458"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580322">
            <name>const wchar&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1579462"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1580323">
            <name>const wchar*</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1579462"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584247">
            <name>const wchar*&amp;&amp;</name>
            <content>
                <qualifier>const</qualifier>
                <baseType ref="type.1579462"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type basic="true" id="type.1579460">
            <name>double</name>
        </type>
        <type derived="true" id="type.1580479">
            <name>double&amp;</name>
            <content>
                <baseType ref="type.1579460"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type basic="true" id="type.1579459">
            <name>float</name>
        </type>
        <type derived="true" id="type.1580478">
            <name>float&amp;</name>
            <content>
                <baseType ref="type.1579459"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type basic="true" id="type.1579455">
            <name>int</name>
        </type>
        <type derived="true" id="type.1580475">
            <name>int&amp;</name>
            <content>
                <baseType ref="type.1579455"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type basic="true" id="type.1579457">
            <name>long</name>
        </type>
        <type derived="true" id="type.1580477">
            <name>long&amp;</name>
            <content>
                <baseType ref="type.1579457"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1579480">
            <name>long*</name>
            <content>
                <baseType ref="type.1579457"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.1579451">
            <name>sbyte</name>
        </type>
        <type derived="true" id="type.1580471">
            <name>sbyte&amp;</name>
            <content>
                <baseType ref="type.1579451"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type basic="true" id="type.1579453">
            <name>short</name>
        </type>
        <type derived="true" id="type.1580473">
            <name>short&amp;</name>
            <content>
                <baseType ref="type.1579453"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type basic="true" id="type.1579463">
            <name>uchar</name>
        </type>
        <type derived="true" id="type.1580375">
            <name>uchar&amp;</name>
            <content>
                <baseType ref="type.1579463"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1579492">
            <name>uchar*</name>
            <content>
                <baseType ref="type.1579463"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1585036">
            <name>uchar*&amp;</name>
            <content>
                <baseType ref="type.1579463"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584148">
            <name>uchar*&amp;&amp;</name>
            <content>
                <baseType ref="type.1579463"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type basic="true" id="type.1579456">
            <name>uint</name>
        </type>
        <type derived="true" id="type.1580476">
            <name>uint&amp;</name>
            <content>
                <baseType ref="type.1579456"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1579478">
            <name>uint*</name>
            <content>
                <baseType ref="type.1579456"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type basic="true" id="type.1579458">
            <name>ulong</name>
        </type>
        <type derived="true" id="type.1580411">
            <name>ulong&amp;</name>
            <content>
                <baseType ref="type.1579458"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1579482">
            <name>ulong*</name>
            <content>
                <baseType ref="type.1579458"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584157">
            <name>ulong*&amp;</name>
            <content>
                <baseType ref="type.1579458"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584152">
            <name>ulong*&amp;&amp;</name>
            <content>
                <baseType ref="type.1579458"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type basic="true" id="type.1579454">
            <name>ushort</name>
        </type>
        <type derived="true" id="type.1580474">
            <name>ushort&amp;</name>
            <content>
                <baseType ref="type.1579454"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type basic="true" id="type.1579464">
            <name>void</name>
        </type>
        <type derived="true" id="type.1579513">
            <name>void*</name>
            <content>
                <baseType ref="type.1579464"/>
                <qualifier>*</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584163">
            <name>void*&amp;</name>
            <content>
                <baseType ref="type.1579464"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1584135">
            <name>void*&amp;&amp;</name>
            <content>
                <baseType ref="type.1579464"/>
                <qualifier>*</qualifier>
                <qualifier>&amp;&amp;</qualifier>
            </content>
        </type>
        <type basic="true" id="type.1579462">
            <name>wchar</name>
        </type>
        <type derived="true" id="type.1580331">
            <name>wchar&amp;</name>
            <content>
                <baseType ref="type.1579462"/>
                <qualifier>&amp;</qualifier>
            </content>
        </type>
        <type derived="true" id="type.1579490">
            <name>wchar*</name>
            <content>
                <baseType ref="type.1579462"/>
                <qualifier>*</qualifier>
            </content>
        </type>
    </types>
</library>
